,method,test
0,"    public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates,
                                               final Closure<? super E>[] closures) {
        return SwitchClosure.<E>switchClosure(predicates, closures, null);
    }","  public void test0()  throws Throwable  {
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      HashMap<InstanceofPredicate, Transformer<Object, Boolean>> hashMap1 = new HashMap<InstanceofPredicate, Transformer<Object, Boolean>>();
      Transformer<Object, Boolean> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends Boolean>>) hashMap1);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 4);
      closureArray0[0] = closure0;
      closureArray0[1] = closure0;
      closureArray0[2] = closure0;
      closureArray0[3] = closure0;
      Closure<AllPredicate<NullIsTruePredicate>> closure1 = ClosureUtils.switchClosure((Predicate<? super AllPredicate<NullIsTruePredicate>>[]) predicateArray0, (Closure<? super AllPredicate<NullIsTruePredicate>>[]) closureArray0, (Closure<? super AllPredicate<NullIsTruePredicate>>) closure0);
}"
1,"    public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate,
                                           final Closure<? super E> trueClosure) {
        return IfClosure.<E>ifClosure(predicate, trueClosure);
    }","  public void test1()  throws Throwable  {
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(identityPredicate0, closure0, closure0);
      Closure<String> closure1 = ClosureUtils.ifClosure((Predicate<? super String>) identityPredicate0, (Closure<? super String>) ifClosure0);
}"
2,"    public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures) {
        return ChainedClosure.chainedClosure(closures);
    }","  public void test2()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      Closure<Object> closure0 = ClosureUtils.invokerClosure("""", (Class<?>[]) classArray0, (Object[]) classArray0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 9);
      closureArray0[0] = closure0;
      closureArray0[1] = closureArray0[0];
      closureArray0[2] = closure0;
      closureArray0[3] = closure0;
      closureArray0[4] = closure0;
      closureArray0[5] = closure0;
      closureArray0[6] = closure0;
      closureArray0[7] = closure0;
      closureArray0[8] = closure0;
      Closure<Object> closure1 = ClosureUtils.chainedClosure((Closure<? super Object>[]) closureArray0);
}"
3,"    public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure) {
        return WhileClosure.<E>whileClosure(predicate, closure, false);
    }","  public void test3()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      // Undeclared exception!
      try { 
        ClosureUtils.whileClosure((Predicate<? super AllPredicate<TruePredicate>>) predicate0, (Closure<? super AllPredicate<TruePredicate>>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException(""org.apache.commons.collections4.functors.WhileClosure"", e);
      }
  }"
4,"    public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates,
                                               final Closure<? super E>[] closures) {
        return SwitchClosure.<E>switchClosure(predicates, closures, null);
    }","  public void test4()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = predicate0;
      predicateArray0[6] = predicate0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 4);
      HashMap<InstanceofPredicate, Closure<Object>> hashMap0 = new HashMap<InstanceofPredicate, Closure<Object>>();
      HashMap<Predicate<Object>, Closure<Object>> hashMap1 = new HashMap<Predicate<Object>, Closure<Object>>(hashMap0);
      Closure<Object> closure0 = ClosureUtils.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap1);
      closureArray0[0] = closure0;
      closureArray0[1] = closure0;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      closureArray0[2] = (Closure<Object>) chainedClosure0;
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closure0, true);
      closureArray0[3] = (Closure<Object>) whileClosure0;
      // Undeclared exception!
      try { 
        ClosureUtils.switchClosure((Predicate<? super Object>[]) predicateArray0, (Closure<? super Object>[]) closureArray0, (Closure<? super Object>) closure0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The predicate and closure arrays must be the same size
         //
         verifyException(""org.apache.commons.collections4.functors.SwitchClosure"", e);
      }
  }"
5,"    public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates,
                                               final Closure<? super E>[] closures) {
        return SwitchClosure.<E>switchClosure(predicates, closures, null);
    }","  public void test5()  throws Throwable  {
      Closure<InstanceofPredicate> closure0 = ClosureUtils.invokerClosure(""org.apache.commons.collections4.functors.ConstantFactory"");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      Closure<InstanceofPredicate>[] closureArray0 = (Closure<InstanceofPredicate>[]) Array.newInstance(Closure.class, 5);
      closureArray0[0] = closure0;
      closureArray0[1] = closure0;
      closureArray0[2] = closure0;
      closureArray0[3] = closure0;
      closureArray0[4] = closure0;
      // Undeclared exception!
      try { 
        ClosureUtils.switchClosure((Predicate<? super InstanceofPredicate>[]) predicateArray0, (Closure<? super InstanceofPredicate>[]) closureArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The predicate and closure arrays must be the same size
         //
         verifyException(""org.apache.commons.collections4.functors.SwitchClosure"", e);
      }
  }"
6,"    public static <E> Closure<E> invokerClosure(final String methodName) {
        // reuse transformer as it has caching - this is lazy really, should have inner class here
        return asClosure(InvokerTransformer.<E, Object>invokerTransformer(methodName));
    }","  public void test6()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Class<InstanceofPredicate>[] classArray0 = (Class<InstanceofPredicate>[]) Array.newInstance(Class.class, 3);
      // Undeclared exception!
      try { 
        ClosureUtils.invokerClosure((String) null, (Class<?>[]) classArray0, (Object[]) predicateArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The method to invoke must not be null
         //
         verifyException(""org.apache.commons.collections4.functors.InvokerTransformer"", e);
      }
  }"
7,"    public static <E> Closure<E> invokerClosure(final String methodName) {
        // reuse transformer as it has caching - this is lazy really, should have inner class here
        return asClosure(InvokerTransformer.<E, Object>invokerTransformer(methodName));
    }","  public void test7()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 2);
      // Undeclared exception!
      try { 
        ClosureUtils.invokerClosure("""", (Class<?>[]) classArray0, (Object[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The parameter types must match the arguments
         //
         verifyException(""org.apache.commons.collections4.functors.InvokerTransformer"", e);
      }
  }"
8,"    public static <E> Closure<E> invokerClosure(final String methodName) {
        // reuse transformer as it has caching - this is lazy really, should have inner class here
        return asClosure(InvokerTransformer.<E, Object>invokerTransformer(methodName));
    }","  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClosureUtils.invokerClosure((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The method to invoke must not be null
         //
         verifyException(""org.apache.commons.collections4.functors.InvokerTransformer"", e);
      }
  }"
9,"    public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate,
                                           final Closure<? super E> trueClosure) {
        return IfClosure.<E>ifClosure(predicate, trueClosure);
    }","  public void test9()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      // Undeclared exception!
      try { 
        ClosureUtils.ifClosure((Predicate<? super SwitchClosure<AllPredicate>>) predicate0, (Closure<? super SwitchClosure<AllPredicate>>) null, (Closure<? super SwitchClosure<AllPredicate>>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Closures must not be null
         //
         verifyException(""org.apache.commons.collections4.functors.IfClosure"", e);
      }
  }"
10,"    public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure,
                                                final Predicate<? super E> predicate) {
        return WhileClosure.<E>whileClosure(predicate, closure, true);
    }","  public void test10()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 7);
      Transformer<Object, InstanceofPredicate> transformer0 = InvokerTransformer.invokerTransformer(""-t/MdY>FdH:^H"", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      // Undeclared exception!
      try { 
        ClosureUtils.doWhileClosure((Closure<? super Object>) transformerClosure0, (Predicate<? super Object>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException(""org.apache.commons.collections4.functors.WhileClosure"", e);
      }
  }"
11,"    public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures) {
        return ChainedClosure.chainedClosure(closures);
    }","  public void test11()  throws Throwable  {
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      linkedList0.add((Closure<Object>) null);
      // Undeclared exception!
      try { 
        ClosureUtils.chainedClosure((Collection<? extends Closure<? super NOPClosure<NOPClosure>>>) linkedList0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The closure array must not contain a null closure, index 0 was null
         //
         verifyException(""org.apache.commons.collections4.functors.FunctorUtils"", e);
      }
  }"
12,"    public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer) {
        return TransformerClosure.transformerClosure(transformer);
    }","  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-1916));
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      Closure<Boolean> closure0 = ClosureUtils.asClosure((Transformer<? super Boolean, ?>) constantTransformer0);
}"
13,"    public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures) {
        if (objectsAndClosures == null) {
            throw new NullPointerException(""The object and closure map must not be null"");
        }
        final Closure<? super E> def = objectsAndClosures.remove(null);
        final int size = objectsAndClosures.size();
        final Closure<? super E>[] trs = new Closure[size];
        final Predicate<E>[] preds = new Predicate[size];
        int i = 0;
        for (final Map.Entry<? extends E, Closure<E>> entry : objectsAndClosures.entrySet()) {
            preds[i] = EqualPredicate.<E>equalPredicate(entry.getKey());
            trs[i] = entry.getValue();
            i++;
        }
        return ClosureUtils.<E>switchClosure(preds, trs, def);
    }","  public void test13()  throws Throwable  {
      Closure<NullIsExceptionPredicate<InstanceofPredicate>> closure0 = ClosureUtils.invokerClosure(""QYsS]*bf"");
      Closure<Object> closure1 = NOPClosure.nopClosure();
      HashMap<String, Closure<String>> hashMap0 = new HashMap<String, Closure<String>>();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(closure0);
      IfClosure<String> ifClosure0 = new IfClosure<String>(identityPredicate0, closure1);
      hashMap0.put(""QYsS]*bf"", ifClosure0);
      Closure<String> closure2 = ClosureUtils.switchMapClosure((Map<? extends String, Closure<String>>) hashMap0);
}"
14,"    public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures) {
        if (objectsAndClosures == null) {
            throw new NullPointerException(""The object and closure map must not be null"");
        }
        final Closure<? super E> def = objectsAndClosures.remove(null);
        final int size = objectsAndClosures.size();
        final Closure<? super E>[] trs = new Closure[size];
        final Predicate<E>[] preds = new Predicate[size];
        int i = 0;
        for (final Map.Entry<? extends E, Closure<E>> entry : objectsAndClosures.entrySet()) {
            preds[i] = EqualPredicate.<E>equalPredicate(entry.getKey());
            trs[i] = entry.getValue();
            i++;
        }
        return ClosureUtils.<E>switchClosure(preds, trs, def);
    }","  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClosureUtils.switchMapClosure((Map<? extends IfClosure<TransformerPredicate>, Closure<IfClosure<TransformerPredicate>>>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The object and closure map must not be null
         //
         verifyException(""org.apache.commons.collections4.ClosureUtils"", e);
      }
  }"
15,"    public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates,
                                               final Closure<? super E>[] closures) {
        return SwitchClosure.<E>switchClosure(predicates, closures, null);
    }","  public void test15()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 9);
      Closure<Object> closure0 = ClosureUtils.nopClosure();
      // Undeclared exception!
      try { 
        ClosureUtils.switchClosure((Predicate<? super Object>[]) predicateArray0, (Closure<? super Object>[]) closureArray0, (Closure<? super Object>) closure0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The predicate array must not contain a null predicate, index 0 was null
         //
         verifyException(""org.apache.commons.collections4.functors.FunctorUtils"", e);
      }
  }"
16,"    public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate,
                                           final Closure<? super E> trueClosure) {
        return IfClosure.<E>ifClosure(predicate, trueClosure);
    }","  public void test16()  throws Throwable  {
      Closure<Object> closure0 = ClosureUtils.nopClosure();
      // Undeclared exception!
      try { 
        ClosureUtils.ifClosure((Predicate<? super Object>) null, (Closure<? super Object>) closure0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException(""org.apache.commons.collections4.functors.IfClosure"", e);
      }
  }"
17,"    public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures) {
        return ChainedClosure.chainedClosure(closures);
    }","  public void test17()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 9);
      // Undeclared exception!
      try { 
        ClosureUtils.chainedClosure((Closure<? super Object>[]) closureArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The closure array must not contain a null closure, index 0 was null
         //
         verifyException(""org.apache.commons.collections4.functors.FunctorUtils"", e);
      }
  }"
18,"    public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures) {
        return ChainedClosure.chainedClosure(closures);
    }","  public void test18()  throws Throwable  {
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      Closure<Object> closure0 = ClosureUtils.chainedClosure((Collection<? extends Closure<? super Object>>) linkedList0);
}"
19,"    public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure) {
        return ForClosure.forClosure(count, closure);
    }","  public void test19()  throws Throwable  {
      Closure<Object> closure0 = ClosureUtils.nopClosure();
      ForClosure<Object> forClosure0 = new ForClosure<Object>(0, closure0);
      Closure<Object> closure1 = ClosureUtils.forClosure(0, (Closure<? super Object>) forClosure0);
}"
20,"    public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates,
                                               final Closure<? super E>[] closures) {
        return SwitchClosure.<E>switchClosure(predicates, closures, null);
    }","  public void test20()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Closure<InstanceofPredicate>[] closureArray0 = (Closure<InstanceofPredicate>[]) Array.newInstance(Closure.class, 5);
      // Undeclared exception!
      try { 
        ClosureUtils.switchClosure((Predicate<? super InstanceofPredicate>[]) predicateArray0, (Closure<? super InstanceofPredicate>[]) closureArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The predicate array must not contain a null predicate, index 0 was null
         //
         verifyException(""org.apache.commons.collections4.functors.FunctorUtils"", e);
      }
  }"
21,"    public static <E> Closure<E> exceptionClosure() {
        return ExceptionClosure.<E>exceptionClosure();
    }","  public void test21()  throws Throwable  {
      Closure<UniquePredicate<SwitchClosure>> closure0 = ClosureUtils.exceptionClosure();
}"
22,"    public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate,
                                           final Closure<? super E> trueClosure) {
        return IfClosure.<E>ifClosure(predicate, trueClosure);
    }","  public void test22()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      Closure<Object> closure0 = ClosureUtils.nopClosure();
      ForClosure<Object> forClosure0 = new ForClosure<Object>(0, closure0);
      Closure<Object> closure1 = ClosureUtils.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) forClosure0, (Closure<? super Object>) closure0);
}"
23,"    public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure) {
        return WhileClosure.<E>whileClosure(predicate, closure, false);
    }","  public void test23()  throws Throwable  {
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(""org.apache.commons.collections4.ClosureUtils"");
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = ClosureUtils.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Closure<Object> closure1 = ClosureUtils.whileClosure((Predicate<? super Object>) equalPredicate0, (Closure<? super Object>) closure0);
}"
24,"    public static <T> T get(final Enumeration<T> e, final int index) {
        int i = index;
        CollectionUtils.checkIndexBounds(i);
        while (e.hasMoreElements()) {
            i--;
            if (i == -1) {
                return e.nextElement();
            }
            e.nextElement();
        }
        throw new IndexOutOfBoundsException(""Entry does not exist: "" + i);
    }","  public void test0()  throws Throwable  {
      Enumeration<Integer> enumeration0 = (Enumeration<Integer>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Enumeration<String> enumeration1 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(enumeration1).hasMoreElements();
      doReturn((Object) null).when(enumeration1).nextElement();
      // Undeclared exception!
      try { 
        EnumerationUtils.get(enumeration1, 3552);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 3551
         //
         verifyException(""org.apache.commons.collections4.EnumerationUtils"", e);
      }
  }"
25,"    public static <E> List<E> toList(final Enumeration<? extends E> enumeration) {
        return IteratorUtils.toList(new EnumerationIterator<>(enumeration));
    }","  public void test1()  throws Throwable  {
      boolean boolean0 = true;
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      EnumerationUtils.toList((Enumeration<? extends String>) enumeration0);
      Enumeration<String> enumeration1 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(enumeration1).hasMoreElements();
      doReturn((Object) null).when(enumeration1).nextElement();
      EnumerationUtils.toList((Enumeration<?>) enumeration1);
      boolean boolean1 = false;
      Enumeration<String> enumeration2 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1).when(enumeration2).hasMoreElements();
      EnumerationUtils.toList((Enumeration<? extends String>) enumeration2);
      String string0 = ""Dt:el(f; 4b,B"";
      String string1 = ""2' *PJI:|"";
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string1);
      String string2 = ""add() not supported for empty Iterator"";
      stringTokenizer0.nextToken(string2);
      stringTokenizer0.nextElement();
      stringTokenizer0.hasMoreElements();
      EnumerationUtils.toList(stringTokenizer0);
      Enumeration<Integer> enumeration3 = (Enumeration<Integer>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        stringTokenizer0.nextToken();
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.StringTokenizer"", e);
      }
  }"
26,"    public static <E> List<E> toList(final Enumeration<? extends E> enumeration) {
        return IteratorUtils.toList(new EnumerationIterator<>(enumeration));
    }","  public void test2()  throws Throwable  {
      String string0 = ""'9r8.nToY23"";
      StringTokenizer stringTokenizer0 = new StringTokenizer(""'9r8.nToY23"", ""_GrP(#62(hnInMC>"", false);
      stringTokenizer0.hasMoreElements();
      stringTokenizer0.hasMoreTokens();
      stringTokenizer0.nextToken();
      stringTokenizer0.nextElement();
      EnumerationUtils.get((Enumeration<Object>) stringTokenizer0, 1);
      EnumerationUtils.toList(stringTokenizer0);
      // Undeclared exception!
      try { 
        stringTokenizer0.nextElement();
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.StringTokenizer"", e);
      }
  }"
27,"    public static <T> T get(final Enumeration<T> e, final int index) {
        int i = index;
        CollectionUtils.checkIndexBounds(i);
        while (e.hasMoreElements()) {
            i--;
            if (i == -1) {
                return e.nextElement();
            }
            e.nextElement();
        }
        throw new IndexOutOfBoundsException(""Entry does not exist: "" + i);
    }","  public void test3()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer(""5Cb:2w1u"", """");
      // Undeclared exception!
      try { 
        EnumerationUtils.get((Enumeration<Object>) stringTokenizer0, 2531);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2530
         //
         verifyException(""org.apache.commons.collections4.EnumerationUtils"", e);
      }
  }"
28,"    public static <E> List<E> toList(final Enumeration<? extends E> enumeration) {
        return IteratorUtils.toList(new EnumerationIterator<>(enumeration));
    }","  public void test4()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer(""org.apache.commons.collections4.iterators.EmptyListIterator"");
      stringTokenizer0.nextToken();
      EnumerationUtils.toList(stringTokenizer0);
      stringTokenizer0.hasMoreTokens();
      EnumerationUtils.toList(stringTokenizer0);
      Enumeration<Integer> enumeration0 = null;
      // Undeclared exception!
      try { 
        EnumerationUtils.toList((Enumeration<? extends Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
29,"    public static <E> List<E> toList(final Enumeration<? extends E> enumeration) {
        return IteratorUtils.toList(new EnumerationIterator<>(enumeration));
    }","  public void test5()  throws Throwable  {
      Enumeration<Integer> enumeration0 = (Enumeration<Integer>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      EnumerationUtils.toList((Enumeration<?>) enumeration0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("""", (String) null);
      // Undeclared exception!
      try { 
        EnumerationUtils.toList(stringTokenizer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.StringTokenizer"", e);
      }
  }"
30,"    public static <E> List<E> toList(final Enumeration<? extends E> enumeration) {
        return IteratorUtils.toList(new EnumerationIterator<>(enumeration));
    }","  public void test6()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer(""VK!/"", """");
      List<Object> list0 = EnumerationUtils.toList((Enumeration<?>) stringTokenizer0);
}"
31,"    public static <T> T get(final Enumeration<T> e, final int index) {
        int i = index;
        CollectionUtils.checkIndexBounds(i);
        while (e.hasMoreElements()) {
            i--;
            if (i == -1) {
                return e.nextElement();
            }
            e.nextElement();
        }
        throw new IndexOutOfBoundsException(""Entry does not exist: "" + i);
    }","  public void test7()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer(""#"");
      stringTokenizer0.hasMoreElements();
      stringTokenizer0.nextElement();
      stringTokenizer0.hasMoreElements();
      EnumerationUtils.toList(stringTokenizer0);
      Enumeration<String> enumeration0 = null;
      int int0 = 1;
      // Undeclared exception!
      try { 
        EnumerationUtils.get((Enumeration<String>) null, 1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
32,"    public static <E> List<E> toList(final Enumeration<? extends E> enumeration) {
        return IteratorUtils.toList(new EnumerationIterator<>(enumeration));
    }","  public void test8()  throws Throwable  {
      Enumeration<Integer> enumeration0 = (Enumeration<Integer>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      List<Integer> list0 = EnumerationUtils.toList((Enumeration<? extends Integer>) enumeration0);
}"
33,"    public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie) {
        return UnmodifiableTrie.unmodifiableTrie(trie);
    }","  public void test0()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      Trie<String, String> trie0 = TrieUtils.unmodifiableTrie((Trie<String, ? extends String>) patriciaTrie0);
}"
34,"    public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie) {
        return UnmodifiableTrie.unmodifiableTrie(trie);
    }","  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        TrieUtils.unmodifiableTrie((Trie<Object, ? extends Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Trie must not be null
         //
         verifyException(""org.apache.commons.collections4.trie.UnmodifiableTrie"", e);
      }
  }"
35,"    public static <T> Factory<T> prototypeFactory(final T prototype) {
        return PrototypeFactory.<T>prototypeFactory(prototype);
    }","  public void test0()  throws Throwable  {
      Factory<String> factory0 = FactoryUtils.prototypeFactory(""org.apache.commons.collections4.functors.ConstantFactory"");
      // Undeclared exception!
      try { 
        FactoryUtils.prototypeFactory((Object) factory0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The prototype must be cloneable via a public clone method
         //
         verifyException(""org.apache.commons.collections4.functors.PrototypeFactory"", e);
      }
  }"
36,"    public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate) {
        return InstantiateFactory.instantiateFactory(classToInstantiate, null, null);
    }","  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        FactoryUtils.instantiateFactory((Class<String>) null, (Class<?>[]) null, (Object[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Class to instantiate must not be null
         //
         verifyException(""org.apache.commons.collections4.functors.InstantiateFactory"", e);
      }
  }"
37,"    public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate) {
        return InstantiateFactory.instantiateFactory(classToInstantiate, null, null);
    }","  public void test2()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      // Undeclared exception!
      try { 
        FactoryUtils.instantiateFactory(class0, (Class<?>[]) classArray0, (Object[]) classArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // InstantiateFactory: The constructor must exist and be public 
         //
         verifyException(""org.apache.commons.collections4.functors.InstantiateFactory"", e);
      }
  }"
38,"    public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate) {
        return InstantiateFactory.instantiateFactory(classToInstantiate, null, null);
    }","  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        FactoryUtils.instantiateFactory((Class<Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Class to instantiate must not be null
         //
         verifyException(""org.apache.commons.collections4.functors.InstantiateFactory"", e);
      }
  }"
39,"    public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate) {
        return InstantiateFactory.instantiateFactory(classToInstantiate, null, null);
    }","  public void test4()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        FactoryUtils.instantiateFactory(class0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // InstantiateFactory: The constructor must exist and be public 
         //
         verifyException(""org.apache.commons.collections4.functors.InstantiateFactory"", e);
      }
  }"
40,"    public static <T> Factory<T> constantFactory(final T constantToReturn) {
        return ConstantFactory.constantFactory(constantToReturn);
    }","  public void test5()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Factory<Object> factory0 = FactoryUtils.constantFactory((Object) class0);
}"
41,"    public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate) {
        return InstantiateFactory.instantiateFactory(classToInstantiate, null, null);
    }","  public void test6()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Factory<Object> factory0 = FactoryUtils.instantiateFactory(class0);
}"
42,"    public static <T> Factory<T> exceptionFactory() {
        return ExceptionFactory.<T>exceptionFactory();
    }","  public void test7()  throws Throwable  {
      Factory<String> factory0 = FactoryUtils.exceptionFactory();
}"
43,"    public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate) {
        return InstantiateFactory.instantiateFactory(classToInstantiate, null, null);
    }","  public void test8()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Factory<Object> factory0 = FactoryUtils.instantiateFactory(class0, (Class<?>[]) null, (Object[]) null);
}"
44,"    public static <T> Factory<T> nullFactory() {
        return ConstantFactory.<T>constantFactory(null);
    }","  public void test9()  throws Throwable  {
      Factory<String> factory0 = FactoryUtils.nullFactory();
}"
45,"    public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset) {
        return UnmodifiableMultiSet.unmodifiableMultiSet(multiset);
    }","  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiSetUtils.unmodifiableMultiSet((MultiSet<? extends Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.AbstractCollectionDecorator"", e);
      }
  }"
46,"    public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset) {
        return SynchronizedMultiSet.synchronizedMultiSet(multiset);
    }","  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiSetUtils.synchronizedMultiSet((MultiSet<Object>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.SynchronizedCollection"", e);
      }
  }"
47,"    public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset,
            final Predicate<? super E> predicate) {
        return PredicatedMultiSet.predicatedMultiSet(multiset, predicate);
    }","  public void test2()  throws Throwable  {
      MultiSet<Integer> multiSet0 = MultiSetUtils.emptyMultiSet();
      // Undeclared exception!
      try { 
        MultiSetUtils.predicatedMultiSet(multiSet0, (Predicate<? super Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Predicate must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.PredicatedCollection"", e);
      }
  }"
48,"    public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset) {
        return UnmodifiableMultiSet.unmodifiableMultiSet(multiset);
    }","  public void test3()  throws Throwable  {
      MultiSet<Integer> multiSet0 = MultiSetUtils.emptyMultiSet();
      MultiSet<Object> multiSet1 = MultiSetUtils.unmodifiableMultiSet((MultiSet<?>) multiSet0);
}"
49,"    public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset,
            final Predicate<? super E> predicate) {
        return PredicatedMultiSet.predicatedMultiSet(multiset, predicate);
    }","  public void test4()  throws Throwable  {
      MultiSet<Integer> multiSet0 = MultiSetUtils.emptyMultiSet();
      Predicate<Integer> predicate0 = (Predicate<Integer>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      MultiSet<Integer> multiSet1 = MultiSetUtils.predicatedMultiSet(multiSet0, (Predicate<? super Integer>) predicate0);
}"
50,"    public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset,
            final Predicate<? super E> predicate) {
        return PredicatedMultiSet.predicatedMultiSet(multiset, predicate);
    }","  public void test5()  throws Throwable  {
      MultiSet<Integer> multiSet0 = MultiSetUtils.emptyMultiSet();
      MultiSet<Integer> multiSet1 = MultiSetUtils.synchronizedMultiSet(multiSet0);
      Predicate<Integer> predicate0 = (Predicate<Integer>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      MultiSet<Integer> multiSet2 = MultiSetUtils.predicatedMultiSet(multiSet1, (Predicate<? super Integer>) predicate0);
}"
51,"    public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate) {
        return PredicatedQueue.predicatedQueue(queue, predicate);
    }","  public void test0()  throws Throwable  {
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Queue<String> queue0 = QueueUtils.emptyQueue();
      Queue<String> queue1 = QueueUtils.synchronizedQueue(queue0);
      Queue<String> queue2 = QueueUtils.predicatedQueue(queue1, (Predicate<? super String>) predicate0);
}"
52,"    public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue) {
        return UnmodifiableQueue.unmodifiableQueue(queue);
    }","  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueueUtils.unmodifiableQueue((Queue<? extends String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.AbstractCollectionDecorator"", e);
      }
  }"
53,"    public static <E> Queue<E> transformingQueue(final Queue<E> queue,
                                                 final Transformer<? super E, ? extends E> transformer) {
        return TransformedQueue.transformingQueue(queue, transformer);
    }","  public void test2()  throws Throwable  {
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        QueueUtils.transformingQueue((Queue<String>) null, (Transformer<? super String, ? extends String>) transformer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.AbstractCollectionDecorator"", e);
      }
  }"
54,"    public static <E> Queue<E> synchronizedQueue(final Queue<E> queue) {
        return SynchronizedQueue.synchronizedQueue(queue);
    }","  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueueUtils.synchronizedQueue((Queue<Object>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.SynchronizedCollection"", e);
      }
  }"
55,"    public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate) {
        return PredicatedQueue.predicatedQueue(queue, predicate);
    }","  public void test4()  throws Throwable  {
      Queue<Integer> queue0 = QueueUtils.emptyQueue();
      // Undeclared exception!
      try { 
        QueueUtils.predicatedQueue(queue0, (Predicate<? super Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Predicate must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.PredicatedCollection"", e);
      }
  }"
56,"    public static <E> Queue<E> transformingQueue(final Queue<E> queue,
                                                 final Transformer<? super E, ? extends E> transformer) {
        return TransformedQueue.transformingQueue(queue, transformer);
    }","  public void test5()  throws Throwable  {
      Queue<String> queue0 = QueueUtils.emptyQueue();
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Queue<String> queue1 = QueueUtils.transformingQueue(queue0, (Transformer<? super String, ? extends String>) transformer0);
}"
57,"    public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue) {
        return UnmodifiableQueue.unmodifiableQueue(queue);
    }","  public void test6()  throws Throwable  {
      Queue<String> queue0 = QueueUtils.emptyQueue();
      Queue<Object> queue1 = QueueUtils.unmodifiableQueue((Queue<?>) queue0);
}"
58,"    public FunctorException() {
        super();
    }","  public void test0()  throws Throwable  {
      FunctorException functorException0 = new FunctorException();
  }"
59,"    public FunctorException() {
        super();
    }","  public void test1()  throws Throwable  {
      FunctorException functorException0 = new FunctorException((Throwable) null);
  }"
60,"    public FunctorException() {
        super();
    }","  public void test2()  throws Throwable  {
      FunctorException functorException0 = new FunctorException(""KCZP*30kv]j.~ky"");
  }"
61,"    public FunctorException() {
        super();
    }","  public void test3()  throws Throwable  {
      FunctorException functorException0 = new FunctorException(""KCZP*30kv]j.~ky"", (Throwable) null);
  }"
62,"    public FluentIterable<E> collate(final Iterable<? extends E> other) {
        return of(IterableUtils.collatedIterable(iterable, other));
    }","  public void test0()  throws Throwable  {
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      FluentIterable<Predicate<Object>> fluentIterable0 = FluentIterable.of((Iterable<Predicate<Object>>) arrayList0);
      fluentIterable0.spliterator();
      fluentIterable0.iterator();
      FluentIterable<Boolean> fluentIterable1 = new FluentIterable<Boolean>();
      Comparator<Boolean> comparator0 = (Comparator<Boolean>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      fluentIterable1.skip(1L);
      // Undeclared exception!
      try { 
        fluentIterable1.collate((Iterable<? extends Boolean>) null, comparator0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException(""org.apache.commons.collections4.IterableUtils"", e);
      }
  }"
63,"    public boolean anyMatch(final Predicate<? super E> predicate) {
        return IterableUtils.matchesAny(iterable, predicate);
    }","  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(1543);
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) fluentIterable0, comparator0);
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.filter(predicate0);
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      FluentIterable<Integer> fluentIterable2 = fluentIterable1.append(integerArray0);
      FluentIterable<Integer> fluentIterable3 = fluentIterable2.unmodifiable();
      Integer integer1 = new Integer(1543);
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.constantTransformer(integer1);
      IfTransformer<Integer, Integer> ifTransformer0 = new IfTransformer<Integer, Integer>(predicate0, transformer0, transformer0);
      FluentIterable<Integer> fluentIterable4 = fluentIterable3.transform((Transformer<? super Integer, ? extends Integer>) ifTransformer0);
      FluentIterable<Integer> fluentIterable5 = fluentIterable4.loop();
      boolean boolean0 = fluentIterable5.anyMatch(predicate0);
}"
64,"    public FluentIterable<E> append(final E... elements) {
        return append(Arrays.asList(elements));
    }","  public void test2()  throws Throwable  {
      FluentIterable<Boolean> fluentIterable0 = FluentIterable.empty();
      // Undeclared exception!
      try { 
        fluentIterable0.append((Iterable<? extends Boolean>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException(""org.apache.commons.collections4.IterableUtils"", e);
      }
  }"
65,"    public static <T> FluentIterable<T> of(final T singleton) {
        return of(IteratorUtils.asIterable(new SingletonIterator<>(singleton, false)));
    }","  public void test3()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(comparator0);
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.collate((Iterable<? extends Integer>) priorityQueue0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FluentIterable<Integer> fluentIterable2 = fluentIterable1.collate((Iterable<? extends Integer>) priorityQueue0, (Comparator<? super Integer>) comparator1);
      fluentIterable2.collate((Iterable<? extends Integer>) fluentIterable1);
      FluentIterable<String> fluentIterable3 = FluentIterable.empty();
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator2).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator2, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      fluentIterable3.anyMatch(predicate0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category1, locale_Category2);
      EnumSet<Locale.Category> enumSet1 = EnumSet.copyOf(enumSet0);
      FluentIterable<Locale.Category> fluentIterable4 = FluentIterable.of((Iterable<Locale.Category>) enumSet1);
      FluentIterable<Locale.Category> fluentIterable5 = fluentIterable4.zip((Iterable<? extends Locale.Category>) enumSet1);
      FluentIterable<Locale.Category> fluentIterable6 = fluentIterable5.loop();
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[6];
      locale_CategoryArray0[0] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category3;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      locale_CategoryArray0[3] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.DISPLAY;
      locale_CategoryArray0[4] = locale_Category5;
      locale_CategoryArray0[5] = locale_Category1;
      FluentIterable<Locale.Category> fluentIterable7 = fluentIterable6.append(locale_CategoryArray0);
      fluentIterable6.append((Iterable<? extends Locale.Category>) fluentIterable7);
      Boolean[] booleanArray0 = new Boolean[2];
      PredicateTransformer<String> predicateTransformer0 = new PredicateTransformer<String>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform("""");
      booleanArray0[0] = boolean0;
      Boolean boolean1 = predicateTransformer0.transform("""");
      booleanArray0[1] = boolean1;
      FluentIterable<Boolean> fluentIterable8 = FluentIterable.of(booleanArray0);
}"
66,"    public E get(final int position) {
        return IterableUtils.get(iterable, position);
    }","  public void test4()  throws Throwable  {
      FluentIterable<String> fluentIterable0 = FluentIterable.of(""Collection must not be null"");
      Transformer<String, String> transformer0 = ConstantTransformer.nullTransformer();
      IfTransformer<String, String> ifTransformer0 = new IfTransformer<String, String>((Predicate<? super String>) null, transformer0, transformer0);
      FluentIterable<String> fluentIterable1 = fluentIterable0.transform((Transformer<? super String, ? extends String>) ifTransformer0);
      FluentIterable<String> fluentIterable2 = fluentIterable1.reverse();
      FluentIterable<String> fluentIterable3 = fluentIterable2.zip((Iterable<? extends String>) fluentIterable1);
      Iterable<String>[] iterableArray0 = (Iterable<String>[]) Array.newInstance(Iterable.class, 3);
      iterableArray0[0] = (Iterable<String>) fluentIterable3;
      iterableArray0[1] = (Iterable<String>) fluentIterable0;
      iterableArray0[2] = (Iterable<String>) fluentIterable2;
      FluentIterable<String> fluentIterable4 = fluentIterable3.zip(iterableArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ""Collection must not be null"";
      stringArray0[1] = ""\""6]};;sx^c]"";
      stringArray0[2] = ""Collection must not be null"";
      stringArray0[3] = ""Collection must not be null"";
      stringArray0[4] = ""Collection must not be null"";
      stringArray0[5] = ""Collection must not be null"";
      stringArray0[6] = ""Collection must not be null"";
      FluentIterable<String> fluentIterable5 = fluentIterable4.append(stringArray0);
      // Undeclared exception!
      try { 
        fluentIterable5.get(1456);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.functors.IfTransformer"", e);
      }
  }"
67,"    public E[] toArray(final Class<E> arrayClass) {
        return IteratorUtils.toArray(iterator(), arrayClass);
    }","  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = ""5ly,pm[s8j?"";
      stringArray0[1] = """";
      stringArray0[2] = ""Collection must not be null"";
      stringArray0[3] = ""q4QP,st(C"";
      stringArray0[4] = ""n@p=0X;X}h6"";
      stringArray0[5] = """";
      stringArray0[6] = """";
      stringArray0[7] = ""#^YAO%u'HXU8T["";
      stringArray0[8] = ""! ~Rt38R>Q#'"";
      FluentIterable<String> fluentIterable0 = FluentIterable.of(stringArray0);
      FluentIterable<String> fluentIterable1 = fluentIterable0.loop();
      fluentIterable1.zip((Iterable<? extends String>) fluentIterable0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      fluentIterable1.toArray(class0);
  }"
68,"    public FluentIterable<E> skip(final long elementsToSkip) {
        return of(IterableUtils.skippingIterable(iterable, elementsToSkip));
    }","  public void test6()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(comparator0);
      FluentIterable<String> fluentIterable0 = FluentIterable.of((Iterable<String>) priorityQueue0);
      int int0 = (-3624);
      Integer integer0 = new Integer((-3624));
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) integer0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      FluentIterable<String> fluentIterable1 = fluentIterable0.filter(notPredicate0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(notPredicate0);
      notPredicate0.evaluate(nullIsTruePredicate0);
      FluentIterable<String> fluentIterable2 = fluentIterable1.collate((Iterable<? extends String>) fluentIterable0, (Comparator<? super String>) comparator1);
      fluentIterable2.size();
      FluentIterable<Predicate<Object>> fluentIterable3 = FluentIterable.empty();
      // Undeclared exception!
      try { 
        fluentIterable3.skip((-2211L));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // ElementsToSkip parameter must not be negative.
         //
         verifyException(""org.apache.commons.collections4.IterableUtils"", e);
      }
  }"
69,"    public FluentIterable<E> eval() {
        return of(toList());
    }","  public void test7()  throws Throwable  {
      String string0 = ""p"";
      FluentIterable<String> fluentIterable0 = FluentIterable.of(""p"");
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      FluentIterable<String> fluentIterable1 = fluentIterable0.transform((Transformer<? super String, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        fluentIterable1.eval();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException(""org.apache.commons.collections4.functors.ExceptionTransformer"", e);
      }
  }"
70,"    public String toString() {
        return IterableUtils.toString(iterable);
    }","  public void test8()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.of((Iterable<Locale.Category>) enumSet0);
      FluentIterable<Locale.Category> fluentIterable1 = fluentIterable0.limit(0L);
      FluentIterable<Locale.Category> fluentIterable2 = fluentIterable1.append((Iterable<? extends Locale.Category>) enumSet0);
      FluentIterable<Locale.Category> fluentIterable3 = fluentIterable2.collate((Iterable<? extends Locale.Category>) enumSet0);
      FluentIterable<Locale.Category> fluentIterable4 = fluentIterable3.unique();
      Iterable<Locale.Category>[] iterableArray0 = (Iterable<Locale.Category>[]) Array.newInstance(Iterable.class, 0);
      FluentIterable<Locale.Category> fluentIterable5 = fluentIterable4.zip(iterableArray0);
      String string0 = fluentIterable5.toString();
}"
71,"    public FluentIterable<E> filter(final Predicate<? super E> predicate) {
        return of(IterableUtils.filteredIterable(iterable, predicate));
    }","  public void test9()  throws Throwable  {
      FluentIterable.empty();
      FluentIterable<Predicate<Locale.Category>> fluentIterable0 = FluentIterable.empty();
      FluentIterable<Predicate<Locale.Category>> fluentIterable1 = fluentIterable0.limit(0L);
      FluentIterable<Predicate<Locale.Category>> fluentIterable2 = fluentIterable1.eval();
      FluentIterable<Predicate<Locale.Category>> fluentIterable3 = fluentIterable2.skip(1L);
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        fluentIterable3.filter((Predicate<? super Predicate<Locale.Category>>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Predicate must not be null.
         //
         verifyException(""org.apache.commons.collections4.IterableUtils"", e);
      }
  }"
72,"    public void forEach(final Closure<? super E> closure) {
        IterableUtils.forEach(iterable, closure);
    }","  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ""\""QG55'P0I2>"";
      stringArray0[1] = ""]`"";
      FluentIterable<String> fluentIterable0 = FluentIterable.of(stringArray0);
      FluentIterable<String> fluentIterable1 = fluentIterable0.loop();
      int int0 = 1126;
      fluentIterable0.eval();
      Closure<String> closure0 = ForClosure.forClosure(1126, (Closure<? super String>) null);
      // Undeclared exception!
      fluentIterable1.forEach(closure0);
  }"
73,"    public <O> FluentIterable<O> transform(final Transformer<? super E, ? extends O> transformer) {
        return of(IterableUtils.transformedIterable(iterable, transformer));
    }","  public void test11()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = FluentIterable.of((Object) ""S*lJ7"");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) fluentIterable0;
      objectArray0[1] = (Object) ""S*lJ7"";
      objectArray0[2] = (Object) ""S*lJ7"";
      objectArray0[3] = (Object) fluentIterable0;
      FluentIterable<Object> fluentIterable1 = fluentIterable0.append(objectArray0);
      // Undeclared exception!
      try { 
        fluentIterable1.transform((Transformer<? super Object, ?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Transformer must not be null.
         //
         verifyException(""org.apache.commons.collections4.IterableUtils"", e);
      }
  }"
74,"    public FluentIterable<E> append(final E... elements) {
        return append(Arrays.asList(elements));
    }","  public void test12()  throws Throwable  {
      Stack<Closure<Object>> stack0 = new Stack<Closure<Object>>();
      ArrayList<Closure<Object>> arrayList0 = new ArrayList<Closure<Object>>(stack0);
      FluentIterable<Closure<Object>> fluentIterable0 = FluentIterable.of((Iterable<Closure<Object>>) arrayList0);
      FluentIterable<Closure<Object>> fluentIterable1 = fluentIterable0.unique();
      // Undeclared exception!
      try { 
        fluentIterable1.append((Closure<Object>[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
75,"    public FluentIterable<E> skip(final long elementsToSkip) {
        return of(IterableUtils.skippingIterable(iterable, elementsToSkip));
    }","  public void test13()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.of(locale_Category0);
      FluentIterable<Locale.Category> fluentIterable1 = fluentIterable0.skip(2957L);
      FluentIterable<Locale.Category> fluentIterable2 = fluentIterable1.zip((Iterable<? extends Locale.Category>) fluentIterable0);
      Class<Locale.Category> class0 = Locale.Category.class;
      fluentIterable2.toArray(class0);
      // Undeclared exception!
      try { 
        fluentIterable2.skip((-2041L));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // ElementsToSkip parameter must not be negative.
         //
         verifyException(""org.apache.commons.collections4.IterableUtils"", e);
      }
  }"
76,"    public static <T> FluentIterable<T> of(final T singleton) {
        return of(IteratorUtils.asIterable(new SingletonIterator<>(singleton, false)));
    }","  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(547);
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integer0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) fluentIterable0;
      FluentIterable<Object> fluentIterable1 = FluentIterable.of(objectArray0);
      FluentIterable<Object> fluentIterable2 = fluentIterable1.skip(547);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      fluentIterable2.copyInto(hashSet0);
      fluentIterable2.zip((Iterable<?>) fluentIterable1);
      FluentIterable<Object> fluentIterable3 = fluentIterable2.limit(547);
      fluentIterable3.skip(547);
      fluentIterable3.reverse();
      // Undeclared exception!
      try { 
        FluentIterable.of((Iterable<Predicate<Object>>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException(""org.apache.commons.collections4.IterableUtils"", e);
      }
  }"
77,"    public E get(final int position) {
        return IterableUtils.get(iterable, position);
    }","  public void test15()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = FluentIterable.empty();
      List<Object> list0 = fluentIterable0.toList();
      fluentIterable0.append((Iterable<?>) list0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) fluentIterable0;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      FluentIterable<Locale.Category> fluentIterable1 = FluentIterable.of(locale_CategoryArray0);
      // Undeclared exception!
      try { 
        fluentIterable1.get(1);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException(""java.util.Arrays$ArrayList"", e);
      }
  }"
78,"    public void copyInto(final Collection<? super E> collection) {
        if (collection == null) {
            throw new NullPointerException(""Collection must not be null"");
        }
        CollectionUtils.addAll(collection, iterable);
    }","  public void test16()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[1] = predicate0;
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      predicateArray0[2] = predicate1;
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[3] = (Predicate<Object>) instanceofPredicate0;
      Predicate<Object> predicate2 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[4] = predicate2;
      Predicate<Object> predicate3 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) onePredicate0);
      predicateArray0[5] = predicate3;
      FluentIterable<Predicate<Object>> fluentIterable0 = FluentIterable.of(predicateArray0);
      FluentIterable<Predicate<Object>> fluentIterable1 = fluentIterable0.unmodifiable();
      fluentIterable1.copyInto(arrayList0);
}"
79,"    public FluentIterable<E> skip(final long elementsToSkip) {
        return of(IterableUtils.skippingIterable(iterable, elementsToSkip));
    }","  public void test17()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of((Iterable<Integer>) treeSet0);
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.limit(0L);
      FluentIterable<Integer> fluentIterable2 = fluentIterable1.eval();
      FluentIterable<Integer> fluentIterable3 = fluentIterable2.collate((Iterable<? extends Integer>) fluentIterable1);
      // Undeclared exception!
      try { 
        fluentIterable3.skip((-4382L));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // ElementsToSkip parameter must not be negative.
         //
         verifyException(""org.apache.commons.collections4.IterableUtils"", e);
      }
  }"
80,"    public static <T> FluentIterable<T> of(final T singleton) {
        return of(IteratorUtils.asIterable(new SingletonIterator<>(singleton, false)));
    }","  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""|MTro~|eO"";
      stringArray0[1] = ""t+?~]#z!"";
      String string0 = ""Zz1j6PSguGtC($RQ4or"";
      stringArray0[2] = ""Zz1j6PSguGtC($RQ4or"";
      stringArray0[3] = ""uuw.qfP%2sb?]u"";
      stringArray0[4] = """";
      stringArray0[5] = ""Input Object must not be null"";
      stringArray0[6] = ""Wuurnf!!"";
      stringArray0[7] = ""Collection must not be null"";
      FluentIterable<String> fluentIterable0 = FluentIterable.of(stringArray0);
      fluentIterable0.size();
      // Undeclared exception!
      try { 
        FluentIterable.of((Predicate<Object>[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
81,"    public <O> FluentIterable<O> transform(final Transformer<? super E, ? extends O> transformer) {
        return of(IterableUtils.transformedIterable(iterable, transformer));
    }","  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FluentIterable<String> fluentIterable0 = FluentIterable.of(stringArray0);
      FluentIterable<String> fluentIterable1 = fluentIterable0.append(stringArray0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      FluentIterable<String> fluentIterable2 = fluentIterable0.loop();
      fluentIterable2.toList();
      fluentIterable1.transform((Transformer<? super String, ? extends String>) transformer0);
      ArrayDeque<Boolean> arrayDeque0 = null;
      try {
        arrayDeque0 = new ArrayDeque<Boolean>((Collection<? extends Boolean>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.ArrayDeque"", e);
      }
  }"
82,"    public FluentIterable<E> zip(final Iterable<? extends E> other) {
        return of(IterableUtils.zippingIterable(iterable, other));
    }","  public void test20()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>(2, 2279.3F);
      FluentIterable<Object> fluentIterable0 = FluentIterable.of((Iterable<Object>) hashSet0);
      FluentIterable<Object> fluentIterable1 = fluentIterable0.skip(2);
      FluentIterable<Object> fluentIterable2 = fluentIterable1.append((Iterable<?>) hashSet0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      hashSet0.containsAll(arrayDeque0);
      Iterable<Object>[] iterableArray0 = (Iterable<Object>[]) Array.newInstance(Iterable.class, 7);
      iterableArray0[0] = (Iterable<Object>) hashSet0;
      iterableArray0[1] = (Iterable<Object>) fluentIterable1;
      iterableArray0[2] = (Iterable<Object>) fluentIterable2;
      iterableArray0[3] = (Iterable<Object>) fluentIterable1;
      iterableArray0[4] = (Iterable<Object>) fluentIterable2;
      iterableArray0[5] = (Iterable<Object>) fluentIterable1;
      iterableArray0[6] = (Iterable<Object>) hashSet0;
      FluentIterable<Object> fluentIterable3 = fluentIterable2.zip(iterableArray0);
      FluentIterable<Object> fluentIterable4 = fluentIterable3.append((Object[]) iterableArray0);
      fluentIterable4.zip(iterableArray0);
      FluentIterable<Object> fluentIterable5 = fluentIterable4.collate((Iterable<?>) fluentIterable0);
      fluentIterable5.asEnumeration();
      FluentIterable<String> fluentIterable6 = FluentIterable.empty();
      FluentIterable<String> fluentIterable7 = fluentIterable6.limit(0L);
      FluentIterable<String> fluentIterable8 = fluentIterable7.unique();
      // Undeclared exception!
      try { 
        fluentIterable8.zip((Iterable<? extends String>[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Iterables must not be null.
         //
         verifyException(""org.apache.commons.collections4.IterableUtils"", e);
      }
  }"
83,"    public void forEach(final Closure<? super E> closure) {
        IterableUtils.forEach(iterable, closure);
    }","  public void test21()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.FORMAT;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.FORMAT;
      locale_CategoryArray0[5] = locale_Category5;
      Locale.Category locale_Category6 = Locale.Category.DISPLAY;
      locale_CategoryArray0[6] = locale_Category6;
      Locale.Category locale_Category7 = Locale.Category.FORMAT;
      locale_CategoryArray0[7] = locale_Category7;
      Locale.Category locale_Category8 = Locale.Category.DISPLAY;
      locale_CategoryArray0[8] = locale_Category8;
      FluentIterable.of(locale_CategoryArray0);
      FluentIterable<Predicate<Object>> fluentIterable0 = FluentIterable.empty();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[0] = predicate0;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      predicateArray0[1] = (Predicate<Object>) nullIsExceptionPredicate0;
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>((Transformer<? super Object, ?>) null, predicate0);
      predicateArray0[2] = (Predicate<Object>) transformedPredicate0;
      FluentIterable<Predicate<Object>> fluentIterable1 = FluentIterable.of(predicateArray0);
      FluentIterable<Predicate<Object>> fluentIterable2 = fluentIterable0.collate((Iterable<? extends Predicate<Object>>) fluentIterable1);
      FluentIterable<Predicate<Object>> fluentIterable3 = fluentIterable2.reverse();
      FluentIterable<Predicate<Object>> fluentIterable4 = fluentIterable3.unique();
      FluentIterable<Predicate<Object>> fluentIterable5 = fluentIterable0.unmodifiable();
      FluentIterable<Predicate<Object>> fluentIterable6 = fluentIterable4.zip((Iterable<? extends Predicate<Object>>) fluentIterable5);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) transformedPredicate0, (Closure<? super Object>) closure0, (Closure<? super Object>) closure0);
      Closure<Object> closure2 = WhileClosure.whileClosure((Predicate<? super Object>) predicateArray0[1], (Closure<? super Object>) closure1, true);
      // Undeclared exception!
      try { 
        fluentIterable6.forEach(closure2);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.functors.TransformedPredicate"", e);
      }
  }"
84,"    public FluentIterable<E> limit(final long maxSize) {
        return of(IterableUtils.boundedIterable(iterable, maxSize));
    }","  public void test22()  throws Throwable  {
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.empty();
      long long0 = (-4099L);
      // Undeclared exception!
      try { 
        fluentIterable0.limit((-4099L));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // MaxSize parameter must not be negative.
         //
         verifyException(""org.apache.commons.collections4.IterableUtils"", e);
      }
  }"
85,"    public E get(final int position) {
        return IterableUtils.get(iterable, position);
    }","  public void test23()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      ServiceLoader<Locale.Category> serviceLoader0 = ServiceLoader.load(class0);
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.of((Iterable<Locale.Category>) serviceLoader0);
      fluentIterable0.contains(class0);
      FluentIterable<Locale.Category> fluentIterable1 = fluentIterable0.append((Iterable<? extends Locale.Category>) serviceLoader0);
      FluentIterable<Locale.Category> fluentIterable2 = fluentIterable1.unique();
      Iterable<Locale.Category>[] iterableArray0 = (Iterable<Locale.Category>[]) Array.newInstance(Iterable.class, 2);
      iterableArray0[0] = (Iterable<Locale.Category>) fluentIterable1;
      iterableArray0[1] = (Iterable<Locale.Category>) fluentIterable0;
      FluentIterable<Locale.Category> fluentIterable3 = fluentIterable2.zip(iterableArray0);
      fluentIterable1.reverse();
      Iterable<Locale.Category>[] iterableArray1 = (Iterable<Locale.Category>[]) Array.newInstance(Iterable.class, 4);
      iterableArray1[0] = (Iterable<Locale.Category>) fluentIterable3;
      iterableArray1[1] = (Iterable<Locale.Category>) fluentIterable0;
      iterableArray1[2] = (Iterable<Locale.Category>) fluentIterable3;
      iterableArray1[3] = (Iterable<Locale.Category>) fluentIterable1;
      FluentIterable<Locale.Category> fluentIterable4 = fluentIterable1.zip(iterableArray1);
      fluentIterable4.iterator();
      FluentIterable<Locale.Category> fluentIterable5 = fluentIterable3.reverse();
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FluentIterable<Locale.Category> fluentIterable6 = fluentIterable5.collate((Iterable<? extends Locale.Category>) fluentIterable1, (Comparator<? super Locale.Category>) comparator0);
      fluentIterable6.contains(serviceLoader0);
      FluentIterable<String> fluentIterable7 = FluentIterable.empty();
      // Undeclared exception!
      try { 
        fluentIterable7.get((-2518));
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -2518
         //
         verifyException(""org.apache.commons.collections4.CollectionUtils"", e);
      }
  }"
86,"    public FluentIterable<E> zip(final Iterable<? extends E> other) {
        return of(IterableUtils.zippingIterable(iterable, other));
    }","  public void test24()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.of(locale_Category0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(0, (Closure<? super Object>) null);
      fluentIterable0.forEach((Closure<? super Locale.Category>) forClosure0);
      // Undeclared exception!
      try { 
        fluentIterable0.zip((Iterable<? extends Locale.Category>[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Iterables must not be null.
         //
         verifyException(""org.apache.commons.collections4.IterableUtils"", e);
      }
  }"
87,"    public boolean contains(final Object object) {
        return IterableUtils.contains(iterable, object);
    }","  public void test25()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.of(locale_Category0);
      int int0 = (-4016);
      fluentIterable0.contains(locale_Category0);
      LinkedHashSet<Object> linkedHashSet0 = null;
      try {
        linkedHashSet0 = new LinkedHashSet<Object>((-4016), (-4016));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -4016
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
88,"    public FluentIterable<E> append(final E... elements) {
        return append(Arrays.asList(elements));
    }","  public void test26()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.of(locale_Category0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      predicateArray0[0] = predicate0;
      Integer integer0 = new Integer((-1150));
      FluentIterable<Integer> fluentIterable1 = FluentIterable.of(integer0);
      FluentIterable<Integer> fluentIterable2 = fluentIterable1.unmodifiable();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(fluentIterable2, defaultEquator0);
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      Class<String> class0 = String.class;
      Predicate<Object> predicate1 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[2] = predicate1;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate1);
      predicateArray0[3] = (Predicate<Object>) nullIsTruePredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicateArray0[3]);
      predicateArray0[4] = (Predicate<Object>) notPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      FluentIterable<Locale.Category> fluentIterable3 = fluentIterable0.filter(nonePredicate0);
      fluentIterable3.allMatch(predicate1);
      fluentIterable0.spliterator();
      fluentIterable0.toString();
      fluentIterable3.anyMatch(predicateArray0[4]);
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      FluentIterable<Integer> fluentIterable4 = fluentIterable1.append(integerArray0);
}"
89,"    public FluentIterable<E> append(final E... elements) {
        return append(Arrays.asList(elements));
    }","  public void test27()  throws Throwable  {
      FluentIterable<String> fluentIterable0 = FluentIterable.empty();
      FluentIterable<String> fluentIterable1 = fluentIterable0.unique();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ""@bF)o|SC=%q_|q2"";
      stringArray0[1] = ""org.apache.commons.collections4.functors.AbstractQuantifierPredicate"";
      stringArray0[2] = ""org.apache.commons.collections4.functors.TransformerClosure"";
      stringArray0[3] = ""Collection must not be null"";
      FluentIterable<String> fluentIterable2 = fluentIterable1.append(stringArray0);
}"
90,"    public FluentIterable<E> skip(final long elementsToSkip) {
        return of(IterableUtils.skippingIterable(iterable, elementsToSkip));
    }","  public void test28()  throws Throwable  {
      Vector<Boolean> vector0 = new Vector<Boolean>(1333, (-2936));
      FluentIterable<Boolean> fluentIterable0 = FluentIterable.of((Iterable<Boolean>) vector0);
      FluentIterable<Boolean> fluentIterable1 = fluentIterable0.skip(2233L);
}"
91,,"  public void test29()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Predicate<Object>> priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue<Predicate<Object>>((-1315), comparator0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.PriorityQueue"", e);
      }
  }"
92,"    public FluentIterable<E> zip(final Iterable<? extends E> other) {
        return of(IterableUtils.zippingIterable(iterable, other));
    }","  public void test30()  throws Throwable  {
      FluentIterable.empty();
      FluentIterable<Boolean>[] fluentIterableArray0 = (FluentIterable<Boolean>[]) Array.newInstance(FluentIterable.class, 1);
      FluentIterable<Boolean> fluentIterable0 = new FluentIterable<Boolean>();
      fluentIterableArray0[0] = fluentIterable0;
      FluentIterable<FluentIterable<Boolean>> fluentIterable1 = FluentIterable.of(fluentIterableArray0);
      FluentIterable<FluentIterable<Boolean>> fluentIterable2 = FluentIterable.of((Iterable<FluentIterable<Boolean>>) fluentIterable1);
      fluentIterable2.get(0);
      FluentIterable<FluentIterable<Boolean>> fluentIterable3 = fluentIterable2.append(fluentIterableArray0);
      FluentIterable<FluentIterable<Boolean>> fluentIterable4 = fluentIterable3.loop();
      fluentIterable2.eval();
      FluentIterable<FluentIterable<Boolean>> fluentIterable5 = fluentIterable4.collate((Iterable<? extends FluentIterable<Boolean>>) fluentIterable3);
      FluentIterable.of("""");
      fluentIterable5.iterator();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      FluentIterable.of(locale_Category0);
      FluentIterable<Predicate<Object>> fluentIterable6 = new FluentIterable<Predicate<Object>>();
      FluentIterable<Predicate<Object>> fluentIterable7 = fluentIterable6.limit(0);
      // Undeclared exception!
      try { 
        fluentIterable7.zip((Iterable<? extends Predicate<Object>>[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Iterables must not be null.
         //
         verifyException(""org.apache.commons.collections4.IterableUtils"", e);
      }
  }"
93,"    public FluentIterable<E> append(final E... elements) {
        return append(Arrays.asList(elements));
    }","  public void test31()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.of(locale_CategoryArray0);
      fluentIterable0.unmodifiable();
      FluentIterable<String> fluentIterable1 = FluentIterable.empty();
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      FluentIterable<String> fluentIterable2 = fluentIterable1.collate((Iterable<? extends String>) serviceLoader0);
      Class<Locale.Category> class1 = Locale.Category.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ServiceLoader.load(class1, classLoader1);
      Class<Object> class2 = Object.class;
      ServiceLoader.loadInstalled(class2);
      FluentIterable<String> fluentIterable3 = fluentIterable2.loop();
      // Undeclared exception!
      try { 
        fluentIterable3.append((String[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
94,"    public int size() {
        return IterableUtils.size(iterable);
    }","  public void test32()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = new FluentIterable<Object>();
      Integer integer0 = new Integer(5);
      FluentIterable<Integer> fluentIterable1 = FluentIterable.of(integer0);
      FluentIterable<Integer> fluentIterable2 = fluentIterable1.reverse();
      fluentIterable2.isEmpty();
      Class<Integer> class0 = Integer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      fluentIterable1.collate((Iterable<? extends Integer>) serviceLoader0);
      Predicate<Integer>[] predicateArray0 = (Predicate<Integer>[]) Array.newInstance(Predicate.class, 9);
      Predicate<Integer> predicate0 = TruePredicate.truePredicate();
      predicateArray0[0] = predicate0;
      AnyPredicate<Integer> anyPredicate0 = new AnyPredicate<Integer>(predicateArray0);
      predicateArray0[1] = (Predicate<Integer>) anyPredicate0;
      NotPredicate<Integer> notPredicate0 = new NotPredicate<Integer>(predicateArray0[1]);
      predicateArray0[2] = (Predicate<Integer>) notPredicate0;
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Integer> predicate1 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Integer>>) linkedHashSet0);
      predicateArray0[3] = predicate1;
      HashMap<Predicate<Object>, Transformer<Object, Boolean>> hashMap0 = new HashMap<Predicate<Object>, Transformer<Object, Boolean>>();
      Transformer<Integer, Boolean> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Integer>, ? extends Transformer<? super Integer, ? extends Boolean>>) hashMap0);
      TransformerPredicate<Integer> transformerPredicate0 = new TransformerPredicate<Integer>(transformer0);
      predicateArray0[4] = (Predicate<Integer>) transformerPredicate0;
      WhileClosure<Integer> whileClosure0 = new WhileClosure<Integer>(predicate0, (Closure<? super Integer>) null, false);
      ClosureTransformer<Integer> closureTransformer0 = new ClosureTransformer<Integer>(whileClosure0);
      TransformedPredicate<Integer> transformedPredicate0 = new TransformedPredicate<Integer>(closureTransformer0, predicateArray0[2]);
      predicateArray0[5] = (Predicate<Integer>) transformedPredicate0;
      NullIsFalsePredicate<Integer> nullIsFalsePredicate0 = new NullIsFalsePredicate<Integer>(transformedPredicate0);
      predicateArray0[6] = (Predicate<Integer>) nullIsFalsePredicate0;
      Predicate<Integer> predicate2 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Integer>>) linkedHashSet0);
      predicateArray0[7] = predicate2;
      Predicate<Integer> predicate3 = TruePredicate.truePredicate();
      predicateArray0[8] = predicate3;
      FluentIterable<Predicate<Integer>> fluentIterable3 = FluentIterable.of(predicateArray0);
      FluentIterable<Predicate<Integer>> fluentIterable4 = fluentIterable3.append(predicateArray0);
      int int0 = fluentIterable4.size();
}"
95,"    public boolean anyMatch(final Predicate<? super E> predicate) {
        return IterableUtils.matchesAny(iterable, predicate);
    }","  public void test33()  throws Throwable  {
      FluentIterable<Predicate<Object>> fluentIterable0 = new FluentIterable<Predicate<Object>>();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Transformer<Object, Predicate<Object>> transformer0 = InvokerTransformer.invokerTransformer("""", (Class<?>[]) classArray0, (Object[]) classArray0);
      FluentIterable<Predicate<Object>> fluentIterable1 = fluentIterable0.transform((Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) transformer0);
      fluentIterable1.collate((Iterable<? extends Predicate<Object>>) fluentIterable0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      FluentIterable<Object> fluentIterable2 = FluentIterable.of((Iterable<Object>) arrayList0);
      FluentIterable<Object> fluentIterable3 = fluentIterable2.loop();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FluentIterable<Object> fluentIterable4 = fluentIterable3.collate((Iterable<?>) fluentIterable0, (Comparator<? super Object>) comparator0);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(1446);
      FluentIterable<Object> fluentIterable5 = fluentIterable4.zip((Iterable<?>) arrayDeque0);
      Iterable<String>[] iterableArray0 = (Iterable<String>[]) Array.newInstance(Iterable.class, 4);
      iterableArray0[0] = (Iterable<String>) arrayDeque0;
      iterableArray0[1] = (Iterable<String>) arrayDeque0;
      iterableArray0[2] = (Iterable<String>) arrayDeque0;
      iterableArray0[3] = (Iterable<String>) arrayDeque0;
      FluentIterable<Object> fluentIterable6 = fluentIterable5.zip(iterableArray0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(1446);
      FluentIterable<Object> fluentIterable7 = fluentIterable6.append((Iterable<?>) priorityQueue0);
      // Undeclared exception!
      try { 
        fluentIterable7.anyMatch((Predicate<? super Object>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException(""org.apache.commons.collections4.IteratorUtils"", e);
      }
  }"
96,"    public List<E> toList() {
        return IterableUtils.toList(iterable);
    }","  public void test34()  throws Throwable  {
      FluentIterable.empty();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.of(locale_Category0);
      FluentIterable<Locale.Category> fluentIterable1 = fluentIterable0.unmodifiable();
      FluentIterable<Locale.Category> fluentIterable2 = fluentIterable1.loop();
      // Undeclared exception!
      fluentIterable2.toList();
  }"
97,"    public int setCount(final E object, final int count) {
        validate(object);
        return decorated().setCount(object, count);
    }","  public void test0()  throws Throwable  {
      HashMultiSet<Boolean> hashMultiSet0 = new HashMultiSet<Boolean>();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      AndPredicate<Boolean> andPredicate0 = new AndPredicate<Boolean>(predicate0, predicate0);
      PredicatedMultiSet<Boolean> predicatedMultiSet0 = new PredicatedMultiSet<Boolean>(hashMultiSet0, andPredicate0);
      predicatedMultiSet0.setCount((Boolean) null, 2);
}"
98,"    protected MultiSet<E> decorated() {
        return (MultiSet<E>) super.decorated();
    }","  public void test1()  throws Throwable  {
      HashMultiSet<Predicate<Object>> hashMultiSet0 = new HashMultiSet<Predicate<Object>>();
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      PredicatedMultiSet<Predicate<Object>> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<Predicate<Object>>) hashMultiSet0, (Predicate<? super Predicate<Object>>) onePredicate0);
      MultiSet<Predicate<Object>> multiSet0 = predicatedMultiSet0.decorated();
}"
99,"    public int setCount(final E object, final int count) {
        validate(object);
        return decorated().setCount(object, count);
    }","  public void test2()  throws Throwable  {
      HashMultiSet<HashMultiSet<Object>> hashMultiSet0 = new HashMultiSet<HashMultiSet<Object>>();
      Predicate<Predicate<Object>> predicate0 = UniquePredicate.uniquePredicate();
      SynchronizedMultiSet<HashMultiSet<Object>> synchronizedMultiSet0 = new SynchronizedMultiSet<HashMultiSet<Object>>(hashMultiSet0, predicate0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate1);
      PredicatedMultiSet<HashMultiSet<Object>> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<HashMultiSet<Object>>) synchronizedMultiSet0, (Predicate<? super HashMultiSet<Object>>) transformedPredicate0);
      HashMultiSet<Object> hashMultiSet1 = new HashMultiSet<Object>(hashMultiSet0);
      // Undeclared exception!
      try { 
        predicatedMultiSet0.setCount(hashMultiSet1, (-5673));
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException(""org.apache.commons.collections4.functors.ExceptionFactory"", e);
      }
  }"
100,"    public int setCount(final E object, final int count) {
        validate(object);
        return decorated().setCount(object, count);
    }","  public void test3()  throws Throwable  {
      HashMultiSet<Predicate<Object>> hashMultiSet0 = new HashMultiSet<Predicate<Object>>();
      MultiSet<Predicate<Object>> multiSet0 = UnmodifiableMultiSet.unmodifiableMultiSet((MultiSet<? extends Predicate<Object>>) hashMultiSet0);
      SynchronizedMultiSet<Predicate<Object>> synchronizedMultiSet0 = new SynchronizedMultiSet<Predicate<Object>>(multiSet0, ""Go2NRZBp"");
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      PredicatedMultiSet<Predicate<Object>> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<Predicate<Object>>) synchronizedMultiSet0, (Predicate<? super Predicate<Object>>) predicate0);
      // Undeclared exception!
      try { 
        predicatedMultiSet0.setCount(predicate0, 1845);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.multiset.UnmodifiableMultiSet"", e);
      }
  }"
101,"    public int remove(final Object object, final int count) {
        return decorated().remove(object, count);
    }","  public void test4()  throws Throwable  {
      HashMultiSet<String> hashMultiSet0 = new HashMultiSet<String>();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      PredicatedMultiSet<String> predicatedMultiSet0 = new PredicatedMultiSet<String>(hashMultiSet0, predicate0);
      MultiSet<String> multiSet0 = UnmodifiableMultiSet.unmodifiableMultiSet((MultiSet<? extends String>) predicatedMultiSet0);
      PredicatedMultiSet<String> predicatedMultiSet1 = new PredicatedMultiSet<String>(multiSet0, predicate0);
      // Undeclared exception!
      try { 
        predicatedMultiSet1.remove((Object) predicate0, (-1));
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.multiset.UnmodifiableMultiSet"", e);
      }
  }"
102,"    public int remove(final Object object, final int count) {
        return decorated().remove(object, count);
    }","  public void test5()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      Integer integer0 = new Integer(1996);
      IdentityPredicate<Integer> identityPredicate0 = new IdentityPredicate<Integer>(integer0);
      PredicatedMultiSet<Integer> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<Integer>) hashMultiSet0, (Predicate<? super Integer>) identityPredicate0);
      // Undeclared exception!
      try { 
        predicatedMultiSet0.remove((Object) integer0, (-293));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Occurrences must not be negative.
         //
         verifyException(""org.apache.commons.collections4.multiset.AbstractMapMultiSet"", e);
      }
  }"
103,"    public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset,
                                                               final Predicate<? super E> predicate) {
        return new PredicatedMultiSet<>(multiset, predicate);
    }","  public void test6()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      HashMultiSet<String> hashMultiSet0 = new HashMultiSet<String>();
      hashMultiSet0.add("""");
      // Undeclared exception!
      try { 
        PredicatedMultiSet.predicatedMultiSet((MultiSet<String>) hashMultiSet0, (Predicate<? super String>) predicate0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException(""org.apache.commons.collections4.functors.ExceptionPredicate"", e);
      }
  }"
104,"    public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset,
                                                               final Predicate<? super E> predicate) {
        return new PredicatedMultiSet<>(multiset, predicate);
    }","  public void test7()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        PredicatedMultiSet.predicatedMultiSet((MultiSet<String>) null, (Predicate<? super String>) allPredicate0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.AbstractCollectionDecorator"", e);
      }
  }"
105,"    public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset,
                                                               final Predicate<? super E> predicate) {
        return new PredicatedMultiSet<>(multiset, predicate);
    }","  public void test8()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) hashMultiSet0);
      AbstractMapMultiSet.MutableInteger abstractMapMultiSet_MutableInteger0 = new AbstractMapMultiSet.MutableInteger((-1615));
      hashMultiSet0.add(abstractMapMultiSet_MutableInteger0);
      // Undeclared exception!
      try { 
        PredicatedMultiSet.predicatedMultiSet((MultiSet<AbstractMapMultiSet.MutableInteger>) hashMultiSet0, (Predicate<? super AbstractMapMultiSet.MutableInteger>) predicate0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.multiset.AbstractMapMultiSet$MutableInteger@fffff9b1' - Predicate 'org.apache.commons.collections4.functors.IdentityPredicate@2' rejected it
         //
         verifyException(""org.apache.commons.collections4.collection.PredicatedCollection"", e);
      }
  }"
106,"    public int add(final E object, final int count) {
        validate(object);
        return decorated().add(object, count);
    }","  public void test9()  throws Throwable  {
      HashMultiSet<String> hashMultiSet0 = new HashMultiSet<String>();
      UniquePredicate<String> uniquePredicate0 = new UniquePredicate<String>();
      PredicatedMultiSet<String> predicatedMultiSet0 = new PredicatedMultiSet<String>(hashMultiSet0, uniquePredicate0);
      PredicatedMultiSet<String> predicatedMultiSet1 = new PredicatedMultiSet<String>(predicatedMultiSet0, uniquePredicate0);
      // Undeclared exception!
      try { 
        predicatedMultiSet1.add("""", 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object '' - Predicate 'org.apache.commons.collections4.functors.UniquePredicate@2' rejected it
         //
         verifyException(""org.apache.commons.collections4.collection.PredicatedCollection"", e);
      }
  }"
107,"    protected PredicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate) {
        super(multiset, predicate);
    }","  public void test10()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      hashMultiSet0.add((Object) allPredicate0);
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) allPredicate0);
      predicateArray0[0] = predicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      PredicatedMultiSet<Object> predicatedMultiSet0 = null;
      try {
        predicatedMultiSet0 = new PredicatedMultiSet<Object>(hashMultiSet0, onePredicate0);
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
108,"    protected PredicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate) {
        super(multiset, predicate);
    }","  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      PredicatedMultiSet<Predicate<Object>> predicatedMultiSet0 = null;
      try {
        predicatedMultiSet0 = new PredicatedMultiSet<Predicate<Object>>((MultiSet<Predicate<Object>>) null, predicate0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.AbstractCollectionDecorator"", e);
      }
  }"
109,"    protected PredicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate) {
        super(multiset, predicate);
    }","  public void test12()  throws Throwable  {
      HashMultiSet<PredicatedMultiSet<Object>> hashMultiSet0 = new HashMultiSet<PredicatedMultiSet<Object>>();
      HashMultiSet<Predicate<Object>> hashMultiSet1 = new HashMultiSet<Predicate<Object>>();
      SynchronizedCollection<Predicate<Object>> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Predicate<Object>>) hashMultiSet1);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) synchronizedCollection0);
      HashMultiSet<Object> hashMultiSet2 = new HashMultiSet<Object>(hashMultiSet1);
      PredicatedMultiSet<Object> predicatedMultiSet0 = new PredicatedMultiSet<Object>(hashMultiSet2, predicate0);
      hashMultiSet0.add(predicatedMultiSet0);
      PredicatedMultiSet<PredicatedMultiSet<Object>> predicatedMultiSet1 = null;
      try {
        predicatedMultiSet1 = new PredicatedMultiSet<PredicatedMultiSet<Object>>(hashMultiSet0, predicate0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.multiset.HashMultiSet@0000000005' - Predicate 'org.apache.commons.collections4.functors.FalsePredicate@d' rejected it
         //
         verifyException(""org.apache.commons.collections4.collection.PredicatedCollection"", e);
      }
  }"
110,"    public boolean equals(final Object object) {
        return object == this || decorated().equals(object);
    }","  public void test13()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      PredicatedMultiSet<Object> predicatedMultiSet0 = new PredicatedMultiSet<Object>(hashMultiSet0, predicate0);
      boolean boolean0 = predicatedMultiSet0.equals(predicate0);
}"
111,"    public boolean equals(final Object object) {
        return object == this || decorated().equals(object);
    }","  public void test14()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      HashMultiSet<String> hashMultiSet1 = new HashMultiSet<String>();
      PredicatedMultiSet<String> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<String>) hashMultiSet1, (Predicate<? super String>) predicate0);
      boolean boolean0 = predicatedMultiSet0.equals(hashMultiSet0);
}"
112,"    public int getCount(final Object object) {
        return decorated().getCount(object);
    }","  public void test15()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      HashMultiSet<PredicatedMultiSet<String>> hashMultiSet0 = new HashMultiSet<PredicatedMultiSet<String>>();
      PredicatedMultiSet<PredicatedMultiSet<String>> predicatedMultiSet0 = new PredicatedMultiSet<PredicatedMultiSet<String>>(hashMultiSet0, predicate0);
      Integer integer0 = new Integer(1);
      int int0 = predicatedMultiSet0.getCount(integer0);
}"
113,"    public int add(final E object, final int count) {
        validate(object);
        return decorated().add(object, count);
    }","  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      HashMultiSet<String> hashMultiSet0 = new HashMultiSet<String>();
      PredicatedMultiSet<String> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<String>) hashMultiSet0, (Predicate<? super String>) predicate0);
      predicatedMultiSet0.add(""org.apache.commons.collections4.multiset.PredicatedMultiSet"", 0);
}"
114,"    public int setCount(final E object, final int count) {
        validate(object);
        return decorated().setCount(object, count);
    }","  public void test17()  throws Throwable  {
      HashMultiSet<HashMultiSet<Object>> hashMultiSet0 = new HashMultiSet<HashMultiSet<Object>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) hashMultiSet0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      PredicatedMultiSet<HashMultiSet<Object>> predicatedMultiSet0 = new PredicatedMultiSet<HashMultiSet<Object>>(hashMultiSet0, predicate0);
      HashMultiSet<Object> hashMultiSet1 = new HashMultiSet<Object>();
      // Undeclared exception!
      try { 
        predicatedMultiSet0.setCount(hashMultiSet1, 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.multiset.AbstractMultiSet$EntrySet@0000000006' - Predicate 'org.apache.commons.collections4.functors.ComparatorPredicate@2' rejected it
         //
         verifyException(""org.apache.commons.collections4.collection.PredicatedCollection"", e);
      }
  }"
115,"    public int hashCode() {
        return decorated().hashCode();
    }","  public void test18()  throws Throwable  {
      HashMultiSet<HashMultiSet<Object>> hashMultiSet0 = new HashMultiSet<HashMultiSet<Object>>();
      Predicate<Predicate<Object>> predicate0 = UniquePredicate.uniquePredicate();
      SynchronizedMultiSet<HashMultiSet<Object>> synchronizedMultiSet0 = new SynchronizedMultiSet<HashMultiSet<Object>>(hashMultiSet0, predicate0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate1);
      PredicatedMultiSet<HashMultiSet<Object>> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<HashMultiSet<Object>>) synchronizedMultiSet0, (Predicate<? super HashMultiSet<Object>>) transformedPredicate0);
      predicatedMultiSet0.hashCode();
  }"
116,"    public Set<MultiSet.Entry<E>> entrySet() {
        return decorated().entrySet();
    }","  public void test19()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      PredicatedMultiSet<Object> predicatedMultiSet0 = new PredicatedMultiSet<Object>(hashMultiSet0, predicate0);
      Set<MultiSet.Entry<Object>> set0 = (Set<MultiSet.Entry<Object>>)predicatedMultiSet0.entrySet();
}"
117,"    public Set<E> uniqueSet() {
        return decorated().uniqueSet();
    }","  public void test20()  throws Throwable  {
      HashMultiSet<Boolean> hashMultiSet0 = new HashMultiSet<Boolean>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NullIsFalsePredicate<Boolean> nullIsFalsePredicate0 = new NullIsFalsePredicate<Boolean>(predicate0);
      PredicatedMultiSet<Boolean> predicatedMultiSet0 = new PredicatedMultiSet<Boolean>(hashMultiSet0, nullIsFalsePredicate0);
      Set<Boolean> set0 = predicatedMultiSet0.uniqueSet();
}"
118,"    public HashMultiSet() {
        super(new HashMap<E, MutableInteger>());
    }","  public void test0()  throws Throwable  {
      HashMultiSet<String> hashMultiSet0 = new HashMultiSet<String>();
      hashMultiSet0.add(""Ji?7oUu)Q"", 2542);
      HashMultiSet<Object> hashMultiSet1 = new HashMultiSet<Object>(hashMultiSet0);
      HashMultiSet<Object> hashMultiSet2 = new HashMultiSet<Object>(hashMultiSet1);
}"
119,"    public HashMultiSet() {
        super(new HashMap<E, MutableInteger>());
    }","  public void test1()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = null;
      try {
        hashMultiSet0 = new HashMultiSet<Integer>((Collection<? extends Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.AbstractCollection"", e);
      }
  }"
120,"    protected SynchronizedMultiSet(final MultiSet<E> multiset) {
        super(multiset);
    }","  public void test0()  throws Throwable  {
      HashMultiSet<Boolean> hashMultiSet0 = new HashMultiSet<Boolean>();
      Set<Boolean> set0 = hashMultiSet0.createUniqueSet();
      SynchronizedMultiSet.SynchronizedSet<Boolean> synchronizedMultiSet_SynchronizedSet0 = new SynchronizedMultiSet.SynchronizedSet<Boolean>(set0, ""Set must not be null."");
  }"
121,"    protected MultiSet<E> decorated() {
        return (MultiSet<E>) super.decorated();
    }","  public void test1()  throws Throwable  {
      HashMultiSet<Predicate<Object>> hashMultiSet0 = new HashMultiSet<Predicate<Object>>();
      HashMultiSet<Object> hashMultiSet1 = new HashMultiSet<Object>(hashMultiSet0);
      SynchronizedMultiSet<Object> synchronizedMultiSet0 = new SynchronizedMultiSet<Object>(hashMultiSet1);
      MultiSet<Object> multiSet0 = synchronizedMultiSet0.decorated();
}"
122,"    public int size() {
        synchronized (lock) {
            return decorated().size();
        }
    }","  public void test2()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      HashMultiSet<String> hashMultiSet0 = new HashMultiSet<String>(linkedHashSet0);
      SynchronizedMultiSet<String> synchronizedMultiSet0 = SynchronizedMultiSet.synchronizedMultiSet((MultiSet<String>) hashMultiSet0);
      synchronizedMultiSet0.add(""+:|eS"", 11);
}"
123,"    public int size() {
        synchronized (lock) {
            return decorated().size();
        }
    }","  public void test3()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      SynchronizedMultiSet<Object> synchronizedMultiSet0 = new SynchronizedMultiSet<Object>(hashMultiSet0, """");
      hashMultiSet0.add((Object) """");
      synchronizedMultiSet0.add((Object) """", 0);
}"
124,"    public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset) {
        return new SynchronizedMultiSet<>(multiset);
    }","  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        SynchronizedMultiSet.synchronizedMultiSet((MultiSet<SynchronizedMultiSet<Integer>>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.SynchronizedCollection"", e);
      }
  }"
125,"    public int setCount(final E object, final int count) {
        synchronized (lock) {
            return decorated().setCount(object, count);
        }
    }","  public void test5()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MultiSetEntry<Object>> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MultiSetEntry<Object>>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      PredicatedMultiSet<AbstractMapMultiSet.MultiSetEntry<Object>> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<AbstractMapMultiSet.MultiSetEntry<Object>>) hashMultiSet0, (Predicate<? super AbstractMapMultiSet.MultiSetEntry<Object>>) predicate0);
      SynchronizedMultiSet<AbstractMapMultiSet.MultiSetEntry<Object>> synchronizedMultiSet0 = new SynchronizedMultiSet<AbstractMapMultiSet.MultiSetEntry<Object>>(predicatedMultiSet0);
      // Undeclared exception!
      try { 
        synchronizedMultiSet0.setCount((AbstractMapMultiSet.MultiSetEntry<Object>) null, 3044);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException(""org.apache.commons.collections4.functors.ExceptionPredicate"", e);
      }
  }"
126,"    public int setCount(final E object, final int count) {
        synchronized (lock) {
            return decorated().setCount(object, count);
        }
    }","  public void test6()  throws Throwable  {
      Integer integer0 = new Integer(73);
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      MultiSet<Object> multiSet0 = UnmodifiableMultiSet.unmodifiableMultiSet((MultiSet<?>) hashMultiSet0);
      SynchronizedMultiSet<Object> synchronizedMultiSet0 = new SynchronizedMultiSet<Object>(multiSet0);
      // Undeclared exception!
      try { 
        synchronizedMultiSet0.setCount(integer0, (-586));
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.multiset.UnmodifiableMultiSet"", e);
      }
  }"
127,"    public int setCount(final E object, final int count) {
        synchronized (lock) {
            return decorated().setCount(object, count);
        }
    }","  public void test7()  throws Throwable  {
      HashMultiSet<HashMultiSet<Object>> hashMultiSet0 = new HashMultiSet<HashMultiSet<Object>>();
      SynchronizedMultiSet<HashMultiSet<Object>> synchronizedMultiSet0 = SynchronizedMultiSet.synchronizedMultiSet((MultiSet<HashMultiSet<Object>>) hashMultiSet0);
      HashMultiSet<Object> hashMultiSet1 = new HashMultiSet<Object>(synchronizedMultiSet0);
      // Undeclared exception!
      try { 
        synchronizedMultiSet0.setCount(hashMultiSet1, (-1));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Count must not be negative.
         //
         verifyException(""org.apache.commons.collections4.multiset.AbstractMultiSet"", e);
      }
  }"
128,"    public int remove(final Object object, final int count) {
        synchronized (lock) {
            return decorated().remove(object, count);
        }
    }","  public void test8()  throws Throwable  {
      HashMultiSet<Predicate<Object>> hashMultiSet0 = new HashMultiSet<Predicate<Object>>();
      SynchronizedMultiSet<Predicate<Object>> synchronizedMultiSet0 = new SynchronizedMultiSet<Predicate<Object>>(hashMultiSet0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) defaultEquator0);
      MultiSet<Object> multiSet0 = UnmodifiableMultiSet.unmodifiableMultiSet((MultiSet<?>) synchronizedMultiSet0);
      PredicateTransformer<SynchronizedMultiSet<Object>> predicateTransformer0 = new PredicateTransformer<SynchronizedMultiSet<Object>>(predicate0);
      SynchronizedMultiSet<Object> synchronizedMultiSet1 = new SynchronizedMultiSet<Object>(multiSet0);
      Boolean boolean0 = predicateTransformer0.transform(synchronizedMultiSet1);
      // Undeclared exception!
      try { 
        synchronizedMultiSet1.remove((Object) boolean0, (-1));
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.multiset.UnmodifiableMultiSet"", e);
      }
  }"
129,"    public int remove(final Object object, final int count) {
        synchronized (lock) {
            return decorated().remove(object, count);
        }
    }","  public void test9()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      PredicatedMultiSet<AbstractMapMultiSet.MutableInteger> predicatedMultiSet0 = new PredicatedMultiSet<AbstractMapMultiSet.MutableInteger>(hashMultiSet0, orPredicate0);
      Object object0 = new Object();
      SynchronizedMultiSet<AbstractMapMultiSet.MutableInteger> synchronizedMultiSet0 = new SynchronizedMultiSet<AbstractMapMultiSet.MutableInteger>(predicatedMultiSet0, object0);
      // Undeclared exception!
      try { 
        synchronizedMultiSet0.remove((Object) hashMultiSet0, (-1545));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Occurrences must not be negative.
         //
         verifyException(""org.apache.commons.collections4.multiset.AbstractMapMultiSet"", e);
      }
  }"
130,"    public int add(final E object, final int count) {
        synchronized (lock) {
            return decorated().add(object, count);
        }
    }","  public void test10()  throws Throwable  {
      HashMultiSet<UnmodifiableMultiSet<Integer>> hashMultiSet0 = new HashMultiSet<UnmodifiableMultiSet<Integer>>();
      SynchronizedMultiSet<UnmodifiableMultiSet<Integer>> synchronizedMultiSet0 = new SynchronizedMultiSet<UnmodifiableMultiSet<Integer>>(hashMultiSet0, hashMultiSet0);
      MultiSet<Object> multiSet0 = UnmodifiableMultiSet.unmodifiableMultiSet((MultiSet<?>) synchronizedMultiSet0);
      SynchronizedMultiSet<Object> synchronizedMultiSet1 = new SynchronizedMultiSet<Object>(multiSet0);
      // Undeclared exception!
      try { 
        synchronizedMultiSet1.add((Object) ""JX"", 5);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.multiset.UnmodifiableMultiSet"", e);
      }
  }"
131,"    protected SynchronizedMultiSet(final MultiSet<E> multiset) {
        super(multiset);
    }","  public void test11()  throws Throwable  {
      SynchronizedMultiSet<String> synchronizedMultiSet0 = null;
      try {
        synchronizedMultiSet0 = new SynchronizedMultiSet<String>((MultiSet<String>) null, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.SynchronizedCollection"", e);
      }
  }"
132,"    protected SynchronizedMultiSet(final MultiSet<E> multiset) {
        super(multiset);
    }","  public void test12()  throws Throwable  {
      SynchronizedMultiSet<Integer> synchronizedMultiSet0 = null;
      try {
        synchronizedMultiSet0 = new SynchronizedMultiSet<Integer>((MultiSet<Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.SynchronizedCollection"", e);
      }
  }"
133,"    public int getCount(final Object object) {
        synchronized (lock) {
            return decorated().getCount(object);
        }
    }","  public void test13()  throws Throwable  {
      HashMultiSet<Boolean> hashMultiSet0 = new HashMultiSet<Boolean>();
      SynchronizedMultiSet<Boolean> synchronizedMultiSet0 = new SynchronizedMultiSet<Boolean>(hashMultiSet0);
      int int0 = synchronizedMultiSet0.getCount(hashMultiSet0);
}"
134,"    public boolean equals(final Object object) {
        if (object == this) {
            return true;
        }
        synchronized (lock) {
            return decorated().equals(object);
        }
    }","  public void test14()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      SynchronizedMultiSet<Object> synchronizedMultiSet0 = new SynchronizedMultiSet<Object>(hashMultiSet0, """");
      boolean boolean0 = synchronizedMultiSet0.equals("""");
}"
135,"    public boolean equals(final Object object) {
        if (object == this) {
            return true;
        }
        synchronized (lock) {
            return decorated().equals(object);
        }
    }","  public void test15()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      SynchronizedMultiSet<Object> synchronizedMultiSet0 = new SynchronizedMultiSet<Object>(hashMultiSet0, """");
      boolean boolean0 = hashMultiSet0.add((Object) """");
      SynchronizedMultiSet<Object> synchronizedMultiSet1 = SynchronizedMultiSet.synchronizedMultiSet((MultiSet<Object>) synchronizedMultiSet0);
      boolean boolean1 = synchronizedMultiSet0.equals(synchronizedMultiSet1);
}"
136,"    public int remove(final Object object, final int count) {
        synchronized (lock) {
            return decorated().remove(object, count);
        }
    }","  public void test16()  throws Throwable  {
      HashMultiSet<String> hashMultiSet0 = new HashMultiSet<String>();
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet1 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      SynchronizedMultiSet<AbstractMapMultiSet.MutableInteger> synchronizedMultiSet0 = SynchronizedMultiSet.synchronizedMultiSet((MultiSet<AbstractMapMultiSet.MutableInteger>) hashMultiSet1);
      int int0 = synchronizedMultiSet0.remove((Object) hashMultiSet0, 2);
}"
137,"    public boolean isEmpty() {
        synchronized (lock) {
            return decorated().isEmpty();
        }
    }","  public void test17()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      SynchronizedMultiSet<Object> synchronizedMultiSet0 = new SynchronizedMultiSet<Object>(hashMultiSet0, """");
      Set<MultiSet.Entry<Object>> set0 = (Set<MultiSet.Entry<Object>>)synchronizedMultiSet0.entrySet();
}"
138,"    public int size() {
        synchronized (lock) {
            return decorated().size();
        }
    }","  public void test18()  throws Throwable  {
      HashMultiSet<String> hashMultiSet0 = new HashMultiSet<String>();
      SynchronizedMultiSet<String> synchronizedMultiSet0 = SynchronizedMultiSet.synchronizedMultiSet((MultiSet<String>) hashMultiSet0);
      synchronizedMultiSet0.setCount(""9}"", 2);
}"
139,"    public int hashCode() {
        synchronized (lock) {
            return decorated().hashCode();
        }
    }","  public void test19()  throws Throwable  {
      HashMultiSet<PredicatedMultiSet<Object>> hashMultiSet0 = new HashMultiSet<PredicatedMultiSet<Object>>();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      PredicatedMultiSet<PredicatedMultiSet<Object>> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<PredicatedMultiSet<Object>>) hashMultiSet0, (Predicate<? super PredicatedMultiSet<Object>>) predicate0);
      SynchronizedMultiSet<PredicatedMultiSet<Object>> synchronizedMultiSet0 = new SynchronizedMultiSet<PredicatedMultiSet<Object>>(predicatedMultiSet0);
      synchronizedMultiSet0.hashCode();
  }"
140,"    public boolean isEmpty() {
        synchronized (lock) {
            return decorated().isEmpty();
        }
    }","  public void test20()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) hashMultiSet0, comparator0);
      Predicate<Integer> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Integer>) predicate0);
      PredicatedMultiSet<Integer> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<Integer>) hashMultiSet0, (Predicate<? super Integer>) predicate1);
      SynchronizedMultiSet<Integer> synchronizedMultiSet0 = new SynchronizedMultiSet<Integer>(predicatedMultiSet0, ""?DKA]:e"");
      Set<Integer> set0 = synchronizedMultiSet0.uniqueSet();
}"
141,"    public int add(final E object, final int count) {
        synchronized (lock) {
            return decorated().add(object, count);
        }
    }","  public void test21()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) hashMultiSet0, comparator0);
      Predicate<Integer> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Integer>) predicate0);
      PredicatedMultiSet<Integer> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<Integer>) hashMultiSet0, (Predicate<? super Integer>) predicate1);
      SynchronizedMultiSet<Integer> synchronizedMultiSet0 = new SynchronizedMultiSet<Integer>(predicatedMultiSet0, ""?DKA]:e"");
      // Undeclared exception!
      try { 
        synchronizedMultiSet0.add((Integer) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'null' - Predicate 'org.apache.commons.collections4.functors.NullIsFalsePredicate@3' rejected it
         //
         verifyException(""org.apache.commons.collections4.collection.PredicatedCollection"", e);
      }
  }"
142,"    public void reset() {
        // do nothing
    }","  public void test0()  throws Throwable  {
      EmptyIterator<Object> emptyIterator0 = new EmptyIterator<Object>();
      emptyIterator0.reset();
  }"
143,"    public boolean hasNext() {
        return false;
    }","  public void test1()  throws Throwable  {
      EmptyListIterator<Integer> emptyListIterator0 = new EmptyListIterator<Integer>();
      boolean boolean0 = emptyListIterator0.hasNext();
}"
144,"    public E next() {
        throw new NoSuchElementException(""Iterator contains no elements"");
    }","  public void test2()  throws Throwable  {
      EmptyIterator<Integer> emptyIterator0 = new EmptyIterator<Integer>();
      // Undeclared exception!
      try { 
        emptyIterator0.next();
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // Iterator contains no elements
         //
         verifyException(""org.apache.commons.collections4.iterators.AbstractEmptyIterator"", e);
      }
  }"
145,"    public void set(final E obj) {
        throw new IllegalStateException(""Iterator contains no elements"");
    }","  public void test3()  throws Throwable  {
      EmptyListIterator<Integer> emptyListIterator0 = new EmptyListIterator<Integer>();
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        emptyListIterator0.set(integer0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException(""org.apache.commons.collections4.iterators.AbstractEmptyIterator"", e);
      }
  }"
146,"    public void remove() {
        throw new IllegalStateException(""Iterator contains no elements"");
    }","  public void test4()  throws Throwable  {
      EmptyListIterator<String> emptyListIterator0 = new EmptyListIterator<String>();
      // Undeclared exception!
      try { 
        emptyListIterator0.remove();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException(""org.apache.commons.collections4.iterators.AbstractEmptyIterator"", e);
      }
  }"
147,"    public int nextIndex() {
        return 0;
    }","  public void test5()  throws Throwable  {
      EmptyIterator<Integer> emptyIterator0 = new EmptyIterator<Integer>();
      int int0 = emptyIterator0.nextIndex();
}"
148,"    public int previousIndex() {
        return -1;
    }","  public void test6()  throws Throwable  {
      EmptyListIterator<String> emptyListIterator0 = new EmptyListIterator<String>();
      int int0 = emptyListIterator0.previousIndex();
}"
149,"    public E previous() {
        throw new NoSuchElementException(""Iterator contains no elements"");
    }","  public void test7()  throws Throwable  {
      EmptyListIterator<String> emptyListIterator0 = new EmptyListIterator<String>();
      // Undeclared exception!
      try { 
        emptyListIterator0.previous();
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // Iterator contains no elements
         //
         verifyException(""org.apache.commons.collections4.iterators.AbstractEmptyIterator"", e);
      }
  }"
150,"    public void add(final E obj) {
        throw new UnsupportedOperationException(""add() not supported for empty Iterator"");
    }","  public void test8()  throws Throwable  {
      EmptyListIterator<String> emptyListIterator0 = new EmptyListIterator<String>();
      // Undeclared exception!
      try { 
        emptyListIterator0.add(""Nn"");
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // add() not supported for empty Iterator
         //
         verifyException(""org.apache.commons.collections4.iterators.AbstractEmptyIterator"", e);
      }
  }"
151,"    public boolean hasPrevious() {
        return false;
    }","  public void test9()  throws Throwable  {
      EmptyIterator<Object> emptyIterator0 = new EmptyIterator<Object>();
      boolean boolean0 = emptyIterator0.hasPrevious();
}"
152,"    public V setValue(final V value) {
        throw new IllegalStateException(""Iterator contains no elements"");
    }","  public void test0()  throws Throwable  {
      EmptyOrderedMapIterator<String, String> emptyOrderedMapIterator0 = new EmptyOrderedMapIterator<String, String>();
      // Undeclared exception!
      try { 
        emptyOrderedMapIterator0.setValue(""S"");
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException(""org.apache.commons.collections4.iterators.AbstractEmptyMapIterator"", e);
      }
  }"
153,"    public V getValue() {
        throw new IllegalStateException(""Iterator contains no elements"");
    }","  public void test1()  throws Throwable  {
      EmptyMapIterator<Object, Integer> emptyMapIterator0 = new EmptyMapIterator<Object, Integer>();
      // Undeclared exception!
      try { 
        emptyMapIterator0.getValue();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException(""org.apache.commons.collections4.iterators.AbstractEmptyMapIterator"", e);
      }
  }"
154,"    public K getKey() {
        throw new IllegalStateException(""Iterator contains no elements"");
    }","  public void test2()  throws Throwable  {
      EmptyMapIterator<Integer, Object> emptyMapIterator0 = new EmptyMapIterator<Integer, Object>();
      // Undeclared exception!
      try { 
        emptyMapIterator0.getKey();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException(""org.apache.commons.collections4.iterators.AbstractEmptyMapIterator"", e);
      }
  }"
155,"    public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator() {
        return INSTANCE;
    }","  public void test0()  throws Throwable  {
      OrderedMapIterator<Integer, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
}"
156,"    protected EmptyOrderedMapIterator() {
        super();
    }","  public void test1()  throws Throwable  {
      EmptyOrderedMapIterator<String, Integer> emptyOrderedMapIterator0 = new EmptyOrderedMapIterator<String, Integer>();
  }"
157,"    protected Iterator<I> getIterator() {
        return iterator;
    }","  public void test0()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(iterator0).toString();
      doReturn(true, true, true, false, false).when(iterator0).hasNext();
      doReturn((Object) null, (Object) null, (Object) null).when(iterator0).next();
      SkippingIterator<Object> skippingIterator0 = new SkippingIterator<Object>(iterator0, 2349L);
      skippingIterator0.hasNext();
      SkippingIterator<Object> skippingIterator1 = new SkippingIterator<Object>(skippingIterator0, 2349L);
      Iterator<Object> iterator1 = skippingIterator1.getIterator();
}"
158,,"  public void test1()  throws Throwable  {
      SkippingIterator<Integer> skippingIterator0 = null;
      try {
        skippingIterator0 = new SkippingIterator<Integer>((Iterator<Integer>) null, 2545L);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException(""org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator"", e);
      }
  }"
159,"    public void remove() {
        iterator.remove();
    }","  public void test2()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      SkippingIterator<Object> skippingIterator0 = new SkippingIterator<Object>(iterator0, 138L);
      // Undeclared exception!
      try { 
        skippingIterator0.remove();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // remove() can not be called before calling next()
         //
         verifyException(""org.apache.commons.collections4.iterators.SkippingIterator"", e);
      }
  }"
160,"    public V setValue(final V obj) {
        return iterator.setValue(obj);
    }","  public void test0()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(""1KQ@=Q]6eSm)R-p]"", ""1KQ@=Q]6eSm)R-p]"");
      EntrySetMapIterator<String, String> entrySetMapIterator0 = new EntrySetMapIterator<String, String>(hashMap0);
      entrySetMapIterator0.next();
      AbstractMapIteratorDecorator<String, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, String>(entrySetMapIterator0);
      String string0 = abstractMapIteratorDecorator0.setValue(""IPYzMLJ+qcug"");
}"
161,"    public void remove() {
        iterator.remove();
    }","  public void test1()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, (Object) null);
      EntrySetMapIterator<Integer, Object> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Object>(hashMap0);
      AbstractMapIteratorDecorator<Integer, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Integer, Object>(entrySetMapIterator0);
      abstractMapIteratorDecorator0.next();
      abstractMapIteratorDecorator0.remove();
  }"
162,"    public boolean hasNext() {
        return iterator.hasNext();
    }","  public void test2()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, (Object) null);
      EntrySetMapIterator<Integer, Object> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Object>(hashMap0);
      AbstractMapIteratorDecorator<Integer, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Integer, Object>(entrySetMapIterator0);
      boolean boolean0 = abstractMapIteratorDecorator0.hasNext();
}"
163,"    public K getKey() {
        return iterator.getKey();
    }","  public void test3()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("""", ""Cannot store a duplicate key (\"""");
      EntrySetMapIterator<String, String> entrySetMapIterator0 = new EntrySetMapIterator<String, String>(hashMap0);
      AbstractMapIteratorDecorator<String, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, String>(entrySetMapIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractMapIteratorDecorator0.forEachRemaining(consumer0);
      String string0 = abstractMapIteratorDecorator0.getKey();
}"
164,"    public V setValue(final V obj) {
        return iterator.setValue(obj);
    }","  public void test4()  throws Throwable  {
      OrderedMapIterator<Object, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Object, Object> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Object, ?>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<Object, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, Object>(orderedMapIterator1);
      AbstractMapIteratorDecorator<Object, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Object, Object>(abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.setValue(orderedMapIterator1);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // setValue() is not supported
         //
         verifyException(""org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator"", e);
      }
  }"
165,"    public void remove() {
        iterator.remove();
    }","  public void test5()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(""1KQ@=Q]6eSm)R-p]"", ""1KQ@=Q]6eSm)R-p]"");
      EntrySetMapIterator<String, String> entrySetMapIterator0 = new EntrySetMapIterator<String, String>(hashMap0);
      entrySetMapIterator0.next();
      hashMap0.put(""org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapIterator"", ""1KQ@=Q]6eSm)R-p]"");
      AbstractMapIteratorDecorator<String, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, String>(entrySetMapIterator0);
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.remove();
        fail(""Expecting exception: ConcurrentModificationException"");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.HashMap$HashIterator"", e);
      }
  }"
166,"    public void remove() {
        iterator.remove();
    }","  public void test6()  throws Throwable  {
      EmptyOrderedMapIterator<Object, String> emptyOrderedMapIterator0 = new EmptyOrderedMapIterator<Object, String>();
      OrderedMapIterator<Object, String> orderedMapIterator0 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Object, ? extends String>) emptyOrderedMapIterator0);
      AbstractMapIteratorDecorator<Object, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Object, String>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.remove();
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // remove() is not supported
         //
         verifyException(""org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator"", e);
      }
  }"
167,"    public K next() {
        return iterator.next();
    }","  public void test7()  throws Throwable  {
      EmptyMapIterator<Object, String> emptyMapIterator0 = new EmptyMapIterator<Object, String>();
      AbstractMapIteratorDecorator<Object, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Object, String>(emptyMapIterator0);
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.next();
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // Iterator contains no elements
         //
         verifyException(""org.apache.commons.collections4.iterators.AbstractEmptyIterator"", e);
      }
  }"
168,"    public K next() {
        return iterator.next();
    }","  public void test8()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      EntrySetMapIterator<Object, String> entrySetMapIterator0 = new EntrySetMapIterator<Object, String>(hashMap0);
      AbstractMapIteratorDecorator<Object, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Object, String>(entrySetMapIterator0);
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, ""js"");
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.next();
        fail(""Expecting exception: ConcurrentModificationException"");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.HashMap$HashIterator"", e);
      }
  }"
169,"    public AbstractMapIteratorDecorator(final MapIterator<K, V> iterator) {
        super();
        if (iterator == null) {
            throw new NullPointerException(""MapIterator must not be null"");
        }
        this.iterator = iterator;
    }","  public void test9()  throws Throwable  {
      AbstractMapIteratorDecorator<Integer, Object> abstractMapIteratorDecorator0 = null;
      try {
        abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Integer, Object>((MapIterator<Integer, Object>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // MapIterator must not be null
         //
         verifyException(""org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator"", e);
      }
  }"
170,"    public V getValue() {
        return iterator.getValue();
    }","  public void test10()  throws Throwable  {
      EmptyOrderedMapIterator<Object, String> emptyOrderedMapIterator0 = new EmptyOrderedMapIterator<Object, String>();
      AbstractMapIteratorDecorator<Object, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Object, String>(emptyOrderedMapIterator0);
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.getValue();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException(""org.apache.commons.collections4.iterators.AbstractEmptyMapIterator"", e);
      }
  }"
171,"    public boolean hasNext() {
        return iterator.hasNext();
    }","  public void test11()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      EntrySetMapIterator<Integer, Object> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Object>(hashMap0);
      AbstractMapIteratorDecorator<Integer, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Integer, Object>(entrySetMapIterator0);
      boolean boolean0 = abstractMapIteratorDecorator0.hasNext();
}"
172,"    public K getKey() {
        return iterator.getKey();
    }","  public void test12()  throws Throwable  {
      OrderedMapIterator<Object, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Object, Integer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Object, Integer>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.getKey();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException(""org.apache.commons.collections4.iterators.AbstractEmptyMapIterator"", e);
      }
  }"
173,"    protected MapIterator<K, V> getMapIterator() {
        return iterator;
    }","  public void test13()  throws Throwable  {
      EmptyMapIterator<Object, Object> emptyMapIterator0 = new EmptyMapIterator<Object, Object>();
      AbstractMapIteratorDecorator<Object, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Object, Object>(emptyMapIterator0);
      MapIterator<Object, Object> mapIterator0 = abstractMapIteratorDecorator0.getMapIterator();
}"
174,"    public K next() {
        return iterator.next();
    }","  public void test14()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      EntrySetMapIterator<Integer, Object> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Object>(hashMap0);
      AbstractMapIteratorDecorator<Integer, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Integer, Object>(entrySetMapIterator0);
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.next();
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.HashMap$HashIterator"", e);
      }
  }"
175,"    public void remove() {
        iterator.remove();
    }","  public void test15()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      EntrySetMapIterator<String, String> entrySetMapIterator0 = new EntrySetMapIterator<String, String>(hashMap0);
      AbstractMapIteratorDecorator<String, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, String>(entrySetMapIterator0);
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.remove();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
         verifyException(""org.apache.commons.collections4.iterators.EntrySetMapIterator"", e);
      }
  }"
176,"    public V setValue(final V obj) {
        return iterator.setValue(obj);
    }","  public void test16()  throws Throwable  {
      EmptyMapIterator<Object, String> emptyMapIterator0 = new EmptyMapIterator<Object, String>();
      AbstractMapIteratorDecorator<Object, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Object, String>(emptyMapIterator0);
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.setValue(""qF5V}ql"");
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException(""org.apache.commons.collections4.iterators.AbstractEmptyMapIterator"", e);
      }
  }"
177,"    protected EmptyIterator() {
        super();
    }","  public void test0()  throws Throwable  {
      EmptyIterator<Object> emptyIterator0 = new EmptyIterator<Object>();
  }"
178,"    public static <E> ResettableIterator<E> resettableEmptyIterator() {
        return RESETTABLE_INSTANCE;
    }","  public void test1()  throws Throwable  {
      ResettableIterator<Object> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
}"
179,"    public static <E> Iterator<E> emptyIterator() {
        return INSTANCE;
    }","  public void test2()  throws Throwable  {
      Iterator<Object> iterator0 = EmptyIterator.emptyIterator();
}"
180,"    public static <E> ListIterator<E> emptyListIterator() {
        return INSTANCE;
    }","  public void test0()  throws Throwable  {
      ListIterator<Object> listIterator0 = EmptyListIterator.emptyListIterator();
}"
181,"    public static <E> ResettableListIterator<E> resettableEmptyListIterator() {
        return RESETTABLE_INSTANCE;
    }","  public void test1()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
}"
182,"    protected EmptyListIterator() {
        super();
    }","  public void test2()  throws Throwable  {
      EmptyListIterator<String> emptyListIterator0 = new EmptyListIterator<String>();
  }"
183,"    public static <K, V> MapIterator<K, V> emptyMapIterator() {
        return INSTANCE;
    }","  public void test0()  throws Throwable  {
      MapIterator<Integer, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
}"
184,"    protected EmptyMapIterator() {
        super();
    }","  public void test1()  throws Throwable  {
      EmptyMapIterator<String, Object> emptyMapIterator0 = new EmptyMapIterator<String, Object>();
  }"
185,"    protected OrderedMapIterator<K, V> getOrderedMapIterator() {
        return iterator;
    }","  public void test0()  throws Throwable  {
      OrderedMapIterator<Object, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Object, String> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Object, ? extends String>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<Object, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, String>(orderedMapIterator1);
      OrderedMapIterator<Object, String> orderedMapIterator2 = abstractOrderedMapIteratorDecorator0.getOrderedMapIterator();
}"
186,"    public V setValue(final V obj) {
        return iterator.setValue(obj);
    }","  public void test1()  throws Throwable  {
      OrderedMapIterator<String, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<String, Object> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ?>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<String, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, Object>(orderedMapIterator1);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        abstractOrderedMapIteratorDecorator0.setValue(object0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // setValue() is not supported
         //
         verifyException(""org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator"", e);
      }
  }"
187,"    public void remove() {
        iterator.remove();
    }","  public void test2()  throws Throwable  {
      EmptyOrderedMapIterator<Integer, String> emptyOrderedMapIterator0 = new EmptyOrderedMapIterator<Integer, String>();
      OrderedMapIterator<Integer, String> orderedMapIterator0 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends String>) emptyOrderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<Integer, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, String>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        abstractOrderedMapIteratorDecorator0.remove();
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // remove() is not supported
         //
         verifyException(""org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator"", e);
      }
  }"
188,"    public AbstractOrderedMapIteratorDecorator(final OrderedMapIterator<K, V> iterator) {
        super();
        if (iterator == null) {
            throw new NullPointerException(""OrderedMapIterator must not be null"");
        }
        this.iterator = iterator;
    }","  public void test3()  throws Throwable  {
      AbstractOrderedMapIteratorDecorator<Integer, Object> abstractOrderedMapIteratorDecorator0 = null;
      try {
        abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, Object>((OrderedMapIterator<Integer, Object>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // OrderedMapIterator must not be null
         //
         verifyException(""org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator"", e);
      }
  }"
189,"    public K next() {
        return iterator.next();
    }","  public void test4()  throws Throwable  {
      EmptyOrderedMapIterator<Object, Integer> emptyOrderedMapIterator0 = new EmptyOrderedMapIterator<Object, Integer>();
      AbstractOrderedMapIteratorDecorator<Object, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, Integer>(emptyOrderedMapIterator0);
      // Undeclared exception!
      try { 
        abstractOrderedMapIteratorDecorator0.next();
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // Iterator contains no elements
         //
         verifyException(""org.apache.commons.collections4.iterators.AbstractEmptyIterator"", e);
      }
  }"
190,"    public V setValue(final V obj) {
        return iterator.setValue(obj);
    }","  public void test5()  throws Throwable  {
      EmptyOrderedMapIterator<String, Integer> emptyOrderedMapIterator0 = new EmptyOrderedMapIterator<String, Integer>();
      AbstractOrderedMapIteratorDecorator<String, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, Integer>(emptyOrderedMapIterator0);
      Integer integer0 = new Integer(664);
      // Undeclared exception!
      try { 
        abstractOrderedMapIteratorDecorator0.setValue(integer0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException(""org.apache.commons.collections4.iterators.AbstractEmptyMapIterator"", e);
      }
  }"
191,"    public K getKey() {
        return iterator.getKey();
    }","  public void test6()  throws Throwable  {
      OrderedMapIterator<Object, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Object, Object> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Object, ?>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<Object, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, Object>(orderedMapIterator1);
      // Undeclared exception!
      try { 
        abstractOrderedMapIteratorDecorator0.getKey();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException(""org.apache.commons.collections4.iterators.AbstractEmptyMapIterator"", e);
      }
  }"
192,"    public K previous() {
        return iterator.previous();
    }","  public void test7()  throws Throwable  {
      OrderedMapIterator<Object, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Object, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, Object>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        abstractOrderedMapIteratorDecorator0.previous();
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // Iterator contains no elements
         //
         verifyException(""org.apache.commons.collections4.iterators.AbstractEmptyIterator"", e);
      }
  }"
193,"    public boolean hasNext() {
        return iterator.hasNext();
    }","  public void test8()  throws Throwable  {
      OrderedMapIterator<Object, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Object, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, Integer>(orderedMapIterator0);
      boolean boolean0 = abstractOrderedMapIteratorDecorator0.hasNext();
}"
194,"    public boolean hasPrevious() {
        return iterator.hasPrevious();
    }","  public void test9()  throws Throwable  {
      EmptyOrderedMapIterator<String, String> emptyOrderedMapIterator0 = new EmptyOrderedMapIterator<String, String>();
      AbstractOrderedMapIteratorDecorator<String, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, String>(emptyOrderedMapIterator0);
      boolean boolean0 = abstractOrderedMapIteratorDecorator0.hasPrevious();
}"
195,"    public void remove() {
        iterator.remove();
    }","  public void test10()  throws Throwable  {
      EmptyOrderedMapIterator<Integer, String> emptyOrderedMapIterator0 = new EmptyOrderedMapIterator<Integer, String>();
      AbstractOrderedMapIteratorDecorator<Integer, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, String>(emptyOrderedMapIterator0);
      // Undeclared exception!
      try { 
        abstractOrderedMapIteratorDecorator0.remove();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException(""org.apache.commons.collections4.iterators.AbstractEmptyIterator"", e);
      }
  }"
196,"    public V getValue() {
        return iterator.getValue();
    }","  public void test11()  throws Throwable  {
      EmptyOrderedMapIterator<Object, String> emptyOrderedMapIterator0 = new EmptyOrderedMapIterator<Object, String>();
      AbstractOrderedMapIteratorDecorator<Object, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, String>(emptyOrderedMapIterator0);
      // Undeclared exception!
      try { 
        abstractOrderedMapIteratorDecorator0.getValue();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException(""org.apache.commons.collections4.iterators.AbstractEmptyMapIterator"", e);
      }
  }"
197,"    protected EmptyOrderedIterator() {
        super();
    }","  public void test0()  throws Throwable  {
      EmptyOrderedIterator<Object> emptyOrderedIterator0 = new EmptyOrderedIterator<Object>();
  }"
198,"    public static <E> OrderedIterator<E> emptyOrderedIterator() {
        return INSTANCE;
    }","  public void test1()  throws Throwable  {
      OrderedIterator<String> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
}"
199,"    public int previousIndex() {
        return iterator.previousIndex();
    }","  public void test0()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(2304, (-3097)).when(listIterator0).previousIndex();
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      int int0 = abstractListIteratorDecorator0.previousIndex();
      int int1 = abstractListIteratorDecorator0.previousIndex();
}"
200,"    public E previous() {
        return iterator.previous();
    }","  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(3645);
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(listIterator0).previous();
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      Object object0 = abstractListIteratorDecorator0.previous();
}"
201,"    public int nextIndex() {
        return iterator.nextIndex();
    }","  public void test2()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(2304).when(listIterator0).nextIndex();
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      int int0 = abstractListIteratorDecorator0.nextIndex();
}"
202,"    public int nextIndex() {
        return iterator.nextIndex();
    }","  public void test3()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(listIterator0).nextIndex();
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      int int0 = abstractListIteratorDecorator0.nextIndex();
}"
203,"    public E next() {
        return iterator.next();
    }","  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(856);
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(listIterator0).next();
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      Object object0 = abstractListIteratorDecorator0.next();
}"
204,"    public boolean hasPrevious() {
        return iterator.hasPrevious();
    }","  public void test5()  throws Throwable  {
      ListIterator<Integer> listIterator0 = (ListIterator<Integer>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasPrevious();
      AbstractListIteratorDecorator<Integer> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Integer>(listIterator0);
      boolean boolean0 = abstractListIteratorDecorator0.hasPrevious();
}"
205,"    public boolean hasNext() {
        return iterator.hasNext();
    }","  public void test6()  throws Throwable  {
      ListIterator<Integer> listIterator0 = (ListIterator<Integer>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(listIterator0).hasNext();
      AbstractListIteratorDecorator<Integer> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Integer>(listIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractListIteratorDecorator0.forEachRemaining(consumer0);
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractListIteratorDecorator0.forEachRemaining(consumer1);
      abstractListIteratorDecorator0.hasNext();
  }"
206,"    public boolean hasNext() {
        return iterator.hasNext();
    }","  public void test7()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false).when(listIterator0).hasNext();
      doReturn((Object) null).when(listIterator0).next();
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractListIteratorDecorator0.forEachRemaining(consumer0);
      boolean boolean0 = abstractListIteratorDecorator0.hasNext();
}"
207,"    public boolean hasPrevious() {
        return iterator.hasPrevious();
    }","  public void test8()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator1 = new AbstractListIteratorDecorator<Object>(abstractListIteratorDecorator0);
      ListIterator<Object> listIterator1 = abstractListIteratorDecorator1.getListIterator();
}"
208,"    public AbstractListIteratorDecorator(final ListIterator<E> iterator) {
        super();
        if (iterator == null) {
            throw new NullPointerException(""ListIterator must not be null"");
        }
        this.iterator = iterator;
    }","  public void test9()  throws Throwable  {
      AbstractListIteratorDecorator<Integer> abstractListIteratorDecorator0 = null;
      try {
        abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Integer>((ListIterator<Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException(""org.apache.commons.collections4.iterators.AbstractListIteratorDecorator"", e);
      }
  }"
209,"    public boolean hasPrevious() {
        return iterator.hasPrevious();
    }","  public void test10()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      abstractListIteratorDecorator0.set((Object) null);
}"
210,"    public int previousIndex() {
        return iterator.previousIndex();
    }","  public void test11()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(listIterator0).previousIndex();
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      int int0 = abstractListIteratorDecorator0.previousIndex();
}"
211,"    public E previous() {
        return iterator.previous();
    }","  public void test12()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(listIterator0).previous();
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      Object object0 = abstractListIteratorDecorator0.previous();
}"
212,"    public boolean hasPrevious() {
        return iterator.hasPrevious();
    }","  public void test13()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(listIterator0).hasPrevious();
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      boolean boolean0 = abstractListIteratorDecorator0.hasPrevious();
}"
213,"    public boolean hasNext() {
        return iterator.hasNext();
    }","  public void test14()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      abstractListIteratorDecorator0.add((Object) null);
}"
214,"    public int nextIndex() {
        return iterator.nextIndex();
    }","  public void test15()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(listIterator0).nextIndex();
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      int int0 = abstractListIteratorDecorator0.nextIndex();
}"
215,"    public boolean hasNext() {
        return iterator.hasNext();
    }","  public void test16()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      abstractListIteratorDecorator0.remove();
}"
216,"    public E next() {
        return iterator.next();
    }","  public void test17()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(listIterator0).next();
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      Object object0 = abstractListIteratorDecorator0.next();
}"
217,"    public E next() {
        return getIterator().next();
    }","  public void test0()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iterator0).next();
      SkippingIterator<Integer> skippingIterator0 = new SkippingIterator<Integer>(iterator0, 0L);
      Integer integer0 = skippingIterator0.next();
}"
218,"    public E next() {
        return getIterator().next();
    }","  public void test1()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      doReturn("""").when(iterator0).next();
      SkippingIterator<String> skippingIterator0 = new SkippingIterator<String>(iterator0, 770L);
      String string0 = skippingIterator0.next();
}"
219,"    public Transformer<? super I, ? extends O> getTransformer() {
        return transformer;
    }","  public void test0()  throws Throwable  {
      TransformIterator<String, Object> transformIterator0 = new TransformIterator<String, Object>();
      TransformIterator<Object, String> transformIterator1 = new TransformIterator<Object, String>(transformIterator0);
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(transformer0).toString();
      TransformIterator<String, String> transformIterator2 = new TransformIterator<String, String>(transformIterator1, transformer0);
      Transformer<? super String, ? extends String> transformer1 = transformIterator2.getTransformer();
}"
220,"    public Iterator<? extends I> getIterator() {
        return iterator;
    }","  public void test1()  throws Throwable  {
      TransformIterator<String, Object> transformIterator0 = new TransformIterator<String, Object>();
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformIterator<Object, String> transformIterator1 = new TransformIterator<Object, String>(transformIterator0, transformer0);
      TransformIterator<String, String> transformIterator2 = new TransformIterator<String, String>(transformIterator1);
      Iterator<? extends String> iterator0 = transformIterator2.getIterator();
}"
221,"    protected O transform(final I source) {
        return transformer.transform(source);
    }","  public void test2()  throws Throwable  {
      TransformIterator<String, Integer> transformIterator0 = new TransformIterator<String, Integer>();
      // Undeclared exception!
      try { 
        transformIterator0.transform("""");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.iterators.TransformIterator"", e);
      }
  }"
222,"    public void remove() {
        iterator.remove();
    }","  public void test3()  throws Throwable  {
      TransformIterator<String, Integer> transformIterator0 = new TransformIterator<String, Integer>();
      // Undeclared exception!
      try { 
        transformIterator0.remove();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.iterators.TransformIterator"", e);
      }
  }"
223,"    public Transformer<? super I, ? extends O> getTransformer() {
        return transformer;
    }","  public void test4()  throws Throwable  {
      TransformIterator<Object, String> transformIterator0 = new TransformIterator<Object, String>();
      TransformIterator<Object, Object> transformIterator1 = new TransformIterator<Object, Object>(transformIterator0);
      Transformer<? super Object, ?> transformer0 = transformIterator1.getTransformer();
}"
224,"    public Iterator<? extends I> getIterator() {
        return iterator;
    }","  public void test5()  throws Throwable  {
      TransformIterator<String, String> transformIterator0 = new TransformIterator<String, String>();
      Iterator<? extends String> iterator0 = transformIterator0.getIterator();
}"
225,"    public O next() {
        return transform(iterator.next());
    }","  public void test6()  throws Throwable  {
      TransformIterator<String, Object> transformIterator0 = new TransformIterator<String, Object>();
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformIterator<Object, String> transformIterator1 = new TransformIterator<Object, String>(transformIterator0, transformer0);
      // Undeclared exception!
      try { 
        transformIterator1.next();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.iterators.TransformIterator"", e);
      }
  }"
226,"    public boolean hasNext() {
        return iterator.hasNext();
    }","  public void test7()  throws Throwable  {
      TransformIterator<String, Integer> transformIterator0 = new TransformIterator<String, Integer>();
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformIterator<Object, String> transformIterator1 = new TransformIterator<Object, String>(transformIterator0, transformer0);
      TransformIterator<String, Object> transformIterator2 = new TransformIterator<String, Object>(transformIterator1);
      // Undeclared exception!
      try { 
        transformIterator2.hasNext();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.iterators.TransformIterator"", e);
      }
  }"
227,"    protected O transform(final I source) {
        return transformer.transform(source);
    }","  public void test8()  throws Throwable  {
      TransformIterator<String, Object> transformIterator0 = new TransformIterator<String, Object>();
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(transformer0).transform(any());
      TransformIterator<Object, String> transformIterator1 = new TransformIterator<Object, String>(transformIterator0, transformer0);
      String string0 = transformIterator1.transform("""");
}"
228,"    public void setIterator(final Iterator<? extends I> iterator) {
        this.iterator = iterator;
    }","  public void test9()  throws Throwable  {
      TransformIterator<String, Integer> transformIterator0 = new TransformIterator<String, Integer>((Iterator<? extends String>) null);
      Transformer<Object, Integer> transformer0 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformIterator<Integer, Object> transformIterator1 = new TransformIterator<Integer, Object>(transformIterator0, transformer0);
      transformIterator1.setIterator(transformIterator0);
  }"
229,"    public void setTransformer(final Transformer<? super I, ? extends O> transformer) {
        this.transformer = transformer;
    }","  public void test10()  throws Throwable  {
      TransformIterator<String, Integer> transformIterator0 = new TransformIterator<String, Integer>();
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformIterator<Object, String> transformIterator1 = new TransformIterator<Object, String>(transformIterator0, transformer0);
      TransformIterator<String, Object> transformIterator2 = new TransformIterator<String, Object>(transformIterator1);
      Transformer<Object, Object> transformer1 = (Transformer<Object, Object>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      transformIterator2.setTransformer(transformer1);
  }"
230,"    public E nextElement() {
        return iterator.next();
    }","  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(iterator0).next();
      IteratorEnumeration<Integer> iteratorEnumeration0 = new IteratorEnumeration<Integer>(iterator0);
      Integer integer1 = iteratorEnumeration0.nextElement();
}"
231,"    public boolean hasMoreElements() {
        return iterator.hasNext();
    }","  public void test1()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      IteratorEnumeration<String> iteratorEnumeration0 = new IteratorEnumeration<String>(iterator0);
      boolean boolean0 = iteratorEnumeration0.hasMoreElements();
}"
232,"    public Iterator<? extends E> getIterator() {
        return iterator;
    }","  public void test2()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(iterator0).toString();
      IteratorEnumeration<Integer> iteratorEnumeration0 = new IteratorEnumeration<Integer>(iterator0);
      Iterator<? extends Integer> iterator1 = iteratorEnumeration0.getIterator();
}"
233,"    public E nextElement() {
        return iterator.next();
    }","  public void test3()  throws Throwable  {
      IteratorEnumeration<Object> iteratorEnumeration0 = new IteratorEnumeration<Object>((Iterator<?>) null);
      // Undeclared exception!
      try { 
        iteratorEnumeration0.nextElement();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.iterators.IteratorEnumeration"", e);
      }
  }"
234,"    public E nextElement() {
        return iterator.next();
    }","  public void test4()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iterator0).next();
      IteratorEnumeration<Object> iteratorEnumeration0 = new IteratorEnumeration<Object>(iterator0);
      Object object0 = iteratorEnumeration0.nextElement();
}"
235,"    public IteratorEnumeration() {
    }","  public void test5()  throws Throwable  {
      IteratorEnumeration<Object> iteratorEnumeration0 = new IteratorEnumeration<Object>();
  }"
236,"    public Iterator<? extends E> getIterator() {
        return iterator;
    }","  public void test6()  throws Throwable  {
      IteratorEnumeration<Object> iteratorEnumeration0 = new IteratorEnumeration<Object>((Iterator<?>) null);
      Iterator<?> iterator0 = iteratorEnumeration0.getIterator();
}"
237,"    public boolean hasMoreElements() {
        return iterator.hasNext();
    }","  public void test7()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      IteratorEnumeration<Object> iteratorEnumeration0 = new IteratorEnumeration<Object>(iterator0);
      boolean boolean0 = iteratorEnumeration0.hasMoreElements();
}"
238,"    public boolean hasMoreElements() {
        return iterator.hasNext();
    }","  public void test8()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      IteratorEnumeration<Object> iteratorEnumeration0 = new IteratorEnumeration<Object>(iterator0);
      iteratorEnumeration0.setIterator((Iterator<?>) null);
      // Undeclared exception!
      try { 
        iteratorEnumeration0.hasMoreElements();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.iterators.IteratorEnumeration"", e);
      }
  }"
239,"    public UniqueFilterIterator(final Iterator<? extends E> iterator) {
        super(iterator, UniquePredicate.uniquePredicate());
    }","  public void test0()  throws Throwable  {
      UniqueFilterIterator<Object> uniqueFilterIterator0 = new UniqueFilterIterator<Object>((Iterator<?>) null);
  }"
240,"    public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue,
                                                          final Predicate<? super E> predicate) {
        return new PredicatedQueue<>(Queue, predicate);
    }","  public void test0()  throws Throwable  {
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        PredicatedQueue.predicatedQueue((Queue<Object>) null, (Predicate<? super Object>) predicate0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.AbstractCollectionDecorator"", e);
      }
  }"
241,"    protected PredicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate) {
        super(queue, predicate);
    }","  public void test1()  throws Throwable  {
      PredicatedQueue<LinkedList<Object>> predicatedQueue0 = null;
      try {
        predicatedQueue0 = new PredicatedQueue<LinkedList<Object>>((Queue<LinkedList<Object>>) null, (Predicate<? super LinkedList<Object>>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.AbstractCollectionDecorator"", e);
      }
  }"
242,"    public E remove() {
        synchronized (lock) {
            return decorated().remove();
        }
    }","  public void test0()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedQueue<Object> synchronizedQueue0 = SynchronizedQueue.synchronizedQueue((Queue<Object>) linkedList0);
      linkedList0.add((Object) null);
      Object object0 = synchronizedQueue0.remove();
}"
243,"    public int size() {
        synchronized (lock) {
            return decorated().size();
        }
    }","  public void test1()  throws Throwable  {
      PriorityQueue<ArrayDeque<String>> priorityQueue0 = new PriorityQueue<ArrayDeque<String>>();
      SynchronizedQueue<ArrayDeque<String>> synchronizedQueue0 = SynchronizedQueue.synchronizedQueue((Queue<ArrayDeque<String>>) priorityQueue0);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      synchronizedQueue0.add(arrayDeque0);
      ArrayDeque<String> arrayDeque1 = synchronizedQueue0.remove();
}"
244,"    public E poll() {
        synchronized (lock) {
            return decorated().poll();
        }
    }","  public void test2()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedQueue<Object> synchronizedQueue0 = new SynchronizedQueue<Object>(linkedList0);
      linkedList0.add((Object) synchronizedQueue0);
      Object object0 = synchronizedQueue0.poll();
}"
245,"    public E peek() {
        synchronized (lock) {
            return decorated().peek();
        }
    }","  public void test3()  throws Throwable  {
      ArrayDeque<LinkedList<String>> arrayDeque0 = new ArrayDeque<LinkedList<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      arrayDeque0.add(linkedList0);
      SynchronizedQueue<LinkedList<String>> synchronizedQueue0 = SynchronizedQueue.synchronizedQueue((Queue<LinkedList<String>>) arrayDeque0);
      LinkedList<String> linkedList1 = synchronizedQueue0.peek();
}"
246,"    public boolean equals(final Object object) {
        if (object == this) {
            return true;
        }
        synchronized (lock) {
            return decorated().equals(object);
        }
    }","  public void test4()  throws Throwable  {
      PriorityQueue<LinkedList<Object>> priorityQueue0 = new PriorityQueue<LinkedList<Object>>();
      SynchronizedQueue<LinkedList<Object>> synchronizedQueue0 = SynchronizedQueue.synchronizedQueue((Queue<LinkedList<Object>>) priorityQueue0);
      Object object0 = new Object();
      boolean boolean0 = synchronizedQueue0.equals(object0);
}"
247,"    public E element() {
        synchronized (lock) {
            return decorated().element();
        }
    }","  public void test5()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SynchronizedQueue<String> synchronizedQueue0 = new SynchronizedQueue<String>(linkedList0);
      linkedList0.add((String) null);
      String string0 = synchronizedQueue0.element();
}"
248,"    public int size() {
        synchronized (lock) {
            return decorated().size();
        }
    }","  public void test6()  throws Throwable  {
      PriorityQueue<LinkedList<Object>> priorityQueue0 = new PriorityQueue<LinkedList<Object>>();
      SynchronizedQueue<LinkedList<Object>> synchronizedQueue0 = SynchronizedQueue.synchronizedQueue((Queue<LinkedList<Object>>) priorityQueue0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      synchronizedQueue0.offer(linkedList0);
      LinkedList<Object> linkedList1 = synchronizedQueue0.element();
}"
249,"    protected Queue<E> decorated() {
        return (Queue<E>) super.decorated();
    }","  public void test7()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SynchronizedQueue<String> synchronizedQueue0 = new SynchronizedQueue<String>(linkedList0);
      Queue<String> queue0 = synchronizedQueue0.decorated();
}"
250,"    public static <E> SynchronizedQueue<E> synchronizedQueue(final Queue<E> queue) {
        return new SynchronizedQueue<>(queue);
    }","  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        SynchronizedQueue.synchronizedQueue((Queue<Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.SynchronizedCollection"", e);
      }
  }"
251,"    public boolean offer(final E e) {
        synchronized (lock) {
            return decorated().offer(e);
        }
    }","  public void test9()  throws Throwable  {
      ArrayDeque<LinkedList<Object>> arrayDeque0 = new ArrayDeque<LinkedList<Object>>();
      Object object0 = new Object();
      SynchronizedQueue<LinkedList<Object>> synchronizedQueue0 = new SynchronizedQueue<LinkedList<Object>>(arrayDeque0, object0);
      // Undeclared exception!
      try { 
        synchronizedQueue0.offer((LinkedList<Object>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.ArrayDeque"", e);
      }
  }"
252,"    public boolean offer(final E e) {
        synchronized (lock) {
            return decorated().offer(e);
        }
    }","  public void test10()  throws Throwable  {
      PriorityQueue<LinkedList<String>> priorityQueue0 = new PriorityQueue<LinkedList<String>>();
      SynchronizedQueue<LinkedList<String>> synchronizedQueue0 = new SynchronizedQueue<LinkedList<String>>(priorityQueue0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      priorityQueue0.add(linkedList0);
      // Undeclared exception!
      try { 
        synchronizedQueue0.offer(linkedList0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to java.lang.Comparable
         //
         verifyException(""java.util.PriorityQueue"", e);
      }
  }"
253,"    protected SynchronizedQueue(final Queue<E> queue) {
        super(queue);
    }","  public void test11()  throws Throwable  {
      Object object0 = new Object();
      SynchronizedQueue<Integer> synchronizedQueue0 = null;
      try {
        synchronizedQueue0 = new SynchronizedQueue<Integer>((Queue<Integer>) null, object0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.SynchronizedCollection"", e);
      }
  }"
254,"    protected SynchronizedQueue(final Queue<E> queue) {
        super(queue);
    }","  public void test12()  throws Throwable  {
      SynchronizedQueue<ArrayDeque<String>> synchronizedQueue0 = null;
      try {
        synchronizedQueue0 = new SynchronizedQueue<ArrayDeque<String>>((Queue<ArrayDeque<String>>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.SynchronizedCollection"", e);
      }
  }"
255,"    public boolean equals(final Object object) {
        if (object == this) {
            return true;
        }
        synchronized (lock) {
            return decorated().equals(object);
        }
    }","  public void test13()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      SynchronizedQueue<Integer> synchronizedQueue0 = SynchronizedQueue.synchronizedQueue((Queue<Integer>) arrayDeque0);
      boolean boolean0 = synchronizedQueue0.equals(synchronizedQueue0);
}"
256,"    public E element() {
        synchronized (lock) {
            return decorated().element();
        }
    }","  public void test14()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SynchronizedQueue<String> synchronizedQueue0 = new SynchronizedQueue<String>(linkedList0);
      // Undeclared exception!
      try { 
        synchronizedQueue0.element();
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.LinkedList"", e);
      }
  }"
257,"    public int hashCode() {
        synchronized (lock) {
            return decorated().hashCode();
        }
    }","  public void test15()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SynchronizedQueue<Object> synchronizedQueue0 = new SynchronizedQueue<Object>(linkedList0);
      synchronizedQueue0.hashCode();
  }"
258,"    public E remove() {
        synchronized (lock) {
            return decorated().remove();
        }
    }","  public void test16()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      SynchronizedQueue<Object> synchronizedQueue0 = SynchronizedQueue.synchronizedQueue((Queue<Object>) arrayDeque0);
      // Undeclared exception!
      try { 
        synchronizedQueue0.remove();
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.ArrayDeque"", e);
      }
  }"
259,"    public E peek() {
        synchronized (lock) {
            return decorated().peek();
        }
    }","  public void test17()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      SynchronizedQueue<Object> synchronizedQueue0 = new SynchronizedQueue<Object>(arrayDeque0);
      Object object0 = synchronizedQueue0.peek();
}"
260,"    public E poll() {
        synchronized (lock) {
            return decorated().poll();
        }
    }","  public void test18()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SynchronizedQueue<String> synchronizedQueue0 = new SynchronizedQueue<String>(linkedList0);
      String string0 = synchronizedQueue0.poll();
}"
261,"    public DefaultMapEntry(final K key, final V value) {
        super(key, value);
    }","  public void test0()  throws Throwable  {
      TiedMapEntry<Integer, String> tiedMapEntry0 = new TiedMapEntry<Integer, String>((Map<Integer, String>) null, (Integer) null);
      DefaultMapEntry<Integer, Object> defaultMapEntry0 = null;
      try {
        defaultMapEntry0 = new DefaultMapEntry<Integer, Object>((KeyValue<? extends Integer, ?>) tiedMapEntry0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.keyvalue.TiedMapEntry"", e);
      }
  }"
262,"    public DefaultMapEntry(final K key, final V value) {
        super(key, value);
    }","  public void test1()  throws Throwable  {
      DefaultMapEntry<Object, Object> defaultMapEntry0 = null;
      try {
        defaultMapEntry0 = new DefaultMapEntry<Object, Object>((Map.Entry<?, ?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.keyvalue.DefaultMapEntry"", e);
      }
  }"
263,"    public DefaultMapEntry(final K key, final V value) {
        super(key, value);
    }","  public void test2()  throws Throwable  {
      SingletonMap<String, String> singletonMap0 = new SingletonMap<String, String>((String) null, ""-3t^<pM,q+5/"");
      DefaultMapEntry<String, Object> defaultMapEntry0 = new DefaultMapEntry<String, Object>(singletonMap0);
  }"
264,"    public DefaultMapEntry(final K key, final V value) {
        super(key, value);
    }","  public void test3()  throws Throwable  {
      Integer integer0 = new Integer((-1101));
      DefaultMapEntry<String, Integer> defaultMapEntry0 = new DefaultMapEntry<String, Integer>(""-3t^<pM,q+5/"", integer0);
  }"
265,"    public DefaultMapEntry(final K key, final V value) {
        super(key, value);
    }","  public void test4()  throws Throwable  {
      SingletonMap<String, String> singletonMap0 = new SingletonMap<String, String>((String) null, ""-3t^<pM,q+5/"");
      UnmodifiableMapEntry<String, String> unmodifiableMapEntry0 = new UnmodifiableMapEntry<String, String>(singletonMap0);
      DefaultMapEntry<Object, Object> defaultMapEntry0 = new DefaultMapEntry<Object, Object>((Map.Entry<?, ?>) unmodifiableMapEntry0);
  }"
266,"    protected V setValue(final V value) {
        final V old = this.value;
        this.value = value;
        return old;
    }","  public void test0()  throws Throwable  {
      DefaultKeyValue<Object, String> defaultKeyValue0 = new DefaultKeyValue<Object, String>();
      String string0 = defaultKeyValue0.setValue(""l(S@N<X dNx1"");
}"
267,"    protected V setValue(final V value) {
        final V old = this.value;
        this.value = value;
        return old;
    }","  public void test1()  throws Throwable  {
      DefaultKeyValue<String, Object> defaultKeyValue0 = new DefaultKeyValue<String, Object>(""DefaultKeyValue may not contain itself as a value."", ""DefaultKeyValue may not contain itself as a value."");
      Object object0 = defaultKeyValue0.setValue("""");
}"
268,"    protected K setKey(final K key) {
        final K old = this.key;
        this.key = key;
        return old;
    }","  public void test2()  throws Throwable  {
      Integer integer0 = new Integer((-3526));
      DefaultMapEntry<Integer, String> defaultMapEntry0 = new DefaultMapEntry<Integer, String>(integer0, """");
      Integer integer1 = defaultMapEntry0.setKey(integer0);
}"
269,"    public V getValue() {
        return value;
    }","  public void test3()  throws Throwable  {
      DefaultMapEntry<Object, Object> defaultMapEntry0 = new DefaultMapEntry<Object, Object>((Object) null, (Object) null);
      Object object0 = defaultMapEntry0.getValue();
}"
270,"    public V getValue() {
        return value;
    }","  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(2750);
      DefaultKeyValue<Integer, String> defaultKeyValue0 = new DefaultKeyValue<Integer, String>(integer0, ""#DGw}]!|/"");
      String string0 = defaultKeyValue0.getValue();
}"
271,"    public K getKey() {
        return key;
    }","  public void test5()  throws Throwable  {
      DefaultKeyValue<String, Object> defaultKeyValue0 = new DefaultKeyValue<String, Object>(""DefaultKeyValue may not contain itself as a value."", ""DefaultKeyValue may not contain itself as a value."");
      String string0 = defaultKeyValue0.getKey();
}"
272,"    protected V setValue(final V value) {
        final V old = this.value;
        this.value = value;
        return old;
    }","  public void test6()  throws Throwable  {
      Integer integer0 = new Integer((-766));
      UnmodifiableMapEntry<Integer, Integer> unmodifiableMapEntry0 = new UnmodifiableMapEntry<Integer, Integer>(integer0, integer0);
      // Undeclared exception!
      try { 
        unmodifiableMapEntry0.setValue(integer0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // setValue() is not supported
         //
         verifyException(""org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry"", e);
      }
  }"
273,"    protected V setValue(final V value) {
        final V old = this.value;
        this.value = value;
        return old;
    }","  public void test7()  throws Throwable  {
      DefaultKeyValue<String, Object> defaultKeyValue0 = new DefaultKeyValue<String, Object>();
      DefaultMapEntry<Object, Object> defaultMapEntry0 = new DefaultMapEntry<Object, Object>((Object) null, ""{}"");
      defaultMapEntry0.setValue(defaultKeyValue0);
      Object object0 = defaultMapEntry0.getValue();
      // Undeclared exception!
      try { 
        defaultKeyValue0.setValue(object0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // DefaultKeyValue may not contain itself as a value.
         //
         verifyException(""org.apache.commons.collections4.keyvalue.DefaultKeyValue"", e);
      }
  }"
274,"    public K getKey() {
        return key;
    }","  public void test8()  throws Throwable  {
      DefaultKeyValue<Object, Object> defaultKeyValue0 = new DefaultKeyValue<Object, Object>();
      Object object0 = defaultKeyValue0.getKey();
}"
275,"    protected K setKey(final K key) {
        final K old = this.key;
        this.key = key;
        return old;
    }","  public void test9()  throws Throwable  {
      DefaultKeyValue<String, Object> defaultKeyValue0 = new DefaultKeyValue<String, Object>();
      String string0 = defaultKeyValue0.setKey(""null=.jCAn\""9x:-"");
}"
276,"    public String toString() {
        return new StringBuilder()
            .append(getKey())
            .append('=')
            .append(getValue())
            .toString();
    }","  public void test10()  throws Throwable  {
      DefaultKeyValue<String, Object> defaultKeyValue0 = new DefaultKeyValue<String, Object>();
      String string0 = defaultKeyValue0.toString();
}"
277,"    public UnmodifiableMapEntry(final K key, final V value) {
        super(key, value);
    }","  public void test0()  throws Throwable  {
      UnmodifiableMapEntry<Object, String> unmodifiableMapEntry0 = null;
      try {
        unmodifiableMapEntry0 = new UnmodifiableMapEntry<Object, String>((KeyValue<?, ? extends String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry"", e);
      }
  }"
278,"    public UnmodifiableMapEntry(final K key, final V value) {
        super(key, value);
    }","  public void test1()  throws Throwable  {
      UnmodifiableMapEntry<Object, Object> unmodifiableMapEntry0 = null;
      try {
        unmodifiableMapEntry0 = new UnmodifiableMapEntry<Object, Object>((Map.Entry<?, ?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry"", e);
      }
  }"
279,"    public V setValue(final V value) {
        throw new UnsupportedOperationException(""setValue() is not supported"");
    }","  public void test2()  throws Throwable  {
      UnmodifiableMapEntry<String, String> unmodifiableMapEntry0 = new UnmodifiableMapEntry<String, String>(""?f`z2Qx<mx~H kptNdY"", ""?f`z2Qx<mx~H kptNdY"");
      UnmodifiableMapEntry<Object, Comparable<String>> unmodifiableMapEntry1 = new UnmodifiableMapEntry<Object, Comparable<String>>((KeyValue<?, ? extends Comparable<String>>) unmodifiableMapEntry0);
      // Undeclared exception!
      try { 
        unmodifiableMapEntry1.setValue(""?f`z2Qx<mx~H kptNdY"");
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // setValue() is not supported
         //
         verifyException(""org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry"", e);
      }
  }"
280,"    public UnmodifiableMapEntry(final K key, final V value) {
        super(key, value);
    }","  public void test3()  throws Throwable  {
      UnmodifiableMapEntry<String, String> unmodifiableMapEntry0 = new UnmodifiableMapEntry<String, String>(""?f`z2Qx<mx~H kptNdY"", ""?f`z2Qx<mx~H kptNdY"");
      UnmodifiableMapEntry<Object, Object> unmodifiableMapEntry1 = new UnmodifiableMapEntry<Object, Object>((Map.Entry<?, ?>) unmodifiableMapEntry0);
  }"
281,"    public PatriciaTrie() {
        super(new StringKeyAnalyzer());
    }","  public void test0()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = null;
      try {
        patriciaTrie0 = new PatriciaTrie<String>((Map<? extends String, ? extends String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.AbstractMap"", e);
      }
  }"
282,"    public PatriciaTrie() {
        super(new StringKeyAnalyzer());
    }","  public void test1()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
  }"
283,"    protected Properties createProperties() {
        return new Properties();
    }","  public void test0()  throws Throwable  {
      PropertiesFactory propertiesFactory0 = PropertiesFactory.INSTANCE;
      Properties properties0 = propertiesFactory0.createProperties();
}"
284,"    public int size() {
        return decorated().size();
    }","  public void test0()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      FixedSizeList<String> fixedSizeList0 = FixedSizeList.fixedSizeList((List<String>) linkedList0);
      int int0 = fixedSizeList0.size();
}"
285,"    public boolean removeIf(final Predicate<? super E> filter) {
        return decorated().removeIf(filter);
    }","  public void test1()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedSizeList<Object> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Object>) linkedList0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>((Predicate<? super Object>) null);
      IndexedCollection<Boolean, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) fixedSizeList0, (Transformer<Object, Boolean>) predicateTransformer0);
      java.util.function.Predicate<Object> predicate0 = java.util.function.Predicate.isEqual((Object) predicateTransformer0);
      boolean boolean0 = indexedCollection0.removeIf(predicate0);
}"
286,"    public boolean removeAll(final Collection<?> coll) {
        return decorated().removeAll(coll);
    }","  public void test2()  throws Throwable  {
      CircularFifoQueue<InstanceofPredicate> circularFifoQueue0 = new CircularFifoQueue<InstanceofPredicate>(4826);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<Object, InstanceofPredicate> transformer0 = ConstantTransformer.constantTransformer(instanceofPredicate0);
      TransformedCollection<InstanceofPredicate> transformedCollection0 = TransformedCollection.transformingCollection((Collection<InstanceofPredicate>) circularFifoQueue0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
      boolean boolean0 = transformedCollection0.removeAll(circularFifoQueue0);
}"
287,"    public Iterator<E> iterator() {
        return decorated().iterator();
    }","  public void test3()  throws Throwable  {
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      FixedSizeList<Closure<Object>> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Closure<Object>>) linkedList0);
      Iterator<Closure<Object>> iterator0 = fixedSizeList0.iterator();
}"
288,"    protected Collection<E> decorated() {
        return collection;
    }","  public void test4()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      PredicatedCollection<Integer> predicatedCollection0 = new PredicatedCollection<Integer>(linkedList0, predicate0);
      Collection<Integer> collection0 = predicatedCollection0.decorated();
}"
289,"    public E last() {
        return getSortedBag().last();
    }","  public void test0()  throws Throwable  {
      TreeBag<String> treeBag0 = new TreeBag<String>();
      SynchronizedSortedBag<String> synchronizedSortedBag0 = new SynchronizedSortedBag<String>(treeBag0);
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>((String) null);
      treeBag0.add("""");
      TransformedSortedBag<String> transformedSortedBag0 = new TransformedSortedBag<String>(synchronizedSortedBag0, constantTransformer0);
      String string0 = transformedSortedBag0.last();
}"
290,"    protected SynchronizedSortedBag(final SortedBag<E> bag) {
        super(bag);
    }","  public void test0()  throws Throwable  {
      SynchronizedSortedBag<String> synchronizedSortedBag0 = null;
      try {
        synchronizedSortedBag0 = new SynchronizedSortedBag<String>((SortedBag<String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.SynchronizedCollection"", e);
      }
  }"
291,"    public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag) {
        return new SynchronizedSortedBag<>(bag);
    }","  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        SynchronizedSortedBag.synchronizedSortedBag((SortedBag<CollectionSortedBag<Object>>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.SynchronizedCollection"", e);
      }
  }"
292,"    protected SynchronizedSortedBag(final SortedBag<E> bag) {
        super(bag);
    }","  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SynchronizedSortedBag<String> synchronizedSortedBag0 = null;
      try {
        synchronizedSortedBag0 = new SynchronizedSortedBag<String>((Bag<String>) null, integer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.SynchronizedCollection"", e);
      }
  }"
293,"    public HashBag() {
        super(new HashMap<E, MutableInteger>());
    }","  public void test0()  throws Throwable  {
      HashBag<String> hashBag0 = new HashBag<String>();
      HashBag<String> hashBag1 = new HashBag<String>(hashBag0);
}"
294,"    public HashBag() {
        super(new HashMap<E, MutableInteger>());
    }","  public void test1()  throws Throwable  {
      HashBag<String> hashBag0 = null;
      try {
        hashBag0 = new HashBag<String>((Collection<? extends String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.bag.AbstractMapBag"", e);
      }
  }"
295,"    protected PredicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate) {
        super(bag, predicate);
    }","  public void test0()  throws Throwable  {
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      PredicatedSortedBag<UnmodifiableSortedBag<Integer>> predicatedSortedBag0 = null;
      try {
        predicatedSortedBag0 = new PredicatedSortedBag<UnmodifiableSortedBag<Integer>>((SortedBag<UnmodifiableSortedBag<Integer>>) null, predicate0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.AbstractCollectionDecorator"", e);
      }
  }"
296,"    public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag,
                                                                 final Predicate<? super E> predicate) {
        return new PredicatedSortedBag<>(bag, predicate);
    }","  public void test1()  throws Throwable  {
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        PredicatedSortedBag.predicatedSortedBag((SortedBag<Object>) null, (Predicate<? super Object>) predicate0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.AbstractCollectionDecorator"", e);
      }
  }"
297,"    public TreeBag() {
        super(new TreeMap<E, MutableInteger>());
    }","  public void test0()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<InstanceofPredicate> treeBag0 = new TreeBag<InstanceofPredicate>(comparator0);
}"
298,"    public E last() {
        return getMap().lastKey();
    }","  public void test1()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any() , any());
      TreeBag<Transformer<InstanceofPredicate, String>> treeBag0 = new TreeBag<Transformer<InstanceofPredicate, String>>(comparator0);
      treeBag0.add((Transformer<InstanceofPredicate, String>) null);
      Transformer<InstanceofPredicate, String> transformer0 = treeBag0.last();
}"
299,"    public E last() {
        return getMap().lastKey();
    }","  public void test2()  throws Throwable  {
      TreeBag<String> treeBag0 = new TreeBag<String>((Comparator<? super String>) null);
      Predicate<String> predicate0 = FalsePredicate.falsePredicate();
      PredicatedCollection<String> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<String>) treeBag0, (Predicate<? super String>) predicate0);
      treeBag0.add(""MPteF}W>"");
      TreeBag<Object> treeBag1 = new TreeBag<Object>(predicatedCollection0);
      Object object0 = treeBag1.last();
}"
300,"    protected SortedMap<E, AbstractMapBag.MutableInteger> getMap() {
        return (SortedMap<E, AbstractMapBag.MutableInteger>) super.getMap();
    }","  public void test3()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      SortedMap<Object, AbstractMapBag.MutableInteger> sortedMap0 = (SortedMap<Object, AbstractMapBag.MutableInteger>)treeBag0.getMap();
}"
301,"    protected ArrayList<V> createCollection() {
        return new ArrayList<>(initialListCapacity);
    }","  public void test0()  throws Throwable  {
      ArrayListValuedHashMap<Predicate<Object>, Predicate<Object>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Predicate<Object>, Predicate<Object>>(0, (-692));
      // Undeclared exception!
      try { 
        arrayListValuedHashMap0.createCollection();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -692
         //
         verifyException(""java.util.ArrayList"", e);
      }
  }"
302,"    public ArrayListValuedHashMap() {
        this(DEFAULT_INITIAL_MAP_CAPACITY, DEFAULT_INITIAL_LIST_CAPACITY);
    }","  public void test1()  throws Throwable  {
      ArrayListValuedHashMap<String, Integer> arrayListValuedHashMap0 = null;
      try {
        arrayListValuedHashMap0 = new ArrayListValuedHashMap<String, Integer>((MultiValuedMap<? extends String, ? extends Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.multimap.ArrayListValuedHashMap"", e);
      }
  }"
303,"    public ArrayListValuedHashMap() {
        this(DEFAULT_INITIAL_MAP_CAPACITY, DEFAULT_INITIAL_LIST_CAPACITY);
    }","  public void test2()  throws Throwable  {
      ArrayListValuedHashMap<Transformer<Object, Locale.FilteringMode>, Object> arrayListValuedHashMap0 = null;
      try {
        arrayListValuedHashMap0 = new ArrayListValuedHashMap<Transformer<Object, Locale.FilteringMode>, Object>((-1025), (-1025));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1025
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
304,"    public void trimToSize() {
        for (final Collection<V> coll : getMap().values()) {
            final ArrayList<V> list = (ArrayList<V>) coll;
            list.trimToSize();
        }
    }","  public void test3()  throws Throwable  {
      HashMap<Collection<ArrayList<Integer>>, Collection<ArrayList<Integer>>> hashMap0 = new HashMap<Collection<ArrayList<Integer>>, Collection<ArrayList<Integer>>>();
      LinkedList<ArrayList<Integer>> linkedList0 = new LinkedList<ArrayList<Integer>>();
      hashMap0.put(linkedList0, linkedList0);
      ArrayListValuedHashMap<Collection<ArrayList<Integer>>, Collection<ArrayList<Integer>>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Collection<ArrayList<Integer>>, Collection<ArrayList<Integer>>>(hashMap0);
      arrayListValuedHashMap0.trimToSize();
}"
305,"    public ArrayListValuedHashMap() {
        this(DEFAULT_INITIAL_MAP_CAPACITY, DEFAULT_INITIAL_LIST_CAPACITY);
    }","  public void test4()  throws Throwable  {
      ArrayListValuedHashMap<Integer, Transformer<Object, Locale.FilteringMode>> arrayListValuedHashMap0 = null;
      try {
        arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Transformer<Object, Locale.FilteringMode>>((Map<? extends Integer, ? extends Transformer<Object, Locale.FilteringMode>>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.multimap.ArrayListValuedHashMap"", e);
      }
  }"
306,"    public ArrayListValuedHashMap() {
        this(DEFAULT_INITIAL_MAP_CAPACITY, DEFAULT_INITIAL_LIST_CAPACITY);
    }","  public void test5()  throws Throwable  {
      ArrayListValuedHashMap<Integer, FilterInputStream> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, FilterInputStream>();
      ArrayListValuedHashMap<Integer, FilterInputStream> arrayListValuedHashMap1 = new ArrayListValuedHashMap<Integer, FilterInputStream>(arrayListValuedHashMap0);
}"
307,"    protected ArrayList<V> createCollection() {
        return new ArrayList<>(initialListCapacity);
    }","  public void test6()  throws Throwable  {
      ArrayListValuedHashMap<Collection<String>, FilterInputStream> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Collection<String>, FilterInputStream>();
      ArrayList<FilterInputStream> arrayList0 = arrayListValuedHashMap0.createCollection();
}"
308,"    public HashSetValuedHashMap() {
        this(DEFAULT_INITIAL_MAP_CAPACITY, DEFAULT_INITIAL_SET_CAPACITY);
    }","  public void test0()  throws Throwable  {
      HashSetValuedHashMap<String, Object> hashSetValuedHashMap0 = new HashSetValuedHashMap<String, Object>();
      Map<String, Collection<Object>> map0 = hashSetValuedHashMap0.asMap();
      hashSetValuedHashMap0.setMap(map0);
      HashSetValuedHashMap<String, Object> hashSetValuedHashMap1 = null;
      try {
        hashSetValuedHashMap1 = new HashSetValuedHashMap<String, Object>(hashSetValuedHashMap0);
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
309,"    protected HashSet<V> createCollection() {
        return new HashSet<>(initialSetCapacity);
    }","  public void test1()  throws Throwable  {
      HashSetValuedHashMap<Collection<Object>, Collection<Object>> hashSetValuedHashMap0 = new HashSetValuedHashMap<Collection<Object>, Collection<Object>>(0);
      HashSetValuedHashMap<String, Object> hashSetValuedHashMap1 = new HashSetValuedHashMap<String, Object>(0);
      Map<String, Collection<Object>> map0 = hashSetValuedHashMap1.asMap();
      HashSetValuedHashMap<Object, Collection<Object>> hashSetValuedHashMap2 = new HashSetValuedHashMap<Object, Collection<Object>>(map0);
      HashSet<Collection<Object>> hashSet0 = hashSetValuedHashMap2.createCollection();
}"
310,"    public HashSetValuedHashMap() {
        this(DEFAULT_INITIAL_MAP_CAPACITY, DEFAULT_INITIAL_SET_CAPACITY);
    }","  public void test2()  throws Throwable  {
      HashSetValuedHashMap<String, Object> hashSetValuedHashMap0 = null;
      try {
        hashSetValuedHashMap0 = new HashSetValuedHashMap<String, Object>((Map<? extends String, ?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.multimap.HashSetValuedHashMap"", e);
      }
  }"
311,"    protected HashSet<V> createCollection() {
        return new HashSet<>(initialSetCapacity);
    }","  public void test3()  throws Throwable  {
      HashSetValuedHashMap<Object, String> hashSetValuedHashMap0 = new HashSetValuedHashMap<Object, String>();
      hashSetValuedHashMap0.keys();
      HashSet<String> hashSet0 = hashSetValuedHashMap0.createCollection();
}"
312,"    public HashSetValuedHashMap() {
        this(DEFAULT_INITIAL_MAP_CAPACITY, DEFAULT_INITIAL_SET_CAPACITY);
    }","  public void test4()  throws Throwable  {
      HashSetValuedHashMap<Integer, Collection<Object>> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Collection<Object>>();
      HashSetValuedHashMap<Object, Collection<Object>> hashSetValuedHashMap1 = new HashSetValuedHashMap<Object, Collection<Object>>();
      hashSetValuedHashMap1.createCollection();
      HashSetValuedHashMap<Object, Object> hashSetValuedHashMap2 = new HashSetValuedHashMap<Object, Object>();
      hashSetValuedHashMap2.createCollection();
      int int0 = 1272;
      HashSetValuedHashMap<String, Integer> hashSetValuedHashMap3 = new HashSetValuedHashMap<String, Integer>(1272);
      hashSetValuedHashMap3.keys();
      HashSetValuedHashMap<Object, Integer> hashSetValuedHashMap4 = new HashSetValuedHashMap<Object, Integer>(hashSetValuedHashMap3);
      hashSetValuedHashMap4.createCollection();
      HashSetValuedHashMap<Object, String> hashSetValuedHashMap5 = new HashSetValuedHashMap<Object, String>();
      hashSetValuedHashMap5.createCollection();
      HashSetValuedHashMap<String, String> hashSetValuedHashMap6 = null;
      try {
        hashSetValuedHashMap6 = new HashSetValuedHashMap<String, String>((MultiValuedMap<? extends String, ? extends String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.multimap.HashSetValuedHashMap"", e);
      }
  }"
313,"    protected HashSet<V> createCollection() {
        return new HashSet<>(initialSetCapacity);
    }","  public void test5()  throws Throwable  {
      HashSetValuedHashMap<String, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<String, Integer>();
      hashSetValuedHashMap0.createCollection();
      hashSetValuedHashMap0.wrappedCollection((String) null);
      hashSetValuedHashMap0.keys();
      HashSetValuedHashMap<Collection<Object>, Object> hashSetValuedHashMap1 = new HashSetValuedHashMap<Collection<Object>, Object>(1784, 1784);
      hashSetValuedHashMap1.values();
      hashSetValuedHashMap1.createCollection();
      hashSetValuedHashMap0.createCollection();
      HashSetValuedHashMap<Integer, Object> hashSetValuedHashMap2 = new HashSetValuedHashMap<Integer, Object>();
      hashSetValuedHashMap2.createCollection();
      HashSetValuedHashMap<Object, Object> hashSetValuedHashMap3 = new HashSetValuedHashMap<Object, Object>((-1450));
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(objectInputStream0).readInt();
      HashSetValuedHashMap<String, String> hashSetValuedHashMap4 = new HashSetValuedHashMap<String, String>();
      HashSetValuedHashMap<String, String> hashSetValuedHashMap5 = new HashSetValuedHashMap<String, String>(hashSetValuedHashMap4);
      hashSetValuedHashMap5.keys();
      hashSetValuedHashMap3.putAll((MultiValuedMap<?, ?>) hashSetValuedHashMap5);
      HashSet<Object> hashSet0 = hashSetValuedHashMap2.createCollection();
      hashSetValuedHashMap5.removeMapping(hashSet0, """");
      hashSetValuedHashMap3.doReadObject(objectInputStream0);
      // Undeclared exception!
      try { 
        hashSetValuedHashMap3.createCollection();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1450
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
314,"    public HashSetValuedHashMap() {
        this(DEFAULT_INITIAL_MAP_CAPACITY, DEFAULT_INITIAL_SET_CAPACITY);
    }","  public void test6()  throws Throwable  {
      HashSetValuedHashMap<Object, String> hashSetValuedHashMap0 = null;
      try {
        hashSetValuedHashMap0 = new HashSetValuedHashMap<Object, String>((-1598), (-1598));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1598
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
315,"    protected HashSet<V> createCollection() {
        return new HashSet<>(initialSetCapacity);
    }","  public void test7()  throws Throwable  {
      HashSetValuedHashMap<String, String> hashSetValuedHashMap0 = new HashSetValuedHashMap<String, String>();
      HashSetValuedHashMap<Object, String> hashSetValuedHashMap1 = new HashSetValuedHashMap<Object, String>(hashSetValuedHashMap0);
      HashSet<String> hashSet0 = hashSetValuedHashMap1.createCollection();
}"
316,"    public HashSetValuedHashMap() {
        this(DEFAULT_INITIAL_MAP_CAPACITY, DEFAULT_INITIAL_SET_CAPACITY);
    }","  public void test8()  throws Throwable  {
      HashSetValuedHashMap<Object, Collection<Object>> hashSetValuedHashMap0 = new HashSetValuedHashMap<Object, Collection<Object>>((-1));
}"
317,"    public HashSetValuedHashMap() {
        this(DEFAULT_INITIAL_MAP_CAPACITY, DEFAULT_INITIAL_SET_CAPACITY);
    }","  public void test9()  throws Throwable  {
      HashSetValuedHashMap<Collection<Object>, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<Collection<Object>, Integer>();
}"
318,"    public HashSetValuedHashMap() {
        this(DEFAULT_INITIAL_MAP_CAPACITY, DEFAULT_INITIAL_SET_CAPACITY);
    }","  public void test10()  throws Throwable  {
      HashSetValuedHashMap<String, Object> hashSetValuedHashMap0 = new HashSetValuedHashMap<String, Object>();
      HashSetValuedHashMap<String, Object> hashSetValuedHashMap1 = new HashSetValuedHashMap<String, Object>(hashSetValuedHashMap0);
      HashSetValuedHashMap<Object, Object> hashSetValuedHashMap2 = new HashSetValuedHashMap<Object, Object>(0);
      hashSetValuedHashMap2.createCollection();
      Map<String, Collection<Object>> map0 = hashSetValuedHashMap0.asMap();
      HashSetValuedHashMap<String, Collection<Object>> hashSetValuedHashMap3 = new HashSetValuedHashMap<String, Collection<Object>>(map0);
}"
319,"    Set<V> wrappedCollection(final K key) {
        return new WrappedSet(key);
    }","  public void test0()  throws Throwable  {
      HashSetValuedHashMap<String, Object> hashSetValuedHashMap0 = new HashSetValuedHashMap<String, Object>(0);
      Set<Object> set0 = hashSetValuedHashMap0.wrappedCollection(""lNff"");
}"
320,"    public Set<V> remove(final Object key) {
        return SetUtils.emptyIfNull(getMap().remove(key));
    }","  public void test1()  throws Throwable  {
      HashSetValuedHashMap<Integer, Object> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Object>(726);
      Integer integer0 = new Integer(726);
      hashSetValuedHashMap0.put(integer0, integer0);
      Set<Object> set0 = hashSetValuedHashMap0.remove(integer0);
}"
321,"    protected Map<K, Set<V>> getMap() {
        return (Map<K, Set<V>>) super.getMap();
    }","  public void test2()  throws Throwable  {
      HashSetValuedHashMap<Collection<String>, Collection<String>> hashSetValuedHashMap0 = new HashSetValuedHashMap<Collection<String>, Collection<String>>();
      Map<Collection<String>, Set<Collection<String>>> map0 = hashSetValuedHashMap0.getMap();
}"
322,"    protected Map<K, Set<V>> getMap() {
        return (Map<K, Set<V>>) super.getMap();
    }","  public void test3()  throws Throwable  {
      HashSetValuedHashMap<String, Object> hashSetValuedHashMap0 = new HashSetValuedHashMap<String, Object>();
      hashSetValuedHashMap0.put((String) null, (Object) null);
      Map<String, Set<Object>> map0 = hashSetValuedHashMap0.getMap();
}"
323,"    public Set<V> remove(final Object key) {
        return SetUtils.emptyIfNull(getMap().remove(key));
    }","  public void test4()  throws Throwable  {
      HashSetValuedHashMap<Integer, Object> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Object>();
      Set<Object> set0 = hashSetValuedHashMap0.get((Integer) null);
      HashSetValuedHashMap<String, LinkedHashSet<Object>> hashSetValuedHashMap1 = new HashSetValuedHashMap<String, LinkedHashSet<Object>>();
      Set<LinkedHashSet<Object>> set1 = hashSetValuedHashMap1.remove(set0);
}"
324,"    List<V> wrappedCollection(final K key) {
        return new WrappedList(key);
    }","  public void test0()  throws Throwable  {
      ArrayListValuedHashMap<String, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<String, Integer>();
      List<Integer> list0 = arrayListValuedHashMap0.wrappedCollection("""");
}"
325,"    public List<V> remove(final Object key) {
        return ListUtils.emptyIfNull(getMap().remove(key));
    }","  public void test1()  throws Throwable  {
      ArrayListValuedHashMap<Collection<String>, String> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Collection<String>, String>(0, 0);
      ArrayList<String> arrayList0 = arrayListValuedHashMap0.createCollection();
      arrayListValuedHashMap0.put(arrayList0, ""N)"");
      List<String> list0 = arrayListValuedHashMap0.remove(arrayList0);
}"
326,"    protected Map<K, List<V>> getMap() {
        return (Map<K, List<V>>) super.getMap();
    }","  public void test2()  throws Throwable  {
      ArrayListValuedHashMap<Collection<String>, LinkedList<Object>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Collection<String>, LinkedList<Object>>(1);
      Map<Collection<String>, List<LinkedList<Object>>> map0 = arrayListValuedHashMap0.getMap();
}"
327,"    protected Map<K, List<V>> getMap() {
        return (Map<K, List<V>>) super.getMap();
    }","  public void test3()  throws Throwable  {
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Integer>(2489, 0);
      Integer integer0 = new Integer(1);
      arrayListValuedHashMap0.put(integer0, integer0);
      Map<Integer, List<Integer>> map0 = arrayListValuedHashMap0.getMap();
}"
328,"    public List<V> remove(final Object key) {
        return ListUtils.emptyIfNull(getMap().remove(key));
    }","  public void test4()  throws Throwable  {
      ArrayListValuedHashMap<Integer, String> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, String>(991);
      ArrayListValuedHashMap<Object, String> arrayListValuedHashMap1 = new ArrayListValuedHashMap<Object, String>();
      List<String> list0 = arrayListValuedHashMap1.get(arrayListValuedHashMap0);
      ArrayListValuedHashMap<String, Object> arrayListValuedHashMap2 = new ArrayListValuedHashMap<String, Object>(991);
      List<Object> list1 = arrayListValuedHashMap2.remove(list0);
}"
329,"    public static <T> Predicate<T> falsePredicate() {
        return INSTANCE;
    }","  public void test0()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
}"
330,"    public static <T> Predicate<T> exceptionPredicate() {
        return INSTANCE;
    }","  public void test0()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
}"
331,"    public Predicate<? super T>[] getPredicates() {
        return FunctorUtils.<T>copy(iPredicates);
    }","  public void test0()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      OnePredicate<String> onePredicate0 = new OnePredicate<String>(predicateArray0);
      Predicate<? super String>[] predicateArray1 = onePredicate0.getPredicates();
}"
332,"    public Predicate<? super T>[] getPredicates() {
        return FunctorUtils.<T>copy(iPredicates);
    }","  public void test1()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Predicate<Object>> onePredicate0 = new OnePredicate<Predicate<Object>>(predicateArray0);
      Predicate<? super Predicate<Object>>[] predicateArray1 = onePredicate0.getPredicates();
}"
333,"    public Predicate<? super T>[] getPredicates() {
        return FunctorUtils.<T>copy(iPredicates);
    }","  public void test2()  throws Throwable  {
      AllPredicate<String> allPredicate0 = new AllPredicate<String>((Predicate<? super String>[]) null);
      Predicate<? super String>[] predicateArray0 = allPredicate0.getPredicates();
}"
334,"    public T transform(final T input) {
        iClosure.execute(input);
        return input;
    }","  public void test0()  throws Throwable  {
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure<Object> forClosure0 = new ForClosure<Object>((-665), closure0);
      ClosureTransformer<Integer> closureTransformer0 = new ClosureTransformer<Integer>(forClosure0);
      Integer integer0 = closureTransformer0.transform((Integer) null);
}"
335,"    public Closure<? super T> getClosure() {
        return iClosure;
    }","  public void test1()  throws Throwable  {
      ClosureTransformer<Closure<Object>> closureTransformer0 = new ClosureTransformer<Closure<Object>>((Closure<? super Closure<Object>>) null);
      Closure<? super Closure<Object>> closure0 = closureTransformer0.getClosure();
}"
336,"    public T transform(final T input) {
        iClosure.execute(input);
        return input;
    }","  public void test2()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(anyPredicate0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) notPredicate0, (Closure<? super Object>) closure0, true);
      ClosureTransformer<Predicate<Object>> closureTransformer0 = new ClosureTransformer<Predicate<Object>>(closure1);
      // Undeclared exception!
      closureTransformer0.transform(notPredicate0);
  }"
337,"    public T transform(final T input) {
        iClosure.execute(input);
        return input;
    }","  public void test3()  throws Throwable  {
      ForClosure<Object> forClosure0 = new ForClosure<Object>(512, (Closure<? super Object>) null);
      ClosureTransformer<String> closureTransformer0 = new ClosureTransformer<String>(forClosure0);
      // Undeclared exception!
      try { 
        closureTransformer0.transform(""1>mqz1M5RbQ"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.functors.ForClosure"", e);
      }
  }"
338,"    public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure) {
        if (closure == null) {
            throw new NullPointerException(""Closure must not be null"");
        }
        return new ClosureTransformer<>(closure);
    }","  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClosureTransformer.closureTransformer((Closure<? super Transformer<Closure, Closure<Object>>>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException(""org.apache.commons.collections4.functors.ClosureTransformer"", e);
      }
  }"
339,"    public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure) {
        if (closure == null) {
            throw new NullPointerException(""Closure must not be null"");
        }
        return new ClosureTransformer<>(closure);
    }","  public void test5()  throws Throwable  {
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Transformer<Boolean, Boolean> transformer0 = ClosureTransformer.closureTransformer((Closure<? super Boolean>) closure0);
}"
340,"    public static <T> Predicate<T> truePredicate() {
        return INSTANCE;
    }","  public void test0()  throws Throwable  {
      Predicate<String> predicate0 = TruePredicate.truePredicate();
}"
341,"    public static <E> Closure<E> nopClosure() {
        return INSTANCE;
    }","  public void test0()  throws Throwable  {
      Closure<String> closure0 = NOPClosure.nopClosure();
}"
342,"    public Transformer<? super E, ?> getTransformer() {
        return iTransformer;
    }","  public void test0()  throws Throwable  {
      TransformerClosure<InstanceofPredicate> transformerClosure0 = new TransformerClosure<InstanceofPredicate>((Transformer<? super InstanceofPredicate, ?>) null);
      Transformer<? super InstanceofPredicate, ?> transformer0 = transformerClosure0.getTransformer();
}"
343,"    public void execute(final E input) {
        iTransformer.transform(input);
    }","  public void test1()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("">+>*0uU_T"", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      // Undeclared exception!
      try { 
        transformerClosure0.execute("">+>*0uU_T"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '>+>*0uU_T' on 'class java.lang.String' does not exist
         //
         verifyException(""org.apache.commons.collections4.functors.InvokerTransformer"", e);
      }
  }"
344,"    public void execute(final E input) {
        iTransformer.transform(input);
    }","  public void test2()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) anyPredicate0);
      predicateArray0[0] = predicate0;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(anyPredicate0, defaultEquator0);
      predicateArray0[2] = (Predicate<Object>) equalPredicate0;
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashMap0);
      Transformer<Object, Boolean> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicateArray0[0], (Transformer<? super Object, ? extends Boolean>) transformer0, (Transformer<? super Object, ? extends Boolean>) transformer0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer1);
      // Undeclared exception!
      try { 
        transformerClosure0.execute(predicateArray0[2]);
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
345,"    public void execute(final E input) {
        iTransformer.transform(input);
    }","  public void test3()  throws Throwable  {
      TransformerClosure<Boolean> transformerClosure0 = new TransformerClosure<Boolean>((Transformer<? super Boolean, ?>) null);
      // Undeclared exception!
      try { 
        transformerClosure0.execute((Boolean) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.functors.TransformerClosure"", e);
      }
  }"
346,"    public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer) {
        if (transformer == null) {
            return NOPClosure.<E>nopClosure();
        }
        return new TransformerClosure<>(transformer);
    }","  public void test4()  throws Throwable  {
      Closure<Closure<Object>> closure0 = TransformerClosure.transformerClosure((Transformer<? super Closure<Object>, ?>) null);
}"
347,"    public Boolean transform(final T input) {
        return Boolean.valueOf(iPredicate.evaluate(input));
    }","  public void test0()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      Predicate<Integer> predicate0 = ExceptionPredicate.exceptionPredicate();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(236).when(comparator0).compare(any() , any());
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) predicate0, comparator0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate1, predicateArray0[5]);
      Boolean boolean0 = Boolean.TRUE;
      PredicateTransformer<Transformer<Object, Boolean>> predicateTransformer0 = new PredicateTransformer<Transformer<Object, Boolean>>(andPredicate0);
      ConstantTransformer<Object, Boolean> constantTransformer0 = new ConstantTransformer<Object, Boolean>(boolean0);
      Boolean boolean1 = predicateTransformer0.transform(constantTransformer0);
}"
348,"    public Predicate<? super T> getPredicate() {
        return iPredicate;
    }","  public void test1()  throws Throwable  {
      PredicateTransformer<String> predicateTransformer0 = new PredicateTransformer<String>((Predicate<? super String>) null);
      Predicate<? super String> predicate0 = predicateTransformer0.getPredicate();
}"
349,"    public Boolean transform(final T input) {
        return Boolean.valueOf(iPredicate.evaluate(input));
    }","  public void test2()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      PredicateTransformer<Predicate<Object>> predicateTransformer0 = new PredicateTransformer<Predicate<Object>>(predicate0);
      // Undeclared exception!
      try { 
        predicateTransformer0.transform(predicate0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException(""org.apache.commons.collections4.functors.ExceptionTransformer"", e);
      }
  }"
350,"    public Boolean transform(final T input) {
        return Boolean.valueOf(iPredicate.evaluate(input));
    }","  public void test3()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(onePredicate0);
      predicateArray0[0] = (Predicate<Object>) nullIsTruePredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(nonePredicate0);
      // Undeclared exception!
      try { 
        predicateTransformer0.transform(""g~4\u001BSR3X;F@q"");
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
351,"    public Boolean transform(final T input) {
        return Boolean.valueOf(iPredicate.evaluate(input));
    }","  public void test4()  throws Throwable  {
      PredicateTransformer<String> predicateTransformer0 = new PredicateTransformer<String>((Predicate<? super String>) null);
      // Undeclared exception!
      try { 
        predicateTransformer0.transform(""org.apache.commons.collections4.functors.PredicateTransformer"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.functors.PredicateTransformer"", e);
      }
  }"
352,"    public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate) {
        if (predicate == null) {
            throw new IllegalArgumentException(""Predicate must not be null"");
        }
        return new PredicateTransformer<>(predicate);
    }","  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        PredicateTransformer.predicateTransformer((Predicate<? super Integer>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Predicate must not be null
         //
         verifyException(""org.apache.commons.collections4.functors.PredicateTransformer"", e);
      }
  }"
353,"    public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate) {
        if (predicate == null) {
            throw new IllegalArgumentException(""Predicate must not be null"");
        }
        return new PredicateTransformer<>(predicate);
    }","  public void test6()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Transformer<Boolean, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Boolean>) predicate0);
}"
354,"    public Boolean transform(final T input) {
        return Boolean.valueOf(iPredicate.evaluate(input));
    }","  public void test7()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform(predicate0);
}"
355,"    public Predicate<? super T> getPredicate() {
        return iPredicate;
    }","  public void test8()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      PredicateTransformer<Transformer<Object, Boolean>> predicateTransformer0 = new PredicateTransformer<Transformer<Object, Boolean>>(predicate0);
      Predicate<? super Transformer<Object, Boolean>> predicate1 = predicateTransformer0.getPredicate();
}"
356,"    public Class<?> getType() {
        return iType;
    }","  public void test0()  throws Throwable  {
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate((Class<?>) null);
      Class<?> class0 = instanceofPredicate0.getType();
}"
357,"    public boolean evaluate(final Object object) {
        return iType.isInstance(object);
    }","  public void test1()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      boolean boolean0 = instanceofPredicate0.evaluate(class0);
}"
358,"    public boolean evaluate(final T object) {
        return iSet.add(object);
    }","  public void test0()  throws Throwable  {
      UniquePredicate<String> uniquePredicate0 = new UniquePredicate<String>();
      uniquePredicate0.evaluate("""");
      boolean boolean0 = uniquePredicate0.evaluate("""");
}"
359,"    public static <T> Predicate<T> uniquePredicate() {
        return new UniquePredicate<>();
    }","  public void test1()  throws Throwable  {
      Predicate<Integer> predicate0 = UniquePredicate.uniquePredicate();
}"
360,"    public static <E> Closure<E> exceptionClosure() {
        return INSTANCE;
    }","  public void test0()  throws Throwable  {
      Closure<Integer> closure0 = ExceptionClosure.exceptionClosure();
}"
361,"    public static <T> Transformer<T, T> nopTransformer() {
        return INSTANCE;
    }","  public void test0()  throws Throwable  {
      Transformer<String, String> transformer0 = NOPTransformer.nopTransformer();
}"
362,"    public O transform(final I input) {
        return iFactory.create();
    }","  public void test0()  throws Throwable  {
      Factory<String> factory0 = ConstantFactory.constantFactory((String) null);
      FactoryTransformer<String, String> factoryTransformer0 = new FactoryTransformer<String, String>(factory0);
      String string0 = factoryTransformer0.transform(""joR&vba%jZ"");
}"
363,"    public O transform(final I input) {
        return iFactory.create();
    }","  public void test1()  throws Throwable  {
      Integer integer0 = new Integer((-2518));
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      FactoryTransformer<String, Integer> factoryTransformer0 = new FactoryTransformer<String, Integer>(constantFactory0);
      Integer integer1 = factoryTransformer0.transform((String) null);
}"
364,"    public Factory<? extends O> getFactory() {
        return iFactory;
    }","  public void test2()  throws Throwable  {
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<String, String> factoryTransformer0 = new FactoryTransformer<String, String>(factory0);
      Factory<? extends String> factory1 = factoryTransformer0.getFactory();
}"
365,"    public O transform(final I input) {
        return iFactory.create();
    }","  public void test3()  throws Throwable  {
      Factory<Object> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<String, Object> factoryTransformer0 = new FactoryTransformer<String, Object>(factory0);
      // Undeclared exception!
      try { 
        factoryTransformer0.transform(""UQ"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException(""org.apache.commons.collections4.functors.ExceptionFactory"", e);
      }
  }"
366,"    public O transform(final I input) {
        return iFactory.create();
    }","  public void test4()  throws Throwable  {
      FactoryTransformer<String, Integer> factoryTransformer0 = new FactoryTransformer<String, Integer>((Factory<? extends Integer>) null);
      // Undeclared exception!
      try { 
        factoryTransformer0.transform((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.functors.FactoryTransformer"", e);
      }
  }"
367,"    public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory) {
        if (factory == null) {
            throw new NullPointerException(""Factory must not be null"");
        }
        return new FactoryTransformer<>(factory);
    }","  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        FactoryTransformer.factoryTransformer((Factory<? extends Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Factory must not be null
         //
         verifyException(""org.apache.commons.collections4.functors.FactoryTransformer"", e);
      }
  }"
368,"    public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory) {
        if (factory == null) {
            throw new NullPointerException(""Factory must not be null"");
        }
        return new FactoryTransformer<>(factory);
    }","  public void test6()  throws Throwable  {
      Factory<String> factory0 = ConstantFactory.constantFactory("""");
      Transformer<String, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
}"
369,"    public Factory<? extends O> getFactory() {
        return iFactory;
    }","  public void test7()  throws Throwable  {
      FactoryTransformer<String, Integer> factoryTransformer0 = new FactoryTransformer<String, Integer>((Factory<? extends Integer>) null);
      Factory<? extends Integer> factory0 = factoryTransformer0.getFactory();
}"
370,"    protected AbstractSortedMapDecorator() {
        super();
    }","  public void test0()  throws Throwable  {
      TreeMap<Object, String> treeMap0 = new TreeMap<Object, String>();
      FixedSizeSortedMap<Object, String> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<Object, String>) treeMap0);
      Set<Map.Entry<Object, String>> set0 = (Set<Map.Entry<Object, String>>)fixedSizeSortedMap0.entrySet();
      AbstractSortedMapDecorator.SortedMapIterator<Object, String> abstractSortedMapDecorator_SortedMapIterator0 = new AbstractSortedMapDecorator.SortedMapIterator<Object, String>(set0);
      abstractSortedMapDecorator_SortedMapIterator0.reset();
}"
371,"    public SortedMap<K, V> tailMap(final K fromKey) {
        return decorated().tailMap(fromKey);
    }","  public void test1()  throws Throwable  {
      TreeMap<Object, String> treeMap0 = new TreeMap<Object, String>();
      FixedSizeSortedMap<Object, String> fixedSizeSortedMap0 = new FixedSizeSortedMap<Object, String>(treeMap0);
      Integer integer0 = new Integer(1);
      SortedMap<Object, String> sortedMap0 = fixedSizeSortedMap0.tailMap(integer0);
}"
372,"    public SortedMap<K, V> subMap(final K fromKey, final K toKey) {
        return decorated().subMap(fromKey, toKey);
    }","  public void test2()  throws Throwable  {
      TreeMap<String, Integer> treeMap0 = new TreeMap<String, Integer>();
      FixedSizeSortedMap<String, Integer> fixedSizeSortedMap0 = new FixedSizeSortedMap<String, Integer>(treeMap0);
      SortedMap<String, Integer> sortedMap0 = fixedSizeSortedMap0.subMap(""org.apache.commons.collections4.map.AbstractSortedMapDecorator"", ""org.apache.commons.collections4.map.AbstractSortedMapDecorator"");
}"
373,"    public K lastKey() {
        return decorated().lastKey();
    }","  public void test3()  throws Throwable  {
      TreeMap<Object, String> treeMap0 = new TreeMap<Object, String>();
      treeMap0.put(""kJ"", ""kJ"");
      FixedSizeSortedMap<Object, String> fixedSizeSortedMap0 = new FixedSizeSortedMap<Object, String>(treeMap0);
      Object object0 = fixedSizeSortedMap0.lastKey();
}"
374,"    public SortedMap<K, V> headMap(final K toKey) {
        return decorated().headMap(toKey);
    }","  public void test4()  throws Throwable  {
      TreeMap<String, TreeMap<Object, String>> treeMap0 = new TreeMap<String, TreeMap<Object, String>>();
      FixedSizeSortedMap<String, TreeMap<Object, String>> fixedSizeSortedMap0 = new FixedSizeSortedMap<String, TreeMap<Object, String>>(treeMap0);
      SortedMap<String, TreeMap<Object, String>> sortedMap0 = fixedSizeSortedMap0.headMap(""org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator"");
}"
375,"    public SortedMap<K, V> headMap(final K toKey) {
        return decorated().headMap(toKey);
    }","  public void test5()  throws Throwable  {
      TreeMap<String, Integer> treeMap0 = new TreeMap<String, Integer>();
      FixedSizeSortedMap<String, Integer> fixedSizeSortedMap0 = new FixedSizeSortedMap<String, Integer>(treeMap0);
      Integer integer0 = new Integer(0);
      treeMap0.put(""\""p,i-j90dQ"", integer0);
      SortedMap<String, Integer> sortedMap0 = fixedSizeSortedMap0.headMap(""SdOLN;,C{?X9LD4n"");
}"
376,"    public K firstKey() {
        return decorated().firstKey();
    }","  public void test6()  throws Throwable  {
      TreeMap<Integer, TreeMap<String, String>> treeMap0 = new TreeMap<Integer, TreeMap<String, String>>();
      FixedSizeSortedMap<Integer, TreeMap<String, String>> fixedSizeSortedMap0 = new FixedSizeSortedMap<Integer, TreeMap<String, String>>(treeMap0);
      Integer integer0 = new Integer((-1));
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      treeMap0.put(integer0, treeMap1);
      Integer integer1 = fixedSizeSortedMap0.firstKey();
}"
377,"    protected SortedMap<K, V> decorated() {
        return (SortedMap<K, V>) super.decorated();
    }","  public void test7()  throws Throwable  {
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      treeMap0.put(integer0, integer0);
      FixedSizeSortedMap<Integer, Object> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<Integer, Object>) treeMap0);
      SortedMap<Integer, Object> sortedMap0 = fixedSizeSortedMap0.decorated();
}"
378,"    protected SortedMap<K, V> decorated() {
        return (SortedMap<K, V>) super.decorated();
    }","  public void test8()  throws Throwable  {
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      FixedSizeSortedMap<Integer, Object> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<Integer, Object>) treeMap0);
      FixedSizeSortedMap<Integer, Object> fixedSizeSortedMap1 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<Integer, Object>) fixedSizeSortedMap0);
      SortedMap<Integer, Object> sortedMap0 = fixedSizeSortedMap1.decorated();
}"
379,"    public SortedMap<K, V> tailMap(final K fromKey) {
        return decorated().tailMap(fromKey);
    }","  public void test9()  throws Throwable  {
      TreeMap<Object, Integer> treeMap0 = new TreeMap<Object, Integer>();
      FixedSizeSortedMap<Object, Integer> fixedSizeSortedMap0 = new FixedSizeSortedMap<Object, Integer>(treeMap0);
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.tailMap((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
380,"    public SortedMap<K, V> tailMap(final K fromKey) {
        return decorated().tailMap(fromKey);
    }","  public void test10()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      FixedSizeSortedMap<String, String> fixedSizeSortedMap0 = new FixedSizeSortedMap<String, String>(treeMap0);
      SortedMap<String, String> sortedMap0 = fixedSizeSortedMap0.subMap("""", ""org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator"");
      FixedSizeSortedMap<String, String> fixedSizeSortedMap1 = FixedSizeSortedMap.fixedSizeSortedMap(sortedMap0);
      // Undeclared exception!
      try { 
        fixedSizeSortedMap1.tailMap(""w'qv$C<c8sM:}[F57"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // fromKey out of range
         //
         verifyException(""java.util.TreeMap$AscendingSubMap"", e);
      }
  }"
381,"    public SortedMap<K, V> tailMap(final K fromKey) {
        return decorated().tailMap(fromKey);
    }","  public void test11()  throws Throwable  {
      TreeMap<TreeMap<String, Integer>, Integer> treeMap0 = new TreeMap<TreeMap<String, Integer>, Integer>();
      FixedSizeSortedMap<TreeMap<String, Integer>, Integer> fixedSizeSortedMap0 = new FixedSizeSortedMap<TreeMap<String, Integer>, Integer>(treeMap0);
      TreeMap<String, Integer> treeMap1 = new TreeMap<String, Integer>();
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.tailMap(treeMap1);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.util.TreeMap cannot be cast to java.lang.Comparable
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
382,"    public SortedMap<K, V> subMap(final K fromKey, final K toKey) {
        return decorated().subMap(fromKey, toKey);
    }","  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(2904);
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      FixedSizeSortedMap<Object, Object> fixedSizeSortedMap0 = new FixedSizeSortedMap<Object, Object>(treeMap0);
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.subMap((Object) null, integer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
383,"    public SortedMap<K, V> subMap(final K fromKey, final K toKey) {
        return decorated().subMap(fromKey, toKey);
    }","  public void test13()  throws Throwable  {
      TreeMap<String, TreeMap<Object, Object>> treeMap0 = new TreeMap<String, TreeMap<Object, Object>>();
      FixedSizeSortedMap<String, TreeMap<Object, Object>> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<String, TreeMap<Object, Object>>) treeMap0);
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.subMap(""s=~J^)z5#6Pu#"", ""&)`8ThF.BL4W9A"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException(""java.util.TreeMap$NavigableSubMap"", e);
      }
  }"
384,"    public SortedMap<K, V> subMap(final K fromKey, final K toKey) {
        return decorated().subMap(fromKey, toKey);
    }","  public void test14()  throws Throwable  {
      TreeMap<TreeMap<Object, String>, String> treeMap0 = new TreeMap<TreeMap<Object, String>, String>();
      FixedSizeSortedMap<TreeMap<Object, String>, String> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<TreeMap<Object, String>, String>) treeMap0);
      TreeMap<Object, String> treeMap1 = new TreeMap<Object, String>();
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.subMap(treeMap1, treeMap1);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.util.TreeMap cannot be cast to java.lang.Comparable
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
385,"    public K previousKey(final K key) {
        final SortedMap<K, V> headMap = headMap(key);
        return headMap.isEmpty() ? null : headMap.lastKey();
    }","  public void test15()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      FixedSizeSortedMap<Object, Object> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<Object, Object>) treeMap0);
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.previousKey((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
386,"    public K previousKey(final K key) {
        final SortedMap<K, V> headMap = headMap(key);
        return headMap.isEmpty() ? null : headMap.lastKey();
    }","  public void test16()  throws Throwable  {
      TreeMap<Object, TreeMap<Object, String>> treeMap0 = new TreeMap<Object, TreeMap<Object, String>>();
      FixedSizeSortedMap<Object, TreeMap<Object, String>> fixedSizeSortedMap0 = new FixedSizeSortedMap<Object, TreeMap<Object, String>>(treeMap0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.previousKey(object0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
387,"    public K nextKey(final K key) {
        final Iterator<K> it = tailMap(key).keySet().iterator();
        it.next();
        return it.hasNext() ? it.next() : null;
    }","  public void test17()  throws Throwable  {
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      FixedSizeSortedMap<Integer, Object> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<Integer, Object>) treeMap0);
      Integer integer0 = new Integer((-1515));
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.nextKey(integer0);
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.TreeMap$NavigableSubMap$SubMapIterator"", e);
      }
  }"
388,"    public K nextKey(final K key) {
        final Iterator<K> it = tailMap(key).keySet().iterator();
        it.next();
        return it.hasNext() ? it.next() : null;
    }","  public void test18()  throws Throwable  {
      TreeMap<Integer, String> treeMap0 = new TreeMap<Integer, String>();
      SortedMap<Integer, Object> sortedMap0 = UnmodifiableSortedMap.unmodifiableSortedMap((SortedMap<Integer, ?>) treeMap0);
      FixedSizeSortedMap<Integer, Object> fixedSizeSortedMap0 = new FixedSizeSortedMap<Integer, Object>(sortedMap0);
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.nextKey((Integer) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
389,"    public K nextKey(final K key) {
        final Iterator<K> it = tailMap(key).keySet().iterator();
        it.next();
        return it.hasNext() ? it.next() : null;
    }","  public void test19()  throws Throwable  {
      TreeMap<TreeMap<String, String>, String> treeMap0 = new TreeMap<TreeMap<String, String>, String>();
      FixedSizeSortedMap<TreeMap<String, String>, String> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<TreeMap<String, String>, String>) treeMap0);
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.nextKey(treeMap1);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.util.TreeMap cannot be cast to java.lang.Comparable
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
390,"    public SortedMap<K, V> headMap(final K toKey) {
        return decorated().headMap(toKey);
    }","  public void test20()  throws Throwable  {
      TreeMap<Object, String> treeMap0 = new TreeMap<Object, String>();
      FixedSizeSortedMap<Object, String> fixedSizeSortedMap0 = new FixedSizeSortedMap<Object, String>(treeMap0);
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.headMap((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
391,"    public SortedMap<K, V> headMap(final K toKey) {
        return decorated().headMap(toKey);
    }","  public void test21()  throws Throwable  {
      TreeMap<TreeMap<Object, String>, String> treeMap0 = new TreeMap<TreeMap<Object, String>, String>();
      FixedSizeSortedMap<TreeMap<Object, String>, String> fixedSizeSortedMap0 = new FixedSizeSortedMap<TreeMap<Object, String>, String>(treeMap0);
      TreeMap<Object, String> treeMap1 = new TreeMap<Object, String>();
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.headMap(treeMap1);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.util.TreeMap cannot be cast to java.lang.Comparable
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
392,"    public K lastKey() {
        return decorated().lastKey();
    }","  public void test22()  throws Throwable  {
      TreeMap<Object, String> treeMap0 = new TreeMap<Object, String>();
      FixedSizeSortedMap<Object, String> fixedSizeSortedMap0 = new FixedSizeSortedMap<Object, String>(treeMap0);
      // Undeclared exception!
      try { 
        fixedSizeSortedMap0.lastKey();
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
393,"    public K nextKey(final K key) {
        final Iterator<K> it = tailMap(key).keySet().iterator();
        it.next();
        return it.hasNext() ? it.next() : null;
    }","  public void test23()  throws Throwable  {
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      treeMap0.put(integer0, integer0);
      Integer integer1 = new Integer(572);
      treeMap0.put(integer1, ""s"");
      FixedSizeSortedMap<Integer, Object> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<Integer, Object>) treeMap0);
      Integer integer2 = fixedSizeSortedMap0.nextKey(integer0);
}"
394,"    public K nextKey(final K key) {
        final Iterator<K> it = tailMap(key).keySet().iterator();
        it.next();
        return it.hasNext() ? it.next() : null;
    }","  public void test24()  throws Throwable  {
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      treeMap0.put(integer0, integer0);
      FixedSizeSortedMap<Integer, Object> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<Integer, Object>) treeMap0);
      Integer integer1 = fixedSizeSortedMap0.nextKey(integer0);
}"
395,"    public K previousKey(final K key) {
        final SortedMap<K, V> headMap = headMap(key);
        return headMap.isEmpty() ? null : headMap.lastKey();
    }","  public void test25()  throws Throwable  {
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      FixedSizeSortedMap<Integer, Object> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<Integer, Object>) treeMap0);
      Integer integer1 = fixedSizeSortedMap0.previousKey(integer0);
}"
396,"    protected AbstractSortedMapDecorator() {
        super();
    }","  public void test26()  throws Throwable  {
      TreeMap<Object, String> treeMap0 = new TreeMap<Object, String>();
      FixedSizeSortedMap<Object, String> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<Object, String>) treeMap0);
      Set<Map.Entry<Object, String>> set0 = (Set<Map.Entry<Object, String>>)fixedSizeSortedMap0.entrySet();
      AbstractSortedMapDecorator.SortedMapIterator<Object, String> abstractSortedMapDecorator_SortedMapIterator0 = new AbstractSortedMapDecorator.SortedMapIterator<Object, String>(set0);
      // Undeclared exception!
      try { 
        abstractSortedMapDecorator_SortedMapIterator0.previous();
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.iterators.ListIteratorWrapper"", e);
      }
  }"
397,"    protected AbstractSortedMapDecorator() {
        super();
    }","  public void test27()  throws Throwable  {
      TreeMap<Object, String> treeMap0 = new TreeMap<Object, String>();
      FixedSizeSortedMap<Object, String> fixedSizeSortedMap0 = new FixedSizeSortedMap<Object, String>(treeMap0);
      Set<Map.Entry<Object, String>> set0 = (Set<Map.Entry<Object, String>>)fixedSizeSortedMap0.entrySet();
      AbstractSortedMapDecorator.SortedMapIterator<Object, String> abstractSortedMapDecorator_SortedMapIterator0 = new AbstractSortedMapDecorator.SortedMapIterator<Object, String>(set0);
      boolean boolean0 = abstractSortedMapDecorator_SortedMapIterator0.hasPrevious();
}"
398,"    public OrderedMapIterator<K, V> mapIterator() {
        return new SortedMapIterator<>(entrySet());
    }","  public void test28()  throws Throwable  {
      TreeMap<String, Integer> treeMap0 = new TreeMap<String, Integer>();
      FixedSizeSortedMap<String, Integer> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<String, Integer>) treeMap0);
      OrderedMapIterator<String, Integer> orderedMapIterator0 = fixedSizeSortedMap0.mapIterator();
}"
399,"    public Comparator<? super K> comparator() {
        return decorated().comparator();
    }","  public void test29()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      FixedSizeSortedMap<Object, Object> fixedSizeSortedMap0 = new FixedSizeSortedMap<Object, Object>(treeMap0);
      Comparator<? super Object> comparator0 = fixedSizeSortedMap0.comparator();
}"
400,"    protected LazySortedMap(final SortedMap<K,V> map, final Factory<? extends V> factory) {
        super(map, factory);
    }","  public void test0()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      LazySortedMap<String, String> lazySortedMap0 = new LazySortedMap<String, String>(treeMap0, instantiateFactory0);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(instantiateFactory0);
      LazySortedMap<String, String> lazySortedMap1 = new LazySortedMap<String, String>(lazySortedMap0, factoryTransformer0);
}"
401,"    public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map,
                                                           final Factory<? extends V> factory) {
        return new LazySortedMap<>(map, factory);
    }","  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Factory<Integer> factory0 = ConstantFactory.constantFactory(integer0);
      // Undeclared exception!
      try { 
        LazySortedMap.lazySortedMap((SortedMap<Object, Integer>) null, (Factory<? extends Integer>) factory0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException(""org.apache.commons.collections4.map.AbstractMapDecorator"", e);
      }
  }"
402,"    protected LazySortedMap(final SortedMap<K,V> map, final Factory<? extends V> factory) {
        super(map, factory);
    }","  public void test2()  throws Throwable  {
      LazySortedMap<Integer, String> lazySortedMap0 = null;
      try {
        lazySortedMap0 = new LazySortedMap<Integer, String>((SortedMap<Integer, String>) null, (Transformer<? super Integer, ? extends String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException(""org.apache.commons.collections4.map.AbstractMapDecorator"", e);
      }
  }"
403,"    protected LazySortedMap(final SortedMap<K,V> map, final Factory<? extends V> factory) {
        super(map, factory);
    }","  public void test3()  throws Throwable  {
      Factory<Object> factory0 = ConstantFactory.constantFactory((Object) null);
      LazySortedMap<Object, Object> lazySortedMap0 = null;
      try {
        lazySortedMap0 = new LazySortedMap<Object, Object>((SortedMap<Object, Object>) null, factory0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException(""org.apache.commons.collections4.map.AbstractMapDecorator"", e);
      }
  }"
404,"    public K firstKey() {
        return getSortedMap().firstKey();
    }","  public void test4()  throws Throwable  {
      TreeMap<Integer, String> treeMap0 = new TreeMap<Integer, String>();
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      LazySortedMap<Integer, String> lazySortedMap0 = new LazySortedMap<Integer, String>(treeMap0, instantiateFactory0);
      // Undeclared exception!
      try { 
        lazySortedMap0.firstKey();
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
405,"    public SortedMap<K,V> headMap(final K toKey) {
        final SortedMap<K,V> map = getSortedMap().headMap(toKey);
        return new LazySortedMap<>(map, factory);
    }","  public void test5()  throws Throwable  {
      TreeMap<String, Integer> treeMap0 = new TreeMap<String, Integer>();
      Integer integer0 = new Integer((-1));
      Factory<Integer> factory0 = ConstantFactory.constantFactory(integer0);
      LazySortedMap<String, Integer> lazySortedMap0 = LazySortedMap.lazySortedMap((SortedMap<String, Integer>) treeMap0, (Factory<? extends Integer>) factory0);
      SortedMap<String, Integer> sortedMap0 = lazySortedMap0.headMap(""C:.qSDX5bNQUaoJSX3"");
}"
406,"    public CaseInsensitiveMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test0()  throws Throwable  {
      CaseInsensitiveMap<Object, CaseInsensitiveMap<Object, InputStream>> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, CaseInsensitiveMap<Object, InputStream>>(1073741824);
  }"
407,"    public CaseInsensitiveMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1()  throws Throwable  {
      int int0 = 1073741824;
      CaseInsensitiveMap<Object, String> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, String>(1073741824, 1073741824);
  }"
408,"    public Set<Map.Entry<K, V>> entrySet() {
        return UnmodifiableSet.unmodifiableSet(map.entrySet());
    }","  public void test0()  throws Throwable  {
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      FixedSizeSortedMap<Integer, Object> fixedSizeSortedMap0 = FixedSizeSortedMap.fixedSizeSortedMap((SortedMap<Integer, Object>) treeMap0);
      Set<Map.Entry<Integer, Object>> set0 = (Set<Map.Entry<Integer, Object>>)fixedSizeSortedMap0.entrySet();
}"
409,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test0()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
}"
410,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
}"
411,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test2()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
}"
412,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test3()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
}"
413,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test4()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
}"
414,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test5()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
}"
415,"    public K get(final int index) {
        return getEntry(index).getKey();
    }","  public void test6()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
}"
416,"    public K get(final int index) {
        return getEntry(index).getKey();
    }","  public void test7()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
}"
417,"    public K get(final int index) {
        return getEntry(index).getKey();
    }","  public void test8()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
}"
418,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test9()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
}"
419,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test10()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
}"
420,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test11()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
}"
421,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test12()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
}"
422,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test13()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
}"
423,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test14()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
}"
424,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test15()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
}"
425,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test16()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
}"
426,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test17()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
}"
427,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test18()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
}"
428,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test19()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
}"
429,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test20()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      LinkedMap<String, String> linkedMap3 = new LinkedMap<String, String>(linkedMap2);
}"
430,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test21()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      LinkedMap<String, String> linkedMap3 = new LinkedMap<String, String>(linkedMap2);
}"
431,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test22()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      LinkedMap<String, String> linkedMap3 = new LinkedMap<String, String>(linkedMap2);
}"
432,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test23()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      LinkedMap<String, String> linkedMap3 = new LinkedMap<String, String>(linkedMap2);
}"
433,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test24()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      LinkedMap<String, String> linkedMap3 = new LinkedMap<String, String>(linkedMap2);
}"
434,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test25()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      LinkedMap<String, String> linkedMap3 = new LinkedMap<String, String>(linkedMap2);
}"
435,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test26()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      LinkedMap<String, String> linkedMap3 = new LinkedMap<String, String>(linkedMap2);
}"
436,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test27()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      LinkedMap<String, String> linkedMap3 = new LinkedMap<String, String>(linkedMap2);
}"
437,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test28()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      LinkedMap<String, String> linkedMap3 = new LinkedMap<String, String>(linkedMap2);
}"
438,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test29()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      LinkedMap<String, String> linkedMap3 = new LinkedMap<String, String>(linkedMap2);
}"
439,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test30()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(12, 12);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedMap0.size = 159;
      Integer integer0 = linkedMap0.get(12);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      LinkedMap<String, String> linkedMap3 = new LinkedMap<String, String>(linkedMap2);
}"
440,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test31()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
}"
441,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test32()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
}"
442,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test33()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
}"
443,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test34()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
444,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test35()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
445,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test36()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
446,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test37()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
447,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test38()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
448,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test39()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
}"
449,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test40()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
}"
450,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test41()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
}"
451,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test42()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
}"
452,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test43()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
}"
453,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test44()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
}"
454,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test45()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
}"
455,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test46()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
}"
456,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test47()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
}"
457,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test48()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
}"
458,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test49()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
}"
459,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test50()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
}"
460,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test51()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
}"
461,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test52()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
}"
462,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test53()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
}"
463,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test54()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
}"
464,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test55()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
}"
465,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test56()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
}"
466,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test57()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
}"
467,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test58()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
}"
468,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test59()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
}"
469,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test60()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
}"
470,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test61()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
}"
471,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test62()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
}"
472,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test63()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
}"
473,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test64()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
}"
474,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test65()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
}"
475,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test66()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
}"
476,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test67()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
}"
477,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test68()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
}"
478,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test69()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
}"
479,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test70()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
}"
480,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test71()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
481,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test72()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
482,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test73()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
483,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test74()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
484,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test75()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
485,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test76()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
486,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test77()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
487,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test78()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
488,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test79()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
489,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test80()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
}"
490,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test81()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
}"
491,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test82()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
}"
492,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test83()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
}"
493,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test84()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
}"
494,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test85()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
}"
495,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test86()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
}"
496,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test87()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
}"
497,"    public V getValue(final int index) {
        return getEntry(index).getValue();
    }","  public void test88()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
      LinkedMap linkedMap5 = (LinkedMap)linkedMap1.getValue(0);
}"
498,"    public V getValue(final int index) {
        return getEntry(index).getValue();
    }","  public void test89()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
      LinkedMap linkedMap5 = (LinkedMap)linkedMap1.getValue(0);
}"
499,"    public V getValue(final int index) {
        return getEntry(index).getValue();
    }","  public void test90()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
      LinkedMap linkedMap5 = (LinkedMap)linkedMap1.getValue(0);
}"
500,"    public V getValue(final int index) {
        return getEntry(index).getValue();
    }","  public void test91()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
      LinkedMap linkedMap5 = (LinkedMap)linkedMap1.getValue(0);
}"
501,"    public V getValue(final int index) {
        return getEntry(index).getValue();
    }","  public void test92()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
      LinkedMap linkedMap5 = (LinkedMap)linkedMap1.getValue(0);
}"
502,"    public V getValue(final int index) {
        return getEntry(index).getValue();
    }","  public void test93()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
      LinkedMap linkedMap5 = (LinkedMap)linkedMap1.getValue(0);
}"
503,"    public V getValue(final int index) {
        return getEntry(index).getValue();
    }","  public void test94()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
      LinkedMap linkedMap5 = (LinkedMap)linkedMap1.getValue(0);
}"
504,"    public V getValue(final int index) {
        return getEntry(index).getValue();
    }","  public void test95()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
      LinkedMap linkedMap5 = (LinkedMap)linkedMap1.getValue(0);
}"
505,"    public V getValue(final int index) {
        return getEntry(index).getValue();
    }","  public void test96()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(linkedMap1);
      LinkedMap linkedMap3 = (LinkedMap)linkedMap1.getOrDefault(objectArray0[2], linkedMap2);
      String string0 = (String)linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap<String, String> linkedMap4 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap4);
      LinkedMap linkedMap5 = (LinkedMap)linkedMap1.getValue(0);
}"
506,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test97()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
}"
507,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test98()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
}"
508,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test99()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
}"
509,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test100()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      linkedMap0.size = 1;
}"
510,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test101()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      linkedMap0.size = 1;
}"
511,"    public List<K> asList() {
        return new LinkedMapList<>(this);
    }","  public void test102()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      linkedMap0.size = 1;
      List<Object> list0 = linkedMap0.asList();
}"
512,"    public List<K> asList() {
        return new LinkedMapList<>(this);
    }","  public void test103()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      linkedMap0.size = 1;
      List<Object> list0 = linkedMap0.asList();
}"
513,"    public List<K> asList() {
        return new LinkedMapList<>(this);
    }","  public void test104()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      linkedMap0.size = 1;
      List<Object> list0 = linkedMap0.asList();
}"
514,"    public List<K> asList() {
        return new LinkedMapList<>(this);
    }","  public void test105()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      linkedMap0.size = 1;
      List<Object> list0 = linkedMap0.asList();
}"
515,"    public List<K> asList() {
        return new LinkedMapList<>(this);
    }","  public void test106()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      linkedMap0.size = 1;
      List<Object> list0 = linkedMap0.asList();
}"
516,"    public List<K> asList() {
        return new LinkedMapList<>(this);
    }","  public void test107()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      linkedMap0.size = 1;
      List<Object> list0 = linkedMap0.asList();
}"
517,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test108()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
}"
518,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test109()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
}"
519,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test110()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
}"
520,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test111()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
}"
521,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test112()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
}"
522,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test113()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
}"
523,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test114()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
}"
524,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test115()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
}"
525,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test116()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
}"
526,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test117()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
}"
527,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test118()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
}"
528,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test119()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
}"
529,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test120()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
}"
530,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test121()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
}"
531,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test122()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
}"
532,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test123()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
}"
533,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test124()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
}"
534,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test125()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
}"
535,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test126()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
}"
536,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test127()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
}"
537,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test128()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
}"
538,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test129()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
}"
539,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test130()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
}"
540,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test131()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
}"
541,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test132()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
}"
542,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test133()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
}"
543,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test134()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
}"
544,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test135()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
}"
545,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test136()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
}"
546,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test137()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
}"
547,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test138()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
}"
548,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test139()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
}"
549,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test140()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
}"
550,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test141()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
}"
551,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test142()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
}"
552,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test143()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
}"
553,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test144()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
}"
554,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test145()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
}"
555,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test146()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
}"
556,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test147()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
}"
557,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test148()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
}"
558,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test149()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
}"
559,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test150()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
}"
560,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test151()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
}"
561,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test152()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
}"
562,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test153()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
}"
563,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test154()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
}"
564,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test155()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
}"
565,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test156()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
}"
566,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test157()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
}"
567,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test158()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
}"
568,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test159()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
}"
569,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test160()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
}"
570,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test161()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
}"
571,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test162()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
}"
572,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test163()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
}"
573,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test164()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
}"
574,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test165()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
}"
575,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test166()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
}"
576,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test167()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
}"
577,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test168()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
}"
578,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test169()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
}"
579,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test170()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
}"
580,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test171()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
}"
581,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test172()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
}"
582,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test173()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
}"
583,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test174()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
}"
584,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test175()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
}"
585,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test176()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
}"
586,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test177()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
}"
587,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test178()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
}"
588,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test179()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
}"
589,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test180()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
}"
590,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test181()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
}"
591,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test182()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
}"
592,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test183()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
}"
593,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test184()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
}"
594,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test185()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
}"
595,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test186()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
}"
596,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test187()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>((LinkedMap<Object, ?>) null);
}"
597,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test188()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(14);
      Object object0 = linkedMap1.put(""(<)!6)=^"", linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<Object, Integer> linkedMap2 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      int int0 = linkedMap2.indexOf(linkedMap0);
      LinkedMap<String, Object> linkedMap3 = linkedMap1.clone();
      Iterator<String> iterator0 = linkedMap3.createKeySetIterator();
      int int1 = linkedMap3.indexOf(linkedMap1);
      LinkedMap<Object, String> linkedMap4 = new LinkedMap<Object, String>(14, 14);
      LinkedMap<Object, String> linkedMap5 = linkedMap4.clone();
      int int2 = linkedMap5.indexOf(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>((LinkedMap<Object, ?>) null);
      AbstractHashedMap.KeySet<Object> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Object>((AbstractHashedMap<Object, ?>) null);
}"
598,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test189()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
}"
599,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test190()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
}"
600,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test191()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
}"
601,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test192()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
602,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test193()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
603,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test194()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
604,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test195()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
605,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test196()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ListIterator<Integer> listIterator0 = linkedMap_LinkedMapList0.listIterator(0);
}"
606,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test197()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ListIterator<Integer> listIterator0 = linkedMap_LinkedMapList0.listIterator(0);
}"
607,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test198()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ListIterator<Integer> listIterator0 = linkedMap_LinkedMapList0.listIterator(0);
}"
608,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test199()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ListIterator<Integer> listIterator0 = linkedMap_LinkedMapList0.listIterator(0);
}"
609,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test200()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ListIterator<Integer> listIterator0 = linkedMap_LinkedMapList0.listIterator(0);
}"
610,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test201()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ListIterator<Integer> listIterator0 = linkedMap_LinkedMapList0.listIterator(0);
}"
611,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test202()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      ListIterator<Integer> listIterator0 = linkedMap_LinkedMapList0.listIterator(0);
}"
612,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test203()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
}"
613,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test204()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
}"
614,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test205()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
}"
615,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test206()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
616,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test207()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
617,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test208()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
618,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test209()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
619,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test210()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
620,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test211()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
}"
621,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test212()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
}"
622,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test213()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
}"
623,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test214()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
}"
624,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test215()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
}"
625,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test216()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
}"
626,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test217()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
}"
627,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test218()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
}"
628,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test219()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
}"
629,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test220()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
}"
630,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test221()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
}"
631,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test222()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
632,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test223()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
633,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test224()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
634,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test225()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
635,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test226()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
636,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test227()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
637,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test228()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
638,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test229()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
639,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test230()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
640,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test231()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
}"
641,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test232()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
}"
642,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test233()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
}"
643,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test234()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
}"
644,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test235()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
}"
645,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test236()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
}"
646,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test237()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
}"
647,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test238()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
}"
648,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test239()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
}"
649,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test240()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
}"
650,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test241()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
}"
651,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test242()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
}"
652,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test243()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
}"
653,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test244()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
}"
654,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test245()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
}"
655,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test246()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
656,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test247()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
657,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test248()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
658,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test249()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
659,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test250()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
660,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test251()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList2.containsAll(linkedMap_LinkedMapList1);
}"
661,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test252()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList2.containsAll(linkedMap_LinkedMapList1);
}"
662,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test253()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList2.containsAll(linkedMap_LinkedMapList1);
}"
663,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test254()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList2.containsAll(linkedMap_LinkedMapList1);
}"
664,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test255()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList2.containsAll(linkedMap_LinkedMapList1);
}"
665,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test256()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList2.containsAll(linkedMap_LinkedMapList1);
}"
666,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test257()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList2.containsAll(linkedMap_LinkedMapList1);
}"
667,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test258()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList2.containsAll(linkedMap_LinkedMapList1);
}"
668,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test259()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList2.containsAll(linkedMap_LinkedMapList1);
}"
669,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test260()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      Object object0 = linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object1 = linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      int int0 = linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList2.containsAll(linkedMap_LinkedMapList1);
}"
670,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test261()  throws Throwable  {
      int int0 = 1073741824;
      LinkedMap<LinkedMap<String, Object>, String> linkedMap0 = new LinkedMap<LinkedMap<String, Object>, String>(1073741824);
  }"
671,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test262()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
}"
672,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test263()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
}"
673,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test264()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
}"
674,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test265()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
}"
675,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test266()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
}"
676,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test267()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
}"
677,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test268()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
}"
678,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test269()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
}"
679,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test270()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
}"
680,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test271()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
}"
681,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test272()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      Integer integer1 = linkedMap0.putIfAbsent(linkedMap_LinkedMapList0, integer0);
}"
682,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test273()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      Integer integer1 = linkedMap0.putIfAbsent(linkedMap_LinkedMapList0, integer0);
}"
683,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test274()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      Integer integer1 = linkedMap0.putIfAbsent(linkedMap_LinkedMapList0, integer0);
}"
684,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test275()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      Integer integer1 = linkedMap0.putIfAbsent(linkedMap_LinkedMapList0, integer0);
}"
685,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test276()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1.0F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      Integer integer1 = linkedMap0.putIfAbsent(linkedMap_LinkedMapList0, integer0);
}"
686,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test277()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
}"
687,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test278()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
}"
688,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test279()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
}"
689,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test280()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
}"
690,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test281()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
}"
691,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test282()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
}"
692,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test283()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
}"
693,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test284()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
}"
694,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test285()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
}"
695,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test286()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
}"
696,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test287()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
}"
697,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test288()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
}"
698,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test289()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
}"
699,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test290()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
}"
700,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test291()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
}"
701,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test292()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
}"
702,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test293()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
}"
703,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test294()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
}"
704,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test295()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
}"
705,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test296()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
}"
706,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test297()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
}"
707,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test298()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
}"
708,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test299()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
}"
709,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test300()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
}"
710,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test301()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
}"
711,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test302()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
}"
712,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test303()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
}"
713,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test304()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
}"
714,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test305()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
}"
715,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test306()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
}"
716,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test307()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
}"
717,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test308()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
}"
718,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test309()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
}"
719,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test310()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
}"
720,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test311()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
}"
721,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test312()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
}"
722,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test313()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
}"
723,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test314()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
}"
724,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test315()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
}"
725,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test316()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
}"
726,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test317()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
}"
727,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test318()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
}"
728,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test319()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
}"
729,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test320()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
}"
730,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test321()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
731,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test322()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
732,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test323()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
733,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test324()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
734,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test325()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
735,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test326()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
736,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test327()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
737,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test328()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
738,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test329()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
739,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test330()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
740,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test331()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
741,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test332()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
742,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test333()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
743,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test334()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
744,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test335()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
745,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test336()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
746,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test337()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
747,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test338()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
748,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test339()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
749,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test340()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
750,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test341()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
751,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test342()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
752,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test343()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
753,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test344()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
754,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test345()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<Integer, String> linkedMap2 = new LinkedMap<Integer, String>(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      AbstractHashedMap<String, String> abstractHashedMap0 = new AbstractHashedMap<String, String>(0);
      Set<String> set0 = abstractHashedMap0.keySet();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
755,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test346()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
}"
756,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test347()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
}"
757,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test348()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
}"
758,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test349()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
}"
759,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test350()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
}"
760,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test351()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
}"
761,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test352()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
}"
762,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test353()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
}"
763,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test354()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
}"
764,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test355()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
}"
765,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test356()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
}"
766,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test357()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
}"
767,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test358()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
}"
768,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test359()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
}"
769,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test360()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
}"
770,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test361()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
}"
771,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test362()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
}"
772,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test363()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      Integer integer0 = new Integer((-4904));
}"
773,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test364()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      Integer integer0 = new Integer((-4904));
}"
774,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test365()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      Integer integer0 = new Integer((-4904));
      int int0 = linkedMap_LinkedMapList0.lastIndexOf(integer0);
}"
775,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test366()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      Integer integer0 = new Integer((-4904));
      int int0 = linkedMap_LinkedMapList0.lastIndexOf(integer0);
}"
776,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test367()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      Integer integer0 = new Integer((-4904));
      int int0 = linkedMap_LinkedMapList0.lastIndexOf(integer0);
}"
777,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test368()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      Integer integer0 = new Integer((-4904));
      int int0 = linkedMap_LinkedMapList0.lastIndexOf(integer0);
}"
778,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test369()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      Integer integer0 = new Integer((-4904));
      int int0 = linkedMap_LinkedMapList0.lastIndexOf(integer0);
}"
779,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test370()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      Integer integer0 = new Integer((-4904));
      int int0 = linkedMap_LinkedMapList0.lastIndexOf(integer0);
}"
780,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test371()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      Integer integer0 = new Integer((-4904));
      int int0 = linkedMap_LinkedMapList0.lastIndexOf(integer0);
}"
781,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test372()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      Integer integer0 = new Integer((-4904));
      int int0 = linkedMap_LinkedMapList0.lastIndexOf(integer0);
}"
782,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test373()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      Integer integer0 = new Integer((-4904));
      int int0 = linkedMap_LinkedMapList0.lastIndexOf(integer0);
}"
783,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test374()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      Integer integer0 = new Integer((-4904));
      int int0 = linkedMap_LinkedMapList0.lastIndexOf(integer0);
}"
784,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test375()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = null;
      try {
        linkedMap0 = new LinkedMap<String, Integer>((Map<? extends String, ? extends Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.map.AbstractHashedMap"", e);
      }
  }"
785,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test376()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
}"
786,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test377()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
}"
787,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test378()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
}"
788,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test379()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
}"
789,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test380()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
}"
790,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test381()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
}"
791,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test382()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
}"
792,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test383()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
}"
793,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test384()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
}"
794,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test385()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
}"
795,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test386()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
}"
796,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test387()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
}"
797,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test388()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
}"
798,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test389()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
}"
799,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test390()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
}"
800,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test391()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
}"
801,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test392()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
}"
802,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test393()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
}"
803,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test394()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
}"
804,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test395()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
}"
805,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test396()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
}"
806,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test397()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
}"
807,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test398()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
}"
808,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test399()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
}"
809,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test400()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
}"
810,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test401()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
}"
811,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test402()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
}"
812,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test403()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
}"
813,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test404()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
}"
814,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test405()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
}"
815,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test406()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
}"
816,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test407()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
}"
817,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test408()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
}"
818,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test409()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
}"
819,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test410()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
}"
820,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test411()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
821,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test412()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
822,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test413()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
823,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test414()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
824,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test415()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList1.contains(linkedMap1);
}"
825,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test416()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList1.contains(linkedMap1);
}"
826,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test417()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList1.contains(linkedMap1);
}"
827,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test418()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList1.contains(linkedMap1);
}"
828,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test419()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList1.contains(linkedMap1);
}"
829,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test420()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList1.contains(linkedMap1);
}"
830,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test421()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList1.contains(linkedMap1);
}"
831,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test422()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList1.contains(linkedMap1);
}"
832,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test423()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList1.contains(linkedMap1);
}"
833,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test424()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList1.contains(linkedMap1);
}"
834,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test425()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList1.contains(linkedMap1);
}"
835,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test426()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList1.contains(linkedMap1);
}"
836,,"  public void test427()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
}"
837,,"  public void test428()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
}"
838,,"  public void test429()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
}"
839,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test430()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
}"
840,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test431()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
}"
841,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test432()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
}"
842,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test433()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
}"
843,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test434()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
}"
844,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test435()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
845,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test436()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
846,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test437()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
847,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test438()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
848,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test439()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
849,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test440()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
850,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test441()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      Iterator<String> iterator0 = linkedMap_LinkedMapList0.iterator();
}"
851,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test442()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      Iterator<String> iterator0 = linkedMap_LinkedMapList0.iterator();
}"
852,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test443()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      Iterator<String> iterator0 = linkedMap_LinkedMapList0.iterator();
}"
853,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test444()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      Iterator<String> iterator0 = linkedMap_LinkedMapList0.iterator();
}"
854,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test445()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      Iterator<String> iterator0 = linkedMap_LinkedMapList0.iterator();
}"
855,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test446()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(hashMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      Iterator<String> iterator0 = linkedMap_LinkedMapList0.iterator();
}"
856,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test447()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
}"
857,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test448()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
}"
858,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test449()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
}"
859,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test450()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
}"
860,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test451()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
}"
861,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test452()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
}"
862,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test453()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
}"
863,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test454()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
}"
864,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test455()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
}"
865,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test456()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
}"
866,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test457()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
}"
867,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test458()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
}"
868,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test459()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
}"
869,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test460()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
}"
870,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test461()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
}"
871,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test462()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
}"
872,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test463()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
}"
873,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test464()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
}"
874,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test465()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
}"
875,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test466()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
}"
876,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test467()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
      LinkedMap<Object, Object> linkedMap2 = null;
      linkedMap0.data = null;
}"
877,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test468()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
      LinkedMap<Object, Object> linkedMap2 = null;
      linkedMap0.data = null;
}"
878,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test469()  throws Throwable  {
      int int0 = 10;
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>(10);
      LinkedMap<Integer, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
      LinkedMap<Object, Object> linkedMap2 = null;
      linkedMap0.data = null;
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>((LinkedMap<Object, ?>) null);
}"
879,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test470()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
}"
880,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test471()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
}"
881,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test472()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
}"
882,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test473()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
883,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test474()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
884,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test475()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
885,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test476()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
886,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test477()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      String string0 = linkedMap0.toString();
}"
887,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test478()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      String string0 = linkedMap0.toString();
}"
888,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test479()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      String string0 = linkedMap0.toString();
}"
889,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test480()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      String string0 = linkedMap0.toString();
}"
890,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test481()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      String string0 = linkedMap0.toString();
      AbstractHashedMap.Values<Object> abstractHashedMap_Values0 = new AbstractHashedMap.Values<Object>(linkedMap0);
}"
891,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test482()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      String string0 = linkedMap0.toString();
      AbstractHashedMap.Values<Object> abstractHashedMap_Values0 = new AbstractHashedMap.Values<Object>(linkedMap0);
}"
892,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test483()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      String string0 = linkedMap0.toString();
      AbstractHashedMap.Values<Object> abstractHashedMap_Values0 = new AbstractHashedMap.Values<Object>(linkedMap0);
}"
893,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test484()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      String string0 = linkedMap0.toString();
      AbstractHashedMap.Values<Object> abstractHashedMap_Values0 = new AbstractHashedMap.Values<Object>(linkedMap0);
}"
894,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test485()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
}"
895,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test486()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
}"
896,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test487()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
}"
897,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test488()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
898,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test489()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
899,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test490()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
900,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test491()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
901,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test492()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      int int0 = linkedMap_LinkedMapList0.size();
}"
902,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test493()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      int int0 = linkedMap_LinkedMapList0.size();
}"
903,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test494()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      int int0 = linkedMap_LinkedMapList0.size();
}"
904,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test495()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      int int0 = linkedMap_LinkedMapList0.size();
}"
905,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test496()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(304, 3672.0F);
}"
906,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test497()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(304, 3672.0F);
}"
907,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test498()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(304, 3672.0F);
}"
908,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test499()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(304, 3672.0F);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
909,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test500()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(304, 3672.0F);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
910,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test501()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(304, 3672.0F);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
911,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test502()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(304, 3672.0F);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
912,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test503()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(304, 3672.0F);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
913,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test504()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = null;
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>((LinkedMap<Object, ?>) null);
}"
914,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test505()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = null;
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>((LinkedMap<Object, ?>) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
}"
915,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test506()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = null;
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>((LinkedMap<Object, ?>) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
}"
916,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test507()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
}"
917,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test508()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
}"
918,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test509()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
}"
919,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test510()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
}"
920,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test511()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
}"
921,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test512()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
}"
922,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test513()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
}"
923,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test514()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
}"
924,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test515()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
}"
925,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test516()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
}"
926,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test517()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
}"
927,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test518()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
}"
928,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test519()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
}"
929,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test520()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
}"
930,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test521()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
}"
931,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test522()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
}"
932,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test523()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
}"
933,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test524()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
}"
934,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test525()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
}"
935,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test526()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
}"
936,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test527()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
}"
937,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test528()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
}"
938,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test529()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
}"
939,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test530()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
}"
940,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test531()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
}"
941,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test532()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
}"
942,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test533()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
}"
943,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test534()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
}"
944,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test535()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
}"
945,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test536()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
}"
946,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test537()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
}"
947,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test538()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
}"
948,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test539()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
}"
949,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test540()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
}"
950,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test541()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
}"
951,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test542()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
}"
952,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test543()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
}"
953,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test544()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate2);
}"
954,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test545()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate2);
}"
955,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test546()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate2);
}"
956,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test547()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate2);
}"
957,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test548()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate2);
}"
958,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test549()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate2);
}"
959,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test550()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate2);
}"
960,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test551()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate2);
}"
961,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test552()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate2);
}"
962,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test553()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate2);
}"
963,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test554()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate2);
}"
964,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test555()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1762.5902F);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      List<Object> list0 = linkedMap_LinkedMapList0.subList(0, 0);
      LinkedMap<LinkedMap<String, String>, Integer> linkedMap1 = new LinkedMap<LinkedMap<String, String>, Integer>(0);
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>(linkedMap1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate2);
}"
965,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test556()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
}"
966,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test557()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
}"
967,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test558()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
}"
968,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test559()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
}"
969,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test560()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
}"
970,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test561()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
}"
971,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test562()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
}"
972,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test563()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
}"
973,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test564()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
}"
974,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test565()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
}"
975,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test566()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
}"
976,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test567()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
}"
977,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test568()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
}"
978,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test569()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
}"
979,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test570()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
}"
980,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test571()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
}"
981,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test572()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
}"
982,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test573()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
}"
983,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test574()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
}"
984,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test575()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
}"
985,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test576()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
}"
986,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test577()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
}"
987,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test578()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
}"
988,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test579()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
}"
989,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test580()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
}"
990,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test581()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
}"
991,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test582()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
}"
992,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test583()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
}"
993,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test584()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
}"
994,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test585()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
}"
995,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test586()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
}"
996,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test587()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
}"
997,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test588()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
}"
998,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test589()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
}"
999,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test590()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
}"
1000,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test591()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
}"
1001,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test592()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
}"
1002,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test593()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
}"
1003,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test594()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
}"
1004,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test595()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
}"
1005,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test596()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
}"
1006,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test597()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
}"
1007,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test598()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
}"
1008,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test599()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
}"
1009,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test600()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
}"
1010,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test601()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
}"
1011,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test602()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
}"
1012,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test603()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
}"
1013,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test604()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
}"
1014,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test605()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
}"
1015,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test606()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
}"
1016,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test607()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
}"
1017,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test608()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
}"
1018,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test609()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1019,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test610()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1020,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test611()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1021,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test612()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1022,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test613()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1023,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test614()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1024,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test615()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1025,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test616()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1026,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test617()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1027,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test618()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1028,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test619()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1029,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test620()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1030,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test621()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1031,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test622()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1032,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test623()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1033,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test624()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1034,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test625()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
}"
1035,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test626()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
}"
1036,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test627()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
}"
1037,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test628()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
}"
1038,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test629()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
}"
1039,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test630()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
}"
1040,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test631()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
}"
1041,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test632()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
}"
1042,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test633()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
}"
1043,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test634()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
}"
1044,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test635()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
}"
1045,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test636()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
}"
1046,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test637()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
}"
1047,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test638()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
}"
1048,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test639()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
}"
1049,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test640()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
}"
1050,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test641()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
}"
1051,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test642()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
}"
1052,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test643()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
}"
1053,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test644()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
}"
1054,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test645()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
}"
1055,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test646()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
}"
1056,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test647()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(623, 514.9F);
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      AbstractHashedMap<String, Integer> abstractHashedMap0 = linkedMap1.clone();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(abstractHashedMap0);
      AbstractHashedMap.EntrySet<String, Integer> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<String, Integer>(abstractHashedMap0);
      linkedMap0.entrySet = abstractHashedMap_EntrySet0;
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      Object[] objectArray0 = linkedMap_LinkedMapList0.toArray();
}"
1057,,"  public void test648()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
}"
1058,,"  public void test649()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
}"
1059,,"  public void test650()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
}"
1060,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test651()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
}"
1061,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test652()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
}"
1062,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test653()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
}"
1063,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test654()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
}"
1064,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test655()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
}"
1065,"    public V remove(final int index) {
        return remove(get(index));
    }","  public void test656()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
}"
1066,"    public V remove(final int index) {
        return remove(get(index));
    }","  public void test657()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
}"
1067,"    public V remove(final int index) {
        return remove(get(index));
    }","  public void test658()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
}"
1068,"    public V remove(final int index) {
        return remove(get(index));
    }","  public void test659()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
}"
1069,"    public V remove(final int index) {
        return remove(get(index));
    }","  public void test660()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
}"
1070,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test661()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
1071,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test662()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
1072,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test663()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
1073,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test664()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
1074,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test665()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
1075,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test666()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
1076,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test667()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
}"
1077,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test668()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
}"
1078,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test669()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
}"
1079,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test670()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
}"
1080,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test671()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
}"
1081,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test672()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
}"
1082,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test673()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
}"
1083,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test674()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
}"
1084,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test675()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>(abstractHashedMap0);
}"
1085,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test676()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>(abstractHashedMap0);
}"
1086,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test677()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>(abstractHashedMap0);
}"
1087,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test678()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>(abstractHashedMap0);
}"
1088,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test679()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>(abstractHashedMap0);
}"
1089,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test680()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
}"
1090,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test681()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
}"
1091,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test682()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
}"
1092,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test683()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
}"
1093,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test684()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
}"
1094,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test685()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
}"
1095,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test686()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
}"
1096,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test687()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
}"
1097,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test688()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
}"
1098,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test689()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
}"
1099,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test690()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ListIterator<Object> listIterator0 = linkedMap_LinkedMapList0.listIterator();
}"
1100,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test691()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ListIterator<Object> listIterator0 = linkedMap_LinkedMapList0.listIterator();
}"
1101,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test692()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ListIterator<Object> listIterator0 = linkedMap_LinkedMapList0.listIterator();
}"
1102,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test693()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ListIterator<Object> listIterator0 = linkedMap_LinkedMapList0.listIterator();
}"
1103,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test694()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ListIterator<Object> listIterator0 = linkedMap_LinkedMapList0.listIterator();
}"
1104,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test695()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ListIterator<Object> listIterator0 = linkedMap_LinkedMapList0.listIterator();
}"
1105,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test696()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(0);
      linkedMap0.clear();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      ListIterator<Object> listIterator0 = linkedMap_LinkedMapList0.listIterator();
}"
1106,,"  public void test697()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
}"
1107,,"  public void test698()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
}"
1108,,"  public void test699()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
}"
1109,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test700()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
}"
1110,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test701()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
}"
1111,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test702()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
}"
1112,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test703()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
}"
1113,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test704()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
}"
1114,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test705()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
1115,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test706()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
1116,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test707()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
1117,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test708()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
1118,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test709()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
1119,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test710()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
1120,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test711()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
}"
1121,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test712()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) abstractHashedMap0;
      objectArray0[1] = (Object) linkedMap_LinkedMapList0;
      objectArray0[2] = (Object) linkedMap0;
      objectArray0[3] = (Object) linkedMap_LinkedMapList0;
      objectArray0[4] = (Object) abstractHashedMap0;
      objectArray0[5] = (Object) abstractHashedMap0;
      objectArray0[6] = (Object) linkedMap_LinkedMapList0;
      objectArray0[7] = (Object) abstractHashedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
1122,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test713()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) abstractHashedMap0;
      objectArray0[1] = (Object) linkedMap_LinkedMapList0;
      objectArray0[2] = (Object) linkedMap0;
      objectArray0[3] = (Object) linkedMap_LinkedMapList0;
      objectArray0[4] = (Object) abstractHashedMap0;
      objectArray0[5] = (Object) abstractHashedMap0;
      objectArray0[6] = (Object) linkedMap_LinkedMapList0;
      objectArray0[7] = (Object) abstractHashedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
1123,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test714()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) abstractHashedMap0;
      objectArray0[1] = (Object) linkedMap_LinkedMapList0;
      objectArray0[2] = (Object) linkedMap0;
      objectArray0[3] = (Object) linkedMap_LinkedMapList0;
      objectArray0[4] = (Object) abstractHashedMap0;
      objectArray0[5] = (Object) abstractHashedMap0;
      objectArray0[6] = (Object) linkedMap_LinkedMapList0;
      objectArray0[7] = (Object) abstractHashedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
1124,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test715()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) abstractHashedMap0;
      objectArray0[1] = (Object) linkedMap_LinkedMapList0;
      objectArray0[2] = (Object) linkedMap0;
      objectArray0[3] = (Object) linkedMap_LinkedMapList0;
      objectArray0[4] = (Object) abstractHashedMap0;
      objectArray0[5] = (Object) abstractHashedMap0;
      objectArray0[6] = (Object) linkedMap_LinkedMapList0;
      objectArray0[7] = (Object) abstractHashedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
1125,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test716()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) abstractHashedMap0;
      objectArray0[1] = (Object) linkedMap_LinkedMapList0;
      objectArray0[2] = (Object) linkedMap0;
      objectArray0[3] = (Object) linkedMap_LinkedMapList0;
      objectArray0[4] = (Object) abstractHashedMap0;
      objectArray0[5] = (Object) abstractHashedMap0;
      objectArray0[6] = (Object) linkedMap_LinkedMapList0;
      objectArray0[7] = (Object) abstractHashedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
1126,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test717()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) abstractHashedMap0;
      objectArray0[1] = (Object) linkedMap_LinkedMapList0;
      objectArray0[2] = (Object) linkedMap0;
      objectArray0[3] = (Object) linkedMap_LinkedMapList0;
      objectArray0[4] = (Object) abstractHashedMap0;
      objectArray0[5] = (Object) abstractHashedMap0;
      objectArray0[6] = (Object) linkedMap_LinkedMapList0;
      objectArray0[7] = (Object) abstractHashedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
1127,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test718()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) abstractHashedMap0;
      objectArray0[1] = (Object) linkedMap_LinkedMapList0;
      objectArray0[2] = (Object) linkedMap0;
      objectArray0[3] = (Object) linkedMap_LinkedMapList0;
      objectArray0[4] = (Object) abstractHashedMap0;
      objectArray0[5] = (Object) abstractHashedMap0;
      objectArray0[6] = (Object) linkedMap_LinkedMapList0;
      objectArray0[7] = (Object) abstractHashedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
1128,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test719()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) abstractHashedMap0;
      objectArray0[1] = (Object) linkedMap_LinkedMapList0;
      objectArray0[2] = (Object) linkedMap0;
      objectArray0[3] = (Object) linkedMap_LinkedMapList0;
      objectArray0[4] = (Object) abstractHashedMap0;
      objectArray0[5] = (Object) abstractHashedMap0;
      objectArray0[6] = (Object) linkedMap_LinkedMapList0;
      objectArray0[7] = (Object) abstractHashedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
1129,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test720()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) abstractHashedMap0;
      objectArray0[1] = (Object) linkedMap_LinkedMapList0;
      objectArray0[2] = (Object) linkedMap0;
      objectArray0[3] = (Object) linkedMap_LinkedMapList0;
      objectArray0[4] = (Object) abstractHashedMap0;
      objectArray0[5] = (Object) abstractHashedMap0;
      objectArray0[6] = (Object) linkedMap_LinkedMapList0;
      objectArray0[7] = (Object) abstractHashedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
1130,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test721()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) abstractHashedMap0;
      objectArray0[1] = (Object) linkedMap_LinkedMapList0;
      objectArray0[2] = (Object) linkedMap0;
      objectArray0[3] = (Object) linkedMap_LinkedMapList0;
      objectArray0[4] = (Object) abstractHashedMap0;
      objectArray0[5] = (Object) abstractHashedMap0;
      objectArray0[6] = (Object) linkedMap_LinkedMapList0;
      objectArray0[7] = (Object) abstractHashedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
1131,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test722()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(3364, 1889.0966F, 3364);
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>(abstractHashedMap0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) abstractHashedMap0;
      objectArray0[1] = (Object) linkedMap_LinkedMapList0;
      objectArray0[2] = (Object) linkedMap0;
      objectArray0[3] = (Object) linkedMap_LinkedMapList0;
      objectArray0[4] = (Object) abstractHashedMap0;
      objectArray0[5] = (Object) abstractHashedMap0;
      objectArray0[6] = (Object) linkedMap_LinkedMapList0;
      objectArray0[7] = (Object) abstractHashedMap0;
      Object[] objectArray1 = linkedMap_LinkedMapList0.toArray(objectArray0);
}"
1132,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test723()  throws Throwable  {
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>((LinkedMap<Integer, ?>) null);
}"
1133,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test724()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
}"
1134,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test725()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
}"
1135,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test726()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
}"
1136,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test727()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
1137,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test728()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
1138,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test729()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
1139,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test730()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
1140,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test731()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
}"
1141,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test732()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
}"
1142,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test733()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
}"
1143,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test734()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
}"
1144,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test735()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
}"
1145,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test736()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
}"
1146,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test737()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
}"
1147,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test738()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
}"
1148,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test739()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
}"
1149,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test740()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
}"
1150,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test741()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
}"
1151,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test742()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
}"
1152,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test743()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
}"
1153,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test744()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
}"
1154,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test745()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
}"
1155,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test746()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
}"
1156,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test747()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
}"
1157,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test748()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
}"
1158,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test749()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
}"
1159,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test750()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
}"
1160,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test751()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
}"
1161,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test752()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
}"
1162,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test753()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
}"
1163,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test754()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
}"
1164,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test755()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
}"
1165,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test756()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
}"
1166,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test757()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
}"
1167,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test758()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
}"
1168,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test759()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
}"
1169,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test760()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
}"
1170,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test761()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
}"
1171,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test762()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
}"
1172,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test763()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
}"
1173,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test764()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
}"
1174,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test765()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
}"
1175,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test766()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
}"
1176,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test767()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
}"
1177,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test768()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
}"
1178,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test769()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
}"
1179,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test770()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
}"
1180,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test771()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      LinkedMap<LinkedMap<Object, Object>, Integer> linkedMap1 = new LinkedMap<LinkedMap<Object, Object>, Integer>(41, 41);
}"
1181,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test772()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      LinkedMap<LinkedMap<Object, Object>, Integer> linkedMap1 = new LinkedMap<LinkedMap<Object, Object>, Integer>(41, 41);
}"
1182,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test773()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap0.ensureCapacity(16);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      boolean boolean0 = predicate1.test(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      LinkedMap<LinkedMap<Object, Object>, Integer> linkedMap1 = new LinkedMap<LinkedMap<Object, Object>, Integer>(41, 41);
}"
1183,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test774()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>();
}"
1184,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test775()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>();
}"
1185,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test776()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>();
}"
1186,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test777()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>();
      int int0 = (-3215);
      Integer integer0 = linkedMap0.replace(""org.apache.commons.collections4.map.LinkedMap"", (Integer) null);
}"
1187,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test778()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>();
      int int0 = (-3215);
      Integer integer0 = linkedMap0.replace(""org.apache.commons.collections4.map.LinkedMap"", (Integer) null);
}"
1188,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test779()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>();
      int int0 = (-3215);
      Integer integer0 = linkedMap0.replace(""org.apache.commons.collections4.map.LinkedMap"", (Integer) null);
}"
1189,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test780()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>();
}"
1190,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test781()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>();
}"
1191,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test782()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>();
}"
1192,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test783()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>();
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(3751, 3751);
}"
1193,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test784()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>();
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(3751, 3751);
}"
1194,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test785()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>();
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(3751, 3751);
}"
1195,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test786()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>();
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(3751, 3751);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = linkedMap0.computeIfPresent(linkedMap1, biFunction0);
}"
1196,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test787()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>();
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(3751, 3751);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = linkedMap0.computeIfPresent(linkedMap1, biFunction0);
}"
1197,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test788()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>();
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(3751, 3751);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = linkedMap0.computeIfPresent(linkedMap1, biFunction0);
}"
1198,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test789()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>();
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(3751, 3751);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = linkedMap0.computeIfPresent(linkedMap1, biFunction0);
}"
1199,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test790()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>();
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(3751, 3751);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = linkedMap0.computeIfPresent(linkedMap1, biFunction0);
}"
1200,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test791()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
}"
1201,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test792()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
}"
1202,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test793()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
}"
1203,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test794()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
}"
1204,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test795()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
}"
1205,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test796()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
}"
1206,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test797()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
}"
1207,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test798()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
}"
1208,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test799()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
}"
1209,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test800()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
}"
1210,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test801()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
}"
1211,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test802()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
}"
1212,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test803()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
}"
1213,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test804()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
}"
1214,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test805()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
}"
1215,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test806()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
}"
1216,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test807()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
}"
1217,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test808()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
}"
1218,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test809()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
}"
1219,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test810()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
}"
1220,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test811()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
}"
1221,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test812()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
}"
1222,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test813()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1223,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test814()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1224,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test815()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1225,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test816()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1226,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test817()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1227,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test818()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1228,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test819()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1229,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test820()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1230,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test821()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1231,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test822()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1232,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test823()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1233,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test824()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1234,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test825()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1235,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test826()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1236,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test827()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
}"
1237,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test828()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
}"
1238,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test829()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
}"
1239,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test830()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
}"
1240,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test831()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
}"
1241,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test832()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
}"
1242,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test833()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
}"
1243,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test834()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
      AbstractHashedMap.KeySet<Object> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Object>(abstractHashedMap0);
}"
1244,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test835()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
      AbstractHashedMap.KeySet<Object> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Object>(abstractHashedMap0);
}"
1245,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test836()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
      AbstractHashedMap.KeySet<Object> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Object>(abstractHashedMap0);
}"
1246,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test837()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
      AbstractHashedMap.KeySet<Object> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Object>(abstractHashedMap0);
}"
1247,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test838()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
      AbstractHashedMap.KeySet<Object> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Object>(abstractHashedMap0);
}"
1248,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test839()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
      AbstractHashedMap.KeySet<Object> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Object>(abstractHashedMap0);
}"
1249,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test840()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
      AbstractHashedMap.KeySet<Object> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Object>(abstractHashedMap0);
}"
1250,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test841()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      AbstractHashedMap<Object, Object> abstractHashedMap0 = new AbstractHashedMap<Object, Object>(linkedMap0);
      AbstractHashedMap.KeySet<Object> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Object>(abstractHashedMap0);
}"
1251,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test842()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
}"
1252,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test843()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
}"
1253,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test844()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
}"
1254,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test845()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
}"
1255,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test846()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
}"
1256,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test847()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
}"
1257,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test848()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
}"
1258,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test849()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
}"
1259,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test850()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
}"
1260,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test851()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
}"
1261,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test852()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
}"
1262,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test853()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
}"
1263,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test854()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
}"
1264,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test855()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
}"
1265,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test856()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
}"
1266,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test857()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
}"
1267,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test858()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
}"
1268,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test859()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
}"
1269,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test860()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
}"
1270,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test861()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
}"
1271,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test862()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
}"
1272,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test863()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
}"
1273,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test864()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
1274,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test865()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
1275,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test866()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
1276,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test867()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
1277,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test868()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(4295);
}"
1278,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test869()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(4295);
}"
1279,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test870()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(4295);
}"
1280,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test871()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(4295);
      Collection<String> collection0 = linkedMap0.values();
}"
1281,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test872()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(4295);
      Collection<String> collection0 = linkedMap0.values();
}"
1282,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test873()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(4295);
      Collection<String> collection0 = linkedMap0.values();
}"
1283,"    public List<K> asList() {
        return new LinkedMapList<>(this);
    }","  public void test874()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(4295);
      Collection<String> collection0 = linkedMap0.values();
      List<Object> list0 = linkedMap0.asList();
}"
1284,"    public List<K> asList() {
        return new LinkedMapList<>(this);
    }","  public void test875()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(4295);
      Collection<String> collection0 = linkedMap0.values();
      List<Object> list0 = linkedMap0.asList();
}"
1285,"    public List<K> asList() {
        return new LinkedMapList<>(this);
    }","  public void test876()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(4295);
      Collection<String> collection0 = linkedMap0.values();
      List<Object> list0 = linkedMap0.asList();
}"
1286,"    public List<K> asList() {
        return new LinkedMapList<>(this);
    }","  public void test877()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(4295);
      Collection<String> collection0 = linkedMap0.values();
      List<Object> list0 = linkedMap0.asList();
}"
1287,"    public List<K> asList() {
        return new LinkedMapList<>(this);
    }","  public void test878()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(4295);
      Collection<String> collection0 = linkedMap0.values();
      List<Object> list0 = linkedMap0.asList();
}"
1288,"    public List<K> asList() {
        return new LinkedMapList<>(this);
    }","  public void test879()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(4295);
      Collection<String> collection0 = linkedMap0.values();
      List<Object> list0 = linkedMap0.asList();
}"
1289,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test880()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
}"
1290,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test881()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
}"
1291,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test882()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
}"
1292,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test883()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
}"
1293,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test884()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
}"
1294,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test885()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
}"
1295,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test886()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
}"
1296,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test887()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
}"
1297,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test888()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
}"
1298,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test889()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
}"
1299,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test890()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
}"
1300,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test891()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
}"
1301,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test892()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
}"
1302,"    public int indexOf(Object key) {
        key = convertKey(key);
        int i = 0;
        for (LinkEntry<K, V> entry = header.after; entry != header; entry = entry.after, i++) {
            if (isEqualKey(key, entry.key)) {
                return i;
            }
        }
        return -1;
    }","  public void test893()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
}"
1303,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test894()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>();
}"
1304,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test895()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>();
}"
1305,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test896()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>();
}"
1306,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test897()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap1);
}"
1307,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test898()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap1);
}"
1308,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test899()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap1);
}"
1309,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test900()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap1);
}"
1310,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test901()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      boolean boolean0 = linkedMap1.isEmpty();
}"
1311,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test902()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      boolean boolean0 = linkedMap1.isEmpty();
}"
1312,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test903()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.indexOf(integer0);
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      boolean boolean0 = linkedMap1.isEmpty();
}"
1313,,"  public void test904()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
}"
1314,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test905()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
}"
1315,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test906()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
}"
1316,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test907()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
}"
1317,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test908()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
1318,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test909()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
1319,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test910()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
1320,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test911()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
1321,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test912()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(9, 0.75F);
}"
1322,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test913()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(9, 0.75F);
}"
1323,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test914()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(9, 0.75F);
}"
1324,,"  public void test915()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
}"
1325,,"  public void test916()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
}"
1326,,"  public void test917()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
}"
1327,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test918()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
}"
1328,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test919()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
}"
1329,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test920()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
}"
1330,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test921()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
}"
1331,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test922()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
}"
1332,"    public V remove(final int index) {
        return remove(get(index));
    }","  public void test923()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
}"
1333,"    public V remove(final int index) {
        return remove(get(index));
    }","  public void test924()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
}"
1334,"    public V remove(final int index) {
        return remove(get(index));
    }","  public void test925()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
}"
1335,"    public V remove(final int index) {
        return remove(get(index));
    }","  public void test926()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
}"
1336,"    public V remove(final int index) {
        return remove(get(index));
    }","  public void test927()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
}"
1337,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test928()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
1338,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test929()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
1339,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test930()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
1340,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test931()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
1341,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test932()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
1342,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test933()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
}"
1343,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test934()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
}"
1344,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test935()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
}"
1345,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test936()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
}"
1346,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test937()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
}"
1347,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test938()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
}"
1348,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test939()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
}"
1349,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test940()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
}"
1350,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test941()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
}"
1351,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test942()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
}"
1352,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test943()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
}"
1353,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test944()  throws Throwable  {
      AbstractHashedMap<String, Integer> abstractHashedMap0 = new AbstractHashedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(abstractHashedMap0);
      Integer integer0 = linkedMap0.remove(abstractHashedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      ListIterator<String> listIterator0 = linkedMap_LinkedMapList0.listIterator();
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
}"
1354,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test945()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
}"
1355,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test946()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
}"
1356,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test947()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
}"
1357,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test948()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
}"
1358,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test949()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
}"
1359,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test950()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
}"
1360,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test951()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
}"
1361,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test952()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
}"
1362,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test953()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
}"
1363,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test954()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
}"
1364,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test955()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
}"
1365,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test956()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
}"
1366,"    public LinkedMap<K, V> clone() {
        return (LinkedMap<K, V>) super.clone();
    }","  public void test957()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
}"
1367,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test958()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
}"
1368,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test959()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
}"
1369,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test960()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
}"
1370,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test961()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1371,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test962()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1372,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test963()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1373,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test964()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
}"
1374,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test965()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap1);
}"
1375,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test966()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap1);
}"
1376,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test967()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap1);
}"
1377,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test968()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap1);
}"
1378,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test969()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap1);
}"
1379,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test970()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap1);
}"
1380,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test971()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap1);
}"
1381,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test972()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap1);
}"
1382,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test973()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap1);
}"
1383,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test974()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap1);
}"
1384,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test975()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap1);
}"
1385,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test976()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList0.contains(linkedMap1);
}"
1386,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test977()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
}"
1387,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test978()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
}"
1388,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test979()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
}"
1389,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test980()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
}"
1390,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test981()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
}"
1391,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test982()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
}"
1392,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test983()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
}"
1393,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test984()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
}"
1394,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test985()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
}"
1395,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test986()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
}"
1396,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test987()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
}"
1397,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test988()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
}"
1398,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test989()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
}"
1399,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test990()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
}"
1400,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test991()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
}"
1401,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test992()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
}"
1402,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test993()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
}"
1403,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test994()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
}"
1404,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test995()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
}"
1405,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test996()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
}"
1406,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test997()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
}"
1407,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test998()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
}"
1408,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test999()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
}"
1409,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1000()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
}"
1410,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1001()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
}"
1411,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1002()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
}"
1412,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1003()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
}"
1413,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1004()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
}"
1414,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1005()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
}"
1415,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1006()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
}"
1416,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1007()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
}"
1417,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1008()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
}"
1418,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1009()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
}"
1419,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1010()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
}"
1420,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1011()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
}"
1421,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1012()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
}"
1422,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1013()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
}"
1423,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1014()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
1424,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1015()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
1425,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1016()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
1426,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1017()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
1427,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1018()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
1428,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1019()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
1429,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1020()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
1430,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1021()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
1431,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1022()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
1432,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1023()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
1433,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1024()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
1434,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1025()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
1435,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1026()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
1436,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1027()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
1437,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1028()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
1438,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1029()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
1439,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1030()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
1440,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1031()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
1441,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1032()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
}"
1442,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1033()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      LinkedMap<Object, Object> linkedMap3 = new LinkedMap<Object, Object>(0, 1153.0F);
}"
1443,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1034()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      LinkedMap<Object, Object> linkedMap3 = new LinkedMap<Object, Object>(0, 1153.0F);
}"
1444,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1035()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(203);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(125);
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap1);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = linkedMap_LinkedMapList0.containsAll(set0);
      LinkedMap<Object, Object> linkedMap3 = new LinkedMap<Object, Object>(0, 1153.0F);
}"
1445,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1036()  throws Throwable  {
      LinkedMap<LinkedMap<Object, String>, Integer> linkedMap0 = new LinkedMap<LinkedMap<Object, String>, Integer>(3119, 5542.538F);
      Object object0 = new Object();
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>();
      Integer integer0 = new Integer(3119);
      linkedMap0.addMapping(12, (-2881), linkedMap1, integer0);
      linkedMap0.indexOf(object0);
      LinkedMap<Integer, Object> linkedMap2 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap2);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.listIterator((-1));
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException(""java.util.AbstractList"", e);
      }
  }"
1446,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1037()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(0);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedMap0;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>();
      linkedMap1.put("""", linkedMap0);
      objectArray0[1] = null;
      objectArray0[2] = (Object) linkedMap0;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , any());
      linkedMap1.compute((Object) null, biFunction0);
      objectArray0[3] = (Object) linkedMap0;
      linkedMap_LinkedMapList0.toArray(objectArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      linkedMap_LinkedMapList1.size();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(12);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      boolean boolean0 = linkedMap_LinkedMapList2.containsAll(linkedMap_LinkedMapList1);
}"
1447,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1038()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(1891);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1891);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1891);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer((int) integerArray0[2]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[1]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[0]);
      linkedMap_LinkedMapList0.toArray(integerArray0);
      linkedMap_LinkedMapList0.toArray();
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.clear();
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.map.LinkedMap$LinkedMapList"", e);
      }
  }"
1448,"    public K get(final int index) {
        return getEntry(index).getKey();
    }","  public void test1039()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(1916);
      linkedMap0.asList();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.get((-1));
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index -1 is less than zero
         //
         verifyException(""org.apache.commons.collections4.map.AbstractLinkedMap"", e);
      }
  }"
1449,"    public V remove(final int index) {
        return remove(get(index));
    }","  public void test1040()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>(26);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedMap0.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        linkedMap0.remove(2797);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 2797 is invalid for size 0
         //
         verifyException(""org.apache.commons.collections4.map.AbstractLinkedMap"", e);
      }
  }"
1450,"    public LinkedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1041()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      Integer integer0 = new Integer(601);
      linkedMap0.equals(integer0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap_LinkedMapList0.iterator();
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap2 = new LinkedMap<String, Integer>(linkedMap1);
      LinkedMap<String, Integer> linkedMap3 = linkedMap2.clone();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap3);
      Integer integer1 = new Integer(4122);
      linkedMap3.getEntry(integer1);
      int int0 = (-710);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.subList((-710), 0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -710
         //
         verifyException(""java.util.SubList"", e);
      }
  }"
1451,"    public ReferenceIdentityMap() {
        super(ReferenceStrength.HARD, ReferenceStrength.SOFT, DEFAULT_CAPACITY,
                DEFAULT_LOAD_FACTOR, false);
    }","  public void test0()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceIdentityMap<InputStream, String> referenceIdentityMap0 = new ReferenceIdentityMap<InputStream, String>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      int int0 = AbstractHashedMap.MAXIMUM_CAPACITY;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength2 = AbstractReferenceMap.ReferenceStrength.SOFT;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength3 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceIdentityMap<String, String> referenceIdentityMap1 = new ReferenceIdentityMap<String, String>(abstractReferenceMap_ReferenceStrength2, abstractReferenceMap_ReferenceStrength3, true);
      ReferenceIdentityMap<Integer, InputStream> referenceIdentityMap2 = new ReferenceIdentityMap<Integer, InputStream>();
      referenceIdentityMap2.get(referenceIdentityMap0);
      referenceIdentityMap1.isEqualValue((Object) null, abstractReferenceMap_ReferenceStrength2);
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength4 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<MockFileInputStream, Object> referenceIdentityMap3 = new ReferenceIdentityMap<MockFileInputStream, Object>(abstractReferenceMap_ReferenceStrength1, abstractReferenceMap_ReferenceStrength4, 1073741824, 1073741824);
  }"
1452,"    public ReferenceIdentityMap() {
        super(ReferenceStrength.HARD, ReferenceStrength.SOFT, DEFAULT_CAPACITY,
                DEFAULT_LOAD_FACTOR, false);
    }","  public void test1()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<Integer, Integer> referenceIdentityMap0 = new ReferenceIdentityMap<Integer, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1, 3618, 3440.3123F);
      ReferenceIdentityMap<Object, Integer> referenceIdentityMap1 = new ReferenceIdentityMap<Object, Integer>();
      referenceIdentityMap1.isEqualKey(abstractReferenceMap_ReferenceStrength0, referenceIdentityMap0);
      referenceIdentityMap1.isEqualValue(abstractReferenceMap_ReferenceStrength0, ""null values not allowed"");
      ReferenceIdentityMap<PhantomReference<String>, String> referenceIdentityMap2 = new ReferenceIdentityMap<PhantomReference<String>, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      referenceIdentityMap2.replaceAll(biFunction0);
      referenceIdentityMap2.purgeBeforeRead();
      int int0 = AbstractHashedMap.MAXIMUM_CAPACITY;
      ReferenceIdentityMap<Object, PhantomReference<Object>> referenceIdentityMap3 = new ReferenceIdentityMap<Object, PhantomReference<Object>>();
      referenceIdentityMap3.isEqualValue(referenceIdentityMap0, referenceIdentityMap0);
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength2 = AbstractReferenceMap.ReferenceStrength.SOFT;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength3 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<Integer, WeakReference<Integer>> referenceIdentityMap4 = new ReferenceIdentityMap<Integer, WeakReference<Integer>>(abstractReferenceMap_ReferenceStrength2, abstractReferenceMap_ReferenceStrength3, 1073741824, 1073741824, true);
  }"
1453,"    public ReferenceIdentityMap() {
        super(ReferenceStrength.HARD, ReferenceStrength.SOFT, DEFAULT_CAPACITY,
                DEFAULT_LOAD_FACTOR, false);
    }","  public void test2()  throws Throwable  {
      ReferenceIdentityMap<PhantomReference<String>, MockFileInputStream> referenceIdentityMap0 = new ReferenceIdentityMap<PhantomReference<String>, MockFileInputStream>();
      ReferenceIdentityMap<InputStream, PhantomReference<Integer>> referenceIdentityMap1 = new ReferenceIdentityMap<InputStream, PhantomReference<Integer>>();
      referenceIdentityMap1.hash((Object) null);
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.WEAK;
      int int0 = (-242);
      boolean boolean0 = false;
      ReferenceIdentityMap<InputStream, InputStream> referenceIdentityMap2 = null;
      try {
        referenceIdentityMap2 = new ReferenceIdentityMap<InputStream, InputStream>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1, (-242), (-242), false);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException(""org.apache.commons.collections4.map.AbstractHashedMap"", e);
      }
  }"
1454,"    public ReferenceMap() {
        super(ReferenceStrength.HARD, ReferenceStrength.SOFT, DEFAULT_CAPACITY,
                DEFAULT_LOAD_FACTOR, false);
    }","  public void test0()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.SOFT;
      int int0 = 1073741824;
      ReferenceMap<String, Object> referenceMap0 = new ReferenceMap<String, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1, 1073741824, 1073741824);
  }"
1455,"    public ReferenceMap() {
        super(ReferenceStrength.HARD, ReferenceStrength.SOFT, DEFAULT_CAPACITY,
                DEFAULT_LOAD_FACTOR, false);
    }","  public void test1()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<Object, Object> referenceMap0 = new ReferenceMap<Object, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      referenceMap0.purge();
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength2 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceMap<String, Integer> referenceMap1 = new ReferenceMap<String, Integer>(abstractReferenceMap_ReferenceStrength2, abstractReferenceMap_ReferenceStrength0, true);
      referenceMap1.size();
      ReferenceMap<Integer, Object> referenceMap2 = new ReferenceMap<Integer, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 0, 201.47298F, true);
      referenceMap2.checkCapacity();
      referenceMap2.remove((Object) abstractReferenceMap_ReferenceStrength1);
      ReferenceMap<Integer, String> referenceMap3 = new ReferenceMap<Integer, String>();
      referenceMap3.createValuesIterator();
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength3 = AbstractReferenceMap.ReferenceStrength.WEAK;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength4 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<Object, Object> referenceMap4 = new ReferenceMap<Object, Object>(abstractReferenceMap_ReferenceStrength3, abstractReferenceMap_ReferenceStrength4, true);
      Integer integer0 = new Integer(0);
      referenceMap4.getOrDefault(integer0, (Object) null);
      AbstractHashedMap.KeySet<Object> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<Object>(referenceMap0);
      Object object0 = AbstractHashedMap.NULL;
      abstractHashedMap_KeySet0.contains(object0);
      referenceMap4.keySet = abstractHashedMap_KeySet0;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength5 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<String, Integer> referenceMap5 = new ReferenceMap<String, Integer>(abstractReferenceMap_ReferenceStrength4, abstractReferenceMap_ReferenceStrength5);
      referenceMap5.init();
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength6 = AbstractReferenceMap.ReferenceStrength.WEAK;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength7 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceMap<Object, String> referenceMap6 = new ReferenceMap<Object, String>(abstractReferenceMap_ReferenceStrength6, abstractReferenceMap_ReferenceStrength7, false);
      ReferenceMap<Integer, String> referenceMap7 = new ReferenceMap<Integer, String>();
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength8 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<Integer, Object> referenceMap8 = null;
      try {
        referenceMap8 = new ReferenceMap<Integer, Object>(abstractReferenceMap_ReferenceStrength8, abstractReferenceMap_ReferenceStrength3, (-4732), 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException(""org.apache.commons.collections4.map.AbstractHashedMap"", e);
      }
  }"
1456,"    public ReferenceMap() {
        super(ReferenceStrength.HARD, ReferenceStrength.SOFT, DEFAULT_CAPACITY,
                DEFAULT_LOAD_FACTOR, false);
    }","  public void test2()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<Object, Object> referenceMap0 = new ReferenceMap<Object, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      ReferenceMap<Object, Object> referenceMap1 = new ReferenceMap<Object, Object>();
}"
1457,"    public ReferenceMap() {
        super(ReferenceStrength.HARD, ReferenceStrength.SOFT, DEFAULT_CAPACITY,
                DEFAULT_LOAD_FACTOR, false);
    }","  public void test3()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<Object, String> referenceMap0 = new ReferenceMap<Object, String>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1, 4092, 4092, false);
  }"
1458,"    public ReferenceMap() {
        super(ReferenceStrength.HARD, ReferenceStrength.SOFT, DEFAULT_CAPACITY,
                DEFAULT_LOAD_FACTOR, false);
    }","  public void test4()  throws Throwable  {
      ReferenceMap<String, Object> referenceMap0 = new ReferenceMap<String, Object>();
  }"
1459,"    public ReferenceMap() {
        super(ReferenceStrength.HARD, ReferenceStrength.SOFT, DEFAULT_CAPACITY,
                DEFAULT_LOAD_FACTOR, false);
    }","  public void test5()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      int int0 = (-1028);
      boolean boolean0 = false;
      ReferenceMap<String, Object> referenceMap0 = null;
      try {
        referenceMap0 = new ReferenceMap<String, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, (-1028), (-1028), false);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException(""org.apache.commons.collections4.map.AbstractHashedMap"", e);
      }
  }"
1460,"    public ReferenceMap() {
        super(ReferenceStrength.HARD, ReferenceStrength.SOFT, DEFAULT_CAPACITY,
                DEFAULT_LOAD_FACTOR, false);
    }","  public void test6()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<String, String> referenceMap0 = null;
      try {
        referenceMap0 = new ReferenceMap<String, String>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1276, 0.0F, false);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException(""org.apache.commons.collections4.map.AbstractHashedMap"", e);
      }
  }"
1461,"    public ReferenceMap() {
        super(ReferenceStrength.HARD, ReferenceStrength.SOFT, DEFAULT_CAPACITY,
                DEFAULT_LOAD_FACTOR, false);
    }","  public void test7()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<Object, Object> referenceMap0 = new ReferenceMap<Object, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1, 1, 1);
  }"
1462,"    public ReferenceMap() {
        super(ReferenceStrength.HARD, ReferenceStrength.SOFT, DEFAULT_CAPACITY,
                DEFAULT_LOAD_FACTOR, false);
    }","  public void test8()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceMap<Object, String> referenceMap0 = new ReferenceMap<Object, String>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, false);
  }"
1463,"    public SortedMap<K, V> tailMap(final K fromKey) {
        final SortedMap<K, V> map = getSortedMap().tailMap(fromKey);
        return new PredicatedSortedMap<>(map, keyPredicate, valuePredicate);
    }","  public void test0()  throws Throwable  {
      TreeMap<String, Transformer<Integer, Integer>> treeMap0 = new TreeMap<String, Transformer<Integer, Integer>>();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) treeMap0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      PredicatedSortedMap<String, Transformer<Integer, Integer>> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<String, Transformer<Integer, Integer>>) treeMap0, (Predicate<? super String>) nullIsTruePredicate0, (Predicate<? super Transformer<Integer, Integer>>) predicate0);
      SortedMap<String, Transformer<Integer, Integer>> sortedMap0 = predicatedSortedMap0.tailMap(""b)ieZcB<Rhu"");
}"
1464,"    public SortedMap<K, V> subMap(final K fromKey, final K toKey) {
        final SortedMap<K, V> map = getSortedMap().subMap(fromKey, toKey);
        return new PredicatedSortedMap<>(map, keyPredicate, valuePredicate);
    }","  public void test1()  throws Throwable  {
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(org.apache.commons.collections4.functors.InstanceofPredicate.class) , any(org.apache.commons.collections4.functors.InstanceofPredicate.class));
      TreeMap<InstanceofPredicate, Integer> treeMap0 = new TreeMap<InstanceofPredicate, Integer>(comparator0);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<InstanceofPredicate> predicate0 = EqualPredicate.equalPredicate(instanceofPredicate0);
      PredicatedSortedMap<InstanceofPredicate, Integer> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<InstanceofPredicate, Integer>) treeMap0, (Predicate<? super InstanceofPredicate>) predicate0, (Predicate<? super Integer>) instanceofPredicate0);
      SortedMap<InstanceofPredicate, Integer> sortedMap0 = predicatedSortedMap0.subMap((InstanceofPredicate) null, instanceofPredicate0);
}"
1465,"    public SortedMap<K, V> subMap(final K fromKey, final K toKey) {
        final SortedMap<K, V> map = getSortedMap().subMap(fromKey, toKey);
        return new PredicatedSortedMap<>(map, keyPredicate, valuePredicate);
    }","  public void test2()  throws Throwable  {
      TreeMap<String, InstanceofPredicate> treeMap0 = new TreeMap<String, InstanceofPredicate>();
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      PredicatedSortedMap<String, InstanceofPredicate> predicatedSortedMap0 = new PredicatedSortedMap<String, InstanceofPredicate>(treeMap0, predicate0, predicate0);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      treeMap0.put("""", instanceofPredicate0);
      SortedMap<String, InstanceofPredicate> sortedMap0 = predicatedSortedMap0.subMap("""", ""org.apache.commons.collections4.functors.NullPredicate"");
}"
1466,"    public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map,
            final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate) {
        return new PredicatedSortedMap<>(map, keyPredicate, valuePredicate);
    }","  public void test3()  throws Throwable  {
      TreeMap<String, Integer> treeMap0 = new TreeMap<String, Integer>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Integer integer0 = new Integer((-2388));
      treeMap0.put("""", integer0);
      PredicatedSortedMap<String, Integer> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<String, Integer>) treeMap0, (Predicate<? super String>) uniquePredicate0, (Predicate<? super Integer>) uniquePredicate0);
}"
1467,"    public SortedMap<K, V> headMap(final K toKey) {
        final SortedMap<K, V> map = getSortedMap().headMap(toKey);
        return new PredicatedSortedMap<>(map, keyPredicate, valuePredicate);
    }","  public void test4()  throws Throwable  {
      TreeMap<String, Integer> treeMap0 = new TreeMap<String, Integer>();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer(""m}zi_M.b( ?<Em8"", (Class<?>[]) classArray0, (Object[]) classArray0);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      TransformedPredicate<String> transformedPredicate0 = new TransformedPredicate<String>(transformer0, instanceofPredicate0);
      PredicatedSortedMap<String, Integer> predicatedSortedMap0 = new PredicatedSortedMap<String, Integer>(treeMap0, transformedPredicate0, instanceofPredicate0);
      SortedMap<String, Integer> sortedMap0 = predicatedSortedMap0.headMap(""m}zi_M.b( ?<Em8"");
}"
1468,"    protected SortedMap<K, V> getSortedMap() {
        return (SortedMap<K, V>) map;
    }","  public void test5()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      PredicatedSortedMap<String, Object> predicatedSortedMap0 = new PredicatedSortedMap<String, Object>(treeMap0, predicate0, predicate0);
      PredicatedSortedMap<String, Object> predicatedSortedMap1 = new PredicatedSortedMap<String, Object>(predicatedSortedMap0, predicate0, predicate0);
      SortedMap<String, Object> sortedMap0 = predicatedSortedMap1.getSortedMap();
}"
1469,"    public SortedMap<K, V> tailMap(final K fromKey) {
        final SortedMap<K, V> map = getSortedMap().tailMap(fromKey);
        return new PredicatedSortedMap<>(map, keyPredicate, valuePredicate);
    }","  public void test6()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      TreeMap<Object, Transformer<Boolean, Integer>> treeMap0 = new TreeMap<Object, Transformer<Boolean, Integer>>();
      PredicatedSortedMap<Object, Transformer<Boolean, Integer>> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<Object, Transformer<Boolean, Integer>>) treeMap0, (Predicate<? super Object>) predicate0, (Predicate<? super Transformer<Boolean, Integer>>) null);
      // Undeclared exception!
      try { 
        predicatedSortedMap0.tailMap((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
1470,"    public SortedMap<K, V> tailMap(final K fromKey) {
        final SortedMap<K, V> map = getSortedMap().tailMap(fromKey);
        return new PredicatedSortedMap<>(map, keyPredicate, valuePredicate);
    }","  public void test7()  throws Throwable  {
      TreeMap<InstanceofPredicate, Transformer<Object, Boolean>> treeMap0 = new TreeMap<InstanceofPredicate, Transformer<Object, Boolean>>();
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 4);
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("""", classArray0, classArray0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(invokerTransformer0, predicate0);
      PredicatedSortedMap<InstanceofPredicate, Transformer<Object, Boolean>> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<InstanceofPredicate, Transformer<Object, Boolean>>) treeMap0, (Predicate<? super InstanceofPredicate>) transformedPredicate0, (Predicate<? super Transformer<Object, Boolean>>) transformedPredicate0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        predicatedSortedMap0.tailMap(instanceofPredicate0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.InstanceofPredicate cannot be cast to java.lang.Comparable
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
1471,"    public SortedMap<K, V> subMap(final K fromKey, final K toKey) {
        final SortedMap<K, V> map = getSortedMap().subMap(fromKey, toKey);
        return new PredicatedSortedMap<>(map, keyPredicate, valuePredicate);
    }","  public void test8()  throws Throwable  {
      TreeMap<Integer, InstanceofPredicate> treeMap0 = new TreeMap<Integer, InstanceofPredicate>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      PredicatedSortedMap<Integer, InstanceofPredicate> predicatedSortedMap0 = new PredicatedSortedMap<Integer, InstanceofPredicate>(treeMap0, predicate0, predicate0);
      // Undeclared exception!
      try { 
        predicatedSortedMap0.subMap((Integer) null, (Integer) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
1472,"    public SortedMap<K, V> subMap(final K fromKey, final K toKey) {
        final SortedMap<K, V> map = getSortedMap().subMap(fromKey, toKey);
        return new PredicatedSortedMap<>(map, keyPredicate, valuePredicate);
    }","  public void test9()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      predicateArray0[0] = (Predicate<Object>) nullIsTruePredicate0;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      predicateArray0[2] = predicateArray0[1];
      predicateArray0[3] = (Predicate<Object>) equalPredicate0;
      predicateArray0[4] = predicateArray0[3];
      Predicate<String> predicate1 = OnePredicate.onePredicate((Predicate<? super String>[]) predicateArray0);
      PredicatedSortedMap<String, String> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<String, String>) treeMap0, (Predicate<? super String>) predicate1, (Predicate<? super String>) nullIsTruePredicate0);
      // Undeclared exception!
      try { 
        predicatedSortedMap0.subMap(""org.apache.commons.collections4.map.PredicatedSortedMap"", ""RYk$mww/]S~[&gP0]79"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException(""java.util.TreeMap$NavigableSubMap"", e);
      }
  }"
1473,"    public SortedMap<K, V> subMap(final K fromKey, final K toKey) {
        final SortedMap<K, V> map = getSortedMap().subMap(fromKey, toKey);
        return new PredicatedSortedMap<>(map, keyPredicate, valuePredicate);
    }","  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      TreeMap<Predicate<Object>, Object> treeMap0 = new TreeMap<Predicate<Object>, Object>();
      PredicatedSortedMap<Predicate<Object>, Object> predicatedSortedMap0 = new PredicatedSortedMap<Predicate<Object>, Object>(treeMap0, predicate0, predicate0);
      // Undeclared exception!
      try { 
        predicatedSortedMap0.subMap(predicate0, predicate0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.InstanceofPredicate cannot be cast to java.lang.Comparable
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
1474,"    public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map,
            final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate) {
        return new PredicatedSortedMap<>(map, keyPredicate, valuePredicate);
    }","  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        PredicatedSortedMap.predicatedSortedMap((SortedMap<String, String>) null, (Predicate<? super String>) null, (Predicate<? super String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException(""org.apache.commons.collections4.map.AbstractMapDecorator"", e);
      }
  }"
1475,"    public SortedMap<K, V> headMap(final K toKey) {
        final SortedMap<K, V> map = getSortedMap().headMap(toKey);
        return new PredicatedSortedMap<>(map, keyPredicate, valuePredicate);
    }","  public void test12()  throws Throwable  {
      TreeMap<Boolean, Object> treeMap0 = new TreeMap<Boolean, Object>();
      EqualPredicate<Boolean> equalPredicate0 = new EqualPredicate<Boolean>((Boolean) null);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      PredicatedSortedMap<Boolean, Object> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<Boolean, Object>) treeMap0, (Predicate<? super Boolean>) equalPredicate0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        predicatedSortedMap0.headMap((Boolean) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
1476,"    public SortedMap<K, V> headMap(final K toKey) {
        final SortedMap<K, V> map = getSortedMap().headMap(toKey);
        return new PredicatedSortedMap<>(map, keyPredicate, valuePredicate);
    }","  public void test13()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      PredicatedSortedMap<String, Object> predicatedSortedMap0 = new PredicatedSortedMap<String, Object>(treeMap0, predicate0, predicate0);
      predicatedSortedMap0.put("""", (Object) null);
      // Undeclared exception!
      try { 
        predicatedSortedMap0.headMap(""|xZ%t1ik{s"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot add key - Predicate rejected it
         //
         verifyException(""org.apache.commons.collections4.map.PredicatedMap"", e);
      }
  }"
1477,"    protected PredicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate,
            final Predicate<? super V> valuePredicate) {
        super(map, keyPredicate, valuePredicate);
    }","  public void test14()  throws Throwable  {
      TreeMap<String, Integer> treeMap0 = new TreeMap<String, Integer>();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Integer integer0 = new Integer((-3));
      treeMap0.put(""EQUAL"", integer0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer(""m}zi_M.b( ?<Em8"", (Class<?>[]) classArray0, (Object[]) classArray0);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      TransformedPredicate<String> transformedPredicate0 = new TransformedPredicate<String>(transformer0, instanceofPredicate0);
      PredicatedSortedMap<String, Integer> predicatedSortedMap0 = null;
      try {
        predicatedSortedMap0 = new PredicatedSortedMap<String, Integer>(treeMap0, transformedPredicate0, instanceofPredicate0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'm}zi_M.b( ?<Em8' on 'class java.lang.String' does not exist
         //
         verifyException(""org.apache.commons.collections4.functors.InvokerTransformer"", e);
      }
  }"
1478,"    protected PredicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate,
            final Predicate<? super V> valuePredicate) {
        super(map, keyPredicate, valuePredicate);
    }","  public void test15()  throws Throwable  {
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      PredicatedSortedMap<Object, Object> predicatedSortedMap0 = null;
      try {
        predicatedSortedMap0 = new PredicatedSortedMap<Object, Object>((SortedMap<Object, Object>) null, (Predicate<? super Object>) null, equalPredicate0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException(""org.apache.commons.collections4.map.AbstractMapDecorator"", e);
      }
  }"
1479,"    protected PredicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate,
            final Predicate<? super V> valuePredicate) {
        super(map, keyPredicate, valuePredicate);
    }","  public void test16()  throws Throwable  {
      TreeMap<String, Integer> treeMap0 = new TreeMap<String, Integer>();
      Predicate<String> predicate0 = NullPredicate.nullPredicate();
      Integer integer0 = new Integer(0);
      treeMap0.put("""", integer0);
      NullIsTruePredicate<String> nullIsTruePredicate0 = new NullIsTruePredicate<String>(predicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(nullIsTruePredicate0, comparator0, comparatorPredicate_Criterion0);
      PredicatedSortedMap<String, Integer> predicatedSortedMap0 = null;
      try {
        predicatedSortedMap0 = new PredicatedSortedMap<String, Integer>(treeMap0, nullIsTruePredicate0, comparatorPredicate0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot add key - Predicate rejected it
         //
         verifyException(""org.apache.commons.collections4.map.PredicatedMap"", e);
      }
  }"
1480,"    public Comparator<? super K> comparator() {
        return getSortedMap().comparator();
    }","  public void test17()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      PredicatedSortedMap<String, Object> predicatedSortedMap0 = new PredicatedSortedMap<String, Object>(treeMap0, (Predicate<? super String>) null, (Predicate<? super Object>) null);
      Comparator<? super String> comparator0 = predicatedSortedMap0.comparator();
}"
1481,"    public K firstKey() {
        return getSortedMap().firstKey();
    }","  public void test18()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(onePredicate0, onePredicate0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      PredicatedSortedMap<String, Object> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<String, Object>) treeMap0, (Predicate<? super String>) allPredicate0, (Predicate<? super Object>) andPredicate0);
      // Undeclared exception!
      try { 
        predicatedSortedMap0.firstKey();
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
1482,"    public K lastKey() {
        return getSortedMap().lastKey();
    }","  public void test19()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      TreeMap<InstanceofPredicate, InstanceofPredicate> treeMap0 = new TreeMap<InstanceofPredicate, InstanceofPredicate>();
      PredicatedSortedMap<InstanceofPredicate, InstanceofPredicate> predicatedSortedMap0 = new PredicatedSortedMap<InstanceofPredicate, InstanceofPredicate>(treeMap0, (Predicate<? super InstanceofPredicate>) null, instanceofPredicate0);
      // Undeclared exception!
      try { 
        predicatedSortedMap0.lastKey();
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
1483,"    public SortedMap<K, V> headMap(final K toKey) {
        final SortedMap<K, V> map = getSortedMap().headMap(toKey);
        return new PredicatedSortedMap<>(map, keyPredicate, valuePredicate);
    }","  public void test20()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      TreeMap<Object, Boolean> treeMap0 = new TreeMap<Object, Boolean>();
      PredicatedSortedMap<Object, Boolean> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<Object, Boolean>) treeMap0, (Predicate<? super Object>) predicate0, (Predicate<? super Boolean>) predicate0);
      // Undeclared exception!
      try { 
        predicatedSortedMap0.headMap(predicate0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.FalsePredicate cannot be cast to java.lang.Comparable
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
1484,"    public HashedMap<K, V> clone() {
        return (HashedMap<K, V>) super.clone();
    }","  public void test0()  throws Throwable  {
      int int0 = 12;
      HashedMap<Integer, HashedMap<Integer, String>> hashedMap0 = new HashedMap<Integer, HashedMap<Integer, String>>(12);
      HashedMap<String, String> hashedMap1 = new HashedMap<String, String>();
      HashedMap<String, String> hashedMap2 = hashedMap1.clone();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""IIpX'Z^KcO|XG"").when(biFunction0).apply(any() , anyString());
      hashedMap1.compute(""tLeJ/^*"", biFunction0);
      AbstractHashedMap<Object, Integer> abstractHashedMap0 = new AbstractHashedMap<Object, Integer>(12);
      HashedMap<Object, Integer> hashedMap3 = new HashedMap<Object, Integer>(abstractHashedMap0);
      int int1 = (-3866);
      Integer integer0 = new Integer((-3866));
      abstractHashedMap0.put(hashedMap2, integer0);
      HashedMap<Object, Integer> hashedMap4 = hashedMap3.clone();
      hashedMap4.clone();
      hashedMap2.clone();
      HashedMap<Integer, HashedMap<Object, String>> hashedMap5 = new HashedMap<Integer, HashedMap<Object, String>>();
      hashedMap5.data = null;
      // Undeclared exception!
      try { 
        hashedMap5.clone();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.map.AbstractHashedMap"", e);
      }
  }"
1485,"    public HashedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test1()  throws Throwable  {
      HashedMap<String, HashedMap<String, Object>> hashedMap0 = new HashedMap<String, HashedMap<String, Object>>(1073741824);
  }"
1486,"    public HashedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test2()  throws Throwable  {
      int int0 = 1073741824;
      HashedMap<HashedMap<String, Object>, String> hashedMap0 = new HashedMap<HashedMap<String, Object>, String>(1073741824, 1073741824);
  }"
1487,"    public HashedMap<K, V> clone() {
        return (HashedMap<K, V>) super.clone();
    }","  public void test3()  throws Throwable  {
      HashedMap<Object, HashedMap<String, Object>> hashedMap0 = new HashedMap<Object, HashedMap<String, Object>>(0);
      HashedMap<String, Object> hashedMap1 = new HashedMap<String, Object>();
      hashedMap0.addMapping(0, 0, (Object) null, hashedMap1);
      HashedMap<Object, HashedMap<String, Object>> hashedMap2 = hashedMap0.clone();
}"
1488,"    public HashedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test4()  throws Throwable  {
      int int0 = 1568;
      HashedMap<Object, String> hashedMap0 = new HashedMap<Object, String>(1568);
      HashedMap<Object, Integer> hashedMap1 = null;
      try {
        hashedMap1 = new HashedMap<Object, Integer>((Map<?, ? extends Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.map.AbstractHashedMap"", e);
      }
  }"
1489,"    public HashedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test5()  throws Throwable  {
      HashedMap<String, Object> hashedMap0 = null;
      try {
        hashedMap0 = new HashedMap<String, Object>(0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException(""org.apache.commons.collections4.map.AbstractHashedMap"", e);
      }
  }"
1490,"    public HashedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test6()  throws Throwable  {
      HashedMap<Object, Object> hashedMap0 = new HashedMap<Object, Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashedMap0.replaceAll(biFunction0);
      hashedMap0.threshold = 0;
      hashedMap0.clone();
      HashedMap<String, String> hashedMap1 = new HashedMap<String, String>();
      hashedMap1.clone();
      HashedMap<String, Object> hashedMap2 = null;
      try {
        hashedMap2 = new HashedMap<String, Object>((-2223));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException(""org.apache.commons.collections4.map.AbstractHashedMap"", e);
      }
  }"
1491,"    public HashedMap<K, V> clone() {
        return (HashedMap<K, V>) super.clone();
    }","  public void test7()  throws Throwable  {
      HashedMap<Integer, Object> hashedMap0 = new HashedMap<Integer, Object>(12, 12);
      HashedMap<Object, Object> hashedMap1 = new HashedMap<Object, Object>(hashedMap0);
      HashedMap<Object, Object> hashedMap2 = hashedMap1.clone();
}"
1492,"    public HashedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test8()  throws Throwable  {
      HashedMap<Integer, String> hashedMap0 = new HashedMap<Integer, String>(1007);
}"
1493,"    public HashedMap<K, V> clone() {
        return (HashedMap<K, V>) super.clone();
    }","  public void test9()  throws Throwable  {
      HashedMap<HashedMap<Object, String>, String> hashedMap0 = new HashedMap<HashedMap<Object, String>, String>();
      HashedMap<String, Integer> hashedMap1 = new HashedMap<String, Integer>();
      HashedMap<String, Integer> hashedMap2 = hashedMap1.clone();
}"
1494,"    public HashedMap() {
        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);
    }","  public void test10()  throws Throwable  {
      HashedMap<HashedMap<Object, Object>, Object> hashedMap0 = new HashedMap<HashedMap<Object, Object>, Object>();
}"
1495,"    public boolean isEmpty() {
        return decorated().isEmpty();
    }","  public void test0()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FixedSizeList<String> fixedSizeList0 = FixedSizeList.fixedSizeList((List<String>) linkedList0);
      List<String> list0 = fixedSizeList0.subList(0, 0);
}"
1496,"    public ListIterator<E> listIterator() {
        return decorated().listIterator();
    }","  public void test1()  throws Throwable  {
      GrowthList<Boolean> growthList0 = new GrowthList<Boolean>(0);
      ListIterator<Boolean> listIterator0 = growthList0.listIterator(0);
}"
1497,"    public boolean contains(final Object object) {
        return decorated().contains(object);
    }","  public void test2()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>(0);
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) growthList0);
      Integer integer0 = new Integer(0);
      setUniqueList0.add(0, integer0);
}"
1498,"    public E remove(final int index) {
        return decorated().remove(index);
    }","  public void test3()  throws Throwable  {
      GrowthList<String> growthList0 = new GrowthList<String>();
      growthList0.add((String) null);
      String string0 = growthList0.remove(0);
}"
1499,"    public E remove(final int index) {
        return decorated().remove(index);
    }","  public void test4()  throws Throwable  {
      GrowthList<LinkedList<String>> growthList0 = new GrowthList<LinkedList<String>>(0);
      GrowthList<Object> growthList1 = new GrowthList<Object>();
      Factory<Integer> factory0 = ExceptionFactory.exceptionFactory();
      growthList1.add((Object) growthList0);
      LazyList<Object> lazyList0 = LazyList.lazyList((List<Object>) growthList1, (Factory<?>) factory0);
      Object object0 = lazyList0.remove(0);
}"
1500,"    public E get(final int index) {
        return decorated().get(index);
    }","  public void test5()  throws Throwable  {
      GrowthList<String> growthList0 = new GrowthList<String>();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("""");
      LazyList<String> lazyList0 = new LazyList<String>(growthList0, constantFactory0);
      String string0 = lazyList0.get(1);
}"
1501,"    public boolean isEmpty() {
        return decorated().isEmpty();
    }","  public void test6()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      SetUniqueList<String> setUniqueList0 = new SetUniqueList<String>(linkedList0, linkedHashSet0);
      setUniqueList0.add((String) null);
      List<String> list0 = setUniqueList0.decorated();
}"
1502,"    public int size() {
        return decorated().size();
    }","  public void test7()  throws Throwable  {
      GrowthList<LinkedList<Object>> growthList0 = new GrowthList<LinkedList<Object>>();
      List<LinkedList<Object>> list0 = growthList0.decorated();
}"
1503,"    public boolean addAll(final int index, final Collection<? extends E> coll) {
        return decorated().addAll(index, coll);
    }","  public void test8()  throws Throwable  {
      GrowthList<InstanceofPredicate> growthList0 = new GrowthList<InstanceofPredicate>();
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      growthList0.add(instanceofPredicate0);
      FixedSizeList<InstanceofPredicate> fixedSizeList0 = new FixedSizeList<InstanceofPredicate>(growthList0);
      boolean boolean0 = growthList0.addAll(0, (Collection<? extends InstanceofPredicate>) fixedSizeList0);
}"
1504,"    public boolean addAll(final int index, final Collection<? extends E> coll) {
        return decorated().addAll(index, coll);
    }","  public void test9()  throws Throwable  {
      GrowthList<Object> growthList0 = new GrowthList<Object>();
      boolean boolean0 = growthList0.addAll(0, (Collection<?>) growthList0);
}"
1505,"    public List<E> subList(final int fromIndex, final int toIndex) {
        return decorated().subList(fromIndex, toIndex);
    }","  public void test10()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>(0);
      // Undeclared exception!
      try { 
        growthList0.subList(0, (-121));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-121)
         //
         verifyException(""java.util.ArrayList"", e);
      }
  }"
1506,"    public E set(final int index, final E object) {
        return decorated().set(index, object);
    }","  public void test11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnmodifiableList<String> unmodifiableList0 = new UnmodifiableList<String>(linkedList0);
      // Undeclared exception!
      try { 
        unmodifiableList0.set(170, ""8hk]h q9d-Mv"");
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.list.UnmodifiableList"", e);
      }
  }"
1507,"    public E set(final int index, final E object) {
        return decorated().set(index, object);
    }","  public void test12()  throws Throwable  {
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      SetUniqueList<Predicate<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<Predicate<Object>>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.set(2887, instanceofPredicate0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2887, Size: 0
         //
         verifyException(""java.util.LinkedList"", e);
      }
  }"
1508,"    public E set(final int index, final E object) {
        return decorated().set(index, object);
    }","  public void test13()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>();
      Integer integer0 = new Integer((-1621));
      // Undeclared exception!
      try { 
        growthList0.set((-1621), integer0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1509,"    public E remove(final int index) {
        return decorated().remove(index);
    }","  public void test14()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>();
      // Undeclared exception!
      try { 
        growthList0.remove((-1));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1510,"    public E get(final int index) {
        return decorated().get(index);
    }","  public void test15()  throws Throwable  {
      GrowthList<Predicate<Object>> growthList0 = new GrowthList<Predicate<Object>>(1);
      SetUniqueList<Predicate<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<Predicate<Object>>) growthList0);
      // Undeclared exception!
      try { 
        setUniqueList0.get(0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException(""java.util.ArrayList"", e);
      }
  }"
1511,"    public boolean addAll(final int index, final Collection<? extends E> coll) {
        return decorated().addAll(index, coll);
    }","  public void test16()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      GrowthList<InstanceofPredicate> growthList0 = GrowthList.growthList((List<InstanceofPredicate>) linkedList0);
      FixedSizeList<InstanceofPredicate> fixedSizeList0 = FixedSizeList.fixedSizeList((List<InstanceofPredicate>) growthList0);
      // Undeclared exception!
      try { 
        fixedSizeList0.addAll((-2350), (Collection<? extends InstanceofPredicate>) linkedList0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // List is fixed size
         //
         verifyException(""org.apache.commons.collections4.list.FixedSizeList"", e);
      }
  }"
1512,"    public boolean addAll(final int index, final Collection<? extends E> coll) {
        return decorated().addAll(index, coll);
    }","  public void test17()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>(0);
      // Undeclared exception!
      try { 
        growthList0.addAll(0, (Collection<? extends Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.ArrayList"", e);
      }
  }"
1513,"    public boolean addAll(final int index, final Collection<? extends E> coll) {
        return decorated().addAll(index, coll);
    }","  public void test18()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GrowthList<Integer> growthList0 = new GrowthList<Integer>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, linkedHashSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.addAll(1527, (Collection<?>) growthList0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1527, Size: 0
         //
         verifyException(""java.util.LinkedList"", e);
      }
  }"
1514,"    public void add(final int index, final E object) {
        decorated().add(index, object);
    }","  public void test19()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      SetUniqueList<String> setUniqueList0 = new SetUniqueList<String>(linkedList0, linkedHashSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.add((-2690), (String) null);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2690, Size: 0
         //
         verifyException(""java.util.LinkedList"", e);
      }
  }"
1515,"    public int hashCode() {
        return decorated().hashCode();
    }","  public void test20()  throws Throwable  {
      LinkedList<Closure<Integer>> linkedList0 = new LinkedList<Closure<Integer>>();
      GrowthList<Closure<Integer>> growthList0 = new GrowthList<Closure<Integer>>(linkedList0);
      growthList0.hashCode();
  }"
1516,"    public E remove(final int index) {
        return decorated().remove(index);
    }","  public void test21()  throws Throwable  {
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      LinkedHashSet<Closure<Object>> linkedHashSet0 = new LinkedHashSet<Closure<Object>>();
      SetUniqueList<Closure<Object>> setUniqueList0 = new SetUniqueList<Closure<Object>>(linkedList0, linkedHashSet0);
      GrowthList<Closure<Object>> growthList0 = GrowthList.growthList((List<Closure<Object>>) setUniqueList0);
      // Undeclared exception!
      try { 
        growthList0.remove(3672);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3672, Size: 0
         //
         verifyException(""java.util.LinkedList"", e);
      }
  }"
1517,,"  public void test0()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      UnmodifiableList<Integer> unmodifiableList0 = new UnmodifiableList<Integer>(linkedList0);
  }"
1518,"    protected FixedSizeList(final List<E> list) {
        super(list);
    }","  public void test0()  throws Throwable  {
      FixedSizeList<Object> fixedSizeList0 = null;
      try {
        fixedSizeList0 = new FixedSizeList<Object>((List<Object>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.AbstractCollectionDecorator"", e);
      }
  }"
1519,"    public static <E> FixedSizeList<E> fixedSizeList(final List<E> list) {
        return new FixedSizeList<>(list);
    }","  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        FixedSizeList.fixedSizeList((List<Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.AbstractCollectionDecorator"", e);
      }
  }"
1520,"    protected Node<E> createNode(final E value) {
        final Node<E> cachedNode = getNodeFromCache();
        if (cachedNode == null) {
            return super.createNode(value);
        }
        cachedNode.setValue(value);
        return cachedNode;
    }","  public void test0()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(499);
      nodeCachingLinkedList0.isCacheFull();
      NodeCachingLinkedList<Object> nodeCachingLinkedList1 = new NodeCachingLinkedList<Object>(1231);
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>((AbstractLinkedList.Node<Object>) null, (AbstractLinkedList.Node<Object>) null, (Object) null);
      nodeCachingLinkedList1.addNodeToCache(abstractLinkedList_Node0);
      nodeCachingLinkedList1.createNode((Object) null);
  }"
1521,"    public NodeCachingLinkedList() {
        this(DEFAULT_MAXIMUM_CACHE_SIZE);
    }","  public void test1()  throws Throwable  {
      CursorableLinkedList<Locale.LanguageRange> cursorableLinkedList0 = new CursorableLinkedList<Locale.LanguageRange>();
      NodeCachingLinkedList<Locale.LanguageRange> nodeCachingLinkedList0 = new NodeCachingLinkedList<Locale.LanguageRange>(2);
      nodeCachingLinkedList0.toArray();
      AbstractLinkedList.Node<Locale.LanguageRange> abstractLinkedList_Node0 = nodeCachingLinkedList0.header;
      cursorableLinkedList0.removeNode(abstractLinkedList_Node0);
      NodeCachingLinkedList<Locale.LanguageRange> nodeCachingLinkedList1 = null;
      try {
        nodeCachingLinkedList1 = new NodeCachingLinkedList<Locale.LanguageRange>(cursorableLinkedList0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (0) greater than the size of the list (-1).
         //
         verifyException(""org.apache.commons.collections4.list.AbstractLinkedList"", e);
      }
  }"
1522,"    protected void removeAllNodes() {
        // Add the removed nodes to the cache, then remove the rest.
        // We can add them to the cache before removing them, since
        // {@link AbstractLinkedList.removeAllNodes()} removes the
        // nodes by removing references directly from {@link #header}.
        final int numberOfNodesToCache = Math.min(size, maximumCacheSize - cacheSize);
        Node<E> node = header.next;
        for (int currentIndex = 0; currentIndex < numberOfNodesToCache; currentIndex++) {
            final Node<E> oldNode = node;
            node = node.next;
            addNodeToCache(oldNode);
        }
        super.removeAllNodes();
    }","  public void test2()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = nodeCachingLinkedList0.header;
      nodeCachingLinkedList0.addNodeAfter(abstractLinkedList_Node0, abstractLinkedList_Node0);
      nodeCachingLinkedList0.isCacheFull();
      nodeCachingLinkedList0.removeAllNodes();
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      NodeCachingLinkedList<Integer> nodeCachingLinkedList1 = new NodeCachingLinkedList<Integer>(cursorableLinkedList0);
      nodeCachingLinkedList1.removeAllNodes();
  }"
1523,"    protected void shrinkCacheToMaximumSize() {
        // Rich Dougherty: This could be more efficient.
        while (cacheSize > maximumCacheSize) {
            getNodeFromCache();
        }
    }","  public void test3()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>((-5834));
      AbstractLinkedList.Node<String> abstractLinkedList_Node0 = new AbstractLinkedList.Node<String>();
      AbstractLinkedList.Node<String> abstractLinkedList_Node1 = new AbstractLinkedList.Node<String>("""");
      abstractLinkedList_Node0.setPreviousNode(abstractLinkedList_Node1);
      AbstractLinkedList.Node<String> abstractLinkedList_Node2 = nodeCachingLinkedList0.createNode("""");
      abstractLinkedList_Node0.previous = abstractLinkedList_Node2;
      AbstractLinkedList.Node<String> abstractLinkedList_Node3 = abstractLinkedList_Node0.previous;
      nodeCachingLinkedList0.addNodeToCache(abstractLinkedList_Node3);
      NodeCachingLinkedList<Object> nodeCachingLinkedList1 = new NodeCachingLinkedList<Object>(nodeCachingLinkedList0);
      nodeCachingLinkedList1.setMaximumCacheSize(0);
      NodeCachingLinkedList<Integer> nodeCachingLinkedList2 = new NodeCachingLinkedList<Integer>();
      Integer integer0 = new Integer(0);
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node4 = new AbstractLinkedList.Node<Integer>(integer0);
      abstractLinkedList_Node4.setValue(integer0);
      int int0 = 0;
      Integer integer1 = new Integer(0);
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node5 = new AbstractLinkedList.Node<Integer>(abstractLinkedList_Node4, abstractLinkedList_Node4, integer1);
      abstractLinkedList_Node4.next = abstractLinkedList_Node5;
      nodeCachingLinkedList2.addNodeToCache(abstractLinkedList_Node4);
      nodeCachingLinkedList1.shrinkCacheToMaximumSize();
      nodeCachingLinkedList0.removeNode(abstractLinkedList_Node0);
      nodeCachingLinkedList1.spliterator();
      nodeCachingLinkedList2.setMaximumCacheSize(0);
      nodeCachingLinkedList2.getNodeFromCache();
      nodeCachingLinkedList1.getMaximumCacheSize();
      nodeCachingLinkedList0.removeAllNodes();
      // Undeclared exception!
      nodeCachingLinkedList0.shrinkCacheToMaximumSize();
  }"
1524,"    protected Node<E> createNode(final E value) {
        final Node<E> cachedNode = getNodeFromCache();
        if (cachedNode == null) {
            return super.createNode(value);
        }
        cachedNode.setValue(value);
        return cachedNode;
    }","  public void test4()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>();
      nodeCachingLinkedList0.removeNode(abstractLinkedList_Node0);
      nodeCachingLinkedList0.getNodeFromCache();
      NodeCachingLinkedList<String> nodeCachingLinkedList1 = new NodeCachingLinkedList<String>((-221));
      String string0 = "", "";
      nodeCachingLinkedList1.createNode("", "");
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = null;
      try {
        abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(cursorableLinkedList0, (-221), (-221));
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -221
         //
         verifyException(""org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList"", e);
      }
  }"
1525,"    protected void removeAllNodes() {
        // Add the removed nodes to the cache, then remove the rest.
        // We can add them to the cache before removing them, since
        // {@link AbstractLinkedList.removeAllNodes()} removes the
        // nodes by removing references directly from {@link #header}.
        final int numberOfNodesToCache = Math.min(size, maximumCacheSize - cacheSize);
        Node<E> node = header.next;
        for (int currentIndex = 0; currentIndex < numberOfNodesToCache; currentIndex++) {
            final Node<E> oldNode = node;
            node = node.next;
            addNodeToCache(oldNode);
        }
        super.removeAllNodes();
    }","  public void test5()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(2393);
      nodeCachingLinkedList0.getNodeFromCache();
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      NodeCachingLinkedList<Integer> nodeCachingLinkedList1 = new NodeCachingLinkedList<Integer>(cursorableLinkedList0);
      Integer integer0 = new Integer(0);
      nodeCachingLinkedList1.stream();
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Integer>(integer0);
      nodeCachingLinkedList1.addNodeToCache(abstractLinkedList_Node0);
      nodeCachingLinkedList1.removeAllNodes();
  }"
1526,"    protected Node<E> createNode(final E value) {
        final Node<E> cachedNode = getNodeFromCache();
        if (cachedNode == null) {
            return super.createNode(value);
        }
        cachedNode.setValue(value);
        return cachedNode;
    }","  public void test6()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>((-444));
      nodeCachingLinkedList0.removeAllNodes();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>(nodeCachingLinkedList0);
      nodeCachingLinkedList0.addNodeToCache(abstractLinkedList_Node0);
      NodeCachingLinkedList<String> nodeCachingLinkedList1 = new NodeCachingLinkedList<String>();
      nodeCachingLinkedList1.createNode(""org.apache.commons.collections4.list.NodeCachingLinkedList"");
  }"
1527,"    protected boolean isCacheFull() {
        return cacheSize >= maximumCacheSize;
    }","  public void test7()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(0);
      nodeCachingLinkedList0.iterator();
      nodeCachingLinkedList0.shrinkCacheToMaximumSize();
      NodeCachingLinkedList<String> nodeCachingLinkedList1 = new NodeCachingLinkedList<String>(0);
      nodeCachingLinkedList1.isCacheFull();
  }"
1528,"    public void accept(final CommandVisitor<T> visitor) {
        visitor.visitInsertCommand(getObject());
    }","  public void test0()  throws Throwable  {
      InsertCommand<String> insertCommand0 = new InsertCommand<String>("""");
      // Undeclared exception!
      try { 
        insertCommand0.accept((CommandVisitor<String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.sequence.InsertCommand"", e);
      }
  }"
1529,"    public void accept(final CommandVisitor<T> visitor) {
        visitor.visitInsertCommand(getObject());
    }","  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(678);
      InsertCommand<Object> insertCommand0 = new InsertCommand<Object>(integer0);
      CommandVisitor<Object> commandVisitor0 = (CommandVisitor<Object>) mock(CommandVisitor.class, new ViolatedAssumptionAnswer());
      insertCommand0.accept(commandVisitor0);
  }"
1530,"    public abstract void accept(CommandVisitor<T> visitor);

}
","  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(3119);
      DeleteCommand<Integer> deleteCommand0 = new DeleteCommand<Integer>(integer0);
      CommandVisitor<Integer> commandVisitor0 = (CommandVisitor<Integer>) mock(CommandVisitor.class, new ViolatedAssumptionAnswer());
      deleteCommand0.accept(commandVisitor0);
  }"
1531,"    protected T getObject() {
        return object;
    }","  public void test1()  throws Throwable  {
      InsertCommand<String> insertCommand0 = new InsertCommand<String>((String) null);
      String string0 = insertCommand0.getObject();
}"
1532,"    protected T getObject() {
        return object;
    }","  public void test2()  throws Throwable  {
      KeepCommand<String> keepCommand0 = new KeepCommand<String>(""3u|Y\u0001/*-Od7;~"");
      String string0 = keepCommand0.getObject();
}"
1533,"    public abstract void accept(CommandVisitor<T> visitor);

}
","  public void test3()  throws Throwable  {
      DeleteCommand<Object> deleteCommand0 = new DeleteCommand<Object>((Object) null);
      // Undeclared exception!
      try { 
        deleteCommand0.accept((CommandVisitor<Object>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.sequence.DeleteCommand"", e);
      }
  }"
1534,"    public void accept(final CommandVisitor<T> visitor) {
        visitor.visitKeepCommand(getObject());
    }","  public void test0()  throws Throwable  {
      KeepCommand<String> keepCommand0 = new KeepCommand<String>("""");
      // Undeclared exception!
      try { 
        keepCommand0.accept((CommandVisitor<String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.sequence.KeepCommand"", e);
      }
  }"
1535,"    public void accept(final CommandVisitor<T> visitor) {
        visitor.visitKeepCommand(getObject());
    }","  public void test1()  throws Throwable  {
      KeepCommand<Object> keepCommand0 = new KeepCommand<Object>((Object) null);
      CommandVisitor<Object> commandVisitor0 = (CommandVisitor<Object>) mock(CommandVisitor.class, new ViolatedAssumptionAnswer());
      keepCommand0.accept(commandVisitor0);
  }"
1536,"    public void accept(final CommandVisitor<T> visitor) {
        visitor.visitDeleteCommand(getObject());
    }","  public void test0()  throws Throwable  {
      DeleteCommand<Object> deleteCommand0 = new DeleteCommand<Object>(""'AP,&mL6Q;Dm04VZL0"");
      // Undeclared exception!
      try { 
        deleteCommand0.accept((CommandVisitor<Object>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.sequence.DeleteCommand"", e);
      }
  }"
1537,"    public void accept(final CommandVisitor<T> visitor) {
        visitor.visitDeleteCommand(getObject());
    }","  public void test1()  throws Throwable  {
      DeleteCommand<Object> deleteCommand0 = new DeleteCommand<Object>("""");
      CommandVisitor<Object> commandVisitor0 = (CommandVisitor<Object>) mock(CommandVisitor.class, new ViolatedAssumptionAnswer());
      deleteCommand0.accept(commandVisitor0);
  }"
1538,"    public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set,
                                                                 final Predicate<? super E> predicate) {
        return new PredicatedSortedSet<>(set, predicate);
    }","  public void test0()  throws Throwable  {
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        PredicatedSortedSet.predicatedSortedSet((SortedSet<Object>) null, (Predicate<? super Object>) predicate0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.AbstractCollectionDecorator"", e);
      }
  }"
1539,"    protected PredicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate) {
        super(set, predicate);
    }","  public void test1()  throws Throwable  {
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      PredicatedSortedSet<String> predicatedSortedSet0 = null;
      try {
        predicatedSortedSet0 = new PredicatedSortedSet<String>((SortedSet<String>) null, predicate0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.AbstractCollectionDecorator"", e);
      }
  }"
1540,,"  public void test0()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      NavigableSet<String> navigableSet0 = UnmodifiableNavigableSet.unmodifiableNavigableSet((NavigableSet<String>) treeSet0);
      TreeSet<String> treeSet1 = new TreeSet<String>((SortedSet<String>) navigableSet0);
}"
1541,,"  public void test0()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      NavigableSet<String> navigableSet0 = UnmodifiableNavigableSet.unmodifiableNavigableSet((NavigableSet<String>) treeSet0);
      TreeSet<String> treeSet1 = new TreeSet<String>((SortedSet<String>) navigableSet0);
}"
1542,"    protected NavigableSet<E> decorated() {
        return (NavigableSet<E>) super.decorated();
    }","  public void test0()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<String, String> transformer0 = MapTransformer.mapTransformer((Map<? super String, ? extends String>) hashMap0);
      TransformedNavigableSet<String> transformedNavigableSet0 = TransformedNavigableSet.transformingNavigableSet((NavigableSet<String>) treeSet0, (Transformer<? super String, ? extends String>) transformer0);
      NavigableSet<String> navigableSet0 = transformedNavigableSet0.decorated();
}"
1543,"    public NavigableSet<E> tailSet(final E fromElement, final boolean inclusive) {
        final NavigableSet<E> tail = decorated().tailSet(fromElement, inclusive);
        return transformingNavigableSet(tail, transformer);
    }","  public void test1()  throws Throwable  {
      TreeSet<Boolean> treeSet0 = new TreeSet<Boolean>();
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashMap0);
      TransformedNavigableSet<Boolean> transformedNavigableSet0 = TransformedNavigableSet.transformedNavigableSet((NavigableSet<Boolean>) treeSet0, (Transformer<? super Boolean, ? extends Boolean>) transformer0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform(class0);
      NavigableSet<Boolean> navigableSet0 = transformedNavigableSet0.tailSet(boolean0, true);
}"
1544,"    public NavigableSet<E> subSet(final E fromElement, final boolean fromInclusive, final E toElement,
            final boolean toInclusive) {
        final NavigableSet<E> sub = decorated().subSet(fromElement, fromInclusive, toElement, toInclusive);
        return transformingNavigableSet(sub, transformer);
    }","  public void test2()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>(""0^L>:u%!Oc&jc7"", (Class<?>[]) null, (Object[]) null);
      TransformedNavigableSet<Integer> transformedNavigableSet0 = TransformedNavigableSet.transformingNavigableSet((NavigableSet<Integer>) treeSet0, (Transformer<? super Integer, ? extends Integer>) invokerTransformer0);
      Integer integer0 = new Integer(0);
      NavigableSet<Integer> navigableSet0 = transformedNavigableSet0.subSet(integer0, false, integer0, true);
}"
1545,"    public E pollLast() {
        return decorated().pollLast();
    }","  public void test3()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Transformer<Integer, Integer> transformer0 = NOPTransformer.nopTransformer();
      TransformedNavigableSet<Integer> transformedNavigableSet0 = TransformedNavigableSet.transformingNavigableSet((NavigableSet<Integer>) treeSet0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      Integer integer0 = new Integer(3040);
      treeSet0.add(integer0);
      Integer integer1 = transformedNavigableSet0.pollLast();
}"
1546,"    public E lower(final E e) {
        return decorated().lower(e);
    }","  public void test4()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer(0);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      TransformedNavigableSet<Integer> transformedNavigableSet0 = TransformedNavigableSet.transformingNavigableSet((NavigableSet<Integer>) treeSet0, (Transformer<? super Integer, ? extends Integer>) constantTransformer0);
      Integer integer1 = new Integer((-1427));
      treeSet0.add(integer1);
      Integer integer2 = transformedNavigableSet0.lower(integer0);
}"
1547,"    public E floor(final E e) {
        return decorated().floor(e);
    }","  public void test5()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      TransformedNavigableSet<Integer> transformedNavigableSet0 = new TransformedNavigableSet<Integer>(treeSet0, transformer0);
      Integer integer0 = new Integer((-700));
      treeSet0.add(integer0);
      Integer integer1 = transformedNavigableSet0.floor(integer0);
}"
1548,"    public E ceiling(final E e) {
        return decorated().ceiling(e);
    }","  public void test6()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer(""@]~x^R@/-R~\""/"");
      TransformedNavigableSet<Integer> transformedNavigableSet0 = new TransformedNavigableSet<Integer>(treeSet0, transformer0);
      Integer integer0 = new Integer((-292));
      treeSet0.add(integer0);
      Integer integer1 = transformedNavigableSet0.ceiling(integer0);
}"
1549,"    public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set,
            final Transformer<? super E, ? extends E> transformer) {
        return new TransformedNavigableSet<>(set, transformer);
    }","  public void test7()  throws Throwable  {
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 2);
      Transformer<Object, Predicate<Object>> transformer0 = InvokerTransformer.invokerTransformer(""burxV` s+"", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        TransformedNavigableSet.transformingNavigableSet((NavigableSet<Predicate<Object>>) null, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) transformer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.AbstractCollectionDecorator"", e);
      }
  }"
1550,"    public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set,
            final Transformer<? super E, ? extends E> transformer) {

        final TransformedNavigableSet<E> decorated = new TransformedNavigableSet<>(set, transformer);
        if (set.size() > 0) {
            @SuppressWarnings(""unchecked"") // set is type E
            final E[] values = (E[]) set.toArray(); // NOPMD - false positive for generics
            set.clear();
            for (final E value : values) {
                decorated.decorated().add(transformer.transform(value));
            }
        }
        return decorated;
    }","  public void test8()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSet0.add(""CE?a$TxWug:BK2#YD"");
      Transformer<Object, Transformer<Object, Object>> transformer0 = InvokerTransformer.invokerTransformer(""c-"", (Class<?>[]) null, (Object[]) null);
      TransformedNavigableSet<Object> transformedNavigableSet0 = new TransformedNavigableSet<Object>(treeSet0, transformer0);
      // Undeclared exception!
      try { 
        TransformedNavigableSet.transformedNavigableSet((NavigableSet<Object>) transformedNavigableSet0, (Transformer<? super Object, ?>) transformer0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'c-' on 'class java.lang.String' does not exist
         //
         verifyException(""org.apache.commons.collections4.functors.InvokerTransformer"", e);
      }
  }"
1551,"    public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set,
            final Transformer<? super E, ? extends E> transformer) {

        final TransformedNavigableSet<E> decorated = new TransformedNavigableSet<>(set, transformer);
        if (set.size() > 0) {
            @SuppressWarnings(""unchecked"") // set is type E
            final E[] values = (E[]) set.toArray(); // NOPMD - false positive for generics
            set.clear();
            for (final E value : values) {
                decorated.decorated().add(transformer.transform(value));
            }
        }
        return decorated;
    }","  public void test9()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      treeSet0.add(""B"");
      Transformer<String, String> transformer0 = MapTransformer.mapTransformer((Map<? super String, ? extends String>) hashMap0);
      // Undeclared exception!
      try { 
        TransformedNavigableSet.transformedNavigableSet((NavigableSet<String>) treeSet0, (Transformer<? super String, ? extends String>) transformer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1552,"    public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set,
            final Transformer<? super E, ? extends E> transformer) {

        final TransformedNavigableSet<E> decorated = new TransformedNavigableSet<>(set, transformer);
        if (set.size() > 0) {
            @SuppressWarnings(""unchecked"") // set is type E
            final E[] values = (E[]) set.toArray(); // NOPMD - false positive for generics
            set.clear();
            for (final E value : values) {
                decorated.decorated().add(transformer.transform(value));
            }
        }
        return decorated;
    }","  public void test10()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer0, transformer0);
      // Undeclared exception!
      try { 
        TransformedNavigableSet.transformedNavigableSet((NavigableSet<String>) null, (Transformer<? super String, ? extends String>) ifTransformer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.AbstractCollectionDecorator"", e);
      }
  }"
1553,"    public NavigableSet<E> tailSet(final E fromElement, final boolean inclusive) {
        final NavigableSet<E> tail = decorated().tailSet(fromElement, inclusive);
        return transformingNavigableSet(tail, transformer);
    }","  public void test11()  throws Throwable  {
      TreeSet<TreeSet<Object>> treeSet0 = new TreeSet<TreeSet<Object>>();
      Transformer<Object, TreeSet<Object>> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedNavigableSet<TreeSet<Object>> transformedNavigableSet0 = new TransformedNavigableSet<TreeSet<Object>>(treeSet0, transformer0);
      TreeSet<Object> treeSet1 = new TreeSet<Object>((Collection<?>) treeSet0);
      // Undeclared exception!
      try { 
        transformedNavigableSet0.tailSet(treeSet1, false);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.util.TreeSet cannot be cast to java.lang.Comparable
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
1554,"    public NavigableSet<E> subSet(final E fromElement, final boolean fromInclusive, final E toElement,
            final boolean toInclusive) {
        final NavigableSet<E> sub = decorated().subSet(fromElement, fromInclusive, toElement, toInclusive);
        return transformingNavigableSet(sub, transformer);
    }","  public void test12()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedNavigableSet<Object> transformedNavigableSet0 = TransformedNavigableSet.transformingNavigableSet((NavigableSet<Object>) treeSet0, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        transformedNavigableSet0.subSet((Object) null, false, (Object) null, false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
1555,"    public NavigableSet<E> subSet(final E fromElement, final boolean fromInclusive, final E toElement,
            final boolean toInclusive) {
        final NavigableSet<E> sub = decorated().subSet(fromElement, fromInclusive, toElement, toInclusive);
        return transformingNavigableSet(sub, transformer);
    }","  public void test13()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      TransformedNavigableSet<Object> transformedNavigableSet0 = new TransformedNavigableSet<Object>(treeSet0, transformer0);
      Integer integer0 = new Integer((-651));
      // Undeclared exception!
      try { 
        transformedNavigableSet0.subSet((Object) integer0, true, (Object) ""27TKr8@M4la;?4"", true);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Integer
         //
         verifyException(""java.lang.Integer"", e);
      }
  }"
1556,"    public NavigableSet<E> headSet(final E toElement, final boolean inclusive) {
        final NavigableSet<E> head = decorated().headSet(toElement, inclusive);
        return transformingNavigableSet(head, transformer);
    }","  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-316));
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      TransformedNavigableSet<Object> transformedNavigableSet0 = TransformedNavigableSet.transformedNavigableSet((NavigableSet<Object>) treeSet0, (Transformer<? super Object, ?>) constantTransformer0);
      // Undeclared exception!
      try { 
        transformedNavigableSet0.headSet((Object) null, false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
1557,"    public NavigableSet<E> headSet(final E toElement, final boolean inclusive) {
        final NavigableSet<E> head = decorated().headSet(toElement, inclusive);
        return transformingNavigableSet(head, transformer);
    }","  public void test15()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      TransformedNavigableSet<Object> transformedNavigableSet0 = new TransformedNavigableSet<Object>(treeSet0, transformer0);
      // Undeclared exception!
      try { 
        transformedNavigableSet0.headSet((Object) transformer0, false);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.MapTransformer cannot be cast to java.lang.Comparable
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
1558,"    protected TransformedNavigableSet(final NavigableSet<E> set,
                                      final Transformer<? super E, ? extends E> transformer) {
        super(set, transformer);
    }","  public void test16()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer(""24[=oolv$ky9dd[L!"");
      TransformedNavigableSet<Integer> transformedNavigableSet0 = null;
      try {
        transformedNavigableSet0 = new TransformedNavigableSet<Integer>((NavigableSet<Integer>) null, transformer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.AbstractCollectionDecorator"", e);
      }
  }"
1559,"    public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set,
            final Transformer<? super E, ? extends E> transformer) {

        final TransformedNavigableSet<E> decorated = new TransformedNavigableSet<>(set, transformer);
        if (set.size() > 0) {
            @SuppressWarnings(""unchecked"") // set is type E
            final E[] values = (E[]) set.toArray(); // NOPMD - false positive for generics
            set.clear();
            for (final E value : values) {
                decorated.decorated().add(transformer.transform(value));
            }
        }
        return decorated;
    }","  public void test17()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer((-304));
      treeSet0.add(integer0);
      Transformer<Object, Integer> transformer0 = ConstantTransformer.constantTransformer(integer0);
      TransformedNavigableSet<Integer> transformedNavigableSet0 = TransformedNavigableSet.transformingNavigableSet((NavigableSet<Integer>) treeSet0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      TransformedNavigableSet<Integer> transformedNavigableSet1 = TransformedNavigableSet.transformedNavigableSet((NavigableSet<Integer>) transformedNavigableSet0, (Transformer<? super Integer, ? extends Integer>) transformer0);
}"
1560,"    public E ceiling(final E e) {
        return decorated().ceiling(e);
    }","  public void test18()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      TransformedNavigableSet<String> transformedNavigableSet0 = TransformedNavigableSet.transformingNavigableSet((NavigableSet<String>) treeSet0, (Transformer<? super String, ? extends String>) transformer0);
      String string0 = transformedNavigableSet0.ceiling("""");
}"
1561,"    public E floor(final E e) {
        return decorated().floor(e);
    }","  public void test19()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedNavigableSet<Integer> transformedNavigableSet0 = new TransformedNavigableSet<Integer>(treeSet0, transformer0);
      Integer integer0 = new Integer(5);
      Integer integer1 = transformedNavigableSet0.floor(integer0);
}"
1562,"    public NavigableSet<E> descendingSet() {
        return transformingNavigableSet(decorated().descendingSet(), transformer);
    }","  public void test20()  throws Throwable  {
      TreeSet<Closure<Object>> treeSet0 = new TreeSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) treeSet0);
      ConstantTransformer<Object, Closure<Object>> constantTransformer0 = new ConstantTransformer<Object, Closure<Object>>(closure0);
      TransformedNavigableSet<Closure<Object>> transformedNavigableSet0 = TransformedNavigableSet.transformingNavigableSet((NavigableSet<Closure<Object>>) treeSet0, (Transformer<? super Closure<Object>, ? extends Closure<Object>>) constantTransformer0);
      NavigableSet<Closure<Object>> navigableSet0 = transformedNavigableSet0.descendingSet();
}"
1563,"    public E lower(final E e) {
        return decorated().lower(e);
    }","  public void test21()  throws Throwable  {
      TreeSet<Closure<Object>> treeSet0 = new TreeSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) treeSet0);
      ConstantTransformer<Object, Closure<Object>> constantTransformer0 = new ConstantTransformer<Object, Closure<Object>>(closure0);
      TransformedNavigableSet<Closure<Object>> transformedNavigableSet0 = TransformedNavigableSet.transformingNavigableSet((NavigableSet<Closure<Object>>) treeSet0, (Transformer<? super Closure<Object>, ? extends Closure<Object>>) constantTransformer0);
      Closure<Object> closure1 = transformedNavigableSet0.lower(closure0);
}"
1564,"    public E pollLast() {
        return decorated().pollLast();
    }","  public void test22()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      TransformedNavigableSet<String> transformedNavigableSet0 = TransformedNavigableSet.transformingNavigableSet((NavigableSet<String>) treeSet0, (Transformer<? super String, ? extends String>) transformer0);
      String string0 = transformedNavigableSet0.pollLast();
}"
1565,"    public NavigableSet<E> headSet(final E toElement, final boolean inclusive) {
        final NavigableSet<E> head = decorated().headSet(toElement, inclusive);
        return transformingNavigableSet(head, transformer);
    }","  public void test23()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      TransformedNavigableSet<String> transformedNavigableSet0 = TransformedNavigableSet.transformingNavigableSet((NavigableSet<String>) treeSet0, (Transformer<? super String, ? extends String>) transformer0);
      NavigableSet<String> navigableSet0 = transformedNavigableSet0.headSet("""", true);
}"
1566,"    public NavigableSet<E> tailSet(final E fromElement, final boolean inclusive) {
        final NavigableSet<E> tail = decorated().tailSet(fromElement, inclusive);
        return transformingNavigableSet(tail, transformer);
    }","  public void test24()  throws Throwable  {
      TreeSet<Closure<Object>> treeSet0 = new TreeSet<Closure<Object>>();
      Transformer<Object, Closure<Object>> transformer0 = ConstantTransformer.nullTransformer();
      TransformedNavigableSet<Closure<Object>> transformedNavigableSet0 = TransformedNavigableSet.transformingNavigableSet((NavigableSet<Closure<Object>>) treeSet0, (Transformer<? super Closure<Object>, ? extends Closure<Object>>) transformer0);
      // Undeclared exception!
      try { 
        transformedNavigableSet0.tailSet((Closure<Object>) null, false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
1567,"    public NavigableSet<E> subSet(final E fromElement, final boolean fromInclusive, final E toElement,
            final boolean toInclusive) {
        final NavigableSet<E> sub = decorated().subSet(fromElement, fromInclusive, toElement, toInclusive);
        return transformingNavigableSet(sub, transformer);
    }","  public void test25()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Transformer<String, String> transformer0 = StringValueTransformer.stringValueTransformer();
      TransformedNavigableSet<String> transformedNavigableSet0 = TransformedNavigableSet.transformedNavigableSet((NavigableSet<String>) treeSet0, (Transformer<? super String, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        transformedNavigableSet0.subSet(""org.apache.commons.collections4.functors.DefaultEquator"", true, ""SQhy@8|"", true);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException(""java.util.TreeMap$NavigableSubMap"", e);
      }
  }"
1568,"    public Iterator<E> descendingIterator() {
        return decorated().descendingIterator();
    }","  public void test26()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer((-304));
      Transformer<Object, Integer> transformer0 = ConstantTransformer.constantTransformer(integer0);
      TransformedNavigableSet<Integer> transformedNavigableSet0 = TransformedNavigableSet.transformingNavigableSet((NavigableSet<Integer>) treeSet0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      Iterator<Integer> iterator0 = transformedNavigableSet0.descendingIterator();
}"
1569,"    public E pollFirst() {
        return decorated().pollFirst();
    }","  public void test27()  throws Throwable  {
      TreeSet<Closure<Object>> treeSet0 = new TreeSet<Closure<Object>>();
      Transformer<Object, Closure<Object>> transformer0 = ConstantTransformer.nullTransformer();
      TransformedNavigableSet<Closure<Object>> transformedNavigableSet0 = TransformedNavigableSet.transformingNavigableSet((NavigableSet<Closure<Object>>) treeSet0, (Transformer<? super Closure<Object>, ? extends Closure<Object>>) transformer0);
      Closure<Object> closure0 = transformedNavigableSet0.pollFirst();
}"
1570,"    public E higher(final E e) {
        return decorated().higher(e);
    }","  public void test28()  throws Throwable  {
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) treeSet0, comparator0);
      ConstantTransformer<Object, Predicate<Object>> constantTransformer0 = new ConstantTransformer<Object, Predicate<Object>>(predicate0);
      TransformedNavigableSet<Predicate<Object>> transformedNavigableSet0 = TransformedNavigableSet.transformedNavigableSet((NavigableSet<Predicate<Object>>) treeSet0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) constantTransformer0);
      Predicate<Object> predicate1 = transformedNavigableSet0.higher(predicate0);
}"
1571,"    public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set,
                                                                       final Predicate<? super E> predicate) {
        return new PredicatedNavigableSet<>(set, predicate);
    }","  public void test0()  throws Throwable  {
      Predicate<Integer> predicate0 = (Predicate<Integer>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        PredicatedNavigableSet.predicatedNavigableSet((NavigableSet<Integer>) null, (Predicate<? super Integer>) predicate0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.AbstractCollectionDecorator"", e);
      }
  }"
1572,"    protected PredicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate) {
        super(set, predicate);
    }","  public void test1()  throws Throwable  {
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      PredicatedNavigableSet<Integer> predicatedNavigableSet0 = null;
      try {
        predicatedNavigableSet0 = new PredicatedNavigableSet<Integer>((NavigableSet<Integer>) null, predicate0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.AbstractCollectionDecorator"", e);
      }
  }"
1573,"    protected Set<E> decorated() {
        return (Set<E>) super.decorated();
    }","  public void test0()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      PredicatedSet<String> predicatedSet0 = PredicatedSet.predicatedSet((Set<String>) linkedHashSet0, (Predicate<? super String>) nullIsFalsePredicate0);
      Set<String> set0 = predicatedSet0.decorated();
}"
1574,"    protected Set<E> decorated() {
        return (Set<E>) super.decorated();
    }","  public void test1()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      linkedHashSet0.add(""b"");
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) linkedHashSet0, comparator0);
      PredicatedSet<String> predicatedSet0 = new PredicatedSet<String>(linkedHashSet0, predicate0);
      Set<String> set0 = predicatedSet0.decorated();
}"
1575,"    public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate) {
        return new PredicatedSet<>(set, predicate);
    }","  public void test2()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>(""GREATER"", classArray0, classArray0);
      Integer integer0 = new Integer((-2751));
      linkedHashSet0.add(integer0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(invokerTransformer0);
      // Undeclared exception!
      try { 
        PredicatedSet.predicatedSet((Set<Integer>) linkedHashSet0, (Predicate<? super Integer>) transformerPredicate0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'GREATER' on 'class java.lang.Integer' does not exist
         //
         verifyException(""org.apache.commons.collections4.functors.InvokerTransformer"", e);
      }
  }"
1576,"    public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate) {
        return new PredicatedSet<>(set, predicate);
    }","  public void test3()  throws Throwable  {
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      LinkedHashSet<Predicate<String>> linkedHashSet0 = new LinkedHashSet<Predicate<String>>();
      DefaultEquator<String> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<String> equalPredicate1 = new EqualPredicate<String>("""", defaultEquator0);
      linkedHashSet0.add(equalPredicate1);
      // Undeclared exception!
      try { 
        PredicatedSet.predicatedSet((Set<Predicate<String>>) linkedHashSet0, (Predicate<? super Predicate<String>>) equalPredicate0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.functors.EqualPredicate"", e);
      }
  }"
1577,,"  public void test0()  throws Throwable  {
      ListOrderedSet<LinkedList<Object>> listOrderedSet0 = new ListOrderedSet<LinkedList<Object>>();
  }"
1578,"    protected SortedSet<E> getSortedSet() {
        return (SortedSet<E>) decorated();
    }","  public void test0()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      LinkedHashSet<Transformer<Object, Integer>> linkedHashSet0 = new LinkedHashSet<Transformer<Object, Integer>>();
      Transformer<Integer, Integer> transformer0 = ChainedTransformer.chainedTransformer((Collection<? extends Transformer<? super Integer, ? extends Integer>>) linkedHashSet0);
      TransformedSortedSet<Integer> transformedSortedSet0 = TransformedSortedSet.transformedSortedSet((SortedSet<Integer>) treeSet0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      SortedSet<Integer> sortedSet0 = transformedSortedSet0.getSortedSet();
}"
1579,"    public SortedSet<E> tailSet(final E fromElement) {
        final SortedSet<E> set = getSortedSet().tailSet(fromElement);
        return new TransformedSortedSet<>(set, transformer);
    }","  public void test1()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      TransformedSortedSet<String> transformedSortedSet0 = TransformedSortedSet.transformedSortedSet((SortedSet<String>) treeSet0, (Transformer<? super String, ? extends String>) transformer0);
      SortedSet<String> sortedSet0 = transformedSortedSet0.tailSet(""W:=u&^XDKc$3&*_p"");
}"
1580,"    public SortedSet<E> subSet(final E fromElement, final E toElement) {
        final SortedSet<E> set = getSortedSet().subSet(fromElement, toElement);
        return new TransformedSortedSet<>(set, transformer);
    }","  public void test2()  throws Throwable  {
      TreeSet<Boolean> treeSet0 = new TreeSet<Boolean>();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer(""org.apache.commons.collections4.set.TransformedSortedSet"", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformedSortedSet<Boolean> transformedSortedSet0 = TransformedSortedSet.transformedSortedSet((SortedSet<Boolean>) treeSet0, (Transformer<? super Boolean, ? extends Boolean>) transformer0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<String> predicate0 = ComparatorPredicate.comparatorPredicate("""", comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      PredicateTransformer<String> predicateTransformer0 = new PredicateTransformer<String>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform(""org.apache.commons.collections4.set.TransformedSortedSet"");
      SortedSet<Boolean> sortedSet0 = transformedSortedSet0.subSet(boolean0, boolean0);
}"
1581,"    public E last() {
        return getSortedSet().last();
    }","  public void test3()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      treeSet0.add("""");
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      TransformedSortedSet<String> transformedSortedSet0 = new TransformedSortedSet<String>(treeSet0, transformer0);
      String string0 = transformedSortedSet0.last();
}"
1582,"    public E first() {
        return getSortedSet().first();
    }","  public void test4()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("""");
      treeSet0.add("""");
      TransformedSortedSet<String> transformedSortedSet0 = TransformedSortedSet.transformingSortedSet((SortedSet<String>) treeSet0, (Transformer<? super String, ? extends String>) transformer0);
      String string0 = transformedSortedSet0.first();
}"
1583,"    public Comparator<? super E> comparator() {
        return getSortedSet().comparator();
    }","  public void test5()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      TreeSet<Object> treeSet0 = new TreeSet<Object>(comparator0);
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedSortedSet<Object> transformedSortedSet0 = new TransformedSortedSet<Object>(treeSet0, transformer0);
      Comparator<? super Object> comparator1 = transformedSortedSet0.comparator();
}"
1584,"    public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set,
            final Transformer<? super E, ? extends E> transformer) {
        return new TransformedSortedSet<>(set, transformer);
    }","  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransformedSortedSet.transformingSortedSet((SortedSet<Boolean>) null, (Transformer<? super Boolean, ? extends Boolean>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.AbstractCollectionDecorator"", e);
      }
  }"
1585,"    public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set,
            final Transformer<? super E, ? extends E> transformer) {

        final TransformedSortedSet<E> decorated = new TransformedSortedSet<>(set, transformer);
        if (set.size() > 0) {
            @SuppressWarnings(""unchecked"") // set is type E
            final E[] values = (E[]) set.toArray(); // NOPMD - false positive for generics
            set.clear();
            for (final E value : values) {
                decorated.decorated().add(transformer.transform(value));
            }
        }
        return decorated;
    }","  public void test7()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      Integer integer0 = new Integer(894);
      treeSet0.add(integer0);
      // Undeclared exception!
      try { 
        TransformedSortedSet.transformedSortedSet((SortedSet<Integer>) treeSet0, (Transformer<? super Integer, ? extends Integer>) transformer0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException(""org.apache.commons.collections4.functors.ExceptionTransformer"", e);
      }
  }"
1586,"    public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set,
            final Transformer<? super E, ? extends E> transformer) {

        final TransformedSortedSet<E> decorated = new TransformedSortedSet<>(set, transformer);
        if (set.size() > 0) {
            @SuppressWarnings(""unchecked"") // set is type E
            final E[] values = (E[]) set.toArray(); // NOPMD - false positive for generics
            set.clear();
            for (final E value : values) {
                decorated.decorated().add(transformer.transform(value));
            }
        }
        return decorated;
    }","  public void test8()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      treeSet0.add("""");
      ChainedTransformer<String> chainedTransformer0 = new ChainedTransformer<String>((Transformer<? super String, ? extends String>[]) null);
      // Undeclared exception!
      try { 
        TransformedSortedSet.transformedSortedSet((SortedSet<String>) treeSet0, (Transformer<? super String, ? extends String>) chainedTransformer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.collections4.functors.ChainedTransformer"", e);
      }
  }"
1587,"    public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set,
            final Transformer<? super E, ? extends E> transformer) {

        final TransformedSortedSet<E> decorated = new TransformedSortedSet<>(set, transformer);
        if (set.size() > 0) {
            @SuppressWarnings(""unchecked"") // set is type E
            final E[] values = (E[]) set.toArray(); // NOPMD - false positive for generics
            set.clear();
            for (final E value : values) {
                decorated.decorated().add(transformer.transform(value));
            }
        }
        return decorated;
    }","  public void test9()  throws Throwable  {
      Transformer<Object, Object> transformer0 = ConstantTransformer.constantTransformer((Object) null);
      // Undeclared exception!
      try { 
        TransformedSortedSet.transformedSortedSet((SortedSet<Object>) null, (Transformer<? super Object, ?>) transformer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException(""org.apache.commons.collections4.collection.AbstractCollectionDecorator"", e);
      }
  }"
1588,"    public SortedSet<E> tailSet(final E fromElement) {
        final SortedSet<E> set = getSortedSet().tailSet(fromElement);
        return new TransformedSortedSet<>(set, transformer);
    }","  public void test10()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 7);
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>(""dP|1v1"", classArray0, classArray0);
      TransformedSortedSet<Integer> transformedSortedSet0 = TransformedSortedSet.transformingSortedSet((SortedSet<Integer>) treeSet0, (Transformer<? super Integer, ? extends Integer>) invokerTransformer0);
      Integer integer0 = new Integer(3);
      SortedSet<Integer> sortedSet0 = transformedSortedSet0.headSet(integer0);
      TransformedSortedSet<Integer> transformedSortedSet1 = TransformedSortedSet.transformedSortedSet(sortedSet0, (Transformer<? super Integer, ? extends Integer>) invokerTransformer0);
      // Undeclared exception!
      try { 
        transformedSortedSet1.tailSet(integer0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // fromKey out of range
         //
         verifyException(""java.util.TreeMap$AscendingSubMap"", e);
      }
  }"
