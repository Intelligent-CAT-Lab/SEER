67571
Test: public void testBaseTypeId1616() throws Exception { ObjectMapper mapper = new ObjectMapper(); Collection<NamedType> subtypes = new StdSubtypeResolver().collectAndResolveSubtypesByTypeId( mapper.getDeserializationConfig(), null, mapper.constructType(Base1616.class)); Set<String> ok = new HashSet<>(Arrays.asList("A", "B")); for (NamedType type : subtypes) { String id = type.getName(); if (!ok.contains(id)) { fail("Unexpected id '"+id+"' (mapping to: "+type.getType()+"), should be one of: "+ok); } } }
Code: public Collection<NamedType> collectAndResolveSubtypesByTypeId(MapperConfig<?> config, AnnotatedMember property, JavaType baseType) { final AnnotationIntrospector ai = config.getAnnotationIntrospector(); Class<?> rawBase = baseType.getRawClass(); Set<Class<?>> typesHandled = new HashSet<Class<?>>(); Map<String,NamedType> byName = new LinkedHashMap<String,NamedType>(); NamedType rootType = new NamedType(rawBase, null); AnnotatedClass ac = AnnotatedClassResolver.resolveWithoutSuperTypes(config, rawBase); ; if (property != null) { Collection<NamedType> st = ai.findSubtypes(property); if (st != null) { for (NamedType nt : st) { ac = AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType()); ; } } } if (true) { for (NamedType subtype : _registeredSubtypes) { if (rawBase.isAssignableFrom(subtype.getType())) { AnnotatedClass curr = AnnotatedClassResolver.resolveWithoutSuperTypes(config, subtype.getType()); ; } } } return _combineNamedAndUnnamed(rawBase, typesHandled, byName); }
tensor([[0.0081, 0.0146, 0.0160,  ..., 0.0070, 0.0100, 0.0037],
        [0.0081, 0.0103, 0.0125,  ..., 0.0074, 0.0084, 0.0030],
        [0.0051, 0.0109, 0.0150,  ..., 0.0055, 0.0069, 0.0025],
        ...,
        [0.0077, 0.0139, 0.0178,  ..., 0.0083, 0.0082, 0.0029],
        [0.0058, 0.0106, 0.0171,  ..., 0.0070, 0.0071, 0.0020],
        [0.0057, 0.0130, 0.0139,  ..., 0.0064, 0.0074, 0.0031]])