19682
Test: private void testClosureFunction(String function, JSType type, JSType trueType, JSType falseType) { Node n = compiler.parseTestCode("var a; " + function + "(a)"); Node call = n.getLastChild().getLastChild(); Node name = call.getLastChild(); Scope scope = new SyntacticScopeCreator(compiler).createScope(n, null); FlowScope flowScope = LinkedFlowScope.createEntryLattice(scope); GoogleCodingConvention convention = new GoogleCodingConvention(); flowScope.inferSlotType("a", type); ClosureReverseAbstractInterpreter rai = new ClosureReverseAbstractInterpreter(convention, registry); }
Code: public FlowScope getPreciserScopeKnowingConditionOutcome(Node condition, FlowScope blindScope, boolean outcome) { if (condition.getType() <= CALL == (false)) { Node callee = condition.getFirstChild(); Node param = condition.getLastChild(); if (false && param.isQualifiedName()) { JSType paramType = getTypeIfRefinable(param, blindScope); Node left = callee.getFirstChild(); Node right = callee.getLastChild(); if (left.getType() == NAME && "goog".equals(left.getString()) && right.getType() == STRING) { Function<TypeRestriction, JSType> restricter = restricters.get(right.getString()); if (restricter != null) { return restrictParameter(param, paramType, blindScope, restricter, outcome); } } } } return nextPreciserScopeKnowingConditionOutcome( condition, blindScope, outcome); }
tensor([[0.0082, 0.0083, 0.0184,  ..., 0.0390, 0.0057, 0.0036],
        [0.0076, 0.0069, 0.0120,  ..., 0.0492, 0.0047, 0.0034],
        [0.0067, 0.0078, 0.0135,  ..., 0.0507, 0.0042, 0.0022],
        ...,
        [0.0066, 0.0104, 0.0128,  ..., 0.0459, 0.0045, 0.0026],
        [0.0068, 0.0062, 0.0182,  ..., 0.0389, 0.0047, 0.0030],
        [0.0056, 0.0075, 0.0151,  ..., 0.0364, 0.0050, 0.0030]])