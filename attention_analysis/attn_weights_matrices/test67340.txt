67340
Test: public void testSimpleNumbers() throws Exception { final StringBuilder sb = new StringBuilder(); MAPPER.acceptJsonFormatVisitor(Numbers.class, new JsonFormatVisitorWrapper.Base() { @Override public JsonObjectFormatVisitor expectObjectFormat(final JavaType type) { return new JsonObjectFormatVisitor.Base(getProvider()) { @Override public void optionalProperty(BeanProperty prop) throws JsonMappingException { sb.append("[optProp ").append(prop.getName()).append("("); JsonSerializer<Object> ser = null; if (prop instanceof BeanPropertyWriter) { BeanPropertyWriter bpw = (BeanPropertyWriter) prop; ser = bpw.getSerializer(); } final SerializerProvider prov = getProvider(); if (ser == null) { ser = prov.findValueSerializer(prop.getType(), prop); } ser.acceptJsonFormatVisitor(new JsonFormatVisitorWrapper.Base() { @Override public JsonNumberFormatVisitor expectNumberFormat( JavaType type) throws JsonMappingException { return new JsonNumberFormatVisitor() { @Override public void format(JsonValueFormat format) { sb.append("[numberFormat=").append(format).append("]"); } @Override public void enumTypes(Set<String> enums) { } @Override public void numberType(NumberType numberType) { sb.append("[numberType=").append(numberType).append("]"); } }; } @Override public JsonIntegerFormatVisitor expectIntegerFormat(JavaType type) throws JsonMappingException { return new JsonIntegerFormatVisitor() { @Override public void format(JsonValueFormat format) { sb.append("[integerFormat=").append(format).append("]"); } @Override public void enumTypes(Set<String> enums) { } @Override public void numberType(NumberType numberType) { sb.append("[numberType=").append(numberType).append("]"); } }; } }, prop.getType()); sb.append(")]"); } }; } }); }
Code: public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint){if (false) {;} else {Class<?> h = handledType();if (h == BigDecimal.class) {;} else {
tensor([[0.0491, 0.0401, 0.0498, 0.0653, 0.0802, 0.0421, 0.0340, 0.0237, 0.0692,
         0.0203, 0.1246, 0.0311, 0.0329, 0.0535, 0.0765, 0.0463, 0.0237, 0.0692,
         0.0687],
        [0.0408, 0.0350, 0.0486, 0.0539, 0.1003, 0.0496, 0.0246, 0.0205, 0.0871,
         0.0154, 0.1331, 0.0327, 0.0245, 0.0489, 0.0595, 0.0498, 0.0205, 0.0871,
         0.0681],
        [0.0371, 0.0326, 0.0550, 0.0616, 0.0794, 0.0423, 0.0349, 0.0255, 0.0686,
         0.0171, 0.1398, 0.0299, 0.0290, 0.0504, 0.0649, 0.0640, 0.0255, 0.0686,
         0.0739],
        [0.0462, 0.0346, 0.0413, 0.0620, 0.0826, 0.0415, 0.0348, 0.0245, 0.0853,
         0.0222, 0.1161, 0.0265, 0.0241, 0.0517, 0.0718, 0.0525, 0.0245, 0.0853,
         0.0725],
        [0.0522, 0.0296, 0.0432, 0.0620, 0.0944, 0.0404, 0.0346, 0.0238, 0.0706,
         0.0195, 0.1091, 0.0314, 0.0236, 0.0479, 0.0783, 0.0575, 0.0238, 0.0706,
         0.0873],
        [0.0447, 0.0432, 0.0485, 0.0577, 0.0835, 0.0470, 0.0328, 0.0295, 0.0826,
         0.0194, 0.1005, 0.0301, 0.0309, 0.0493, 0.0632, 0.0468, 0.0295, 0.0826,
         0.0781],
        [0.0392, 0.0374, 0.0615, 0.0570, 0.0956, 0.0459, 0.0291, 0.0174, 0.0786,
         0.0159, 0.1300, 0.0281, 0.0247, 0.0521, 0.0703, 0.0495, 0.0174, 0.0786,
         0.0720],
        [0.0482, 0.0364, 0.0437, 0.0701, 0.0844, 0.0463, 0.0296, 0.0286, 0.0877,
         0.0172, 0.0961, 0.0299, 0.0261, 0.0447, 0.0566, 0.0422, 0.0286, 0.0877,
         0.0958],
        [0.0387, 0.0290, 0.0478, 0.0613, 0.0920, 0.0443, 0.0303, 0.0240, 0.0836,
         0.0163, 0.1292, 0.0279, 0.0232, 0.0461, 0.0619, 0.0661, 0.0240, 0.0836,
         0.0707],
        [0.0375, 0.0275, 0.0589, 0.0579, 0.0868, 0.0343, 0.0360, 0.0199, 0.0869,
         0.0168, 0.1371, 0.0284, 0.0230, 0.0412, 0.0761, 0.0605, 0.0199, 0.0869,
         0.0642],
        [0.0501, 0.0459, 0.0474, 0.0772, 0.0814, 0.0604, 0.0490, 0.0322, 0.0605,
         0.0212, 0.0834, 0.0356, 0.0374, 0.0413, 0.0745, 0.0482, 0.0322, 0.0605,
         0.0615],
        [0.0539, 0.0437, 0.0318, 0.0598, 0.0724, 0.0627, 0.0434, 0.0300, 0.0673,
         0.0255, 0.1153, 0.0443, 0.0349, 0.0374, 0.0611, 0.0597, 0.0300, 0.0673,
         0.0595],
        [0.0513, 0.0439, 0.0421, 0.0839, 0.0735, 0.0457, 0.0370, 0.0269, 0.0722,
         0.0240, 0.0935, 0.0338, 0.0328, 0.0417, 0.0587, 0.0474, 0.0269, 0.0722,
         0.0925],
        [0.0500, 0.0429, 0.0459, 0.0717, 0.0708, 0.0407, 0.0375, 0.0174, 0.0846,
         0.0165, 0.1062, 0.0331, 0.0331, 0.0498, 0.0722, 0.0492, 0.0174, 0.0846,
         0.0764],
        [0.0292, 0.0303, 0.0614, 0.0602, 0.0954, 0.0402, 0.0348, 0.0190, 0.0863,
         0.0133, 0.1323, 0.0300, 0.0157, 0.0515, 0.0732, 0.0511, 0.0190, 0.0863,
         0.0708],
        [0.0465, 0.0367, 0.0467, 0.0640, 0.0978, 0.0456, 0.0391, 0.0269, 0.0834,
         0.0157, 0.1159, 0.0314, 0.0247, 0.0417, 0.0573, 0.0414, 0.0269, 0.0834,
         0.0748],
        [0.0482, 0.0364, 0.0437, 0.0701, 0.0844, 0.0463, 0.0296, 0.0286, 0.0877,
         0.0172, 0.0961, 0.0299, 0.0261, 0.0447, 0.0566, 0.0422, 0.0286, 0.0877,
         0.0958],
        [0.0387, 0.0290, 0.0478, 0.0613, 0.0920, 0.0443, 0.0303, 0.0240, 0.0836,
         0.0163, 0.1292, 0.0279, 0.0232, 0.0461, 0.0619, 0.0661, 0.0240, 0.0836,
         0.0707],
        [0.0485, 0.0421, 0.0337, 0.0673, 0.0795, 0.0482, 0.0385, 0.0299, 0.0807,
         0.0263, 0.0973, 0.0403, 0.0351, 0.0453, 0.0523, 0.0486, 0.0299, 0.0807,
         0.0761]])