101229
Test: public void test0248() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0248"); org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean2 = iSOChronology0.equals((java.lang.Object) iSOChronology1); org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.hourOfDay(); long long6 = dateTimeField3.add((long) 197, (long) 870); org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean9 = iSOChronology7.equals((java.lang.Object) iSOChronology8); org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField12 = gJChronology11.yearOfCentury(); org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology11); org.joda.time.DurationField durationField14 = gJChronology11.eras(); org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology11); int[] intArray17 = iSOChronology8.get((org.joda.time.ReadablePartial) localDate15, (-1123200000L)); org.joda.time.LocalDate localDate19 = localDate15.minusDays(100); org.joda.time.LocalDate localDate21 = localDate19.withYearOfCentury(9); int int22 = localDate19.getDayOfMonth(); org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1); boolean boolean25 = instant24.isEqualNow(); org.joda.time.DateTime dateTime26 = localDate19.toDateTime((org.joda.time.ReadableInstant) instant24); org.joda.time.chrono.BasicChronology basicChronology28 = null; org.joda.time.chrono.GJEraDateTimeField gJEraDateTimeField29 = new org.joda.time.chrono.GJEraDateTimeField(basicChronology28); java.util.Locale locale30 = null; int int31 = gJEraDateTimeField29.getMaximumTextLength(locale30); org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (short) -1); org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField35 = gJChronology34.yearOfCentury(); org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology34); int int37 = dateTime36.getEra(); int int38 = dateTime36.getYear(); boolean boolean39 = instant33.isBefore((org.joda.time.ReadableInstant) dateTime36); org.joda.time.LocalDate localDate40 = dateTime36.toLocalDate(); org.joda.time.LocalDate localDate42 = localDate40.plusDays(2757764); int int43 = localDate42.getDayOfMonth(); org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField47 = gJChronology46.yearOfCentury(); org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology46); org.joda.time.DurationField durationField49 = gJChronology46.eras(); org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology46); org.joda.time.ReadablePeriod readablePeriod51 = null; org.joda.time.LocalDate localDate53 = localDate50.withPeriodAdded(readablePeriod51, (-28800000)); org.joda.time.LocalDate.Property property54 = localDate50.dayOfMonth(); int[] intArray55 = localDate50.getValues(); int[] intArray57 = gJEraDateTimeField29.addWrapField((org.joda.time.ReadablePartial) localDate42, 0, intArray55, 899); java.util.Locale locale59 = null; try { int[] intArray60 = dateTimeField3.set((org.joda.time.ReadablePartial) localDate19, 819, intArray57, "+00:00:00.010", locale59); } catch (org.joda.time.IllegalFieldValueException e) { } }
Code: public long add(long instant, int value) { if (instant >= iCutover) { instant = iGregorianField.add(instant, value); if (instant < iCutover) { if (instant + iGapDuration < iCutover) { if (iConvertByWeekyear) { int wyear = iGregorianChronology.weekyear().get(instant); if (wyear <= 0) { instant = iGregorianChronology.weekyear().add(instant, -1); } } else { int year = iGregorianChronology.year().get(instant); if (year <= 0) { instant = iGregorianChronology.year().add(instant, -1); } } instant = gregorianToJulian(instant); } } } else { instant = iJulianField.add(instant, value); if (instant >= iCutover) { if (instant - iGapDuration >= iCutover) { instant = julianToGregorian(instant); } } } return instant; }
tensor([[0.0080, 0.0131, 0.0097,  ..., 0.0089, 0.0082, 0.0035],
        [0.0049, 0.0098, 0.0121,  ..., 0.0073, 0.0071, 0.0030],
        [0.0060, 0.0097, 0.0092,  ..., 0.0098, 0.0072, 0.0023],
        ...,
        [0.0051, 0.0137, 0.0110,  ..., 0.0074, 0.0088, 0.0029],
        [0.0065, 0.0110, 0.0090,  ..., 0.0095, 0.0086, 0.0023],
        [0.0057, 0.0092, 0.0083,  ..., 0.0123, 0.0088, 0.0031]])