18347
Test: public void testGetScopeRoot() { Compiler compiler = new Compiler(); NodeTraversal t = new NodeTraversal(compiler, new NodeTraversal.ScopedCallback() { @Override public void enterScope(NodeTraversal t) { Node root1 = t.getScopeRoot(); Node root2 = t.getScope().getRootNode(); } @Override public void exitScope(NodeTraversal t) { } @Override public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { return true; } @Override public void visit(NodeTraversal t, Node n, Node parent) { } } ); String code = "" + "var a; " + "function foo() {" + " var b" + "}"; Node tree = parse(compiler, code); t.traverse(tree); }
Code: private void parse(AbstractCompiler compiler){try {ParserRunner.ParseResult result = ParserRunner.parse(sourceFile, sourceFile.getCode(),compiler.getParserConfig(),compiler.getDefaultErrorReporter(),logger_);;compiler.setOldParseTree(sourceFile.getName(), result.oldAst);} catch (IOException e) {compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));}if (root == null || compiler.hasHaltingErrors()) {;} else {compiler.prepareAst(root);}root.setStaticSourceFile(sourceFile);}
tensor([[0.0525, 0.0272, 0.0548, 0.0437, 0.0182, 0.0218, 0.0206, 0.0430, 0.0214,
         0.0582, 0.0302, 0.0685, 0.0682, 0.0472, 0.0295, 0.0844, 0.0405, 0.0250,
         0.0357, 0.0736, 0.0219, 0.0471, 0.0668],
        [0.0402, 0.0259, 0.0419, 0.0465, 0.0233, 0.0252, 0.0238, 0.0566, 0.0190,
         0.0578, 0.0257, 0.0537, 0.0951, 0.0353, 0.0193, 0.0772, 0.0369, 0.0302,
         0.0364, 0.0711, 0.0169, 0.0457, 0.0962],
        [0.0428, 0.0258, 0.0597, 0.0525, 0.0180, 0.0195, 0.0217, 0.0483, 0.0230,
         0.0564, 0.0277, 0.0685, 0.0865, 0.0514, 0.0278, 0.0770, 0.0420, 0.0297,
         0.0347, 0.0556, 0.0195, 0.0434, 0.0686],
        [0.0385, 0.0241, 0.0557, 0.0382, 0.0220, 0.0245, 0.0240, 0.0474, 0.0212,
         0.0552, 0.0253, 0.0666, 0.0667, 0.0506, 0.0240, 0.0910, 0.0364, 0.0247,
         0.0367, 0.0830, 0.0145, 0.0488, 0.0808],
        [0.0436, 0.0242, 0.0583, 0.0399, 0.0211, 0.0275, 0.0218, 0.0521, 0.0222,
         0.0561, 0.0199, 0.0633, 0.0812, 0.0454, 0.0221, 0.0774, 0.0462, 0.0290,
         0.0484, 0.0642, 0.0127, 0.0467, 0.0765],
        [0.0428, 0.0317, 0.0446, 0.0536, 0.0223, 0.0290, 0.0209, 0.0460, 0.0230,
         0.0438, 0.0322, 0.0633, 0.0562, 0.0500, 0.0237, 0.0920, 0.0421, 0.0349,
         0.0381, 0.0701, 0.0152, 0.0603, 0.0641],
        [0.0478, 0.0313, 0.0657, 0.0491, 0.0279, 0.0231, 0.0320, 0.0376, 0.0269,
         0.0399, 0.0345, 0.0492, 0.0658, 0.0576, 0.0326, 0.0719, 0.0418, 0.0310,
         0.0306, 0.0720, 0.0216, 0.0447, 0.0654],
        [0.0387, 0.0235, 0.0663, 0.0484, 0.0197, 0.0226, 0.0277, 0.0413, 0.0196,
         0.0548, 0.0207, 0.0691, 0.0618, 0.0535, 0.0317, 0.0747, 0.0433, 0.0317,
         0.0476, 0.0771, 0.0199, 0.0515, 0.0546],
        [0.0400, 0.0224, 0.0731, 0.0507, 0.0212, 0.0227, 0.0211, 0.0356, 0.0216,
         0.0444, 0.0310, 0.0640, 0.0712, 0.0517, 0.0284, 0.0800, 0.0458, 0.0362,
         0.0422, 0.0681, 0.0196, 0.0576, 0.0513],
        [0.0541, 0.0265, 0.0513, 0.0466, 0.0212, 0.0228, 0.0208, 0.0603, 0.0294,
         0.0456, 0.0341, 0.0536, 0.0768, 0.0449, 0.0237, 0.0764, 0.0524, 0.0325,
         0.0387, 0.0724, 0.0179, 0.0434, 0.0545],
        [0.0402, 0.0218, 0.0534, 0.0544, 0.0255, 0.0206, 0.0189, 0.0470, 0.0210,
         0.0557, 0.0299, 0.0598, 0.0808, 0.0497, 0.0232, 0.0779, 0.0452, 0.0259,
         0.0413, 0.0777, 0.0167, 0.0484, 0.0653],
        [0.0478, 0.0279, 0.0551, 0.0460, 0.0209, 0.0226, 0.0267, 0.0381, 0.0216,
         0.0612, 0.0283, 0.0609, 0.0791, 0.0499, 0.0302, 0.0721, 0.0452, 0.0290,
         0.0308, 0.0625, 0.0213, 0.0505, 0.0724],
        [0.0397, 0.0228, 0.0650, 0.0415, 0.0252, 0.0225, 0.0226, 0.0501, 0.0301,
         0.0439, 0.0291, 0.0475, 0.0723, 0.0519, 0.0279, 0.0903, 0.0402, 0.0294,
         0.0345, 0.0819, 0.0173, 0.0425, 0.0719],
        [0.0404, 0.0275, 0.0553, 0.0514, 0.0167, 0.0222, 0.0203, 0.0462, 0.0249,
         0.0564, 0.0287, 0.0608, 0.0793, 0.0521, 0.0263, 0.0849, 0.0455, 0.0261,
         0.0346, 0.0557, 0.0225, 0.0459, 0.0762],
        [0.0403, 0.0231, 0.0490, 0.0536, 0.0198, 0.0242, 0.0185, 0.0605, 0.0241,
         0.0458, 0.0297, 0.0619, 0.0868, 0.0434, 0.0269, 0.0840, 0.0495, 0.0317,
         0.0353, 0.0537, 0.0183, 0.0418, 0.0782],
        [0.0519, 0.0217, 0.0571, 0.0506, 0.0191, 0.0213, 0.0187, 0.0488, 0.0196,
         0.0436, 0.0383, 0.0655, 0.0629, 0.0542, 0.0280, 0.0922, 0.0416, 0.0254,
         0.0372, 0.0670, 0.0191, 0.0481, 0.0683],
        [0.0461, 0.0235, 0.0457, 0.0482, 0.0189, 0.0245, 0.0212, 0.0545, 0.0149,
         0.0648, 0.0215, 0.0640, 0.0838, 0.0477, 0.0195, 0.0766, 0.0473, 0.0225,
         0.0386, 0.0887, 0.0158, 0.0463, 0.0655],
        [0.0484, 0.0240, 0.0553, 0.0393, 0.0204, 0.0243, 0.0269, 0.0477, 0.0260,
         0.0512, 0.0257, 0.0688, 0.0689, 0.0514, 0.0252, 0.0862, 0.0453, 0.0260,
         0.0353, 0.0639, 0.0236, 0.0405, 0.0756],
        [0.0565, 0.0219, 0.0656, 0.0491, 0.0185, 0.0229, 0.0225, 0.0552, 0.0229,
         0.0548, 0.0296, 0.0615, 0.0719, 0.0498, 0.0268, 0.0641, 0.0413, 0.0293,
         0.0363, 0.0725, 0.0234, 0.0401, 0.0637],
        [0.0425, 0.0214, 0.0663, 0.0537, 0.0187, 0.0232, 0.0200, 0.0327, 0.0209,
         0.0529, 0.0323, 0.0645, 0.0773, 0.0476, 0.0318, 0.0811, 0.0432, 0.0241,
         0.0378, 0.0803, 0.0162, 0.0487, 0.0628],
        [0.0539, 0.0284, 0.0480, 0.0503, 0.0193, 0.0229, 0.0222, 0.0455, 0.0246,
         0.0433, 0.0340, 0.0499, 0.0712, 0.0488, 0.0295, 0.0747, 0.0379, 0.0370,
         0.0405, 0.0663, 0.0241, 0.0534, 0.0745],
        [0.0413, 0.0222, 0.0531, 0.0507, 0.0225, 0.0309, 0.0204, 0.0527, 0.0209,
         0.0588, 0.0273, 0.0614, 0.0703, 0.0475, 0.0232, 0.0744, 0.0428, 0.0310,
         0.0420, 0.0673, 0.0200, 0.0510, 0.0683],
        [0.0476, 0.0217, 0.0453, 0.0426, 0.0210, 0.0256, 0.0175, 0.0487, 0.0189,
         0.0604, 0.0259, 0.0695, 0.0788, 0.0516, 0.0186, 0.0664, 0.0422, 0.0237,
         0.0363, 0.0789, 0.0162, 0.0574, 0.0849]])