67546
Test: public void test16() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test16"); com.fasterxml.jackson.databind.json.JsonMapper jsonMapper0 = new com.fasterxml.jackson.databind.json.JsonMapper(); java.text.DateFormat dateFormat1 = null; com.fasterxml.jackson.databind.ObjectMapper objectMapper2 = jsonMapper0.setDateFormat(dateFormat1); com.fasterxml.jackson.annotation.JsonSetter.Value value3 = null; com.fasterxml.jackson.databind.ObjectMapper objectMapper4 = jsonMapper0.setDefaultSetterInfo(value3); com.fasterxml.jackson.databind.cfg.HandlerInstantiator handlerInstantiator5 = null; java.lang.Object obj6 = jsonMapper0.setHandlerInstantiator(handlerInstantiator5); com.fasterxml.jackson.databind.json.JsonMapper jsonMapper7 = new com.fasterxml.jackson.databind.json.JsonMapper(); com.fasterxml.jackson.databind.SerializationFeature serializationFeature8 = com.fasterxml.jackson.databind.SerializationFeature.WRITE_EMPTY_JSON_ARRAYS; boolean boolean9 = jsonMapper7.isEnabled(serializationFeature8); com.fasterxml.jackson.databind.SerializationFeature serializationFeature10 = com.fasterxml.jackson.databind.SerializationFeature.FLUSH_AFTER_WRITE_VALUE; java.lang.String str11 = jsonMapper7.writeValueAsString((java.lang.Object) serializationFeature10); com.fasterxml.jackson.databind.node.BooleanNode booleanNode12 = com.fasterxml.jackson.databind.node.BooleanNode.FALSE; com.fasterxml.jackson.databind.node.BooleanNode booleanNode14 = com.fasterxml.jackson.databind.node.BooleanNode.FALSE; com.fasterxml.jackson.databind.JsonNode[] jsonNodeArray15 = new com.fasterxml.jackson.databind.JsonNode[] { booleanNode14 }; java.util.ArrayList<com.fasterxml.jackson.databind.JsonNode> jsonNodeList16 = new java.util.ArrayList<com.fasterxml.jackson.databind.JsonNode>(); boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.fasterxml.jackson.databind.JsonNode>) jsonNodeList16, jsonNodeArray15); java.util.List<com.fasterxml.jackson.databind.JsonNode> jsonNodeList18 = booleanNode12.findParents("", (java.util.List<com.fasterxml.jackson.databind.JsonNode>) jsonNodeList16); com.fasterxml.jackson.core.JsonParser jsonParser19 = booleanNode12.traverse(); com.fasterxml.jackson.core.FormatSchema formatSchema20 = null; boolean boolean21 = jsonParser19.canUseSchema(formatSchema20); com.fasterxml.jackson.core.JsonLocation jsonLocation23 = null; com.fasterxml.jackson.databind.ser.std.DateSerializer dateSerializer24 = com.fasterxml.jackson.databind.ser.std.DateSerializer.instance; com.fasterxml.jackson.databind.ser.std.DateSerializer dateSerializer25 = com.fasterxml.jackson.databind.ser.std.DateSerializer.instance; boolean boolean26 = dateSerializer24.isDefaultSerializer((com.fasterxml.jackson.databind.JsonSerializer<java.util.Date>) dateSerializer25); java.lang.Class<java.util.Date> dateClass27 = dateSerializer24.handledType(); java.util.Collection<java.lang.Object> objCollection29 = null; com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException unrecognizedPropertyException30 = new com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException(jsonParser19, "", jsonLocation23, dateClass27, "JSON", objCollection29); com.fasterxml.jackson.databind.ser.std.NumberSerializer numberSerializer31 = com.fasterxml.jackson.databind.ser.std.NumberSerializer.instance; com.fasterxml.jackson.databind.SerializerProvider serializerProvider32 = null; com.fasterxml.jackson.databind.node.BooleanNode booleanNode33 = com.fasterxml.jackson.databind.node.BooleanNode.FALSE; com.fasterxml.jackson.databind.node.BooleanNode booleanNode35 = com.fasterxml.jackson.databind.node.BooleanNode.FALSE; com.fasterxml.jackson.databind.JsonNode[] jsonNodeArray36 = new com.fasterxml.jackson.databind.JsonNode[] { booleanNode35 }; java.util.ArrayList<com.fasterxml.jackson.databind.JsonNode> jsonNodeList37 = new java.util.ArrayList<com.fasterxml.jackson.databind.JsonNode>(); boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.fasterxml.jackson.databind.JsonNode>) jsonNodeList37, jsonNodeArray36); java.util.List<com.fasterxml.jackson.databind.JsonNode> jsonNodeList39 = booleanNode33.findParents("", (java.util.List<com.fasterxml.jackson.databind.JsonNode>) jsonNodeList37); com.fasterxml.jackson.core.JsonParser jsonParser40 = booleanNode33.traverse(); com.fasterxml.jackson.core.FormatSchema formatSchema41 = null; boolean boolean42 = jsonParser40.canUseSchema(formatSchema41); com.fasterxml.jackson.core.JsonLocation jsonLocation44 = null; com.fasterxml.jackson.databind.ser.std.DateSerializer dateSerializer45 = com.fasterxml.jackson.databind.ser.std.DateSerializer.instance; com.fasterxml.jackson.databind.ser.std.DateSerializer dateSerializer46 = com.fasterxml.jackson.databind.ser.std.DateSerializer.instance; boolean boolean47 = dateSerializer45.isDefaultSerializer((com.fasterxml.jackson.databind.JsonSerializer<java.util.Date>) dateSerializer46); java.lang.Class<java.util.Date> dateClass48 = dateSerializer45.handledType(); java.util.Collection<java.lang.Object> objCollection50 = null; com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException unrecognizedPropertyException51 = new com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException(jsonParser40, "", jsonLocation44, dateClass48, "JSON", objCollection50); com.fasterxml.jackson.databind.JsonNode jsonNode52 = numberSerializer31.getSchema(serializerProvider32, (java.lang.reflect.Type) dateClass48); jsonMapper7.addMixInAnnotations(dateClass27, dateClass48); com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper54 = null; try { jsonMapper0.acceptJsonFormatVisitor(dateClass27, jsonFormatVisitorWrapper54); } catch (java.lang.NullPointerException e) { } }
Code: public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint){if (true) {;} else {if (((Class<?>) handledType()) == BigDecimal.class) {visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);} else {}
tensor([[0.0443, 0.0368, 0.0425, 0.0572, 0.0709, 0.0381, 0.1076, 0.0224, 0.0595,
         0.0532, 0.0509, 0.0293, 0.0677, 0.0425, 0.0599, 0.0850, 0.0356, 0.0595,
         0.0372],
        [0.0339, 0.0308, 0.0370, 0.0423, 0.0818, 0.0432, 0.1658, 0.0191, 0.0655,
         0.0375, 0.0434, 0.0215, 0.0482, 0.0447, 0.0353, 0.1087, 0.0293, 0.0655,
         0.0467],
        [0.0338, 0.0305, 0.0478, 0.0543, 0.0717, 0.0393, 0.1116, 0.0247, 0.0593,
         0.0404, 0.0540, 0.0204, 0.0582, 0.0616, 0.0379, 0.1166, 0.0354, 0.0593,
         0.0434],
        [0.0413, 0.0310, 0.0343, 0.0520, 0.0705, 0.0362, 0.1236, 0.0229, 0.0702,
         0.0463, 0.0644, 0.0218, 0.0625, 0.0489, 0.0334, 0.0879, 0.0352, 0.0702,
         0.0475],
        [0.0451, 0.0262, 0.0358, 0.0516, 0.0811, 0.0354, 0.1371, 0.0217, 0.0579,
         0.0313, 0.0603, 0.0222, 0.0662, 0.0524, 0.0434, 0.0983, 0.0348, 0.0579,
         0.0413],
        [0.0394, 0.0397, 0.0405, 0.0491, 0.0726, 0.0420, 0.1284, 0.0279, 0.0683,
         0.0467, 0.0460, 0.0276, 0.0547, 0.0431, 0.0344, 0.0789, 0.0404, 0.0683,
         0.0519],
        [0.0309, 0.0253, 0.0388, 0.0487, 0.0707, 0.0373, 0.1714, 0.0160, 0.0714,
         0.0347, 0.0470, 0.0163, 0.0554, 0.0441, 0.0350, 0.1088, 0.0331, 0.0714,
         0.0437],
        [0.0424, 0.0330, 0.0352, 0.0583, 0.0725, 0.0401, 0.1565, 0.0271, 0.0702,
         0.0379, 0.0495, 0.0213, 0.0475, 0.0392, 0.0352, 0.0885, 0.0358, 0.0702,
         0.0396],
        [0.0349, 0.0271, 0.0387, 0.0514, 0.0803, 0.0412, 0.1523, 0.0239, 0.0661,
         0.0381, 0.0514, 0.0204, 0.0536, 0.0667, 0.0319, 0.0829, 0.0314, 0.0661,
         0.0414],
        [0.0295, 0.0273, 0.0490, 0.0552, 0.0670, 0.0513, 0.1288, 0.0171, 0.0619,
         0.0357, 0.0761, 0.0217, 0.0637, 0.0469, 0.0384, 0.0936, 0.0404, 0.0619,
         0.0343],
        [0.0405, 0.0350, 0.0321, 0.0475, 0.0685, 0.0428, 0.1328, 0.0263, 0.0778,
         0.0463, 0.0397, 0.0224, 0.0506, 0.0488, 0.0422, 0.0767, 0.0399, 0.0778,
         0.0525],
        [0.0399, 0.0332, 0.0523, 0.0532, 0.0740, 0.0385, 0.1192, 0.0183, 0.0560,
         0.0388, 0.0566, 0.0251, 0.0614, 0.0430, 0.0549, 0.0977, 0.0428, 0.0560,
         0.0393],
        [0.0238, 0.0263, 0.0456, 0.0452, 0.0768, 0.0341, 0.1710, 0.0171, 0.0630,
         0.0282, 0.0418, 0.0165, 0.0581, 0.0450, 0.0332, 0.1520, 0.0249, 0.0630,
         0.0343],
        [0.0402, 0.0334, 0.0367, 0.0516, 0.0824, 0.0393, 0.1635, 0.0254, 0.0647,
         0.0356, 0.0463, 0.0227, 0.0473, 0.0372, 0.0372, 0.0924, 0.0356, 0.0647,
         0.0438],
        [0.0388, 0.0308, 0.0488, 0.0484, 0.0652, 0.0371, 0.1116, 0.0213, 0.0637,
         0.0428, 0.0556, 0.0205, 0.0598, 0.0595, 0.0504, 0.1025, 0.0381, 0.0637,
         0.0413],
        [0.0370, 0.0278, 0.0456, 0.0607, 0.0702, 0.0396, 0.1484, 0.0174, 0.0642,
         0.0307, 0.0510, 0.0188, 0.0562, 0.0448, 0.0384, 0.1128, 0.0359, 0.0642,
         0.0364],
        [0.0370, 0.0337, 0.0368, 0.0466, 0.0762, 0.0453, 0.1528, 0.0241, 0.0627,
         0.0371, 0.0485, 0.0192, 0.0557, 0.0503, 0.0368, 0.0904, 0.0382, 0.0627,
         0.0460],
        [0.0349, 0.0271, 0.0387, 0.0514, 0.0803, 0.0412, 0.1523, 0.0239, 0.0661,
         0.0381, 0.0514, 0.0204, 0.0536, 0.0667, 0.0319, 0.0829, 0.0314, 0.0661,
         0.0414],
        [0.0489, 0.0340, 0.0445, 0.0595, 0.0770, 0.0374, 0.1402, 0.0215, 0.0544,
         0.0455, 0.0438, 0.0235, 0.0500, 0.0483, 0.0468, 0.0865, 0.0366, 0.0544,
         0.0476]])