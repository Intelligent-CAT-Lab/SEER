16553
Test: public void testInstrument() { final String kPreamble = "var $$toRemoveDefinition1, $$notToRemove;\n" + "var $$toRemoveDefinition2, $$toRemoveDefinition3;\n"; List<String> initCodeList = ImmutableList.of( "var $$Table = [];", "function $$TestDefine(id) {", " $$Table[id] = 0;", "};", "function $$TestInstrument(id) {", " $$Table[id]++;", "};"); StringBuilder initCodeBuilder = new StringBuilder(); StringBuilder pbBuilder = new StringBuilder(); for (String line : initCodeList) { initCodeBuilder.append(line).append("\n"); pbBuilder.append("init: \"").append(line).append("\"\n"); } pbBuilder.append("report_call: \"$$testInstrument\"") .append("report_defined: \"$$testDefine\"") .append("declaration_to_remove: \"$$toRemoveDefinition1\"") .append("declaration_to_remove: \"$$toRemoveDefinition2\"") .append("declaration_to_remove: \"$$toRemoveDefinition3\""); final String initCode = initCodeBuilder.toString(); this.instrumentationPb = pbBuilder.toString(); test("function a(){b}", initCode + "$$testDefine(0);" + "function a(){$$testInstrument(0);b}"); test(kPreamble + "function a(){b}", initCode + "$$testDefine(0);" + "var $$notToRemove;" + "function a(){$$testInstrument(0);b}"); test(kPreamble + "var a = { b: function(){c} }", initCode + "var $$notToRemove;" + "$$testDefine(0);" + "var a = { b: function(){$$testInstrument(0);c} }"); test(kPreamble + "var a = { b: function(){c}, d: function(){e} }", initCode + "var $$notToRemove;" + "$$testDefine(0);" + "$$testDefine(1);" + "var a={b:function(){$$testInstrument(0);c}," + "d:function(){$$testInstrument(1);e}}"); test(kPreamble + "var a = { b: { f: function(){c} }, d: function(){e} }", initCode + "var $$notToRemove;" + "$$testDefine(0);" + "$$testDefine(1);" + "var a={b:{f:function(){$$testInstrument(0);c}}," + "d:function(){$$testInstrument(1);e}}"); }
Code: public String toString() { return "Scope.Var " + name; }
tensor([[0.0704, 0.0874, 0.0795, 0.1149, 0.0801, 0.1110, 0.0972, 0.0575, 0.2674,
         0.0346],
        [0.0741, 0.0833, 0.0928, 0.1232, 0.0765, 0.1087, 0.0978, 0.0642, 0.2490,
         0.0304],
        [0.0484, 0.0986, 0.0601, 0.1073, 0.0741, 0.0838, 0.0796, 0.0477, 0.3732,
         0.0271],
        [0.0776, 0.1092, 0.0761, 0.1305, 0.0885, 0.0899, 0.1055, 0.0813, 0.1963,
         0.0451],
        [0.0486, 0.0888, 0.0523, 0.1121, 0.0677, 0.0888, 0.1069, 0.0682, 0.3369,
         0.0299],
        [0.0494, 0.0884, 0.0597, 0.1086, 0.0865, 0.1079, 0.0753, 0.0514, 0.3356,
         0.0373],
        [0.0517, 0.1105, 0.0745, 0.1487, 0.0758, 0.0869, 0.0776, 0.0398, 0.3125,
         0.0220],
        [0.0652, 0.0988, 0.0727, 0.0977, 0.0783, 0.1021, 0.0909, 0.0565, 0.3045,
         0.0332],
        [0.0718, 0.0853, 0.0875, 0.1385, 0.0956, 0.0873, 0.0926, 0.0576, 0.2582,
         0.0255],
        [0.0493, 0.0902, 0.0929, 0.1402, 0.1115, 0.0817, 0.1110, 0.0547, 0.2390,
         0.0295]])