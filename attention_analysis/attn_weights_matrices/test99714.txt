99714
Test: public void testCompareTo() { YearMonth test1 = new YearMonth(2005, 6); YearMonth test1a = new YearMonth(2005, 6); YearMonth test2 = new YearMonth(2005, 7); YearMonth test3 = new YearMonth(2005, 7, GregorianChronology.getInstanceUTC()); DateTimeFieldType[] types = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), }; int[] values = new int[] {2005, 6}; Partial p = new Partial(types, values); try { test1.compareTo(null); fail(); } catch (NullPointerException ex) {} try { test1.compareTo(new LocalTime()); fail(); } catch (ClassCastException ex) {} Partial partial = new Partial() .with(DateTimeFieldType.centuryOfEra(), 1) .with(DateTimeFieldType.halfdayOfDay(), 0) .with(DateTimeFieldType.dayOfMonth(), 9); try { new YearMonth(1970, 6).compareTo(partial); fail(); } catch (ClassCastException ex) {} }
Code: public int compareTo(DurationField durationField) { if (durationField.isSupported()) { return 1; } return 0; }
tensor([[0.0617, 0.0399, 0.1322, 0.0504, 0.0775, 0.1658, 0.0973, 0.0775, 0.0673,
         0.0319, 0.0252, 0.0673, 0.0806, 0.0252],
        [0.0388, 0.0290, 0.1369, 0.0501, 0.0821, 0.2237, 0.1002, 0.0821, 0.0620,
         0.0195, 0.0183, 0.0620, 0.0770, 0.0183],
        [0.0645, 0.0324, 0.1493, 0.0580, 0.0914, 0.1544, 0.0817, 0.0914, 0.0592,
         0.0248, 0.0203, 0.0592, 0.0931, 0.0203],
        [0.0426, 0.0230, 0.1578, 0.0536, 0.0754, 0.2071, 0.1090, 0.0754, 0.0584,
         0.0180, 0.0196, 0.0584, 0.0821, 0.0196],
        [0.0599, 0.0289, 0.1584, 0.0606, 0.0946, 0.1034, 0.0824, 0.0946, 0.0691,
         0.0336, 0.0336, 0.0691, 0.0782, 0.0336],
        [0.0363, 0.0180, 0.2493, 0.0466, 0.0774, 0.2049, 0.0775, 0.0774, 0.0478,
         0.0117, 0.0118, 0.0478, 0.0817, 0.0118],
        [0.0526, 0.0390, 0.1605, 0.0596, 0.0819, 0.1301, 0.0875, 0.0819, 0.0649,
         0.0336, 0.0270, 0.0649, 0.0896, 0.0270],
        [0.0599, 0.0289, 0.1584, 0.0606, 0.0946, 0.1034, 0.0824, 0.0946, 0.0691,
         0.0336, 0.0336, 0.0691, 0.0782, 0.0336],
        [0.0415, 0.0250, 0.1995, 0.0477, 0.0800, 0.1722, 0.0894, 0.0800, 0.0605,
         0.0242, 0.0220, 0.0605, 0.0755, 0.0220],
        [0.0516, 0.0345, 0.1477, 0.0557, 0.0788, 0.1684, 0.0915, 0.0788, 0.0743,
         0.0225, 0.0215, 0.0743, 0.0791, 0.0215],
        [0.0402, 0.0309, 0.1352, 0.0508, 0.0936, 0.1530, 0.0852, 0.0936, 0.0850,
         0.0224, 0.0206, 0.0850, 0.0842, 0.0206],
        [0.0415, 0.0250, 0.1995, 0.0477, 0.0800, 0.1722, 0.0894, 0.0800, 0.0605,
         0.0242, 0.0220, 0.0605, 0.0755, 0.0220],
        [0.0536, 0.0305, 0.1309, 0.0608, 0.0852, 0.1796, 0.0764, 0.0852, 0.0661,
         0.0299, 0.0234, 0.0661, 0.0888, 0.0234],
        [0.0402, 0.0309, 0.1352, 0.0508, 0.0936, 0.1530, 0.0852, 0.0936, 0.0850,
         0.0224, 0.0206, 0.0850, 0.0842, 0.0206]])