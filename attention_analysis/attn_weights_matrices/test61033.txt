61033
Test: public void test0497() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0497"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat0.validate(); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat2.validate(); org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuotePolicy(quote4); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withEscape((java.lang.Character) 'a'); java.lang.Object[] objArray9 = new java.lang.Object[] { 'a', (byte) 0 }; java.lang.String str10 = cSVFormat0.format(objArray9); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat11.validate(); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withIgnoreEmptyLines(true); java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat11.withHeader(strArray17); java.lang.String str19 = cSVFormat0.format((java.lang.Object[]) strArray17); java.lang.Character char20 = cSVFormat0.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat0.withEscape((java.lang.Character) '\\'); org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat23.validate(); org.apache.commons.csv.Quote quote25 = null; org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withQuotePolicy(quote25); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withQuoteChar('\t'); java.lang.Character char29 = cSVFormat28.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withNullString("\u2028"); org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat34.validate(); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withIgnoreEmptyLines(true); java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat34.withHeader(strArray40); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat33.withHeader(strArray40); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat22.withHeader(strArray40); char char44 = cSVFormat43.getDelimiter(); java.lang.String str45 = cSVFormat43.getNullString(); }
Code: public String toString() { final StringBuilder sb = new StringBuilder(); sb.append("Delimiter=<").append(delimiter).append('>'); if (isEscaping()) { sb.append(' '); sb.append("Escape=<").append(escape).append('>'); } if (isQuoting()) { sb.append(' '); sb.append("QuoteChar=<").append(quoteChar).append('>'); } if (isCommentingEnabled()) { sb.append(' '); sb.append("CommentStart=<").append(commentStart).append('>'); } if (isNullHandling()) { sb.append(' '); sb.append("NullString=<").append(nullString).append('>'); } if(recordSeparator != null) { sb.append(' '); sb.append("RecordSeparator=<").append(recordSeparator).append('>'); } if (getIgnoreEmptyLines()) { sb.append(" EmptyLines:ignored"); } if (getIgnoreSurroundingSpaces()) { sb.append(" SurroundingSpaces:ignored"); } sb.append(" SkipHeaderRecord:").append(skipHeaderRecord); if (header != null) { sb.append(' '); sb.append("Header:").append(Arrays.toString(header)); } return sb.toString(); }
tensor([[0.0075, 0.0092, 0.0076,  ..., 0.0088, 0.0285, 0.0040],
        [0.0072, 0.0078, 0.0075,  ..., 0.0077, 0.0361, 0.0034],
        [0.0049, 0.0074, 0.0037,  ..., 0.0077, 0.0355, 0.0032],
        ...,
        [0.0049, 0.0070, 0.0036,  ..., 0.0065, 0.0380, 0.0034],
        [0.0052, 0.0086, 0.0053,  ..., 0.0090, 0.0329, 0.0033],
        [0.0050, 0.0091, 0.0084,  ..., 0.0120, 0.0327, 0.0034]])