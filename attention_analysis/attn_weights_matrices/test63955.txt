63955
Test: public void testSingleMatchFilteringWithPathRawBinary() throws Exception { StringWriter w = new StringWriter(); FilteringGeneratorDelegate gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w), new NameMatchFilter("array"), true, false ); gen.writeStartObject(); gen.writeFieldName("header"); gen.writeStartArray(); gen.writeBinary(new byte[] { 1 }); gen.writeRawValue(new SerializedString("1")); gen.writeRawValue("2"); gen.writeEndArray(); gen.writeFieldName("array"); gen.writeStartArray(); gen.writeBinary(new byte[] { 1 }); gen.writeNumber((short) 1); gen.writeNumber((int) 2); gen.writeNumber((long) 3); gen.writeNumber(BigInteger.valueOf(4)); gen.writeRaw(" "); gen.writeNumber(new BigDecimal("5.0")); gen.writeRaw(new SerializedString(" ")); gen.writeNumber(6.25f); gen.writeNumber(7.5); gen.writeEndArray(); gen.writeArrayFieldStart("extra"); gen.writeNumber((short) 1); gen.writeNumber((int) 2); gen.writeNumber((long) 3); gen.writeNumber(BigInteger.valueOf(4)); gen.writeNumber(new BigDecimal("5.0")); gen.writeNumber(6.25f); gen.writeNumber(7.5); gen.writeEndArray(); gen.writeEndObject(); gen.close(); }
Code: public void writeRaw(String text, int offset, int len) throws IOException { final char[] buf = _charBuffer; if (len <= buf.length) { text.getChars(offset, offset+len, buf, 0); _writeRawSegment(buf, 0, len); return; } final int maxChunk = (_outputEnd >> 2) + (_outputEnd >> 4); final int maxBytes = maxChunk * 3; while (len > 0) { int len2 = Math.min(maxChunk, len); text.getChars(offset, offset+len2, buf, 0); if ((_outputTail + maxBytes) > _outputEnd) { _flushBuffer(); } if (len > 0) { char ch = buf[len2-1]; if ((ch >= SURR1_FIRST) && (ch <= SURR1_LAST)) { --len2; } } _writeRawSegment(buf, 0, len2); offset += len2; len -= len2; } }
tensor([[0.0064, 0.0053, 0.0041,  ..., 0.0096, 0.0029, 0.0029],
        [0.0048, 0.0045, 0.0043,  ..., 0.0082, 0.0029, 0.0029],
        [0.0049, 0.0038, 0.0046,  ..., 0.0083, 0.0020, 0.0020],
        ...,
        [0.0051, 0.0046, 0.0047,  ..., 0.0086, 0.0032, 0.0032],
        [0.0045, 0.0042, 0.0056,  ..., 0.0088, 0.0026, 0.0026],
        [0.0045, 0.0042, 0.0056,  ..., 0.0088, 0.0026, 0.0026]])