15724
Test: public void test097() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test097"); org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine1 = posixParser0.cmd; org.apache.commons.cli.CommandLine commandLine2 = new org.apache.commons.cli.CommandLine(); java.lang.String str5 = commandLine2.getOptionValue('#', ""); java.util.Properties properties7 = commandLine2.getOptionProperties(""); posixParser0.processProperties(properties7); posixParser0.burstToken("", true); org.apache.commons.cli.Options options12 = null; org.apache.commons.cli.CommandLine commandLine13 = new org.apache.commons.cli.CommandLine(); java.lang.String str16 = commandLine13.getOptionValue('#', ""); java.lang.String str18 = commandLine13.getOptionValue(' '); java.lang.String[] strArray19 = commandLine13.getArgs(); java.lang.String[] strArray21 = posixParser0.flatten(options12, strArray19, true); org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option24 = options22.getOption("arg"); org.apache.commons.cli.PosixParser posixParser25 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine26 = posixParser25.cmd; org.apache.commons.cli.CommandLine commandLine27 = new org.apache.commons.cli.CommandLine(); java.lang.String str30 = commandLine27.getOptionValue('#', ""); java.util.Properties properties32 = commandLine27.getOptionProperties(""); posixParser25.processProperties(properties32); posixParser25.burstToken("", true); org.apache.commons.cli.Options options37 = null; org.apache.commons.cli.CommandLine commandLine38 = new org.apache.commons.cli.CommandLine(); java.lang.String str41 = commandLine38.getOptionValue('#', ""); java.lang.String str43 = commandLine38.getOptionValue(' '); java.lang.String[] strArray44 = commandLine38.getArgs(); java.lang.String[] strArray46 = posixParser25.flatten(options37, strArray44, true); org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options22, strArray46, true); java.lang.String str50 = commandLine48.getOptionValue("org.apache.commons.cli.MissingOptionException: hi!"); java.util.List list51 = commandLine48.getArgList(); java.lang.Object obj53 = commandLine48.getOptionObject('\000'); org.apache.commons.cli.Option option57 = new org.apache.commons.cli.Option("", false, ""); option57.setValueSeparator('#'); java.lang.Object obj60 = option57.clone(); option57.setArgs((int) (short) 100); java.lang.Object obj63 = option57.clone(); commandLine48.addOption(option57); org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option69 = new org.apache.commons.cli.Option("", false, ""); boolean boolean70 = option69.hasOptionalArg(); org.apache.commons.cli.MissingOptionException missingOptionException72 = new org.apache.commons.cli.MissingOptionException(""); org.apache.commons.cli.MissingOptionException missingOptionException74 = new org.apache.commons.cli.MissingOptionException(""); missingOptionException72.addSuppressed((java.lang.Throwable) missingOptionException74); boolean boolean76 = option69.equals((java.lang.Object) missingOptionException74); java.util.List list77 = option69.getValuesList(); org.apache.commons.cli.Options options78 = options65.addOption(option69); commandLine48.addOption(option69); java.lang.String str80 = option69.getArgName(); }
Code: protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption){;this.options = options;Iterator iter = Arrays.asList(arguments).iterator();while (iter.hasNext()){String token = (String) iter.next();if (token.startsWith("--")){if (token.indexOf('=') != 1){tokens.add(token.substring(0, token.indexOf('=')));tokens.add(token.substring(token.indexOf('=') + 1, token.length()));}else{;}}else if ("-".equals(token)){tokens.add(token);}else if (token.startsWith("-")){if (token.length() == 2){processOptionToken(token, stopAtNonOption);}else if (options.hasOption(token)){tokens.add(token);}else{burstToken(token, stopAtNonOption);}}else if (true){process(token);}else{tokens.add(token);}gobble(iter);}return (String[]) tokens.toArray(new String[tokens.size()]);}
tensor([[0.0197, 0.0054, 0.0209,  ..., 0.1048, 0.0201, 0.0217],
        [0.0181, 0.0049, 0.0201,  ..., 0.0916, 0.0176, 0.0199],
        [0.0185, 0.0084, 0.0246,  ..., 0.0760, 0.0224, 0.0233],
        ...,
        [0.0202, 0.0083, 0.0232,  ..., 0.0826, 0.0268, 0.0189],
        [0.0208, 0.0075, 0.0237,  ..., 0.0776, 0.0205, 0.0199],
        [0.0157, 0.0068, 0.0188,  ..., 0.0926, 0.0224, 0.0210]])