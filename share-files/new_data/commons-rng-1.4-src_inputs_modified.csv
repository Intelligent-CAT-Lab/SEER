,method,test
0,"    public static <T> void shuffle(UniformRandomProvider rng,
                                   List<T> list) {
        if (list instanceof RandomAccess || list.size() < RANDOM_ACCESS_SIZE_THRESHOLD) {
            // Shuffle list in-place
            for (int i = list.size(); i > 1; i--) {
                swap(list, i - 1, rng.nextInt(i));
            }
        } else {
            // Shuffle as an array
            final Object[] array = list.toArray();
            for (int i = array.length; i > 1; i--) {
                swap(array, i - 1, rng.nextInt(i));
            }

            // Copy back. Use raw types.
            final ListIterator it = list.listIterator();
            for (final Object item : array) {
                it.next();
                it.set(item);
            }
        }
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      linkedList0.add(arrayList0);
      linkedList0.add(arrayList0);
      linkedList0.offer(arrayList0);
      linkedList0.add(arrayList0);
      linkedList0.add(arrayList0);
      ListSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, (List<ArrayList<String>>) linkedList0);
}"
1,"    public static <T> List<T> sample(UniformRandomProvider rng,
                                     List<T> collection,
                                     int k) {
        final int n = collection.size();
        final PermutationSampler p = new PermutationSampler(rng, n, k);
        final List<T> result = new ArrayList<>(k);
        final int[] index = p.sample();

        for (int i = 0; i < k; i++) {
            result.add(collection.get(index[i]));
        }

        return result;
    }","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      Vector<Object> vector0 = new Vector<Object>();
      Object object0 = new Object();
      vector0.add(object0);
      vector0.add((Object) mockRandom0);
      List<Object> list0 = ListSampler.sample((UniformRandomProvider) jDKRandomWrapper0, (List<Object>) vector0, 1);
}"
2,"    public static <T> List<T> sample(UniformRandomProvider rng,
                                     List<T> collection,
                                     int k) {
        final int n = collection.size();
        final PermutationSampler p = new PermutationSampler(rng, n, k);
        final List<T> result = new ArrayList<>(k);
        final int[] index = p.sample();

        for (int i = 0; i < k; i++) {
            result.add(collection.get(index[i]));
        }

        return result;
    }","  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      Vector<Object> vector0 = new Vector<Object>();
      Object object0 = new Object();
      vector0.add(object0);
      vector0.add((Object) mockRandom0);
      List<Object> list0 = ListSampler.sample((UniformRandomProvider) jDKRandomWrapper0, (List<Object>) vector0, 1);
}"
3,"    public static <T> void shuffle(UniformRandomProvider rng,
                                   List<T> list) {
        if (list instanceof RandomAccess || list.size() < RANDOM_ACCESS_SIZE_THRESHOLD) {
            // Shuffle list in-place
            for (int i = list.size(); i > 1; i--) {
                swap(list, i - 1, rng.nextInt(i));
            }
        } else {
            // Shuffle as an array
            final Object[] array = list.toArray();
            for (int i = array.length; i > 1; i--) {
                swap(array, i - 1, rng.nextInt(i));
            }

            // Copy back. Use raw types.
            final ListIterator it = list.listIterator();
            for (final Object item : array) {
                it.next();
                it.set(item);
            }
        }
    }","  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4294967296L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        ListSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, (List<Object>) null, 0, false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.ListSampler"", e);
      }
  }"
4,"    public static <T> void shuffle(UniformRandomProvider rng,
                                   List<T> list) {
        if (list instanceof RandomAccess || list.size() < RANDOM_ACCESS_SIZE_THRESHOLD) {
            // Shuffle list in-place
            for (int i = list.size(); i > 1; i--) {
                swap(list, i - 1, rng.nextInt(i));
            }
        } else {
            // Shuffle as an array
            final Object[] array = list.toArray();
            for (int i = array.length; i > 1; i--) {
                swap(array, i - 1, rng.nextInt(i));
            }

            // Copy back. Use raw types.
            final ListIterator it = list.listIterator();
            for (final Object item : array) {
                it.next();
                it.set(item);
            }
        }
    }","  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        ListSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, (List<Object>) linkedList0, (-700), true);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-699)
         //
         verifyException(""java.util.SubList"", e);
      }
  }"
5,"    public static <T> void shuffle(UniformRandomProvider rng,
                                   List<T> list) {
        if (list instanceof RandomAccess || list.size() < RANDOM_ACCESS_SIZE_THRESHOLD) {
            // Shuffle list in-place
            for (int i = list.size(); i > 1; i--) {
                swap(list, i - 1, rng.nextInt(i));
            }
        } else {
            // Shuffle as an array
            final Object[] array = list.toArray();
            for (int i = array.length; i > 1; i--) {
                swap(array, i - 1, rng.nextInt(i));
            }

            // Copy back. Use raw types.
            final ListIterator it = list.listIterator();
            for (final Object item : array) {
                it.next();
                it.set(item);
            }
        }
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        ListSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, (List<Object>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.ListSampler"", e);
      }
  }"
6,"    public static <T> List<T> sample(UniformRandomProvider rng,
                                     List<T> collection,
                                     int k) {
        final int n = collection.size();
        final PermutationSampler p = new PermutationSampler(rng, n, k);
        final List<T> result = new ArrayList<>(k);
        final int[] index = p.sample();

        for (int i = 0; i < k; i++) {
            result.add(collection.get(index[i]));
        }

        return result;
    }","  public void test6()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
      // Undeclared exception!
      try { 
        ListSampler.sample((UniformRandomProvider) jDKRandomWrapper0, (List<Object>) null, (-1));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.ListSampler"", e);
      }
  }"
7,"    public static <T> List<T> sample(UniformRandomProvider rng,
                                     List<T> collection,
                                     int k) {
        final int n = collection.size();
        final PermutationSampler p = new PermutationSampler(rng, n, k);
        final List<T> result = new ArrayList<>(k);
        final int[] index = p.sample();

        for (int i = 0; i < k; i++) {
            result.add(collection.get(index[i]));
        }

        return result;
    }","  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      Vector<Vector<Integer>> vector0 = new Vector<Vector<Integer>>();
      // Undeclared exception!
      try { 
        ListSampler.sample((UniformRandomProvider) jDKRandomWrapper0, (List<Vector<Integer>>) vector0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // n <= 0 : n=0
         //
         verifyException(""org.apache.commons.rng.sampling.SubsetSamplerUtils"", e);
      }
  }"
8,"    public static <T> void shuffle(UniformRandomProvider rng,
                                   List<T> list) {
        if (list instanceof RandomAccess || list.size() < RANDOM_ACCESS_SIZE_THRESHOLD) {
            // Shuffle list in-place
            for (int i = list.size(); i > 1; i--) {
                swap(list, i - 1, rng.nextInt(i));
            }
        } else {
            // Shuffle as an array
            final Object[] array = list.toArray();
            for (int i = array.length; i > 1; i--) {
                swap(array, i - 1, rng.nextInt(i));
            }

            // Copy back. Use raw types.
            final ListIterator it = list.listIterator();
            for (final Object item : array) {
                it.next();
                it.set(item);
            }
        }
    }","  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      linkedList0.add(arrayList0);
      linkedList0.offer(arrayList0);
      ListSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, (List<ArrayList<String>>) linkedList0);
}"
9,"    public static <T> void shuffle(UniformRandomProvider rng,
                                   List<T> list) {
        if (list instanceof RandomAccess || list.size() < RANDOM_ACCESS_SIZE_THRESHOLD) {
            // Shuffle list in-place
            for (int i = list.size(); i > 1; i--) {
                swap(list, i - 1, rng.nextInt(i));
            }
        } else {
            // Shuffle as an array
            final Object[] array = list.toArray();
            for (int i = array.length; i > 1; i--) {
                swap(array, i - 1, rng.nextInt(i));
            }

            // Copy back. Use raw types.
            final ListIterator it = list.listIterator();
            for (final Object item : array) {
                it.next();
                it.set(item);
            }
        }
    }","  public void test9()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      Vector<Integer> vector0 = new Vector<Integer>();
      ListSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, (List<Integer>) vector0);
}"
10,"    public static <T> void shuffle(UniformRandomProvider rng,
                                   List<T> list) {
        if (list instanceof RandomAccess || list.size() < RANDOM_ACCESS_SIZE_THRESHOLD) {
            // Shuffle list in-place
            for (int i = list.size(); i > 1; i--) {
                swap(list, i - 1, rng.nextInt(i));
            }
        } else {
            // Shuffle as an array
            final Object[] array = list.toArray();
            for (int i = array.length; i > 1; i--) {
                swap(array, i - 1, rng.nextInt(i));
            }

            // Copy back. Use raw types.
            final ListIterator it = list.listIterator();
            for (final Object item : array) {
                it.next();
                it.set(item);
            }
        }
    }","  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) jDKRandomWrapper0);
      ListSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, (List<Object>) stack0, 1, false);
}"
11,"    public static <T> void shuffle(UniformRandomProvider rng,
                                   List<T> list) {
        if (list instanceof RandomAccess || list.size() < RANDOM_ACCESS_SIZE_THRESHOLD) {
            // Shuffle list in-place
            for (int i = list.size(); i > 1; i--) {
                swap(list, i - 1, rng.nextInt(i));
            }
        } else {
            // Shuffle as an array
            final Object[] array = list.toArray();
            for (int i = array.length; i > 1; i--) {
                swap(array, i - 1, rng.nextInt(i));
            }

            // Copy back. Use raw types.
            final ListIterator it = list.listIterator();
            for (final Object item : array) {
                it.next();
                it.set(item);
            }
        }
    }","  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LinkedList<ArrayList<String>> linkedList0 = new LinkedList<ArrayList<String>>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      linkedList0.add(arrayList0);
      linkedList0.offer(arrayList0);
      linkedList0.add(arrayList0);
      linkedList0.add(arrayList0);
      ListSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, (List<ArrayList<String>>) linkedList0);
}"
12,,"  public void test0()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
}"
13,,"  public void test1()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
}"
14,,"  public void test2()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
15,"    public UnitSphereSampler(int dimension,
                             UniformRandomProvider rng) {
        delegate = of(rng, dimension);
    }","  public void test3()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
}"
16,"    public double[] sample() {
        return delegate.sample();
    }","  public void test4()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
}"
17,"    public double[] sample() {
        return delegate.sample();
    }","  public void test5()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
}"
18,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test6()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
19,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test7()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
20,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test8()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
}"
21,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test9()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
}"
22,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test10()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
}"
23,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test11()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
}"
24,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test12()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
}"
25,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test13()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
}"
26,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test14()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
27,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test15()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
28,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test16()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
29,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test17()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
30,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test18()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
31,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test19()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
32,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test20()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
33,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test21()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
34,"    public double[] nextVector() {
        return sample();
    }","  public void test22()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
}"
35,"    public double[] nextVector() {
        return sample();
    }","  public void test23()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
}"
36,"    public double[] nextVector() {
        return sample();
    }","  public void test24()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
}"
37,"    public double[] nextVector() {
        return sample();
    }","  public void test25()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
}"
38,"    public double[] nextVector() {
        return sample();
    }","  public void test26()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
}"
39,"    public double[] nextVector() {
        return sample();
    }","  public void test27()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
}"
40,"    public double[] nextVector() {
        return sample();
    }","  public void test28()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
}"
41,"    public double[] nextVector() {
        return sample();
    }","  public void test29()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
}"
42,"    public double[] nextVector() {
        return sample();
    }","  public void test30()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
}"
43,"    public double[] nextVector() {
        return sample();
    }","  public void test31()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
}"
44,"    public double[] nextVector() {
        return sample();
    }","  public void test32()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
}"
45,"    public double[] nextVector() {
        return sample();
    }","  public void test33()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
}"
46,"    public double[] nextVector() {
        return sample();
    }","  public void test34()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
}"
47,"    public double[] nextVector() {
        return sample();
    }","  public void test35()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
}"
48,"    public double[] nextVector() {
        return sample();
    }","  public void test36()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
}"
49,"    public double[] nextVector() {
        return sample();
    }","  public void test37()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
}"
50,"    public double[] nextVector() {
        return sample();
    }","  public void test38()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
}"
51,"    public double[] nextVector() {
        return sample();
    }","  public void test39()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
}"
52,"    public double[] nextVector() {
        return sample();
    }","  public void test40()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
}"
53,"    public double[] nextVector() {
        return sample();
    }","  public void test41()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
}"
54,"    public double[] nextVector() {
        return sample();
    }","  public void test42()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
}"
55,"    public double[] nextVector() {
        return sample();
    }","  public void test43()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
}"
56,"    public double[] nextVector() {
        return sample();
    }","  public void test44()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
}"
57,"    public double[] nextVector() {
        return sample();
    }","  public void test45()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
}"
58,"    public double[] nextVector() {
        return sample();
    }","  public void test46()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
}"
59,"    public double[] nextVector() {
        return sample();
    }","  public void test47()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
}"
60,"    public double[] nextVector() {
        return sample();
    }","  public void test48()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
}"
61,"    public double[] nextVector() {
        return sample();
    }","  public void test49()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
}"
62,"    public double[] nextVector() {
        return sample();
    }","  public void test50()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
}"
63,"    public double[] nextVector() {
        return sample();
    }","  public void test51()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
}"
64,"    public double[] nextVector() {
        return sample();
    }","  public void test52()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
}"
65,"    public double[] nextVector() {
        return sample();
    }","  public void test53()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
}"
66,"    public double[] nextVector() {
        return sample();
    }","  public void test54()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
}"
67,"    public double[] nextVector() {
        return sample();
    }","  public void test55()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
}"
68,"    public double[] nextVector() {
        return sample();
    }","  public void test56()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
}"
69,"    public double[] nextVector() {
        return sample();
    }","  public void test57()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
}"
70,"    public double[] nextVector() {
        return sample();
    }","  public void test58()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
}"
71,"    public double[] nextVector() {
        return sample();
    }","  public void test59()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
}"
72,"    public double[] nextVector() {
        return sample();
    }","  public void test60()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
}"
73,"    public double[] nextVector() {
        return sample();
    }","  public void test61()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
}"
74,"    public double[] nextVector() {
        return sample();
    }","  public void test62()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
}"
75,"    public double[] nextVector() {
        return sample();
    }","  public void test63()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
}"
76,"    public double[] nextVector() {
        return sample();
    }","  public void test64()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
      double[] doubleArray4 = unitSphereSampler0.nextVector();
}"
77,"    public double[] nextVector() {
        return sample();
    }","  public void test65()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
      double[] doubleArray4 = unitSphereSampler0.nextVector();
}"
78,"    public double[] nextVector() {
        return sample();
    }","  public void test66()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
      double[] doubleArray4 = unitSphereSampler0.nextVector();
}"
79,"    public double[] nextVector() {
        return sample();
    }","  public void test67()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
      double[] doubleArray4 = unitSphereSampler0.nextVector();
}"
80,"    public double[] nextVector() {
        return sample();
    }","  public void test68()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
      double[] doubleArray4 = unitSphereSampler0.nextVector();
}"
81,"    public double[] nextVector() {
        return sample();
    }","  public void test69()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
      double[] doubleArray4 = unitSphereSampler0.nextVector();
}"
82,"    public double[] nextVector() {
        return sample();
    }","  public void test70()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
      double[] doubleArray4 = unitSphereSampler0.nextVector();
}"
83,"    public double[] nextVector() {
        return sample();
    }","  public void test71()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
      double[] doubleArray4 = unitSphereSampler0.nextVector();
}"
84,"    public double[] nextVector() {
        return sample();
    }","  public void test72()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
      double[] doubleArray4 = unitSphereSampler0.nextVector();
}"
85,"    public double[] nextVector() {
        return sample();
    }","  public void test73()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
      double[] doubleArray4 = unitSphereSampler0.nextVector();
}"
86,"    public double[] nextVector() {
        return sample();
    }","  public void test74()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
      double[] doubleArray4 = unitSphereSampler0.nextVector();
}"
87,"    public double[] nextVector() {
        return sample();
    }","  public void test75()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
      double[] doubleArray4 = unitSphereSampler0.nextVector();
}"
88,"    public double[] nextVector() {
        return sample();
    }","  public void test76()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
      double[] doubleArray4 = unitSphereSampler0.nextVector();
}"
89,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test77()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
      double[] doubleArray4 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler4 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
90,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test78()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
      double[] doubleArray4 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler4 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
91,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test79()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
      double[] doubleArray4 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler4 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
92,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test80()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
      double[] doubleArray4 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler4 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
93,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test81()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
      double[] doubleArray4 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler4 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
94,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test82()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
      double[] doubleArray4 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler4 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
95,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test83()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
      double[] doubleArray4 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler4 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
96,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test84()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
      double[] doubleArray4 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler4 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
97,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test85()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
      double[] doubleArray4 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler4 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
98,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test86()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
      double[] doubleArray4 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler4 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
99,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test87()  throws Throwable  {
      int int0 = 1914;
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = mockRandom0.nextBoolean();
      mockRandom0.setSeed(1914);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1914, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      boolean boolean1 = jDKRandomWrapper0.nextBoolean();
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 30);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.nextVector();
      double[] doubleArray2 = unitSphereSampler3.nextVector();
      double[] doubleArray3 = unitSphereSampler1.nextVector();
      double[] doubleArray4 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler4 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
100,,"  public void test88()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
}"
101,,"  public void test89()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
102,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test90()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
}"
103,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test91()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
104,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test92()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
105,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test93()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
106,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test94()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
107,"    public double[] nextVector() {
        return sample();
    }","  public void test95()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
}"
108,"    public double[] nextVector() {
        return sample();
    }","  public void test96()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
}"
109,"    public double[] nextVector() {
        return sample();
    }","  public void test97()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
}"
110,"    public double[] nextVector() {
        return sample();
    }","  public void test98()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
}"
111,"    public double[] nextVector() {
        return sample();
    }","  public void test99()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
}"
112,"    public double[] nextVector() {
        return sample();
    }","  public void test100()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
}"
113,"    public double[] nextVector() {
        return sample();
    }","  public void test101()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
}"
114,"    public double[] nextVector() {
        return sample();
    }","  public void test102()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
}"
115,"    public double[] nextVector() {
        return sample();
    }","  public void test103()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
}"
116,"    public double[] nextVector() {
        return sample();
    }","  public void test104()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
}"
117,"    public double[] nextVector() {
        return sample();
    }","  public void test105()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
}"
118,"    public double[] nextVector() {
        return sample();
    }","  public void test106()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
}"
119,"    public double[] nextVector() {
        return sample();
    }","  public void test107()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper(mockRandom0);
}"
120,"    public double[] nextVector() {
        return sample();
    }","  public void test108()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper(mockRandom0);
}"
121,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test109()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper(mockRandom0);
      long long0 = (-1L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 2705);
}"
122,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test110()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper(mockRandom0);
      long long0 = (-1L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 2705);
}"
123,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test111()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper(mockRandom0);
      long long0 = (-1L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 2705);
}"
124,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test112()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper(mockRandom0);
      long long0 = (-1L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 2705);
}"
125,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test113()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper(mockRandom0);
      long long0 = (-1L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 2705);
}"
126,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test114()  throws Throwable  {
      UniformRandomProvider uniformRandomProvider0 = null;
      int int0 = 2866;
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of((UniformRandomProvider) null, 2866);
}"
127,,"  public void test115()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
}"
128,,"  public void test116()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
129,"    public UnitSphereSampler(int dimension,
                             UniformRandomProvider rng) {
        delegate = of(rng, dimension);
    }","  public void test117()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1, jDKRandomWrapper0);
}"
130,"    public double[] sample() {
        return delegate.sample();
    }","  public void test118()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
}"
131,"    public double[] sample() {
        return delegate.sample();
    }","  public void test119()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
}"
132,"    public double[] sample() {
        return delegate.sample();
    }","  public void test120()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
}"
133,,"  public void test121()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
}"
134,,"  public void test122()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
135,"    public UnitSphereSampler(int dimension,
                             UniformRandomProvider rng) {
        delegate = of(rng, dimension);
    }","  public void test123()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
}"
136,"    public double[] nextVector() {
        return sample();
    }","  public void test124()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
}"
137,"    public double[] nextVector() {
        return sample();
    }","  public void test125()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
}"
138,"    public double[] nextVector() {
        return sample();
    }","  public void test126()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
}"
139,"    public double[] nextVector() {
        return sample();
    }","  public void test127()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
}"
140,"    public double[] nextVector() {
        return sample();
    }","  public void test128()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
}"
141,"    public double[] nextVector() {
        return sample();
    }","  public void test129()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
}"
142,"    public double[] nextVector() {
        return sample();
    }","  public void test130()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
}"
143,"    public double[] nextVector() {
        return sample();
    }","  public void test131()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
}"
144,"    public double[] nextVector() {
        return sample();
    }","  public void test132()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
}"
145,"    public double[] nextVector() {
        return sample();
    }","  public void test133()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
}"
146,"    public double[] nextVector() {
        return sample();
    }","  public void test134()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
}"
147,"    public double[] nextVector() {
        return sample();
    }","  public void test135()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
}"
148,"    public double[] nextVector() {
        return sample();
    }","  public void test136()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
}"
149,"    public double[] nextVector() {
        return sample();
    }","  public void test137()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
}"
150,"    public double[] nextVector() {
        return sample();
    }","  public void test138()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
}"
151,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test139()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
}"
152,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test140()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
}"
153,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test141()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
}"
154,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test142()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
}"
155,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test143()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
}"
156,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test144()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
}"
157,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test145()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
158,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test146()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
159,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test147()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
160,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test148()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
161,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test149()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
162,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test150()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
163,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test151()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
164,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test152()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
165,"    public double[] sample() {
        return delegate.sample();
    }","  public void test153()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray3 = unitSphereSampler3.sample();
}"
166,"    public double[] sample() {
        return delegate.sample();
    }","  public void test154()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray3 = unitSphereSampler3.sample();
}"
167,"    public double[] sample() {
        return delegate.sample();
    }","  public void test155()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray3 = unitSphereSampler3.sample();
}"
168,"    public double[] sample() {
        return delegate.sample();
    }","  public void test156()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray3 = unitSphereSampler3.sample();
}"
169,"    public double[] sample() {
        return delegate.sample();
    }","  public void test157()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray3 = unitSphereSampler3.sample();
}"
170,"    public double[] sample() {
        return delegate.sample();
    }","  public void test158()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray3 = unitSphereSampler3.sample();
}"
171,"    public double[] sample() {
        return delegate.sample();
    }","  public void test159()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray3 = unitSphereSampler3.sample();
}"
172,"    public double[] sample() {
        return delegate.sample();
    }","  public void test160()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray3 = unitSphereSampler3.sample();
}"
173,"    public double[] sample() {
        return delegate.sample();
    }","  public void test161()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray3 = unitSphereSampler3.sample();
}"
174,"    public double[] sample() {
        return delegate.sample();
    }","  public void test162()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray3 = unitSphereSampler3.sample();
}"
175,"    public double[] sample() {
        return delegate.sample();
    }","  public void test163()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray3 = unitSphereSampler3.sample();
}"
176,"    public double[] sample() {
        return delegate.sample();
    }","  public void test164()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray3 = unitSphereSampler3.sample();
}"
177,"    public double[] sample() {
        return delegate.sample();
    }","  public void test165()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray3 = unitSphereSampler3.sample();
}"
178,"    public double[] sample() {
        return delegate.sample();
    }","  public void test166()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray3 = unitSphereSampler3.sample();
}"
179,"    public double[] sample() {
        return delegate.sample();
    }","  public void test167()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray3 = unitSphereSampler3.sample();
}"
180,"    public double[] sample() {
        return delegate.sample();
    }","  public void test168()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray3 = unitSphereSampler3.sample();
}"
181,"    public double[] sample() {
        return delegate.sample();
    }","  public void test169()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray3 = unitSphereSampler3.sample();
}"
182,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test170()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray3 = unitSphereSampler3.sample();
      UnitSphereSampler unitSphereSampler4 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
}"
183,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test171()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray3 = unitSphereSampler3.sample();
      UnitSphereSampler unitSphereSampler4 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
}"
184,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test172()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray3 = unitSphereSampler3.sample();
      UnitSphereSampler unitSphereSampler4 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
}"
185,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test173()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray3 = unitSphereSampler3.sample();
      UnitSphereSampler unitSphereSampler4 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
}"
186,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test174()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      mockRandom0.setSeed(0L);
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      double[] doubleArray1 = unitSphereSampler0.nextVector();
      double[] doubleArray2 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler2 = UnitSphereSampler.of(jDKRandomWrapper0, 3);
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray3 = unitSphereSampler3.sample();
      UnitSphereSampler unitSphereSampler4 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
}"
187,"    public UnitSphereSampler(int dimension,
                             UniformRandomProvider rng) {
        delegate = of(rng, dimension);
    }","  public void test175()  throws Throwable  {
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, (UniformRandomProvider) null);
}"
188,,"  public void test176()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
}"
189,,"  public void test177()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
190,,"  public void test178()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
}"
191,"    public UnitSphereSampler(int dimension,
                             UniformRandomProvider rng) {
        delegate = of(rng, dimension);
    }","  public void test179()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
}"
192,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test180()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
}"
193,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test181()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
}"
194,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test182()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
195,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test183()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
196,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test184()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
197,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test185()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
198,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test186()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
199,"    public double[] sample() {
        return delegate.sample();
    }","  public void test187()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
}"
200,"    public double[] sample() {
        return delegate.sample();
    }","  public void test188()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
}"
201,"    public double[] sample() {
        return delegate.sample();
    }","  public void test189()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
}"
202,"    public double[] sample() {
        return delegate.sample();
    }","  public void test190()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
}"
203,"    public double[] sample() {
        return delegate.sample();
    }","  public void test191()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
}"
204,"    public double[] sample() {
        return delegate.sample();
    }","  public void test192()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
}"
205,"    public double[] sample() {
        return delegate.sample();
    }","  public void test193()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
}"
206,"    public double[] sample() {
        return delegate.sample();
    }","  public void test194()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
}"
207,"    public double[] nextVector() {
        return sample();
    }","  public void test195()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
}"
208,"    public double[] nextVector() {
        return sample();
    }","  public void test196()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
}"
209,"    public double[] nextVector() {
        return sample();
    }","  public void test197()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
}"
210,"    public double[] nextVector() {
        return sample();
    }","  public void test198()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
}"
211,"    public double[] nextVector() {
        return sample();
    }","  public void test199()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
}"
212,"    public double[] nextVector() {
        return sample();
    }","  public void test200()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
}"
213,"    public double[] nextVector() {
        return sample();
    }","  public void test201()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
}"
214,"    public double[] nextVector() {
        return sample();
    }","  public void test202()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
}"
215,"    public double[] nextVector() {
        return sample();
    }","  public void test203()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
}"
216,"    public double[] nextVector() {
        return sample();
    }","  public void test204()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
}"
217,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test205()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
}"
218,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test206()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
}"
219,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test207()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
}"
220,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test208()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
}"
221,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test209()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
}"
222,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test210()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
}"
223,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test211()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
}"
224,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test212()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
}"
225,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test213()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
}"
226,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test214()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
}"
227,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test215()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
}"
228,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test216()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
}"
229,"    public double[] sample() {
        return delegate.sample();
    }","  public void test217()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
230,"    public double[] sample() {
        return delegate.sample();
    }","  public void test218()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
231,"    public double[] sample() {
        return delegate.sample();
    }","  public void test219()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
232,"    public double[] sample() {
        return delegate.sample();
    }","  public void test220()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
233,"    public double[] sample() {
        return delegate.sample();
    }","  public void test221()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
234,"    public double[] sample() {
        return delegate.sample();
    }","  public void test222()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
235,"    public double[] sample() {
        return delegate.sample();
    }","  public void test223()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
236,"    public double[] sample() {
        return delegate.sample();
    }","  public void test224()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
237,"    public double[] sample() {
        return delegate.sample();
    }","  public void test225()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
238,"    public double[] sample() {
        return delegate.sample();
    }","  public void test226()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
239,"    public double[] sample() {
        return delegate.sample();
    }","  public void test227()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
240,"    public double[] sample() {
        return delegate.sample();
    }","  public void test228()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
241,"    public double[] sample() {
        return delegate.sample();
    }","  public void test229()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
242,"    public double[] sample() {
        return delegate.sample();
    }","  public void test230()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
243,"    public double[] sample() {
        return delegate.sample();
    }","  public void test231()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-716L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = mockRandom0.nextDouble();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler2.sample();
      double[] doubleArray1 = unitSphereSampler2.nextVector();
      UnitSphereSampler unitSphereSampler3 = unitSphereSampler2.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
244,,"  public void test232()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
}"
245,,"  public void test233()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
246,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test234()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1902);
}"
247,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test235()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1902);
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper((Random) null);
}"
248,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test236()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1902);
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper((Random) null);
}"
249,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test237()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1902);
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper((Random) null);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper1, 2);
}"
250,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test238()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1902);
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper((Random) null);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper1, 2);
}"
251,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test239()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1902);
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper((Random) null);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper1, 2);
}"
252,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test240()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1902);
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper((Random) null);
      UnitSphereSampler unitSphereSampler1 = UnitSphereSampler.of(jDKRandomWrapper1, 2);
}"
253,,"  public void test241()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
}"
254,,"  public void test242()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
255,,"  public void test243()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
}"
256,,"  public void test244()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
}"
257,,"  public void test245()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
}"
258,"    public UnitSphereSampler(int dimension,
                             UniformRandomProvider rng) {
        delegate = of(rng, dimension);
    }","  public void test246()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
}"
259,"    public UnitSphereSampler(int dimension,
                             UniformRandomProvider rng) {
        delegate = of(rng, dimension);
    }","  public void test247()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
}"
260,"    public double[] nextVector() {
        return sample();
    }","  public void test248()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
}"
261,"    public double[] nextVector() {
        return sample();
    }","  public void test249()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
}"
262,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test250()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
263,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test251()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
264,"    public double[] sample() {
        return delegate.sample();
    }","  public void test252()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
}"
265,"    public double[] sample() {
        return delegate.sample();
    }","  public void test253()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
}"
266,"    public double[] sample() {
        return delegate.sample();
    }","  public void test254()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
}"
267,"    public double[] sample() {
        return delegate.sample();
    }","  public void test255()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
}"
268,"    public double[] sample() {
        return delegate.sample();
    }","  public void test256()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
}"
269,"    public double[] sample() {
        return delegate.sample();
    }","  public void test257()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
}"
270,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test258()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler1.withUniformRandomProvider(jDKRandomWrapper0);
}"
271,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test259()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler1.withUniformRandomProvider(jDKRandomWrapper0);
}"
272,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test260()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler1.withUniformRandomProvider(jDKRandomWrapper0);
}"
273,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test261()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler1.withUniformRandomProvider(jDKRandomWrapper0);
}"
274,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test262()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler1.withUniformRandomProvider(jDKRandomWrapper0);
}"
275,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test263()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler1.withUniformRandomProvider(jDKRandomWrapper0);
}"
276,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test264()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler1.withUniformRandomProvider(jDKRandomWrapper0);
}"
277,"    public double[] sample() {
        return delegate.sample();
    }","  public void test265()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler1.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
278,"    public double[] sample() {
        return delegate.sample();
    }","  public void test266()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler1.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
279,"    public double[] sample() {
        return delegate.sample();
    }","  public void test267()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler1.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
280,"    public double[] sample() {
        return delegate.sample();
    }","  public void test268()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler1.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
281,"    public double[] sample() {
        return delegate.sample();
    }","  public void test269()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler1.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
282,"    public double[] sample() {
        return delegate.sample();
    }","  public void test270()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler1.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
283,"    public double[] sample() {
        return delegate.sample();
    }","  public void test271()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler1.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
284,"    public double[] sample() {
        return delegate.sample();
    }","  public void test272()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler1.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
285,"    public double[] sample() {
        return delegate.sample();
    }","  public void test273()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler1.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
286,"    public double[] sample() {
        return delegate.sample();
    }","  public void test274()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler1.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
287,"    public double[] sample() {
        return delegate.sample();
    }","  public void test275()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler1.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
288,"    public double[] sample() {
        return delegate.sample();
    }","  public void test276()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler1.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
289,"    public double[] sample() {
        return delegate.sample();
    }","  public void test277()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler1.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
290,"    public double[] sample() {
        return delegate.sample();
    }","  public void test278()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
      float float0 = jDKRandomWrapper0.nextFloat();
      double double0 = mockRandom0.nextGaussian();
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(2705, jDKRandomWrapper0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
      double[] doubleArray0 = unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray1 = unitSphereSampler1.sample();
      UnitSphereSampler unitSphereSampler2 = unitSphereSampler1.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray2 = unitSphereSampler2.sample();
}"
291,,"  public void test279()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
}"
292,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test280()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1114);
}"
293,,"  public void test281()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
}"
294,,"  public void test282()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
295,"    public UnitSphereSampler(int dimension,
                             UniformRandomProvider rng) {
        delegate = of(rng, dimension);
    }","  public void test283()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(992, jDKRandomWrapper0);
}"
296,"    public double[] sample() {
        return delegate.sample();
    }","  public void test284()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(992, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
}"
297,"    public double[] sample() {
        return delegate.sample();
    }","  public void test285()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(992, jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
}"
298,,"  public void test286()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
}"
299,,"  public void test287()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
300,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test288()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 25);
}"
301,,"  public void test289()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
}"
302,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test290()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 71);
}"
303,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test291()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 71);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
304,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test292()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 71);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
305,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test293()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 71);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
306,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test294()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 71);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
307,,"  public void test295()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4294967296L);
}"
308,,"  public void test296()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4294967296L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
309,"    public UnitSphereSampler(int dimension,
                             UniformRandomProvider rng) {
        delegate = of(rng, dimension);
    }","  public void test297()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4294967296L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1, jDKRandomWrapper0);
}"
310,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test298()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4294967296L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
311,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test299()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4294967296L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1, jDKRandomWrapper0);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
312,,"  public void test300()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-174L));
}"
313,,"  public void test301()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-174L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
314,,"  public void test302()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
}"
315,,"  public void test303()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
316,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test304()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnitSphereSampler.of((UniformRandomProvider) null, (-1));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Dimension must be strictly positive
         //
         verifyException(""org.apache.commons.rng.sampling.UnitSphereSampler"", e);
      }
  }"
317,"    public UnitSphereSampler(int dimension,
                             UniformRandomProvider rng) {
        delegate = of(rng, dimension);
    }","  public void test305()  throws Throwable  {
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(1811, (UniformRandomProvider) null);
}"
318,,"  public void test306()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
}"
319,,"  public void test307()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
320,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test308()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
}"
321,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test309()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
322,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test310()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
323,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test311()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
324,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test312()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
325,"    public double[] sample() {
        return delegate.sample();
    }","  public void test313()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
}"
326,"    public double[] sample() {
        return delegate.sample();
    }","  public void test314()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
}"
327,"    public double[] sample() {
        return delegate.sample();
    }","  public void test315()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
}"
328,"    public double[] sample() {
        return delegate.sample();
    }","  public void test316()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
}"
329,"    public double[] sample() {
        return delegate.sample();
    }","  public void test317()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 1);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double[] doubleArray0 = unitSphereSampler0.sample();
}"
330,"    public static UnitSphereSampler of(UniformRandomProvider rng,
                                       int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitSphereSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitSphereSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitSphereSampler3D(rng);
        }
        return new UnitSphereSamplerND(rng, dimension);
    }","  public void test318()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 2);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      unitSphereSampler1.nextVector();
      unitSphereSampler0.nextVector();
      // Undeclared exception!
      try { 
        UnitSphereSampler.of(jDKRandomWrapper0, (-352));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Dimension must be strictly positive
         //
         verifyException(""org.apache.commons.rng.sampling.UnitSphereSampler"", e);
      }
  }"
331,"    public double[] nextVector() {
        return sample();
    }","  public void test319()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = UnitSphereSampler.of(jDKRandomWrapper0, 28);
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      unitSphereSampler1.nextVector();
      double[] doubleArray0 = unitSphereSampler1.nextVector();
}"
332,"    public UnitSphereSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test320()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitSphereSampler unitSphereSampler0 = new UnitSphereSampler(3, jDKRandomWrapper0);
      unitSphereSampler0.sample();
      unitSphereSampler0.nextVector();
      UnitSphereSampler unitSphereSampler1 = unitSphereSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
333,"    public int[] sample() {
        return SubsetSamplerUtils.partialSample(domain, size, rng, true);
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      PermutationSampler permutationSampler0 = new PermutationSampler(jDKRandomWrapper0, 3450, 3450);
      PermutationSampler permutationSampler1 = permutationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      int[] intArray0 = new int[5];
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0);
      permutationSampler1.sample();
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0, 0, false);
      PermutationSampler.natural(2);
      permutationSampler0.sample();
      // Undeclared exception!
      permutationSampler0.sample();
  }"
334,"    public static void shuffle(UniformRandomProvider rng,
                               int[] list) {
        shuffle(rng, list, list.length - 1, true);
    }","  public void test1()  throws Throwable  {
      int[] intArray0 = PermutationSampler.natural(5152);
      MockRandom mockRandom0 = new MockRandom(5152);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      PermutationSampler permutationSampler0 = new PermutationSampler(jDKRandomWrapper0, 1, 1);
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0, 1, true);
      PermutationSampler permutationSampler1 = permutationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      int[] intArray1 = permutationSampler1.sample();
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0);
      permutationSampler1.sample();
      permutationSampler0.sample();
      PermutationSampler permutationSampler2 = permutationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      int[] intArray2 = permutationSampler2.sample();
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray2, 0, true);
      int[] intArray3 = PermutationSampler.natural(1);
      int[] intArray4 = new int[8];
      intArray4[0] = 0;
      intArray4[1] = 1;
      intArray4[2] = 0;
      intArray4[3] = 5152;
      intArray4[4] = 5152;
      intArray4[5] = 5152;
      intArray4[6] = 1;
      intArray4[7] = 1;
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray4, 0, false);
      PermutationSampler permutationSampler3 = permutationSampler1.withUniformRandomProvider(jDKRandomWrapper0);
      permutationSampler3.withUniformRandomProvider(jDKRandomWrapper0);
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray1);
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray3);
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0, 0, false);
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray3);
      // Undeclared exception!
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0, 1, false);
  }"
335,"    public PermutationSampler(UniformRandomProvider rng,
                              int n,
                              int k) {
        SubsetSamplerUtils.checkSubset(n, k);
        domain = natural(n);
        size = k;
        this.rng = rng;
    }","  public void test2()  throws Throwable  {
      PermutationSampler.natural(4429);
      PermutationSampler.natural(4429);
      UniformRandomProvider uniformRandomProvider0 = null;
      PermutationSampler permutationSampler0 = new PermutationSampler((UniformRandomProvider) null, 4429, 3931);
  }"
336,"    public int[] sample() {
        return SubsetSamplerUtils.partialSample(domain, size, rng, true);
    }","  public void test3()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
      PermutationSampler permutationSampler0 = new PermutationSampler(jDKRandomWrapper0, 514, 514);
      // Undeclared exception!
      try { 
        permutationSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
337,"    public PermutationSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return new PermutationSampler(rng, this);
    }","  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = 4709;
      int int1 = 1;
      PermutationSampler permutationSampler0 = new PermutationSampler(jDKRandomWrapper0, 4709, 1);
      PermutationSampler permutationSampler1 = permutationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      permutationSampler1.withUniformRandomProvider(jDKRandomWrapper1);
  }"
338,"    public static void shuffle(UniformRandomProvider rng,
                               int[] list) {
        shuffle(rng, list, list.length - 1, true);
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int[] intArray0 = null;
      jDKRandomWrapper0.nextFloat();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, (int[]) null, 1435, false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
339,"    public static int[] natural(int n) {
        final int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = i;
        }
        return a;
    }","  public void test6()  throws Throwable  {
      int int0 = 5152;
      int[] intArray0 = PermutationSampler.natural(5152);
      MockRandom mockRandom0 = new MockRandom(5152);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int1 = 1;
      PermutationSampler permutationSampler0 = new PermutationSampler(jDKRandomWrapper0, 1, 1);
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0, 1, true);
      PermutationSampler permutationSampler1 = permutationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      permutationSampler1.sample();
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0);
      permutationSampler1.sample();
      permutationSampler0.sample();
      permutationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      // Undeclared exception!
      PermutationSampler.natural(5152);
  }"
340,"    public static int[] natural(int n) {
        final int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = i;
        }
        return a;
    }","  public void test7()  throws Throwable  {
      int int0 = (-3575);
      // Undeclared exception!
      try { 
        PermutationSampler.natural((-3575));
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.PermutationSampler"", e);
      }
  }"
341,"    public static void shuffle(UniformRandomProvider rng,
                               int[] list) {
        shuffle(rng, list, list.length - 1, true);
    }","  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0, 0, true);
}"
342,"    public int[] sample() {
        return SubsetSamplerUtils.partialSample(domain, size, rng, true);
    }","  public void test9()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      PermutationSampler permutationSampler0 = new PermutationSampler(jDKRandomWrapper0, 1, 1);
      int[] intArray0 = permutationSampler0.sample();
}"
343,"    public static int[] natural(int n) {
        final int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = i;
        }
        return a;
    }","  public void test10()  throws Throwable  {
      int[] intArray0 = PermutationSampler.natural(1);
}"
344,"    public static int[] natural(int n) {
        final int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = i;
        }
        return a;
    }","  public void test11()  throws Throwable  {
      int[] intArray0 = PermutationSampler.natural(0);
}"
345,"    public PermutationSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return new PermutationSampler(rng, this);
    }","  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1494L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      PermutationSampler permutationSampler0 = new PermutationSampler(jDKRandomWrapper0, 1733, 1733);
      PermutationSampler permutationSampler1 = permutationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
346,"    public PermutationSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return new PermutationSampler(rng, this);
    }","  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1494L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      PermutationSampler permutationSampler0 = new PermutationSampler(jDKRandomWrapper0, 1733, 1733);
      PermutationSampler permutationSampler1 = permutationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
347,"    public PermutationSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return new PermutationSampler(rng, this);
    }","  public void test14()  throws Throwable  {
      int[] intArray0 = PermutationSampler.natural(4);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0);
      PermutationSampler permutationSampler0 = new PermutationSampler(jDKRandomWrapper0, 32, 4);
      permutationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      PermutationSampler permutationSampler1 = permutationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      PermutationSampler permutationSampler2 = permutationSampler1.withUniformRandomProvider(jDKRandomWrapper0);
}"
348,"    public static void shuffle(UniformRandomProvider rng,
                               int[] list) {
        shuffle(rng, list, list.length - 1, true);
    }","  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1834);
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0);
}"
349,"    public static void shuffle(UniformRandomProvider rng,
                               int[] list) {
        shuffle(rng, list, list.length - 1, true);
    }","  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int[] intArray0 = new int[3];
      intArray0[0] = 32;
      intArray0[1] = 2476;
      intArray0[2] = 0;
      jDKRandomWrapper0.nextLong((long) 32);
      jDKRandomWrapper0.nextInt();
      // Undeclared exception!
      try { 
        PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0, (-1), false);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
350,"    public static void shuffle(UniformRandomProvider rng,
                               int[] list) {
        shuffle(rng, list, list.length - 1, true);
    }","  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 266;
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0, 0, false);
}"
351,"    public static void shuffle(UniformRandomProvider rng,
                               int[] list) {
        shuffle(rng, list, list.length - 1, true);
    }","  public void test18()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 569;
      intArray0[2] = 3042;
      intArray0[3] = 0;
      intArray0[4] = 684;
      int int0 = 1;
      intArray0[5] = 1;
      int int1 = (-1750);
      intArray0[6] = (-1750);
      intArray0[7] = (-1844);
      // Undeclared exception!
      try { 
        PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
352,"    public static void shuffle(UniformRandomProvider rng,
                               int[] list) {
        shuffle(rng, list, list.length - 1, true);
    }","  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, (int[]) null, 1480, true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
353,"    public static void shuffle(UniformRandomProvider rng,
                               int[] list) {
        shuffle(rng, list, list.length - 1, true);
    }","  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1615L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0, (-3247), false);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
354,"    public static void shuffle(UniformRandomProvider rng,
                               int[] list) {
        shuffle(rng, list, list.length - 1, true);
    }","  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2027L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      PermutationSampler permutationSampler0 = new PermutationSampler(jDKRandomWrapper0, 1888, 1888);
      int[] intArray0 = permutationSampler0.sample();
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0, 1888, false);
}"
355,"    public static void shuffle(UniformRandomProvider rng,
                               int[] list) {
        shuffle(rng, list, list.length - 1, true);
    }","  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1954L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int[] intArray0 = new int[0];
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0);
}"
356,"    public PermutationSampler(UniformRandomProvider rng,
                              int n,
                              int k) {
        SubsetSamplerUtils.checkSubset(n, k);
        domain = natural(n);
        size = k;
        this.rng = rng;
    }","  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      PermutationSampler permutationSampler0 = null;
      try {
        permutationSampler0 = new PermutationSampler(jDKRandomWrapper0, (-1155), 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // n <= 0 : n=-1155
         //
         verifyException(""org.apache.commons.rng.sampling.SubsetSamplerUtils"", e);
      }
  }"
357,"    public static void shuffle(UniformRandomProvider rng,
                               int[] list) {
        shuffle(rng, list, list.length - 1, true);
    }","  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      PermutationSampler permutationSampler0 = new PermutationSampler(jDKRandomWrapper0, 137, 137);
      PermutationSampler permutationSampler1 = permutationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      int[] intArray0 = new int[6];
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0);
      int[] intArray1 = permutationSampler1.sample();
      PermutationSampler.shuffle((UniformRandomProvider) jDKRandomWrapper0, intArray0, 0, false);
}"
358,"    public T sample() {
        return items.get(sampler.sample());
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1879.3437560904;
      LinkedList<AliasMethodDiscreteSampler> linkedList0 = new LinkedList<AliasMethodDiscreteSampler>();
      linkedList0.add((AliasMethodDiscreteSampler) null);
      DiscreteProbabilityCollectionSampler<AliasMethodDiscreteSampler> discreteProbabilityCollectionSampler0 = new DiscreteProbabilityCollectionSampler<AliasMethodDiscreteSampler>(jDKRandomWrapper0, linkedList0, doubleArray0);
      AliasMethodDiscreteSampler aliasMethodDiscreteSampler0 = discreteProbabilityCollectionSampler0.sample();
}"
359,"    public T sample() {
        return items.get(sampler.sample());
    }","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      double[] doubleArray0 = new double[1];
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      doubleArray0[0] = 1879.3437560904;
      DiscreteProbabilityCollectionSampler<Integer> discreteProbabilityCollectionSampler0 = new DiscreteProbabilityCollectionSampler<Integer>(jDKRandomWrapper0, linkedList0, doubleArray0);
      Integer integer1 = discreteProbabilityCollectionSampler0.sample();
}"
360,"    public DiscreteProbabilityCollectionSampler(UniformRandomProvider rng,
                                                Map<T, Double> collection) {
        if (collection.isEmpty()) {
            throw new IllegalArgumentException(EMPTY_COLLECTION);
        }

        // Extract the items and probabilities
        final int size = collection.size();
        items = new ArrayList<>(size);
        final double[] probabilities = new double[size];

        int count = 0;
        for (final Map.Entry<T, Double> e : collection.entrySet()) {
            items.add(e.getKey());
            probabilities[count++] = e.getValue();
        }

        // Delegate sampling
        sampler = createSampler(rng, probabilities);
    }","  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(207L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DiscreteProbabilityCollectionSampler<Double> discreteProbabilityCollectionSampler0 = null;
      try {
        discreteProbabilityCollectionSampler0 = new DiscreteProbabilityCollectionSampler<Double>(jDKRandomWrapper0, (Map<Double, Double>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
361,"    public DiscreteProbabilityCollectionSampler(UniformRandomProvider rng,
                                                Map<T, Double> collection) {
        if (collection.isEmpty()) {
            throw new IllegalArgumentException(EMPTY_COLLECTION);
        }

        // Extract the items and probabilities
        final int size = collection.size();
        items = new ArrayList<>(size);
        final double[] probabilities = new double[size];

        int count = 0;
        for (final Map.Entry<T, Double> e : collection.entrySet()) {
            items.add(e.getKey());
            probabilities[count++] = e.getValue();
        }

        // Delegate sampling
        sampler = createSampler(rng, probabilities);
    }","  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      DiscreteProbabilityCollectionSampler<InverseTransformDiscreteSampler> discreteProbabilityCollectionSampler0 = null;
      try {
        discreteProbabilityCollectionSampler0 = new DiscreteProbabilityCollectionSampler<InverseTransformDiscreteSampler>(jDKRandomWrapper0, (List<InverseTransformDiscreteSampler>) null, doubleArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
362,"    public DiscreteProbabilityCollectionSampler(UniformRandomProvider rng,
                                                Map<T, Double> collection) {
        if (collection.isEmpty()) {
            throw new IllegalArgumentException(EMPTY_COLLECTION);
        }

        // Extract the items and probabilities
        final int size = collection.size();
        items = new ArrayList<>(size);
        final double[] probabilities = new double[size];

        int count = 0;
        for (final Map.Entry<T, Double> e : collection.entrySet()) {
            items.add(e.getKey());
            probabilities[count++] = e.getValue();
        }

        // Delegate sampling
        sampler = createSampler(rng, probabilities);
    }","  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LinkedList<RejectionInversionZipfSampler> linkedList0 = new LinkedList<RejectionInversionZipfSampler>();
      double[] doubleArray0 = new double[4];
      linkedList0.add((RejectionInversionZipfSampler) null);
      DiscreteProbabilityCollectionSampler<RejectionInversionZipfSampler> discreteProbabilityCollectionSampler0 = null;
      try {
        discreteProbabilityCollectionSampler0 = new DiscreteProbabilityCollectionSampler<RejectionInversionZipfSampler>(jDKRandomWrapper0, linkedList0, doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Size mismatch: 4 != 1
         //
         verifyException(""org.apache.commons.rng.sampling.DiscreteProbabilityCollectionSampler"", e);
      }
  }"
363,"    public DiscreteProbabilityCollectionSampler(UniformRandomProvider rng,
                                                Map<T, Double> collection) {
        if (collection.isEmpty()) {
            throw new IllegalArgumentException(EMPTY_COLLECTION);
        }

        // Extract the items and probabilities
        final int size = collection.size();
        items = new ArrayList<>(size);
        final double[] probabilities = new double[size];

        int count = 0;
        for (final Map.Entry<T, Double> e : collection.entrySet()) {
            items.add(e.getKey());
            probabilities[count++] = e.getValue();
        }

        // Delegate sampling
        sampler = createSampler(rng, probabilities);
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[1];
      LinkedList<AliasMethodDiscreteSampler> linkedList0 = new LinkedList<AliasMethodDiscreteSampler>();
      DiscreteProbabilityCollectionSampler<AliasMethodDiscreteSampler> discreteProbabilityCollectionSampler0 = null;
      try {
        discreteProbabilityCollectionSampler0 = new DiscreteProbabilityCollectionSampler<AliasMethodDiscreteSampler>(jDKRandomWrapper0, linkedList0, doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Empty collection
         //
         verifyException(""org.apache.commons.rng.sampling.DiscreteProbabilityCollectionSampler"", e);
      }
  }"
364,"    public DiscreteProbabilityCollectionSampler(UniformRandomProvider rng,
                                                Map<T, Double> collection) {
        if (collection.isEmpty()) {
            throw new IllegalArgumentException(EMPTY_COLLECTION);
        }

        // Extract the items and probabilities
        final int size = collection.size();
        items = new ArrayList<>(size);
        final double[] probabilities = new double[size];

        int count = 0;
        for (final Map.Entry<T, Double> e : collection.entrySet()) {
            items.add(e.getKey());
            probabilities[count++] = e.getValue();
        }

        // Delegate sampling
        sampler = createSampler(rng, probabilities);
    }","  public void test6()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
      HashMap<RejectionInversionZipfSampler, Double> hashMap0 = new HashMap<RejectionInversionZipfSampler, Double>();
      DiscreteProbabilityCollectionSampler<RejectionInversionZipfSampler> discreteProbabilityCollectionSampler0 = null;
      try {
        discreteProbabilityCollectionSampler0 = new DiscreteProbabilityCollectionSampler<RejectionInversionZipfSampler>(jDKRandomWrapper0, hashMap0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Empty collection
         //
         verifyException(""org.apache.commons.rng.sampling.DiscreteProbabilityCollectionSampler"", e);
      }
  }"
365,"    public T sample() {
        return items.get(sampler.sample());
    }","  public void test7()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
      HashMap<GuideTableDiscreteSampler, Double> hashMap0 = new HashMap<GuideTableDiscreteSampler, Double>();
      GuideTableDiscreteSampler guideTableDiscreteSampler0 = mock(GuideTableDiscreteSampler.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(1968.0159);
      hashMap0.put(guideTableDiscreteSampler0, double0);
      DiscreteProbabilityCollectionSampler<GuideTableDiscreteSampler> discreteProbabilityCollectionSampler0 = new DiscreteProbabilityCollectionSampler<GuideTableDiscreteSampler>(jDKRandomWrapper0, hashMap0);
      // Undeclared exception!
      try { 
        discreteProbabilityCollectionSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.JDKRandomWrapper"", e);
      }
  }"
366,"    public DiscreteProbabilityCollectionSampler<T> withUniformRandomProvider(UniformRandomProvider rng) {
        return new DiscreteProbabilityCollectionSampler<>(rng, this);
    }","  public void test8()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
      HashMap<GuideTableDiscreteSampler, Double> hashMap0 = new HashMap<GuideTableDiscreteSampler, Double>();
      GuideTableDiscreteSampler guideTableDiscreteSampler0 = mock(GuideTableDiscreteSampler.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(1968.0159);
      hashMap0.put(guideTableDiscreteSampler0, double0);
      DiscreteProbabilityCollectionSampler<GuideTableDiscreteSampler> discreteProbabilityCollectionSampler0 = new DiscreteProbabilityCollectionSampler<GuideTableDiscreteSampler>(jDKRandomWrapper0, hashMap0);
      DiscreteProbabilityCollectionSampler<GuideTableDiscreteSampler> discreteProbabilityCollectionSampler1 = discreteProbabilityCollectionSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
367,,"  public void test0()  throws Throwable  {
      CompositeSamplers.DiscreteProbabilitySampler compositeSamplers_DiscreteProbabilitySampler0 = CompositeSamplers.DiscreteProbabilitySampler.ALIAS_METHOD;
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 7.05123102792795E-20;
      DiscreteSampler discreteSampler0 = compositeSamplers_DiscreteProbabilitySampler0.create(jDKRandomWrapper0, doubleArray0);
}"
368,,"  public void test1()  throws Throwable  {
      CompositeSamplers.DiscreteProbabilitySampler compositeSamplers_DiscreteProbabilitySampler0 = CompositeSamplers.DiscreteProbabilitySampler.LOOKUP_TABLE;
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[14];
      // Undeclared exception!
      try { 
        compositeSamplers_DiscreteProbabilitySampler0.create(jDKRandomWrapper0, doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid sum of probabilities: 0.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.InternalUtils"", e);
      }
  }"
369,"    public static Builder<SharedStateDiscreteSampler> newSharedStateDiscreteSamplerBuilder() {
        return new SamplerBuilder<>(
            SamplerBuilder.Specialisation.SHARED_STATE_SAMPLER, SharedStateDiscreteSamplerFactory.INSTANCE);
    }","  public void test2()  throws Throwable  {
      CompositeSamplers.Builder<SharedStateDiscreteSampler> compositeSamplers_Builder0 = CompositeSamplers.newSharedStateDiscreteSamplerBuilder();
}"
370,"    public static Builder<LongSampler> newLongSamplerBuilder() {
        return new SamplerBuilder<>(
            SamplerBuilder.Specialisation.NONE, LongSamplerFactory.INSTANCE);
    }","  public void test3()  throws Throwable  {
      CompositeSamplers.Builder<LongSampler> compositeSamplers_Builder0 = CompositeSamplers.newLongSamplerBuilder();
}"
371,"    public static Builder<SharedStateLongSampler> newSharedStateLongSamplerBuilder() {
        return new SamplerBuilder<>(
            SamplerBuilder.Specialisation.SHARED_STATE_SAMPLER, SharedStateLongSamplerFactory.INSTANCE);
    }","  public void test4()  throws Throwable  {
      CompositeSamplers.Builder<SharedStateLongSampler> compositeSamplers_Builder0 = CompositeSamplers.newSharedStateLongSamplerBuilder();
}"
372,"    public static Builder<SharedStateContinuousSampler> newSharedStateContinuousSamplerBuilder() {
        return new SamplerBuilder<>(
            SamplerBuilder.Specialisation.SHARED_STATE_SAMPLER, SharedStateContinuousSamplerFactory.INSTANCE);
    }","  public void test5()  throws Throwable  {
      CompositeSamplers.Builder<SharedStateContinuousSampler> compositeSamplers_Builder0 = CompositeSamplers.newSharedStateContinuousSamplerBuilder();
}"
373,"    public static <T> Builder<ObjectSampler<T>> newObjectSamplerBuilder() {
        final SamplerBuilder.SamplerFactory<ObjectSampler<T>> factory = ObjectSamplerFactory.instance();
        return new SamplerBuilder<>(
            SamplerBuilder.Specialisation.NONE, factory);
    }","  public void test6()  throws Throwable  {
      CompositeSamplers.Builder<ObjectSampler<ContinuousUniformSampler>> compositeSamplers_Builder0 = CompositeSamplers.newObjectSamplerBuilder();
}"
374,"    public static Builder<ContinuousSampler> newContinuousSamplerBuilder() {
        return new SamplerBuilder<>(
            SamplerBuilder.Specialisation.NONE, ContinuousSamplerFactory.INSTANCE);
    }","  public void test7()  throws Throwable  {
      CompositeSamplers.Builder<ContinuousSampler> compositeSamplers_Builder0 = CompositeSamplers.newContinuousSamplerBuilder();
}"
375,"    public static Builder<DiscreteSampler> newDiscreteSamplerBuilder() {
        return new SamplerBuilder<>(
            SamplerBuilder.Specialisation.NONE, DiscreteSamplerFactory.INSTANCE);
    }","  public void test8()  throws Throwable  {
      CompositeSamplers.Builder<DiscreteSampler> compositeSamplers_Builder0 = CompositeSamplers.newDiscreteSamplerBuilder();
}"
376,,"  public void test9()  throws Throwable  {
      CompositeSamplers.DiscreteProbabilitySampler compositeSamplers_DiscreteProbabilitySampler0 = CompositeSamplers.DiscreteProbabilitySampler.GUIDE_TABLE;
      double[] doubleArray0 = new double[12];
      // Undeclared exception!
      try { 
        compositeSamplers_DiscreteProbabilitySampler0.create((UniformRandomProvider) null, doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid sum of probabilities: 0.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.GuideTableDiscreteSampler"", e);
      }
  }"
377,"    public static <T> Builder<SharedStateObjectSampler<T>> newSharedStateObjectSamplerBuilder() {
        final SamplerBuilder.SamplerFactory<SharedStateObjectSampler<T>> factory =
            SharedStateObjectSamplerFactory.instance();
        return new SamplerBuilder<>(
            SamplerBuilder.Specialisation.SHARED_STATE_SAMPLER, factory);
    }","  public void test10()  throws Throwable  {
      CompositeSamplers.Builder<SharedStateObjectSampler<LargeMeanPoissonSampler>> compositeSamplers_Builder0 = CompositeSamplers.newSharedStateObjectSamplerBuilder();
}"
378,"    public int[] sample() {
        return SubsetSamplerUtils.partialSample(domain, steps, rng, upper);
    }","  public void test0()  throws Throwable  {
      CombinationSampler combinationSampler0 = new CombinationSampler((UniformRandomProvider) null, 32, 32);
      int[] intArray0 = combinationSampler0.sample();
}"
379,"    public CombinationSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return new CombinationSampler(rng, this);
    }","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      CombinationSampler combinationSampler0 = new CombinationSampler(jDKRandomWrapper0, 894, 894);
      combinationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      CombinationSampler combinationSampler1 = combinationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      CombinationSampler combinationSampler2 = combinationSampler1.withUniformRandomProvider(jDKRandomWrapper0);
      CombinationSampler combinationSampler3 = combinationSampler2.withUniformRandomProvider(jDKRandomWrapper0);
      CombinationSampler combinationSampler4 = combinationSampler3.withUniformRandomProvider(jDKRandomWrapper0);
      combinationSampler1.withUniformRandomProvider(jDKRandomWrapper0);
      CombinationSampler combinationSampler5 = combinationSampler1.withUniformRandomProvider(jDKRandomWrapper0);
      combinationSampler5.withUniformRandomProvider(jDKRandomWrapper0);
      combinationSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      combinationSampler4.withUniformRandomProvider(jDKRandomWrapper0);
      // Undeclared exception!
      combinationSampler2.withUniformRandomProvider(jDKRandomWrapper0);
  }"
380,"    public CombinationSampler(UniformRandomProvider rng,
                              int n,
                              int k) {
        SubsetSamplerUtils.checkSubset(n, k);
        domain = PermutationSampler.natural(n);
        // The sample can be optimised by only performing the first k or (n - k) steps
        // from a full Fisher-Yates shuffle from the end of the domain to the start.
        // The upper positions will then contain a random sample from the domain. The
        // lower half is then by definition also a random sample (just not in a random order).
        // The sample is then picked using the upper or lower half depending which
        // makes the number of steps smaller.
        upper = k <= n / 2;
        steps = upper ? k : n - k;
        this.rng = rng;
    }","  public void test2()  throws Throwable  {
      CombinationSampler combinationSampler0 = new CombinationSampler((UniformRandomProvider) null, 1793, 1793);
      CombinationSampler combinationSampler1 = new CombinationSampler((UniformRandomProvider) null, 1793, 1793);
      CombinationSampler combinationSampler2 = combinationSampler0.withUniformRandomProvider((UniformRandomProvider) null);
      combinationSampler2.withUniformRandomProvider((UniformRandomProvider) null);
      CombinationSampler combinationSampler3 = new CombinationSampler((UniformRandomProvider) null, 1793, 1793);
      CombinationSampler combinationSampler4 = new CombinationSampler((UniformRandomProvider) null, 1793, 1793);
  }"
381,"    public CombinationSampler(UniformRandomProvider rng,
                              int n,
                              int k) {
        SubsetSamplerUtils.checkSubset(n, k);
        domain = PermutationSampler.natural(n);
        // The sample can be optimised by only performing the first k or (n - k) steps
        // from a full Fisher-Yates shuffle from the end of the domain to the start.
        // The upper positions will then contain a random sample from the domain. The
        // lower half is then by definition also a random sample (just not in a random order).
        // The sample is then picked using the upper or lower half depending which
        // makes the number of steps smaller.
        upper = k <= n / 2;
        steps = upper ? k : n - k;
        this.rng = rng;
    }","  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(833L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      CombinationSampler combinationSampler0 = null;
      try {
        combinationSampler0 = new CombinationSampler(jDKRandomWrapper0, (-2289), 724);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // n <= 0 : n=-2289
         //
         verifyException(""org.apache.commons.rng.sampling.SubsetSamplerUtils"", e);
      }
  }"
382,"    public int[] sample() {
        return SubsetSamplerUtils.partialSample(domain, steps, rng, upper);
    }","  public void test4()  throws Throwable  {
      CombinationSampler combinationSampler0 = new CombinationSampler((UniformRandomProvider) null, 3169, 68);
      // Undeclared exception!
      try { 
        combinationSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.SubsetSamplerUtils"", e);
      }
  }"
383,"    static int[] partialSample(int[] domain,
                               int steps,
                               UniformRandomProvider rng,
                               boolean upper) {
        // Shuffle from the end but limit to the number of steps.
        // Note: If 'steps' is the full length of the array then the final
        // swap is redundant so can be skipped.
        int swapCount = Math.min(steps, domain.length - 1);
        for (int i = domain.length - 1; swapCount > 0; i--, swapCount--) {
            // Swap index i with any position down to 0 (including itself)
            swap(domain, i, rng.nextInt(i + 1));
        }
        final int size = upper ? steps : domain.length - steps;
        final int from = upper ? domain.length - steps : 0;
        final int[] result = new int[size];
        System.arraycopy(domain, from, result, 0, size);
        return result;
    }","  public void test0()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 4404;
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        SubsetSamplerUtils.partialSample(intArray0, 474, jDKRandomWrapper0, true);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }"
384,"    static int[] partialSample(int[] domain,
                               int steps,
                               UniformRandomProvider rng,
                               boolean upper) {
        // Shuffle from the end but limit to the number of steps.
        // Note: If 'steps' is the full length of the array then the final
        // swap is redundant so can be skipped.
        int swapCount = Math.min(steps, domain.length - 1);
        for (int i = domain.length - 1; swapCount > 0; i--, swapCount--) {
            // Swap index i with any position down to 0 (including itself)
            swap(domain, i, rng.nextInt(i + 1));
        }
        final int size = upper ? steps : domain.length - steps;
        final int from = upper ? domain.length - steps : 0;
        final int[] result = new int[size];
        System.arraycopy(domain, from, result, 0, size);
        return result;
    }","  public void test1()  throws Throwable  {
      int[] intArray0 = new int[4];
      MockRandom mockRandom0 = new MockRandom(959);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int[] intArray1 = SubsetSamplerUtils.partialSample(intArray0, 1, jDKRandomWrapper0, false);
}"
385,"    static int[] partialSample(int[] domain,
                               int steps,
                               UniformRandomProvider rng,
                               boolean upper) {
        // Shuffle from the end but limit to the number of steps.
        // Note: If 'steps' is the full length of the array then the final
        // swap is redundant so can be skipped.
        int swapCount = Math.min(steps, domain.length - 1);
        for (int i = domain.length - 1; swapCount > 0; i--, swapCount--) {
            // Swap index i with any position down to 0 (including itself)
            swap(domain, i, rng.nextInt(i + 1));
        }
        final int size = upper ? steps : domain.length - steps;
        final int from = upper ? domain.length - steps : 0;
        final int[] result = new int[size];
        System.arraycopy(domain, from, result, 0, size);
        return result;
    }","  public void test2()  throws Throwable  {
      int[] intArray0 = new int[1];
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        SubsetSamplerUtils.partialSample(intArray0, (-2532), jDKRandomWrapper0, true);
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.SubsetSamplerUtils"", e);
      }
  }"
386,"    static void checkSubset(int n,
                            int k) {
        if (n <= 0) {
            throw new IllegalArgumentException(""n <= 0 : n="" + n);
        }
        if (k <= 0) {
            throw new IllegalArgumentException(""k <= 0 : k="" + k);
        }
        if (k > n) {
            throw new IllegalArgumentException(""k > n : k="" + k + "", n="" + n);
        }
    }","  public void test3()  throws Throwable  {
      SubsetSamplerUtils.checkSubset(2859, 30);
  }"
387,"    static void checkSubset(int n,
                            int k) {
        if (n <= 0) {
            throw new IllegalArgumentException(""n <= 0 : n="" + n);
        }
        if (k <= 0) {
            throw new IllegalArgumentException(""k <= 0 : k="" + k);
        }
        if (k > n) {
            throw new IllegalArgumentException(""k > n : k="" + k + "", n="" + n);
        }
    }","  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        SubsetSamplerUtils.checkSubset(1, (-1938));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // k <= 0 : k=-1938
         //
         verifyException(""org.apache.commons.rng.sampling.SubsetSamplerUtils"", e);
      }
  }"
388,"    static void checkSubset(int n,
                            int k) {
        if (n <= 0) {
            throw new IllegalArgumentException(""n <= 0 : n="" + n);
        }
        if (k <= 0) {
            throw new IllegalArgumentException(""k <= 0 : k="" + k);
        }
        if (k > n) {
            throw new IllegalArgumentException(""k > n : k="" + k + "", n="" + n);
        }
    }","  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        SubsetSamplerUtils.checkSubset((-32), (-32));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // n <= 0 : n=-32
         //
         verifyException(""org.apache.commons.rng.sampling.SubsetSamplerUtils"", e);
      }
  }"
389,"    static void swap(int[] array, int i, int j) {
        final int tmp = array[i];
        array[i] = array[j];
        array[j] = tmp;
    }","  public void test6()  throws Throwable  {
      int[] intArray0 = new int[5];
      SubsetSamplerUtils.swap(intArray0, 0, 0);
}"
390,"    static int[] partialSample(int[] domain,
                               int steps,
                               UniformRandomProvider rng,
                               boolean upper) {
        // Shuffle from the end but limit to the number of steps.
        // Note: If 'steps' is the full length of the array then the final
        // swap is redundant so can be skipped.
        int swapCount = Math.min(steps, domain.length - 1);
        for (int i = domain.length - 1; swapCount > 0; i--, swapCount--) {
            // Swap index i with any position down to 0 (including itself)
            swap(domain, i, rng.nextInt(i + 1));
        }
        final int size = upper ? steps : domain.length - steps;
        final int from = upper ? domain.length - steps : 0;
        final int[] result = new int[size];
        System.arraycopy(domain, from, result, 0, size);
        return result;
    }","  public void test7()  throws Throwable  {
      int[] intArray0 = new int[9];
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int[] intArray1 = SubsetSamplerUtils.partialSample(intArray0, 0, jDKRandomWrapper0, true);
}"
391,"    static void swap(int[] array, int i, int j) {
        final int tmp = array[i];
        array[i] = array[j];
        array[j] = tmp;
    }","  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        SubsetSamplerUtils.swap((int[]) null, 212, (-2587));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.SubsetSamplerUtils"", e);
      }
  }"
392,"    static void swap(int[] array, int i, int j) {
        final int tmp = array[i];
        array[i] = array[j];
        array[j] = tmp;
    }","  public void test9()  throws Throwable  {
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        SubsetSamplerUtils.swap(intArray0, (-362), 0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -362
         //
         verifyException(""org.apache.commons.rng.sampling.SubsetSamplerUtils"", e);
      }
  }"
393,"    static int[] partialSample(int[] domain,
                               int steps,
                               UniformRandomProvider rng,
                               boolean upper) {
        // Shuffle from the end but limit to the number of steps.
        // Note: If 'steps' is the full length of the array then the final
        // swap is redundant so can be skipped.
        int swapCount = Math.min(steps, domain.length - 1);
        for (int i = domain.length - 1; swapCount > 0; i--, swapCount--) {
            // Swap index i with any position down to 0 (including itself)
            swap(domain, i, rng.nextInt(i + 1));
        }
        final int size = upper ? steps : domain.length - steps;
        final int from = upper ? domain.length - steps : 0;
        final int[] result = new int[size];
        System.arraycopy(domain, from, result, 0, size);
        return result;
    }","  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        SubsetSamplerUtils.partialSample((int[]) null, 0, jDKRandomWrapper0, true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.SubsetSamplerUtils"", e);
      }
  }"
394,"    static void checkSubset(int n,
                            int k) {
        if (n <= 0) {
            throw new IllegalArgumentException(""n <= 0 : n="" + n);
        }
        if (k <= 0) {
            throw new IllegalArgumentException(""k <= 0 : k="" + k);
        }
        if (k > n) {
            throw new IllegalArgumentException(""k > n : k="" + k + "", n="" + n);
        }
    }","  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        SubsetSamplerUtils.checkSubset(9, 3182);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // k > n : k=3182, n=9
         //
         verifyException(""org.apache.commons.rng.sampling.SubsetSamplerUtils"", e);
      }
  }"
395,"    static void checkSubset(int n,
                            int k) {
        if (n <= 0) {
            throw new IllegalArgumentException(""n <= 0 : n="" + n);
        }
        if (k <= 0) {
            throw new IllegalArgumentException(""k <= 0 : k="" + k);
        }
        if (k > n) {
            throw new IllegalArgumentException(""k > n : k="" + k + "", n="" + n);
        }
    }","  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        SubsetSamplerUtils.checkSubset(88, 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // k <= 0 : k=0
         //
         verifyException(""org.apache.commons.rng.sampling.SubsetSamplerUtils"", e);
      }
  }"
396,"    static void checkSubset(int n,
                            int k) {
        if (n <= 0) {
            throw new IllegalArgumentException(""n <= 0 : n="" + n);
        }
        if (k <= 0) {
            throw new IllegalArgumentException(""k <= 0 : k="" + k);
        }
        if (k > n) {
            throw new IllegalArgumentException(""k > n : k="" + k + "", n="" + n);
        }
    }","  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        SubsetSamplerUtils.checkSubset(0, (-1022));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // n <= 0 : n=0
         //
         verifyException(""org.apache.commons.rng.sampling.SubsetSamplerUtils"", e);
      }
  }"
397,"    static void checkSubset(int n,
                            int k) {
        if (n <= 0) {
            throw new IllegalArgumentException(""n <= 0 : n="" + n);
        }
        if (k <= 0) {
            throw new IllegalArgumentException(""k <= 0 : k="" + k);
        }
        if (k > n) {
            throw new IllegalArgumentException(""k > n : k="" + k + "", n="" + n);
        }
    }","  public void test14()  throws Throwable  {
      SubsetSamplerUtils.checkSubset(319, 319);
  }"
398,"    public T sample() {
        return items.get(rng.nextInt(items.size()));
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      CollectionSampler<String> collectionSampler0 = new CollectionSampler<String>(jDKRandomWrapper0, linkedList0);
      String string0 = collectionSampler0.sample();
}"
399,"    public T sample() {
        return items.get(rng.nextInt(items.size()));
    }","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      CollectionSampler<Integer> collectionSampler0 = new CollectionSampler<Integer>(jDKRandomWrapper0, linkedList0);
      Integer integer1 = collectionSampler0.sample();
}"
400,"    public CollectionSampler(UniformRandomProvider rng,
                             Collection<T> collection) {
        if (collection.isEmpty()) {
            throw new IllegalArgumentException(""Empty collection"");
        }

        this.rng = rng;
        items = new ArrayList<>(collection);
    }","  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      CollectionSampler<Object> collectionSampler0 = null;
      try {
        collectionSampler0 = new CollectionSampler<Object>(jDKRandomWrapper0, (Collection<Object>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
401,"    public CollectionSampler(UniformRandomProvider rng,
                             Collection<T> collection) {
        if (collection.isEmpty()) {
            throw new IllegalArgumentException(""Empty collection"");
        }

        this.rng = rng;
        items = new ArrayList<>(collection);
    }","  public void test3()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CollectionSampler<Integer> collectionSampler0 = null;
      try {
        collectionSampler0 = new CollectionSampler<Integer>(jDKRandomWrapper0, linkedList0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Empty collection
         //
         verifyException(""org.apache.commons.rng.sampling.CollectionSampler"", e);
      }
  }"
402,"    public T sample() {
        return items.get(rng.nextInt(items.size()));
    }","  public void test4()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(0);
      linkedList0.offer(integer0);
      CollectionSampler<Object> collectionSampler0 = new CollectionSampler<Object>((UniformRandomProvider) null, linkedList0);
      // Undeclared exception!
      try { 
        collectionSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.CollectionSampler"", e);
      }
  }"
403,"    public CollectionSampler<T> withUniformRandomProvider(UniformRandomProvider rng) {
        return new CollectionSampler<>(rng, this);
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      CollectionSampler<String> collectionSampler0 = new CollectionSampler<String>(jDKRandomWrapper0, linkedList0);
      CollectionSampler<String> collectionSampler1 = collectionSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
404,"    public double sample() {
        final long j = rng.nextLong();
        final int i = ((int) j) & LAST;
        if (Math.abs(j) < K[i]) {
            // This branch is called about 0.985086 times per sample.
            return j * W[i];
        }
        return fix(j, i);
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratNormalizedGaussianSampler zigguratNormalizedGaussianSampler0 = new ZigguratNormalizedGaussianSampler(jDKRandomWrapper0);
      Random.setNextRandom((-2147483647));
      double double0 = zigguratNormalizedGaussianSampler0.sample();
}"
405,"    public double sample() {
        final long j = rng.nextLong();
        final int i = ((int) j) & LAST;
        if (Math.abs(j) < K[i]) {
            // This branch is called about 0.985086 times per sample.
            return j * W[i];
        }
        return fix(j, i);
    }","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratNormalizedGaussianSampler zigguratNormalizedGaussianSampler0 = new ZigguratNormalizedGaussianSampler(jDKRandomWrapper0);
      Random.setNextRandom((-2147483647));
      double double0 = zigguratNormalizedGaussianSampler0.sample();
      double double1 = zigguratNormalizedGaussianSampler0.sample();
}"
406,"    public String toString() {
        return ""Ziggurat normalized Gaussian deviate ["" + rng.toString() + ""]"";
    }","  public void test2()  throws Throwable  {
      ZigguratNormalizedGaussianSampler zigguratNormalizedGaussianSampler0 = ZigguratNormalizedGaussianSampler.of((UniformRandomProvider) null);
      // Undeclared exception!
      try { 
        zigguratNormalizedGaussianSampler0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
407,"    public double sample() {
        final long j = rng.nextLong();
        final int i = ((int) j) & LAST;
        if (Math.abs(j) < K[i]) {
            // This branch is called about 0.985086 times per sample.
            return j * W[i];
        }
        return fix(j, i);
    }","  public void test3()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      ZigguratNormalizedGaussianSampler zigguratNormalizedGaussianSampler0 = new ZigguratNormalizedGaussianSampler(jDKRandomWrapper0);
      // Undeclared exception!
      try { 
        zigguratNormalizedGaussianSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.JDKRandomWrapper"", e);
      }
  }"
408,"    public double sample() {
        final long j = rng.nextLong();
        final int i = ((int) j) & LAST;
        if (Math.abs(j) < K[i]) {
            // This branch is called about 0.985086 times per sample.
            return j * W[i];
        }
        return fix(j, i);
    }","  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratNormalizedGaussianSampler zigguratNormalizedGaussianSampler0 = ZigguratNormalizedGaussianSampler.of((UniformRandomProvider) jDKRandomWrapper0);
      double double0 = zigguratNormalizedGaussianSampler0.sample();
}"
409,"    public double sample() {
        final long j = rng.nextLong();
        final int i = ((int) j) & LAST;
        if (Math.abs(j) < K[i]) {
            // This branch is called about 0.985086 times per sample.
            return j * W[i];
        }
        return fix(j, i);
    }","  public void test5()  throws Throwable  {
      Random.setNextRandom(257);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratNormalizedGaussianSampler zigguratNormalizedGaussianSampler0 = new ZigguratNormalizedGaussianSampler(jDKRandomWrapper0);
      double double0 = zigguratNormalizedGaussianSampler0.sample();
}"
410,"    public String toString() {
        return ""Ziggurat normalized Gaussian deviate ["" + rng.toString() + ""]"";
    }","  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratNormalizedGaussianSampler zigguratNormalizedGaussianSampler0 = new ZigguratNormalizedGaussianSampler(jDKRandomWrapper0);
      String string0 = zigguratNormalizedGaussianSampler0.toString();
}"
411,"    public SharedStateContinuousSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return new ZigguratNormalizedGaussianSampler(rng);
    }","  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratNormalizedGaussianSampler zigguratNormalizedGaussianSampler0 = new ZigguratNormalizedGaussianSampler(jDKRandomWrapper0);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = zigguratNormalizedGaussianSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
412,"    public double sample() {
        return scale / Math.pow(rng.nextDouble(), oneOverShape);
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextLong();
      InverseTransformParetoSampler inverseTransformParetoSampler0 = new InverseTransformParetoSampler(jDKRandomWrapper0, 1435.90338914078, 1435.90338914078);
      double double0 = inverseTransformParetoSampler0.sample();
}"
413,"    public static SharedStateContinuousSampler of(UniformRandomProvider rng,
                                                  double scale,
                                                  double shape) {
        return new InverseTransformParetoSampler(rng, scale, shape);
    }","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = InverseTransformParetoSampler.of(jDKRandomWrapper0, 768.6171016417, 768.6171016417);
}"
414,"    public String toString() {
        return ""[Inverse method for Pareto distribution "" + rng.toString() + ""]"";
    }","  public void test2()  throws Throwable  {
      InverseTransformParetoSampler inverseTransformParetoSampler0 = new InverseTransformParetoSampler((UniformRandomProvider) null, 1.0, 1.0);
      // Undeclared exception!
      try { 
        inverseTransformParetoSampler0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
415,"    public double sample() {
        return scale / Math.pow(rng.nextDouble(), oneOverShape);
    }","  public void test3()  throws Throwable  {
      InverseTransformParetoSampler inverseTransformParetoSampler0 = new InverseTransformParetoSampler((UniformRandomProvider) null, 1075.9367933543, 1075.9367933543);
      // Undeclared exception!
      try { 
        inverseTransformParetoSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.InverseTransformParetoSampler"", e);
      }
  }"
416,"    public InverseTransformParetoSampler(UniformRandomProvider rng,
                                         double scale,
                                         double shape) {
        super(null);
        if (scale <= 0) {
            throw new IllegalArgumentException(""scale is not strictly positive: "" + scale);
        }
        if (shape <= 0) {
            throw new IllegalArgumentException(""shape is not strictly positive: "" + shape);
        }
        this.rng = rng;
        this.scale = scale;
        this.oneOverShape = 1 / shape;
    }","  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      InverseTransformParetoSampler inverseTransformParetoSampler0 = null;
      try {
        inverseTransformParetoSampler0 = new InverseTransformParetoSampler(jDKRandomWrapper0, 0L, 0L);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // scale is not strictly positive: 0.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.InverseTransformParetoSampler"", e);
      }
  }"
417,"    public InverseTransformParetoSampler(UniformRandomProvider rng,
                                         double scale,
                                         double shape) {
        super(null);
        if (scale <= 0) {
            throw new IllegalArgumentException(""scale is not strictly positive: "" + scale);
        }
        if (shape <= 0) {
            throw new IllegalArgumentException(""shape is not strictly positive: "" + shape);
        }
        this.rng = rng;
        this.scale = scale;
        this.oneOverShape = 1 / shape;
    }","  public void test5()  throws Throwable  {
      InverseTransformParetoSampler inverseTransformParetoSampler0 = null;
      try {
        inverseTransformParetoSampler0 = new InverseTransformParetoSampler((UniformRandomProvider) null, 1047.47051, (-1715.9689407315568));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // shape is not strictly positive: -1715.9689407315568
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.InverseTransformParetoSampler"", e);
      }
  }"
418,"    public static SharedStateContinuousSampler of(UniformRandomProvider rng,
                                                  double scale,
                                                  double shape) {
        return new InverseTransformParetoSampler(rng, scale, shape);
    }","  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        InverseTransformParetoSampler.of(jDKRandomWrapper0, (-1554.861), 134.4509303063411);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // scale is not strictly positive: -1554.861
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.InverseTransformParetoSampler"", e);
      }
  }"
419,"    public SharedStateContinuousSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return new InverseTransformParetoSampler(rng, this);
    }","  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      InverseTransformParetoSampler inverseTransformParetoSampler0 = new InverseTransformParetoSampler(jDKRandomWrapper0, 134.4509303063411, 134.4509303063411);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = inverseTransformParetoSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
420,"    public String toString() {
        return ""[Inverse method for Pareto distribution "" + rng.toString() + ""]"";
    }","  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      InverseTransformParetoSampler inverseTransformParetoSampler0 = new InverseTransformParetoSampler(jDKRandomWrapper0, 134.4509303063411, 134.4509303063411);
      String string0 = inverseTransformParetoSampler0.toString();
}"
421,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double mean) {
        return new SmallMeanPoissonSampler(rng, mean);
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(318L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = SmallMeanPoissonSampler.of(jDKRandomWrapper0, 7);
}"
422,"    public String toString() {
        return ""Small Mean Poisson deviate ["" + rng.toString() + ""]"";
    }","  public void test1()  throws Throwable  {
      SmallMeanPoissonSampler smallMeanPoissonSampler0 = new SmallMeanPoissonSampler((UniformRandomProvider) null, 1.0);
      // Undeclared exception!
      try { 
        smallMeanPoissonSampler0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
423,"    public int sample() {
        int n = 0;
        double r = 1;

        while (n < limit) {
            r *= rng.nextDouble();
            if (r >= p0) {
                n++;
            } else {
                break;
            }
        }
        return n;
    }","  public void test2()  throws Throwable  {
      SmallMeanPoissonSampler smallMeanPoissonSampler0 = new SmallMeanPoissonSampler((UniformRandomProvider) null, 1.0);
      // Undeclared exception!
      try { 
        smallMeanPoissonSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.SmallMeanPoissonSampler"", e);
      }
  }"
424,"    public SmallMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        this.rng = rng;
        if (mean <= 0) {
            throw new IllegalArgumentException(""mean is not strictly positive: "" + mean);
        }
        p0 = Math.exp(-mean);
        if (p0 > 0) {
            // The returned sample is bounded by 1000 * mean
            limit = (int) Math.ceil(1000 * mean);
        } else {
            // This excludes NaN values for the mean
            throw new IllegalArgumentException(""No p(x=0) probability for mean: "" + mean);
        }
    }","  public void test3()  throws Throwable  {
      SmallMeanPoissonSampler smallMeanPoissonSampler0 = null;
      try {
        smallMeanPoissonSampler0 = new SmallMeanPoissonSampler((UniformRandomProvider) null, 1000.0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No p(x=0) probability for mean: 1000.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.SmallMeanPoissonSampler"", e);
      }
  }"
425,"    public SmallMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        this.rng = rng;
        if (mean <= 0) {
            throw new IllegalArgumentException(""mean is not strictly positive: "" + mean);
        }
        p0 = Math.exp(-mean);
        if (p0 > 0) {
            // The returned sample is bounded by 1000 * mean
            limit = (int) Math.ceil(1000 * mean);
        } else {
            // This excludes NaN values for the mean
            throw new IllegalArgumentException(""No p(x=0) probability for mean: "" + mean);
        }
    }","  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SmallMeanPoissonSampler smallMeanPoissonSampler0 = null;
      try {
        smallMeanPoissonSampler0 = new SmallMeanPoissonSampler(jDKRandomWrapper0, 0L);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // mean is not strictly positive: 0.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.SmallMeanPoissonSampler"", e);
      }
  }"
426,"    public int sample() {
        int n = 0;
        double r = 1;

        while (n < limit) {
            r *= rng.nextDouble();
            if (r >= p0) {
                n++;
            } else {
                break;
            }
        }
        return n;
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(198L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextLong(198L);
      SmallMeanPoissonSampler smallMeanPoissonSampler0 = new SmallMeanPoissonSampler(jDKRandomWrapper0, 198L);
      int int0 = smallMeanPoissonSampler0.sample();
}"
427,"    public int sample() {
        int n = 0;
        double r = 1;

        while (n < limit) {
            r *= rng.nextDouble();
            if (r >= p0) {
                n++;
            } else {
                break;
            }
        }
        return n;
    }","  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SmallMeanPoissonSampler smallMeanPoissonSampler0 = new SmallMeanPoissonSampler(jDKRandomWrapper0, 1.0E-4);
      int int0 = smallMeanPoissonSampler0.sample();
}"
428,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double mean) {
        return new SmallMeanPoissonSampler(rng, mean);
    }","  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(198L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        SmallMeanPoissonSampler.of(jDKRandomWrapper0, 0L);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // mean is not strictly positive: 0.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.SmallMeanPoissonSampler"", e);
      }
  }"
429,"    public String toString() {
        return ""Small Mean Poisson deviate ["" + rng.toString() + ""]"";
    }","  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SmallMeanPoissonSampler smallMeanPoissonSampler0 = new SmallMeanPoissonSampler(jDKRandomWrapper0, 1.0E-4);
      String string0 = smallMeanPoissonSampler0.toString();
}"
430,"    public SharedStateDiscreteSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return new SmallMeanPoissonSampler(rng, this);
    }","  public void test9()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SmallMeanPoissonSampler smallMeanPoissonSampler0 = new SmallMeanPoissonSampler(jDKRandomWrapper0, 1.0E-4);
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = smallMeanPoissonSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
431,"    public int sample() {
        return function.inverseCumulativeProbability(rng.nextDouble());
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DiscreteInverseCumulativeProbabilityFunction discreteInverseCumulativeProbabilityFunction0 = mock(DiscreteInverseCumulativeProbabilityFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(discreteInverseCumulativeProbabilityFunction0).inverseCumulativeProbability(anyDouble());
      InverseTransformDiscreteSampler inverseTransformDiscreteSampler0 = new InverseTransformDiscreteSampler(jDKRandomWrapper0, discreteInverseCumulativeProbabilityFunction0);
      int int0 = inverseTransformDiscreteSampler0.sample();
}"
432,"    public int sample() {
        return function.inverseCumulativeProbability(rng.nextDouble());
    }","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DiscreteInverseCumulativeProbabilityFunction discreteInverseCumulativeProbabilityFunction0 = mock(DiscreteInverseCumulativeProbabilityFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1250).when(discreteInverseCumulativeProbabilityFunction0).inverseCumulativeProbability(anyDouble());
      InverseTransformDiscreteSampler inverseTransformDiscreteSampler0 = new InverseTransformDiscreteSampler(jDKRandomWrapper0, discreteInverseCumulativeProbabilityFunction0);
      int int0 = inverseTransformDiscreteSampler0.sample();
}"
433,"    public String toString() {
        return function.toString() + "" (inverse method) ["" + rng.toString() + ""]"";
    }","  public void test2()  throws Throwable  {
      DiscreteInverseCumulativeProbabilityFunction discreteInverseCumulativeProbabilityFunction0 = mock(DiscreteInverseCumulativeProbabilityFunction.class, new ViolatedAssumptionAnswer());
      InverseTransformDiscreteSampler inverseTransformDiscreteSampler0 = new InverseTransformDiscreteSampler((UniformRandomProvider) null, discreteInverseCumulativeProbabilityFunction0);
      // Undeclared exception!
      try { 
        inverseTransformDiscreteSampler0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
434,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                DiscreteInverseCumulativeProbabilityFunction function) {
        return new InverseTransformDiscreteSampler(rng, function);
    }","  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = InverseTransformDiscreteSampler.of(jDKRandomWrapper0, (DiscreteInverseCumulativeProbabilityFunction) null);
      // Undeclared exception!
      try { 
        ((InverseTransformDiscreteSampler) sharedStateDiscreteSampler0).sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.InverseTransformDiscreteSampler"", e);
      }
  }"
435,"    public String toString() {
        return function.toString() + "" (inverse method) ["" + rng.toString() + ""]"";
    }","  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DiscreteInverseCumulativeProbabilityFunction discreteInverseCumulativeProbabilityFunction0 = mock(DiscreteInverseCumulativeProbabilityFunction.class, new ViolatedAssumptionAnswer());
      InverseTransformDiscreteSampler inverseTransformDiscreteSampler0 = new InverseTransformDiscreteSampler(jDKRandomWrapper0, discreteInverseCumulativeProbabilityFunction0);
      String string0 = inverseTransformDiscreteSampler0.toString();
}"
436,"    public int sample() {
        return function.inverseCumulativeProbability(rng.nextDouble());
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DiscreteInverseCumulativeProbabilityFunction discreteInverseCumulativeProbabilityFunction0 = mock(DiscreteInverseCumulativeProbabilityFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-976)).when(discreteInverseCumulativeProbabilityFunction0).inverseCumulativeProbability(anyDouble());
      InverseTransformDiscreteSampler inverseTransformDiscreteSampler0 = new InverseTransformDiscreteSampler(jDKRandomWrapper0, discreteInverseCumulativeProbabilityFunction0);
      int int0 = inverseTransformDiscreteSampler0.sample();
}"
437,"    public SharedStateDiscreteSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return new InverseTransformDiscreteSampler(rng, function);
    }","  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DiscreteInverseCumulativeProbabilityFunction discreteInverseCumulativeProbabilityFunction0 = mock(DiscreteInverseCumulativeProbabilityFunction.class, new ViolatedAssumptionAnswer());
      InverseTransformDiscreteSampler inverseTransformDiscreteSampler0 = new InverseTransformDiscreteSampler(jDKRandomWrapper0, discreteInverseCumulativeProbabilityFunction0);
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = inverseTransformDiscreteSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
438,"    public ChengBetaSampler(UniformRandomProvider rng,
                            double alpha,
                            double beta) {
        super(null);
        delegate = of(rng, alpha, beta);
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 1.7976931348623157E308, 593.308172212851);
  }"
439,"    public ChengBetaSampler(UniformRandomProvider rng,
                            double alpha,
                            double beta) {
        super(null);
        delegate = of(rng, alpha, beta);
    }","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ChengBetaSampler chengBetaSampler0 = null;
      try {
        chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 1L, 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // beta is not strictly positive: 0.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.ChengBetaSampler"", e);
      }
  }"
440,"    public static SharedStateContinuousSampler of(UniformRandomProvider rng,
                                                  double alpha,
                                                  double beta) {
        if (alpha <= 0) {
            throw new IllegalArgumentException(""alpha is not strictly positive: "" + alpha);
        }
        if (beta <= 0) {
            throw new IllegalArgumentException(""beta is not strictly positive: "" + beta);
        }

        // Choose the algorithm.
        final double a = Math.min(alpha, beta);
        final double b = Math.max(alpha, beta);
        final boolean aIsAlphaShape = a == alpha;

        return a > 1 ?
            // BB algorithm
            new ChengBBBetaSampler(rng, aIsAlphaShape, a, b) :
            // The BC algorithm is deliberately invoked with reversed parameters
            // as the argument order is: max(alpha,beta), min(alpha,beta).
            // Also invert the 'a is alpha' flag.
            new ChengBCBetaSampler(rng, !aIsAlphaShape, b, a);
    }","  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        ChengBetaSampler.of(jDKRandomWrapper0, 0.0, 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // alpha is not strictly positive: 0.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.ChengBetaSampler"", e);
      }
  }"
441,"    public SharedStateContinuousSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 1L, 1L);
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper(mockRandom0);
      chengBetaSampler0.withUniformRandomProvider(jDKRandomWrapper1);
  }"
442,"    public SharedStateContinuousSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return delegate.withUniformRandomProvider(rng);
    }","  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 321.9616321517238, 1043.17743872);
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper(mockRandom0);
      chengBetaSampler0.withUniformRandomProvider(jDKRandomWrapper1);
  }"
443,"    public double sample() {
        return delegate.sample();
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextFloat();
      jDKRandomWrapper0.nextFloat();
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 1.2827650848312727E-19, 2.6795015188771505E-19);
      jDKRandomWrapper0.nextFloat();
      chengBetaSampler0.sample();
      chengBetaSampler0.sample();
  }"
444,"    public double sample() {
        return delegate.sample();
    }","  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextDouble();
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 1.0842021724855044E-19, 2311.7325576);
      chengBetaSampler0.sample();
  }"
445,"    public double sample() {
        return delegate.sample();
    }","  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(217);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 261.8172233000825, 1.7976931348623157E308);
      chengBetaSampler0.sample();
  }"
446,"    public double sample() {
        return delegate.sample();
    }","  public void test8()  throws Throwable  {
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler((UniformRandomProvider) null, 1.7976931348623157E308, 1.7976931348623157E308);
      // Undeclared exception!
      try { 
        chengBetaSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.ChengBetaSampler$ChengBBBetaSampler"", e);
      }
  }"
447,"    public ChengBetaSampler(UniformRandomProvider rng,
                            double alpha,
                            double beta) {
        super(null);
        delegate = of(rng, alpha, beta);
    }","  public void test9()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-695L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ChengBetaSampler chengBetaSampler0 = null;
      try {
        chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, (-695L), 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // alpha is not strictly positive: -695.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.ChengBetaSampler"", e);
      }
  }"
448,"    public static SharedStateContinuousSampler of(UniformRandomProvider rng,
                                                  double alpha,
                                                  double beta) {
        if (alpha <= 0) {
            throw new IllegalArgumentException(""alpha is not strictly positive: "" + alpha);
        }
        if (beta <= 0) {
            throw new IllegalArgumentException(""beta is not strictly positive: "" + beta);
        }

        // Choose the algorithm.
        final double a = Math.min(alpha, beta);
        final double b = Math.max(alpha, beta);
        final boolean aIsAlphaShape = a == alpha;

        return a > 1 ?
            // BB algorithm
            new ChengBBBetaSampler(rng, aIsAlphaShape, a, b) :
            // The BC algorithm is deliberately invoked with reversed parameters
            // as the argument order is: max(alpha,beta), min(alpha,beta).
            // Also invert the 'a is alpha' flag.
            new ChengBCBetaSampler(rng, !aIsAlphaShape, b, a);
    }","  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ChengBetaSampler.of(jDKRandomWrapper0, 1941.7, 1941.7);
  }"
449,"    public static SharedStateContinuousSampler of(UniformRandomProvider rng,
                                                  double alpha,
                                                  double beta) {
        if (alpha <= 0) {
            throw new IllegalArgumentException(""alpha is not strictly positive: "" + alpha);
        }
        if (beta <= 0) {
            throw new IllegalArgumentException(""beta is not strictly positive: "" + beta);
        }

        // Choose the algorithm.
        final double a = Math.min(alpha, beta);
        final double b = Math.max(alpha, beta);
        final boolean aIsAlphaShape = a == alpha;

        return a > 1 ?
            // BB algorithm
            new ChengBBBetaSampler(rng, aIsAlphaShape, a, b) :
            // The BC algorithm is deliberately invoked with reversed parameters
            // as the argument order is: max(alpha,beta), min(alpha,beta).
            // Also invert the 'a is alpha' flag.
            new ChengBCBetaSampler(rng, !aIsAlphaShape, b, a);
    }","  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ChengBetaSampler.of(jDKRandomWrapper0, 4324.298479049, 1L);
  }"
450,"    public static SharedStateContinuousSampler of(UniformRandomProvider rng,
                                                  double alpha,
                                                  double beta) {
        if (alpha <= 0) {
            throw new IllegalArgumentException(""alpha is not strictly positive: "" + alpha);
        }
        if (beta <= 0) {
            throw new IllegalArgumentException(""beta is not strictly positive: "" + beta);
        }

        // Choose the algorithm.
        final double a = Math.min(alpha, beta);
        final double b = Math.max(alpha, beta);
        final boolean aIsAlphaShape = a == alpha;

        return a > 1 ?
            // BB algorithm
            new ChengBBBetaSampler(rng, aIsAlphaShape, a, b) :
            // The BC algorithm is deliberately invoked with reversed parameters
            // as the argument order is: max(alpha,beta), min(alpha,beta).
            // Also invert the 'a is alpha' flag.
            new ChengBCBetaSampler(rng, !aIsAlphaShape, b, a);
    }","  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ChengBetaSampler.of(jDKRandomWrapper0, 0.3333333333333333, 983.1);
  }"
451,"    public static SharedStateContinuousSampler of(UniformRandomProvider rng,
                                                  double alpha,
                                                  double beta) {
        if (alpha <= 0) {
            throw new IllegalArgumentException(""alpha is not strictly positive: "" + alpha);
        }
        if (beta <= 0) {
            throw new IllegalArgumentException(""beta is not strictly positive: "" + beta);
        }

        // Choose the algorithm.
        final double a = Math.min(alpha, beta);
        final double b = Math.max(alpha, beta);
        final boolean aIsAlphaShape = a == alpha;

        return a > 1 ?
            // BB algorithm
            new ChengBBBetaSampler(rng, aIsAlphaShape, a, b) :
            // The BC algorithm is deliberately invoked with reversed parameters
            // as the argument order is: max(alpha,beta), min(alpha,beta).
            // Also invert the 'a is alpha' flag.
            new ChengBCBetaSampler(rng, !aIsAlphaShape, b, a);
    }","  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        ChengBetaSampler.of(jDKRandomWrapper0, (byte)29, (-1.3783261914707137));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // beta is not strictly positive: -1.3783261914707137
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.ChengBetaSampler"", e);
      }
  }"
452,"    public double sample() {
        return delegate.sample();
    }","  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextFloat();
      jDKRandomWrapper0.nextFloat();
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 1.2827650848312727E-19, 2.6795015188771505E-19);
      // Undeclared exception!
      chengBetaSampler0.sample();
  }"
453,"    public double sample() {
        return delegate.sample();
    }","  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextFloat();
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 1L, 1L);
      jDKRandomWrapper0.nextLong();
      double double0 = chengBetaSampler0.sample();
}"
454,"    public double sample() {
        return delegate.sample();
    }","  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextFloat();
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 1L, 1L);
      jDKRandomWrapper0.nextLong();
      double double0 = chengBetaSampler0.sample();
      byte[] byteArray0 = new byte[3];
      jDKRandomWrapper0.nextBytes(byteArray0);
      double double1 = chengBetaSampler0.sample();
}"
455,"    public double sample() {
        return delegate.sample();
    }","  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextFloat();
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 4L, 4L);
      jDKRandomWrapper0.nextLong();
      chengBetaSampler0.sample();
      byte[] byteArray0 = new byte[3];
      jDKRandomWrapper0.nextBytes(byteArray0);
      chengBetaSampler0.sample();
      double double0 = chengBetaSampler0.sample();
}"
456,"    public double sample() {
        return delegate.sample();
    }","  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 4L, 4L);
      double double0 = chengBetaSampler0.sample();
}"
457,"    public String toString() {
        return delegate.toString();
    }","  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 1L, 1L);
      String string0 = chengBetaSampler0.toString();
}"
458,"    public double sample() {
        return delegate.sample();
    }","  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ChengBetaSampler chengBetaSampler0 = new ChengBetaSampler(jDKRandomWrapper0, 3794.945007038072, 0.2);
      double double0 = chengBetaSampler0.sample();
}"
459,"    public static double logGamma(double x) {
        // Stripped-down version of the same method defined in ""Commons Math"":
        // Unused ""if"" branches (for when x < 8) have been removed here since
        // this method is only used (by class ""InternalUtils"") in order to
        // compute log(n!) for x > 20.

        final double sum = lanczos(x);
        final double tmp = x + LANCZOS_G + 0.5;
        return (x + 0.5) * Math.log(tmp) - tmp +  HALF_LOG_2_PI + Math.log(sum / x);
    }","  public void test0()  throws Throwable  {
      double double0 = InternalGamma.logGamma(1.0);
}"
460,"    public static double logGamma(double x) {
        // Stripped-down version of the same method defined in ""Commons Math"":
        // Unused ""if"" branches (for when x < 8) have been removed here since
        // this method is only used (by class ""InternalUtils"") in order to
        // compute log(n!) for x > 20.

        final double sum = lanczos(x);
        final double tmp = x + LANCZOS_G + 0.5;
        return (x + 0.5) * Math.log(tmp) - tmp +  HALF_LOG_2_PI + Math.log(sum / x);
    }","  public void test1()  throws Throwable  {
      double double0 = InternalGamma.logGamma(913.07505);
}"
461,"    public SharedStateContinuousSampler withUniformRandomProvider(UniformRandomProvider rng) {
        // Direct return of the optimised sampler
        return delegate.withUniformRandomProvider(rng);
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      AhrensDieterMarsagliaTsangGammaSampler ahrensDieterMarsagliaTsangGammaSampler0 = new AhrensDieterMarsagliaTsangGammaSampler(jDKRandomWrapper0, 1L, 1L);
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper(mockRandom0);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = ahrensDieterMarsagliaTsangGammaSampler0.withUniformRandomProvider(jDKRandomWrapper1);
}"
462,"    public double sample() {
        return delegate.sample();
    }","  public void test1()  throws Throwable  {
      Random.setNextRandom((-2146479637));
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      AhrensDieterMarsagliaTsangGammaSampler ahrensDieterMarsagliaTsangGammaSampler0 = new AhrensDieterMarsagliaTsangGammaSampler(jDKRandomWrapper0, 5176.596, 1.5115823505412761E-19);
      double double0 = ahrensDieterMarsagliaTsangGammaSampler0.sample();
}"
463,"    public SharedStateContinuousSampler withUniformRandomProvider(UniformRandomProvider rng) {
        // Direct return of the optimised sampler
        return delegate.withUniformRandomProvider(rng);
    }","  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      AhrensDieterMarsagliaTsangGammaSampler ahrensDieterMarsagliaTsangGammaSampler0 = new AhrensDieterMarsagliaTsangGammaSampler(jDKRandomWrapper0, 1.6408287335525592E-20, 1.6408287335525592E-20);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = ahrensDieterMarsagliaTsangGammaSampler0.withUniformRandomProvider((UniformRandomProvider) null);
}"
464,"    public double sample() {
        return delegate.sample();
    }","  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      byte[] byteArray0 = new byte[3];
      mockRandom0.nextBytes(byteArray0);
      jDKRandomWrapper0.nextDouble();
      mockRandom0.nextBytes(byteArray0);
      jDKRandomWrapper0.nextLong();
      jDKRandomWrapper0.nextLong();
      AhrensDieterMarsagliaTsangGammaSampler ahrensDieterMarsagliaTsangGammaSampler0 = new AhrensDieterMarsagliaTsangGammaSampler(jDKRandomWrapper0, 0.9887451339365031, 2759.4);
      double double0 = ahrensDieterMarsagliaTsangGammaSampler0.sample();
}"
465,"    public double sample() {
        return delegate.sample();
    }","  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      AhrensDieterMarsagliaTsangGammaSampler ahrensDieterMarsagliaTsangGammaSampler0 = new AhrensDieterMarsagliaTsangGammaSampler(jDKRandomWrapper0, 1.6408287335525592E-20, 3.951094848074217E-20);
      double double0 = ahrensDieterMarsagliaTsangGammaSampler0.sample();
}"
466,"    public static SharedStateContinuousSampler of(UniformRandomProvider rng,
                                                  double alpha,
                                                  double theta) {
        // Each sampler should check the input arguments.
        return alpha < 1 ?
                new AhrensDieterGammaSampler(rng, alpha, theta) :
                new MarsagliaTsangGammaSampler(rng, alpha, theta);
    }","  public void test5()  throws Throwable  {
      SharedStateContinuousSampler sharedStateContinuousSampler0 = AhrensDieterMarsagliaTsangGammaSampler.of((UniformRandomProvider) null, 1.0, 1.0);
}"
467,"    public double sample() {
        return delegate.sample();
    }","  public void test6()  throws Throwable  {
      AhrensDieterMarsagliaTsangGammaSampler ahrensDieterMarsagliaTsangGammaSampler0 = new AhrensDieterMarsagliaTsangGammaSampler((UniformRandomProvider) null, 1865.22893, 1865.22893);
      // Undeclared exception!
      try { 
        ahrensDieterMarsagliaTsangGammaSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
468,"    public AhrensDieterMarsagliaTsangGammaSampler(UniformRandomProvider rng,
                                                  double alpha,
                                                  double theta) {
        super(null);
        delegate = of(rng, alpha, theta);
    }","  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      AhrensDieterMarsagliaTsangGammaSampler ahrensDieterMarsagliaTsangGammaSampler0 = null;
      try {
        ahrensDieterMarsagliaTsangGammaSampler0 = new AhrensDieterMarsagliaTsangGammaSampler(jDKRandomWrapper0, 0.0, (-260.7194888));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // alpha is not strictly positive: 0.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.AhrensDieterMarsagliaTsangGammaSampler$BaseGammaSampler"", e);
      }
  }"
469,"    public double sample() {
        return delegate.sample();
    }","  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      AhrensDieterMarsagliaTsangGammaSampler ahrensDieterMarsagliaTsangGammaSampler0 = new AhrensDieterMarsagliaTsangGammaSampler(jDKRandomWrapper0, 0.818022918642018, 0.818022918642018);
      ahrensDieterMarsagliaTsangGammaSampler0.sample();
      mockRandom0.nextLong();
      double double0 = ahrensDieterMarsagliaTsangGammaSampler0.sample();
}"
470,"    public double sample() {
        return delegate.sample();
    }","  public void test9()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      AhrensDieterMarsagliaTsangGammaSampler ahrensDieterMarsagliaTsangGammaSampler0 = new AhrensDieterMarsagliaTsangGammaSampler(jDKRandomWrapper0, 0.818022918642018, 0.818022918642018);
      ahrensDieterMarsagliaTsangGammaSampler0.sample();
      mockRandom0.nextLong();
      double double0 = ahrensDieterMarsagliaTsangGammaSampler0.sample();
      double double1 = ahrensDieterMarsagliaTsangGammaSampler0.sample();
}"
471,"    public static SharedStateContinuousSampler of(UniformRandomProvider rng,
                                                  double alpha,
                                                  double theta) {
        // Each sampler should check the input arguments.
        return alpha < 1 ?
                new AhrensDieterGammaSampler(rng, alpha, theta) :
                new MarsagliaTsangGammaSampler(rng, alpha, theta);
    }","  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        AhrensDieterMarsagliaTsangGammaSampler.of(jDKRandomWrapper0, 385.463594541, (-2138.280205192793));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // theta is not strictly positive: -2138.280205192793
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.AhrensDieterMarsagliaTsangGammaSampler$BaseGammaSampler"", e);
      }
  }"
472,"    public static SharedStateContinuousSampler of(UniformRandomProvider rng,
                                                  double alpha,
                                                  double theta) {
        // Each sampler should check the input arguments.
        return alpha < 1 ?
                new AhrensDieterGammaSampler(rng, alpha, theta) :
                new MarsagliaTsangGammaSampler(rng, alpha, theta);
    }","  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        AhrensDieterMarsagliaTsangGammaSampler.of(jDKRandomWrapper0, 0.0, 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // alpha is not strictly positive: 0.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.AhrensDieterMarsagliaTsangGammaSampler$BaseGammaSampler"", e);
      }
  }"
473,"    public String toString() {
        return delegate.toString();
    }","  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      AhrensDieterMarsagliaTsangGammaSampler ahrensDieterMarsagliaTsangGammaSampler0 = new AhrensDieterMarsagliaTsangGammaSampler(jDKRandomWrapper0, 0.3, 0.3);
      String string0 = ahrensDieterMarsagliaTsangGammaSampler0.toString();
}"
474,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double probabilityOfSuccess) {
        if (probabilityOfSuccess <= 0 || probabilityOfSuccess > 1) {
            throw new IllegalArgumentException(
                ""Probability of success (p) must be in the range [0 < p <= 1]: "" +
                    probabilityOfSuccess);
        }
        return probabilityOfSuccess == 1 ?
            GeometricP1Sampler.INSTANCE :
            new GeometricExponentialSampler(rng, probabilityOfSuccess);
    }","  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometricSampler.of((UniformRandomProvider) null, 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Probability of success (p) must be in the range [0 < p <= 1]: 0.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.GeometricSampler"", e);
      }
  }"
475,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double probabilityOfSuccess) {
        if (probabilityOfSuccess <= 0 || probabilityOfSuccess > 1) {
            throw new IllegalArgumentException(
                ""Probability of success (p) must be in the range [0 < p <= 1]: "" +
                    probabilityOfSuccess);
        }
        return probabilityOfSuccess == 1 ?
            GeometricP1Sampler.INSTANCE :
            new GeometricExponentialSampler(rng, probabilityOfSuccess);
    }","  public void test1()  throws Throwable  {
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = GeometricSampler.of((UniformRandomProvider) null, 1.0);
}"
476,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double probabilityOfSuccess) {
        if (probabilityOfSuccess <= 0 || probabilityOfSuccess > 1) {
            throw new IllegalArgumentException(
                ""Probability of success (p) must be in the range [0 < p <= 1]: "" +
                    probabilityOfSuccess);
        }
        return probabilityOfSuccess == 1 ?
            GeometricP1Sampler.INSTANCE :
            new GeometricExponentialSampler(rng, probabilityOfSuccess);
    }","  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        GeometricSampler.of(jDKRandomWrapper0, 1570.224);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Probability of success (p) must be in the range [0 < p <= 1]: 1570.224
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.GeometricSampler"", e);
      }
  }"
477,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double probabilityOfSuccess) {
        if (probabilityOfSuccess <= 0 || probabilityOfSuccess > 1) {
            throw new IllegalArgumentException(
                ""Probability of success (p) must be in the range [0 < p <= 1]: "" +
                    probabilityOfSuccess);
        }
        return probabilityOfSuccess == 1 ?
            GeometricP1Sampler.INSTANCE :
            new GeometricExponentialSampler(rng, probabilityOfSuccess);
    }","  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometricSampler.of((UniformRandomProvider) null, (-426.377629135));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Probability of success (p) must be in the range [0 < p <= 1]: -426.377629135
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.GeometricSampler"", e);
      }
  }"
478,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double probabilityOfSuccess) {
        if (probabilityOfSuccess <= 0 || probabilityOfSuccess > 1) {
            throw new IllegalArgumentException(
                ""Probability of success (p) must be in the range [0 < p <= 1]: "" +
                    probabilityOfSuccess);
        }
        return probabilityOfSuccess == 1 ?
            GeometricP1Sampler.INSTANCE :
            new GeometricExponentialSampler(rng, probabilityOfSuccess);
    }","  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = GeometricSampler.of(jDKRandomWrapper0, 0.04779091967506745);
}"
479,"    public static StableSampler of(UniformRandomProvider rng,
                                   double alpha,
                                   double beta) {
        validateParameters(alpha, beta);
        return create(rng, alpha, beta);
    }","  public void test0()  throws Throwable  {
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) null, 1.743934249004316E-16, 1.743934249004316E-16, 1.7976931348623157E308, (double) 2L);
}"
480,"    public static StableSampler of(UniformRandomProvider rng,
                                   double alpha,
                                   double beta) {
        validateParameters(alpha, beta);
        return create(rng, alpha, beta);
    }","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.5, 0.0, (double) (byte)0, 0.5);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // gamma is not strictly positive and finite: 0.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.StableSampler"", e);
      }
  }"
481,"    public static StableSampler of(UniformRandomProvider rng,
                                   double alpha,
                                   double beta) {
        validateParameters(alpha, beta);
        return create(rng, alpha, beta);
    }","  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, (-711.0821230066488), 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // alpha is not in the interval (0, 2]: -711.0821230066488
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.StableSampler"", e);
      }
  }"
482,"    public static StableSampler of(UniformRandomProvider rng,
                                   double alpha,
                                   double beta) {
        validateParameters(alpha, beta);
        return create(rng, alpha, beta);
    }","  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.02, 0.0588760887562371);
}"
483,"    public static StableSampler of(UniformRandomProvider rng,
                                   double alpha,
                                   double beta) {
        validateParameters(alpha, beta);
        return create(rng, alpha, beta);
    }","  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 1.5155544070948754, 1.1163735233742434E-17, (double) 480L, 1.5155544070948754);
}"
484,"    public static StableSampler of(UniformRandomProvider rng,
                                   double alpha,
                                   double beta) {
        validateParameters(alpha, beta);
        return create(rng, alpha, beta);
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 8.417560957458018E-4, 0.0);
}"
485,"    public static StableSampler of(UniformRandomProvider rng,
                                   double alpha,
                                   double beta) {
        validateParameters(alpha, beta);
        return create(rng, alpha, beta);
    }","  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 1.0, (-7.109486060623279E-21), 0.02, 1.0);
}"
486,,"  public void test7()  throws Throwable  {
      double double0 = StableSampler.SpecialMath.d2((-0.006614626439127607));
}"
487,,"  public void test8()  throws Throwable  {
      double double0 = StableSampler.SpecialMath.d2(0.5);
}"
488,"    StableSampler(UniformRandomProvider rng) {
        this.rng = rng;
    }","  public void test9()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3097L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0CMSStableSampler stableSampler_Beta0CMSStableSampler0 = new StableSampler.Beta0CMSStableSampler(jDKRandomWrapper0, 3097L);
      double double0 = stableSampler_Beta0CMSStableSampler0.createSample(3097L, 3097L);
}"
489,"    public abstract double sample();

    /** {@inheritDoc}","  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0CMSStableSampler stableSampler_Beta0CMSStableSampler0 = new StableSampler.Beta0CMSStableSampler(jDKRandomWrapper0, 0L);
      double double0 = stableSampler_Beta0CMSStableSampler0.sample();
}"
490,"    public abstract double sample();

    /** {@inheritDoc}","  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Alpha1CMSStableSampler stableSampler_Alpha1CMSStableSampler0 = new StableSampler.Alpha1CMSStableSampler(jDKRandomWrapper0, Double.POSITIVE_INFINITY);
      double double0 = stableSampler_Alpha1CMSStableSampler0.sample();
}"
491,"    public abstract double sample();

    /** {@inheritDoc}","  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      Random.setNextRandom((-2146880251));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Alpha1CMSStableSampler stableSampler_Alpha1CMSStableSampler0 = new StableSampler.Alpha1CMSStableSampler(jDKRandomWrapper0, 0.7853981633974483);
      double double0 = stableSampler_Alpha1CMSStableSampler0.sample();
}"
492,"    public abstract double sample();

    /** {@inheritDoc}","  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, 0.02, 9.70723434263201E-20);
      Random.setNextRandom(2147483646);
      double double0 = stableSampler_CMSStableSampler0.sample();
}"
493,"    public static StableSampler of(UniformRandomProvider rng,
                                   double alpha,
                                   double beta) {
        validateParameters(alpha, beta);
        return create(rng, alpha, beta);
    }","  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.7853981633974483, 1.1163735233742434E-17, (double) 480L, 0.7853981633974483);
}"
494,"    StableSampler(UniformRandomProvider rng) {
        this.rng = rng;
    }","  public void test15()  throws Throwable  {
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler((UniformRandomProvider) null, (-0.2601572725547915), 1);
      double double0 = stableSampler_CMSStableSampler0.createSample(2.3638730730218806E-22, 194.22);
}"
495,"    public abstract double sample();

    /** {@inheritDoc}","  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, Double.POSITIVE_INFINITY, 1.0);
      double double0 = stableSampler_CMSStableSampler0.sample();
}"
496,"    public abstract double sample();

    /** {@inheritDoc}","  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextDouble();
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.5, 1.0, (double) (byte)3, 0.5);
      double double0 = stableSampler0.sample();
}"
497,"    public abstract double sample();

    /** {@inheritDoc}","  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, (double) 1L, 0.0, (double) 1L, (double) 1L);
      double double0 = stableSampler0.sample();
}"
498,"    public abstract double sample();

    /** {@inheritDoc}","  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, (double) 2L, (double) 0.1F, (double) 0.1F, (double) 0.1F);
      double double0 = stableSampler0.sample();
}"
499,"    public abstract double sample();

    /** {@inheritDoc}","  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) null, (double) 1L, 0.6366197723675814, 0.6366197723675814, 683.115494854595);
      StableSampler stableSampler1 = stableSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      double double0 = stableSampler1.sample();
}"
500,"    public abstract double sample();

    /** {@inheritDoc}","  public void test21()  throws Throwable  {
      Random.setNextRandom((-2147483647));
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0CMSStableSampler stableSampler_Beta0CMSStableSampler0 = new StableSampler.Beta0CMSStableSampler(jDKRandomWrapper0, (-2147483647));
      jDKRandomWrapper0.nextDouble();
      double double0 = stableSampler_Beta0CMSStableSampler0.sample();
}"
501,"    public abstract double sample();

    /** {@inheritDoc}","  public void test22()  throws Throwable  {
      Random.setNextRandom(1590);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0WeronStableSampler stableSampler_Beta0WeronStableSampler0 = new StableSampler.Beta0WeronStableSampler(jDKRandomWrapper0, 1590);
      double double0 = stableSampler_Beta0WeronStableSampler0.sample();
}"
502,"    StableSampler(UniformRandomProvider rng) {
        this.rng = rng;
    }","  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(348L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, (-7.273940551075394E9), 0.0);
      double double0 = stableSampler_CMSStableSampler0.createSample(0.0, 0.0);
}"
503,,"  public void test24()  throws Throwable  {
      double double0 = StableSampler.SpecialMath.tan2(4.9468559775425065E8);
}"
504,,"  public void test25()  throws Throwable  {
      double double0 = StableSampler.CMSStableSampler.getTau((-2396.5768102610937), Double.NaN);
}"
505,"    StableSampler(UniformRandomProvider rng) {
        this.rng = rng;
    }","  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, 0.0, (-2396.5768102610937));
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler1 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, stableSampler_CMSStableSampler0);
}"
506,"    public abstract StableSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Generates a {@code long}","  public void test27()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      StableSampler.Beta0CMSStableSampler stableSampler_Beta0CMSStableSampler0 = new StableSampler.Beta0CMSStableSampler(jDKRandomWrapper0, 2.1254973418582485E9);
      StableSampler.Beta0WeronStableSampler stableSampler_Beta0WeronStableSampler0 = stableSampler_Beta0CMSStableSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
507,"    public abstract double sample();

    /** {@inheritDoc}","  public void test28()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(348L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0WeronStableSampler stableSampler_Beta0WeronStableSampler0 = new StableSampler.Beta0WeronStableSampler(jDKRandomWrapper0, (-231.974783));
      double double0 = stableSampler_Beta0WeronStableSampler0.sample();
}"
508,"    StableSampler(UniformRandomProvider rng) {
        this.rng = rng;
    }","  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1379L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0WeronStableSampler stableSampler_Beta0WeronStableSampler0 = new StableSampler.Beta0WeronStableSampler(jDKRandomWrapper0, (-1379L));
      StableSampler.Beta0WeronStableSampler stableSampler_Beta0WeronStableSampler1 = new StableSampler.Beta0WeronStableSampler(jDKRandomWrapper0, stableSampler_Beta0WeronStableSampler0);
}"
509,"    StableSampler(UniformRandomProvider rng) {
        this.rng = rng;
    }","  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0CMSStableSampler stableSampler_Beta0CMSStableSampler0 = new StableSampler.Beta0CMSStableSampler(jDKRandomWrapper0, 0L);
      StableSampler.Beta0CMSStableSampler stableSampler_Beta0CMSStableSampler1 = new StableSampler.Beta0CMSStableSampler(jDKRandomWrapper0, stableSampler_Beta0CMSStableSampler0);
}"
510,"    StableSampler(UniformRandomProvider rng) {
        this.rng = rng;
    }","  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0WeronStableSampler stableSampler_Beta0WeronStableSampler0 = new StableSampler.Beta0WeronStableSampler(jDKRandomWrapper0, 0.5);
      double double0 = stableSampler_Beta0WeronStableSampler0.getOmega();
}"
511,"    public abstract StableSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Generates a {@code long}","  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Alpha1CMSStableSampler stableSampler_Alpha1CMSStableSampler0 = new StableSampler.Alpha1CMSStableSampler(jDKRandomWrapper0, 0.02);
      StableSampler.Alpha1CMSStableSampler stableSampler_Alpha1CMSStableSampler1 = stableSampler_Alpha1CMSStableSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
512,"    StableSampler(UniformRandomProvider rng) {
        this.rng = rng;
    }","  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Alpha1CMSStableSampler stableSampler_Alpha1CMSStableSampler0 = new StableSampler.Alpha1CMSStableSampler(jDKRandomWrapper0, 0.02);
      StableSampler.Alpha1CMSStableSampler stableSampler_Alpha1CMSStableSampler1 = new StableSampler.Alpha1CMSStableSampler(jDKRandomWrapper0, stableSampler_Alpha1CMSStableSampler0);
}"
513,"    public abstract double sample();

    /** {@inheritDoc}","  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, 1153.735274, (-1610.3097655303743));
      double double0 = stableSampler_CMSStableSampler0.sample();
}"
514,"    long nextLong() {
        return rng.nextLong();
    }","  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0WeronStableSampler stableSampler_Beta0WeronStableSampler0 = new StableSampler.Beta0WeronStableSampler(jDKRandomWrapper0, 0.0);
      long long0 = stableSampler_Beta0WeronStableSampler0.nextLong();
}"
515,"    long nextLong() {
        return rng.nextLong();
    }","  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(348L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextFloat();
      StableSampler.Beta0WeronStableSampler stableSampler_Beta0WeronStableSampler0 = new StableSampler.Beta0WeronStableSampler(jDKRandomWrapper0, (-231.974783));
      long long0 = stableSampler_Beta0WeronStableSampler0.nextLong();
}"
516,"    public String toString() {
        // All variations use the same string representation, i.e. no changes
        // for the Gaussian, Levy or Cauchy case.
        return ""Stable deviate ["" + rng.toString() + ""]"";
    }","  public void test37()  throws Throwable  {
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) null, (double) 1L, 0.6366197723675814, 0.6366197723675814, 692.9659841025517);
      // Undeclared exception!
      try { 
        stableSampler0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
517,"    public abstract double sample();

    /** {@inheritDoc}","  public void test38()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      StableSampler.WeronStableSampler stableSampler_WeronStableSampler0 = new StableSampler.WeronStableSampler(jDKRandomWrapper0, 1.0, 1.0);
      // Undeclared exception!
      try { 
        stableSampler_WeronStableSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.JDKRandomWrapper"", e);
      }
  }"
518,"    long nextLong() {
        return rng.nextLong();
    }","  public void test39()  throws Throwable  {
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) null, (double) 1L, 0.6366197723675814, 0.6366197723675814, 683.115494854595);
      // Undeclared exception!
      try { 
        stableSampler0.nextLong();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.StableSampler"", e);
      }
  }"
519,"    public static StableSampler of(UniformRandomProvider rng,
                                   double alpha,
                                   double beta) {
        validateParameters(alpha, beta);
        return create(rng, alpha, beta);
    }","  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 1.743934249004316E-16, (double) 0L, 1.743934249004316E-16, Double.NaN);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // delta is not finite: NaN
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.StableSampler"", e);
      }
  }"
520,"    public static StableSampler of(UniformRandomProvider rng,
                                   double alpha,
                                   double beta) {
        validateParameters(alpha, beta);
        return create(rng, alpha, beta);
    }","  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 1.0, 1.0, Double.POSITIVE_INFINITY, (double) 0L);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // gamma is not strictly positive and finite: Infinity
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.StableSampler"", e);
      }
  }"
521,"    public static StableSampler of(UniformRandomProvider rng,
                                   double alpha,
                                   double beta) {
        validateParameters(alpha, beta);
        return create(rng, alpha, beta);
    }","  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 9.219991677885158E-16, 0.2529241064028508, (double) (-791L), 0.5);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // gamma is not strictly positive and finite: -791.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.StableSampler"", e);
      }
  }"
522,"    public static StableSampler of(UniformRandomProvider rng,
                                   double alpha,
                                   double beta) {
        validateParameters(alpha, beta);
        return create(rng, alpha, beta);
    }","  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.6366197723675814, (double) (byte)94);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // beta is not in the interval [-1, 1]: 94.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.StableSampler"", e);
      }
  }"
523,"    public static StableSampler of(UniformRandomProvider rng,
                                   double alpha,
                                   double beta) {
        validateParameters(alpha, beta);
        return create(rng, alpha, beta);
    }","  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.0015526828175885465, (-644.046542328), Double.POSITIVE_INFINITY, (double) (-5377));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // beta is not in the interval [-1, 1]: -644.046542328
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.StableSampler"", e);
      }
  }"
524,"    public static StableSampler of(UniformRandomProvider rng,
                                   double alpha,
                                   double beta) {
        validateParameters(alpha, beta);
        return create(rng, alpha, beta);
    }","  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, (double) (byte)3, (double) (byte)3);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // alpha is not in the interval (0, 2]: 3.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.StableSampler"", e);
      }
  }"
525,"    public static StableSampler of(UniformRandomProvider rng,
                                   double alpha,
                                   double beta) {
        validateParameters(alpha, beta);
        return create(rng, alpha, beta);
    }","  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.5, 0.1, (double) (byte)3, 0.5);
}"
526,,"  public void test47()  throws Throwable  {
      double double0 = StableSampler.SpecialMath.d2(0.1F);
}"
527,"    public abstract double sample();

    /** {@inheritDoc}","  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(348L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextFloat();
      StableSampler.Beta0CMSStableSampler stableSampler_Beta0CMSStableSampler0 = new StableSampler.Beta0CMSStableSampler(jDKRandomWrapper0, 1L);
      double double0 = stableSampler_Beta0CMSStableSampler0.sample();
}"
528,"    StableSampler(UniformRandomProvider rng) {
        this.rng = rng;
    }","  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0CMSStableSampler stableSampler_Beta0CMSStableSampler0 = new StableSampler.Beta0CMSStableSampler(jDKRandomWrapper0, 0.0);
      double double0 = stableSampler_Beta0CMSStableSampler0.createSample((-9L), (-9L));
}"
529,"    public abstract double sample();

    /** {@inheritDoc}","  public void test50()  throws Throwable  {
      Random.setNextRandom((-5377));
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0CMSStableSampler stableSampler_Beta0CMSStableSampler0 = new StableSampler.Beta0CMSStableSampler(jDKRandomWrapper0, 0.02);
      double double0 = stableSampler_Beta0CMSStableSampler0.sample();
}"
530,"    public abstract double sample();

    /** {@inheritDoc}","  public void test51()  throws Throwable  {
      Random.setNextRandom((-5377));
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, 0.02, 9.70723434263201E-20);
      double double0 = stableSampler_CMSStableSampler0.sample();
}"
531,"    public abstract double sample();

    /** {@inheritDoc}","  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, (-2389.85261683434), (-2389.85261683434));
      StableSampler.WeronStableSampler stableSampler_WeronStableSampler0 = new StableSampler.WeronStableSampler(jDKRandomWrapper0, stableSampler_CMSStableSampler0);
      double double0 = stableSampler_CMSStableSampler0.sample();
}"
532,"    public abstract double sample();

    /** {@inheritDoc}","  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, (-2389.85261683434), (-2389.85261683434));
      StableSampler.WeronStableSampler stableSampler_WeronStableSampler0 = new StableSampler.WeronStableSampler(jDKRandomWrapper0, stableSampler_CMSStableSampler0);
      double double0 = stableSampler_CMSStableSampler0.sample();
      double double1 = stableSampler_WeronStableSampler0.sample();
}"
533,"    public static StableSampler of(UniformRandomProvider rng,
                                   double alpha,
                                   double beta) {
        validateParameters(alpha, beta);
        return create(rng, alpha, beta);
    }","  public void test54()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.0015526828175885465, (-1.0));
}"
534,"    public abstract double sample();

    /** {@inheritDoc}","  public void test55()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, 1.3348791997621723E229, 1.3348791997621723E229);
      double double0 = stableSampler_CMSStableSampler0.sample();
}"
535,"    public abstract double sample();

    /** {@inheritDoc}","  public void test56()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, 1.3348791997621723E229, 1.3348791997621723E229);
      double double0 = stableSampler_CMSStableSampler0.sample();
      double double1 = stableSampler_CMSStableSampler0.sample();
}"
536,"    public abstract StableSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Generates a {@code long}","  public void test57()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, (double) 2L, (double) 0.1F, (double) 0.1F, (double) 0.1F);
      StableSampler stableSampler1 = stableSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
537,"    public static StableSampler of(UniformRandomProvider rng,
                                   double alpha,
                                   double beta) {
        validateParameters(alpha, beta);
        return create(rng, alpha, beta);
    }","  public void test58()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 2.0, (double) 1);
}"
538,"    public abstract double sample();

    /** {@inheritDoc}","  public void test59()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 1.0, (double) 0L);
      double double0 = stableSampler0.sample();
}"
539,"    public abstract StableSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Generates a {@code long}","  public void test60()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 1.0, (double) 0L);
      StableSampler stableSampler1 = stableSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
540,"    public abstract StableSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Generates a {@code long}","  public void test61()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.5, (double) 1L);
      StableSampler stableSampler1 = stableSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
541,"    public abstract double sample();

    /** {@inheritDoc}","  public void test62()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 1.919615751480737, 0.0, (double) 1L, 1.919615751480737);
      double double0 = stableSampler0.sample();
}"
542,"    public String toString() {
        // All variations use the same string representation, i.e. no changes
        // for the Gaussian, Levy or Cauchy case.
        return ""Stable deviate ["" + rng.toString() + ""]"";
    }","  public void test63()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, (double) 1L, (double) 1L, (double) 1L, (double) 0.0F);
      String string0 = stableSampler0.toString();
}"
543,"    public abstract StableSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Generates a {@code long}","  public void test64()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, (-2389.85261683434), (-2389.85261683434));
      StableSampler.WeronStableSampler stableSampler_WeronStableSampler0 = new StableSampler.WeronStableSampler(jDKRandomWrapper0, stableSampler_CMSStableSampler0);
      StableSampler.WeronStableSampler stableSampler_WeronStableSampler1 = stableSampler_WeronStableSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
544,"    public abstract double sample();

    /** {@inheritDoc}","  public void test65()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler stableSampler0 = StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.02, 0.0);
      double double0 = stableSampler0.sample();
}"
545,"    public abstract StableSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Generates a {@code long}","  public void test66()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0WeronStableSampler stableSampler_Beta0WeronStableSampler0 = new StableSampler.Beta0WeronStableSampler(jDKRandomWrapper0, 0.5);
      StableSampler stableSampler0 = stableSampler_Beta0WeronStableSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
546,"    public String toString() {
        // All variations use the same string representation, i.e. no changes
        // for the Gaussian, Levy or Cauchy case.
        return ""Stable deviate ["" + rng.toString() + ""]"";
    }","  public void test67()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, 0.02, 9.70723434263201E-20);
      String string0 = stableSampler_CMSStableSampler0.toString();
}"
547,"    public static StableSampler of(UniformRandomProvider rng,
                                   double alpha,
                                   double beta) {
        validateParameters(alpha, beta);
        return create(rng, alpha, beta);
    }","  public void test68()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        StableSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.0, 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // alpha is not in the interval (0, 2]: 0.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.StableSampler"", e);
      }
  }"
548,"    public abstract StableSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Generates a {@code long}","  public void test69()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.Beta0CMSStableSampler stableSampler_Beta0CMSStableSampler0 = new StableSampler.Beta0CMSStableSampler(jDKRandomWrapper0, -0.0);
      StableSampler.Beta0CMSStableSampler stableSampler_Beta0CMSStableSampler1 = stableSampler_Beta0CMSStableSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
549,"    public abstract StableSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Generates a {@code long}","  public void test70()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler0 = new StableSampler.CMSStableSampler(jDKRandomWrapper0, 0.0, 0.0);
      StableSampler.CMSStableSampler stableSampler_CMSStableSampler1 = stableSampler_CMSStableSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
550,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        GuideTableDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Alpha must be strictly positive.
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.GuideTableDiscreteSampler"", e);
      }
  }"
551,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.625791928012471;
      doubleArray0[2] = 2540.219701029471;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = GuideTableDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0);
      int int0 = ((GuideTableDiscreteSampler) sharedStateDiscreteSampler0).sample();
}"
552,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.625791928012471;
      doubleArray0[2] = 2540.219701029471;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = GuideTableDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0);
      int int0 = ((GuideTableDiscreteSampler) sharedStateDiscreteSampler0).sample();
}"
553,"    public String toString() {
        return ""Guide table deviate ["" + rng.toString() + ""]"";
    }","  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1025.0;
      GuideTableDiscreteSampler guideTableDiscreteSampler0 = (GuideTableDiscreteSampler)GuideTableDiscreteSampler.of((UniformRandomProvider) null, doubleArray0);
      // Undeclared exception!
      try { 
        guideTableDiscreteSampler0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
554,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1025.0;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = GuideTableDiscreteSampler.of((UniformRandomProvider) null, doubleArray0);
      // Undeclared exception!
      try { 
        ((GuideTableDiscreteSampler) sharedStateDiscreteSampler0).sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.GuideTableDiscreteSampler"", e);
      }
  }"
555,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3873L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3873L;
      // Undeclared exception!
      GuideTableDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (double) 3873L);
  }"
556,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1.0;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = GuideTableDiscreteSampler.of((UniformRandomProvider) null, doubleArray0, 1.0);
}"
557,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        GuideTableDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-1816.51790564215));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Alpha must be strictly positive.
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.GuideTableDiscreteSampler"", e);
      }
  }"
558,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test8()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        GuideTableDiscreteSampler.of((UniformRandomProvider) null, doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Probabilities must not be empty.
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.GuideTableDiscreteSampler"", e);
      }
  }"
559,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        GuideTableDiscreteSampler.of((UniformRandomProvider) null, (double[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Probabilities must not be empty.
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.GuideTableDiscreteSampler"", e);
      }
  }"
560,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        GuideTableDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, 1738.01628855);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid sum of probabilities: 0.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.GuideTableDiscreteSampler"", e);
      }
  }"
561,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = 2525.69618306938;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = GuideTableDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0);
      int int0 = ((GuideTableDiscreteSampler) sharedStateDiscreteSampler0).sample();
}"
562,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = 2525.69618306938;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = GuideTableDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0);
      int int0 = ((GuideTableDiscreteSampler) sharedStateDiscreteSampler0).sample();
      int int1 = ((GuideTableDiscreteSampler) sharedStateDiscreteSampler0).sample();
}"
563,"    public String toString() {
        return ""Guide table deviate ["" + rng.toString() + ""]"";
    }","  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = 2525.69618306938;
      GuideTableDiscreteSampler guideTableDiscreteSampler0 = (GuideTableDiscreteSampler)GuideTableDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0);
      guideTableDiscreteSampler0.toString();
}"
564,"    public SharedStateDiscreteSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return new GuideTableDiscreteSampler(rng, cumulativeProbabilities, guideTable);
    }","  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = 2525.69618306938;
      GuideTableDiscreteSampler guideTableDiscreteSampler0 = (GuideTableDiscreteSampler)GuideTableDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0);
      guideTableDiscreteSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
565,,"  public void test0()  throws Throwable  {
      InternalUtils.FactorialLog internalUtils_FactorialLog0 = InternalUtils.FactorialLog.create();
      double double0 = internalUtils_FactorialLog0.value(21);
}"
566,,"  public void test1()  throws Throwable  {
      InternalUtils.FactorialLog internalUtils_FactorialLog0 = InternalUtils.FactorialLog.create();
      InternalUtils.FactorialLog internalUtils_FactorialLog1 = internalUtils_FactorialLog0.withCache(33);
      double double0 = internalUtils_FactorialLog1.value(33);
}"
567,,"  public void test2()  throws Throwable  {
      InternalUtils.FactorialLog internalUtils_FactorialLog0 = InternalUtils.FactorialLog.create();
      InternalUtils.FactorialLog internalUtils_FactorialLog1 = internalUtils_FactorialLog0.withCache(19);
      InternalUtils.FactorialLog internalUtils_FactorialLog2 = internalUtils_FactorialLog1.withCache(229);
}"
568,,"  public void test3()  throws Throwable  {
      InternalUtils.FactorialLog internalUtils_FactorialLog0 = InternalUtils.FactorialLog.create();
      InternalUtils.FactorialLog internalUtils_FactorialLog1 = internalUtils_FactorialLog0.withCache(2);
      InternalUtils.FactorialLog internalUtils_FactorialLog2 = internalUtils_FactorialLog1.withCache(0);
}"
569,"    static double makeNonZeroDouble(long v) {
        // This matches the method in o.a.c.rng.core.util.NumberFactory.makeDouble(long)
        // but shifts the range from [0, 1) to (0, 1].
        return ((v >>> 11) + 1L) * DOUBLE_MULTIPLIER;
    }","  public void test4()  throws Throwable  {
      double double0 = InternalUtils.makeNonZeroDouble((-172L));
}"
570,"    static void validateProbability(double probability) {
        if (probability < 0 ||
            Double.isInfinite(probability) ||
            Double.isNaN(probability)) {
            throw new IllegalArgumentException(""Invalid probability: "" +
                                               probability);
        }
    }","  public void test5()  throws Throwable  {
      InternalUtils.validateProbability(363.7393755555636);
  }"
571,"    static long factorial(int n)  {
        return FACTORIALS[n];
    }","  public void test6()  throws Throwable  {
      long long0 = InternalUtils.factorial(19);
}"
572,"    static void validateProbability(double probability) {
        if (probability < 0 ||
            Double.isInfinite(probability) ||
            Double.isNaN(probability)) {
            throw new IllegalArgumentException(""Invalid probability: "" +
                                               probability);
        }
    }","  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        InternalUtils.validateProbability((-2683.7425958));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid probability: -2683.7425958
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.InternalUtils"", e);
      }
  }"
573,,"  public void test8()  throws Throwable  {
      InternalUtils.FactorialLog internalUtils_FactorialLog0 = InternalUtils.FactorialLog.create();
      double double0 = internalUtils_FactorialLog0.value(15);
}"
574,,"  public void test9()  throws Throwable  {
      InternalUtils.FactorialLog internalUtils_FactorialLog0 = InternalUtils.FactorialLog.create();
      InternalUtils.FactorialLog internalUtils_FactorialLog1 = internalUtils_FactorialLog0.withCache(678);
      double double0 = internalUtils_FactorialLog1.value(5);
}"
575,"    static NormalizedGaussianSampler newNormalizedGaussianSampler(
            NormalizedGaussianSampler sampler,
            UniformRandomProvider rng) {
        if (!(sampler instanceof SharedStateSampler<?>)) {
            throw new UnsupportedOperationException(""The underlying sampler cannot share state"");
        }
        final Object newSampler = ((SharedStateSampler<?>) sampler).withUniformRandomProvider(rng);
        if (!(newSampler instanceof NormalizedGaussianSampler)) {
            throw new UnsupportedOperationException(
                ""The underlying sampler did not create a normalized Gaussian sampler"");
        }
        return (NormalizedGaussianSampler) newSampler;
    }","  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        InternalUtils.newNormalizedGaussianSampler((NormalizedGaussianSampler) null, (UniformRandomProvider) null);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // The underlying sampler cannot share state
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.InternalUtils"", e);
      }
  }"
576,"    static NormalizedGaussianSampler newNormalizedGaussianSampler(
            NormalizedGaussianSampler sampler,
            UniformRandomProvider rng) {
        if (!(sampler instanceof SharedStateSampler<?>)) {
            throw new UnsupportedOperationException(""The underlying sampler cannot share state"");
        }
        final Object newSampler = ((SharedStateSampler<?>) sampler).withUniformRandomProvider(rng);
        if (!(newSampler instanceof NormalizedGaussianSampler)) {
            throw new UnsupportedOperationException(
                ""The underlying sampler did not create a normalized Gaussian sampler"");
        }
        return (NormalizedGaussianSampler) newSampler;
    }","  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2518L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      NormalizedGaussianSampler normalizedGaussianSampler0 = InternalUtils.newNormalizedGaussianSampler(zigguratSampler_NormalizedGaussian0, jDKRandomWrapper0);
}"
577,"    static double validateProbabilities(double[] probabilities) {
        if (probabilities == null || probabilities.length == 0) {
            throw new IllegalArgumentException(""Probabilities must not be empty."");
        }

        double sumProb = 0;
        for (final double prob : probabilities) {
            validateProbability(prob);
            sumProb += prob;
        }

        if (Double.isInfinite(sumProb) || sumProb <= 0) {
            throw new IllegalArgumentException(""Invalid sum of probabilities: "" + sumProb);
        }
        return sumProb;
    }","  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (-1011.0);
      // Undeclared exception!
      try { 
        InternalUtils.validateProbabilities(doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid probability: -1011.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.InternalUtils"", e);
      }
  }"
578,"    static double validateProbabilities(double[] probabilities) {
        if (probabilities == null || probabilities.length == 0) {
            throw new IllegalArgumentException(""Probabilities must not be empty."");
        }

        double sumProb = 0;
        for (final double prob : probabilities) {
            validateProbability(prob);
            sumProb += prob;
        }

        if (Double.isInfinite(sumProb) || sumProb <= 0) {
            throw new IllegalArgumentException(""Invalid sum of probabilities: "" + sumProb);
        }
        return sumProb;
    }","  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 85.0544670175815;
      double double0 = InternalUtils.validateProbabilities(doubleArray0);
}"
579,"    static double validateProbabilities(double[] probabilities) {
        if (probabilities == null || probabilities.length == 0) {
            throw new IllegalArgumentException(""Probabilities must not be empty."");
        }

        double sumProb = 0;
        for (final double prob : probabilities) {
            validateProbability(prob);
            sumProb += prob;
        }

        if (Double.isInfinite(sumProb) || sumProb <= 0) {
            throw new IllegalArgumentException(""Invalid sum of probabilities: "" + sumProb);
        }
        return sumProb;
    }","  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        InternalUtils.validateProbabilities(doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Probabilities must not be empty.
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.InternalUtils"", e);
      }
  }"
580,"    static double validateProbabilities(double[] probabilities) {
        if (probabilities == null || probabilities.length == 0) {
            throw new IllegalArgumentException(""Probabilities must not be empty."");
        }

        double sumProb = 0;
        for (final double prob : probabilities) {
            validateProbability(prob);
            sumProb += prob;
        }

        if (Double.isInfinite(sumProb) || sumProb <= 0) {
            throw new IllegalArgumentException(""Invalid sum of probabilities: "" + sumProb);
        }
        return sumProb;
    }","  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        InternalUtils.validateProbabilities(doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid sum of probabilities: 0.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.InternalUtils"", e);
      }
  }"
581,"    static double validateProbabilities(double[] probabilities) {
        if (probabilities == null || probabilities.length == 0) {
            throw new IllegalArgumentException(""Probabilities must not be empty."");
        }

        double sumProb = 0;
        for (final double prob : probabilities) {
            validateProbability(prob);
            sumProb += prob;
        }

        if (Double.isInfinite(sumProb) || sumProb <= 0) {
            throw new IllegalArgumentException(""Invalid sum of probabilities: "" + sumProb);
        }
        return sumProb;
    }","  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        InternalUtils.validateProbabilities((double[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Probabilities must not be empty.
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.InternalUtils"", e);
      }
  }"
582,"    static long factorial(int n)  {
        return FACTORIALS[n];
    }","  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        InternalUtils.factorial(33);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.InternalUtils"", e);
      }
  }"
583,,"  public void test0()  throws Throwable  {
      int int0 = 940;
      Random.setNextRandom(940);
      java.util.Random random0 = null;
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      // Undeclared exception!
      MarsagliaTsangWangDiscreteSampler.Binomial.of(jDKRandomWrapper0, 940, 0.12686886871343844);
  }"
584,,"  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)124;
      mockRandom0.nextBytes(byteArray0);
      mockRandom0.ints();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      MarsagliaTsangWangDiscreteSampler.Poisson.of(jDKRandomWrapper0, 0.5);
      MarsagliaTsangWangDiscreteSampler.Binomial.of(jDKRandomWrapper0, (byte)124, 0.5);
  }"
585,,"  public void test2()  throws Throwable  {
      Random.setNextRandom((-158));
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      MarsagliaTsangWangDiscreteSampler.Poisson.of(jDKRandomWrapper0, 21.4);
  }"
586,,"  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-725L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = 2633;
      jDKRandomWrapper0.nextInt();
      MarsagliaTsangWangDiscreteSampler.Binomial.of(jDKRandomWrapper0, 2633, 4.9E-324);
      int int1 = 1918;
      // Undeclared exception!
      try { 
        MarsagliaTsangWangDiscreteSampler.Binomial.of(jDKRandomWrapper0, 1918, (-725L));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Probability is not in range [0,1]: -725.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.MarsagliaTsangWangDiscreteSampler$Binomial"", e);
      }
  }"
587,,"  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      mockRandom0.nextLong();
      MarsagliaTsangWangDiscreteSampler.Poisson.of(jDKRandomWrapper0, 11.389636465214434);
      Random.setNextRandom(55);
      Random.setNextRandom(55);
      Random.setNextRandom(2003);
  }"
588,,"  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      MarsagliaTsangWangDiscreteSampler.Poisson.of(jDKRandomWrapper0, 45.578);
      double[] doubleArray0 = new double[5];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      jDKRandomWrapper0.nextBytes(byteArray0);
      doubleArray0[0] = 45.578;
      doubleArray0[1] = 45.578;
      doubleArray0[2] = 45.578;
      doubleArray0[3] = 45.578;
      doubleArray0[4] = 45.578;
      MarsagliaTsangWangDiscreteSampler.Enumerated.of(jDKRandomWrapper0, doubleArray0);
      MarsagliaTsangWangDiscreteSampler.Enumerated.of(jDKRandomWrapper0, doubleArray0);
      MarsagliaTsangWangDiscreteSampler.Enumerated.of(jDKRandomWrapper0, doubleArray0);
      // Undeclared exception!
      try { 
        MarsagliaTsangWangDiscreteSampler.Binomial.of(jDKRandomWrapper0, 0, (-1687.804975));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Probability is not in range [0,1]: -1687.804975
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.MarsagliaTsangWangDiscreteSampler$Binomial"", e);
      }
  }"
589,,"  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      MarsagliaTsangWangDiscreteSampler.Poisson.of(jDKRandomWrapper0, 1L);
  }"
590,,"  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = 1024.0;
      // Undeclared exception!
      MarsagliaTsangWangDiscreteSampler.Poisson.of(jDKRandomWrapper0, 1024.0);
  }"
591,,"  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-987L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        MarsagliaTsangWangDiscreteSampler.Binomial.of(jDKRandomWrapper0, (-1816), 1025.8789042902604);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Trials is not positive: -1816
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.MarsagliaTsangWangDiscreteSampler$Binomial"", e);
      }
  }"
592,,"  public void test9()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4294967295L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        MarsagliaTsangWangDiscreteSampler.Poisson.of(jDKRandomWrapper0, 4294967295L);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // mean 4.294967295E9 > 1024.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.MarsagliaTsangWangDiscreteSampler$Poisson"", e);
      }
  }"
593,,"  public void test10()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      MarsagliaTsangWangDiscreteSampler.Binomial.of(jDKRandomWrapper0, 0, 0);
  }"
594,,"  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-4393L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextDouble();
      // Undeclared exception!
      try { 
        MarsagliaTsangWangDiscreteSampler.Binomial.of(jDKRandomWrapper0, 1, (-4393L));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Probability is not in range [0,1]: -4393.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.MarsagliaTsangWangDiscreteSampler$Binomial"", e);
      }
  }"
595,,"  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        MarsagliaTsangWangDiscreteSampler.Binomial.of((UniformRandomProvider) null, 1476, 3199.8313);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Probability is not in range [0,1]: 3199.8313
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.MarsagliaTsangWangDiscreteSampler$Binomial"", e);
      }
  }"
596,,"  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2516L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        MarsagliaTsangWangDiscreteSampler.Poisson.of(jDKRandomWrapper0, (-2516L));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // mean is not strictly positive: -2516.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.MarsagliaTsangWangDiscreteSampler$Poisson"", e);
      }
  }"
597,,"  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(552L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      MarsagliaTsangWangDiscreteSampler.Poisson.of(jDKRandomWrapper0, 552L);
  }"
598,,"  public void test15()  throws Throwable  {
      int int0 = 3417;
      Random.setNextRandom(3417);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      double double0 = 0.5;
      // Undeclared exception!
      try { 
        MarsagliaTsangWangDiscreteSampler.Binomial.of(jDKRandomWrapper0, 3417, 0.5);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Unable to compute distribution
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.MarsagliaTsangWangDiscreteSampler$Binomial"", e);
      }
  }"
599,,"  public void test16()  throws Throwable  {
      UniformRandomProvider uniformRandomProvider0 = null;
      int int0 = 14;
      // Undeclared exception!
      try { 
        MarsagliaTsangWangDiscreteSampler.Binomial.of((UniformRandomProvider) null, 14, 39.24918019880259);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Probability is not in range [0,1]: 39.24918019880259
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.MarsagliaTsangWangDiscreteSampler$Binomial"", e);
      }
  }"
600,,"  public void test17()  throws Throwable  {
      UniformRandomProvider uniformRandomProvider0 = null;
      MarsagliaTsangWangDiscreteSampler.Poisson.of((UniformRandomProvider) null, 0.5);
      int int0 = 0;
      MarsagliaTsangWangDiscreteSampler.Binomial.of((UniformRandomProvider) null, 0, 0.5);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.5;
      doubleArray0[3] = (double) 0;
      MarsagliaTsangWangDiscreteSampler.Enumerated.of((UniformRandomProvider) null, doubleArray0);
      MarsagliaTsangWangDiscreteSampler.Enumerated.of((UniformRandomProvider) null, doubleArray0);
      int int1 = 0;
      MarsagliaTsangWangDiscreteSampler.Binomial.of((UniformRandomProvider) null, 0, 1.0);
      MarsagliaTsangWangDiscreteSampler.Binomial.of((UniformRandomProvider) null, 0, 0.5);
      MarsagliaTsangWangDiscreteSampler.Enumerated.of((UniformRandomProvider) null, doubleArray0);
      // Undeclared exception!
      try { 
        MarsagliaTsangWangDiscreteSampler.Poisson.of((UniformRandomProvider) null, 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // mean is not strictly positive: 0.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.MarsagliaTsangWangDiscreteSampler$Poisson"", e);
      }
  }"
601,,"  public void test18()  throws Throwable  {
      UniformRandomProvider uniformRandomProvider0 = null;
      int int0 = (-1464);
      // Undeclared exception!
      try { 
        MarsagliaTsangWangDiscreteSampler.Binomial.of((UniformRandomProvider) null, (-1464), 9.331443022575228E7);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Trials is not positive: -1464
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.MarsagliaTsangWangDiscreteSampler$Binomial"", e);
      }
  }"
602,,"  public void test19()  throws Throwable  {
      long long0 = 552L;
      MockRandom mockRandom0 = new MockRandom(552L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      MarsagliaTsangWangDiscreteSampler.Poisson.of(jDKRandomWrapper0, 552L);
  }"
603,,"  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[3];
      mockRandom0.nextBoolean();
      byteArray0[0] = (byte)56;
      byteArray0[2] = (byte)26;
      mockRandom0.nextBytes(byteArray0);
      mockRandom0.ints();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      MarsagliaTsangWangDiscreteSampler.Poisson.of(jDKRandomWrapper0, 0.5);
      MarsagliaTsangWangDiscreteSampler.Poisson.of(jDKRandomWrapper0, 1.0);
      jDKRandomWrapper0.nextDouble();
      MarsagliaTsangWangDiscreteSampler.Binomial.of(jDKRandomWrapper0, 503, 0.0);
      // Undeclared exception!
      try { 
        MarsagliaTsangWangDiscreteSampler.Poisson.of(jDKRandomWrapper0, 1234.3228610066153);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // mean 1234.3228610066153 > 1024.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.MarsagliaTsangWangDiscreteSampler$Poisson"", e);
      }
  }"
604,,"  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      MarsagliaTsangWangDiscreteSampler.Poisson.of(jDKRandomWrapper0, 0.5);
      // Undeclared exception!
      MarsagliaTsangWangDiscreteSampler.Binomial.of(jDKRandomWrapper0, 494, 0.5);
  }"
605,,"  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[7];
      mockRandom0.nextInt(12);
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      jDKRandomWrapper0.nextFloat();
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      int int0 = 5297;
      jDKRandomWrapper0.nextInt(5297);
      doubleArray0[6] = (double) 0L;
      MarsagliaTsangWangDiscreteSampler.Enumerated.of(jDKRandomWrapper0, doubleArray0);
      MarsagliaTsangWangDiscreteSampler.Binomial.of(jDKRandomWrapper0, 65536, 1.0);
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        MarsagliaTsangWangDiscreteSampler.Binomial.of(jDKRandomWrapper1, 65536, (-1.0));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Probability is not in range [0,1]: -1.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.MarsagliaTsangWangDiscreteSampler$Binomial"", e);
      }
  }"
606,"    public double sample() {
        return standardDeviation * normalized.sample() + mean;
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      GaussianSampler gaussianSampler0 = new GaussianSampler(zigguratSampler_NormalizedGaussian0, 0L, 1044.425165566899);
      gaussianSampler0.sample();
      double double0 = gaussianSampler0.sample();
}"
607,"    public double sample() {
        return standardDeviation * normalized.sample() + mean;
    }","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratNormalizedGaussianSampler zigguratNormalizedGaussianSampler0 = new ZigguratNormalizedGaussianSampler(jDKRandomWrapper0);
      GaussianSampler gaussianSampler0 = new GaussianSampler(zigguratNormalizedGaussianSampler0, 445.3931759021, 445.3931759021);
      double double0 = gaussianSampler0.sample();
}"
608,"    public static SharedStateContinuousSampler of(NormalizedGaussianSampler normalized,
                                                  double mean,
                                                  double standardDeviation) {
        return new GaussianSampler(normalized, mean, standardDeviation);
    }","  public void test2()  throws Throwable  {
      SharedStateContinuousSampler sharedStateContinuousSampler0 = GaussianSampler.of((NormalizedGaussianSampler) null, 2932.51460527, 1.0);
}"
609,"    public SharedStateContinuousSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return new GaussianSampler(rng, this);
    }","  public void test3()  throws Throwable  {
      GaussianSampler gaussianSampler0 = new GaussianSampler((NormalizedGaussianSampler) null, 2932.51460527, 2932.51460527);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        gaussianSampler0.withUniformRandomProvider(jDKRandomWrapper0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // The underlying sampler cannot share state
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.InternalUtils"", e);
      }
  }"
610,"    public String toString() {
        return ""Gaussian deviate ["" + normalized.toString() + ""]"";
    }","  public void test4()  throws Throwable  {
      GaussianSampler gaussianSampler0 = new GaussianSampler((NormalizedGaussianSampler) null, 1.807254403727107E-20, 1.807254403727107E-20);
      // Undeclared exception!
      try { 
        gaussianSampler0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
611,"    public double sample() {
        return standardDeviation * normalized.sample() + mean;
    }","  public void test5()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
      MarsagliaNormalizedGaussianSampler marsagliaNormalizedGaussianSampler0 = MarsagliaNormalizedGaussianSampler.of((UniformRandomProvider) jDKRandomWrapper0);
      GaussianSampler gaussianSampler0 = new GaussianSampler(marsagliaNormalizedGaussianSampler0, 0.0, 2491.057630573);
      // Undeclared exception!
      try { 
        gaussianSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.JDKRandomWrapper"", e);
      }
  }"
612,"    public GaussianSampler(NormalizedGaussianSampler normalized,
                           double mean,
                           double standardDeviation) {
        if (!(standardDeviation > 0 && standardDeviation < Double.POSITIVE_INFINITY)) {
            throw new IllegalArgumentException(
                ""standard deviation is not strictly positive and finite: "" + standardDeviation);
        }
        if (!Double.isFinite(mean)) {
            throw new IllegalArgumentException(""mean is not finite: "" + mean);
        }
        this.normalized = normalized;
        this.mean = mean;
        this.standardDeviation = standardDeviation;
    }","  public void test6()  throws Throwable  {
      GaussianSampler gaussianSampler0 = null;
      try {
        gaussianSampler0 = new GaussianSampler((NormalizedGaussianSampler) null, Double.POSITIVE_INFINITY, 7.192701758763107E-20);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // mean is not finite: Infinity
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.GaussianSampler"", e);
      }
  }"
613,"    public GaussianSampler(NormalizedGaussianSampler normalized,
                           double mean,
                           double standardDeviation) {
        if (!(standardDeviation > 0 && standardDeviation < Double.POSITIVE_INFINITY)) {
            throw new IllegalArgumentException(
                ""standard deviation is not strictly positive and finite: "" + standardDeviation);
        }
        if (!Double.isFinite(mean)) {
            throw new IllegalArgumentException(""mean is not finite: "" + mean);
        }
        this.normalized = normalized;
        this.mean = mean;
        this.standardDeviation = standardDeviation;
    }","  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      MarsagliaNormalizedGaussianSampler marsagliaNormalizedGaussianSampler0 = MarsagliaNormalizedGaussianSampler.of((UniformRandomProvider) jDKRandomWrapper0);
      GaussianSampler gaussianSampler0 = null;
      try {
        gaussianSampler0 = new GaussianSampler(marsagliaNormalizedGaussianSampler0, 666.05, (-1687.3809709124291));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // standard deviation is not strictly positive and finite: -1687.3809709124291
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.GaussianSampler"", e);
      }
  }"
614,"    public static SharedStateContinuousSampler of(NormalizedGaussianSampler normalized,
                                                  double mean,
                                                  double standardDeviation) {
        return new GaussianSampler(normalized, mean, standardDeviation);
    }","  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4088L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      BoxMullerNormalizedGaussianSampler boxMullerNormalizedGaussianSampler0 = new BoxMullerNormalizedGaussianSampler(jDKRandomWrapper0);
      // Undeclared exception!
      try { 
        GaussianSampler.of(boxMullerNormalizedGaussianSampler0, Double.POSITIVE_INFINITY, 2.0463090951473895E-20);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // mean is not finite: Infinity
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.GaussianSampler"", e);
      }
  }"
615,"    public GaussianSampler(NormalizedGaussianSampler normalized,
                           double mean,
                           double standardDeviation) {
        if (!(standardDeviation > 0 && standardDeviation < Double.POSITIVE_INFINITY)) {
            throw new IllegalArgumentException(
                ""standard deviation is not strictly positive and finite: "" + standardDeviation);
        }
        if (!Double.isFinite(mean)) {
            throw new IllegalArgumentException(""mean is not finite: "" + mean);
        }
        this.normalized = normalized;
        this.mean = mean;
        this.standardDeviation = standardDeviation;
    }","  public void test9()  throws Throwable  {
      GaussianSampler gaussianSampler0 = null;
      try {
        gaussianSampler0 = new GaussianSampler((NormalizedGaussianSampler) null, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // standard deviation is not strictly positive and finite: Infinity
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.GaussianSampler"", e);
      }
  }"
616,"    public String toString() {
        return ""Gaussian deviate ["" + normalized.toString() + ""]"";
    }","  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1691L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      GaussianSampler gaussianSampler0 = new GaussianSampler(zigguratSampler_NormalizedGaussian0, (-1691L), 7.9201460903779175);
      String string0 = gaussianSampler0.toString();
}"
617,"    public SharedStateContinuousSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return new GaussianSampler(rng, this);
    }","  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1691L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      GaussianSampler gaussianSampler0 = new GaussianSampler(zigguratSampler_NormalizedGaussian0, (-1691L), 7.9201460903779175);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = gaussianSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
618,"    public double sample() {
        return standardDeviation * normalized.sample() + mean;
    }","  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1691L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      GaussianSampler gaussianSampler0 = new GaussianSampler(zigguratSampler_NormalizedGaussian0, (-1691L), 7.9201460903779175);
      double double0 = gaussianSampler0.sample();
}"
619,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double mean) {
        if (mean <= 0) {
            throw new IllegalArgumentException(""Mean is not strictly positive: "" + mean);
        }

        final double p0 = Math.exp(-mean);

        // Probability must be positive. As mean increases then p(0) decreases.
        if (p0 > 0) {
            return new KempSmallMeanPoissonSampler(rng, p0, mean);
        }

        // This catches the edge case of a NaN mean
        throw new IllegalArgumentException(""No probability for mean: "" + mean);
    }","  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        KempSmallMeanPoissonSampler.of((UniformRandomProvider) null, (-306.23));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Mean is not strictly positive: -306.23
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.KempSmallMeanPoissonSampler"", e);
      }
  }"
620,"    public String toString() {
        return ""Kemp Small Mean Poisson deviate ["" + rng.toString() + ""]"";
    }","  public void test1()  throws Throwable  {
      KempSmallMeanPoissonSampler kempSmallMeanPoissonSampler0 = (KempSmallMeanPoissonSampler)KempSmallMeanPoissonSampler.of((UniformRandomProvider) null, 266.1553836556);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      KempSmallMeanPoissonSampler kempSmallMeanPoissonSampler1 = (KempSmallMeanPoissonSampler)kempSmallMeanPoissonSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      String string0 = kempSmallMeanPoissonSampler1.toString();
}"
621,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double mean) {
        if (mean <= 0) {
            throw new IllegalArgumentException(""Mean is not strictly positive: "" + mean);
        }

        final double p0 = Math.exp(-mean);

        // Probability must be positive. As mean increases then p(0) decreases.
        if (p0 > 0) {
            return new KempSmallMeanPoissonSampler(rng, p0, mean);
        }

        // This catches the edge case of a NaN mean
        throw new IllegalArgumentException(""No probability for mean: "" + mean);
    }","  public void test2()  throws Throwable  {
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = KempSmallMeanPoissonSampler.of((UniformRandomProvider) null, 2.768053873679476);
      // Undeclared exception!
      try { 
        ((KempSmallMeanPoissonSampler) sharedStateDiscreteSampler0).sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.KempSmallMeanPoissonSampler"", e);
      }
  }"
622,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double mean) {
        if (mean <= 0) {
            throw new IllegalArgumentException(""Mean is not strictly positive: "" + mean);
        }

        final double p0 = Math.exp(-mean);

        // Probability must be positive. As mean increases then p(0) decreases.
        if (p0 > 0) {
            return new KempSmallMeanPoissonSampler(rng, p0, mean);
        }

        // This catches the edge case of a NaN mean
        throw new IllegalArgumentException(""No probability for mean: "" + mean);
    }","  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        KempSmallMeanPoissonSampler.of((UniformRandomProvider) null, 1889.7667067);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No probability for mean: 1889.7667067
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.KempSmallMeanPoissonSampler"", e);
      }
  }"
623,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double mean) {
        if (mean <= 0) {
            throw new IllegalArgumentException(""Mean is not strictly positive: "" + mean);
        }

        final double p0 = Math.exp(-mean);

        // Probability must be positive. As mean increases then p(0) decreases.
        if (p0 > 0) {
            return new KempSmallMeanPoissonSampler(rng, p0, mean);
        }

        // This catches the edge case of a NaN mean
        throw new IllegalArgumentException(""No probability for mean: "" + mean);
    }","  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        KempSmallMeanPoissonSampler.of((UniformRandomProvider) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Mean is not strictly positive: 0.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.KempSmallMeanPoissonSampler"", e);
      }
  }"
624,"    public String toString() {
        return ""Kemp Small Mean Poisson deviate ["" + rng.toString() + ""]"";
    }","  public void test5()  throws Throwable  {
      KempSmallMeanPoissonSampler kempSmallMeanPoissonSampler0 = (KempSmallMeanPoissonSampler)KempSmallMeanPoissonSampler.of((UniformRandomProvider) null, 266.1553836556);
      // Undeclared exception!
      try { 
        kempSmallMeanPoissonSampler0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
625,"    public int sample() {
        // Note on the algorithm:
        // - X is the unknown sample deviate (the output of the algorithm)
        // - x is the current value from the distribution
        // - p is the probability of the current value x, p(X=x)
        // - u is effectively the cumulative probability that the sample X
        //   is equal or above the current value x, p(X>=x)
        // So if p(X>=x) > p(X=x) the sample must be above x, otherwise it is x
        double u = rng.nextDouble();
        int x = 0;
        double p = p0;
        while (u > p) {
            u -= p;
            // Compute the next probability using a recurrence relation.
            // p(x+1) = p(x) * mean / (x+1)
            p *= mean / ++x;
            // The algorithm listed in Kemp (1981) does not check that the rolling probability
            // is positive. This check is added to ensure no errors when the limit of the summation
            // 1 - sum(p(x)) is above 0 due to cumulative error in floating point arithmetic.
            if (p == 0) {
                return x;
            }
        }
        return x;
    }","  public void test6()  throws Throwable  {
      KempSmallMeanPoissonSampler kempSmallMeanPoissonSampler0 = (KempSmallMeanPoissonSampler)KempSmallMeanPoissonSampler.of((UniformRandomProvider) null, 266.1553836556);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      KempSmallMeanPoissonSampler kempSmallMeanPoissonSampler1 = (KempSmallMeanPoissonSampler)kempSmallMeanPoissonSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      kempSmallMeanPoissonSampler1.sample();
      int int0 = kempSmallMeanPoissonSampler1.sample();
}"
626,"    static double interpolate(double[] v, int j, long u) {
        // Note:
        // The reference code used two methods to interpolate X and Y separately.
        // The c language exploited declared pointers to X and Y and used a #define construct.
        // This computed X identically to this method but Y as:
        // y = Y[j-1] + (1-u2) * (Y[j] - Y[j-1])
        // Using a single method here clarifies the code. It avoids generating (1-u).
        // Tests show the alternative is 1 ULP different with approximately 3% frequency.
        // It has not been measured more than 1 ULP different.
        return v[j] * TWO_POW_63 + u * (v[j - 1] - v[j]);
    }","  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ZigguratSampler.interpolate(doubleArray0, 2, 0L);
  }"
627,,"  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-4893586984900802560L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        ZigguratSampler.Exponential.of((UniformRandomProvider) jDKRandomWrapper0, (double) (-4893586984900802560L));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Mean is not strictly positive: -4.8935869849008026E18
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.ZigguratSampler$Exponential"", e);
      }
  }"
628,,"  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.Exponential zigguratSampler_Exponential0 = ZigguratSampler.Exponential.of((UniformRandomProvider) jDKRandomWrapper0, 70.2);
      Random.setNextRandom((-2147483647));
      zigguratSampler_Exponential0.sample();
      zigguratSampler_Exponential0.sample();
  }"
629,"    String toString(String type) {
        return ""Modified ziggurat "" + type + "" deviate ["" + rng.toString() + ""]"";
    }","  public void test3()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      zigguratSampler_NormalizedGaussian0.toString(""=rc_ET"");
  }"
630,"    long randomInt63() {
        return rng.nextLong() >>> 1;
    }","  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextInt();
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      zigguratSampler_NormalizedGaussian0.randomInt63();
  }"
631,"    long nextLong() {
        return rng.nextLong();
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      zigguratSampler_NormalizedGaussian0.nextLong();
  }"
632,"    static double interpolate(double[] v, int j, long u) {
        // Note:
        // The reference code used two methods to interpolate X and Y separately.
        // The c language exploited declared pointers to X and Y and used a #define construct.
        // This computed X identically to this method but Y as:
        // y = Y[j-1] + (1-u2) * (Y[j] - Y[j-1])
        // Using a single method here clarifies the code. It avoids generating (1-u).
        // Tests show the alternative is 1 ULP different with approximately 3% frequency.
        // It has not been measured more than 1 ULP different.
        return v[j] * TWO_POW_63 + u * (v[j - 1] - v[j]);
    }","  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1682.45501191;
      ZigguratSampler.interpolate(doubleArray0, 1, 1);
  }"
633,"    static double interpolate(double[] v, int j, long u) {
        // Note:
        // The reference code used two methods to interpolate X and Y separately.
        // The c language exploited declared pointers to X and Y and used a #define construct.
        // This computed X identically to this method but Y as:
        // y = Y[j-1] + (1-u2) * (Y[j] - Y[j-1])
        // Using a single method here clarifies the code. It avoids generating (1-u).
        // Tests show the alternative is 1 ULP different with approximately 3% frequency.
        // It has not been measured more than 1 ULP different.
        return v[j] * TWO_POW_63 + u * (v[j - 1] - v[j]);
    }","  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-584.9);
      ZigguratSampler.interpolate(doubleArray0, 1, 1);
  }"
634,"    String toString(String type) {
        return ""Modified ziggurat "" + type + "" deviate ["" + rng.toString() + ""]"";
    }","  public void test8()  throws Throwable  {
      ZigguratSampler.Exponential zigguratSampler_Exponential0 = ZigguratSampler.Exponential.of((UniformRandomProvider) null, 1.8005941154528286E-20);
      // Undeclared exception!
      try { 
        zigguratSampler_Exponential0.toString("" but was "");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
635,"    long randomInt63() {
        return rng.nextLong() >>> 1;
    }","  public void test9()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      // Undeclared exception!
      try { 
        zigguratSampler_NormalizedGaussian0.randomInt63();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.JDKRandomWrapper"", e);
      }
  }"
636,"    long nextLong() {
        return rng.nextLong();
    }","  public void test10()  throws Throwable  {
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of((UniformRandomProvider) null);
      // Undeclared exception!
      try { 
        zigguratSampler_NormalizedGaussian0.nextLong();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.ZigguratSampler"", e);
      }
  }"
637,"    static double interpolate(double[] v, int j, long u) {
        // Note:
        // The reference code used two methods to interpolate X and Y separately.
        // The c language exploited declared pointers to X and Y and used a #define construct.
        // This computed X identically to this method but Y as:
        // y = Y[j-1] + (1-u2) * (Y[j] - Y[j-1])
        // Using a single method here clarifies the code. It avoids generating (1-u).
        // Tests show the alternative is 1 ULP different with approximately 3% frequency.
        // It has not been measured more than 1 ULP different.
        return v[j] * TWO_POW_63 + u * (v[j - 1] - v[j]);
    }","  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ZigguratSampler.interpolate(doubleArray0, (-2062), (-2062));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
638,"    long nextLong() {
        return rng.nextLong();
    }","  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.Exponential zigguratSampler_Exponential0 = ZigguratSampler.Exponential.of((UniformRandomProvider) jDKRandomWrapper0, 70.2);
      Random.setNextRandom((-4602));
      zigguratSampler_Exponential0.nextLong();
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      zigguratSampler_NormalizedGaussian0.sample();
      byte[] byteArray0 = new byte[7];
      jDKRandomWrapper0.nextBytes(byteArray0);
      zigguratSampler_NormalizedGaussian0.nextLong();
      zigguratSampler_NormalizedGaussian0.sample();
  }"
639,,"  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        ZigguratSampler.Exponential.of((UniformRandomProvider) jDKRandomWrapper0, (double) 0L);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Mean is not strictly positive: 0.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.ZigguratSampler$Exponential"", e);
      }
  }"
640,,"  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.Exponential zigguratSampler_Exponential0 = ZigguratSampler.Exponential.of((UniformRandomProvider) jDKRandomWrapper0, 70.2);
}"
641,"    long nextLong() {
        return rng.nextLong();
    }","  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.Exponential zigguratSampler_Exponential0 = ZigguratSampler.Exponential.of((UniformRandomProvider) jDKRandomWrapper0, 70.2);
      Random.setNextRandom((-4602));
      zigguratSampler_Exponential0.nextLong();
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      zigguratSampler_NormalizedGaussian0.sample();
      zigguratSampler_NormalizedGaussian0.nextLong();
      double double0 = zigguratSampler_NormalizedGaussian0.sample();
}"
642,,"  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.Exponential zigguratSampler_Exponential0 = ZigguratSampler.Exponential.of((UniformRandomProvider) jDKRandomWrapper0, (double) 1);
      Random.setNextRandom((-4602));
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      zigguratSampler_NormalizedGaussian0.sample();
      jDKRandomWrapper0.nextFloat();
      double double0 = zigguratSampler_Exponential0.sample();
}"
643,"    long randomInt63() {
        return rng.nextLong() >>> 1;
    }","  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      long long0 = zigguratSampler_NormalizedGaussian0.randomInt63();
}"
644,"    static double interpolate(double[] v, int j, long u) {
        // Note:
        // The reference code used two methods to interpolate X and Y separately.
        // The c language exploited declared pointers to X and Y and used a #define construct.
        // This computed X identically to this method but Y as:
        // y = Y[j-1] + (1-u2) * (Y[j] - Y[j-1])
        // Using a single method here clarifies the code. It avoids generating (1-u).
        // Tests show the alternative is 1 ULP different with approximately 3% frequency.
        // It has not been measured more than 1 ULP different.
        return v[j] * TWO_POW_63 + u * (v[j - 1] - v[j]);
    }","  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZigguratSampler.interpolate((double[]) null, 245, 1L);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
645,"    String toString(String type) {
        return ""Modified ziggurat "" + type + "" deviate ["" + rng.toString() + ""]"";
    }","  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.Exponential zigguratSampler_Exponential0 = ZigguratSampler.Exponential.of((UniformRandomProvider) jDKRandomWrapper0, (double) 1L);
      zigguratSampler_Exponential0.toString();
}"
646,,"  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.Exponential zigguratSampler_Exponential0 = ZigguratSampler.Exponential.of((UniformRandomProvider) jDKRandomWrapper0);
      ZigguratSampler.Exponential zigguratSampler_Exponential1 = zigguratSampler_Exponential0.withUniformRandomProvider(jDKRandomWrapper0);
}"
647,,"  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ZigguratSampler.Exponential zigguratSampler_Exponential0 = ZigguratSampler.Exponential.of((UniformRandomProvider) jDKRandomWrapper0, (double) 1L);
      zigguratSampler_Exponential0.withUniformRandomProvider(jDKRandomWrapper0);
}"
648,"    String toString(String type) {
        return ""Modified ziggurat "" + type + "" deviate ["" + rng.toString() + ""]"";
    }","  public void test22()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      String string0 = zigguratSampler_NormalizedGaussian0.toString();
}"
649,,"  public void test23()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian0 = ZigguratSampler.NormalizedGaussian.of(jDKRandomWrapper0);
      ZigguratSampler.NormalizedGaussian zigguratSampler_NormalizedGaussian1 = zigguratSampler_NormalizedGaussian0.withUniformRandomProvider(jDKRandomWrapper0);
}"
650,,"  public void test0()  throws Throwable  {
      Random.setNextRandom(387448);
      MockRandom mockRandom0 = new MockRandom();
}"
651,,"  public void test1()  throws Throwable  {
      Random.setNextRandom(387448);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
652,,"  public void test2()  throws Throwable  {
      Random.setNextRandom(387448);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = jDKRandomWrapper0.nextDouble();
}"
653,,"  public void test3()  throws Throwable  {
      Random.setNextRandom(387448);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = jDKRandomWrapper0.nextDouble();
      int int0 = jDKRandomWrapper0.nextInt();
}"
654,"    public RejectionInversionZipfSampler(UniformRandomProvider rng,
                                         int numberOfElements,
                                         double exponent) {
        super(null);
        this.rng = rng;
        if (numberOfElements <= 0) {
            throw new IllegalArgumentException(""number of elements is not strictly positive: "" + numberOfElements);
        }
        if (exponent <= 0) {
            throw new IllegalArgumentException(""exponent is not strictly positive: "" + exponent);
        }

        this.numberOfElements = numberOfElements;
        this.exponent = exponent;
        this.hIntegralX1 = hIntegral(1.5) - 1;
        this.hIntegralNumberOfElements = hIntegral(numberOfElements + F_1_2);
        this.s = 2 - hIntegralInverse(hIntegral(2.5) - h(2));
    }","  public void test4()  throws Throwable  {
      Random.setNextRandom(387448);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = jDKRandomWrapper0.nextDouble();
      int int0 = jDKRandomWrapper0.nextInt();
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 387448, 3.6763019741124934);
}"
655,"    public int sample() {
        // The paper describes an algorithm for exponents larger than 1
        // (Algorithm ZRI).
        // The original method uses
        //   H(x) = (v + x)^(1 - q) / (1 - q)
        // as the integral of the hat function.
        // This function is undefined for q = 1, which is the reason for
        // the limitation of the exponent.
        // If instead the integral function
        //   H(x) = ((v + x)^(1 - q) - 1) / (1 - q)
        // is used,
        // for which a meaningful limit exists for q = 1, the method works
        // for all positive exponents.
        // The following implementation uses v = 0 and generates integral
        // number in the range [1, numberOfElements].
        // This is different to the original method where v is defined to
        // be positive and numbers are taken from [0, i_max].
        // This explains why the implementation looks slightly different.

        while (true) {
            final double u = hIntegralNumberOfElements + rng.nextDouble() * (hIntegralX1 - hIntegralNumberOfElements);
            // u is uniformly distributed in (hIntegralX1, hIntegralNumberOfElements]

            final double x = hIntegralInverse(u);
            int k = (int) (x + F_1_2);

            // Limit k to the range [1, numberOfElements] if it would be outside
            // due to numerical inaccuracies.
            if (k < 1) {
                k = 1;
            } else if (k > numberOfElements) {
                k = numberOfElements;
            }

            // Here, the distribution of k is given by:
            //
            //   P(k = 1) = C * (hIntegral(1.5) - hIntegralX1) = C
            //   P(k = m) = C * (hIntegral(m + 1/2) - hIntegral(m - 1/2)) for m >= 2
            //
            //   where C = 1 / (hIntegralNumberOfElements - hIntegralX1)

            if (k - x <= s || u >= hIntegral(k + F_1_2) - h(k)) {

                // Case k = 1:
                //
                //   The right inequality is always true, because replacing k by 1 gives
                //   u >= hIntegral(1.5) - h(1) = hIntegralX1 and u is taken from
                //   (hIntegralX1, hIntegralNumberOfElements].
                //
                //   Therefore, the acceptance rate for k = 1 is P(accepted | k = 1) = 1
                //   and the probability that 1 is returned as random value is
                //   P(k = 1 and accepted) = P(accepted | k = 1) * P(k = 1) = C = C / 1^exponent
                //
                // Case k >= 2:
                //
                //   The left inequality (k - x <= s) is just a short cut
                //   to avoid the more expensive evaluation of the right inequality
                //   (u >= hIntegral(k + 0.5) - h(k)) in many cases.
                //
                //   If the left inequality is true, the right inequality is also true:
                //     Theorem 2 in the paper is valid for all positive exponents, because
                //     the requirements h'(x) = -exponent/x^(exponent + 1) < 0 and
                //     (-1/hInverse'(x))'' = (1+1/exponent) * x^(1/exponent-1) >= 0
                //     are both fulfilled.
                //     Therefore, f(x) = x - hIntegralInverse(hIntegral(x + 0.5) - h(x))
                //     is a non-decreasing function. If k - x <= s holds,
                //     k - x <= s + f(k) - f(2) is obviously also true which is equivalent to
                //     -x <= -hIntegralInverse(hIntegral(k + 0.5) - h(k)),
                //     -hIntegralInverse(u) <= -hIntegralInverse(hIntegral(k + 0.5) - h(k)),
                //     and finally u >= hIntegral(k + 0.5) - h(k).
                //
                //   Hence, the right inequality determines the acceptance rate:
                //   P(accepted | k = m) = h(m) / (hIntegrated(m+1/2) - hIntegrated(m-1/2))
                //   The probability that m is returned is given by
                //   P(k = m and accepted) = P(accepted | k = m) * P(k = m) = C * h(m) = C / m^exponent.
                //
                // In both cases the probabilities are proportional to the probability mass function
                // of the Zipf distribution.

                return k;
            }
        }
    }","  public void test5()  throws Throwable  {
      Random.setNextRandom(387448);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = jDKRandomWrapper0.nextDouble();
      int int0 = jDKRandomWrapper0.nextInt();
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 387448, 3.6763019741124934);
      int int1 = rejectionInversionZipfSampler0.sample();
}"
656,"    public int sample() {
        // The paper describes an algorithm for exponents larger than 1
        // (Algorithm ZRI).
        // The original method uses
        //   H(x) = (v + x)^(1 - q) / (1 - q)
        // as the integral of the hat function.
        // This function is undefined for q = 1, which is the reason for
        // the limitation of the exponent.
        // If instead the integral function
        //   H(x) = ((v + x)^(1 - q) - 1) / (1 - q)
        // is used,
        // for which a meaningful limit exists for q = 1, the method works
        // for all positive exponents.
        // The following implementation uses v = 0 and generates integral
        // number in the range [1, numberOfElements].
        // This is different to the original method where v is defined to
        // be positive and numbers are taken from [0, i_max].
        // This explains why the implementation looks slightly different.

        while (true) {
            final double u = hIntegralNumberOfElements + rng.nextDouble() * (hIntegralX1 - hIntegralNumberOfElements);
            // u is uniformly distributed in (hIntegralX1, hIntegralNumberOfElements]

            final double x = hIntegralInverse(u);
            int k = (int) (x + F_1_2);

            // Limit k to the range [1, numberOfElements] if it would be outside
            // due to numerical inaccuracies.
            if (k < 1) {
                k = 1;
            } else if (k > numberOfElements) {
                k = numberOfElements;
            }

            // Here, the distribution of k is given by:
            //
            //   P(k = 1) = C * (hIntegral(1.5) - hIntegralX1) = C
            //   P(k = m) = C * (hIntegral(m + 1/2) - hIntegral(m - 1/2)) for m >= 2
            //
            //   where C = 1 / (hIntegralNumberOfElements - hIntegralX1)

            if (k - x <= s || u >= hIntegral(k + F_1_2) - h(k)) {

                // Case k = 1:
                //
                //   The right inequality is always true, because replacing k by 1 gives
                //   u >= hIntegral(1.5) - h(1) = hIntegralX1 and u is taken from
                //   (hIntegralX1, hIntegralNumberOfElements].
                //
                //   Therefore, the acceptance rate for k = 1 is P(accepted | k = 1) = 1
                //   and the probability that 1 is returned as random value is
                //   P(k = 1 and accepted) = P(accepted | k = 1) * P(k = 1) = C = C / 1^exponent
                //
                // Case k >= 2:
                //
                //   The left inequality (k - x <= s) is just a short cut
                //   to avoid the more expensive evaluation of the right inequality
                //   (u >= hIntegral(k + 0.5) - h(k)) in many cases.
                //
                //   If the left inequality is true, the right inequality is also true:
                //     Theorem 2 in the paper is valid for all positive exponents, because
                //     the requirements h'(x) = -exponent/x^(exponent + 1) < 0 and
                //     (-1/hInverse'(x))'' = (1+1/exponent) * x^(1/exponent-1) >= 0
                //     are both fulfilled.
                //     Therefore, f(x) = x - hIntegralInverse(hIntegral(x + 0.5) - h(x))
                //     is a non-decreasing function. If k - x <= s holds,
                //     k - x <= s + f(k) - f(2) is obviously also true which is equivalent to
                //     -x <= -hIntegralInverse(hIntegral(k + 0.5) - h(k)),
                //     -hIntegralInverse(u) <= -hIntegralInverse(hIntegral(k + 0.5) - h(k)),
                //     and finally u >= hIntegral(k + 0.5) - h(k).
                //
                //   Hence, the right inequality determines the acceptance rate:
                //   P(accepted | k = m) = h(m) / (hIntegrated(m+1/2) - hIntegrated(m-1/2))
                //   The probability that m is returned is given by
                //   P(k = m and accepted) = P(accepted | k = m) * P(k = m) = C * h(m) = C / m^exponent.
                //
                // In both cases the probabilities are proportional to the probability mass function
                // of the Zipf distribution.

                return k;
            }
        }
    }","  public void test6()  throws Throwable  {
      Random.setNextRandom(387448);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = jDKRandomWrapper0.nextDouble();
      int int0 = jDKRandomWrapper0.nextInt();
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 387448, 3.6763019741124934);
      int int1 = rejectionInversionZipfSampler0.sample();
}"
657,,"  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
}"
658,,"  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
659,"    public RejectionInversionZipfSampler(UniformRandomProvider rng,
                                         int numberOfElements,
                                         double exponent) {
        super(null);
        this.rng = rng;
        if (numberOfElements <= 0) {
            throw new IllegalArgumentException(""number of elements is not strictly positive: "" + numberOfElements);
        }
        if (exponent <= 0) {
            throw new IllegalArgumentException(""exponent is not strictly positive: "" + exponent);
        }

        this.numberOfElements = numberOfElements;
        this.exponent = exponent;
        this.hIntegralX1 = hIntegral(1.5) - 1;
        this.hIntegralNumberOfElements = hIntegral(numberOfElements + F_1_2);
        this.s = 2 - hIntegralInverse(hIntegral(2.5) - h(2));
    }","  public void test9()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 889, 889);
}"
660,"    public int sample() {
        // The paper describes an algorithm for exponents larger than 1
        // (Algorithm ZRI).
        // The original method uses
        //   H(x) = (v + x)^(1 - q) / (1 - q)
        // as the integral of the hat function.
        // This function is undefined for q = 1, which is the reason for
        // the limitation of the exponent.
        // If instead the integral function
        //   H(x) = ((v + x)^(1 - q) - 1) / (1 - q)
        // is used,
        // for which a meaningful limit exists for q = 1, the method works
        // for all positive exponents.
        // The following implementation uses v = 0 and generates integral
        // number in the range [1, numberOfElements].
        // This is different to the original method where v is defined to
        // be positive and numbers are taken from [0, i_max].
        // This explains why the implementation looks slightly different.

        while (true) {
            final double u = hIntegralNumberOfElements + rng.nextDouble() * (hIntegralX1 - hIntegralNumberOfElements);
            // u is uniformly distributed in (hIntegralX1, hIntegralNumberOfElements]

            final double x = hIntegralInverse(u);
            int k = (int) (x + F_1_2);

            // Limit k to the range [1, numberOfElements] if it would be outside
            // due to numerical inaccuracies.
            if (k < 1) {
                k = 1;
            } else if (k > numberOfElements) {
                k = numberOfElements;
            }

            // Here, the distribution of k is given by:
            //
            //   P(k = 1) = C * (hIntegral(1.5) - hIntegralX1) = C
            //   P(k = m) = C * (hIntegral(m + 1/2) - hIntegral(m - 1/2)) for m >= 2
            //
            //   where C = 1 / (hIntegralNumberOfElements - hIntegralX1)

            if (k - x <= s || u >= hIntegral(k + F_1_2) - h(k)) {

                // Case k = 1:
                //
                //   The right inequality is always true, because replacing k by 1 gives
                //   u >= hIntegral(1.5) - h(1) = hIntegralX1 and u is taken from
                //   (hIntegralX1, hIntegralNumberOfElements].
                //
                //   Therefore, the acceptance rate for k = 1 is P(accepted | k = 1) = 1
                //   and the probability that 1 is returned as random value is
                //   P(k = 1 and accepted) = P(accepted | k = 1) * P(k = 1) = C = C / 1^exponent
                //
                // Case k >= 2:
                //
                //   The left inequality (k - x <= s) is just a short cut
                //   to avoid the more expensive evaluation of the right inequality
                //   (u >= hIntegral(k + 0.5) - h(k)) in many cases.
                //
                //   If the left inequality is true, the right inequality is also true:
                //     Theorem 2 in the paper is valid for all positive exponents, because
                //     the requirements h'(x) = -exponent/x^(exponent + 1) < 0 and
                //     (-1/hInverse'(x))'' = (1+1/exponent) * x^(1/exponent-1) >= 0
                //     are both fulfilled.
                //     Therefore, f(x) = x - hIntegralInverse(hIntegral(x + 0.5) - h(x))
                //     is a non-decreasing function. If k - x <= s holds,
                //     k - x <= s + f(k) - f(2) is obviously also true which is equivalent to
                //     -x <= -hIntegralInverse(hIntegral(k + 0.5) - h(k)),
                //     -hIntegralInverse(u) <= -hIntegralInverse(hIntegral(k + 0.5) - h(k)),
                //     and finally u >= hIntegral(k + 0.5) - h(k).
                //
                //   Hence, the right inequality determines the acceptance rate:
                //   P(accepted | k = m) = h(m) / (hIntegrated(m+1/2) - hIntegrated(m-1/2))
                //   The probability that m is returned is given by
                //   P(k = m and accepted) = P(accepted | k = m) * P(k = m) = C * h(m) = C / m^exponent.
                //
                // In both cases the probabilities are proportional to the probability mass function
                // of the Zipf distribution.

                return k;
            }
        }
    }","  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 889, 889);
      int int0 = rejectionInversionZipfSampler0.sample();
}"
661,,"  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
}"
662,,"  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
663,,"  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      long long0 = jDKRandomWrapper0.nextLong();
}"
664,"    public RejectionInversionZipfSampler(UniformRandomProvider rng,
                                         int numberOfElements,
                                         double exponent) {
        super(null);
        this.rng = rng;
        if (numberOfElements <= 0) {
            throw new IllegalArgumentException(""number of elements is not strictly positive: "" + numberOfElements);
        }
        if (exponent <= 0) {
            throw new IllegalArgumentException(""exponent is not strictly positive: "" + exponent);
        }

        this.numberOfElements = numberOfElements;
        this.exponent = exponent;
        this.hIntegralX1 = hIntegral(1.5) - 1;
        this.hIntegralNumberOfElements = hIntegral(numberOfElements + F_1_2);
        this.s = 2 - hIntegralInverse(hIntegral(2.5) - h(2));
    }","  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      long long0 = jDKRandomWrapper0.nextLong();
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 1, 1);
}"
665,"    public int sample() {
        // The paper describes an algorithm for exponents larger than 1
        // (Algorithm ZRI).
        // The original method uses
        //   H(x) = (v + x)^(1 - q) / (1 - q)
        // as the integral of the hat function.
        // This function is undefined for q = 1, which is the reason for
        // the limitation of the exponent.
        // If instead the integral function
        //   H(x) = ((v + x)^(1 - q) - 1) / (1 - q)
        // is used,
        // for which a meaningful limit exists for q = 1, the method works
        // for all positive exponents.
        // The following implementation uses v = 0 and generates integral
        // number in the range [1, numberOfElements].
        // This is different to the original method where v is defined to
        // be positive and numbers are taken from [0, i_max].
        // This explains why the implementation looks slightly different.

        while (true) {
            final double u = hIntegralNumberOfElements + rng.nextDouble() * (hIntegralX1 - hIntegralNumberOfElements);
            // u is uniformly distributed in (hIntegralX1, hIntegralNumberOfElements]

            final double x = hIntegralInverse(u);
            int k = (int) (x + F_1_2);

            // Limit k to the range [1, numberOfElements] if it would be outside
            // due to numerical inaccuracies.
            if (k < 1) {
                k = 1;
            } else if (k > numberOfElements) {
                k = numberOfElements;
            }

            // Here, the distribution of k is given by:
            //
            //   P(k = 1) = C * (hIntegral(1.5) - hIntegralX1) = C
            //   P(k = m) = C * (hIntegral(m + 1/2) - hIntegral(m - 1/2)) for m >= 2
            //
            //   where C = 1 / (hIntegralNumberOfElements - hIntegralX1)

            if (k - x <= s || u >= hIntegral(k + F_1_2) - h(k)) {

                // Case k = 1:
                //
                //   The right inequality is always true, because replacing k by 1 gives
                //   u >= hIntegral(1.5) - h(1) = hIntegralX1 and u is taken from
                //   (hIntegralX1, hIntegralNumberOfElements].
                //
                //   Therefore, the acceptance rate for k = 1 is P(accepted | k = 1) = 1
                //   and the probability that 1 is returned as random value is
                //   P(k = 1 and accepted) = P(accepted | k = 1) * P(k = 1) = C = C / 1^exponent
                //
                // Case k >= 2:
                //
                //   The left inequality (k - x <= s) is just a short cut
                //   to avoid the more expensive evaluation of the right inequality
                //   (u >= hIntegral(k + 0.5) - h(k)) in many cases.
                //
                //   If the left inequality is true, the right inequality is also true:
                //     Theorem 2 in the paper is valid for all positive exponents, because
                //     the requirements h'(x) = -exponent/x^(exponent + 1) < 0 and
                //     (-1/hInverse'(x))'' = (1+1/exponent) * x^(1/exponent-1) >= 0
                //     are both fulfilled.
                //     Therefore, f(x) = x - hIntegralInverse(hIntegral(x + 0.5) - h(x))
                //     is a non-decreasing function. If k - x <= s holds,
                //     k - x <= s + f(k) - f(2) is obviously also true which is equivalent to
                //     -x <= -hIntegralInverse(hIntegral(k + 0.5) - h(k)),
                //     -hIntegralInverse(u) <= -hIntegralInverse(hIntegral(k + 0.5) - h(k)),
                //     and finally u >= hIntegral(k + 0.5) - h(k).
                //
                //   Hence, the right inequality determines the acceptance rate:
                //   P(accepted | k = m) = h(m) / (hIntegrated(m+1/2) - hIntegrated(m-1/2))
                //   The probability that m is returned is given by
                //   P(k = m and accepted) = P(accepted | k = m) * P(k = m) = C * h(m) = C / m^exponent.
                //
                // In both cases the probabilities are proportional to the probability mass function
                // of the Zipf distribution.

                return k;
            }
        }
    }","  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      long long0 = jDKRandomWrapper0.nextLong();
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 1, 1);
      int int0 = rejectionInversionZipfSampler0.sample();
}"
666,"    public RejectionInversionZipfSampler(UniformRandomProvider rng,
                                         int numberOfElements,
                                         double exponent) {
        super(null);
        this.rng = rng;
        if (numberOfElements <= 0) {
            throw new IllegalArgumentException(""number of elements is not strictly positive: "" + numberOfElements);
        }
        if (exponent <= 0) {
            throw new IllegalArgumentException(""exponent is not strictly positive: "" + exponent);
        }

        this.numberOfElements = numberOfElements;
        this.exponent = exponent;
        this.hIntegralX1 = hIntegral(1.5) - 1;
        this.hIntegralNumberOfElements = hIntegral(numberOfElements + F_1_2);
        this.s = 2 - hIntegralInverse(hIntegral(2.5) - h(2));
    }","  public void test16()  throws Throwable  {
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler((UniformRandomProvider) null, 1582, 620L);
}"
667,"    public RejectionInversionZipfSampler(UniformRandomProvider rng,
                                         int numberOfElements,
                                         double exponent) {
        super(null);
        this.rng = rng;
        if (numberOfElements <= 0) {
            throw new IllegalArgumentException(""number of elements is not strictly positive: "" + numberOfElements);
        }
        if (exponent <= 0) {
            throw new IllegalArgumentException(""exponent is not strictly positive: "" + exponent);
        }

        this.numberOfElements = numberOfElements;
        this.exponent = exponent;
        this.hIntegralX1 = hIntegral(1.5) - 1;
        this.hIntegralNumberOfElements = hIntegral(numberOfElements + F_1_2);
        this.s = 2 - hIntegralInverse(hIntegral(2.5) - h(2));
    }","  public void test17()  throws Throwable  {
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler((UniformRandomProvider) null, 981, 981);
}"
668,,"  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
}"
669,,"  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
670,,"  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
}"
671,,"  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
672,"    public int sample() {
        // The paper describes an algorithm for exponents larger than 1
        // (Algorithm ZRI).
        // The original method uses
        //   H(x) = (v + x)^(1 - q) / (1 - q)
        // as the integral of the hat function.
        // This function is undefined for q = 1, which is the reason for
        // the limitation of the exponent.
        // If instead the integral function
        //   H(x) = ((v + x)^(1 - q) - 1) / (1 - q)
        // is used,
        // for which a meaningful limit exists for q = 1, the method works
        // for all positive exponents.
        // The following implementation uses v = 0 and generates integral
        // number in the range [1, numberOfElements].
        // This is different to the original method where v is defined to
        // be positive and numbers are taken from [0, i_max].
        // This explains why the implementation looks slightly different.

        while (true) {
            final double u = hIntegralNumberOfElements + rng.nextDouble() * (hIntegralX1 - hIntegralNumberOfElements);
            // u is uniformly distributed in (hIntegralX1, hIntegralNumberOfElements]

            final double x = hIntegralInverse(u);
            int k = (int) (x + F_1_2);

            // Limit k to the range [1, numberOfElements] if it would be outside
            // due to numerical inaccuracies.
            if (k < 1) {
                k = 1;
            } else if (k > numberOfElements) {
                k = numberOfElements;
            }

            // Here, the distribution of k is given by:
            //
            //   P(k = 1) = C * (hIntegral(1.5) - hIntegralX1) = C
            //   P(k = m) = C * (hIntegral(m + 1/2) - hIntegral(m - 1/2)) for m >= 2
            //
            //   where C = 1 / (hIntegralNumberOfElements - hIntegralX1)

            if (k - x <= s || u >= hIntegral(k + F_1_2) - h(k)) {

                // Case k = 1:
                //
                //   The right inequality is always true, because replacing k by 1 gives
                //   u >= hIntegral(1.5) - h(1) = hIntegralX1 and u is taken from
                //   (hIntegralX1, hIntegralNumberOfElements].
                //
                //   Therefore, the acceptance rate for k = 1 is P(accepted | k = 1) = 1
                //   and the probability that 1 is returned as random value is
                //   P(k = 1 and accepted) = P(accepted | k = 1) * P(k = 1) = C = C / 1^exponent
                //
                // Case k >= 2:
                //
                //   The left inequality (k - x <= s) is just a short cut
                //   to avoid the more expensive evaluation of the right inequality
                //   (u >= hIntegral(k + 0.5) - h(k)) in many cases.
                //
                //   If the left inequality is true, the right inequality is also true:
                //     Theorem 2 in the paper is valid for all positive exponents, because
                //     the requirements h'(x) = -exponent/x^(exponent + 1) < 0 and
                //     (-1/hInverse'(x))'' = (1+1/exponent) * x^(1/exponent-1) >= 0
                //     are both fulfilled.
                //     Therefore, f(x) = x - hIntegralInverse(hIntegral(x + 0.5) - h(x))
                //     is a non-decreasing function. If k - x <= s holds,
                //     k - x <= s + f(k) - f(2) is obviously also true which is equivalent to
                //     -x <= -hIntegralInverse(hIntegral(k + 0.5) - h(k)),
                //     -hIntegralInverse(u) <= -hIntegralInverse(hIntegral(k + 0.5) - h(k)),
                //     and finally u >= hIntegral(k + 0.5) - h(k).
                //
                //   Hence, the right inequality determines the acceptance rate:
                //   P(accepted | k = m) = h(m) / (hIntegrated(m+1/2) - hIntegrated(m-1/2))
                //   The probability that m is returned is given by
                //   P(k = m and accepted) = P(accepted | k = m) * P(k = m) = C * h(m) = C / m^exponent.
                //
                // In both cases the probabilities are proportional to the probability mass function
                // of the Zipf distribution.

                return k;
            }
        }
    }","  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 682, 73.6655104);
      int int0 = rejectionInversionZipfSampler0.sample();
}"
673,"    public int sample() {
        // The paper describes an algorithm for exponents larger than 1
        // (Algorithm ZRI).
        // The original method uses
        //   H(x) = (v + x)^(1 - q) / (1 - q)
        // as the integral of the hat function.
        // This function is undefined for q = 1, which is the reason for
        // the limitation of the exponent.
        // If instead the integral function
        //   H(x) = ((v + x)^(1 - q) - 1) / (1 - q)
        // is used,
        // for which a meaningful limit exists for q = 1, the method works
        // for all positive exponents.
        // The following implementation uses v = 0 and generates integral
        // number in the range [1, numberOfElements].
        // This is different to the original method where v is defined to
        // be positive and numbers are taken from [0, i_max].
        // This explains why the implementation looks slightly different.

        while (true) {
            final double u = hIntegralNumberOfElements + rng.nextDouble() * (hIntegralX1 - hIntegralNumberOfElements);
            // u is uniformly distributed in (hIntegralX1, hIntegralNumberOfElements]

            final double x = hIntegralInverse(u);
            int k = (int) (x + F_1_2);

            // Limit k to the range [1, numberOfElements] if it would be outside
            // due to numerical inaccuracies.
            if (k < 1) {
                k = 1;
            } else if (k > numberOfElements) {
                k = numberOfElements;
            }

            // Here, the distribution of k is given by:
            //
            //   P(k = 1) = C * (hIntegral(1.5) - hIntegralX1) = C
            //   P(k = m) = C * (hIntegral(m + 1/2) - hIntegral(m - 1/2)) for m >= 2
            //
            //   where C = 1 / (hIntegralNumberOfElements - hIntegralX1)

            if (k - x <= s || u >= hIntegral(k + F_1_2) - h(k)) {

                // Case k = 1:
                //
                //   The right inequality is always true, because replacing k by 1 gives
                //   u >= hIntegral(1.5) - h(1) = hIntegralX1 and u is taken from
                //   (hIntegralX1, hIntegralNumberOfElements].
                //
                //   Therefore, the acceptance rate for k = 1 is P(accepted | k = 1) = 1
                //   and the probability that 1 is returned as random value is
                //   P(k = 1 and accepted) = P(accepted | k = 1) * P(k = 1) = C = C / 1^exponent
                //
                // Case k >= 2:
                //
                //   The left inequality (k - x <= s) is just a short cut
                //   to avoid the more expensive evaluation of the right inequality
                //   (u >= hIntegral(k + 0.5) - h(k)) in many cases.
                //
                //   If the left inequality is true, the right inequality is also true:
                //     Theorem 2 in the paper is valid for all positive exponents, because
                //     the requirements h'(x) = -exponent/x^(exponent + 1) < 0 and
                //     (-1/hInverse'(x))'' = (1+1/exponent) * x^(1/exponent-1) >= 0
                //     are both fulfilled.
                //     Therefore, f(x) = x - hIntegralInverse(hIntegral(x + 0.5) - h(x))
                //     is a non-decreasing function. If k - x <= s holds,
                //     k - x <= s + f(k) - f(2) is obviously also true which is equivalent to
                //     -x <= -hIntegralInverse(hIntegral(k + 0.5) - h(k)),
                //     -hIntegralInverse(u) <= -hIntegralInverse(hIntegral(k + 0.5) - h(k)),
                //     and finally u >= hIntegral(k + 0.5) - h(k).
                //
                //   Hence, the right inequality determines the acceptance rate:
                //   P(accepted | k = m) = h(m) / (hIntegrated(m+1/2) - hIntegrated(m-1/2))
                //   The probability that m is returned is given by
                //   P(k = m and accepted) = P(accepted | k = m) * P(k = m) = C * h(m) = C / m^exponent.
                //
                // In both cases the probabilities are proportional to the probability mass function
                // of the Zipf distribution.

                return k;
            }
        }
    }","  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 1017229069, 1017229069);
      int int0 = rejectionInversionZipfSampler0.sample();
}"
674,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                int numberOfElements,
                                                double exponent) {
        return new RejectionInversionZipfSampler(rng, numberOfElements, exponent);
    }","  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        RejectionInversionZipfSampler.of(jDKRandomWrapper0, 1017229069, (-24.206209717834803));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // exponent is not strictly positive: -24.206209717834803
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.RejectionInversionZipfSampler"", e);
      }
  }"
675,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                int numberOfElements,
                                                double exponent) {
        return new RejectionInversionZipfSampler(rng, numberOfElements, exponent);
    }","  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = RejectionInversionZipfSampler.of(jDKRandomWrapper0, 1017229069, 0.9999999995);
      int int0 = ((RejectionInversionZipfSampler) sharedStateDiscreteSampler0).sample();
}"
676,"    public String toString() {
        return ""Rejection inversion Zipf deviate ["" + rng.toString() + ""]"";
    }","  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 1017229069, 1017229069);
      String string0 = rejectionInversionZipfSampler0.toString();
}"
677,"    public SharedStateDiscreteSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return new RejectionInversionZipfSampler(rng, this);
    }","  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      RejectionInversionZipfSampler rejectionInversionZipfSampler0 = new RejectionInversionZipfSampler(jDKRandomWrapper0, 1017229069, 1017229069);
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = rejectionInversionZipfSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
678,"    public double sample() {
        double random;
        if (Double.isNaN(nextGaussian)) {
            // Generate a pair of Gaussian numbers.

            // Avoid zero for the uniform deviate y.
            // The extreme tail of the sample is:
            // y = 2^-53
            // r = 8.57167
            final double x = rng.nextDouble();
            final double y = InternalUtils.makeNonZeroDouble(rng.nextLong());
            final double alpha = 2 * Math.PI * x;
            final double r = Math.sqrt(-2 * Math.log(y));

            // Return the first element of the generated pair.
            random = r * Math.cos(alpha);

            // Keep second element of the pair for next invocation.
            nextGaussian = r * Math.sin(alpha);
        } else {
            // Use the second element of the pair (generated at the
            // previous invocation).
            random = nextGaussian;

            // Both elements of the pair have been used.
            nextGaussian = Double.NaN;
        }

        return standardDeviation * random + mean;
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      BoxMullerGaussianSampler boxMullerGaussianSampler0 = new BoxMullerGaussianSampler(jDKRandomWrapper0, 0.0, 1024.0791027);
      boxMullerGaussianSampler0.sample();
      boxMullerGaussianSampler0.sample();
      boxMullerGaussianSampler0.sample();
      double double0 = boxMullerGaussianSampler0.sample();
}"
679,"    public double sample() {
        double random;
        if (Double.isNaN(nextGaussian)) {
            // Generate a pair of Gaussian numbers.

            // Avoid zero for the uniform deviate y.
            // The extreme tail of the sample is:
            // y = 2^-53
            // r = 8.57167
            final double x = rng.nextDouble();
            final double y = InternalUtils.makeNonZeroDouble(rng.nextLong());
            final double alpha = 2 * Math.PI * x;
            final double r = Math.sqrt(-2 * Math.log(y));

            // Return the first element of the generated pair.
            random = r * Math.cos(alpha);

            // Keep second element of the pair for next invocation.
            nextGaussian = r * Math.sin(alpha);
        } else {
            // Use the second element of the pair (generated at the
            // previous invocation).
            random = nextGaussian;

            // Both elements of the pair have been used.
            nextGaussian = Double.NaN;
        }

        return standardDeviation * random + mean;
    }","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      BoxMullerGaussianSampler boxMullerGaussianSampler0 = new BoxMullerGaussianSampler(jDKRandomWrapper0, 0.0, 1024.0791027);
      boxMullerGaussianSampler0.sample();
      boxMullerGaussianSampler0.sample();
      boxMullerGaussianSampler0.sample();
      double double0 = boxMullerGaussianSampler0.sample();
      double double1 = boxMullerGaussianSampler0.sample();
}"
680,"    public String toString() {
        return ""Box-Muller Gaussian deviate ["" + rng.toString() + ""]"";
    }","  public void test2()  throws Throwable  {
      BoxMullerGaussianSampler boxMullerGaussianSampler0 = new BoxMullerGaussianSampler((UniformRandomProvider) null, 0.0, 3218.3319818);
      // Undeclared exception!
      try { 
        boxMullerGaussianSampler0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
681,"    public double sample() {
        double random;
        if (Double.isNaN(nextGaussian)) {
            // Generate a pair of Gaussian numbers.

            // Avoid zero for the uniform deviate y.
            // The extreme tail of the sample is:
            // y = 2^-53
            // r = 8.57167
            final double x = rng.nextDouble();
            final double y = InternalUtils.makeNonZeroDouble(rng.nextLong());
            final double alpha = 2 * Math.PI * x;
            final double r = Math.sqrt(-2 * Math.log(y));

            // Return the first element of the generated pair.
            random = r * Math.cos(alpha);

            // Keep second element of the pair for next invocation.
            nextGaussian = r * Math.sin(alpha);
        } else {
            // Use the second element of the pair (generated at the
            // previous invocation).
            random = nextGaussian;

            // Both elements of the pair have been used.
            nextGaussian = Double.NaN;
        }

        return standardDeviation * random + mean;
    }","  public void test3()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
      BoxMullerGaussianSampler boxMullerGaussianSampler0 = new BoxMullerGaussianSampler(jDKRandomWrapper0, 2108.49, 2108.49);
      // Undeclared exception!
      try { 
        boxMullerGaussianSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.JDKRandomWrapper"", e);
      }
  }"
682,"    public double sample() {
        double random;
        if (Double.isNaN(nextGaussian)) {
            // Generate a pair of Gaussian numbers.

            // Avoid zero for the uniform deviate y.
            // The extreme tail of the sample is:
            // y = 2^-53
            // r = 8.57167
            final double x = rng.nextDouble();
            final double y = InternalUtils.makeNonZeroDouble(rng.nextLong());
            final double alpha = 2 * Math.PI * x;
            final double r = Math.sqrt(-2 * Math.log(y));

            // Return the first element of the generated pair.
            random = r * Math.cos(alpha);

            // Keep second element of the pair for next invocation.
            nextGaussian = r * Math.sin(alpha);
        } else {
            // Use the second element of the pair (generated at the
            // previous invocation).
            random = nextGaussian;

            // Both elements of the pair have been used.
            nextGaussian = Double.NaN;
        }

        return standardDeviation * random + mean;
    }","  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      BoxMullerGaussianSampler boxMullerGaussianSampler0 = new BoxMullerGaussianSampler(jDKRandomWrapper0, 0.11901053718841254, 0.11901053718841254);
      double double0 = boxMullerGaussianSampler0.sample();
}"
683,"    public double sample() {
        double random;
        if (Double.isNaN(nextGaussian)) {
            // Generate a pair of Gaussian numbers.

            // Avoid zero for the uniform deviate y.
            // The extreme tail of the sample is:
            // y = 2^-53
            // r = 8.57167
            final double x = rng.nextDouble();
            final double y = InternalUtils.makeNonZeroDouble(rng.nextLong());
            final double alpha = 2 * Math.PI * x;
            final double r = Math.sqrt(-2 * Math.log(y));

            // Return the first element of the generated pair.
            random = r * Math.cos(alpha);

            // Keep second element of the pair for next invocation.
            nextGaussian = r * Math.sin(alpha);
        } else {
            // Use the second element of the pair (generated at the
            // previous invocation).
            random = nextGaussian;

            // Both elements of the pair have been used.
            nextGaussian = Double.NaN;
        }

        return standardDeviation * random + mean;
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      BoxMullerGaussianSampler boxMullerGaussianSampler0 = new BoxMullerGaussianSampler(jDKRandomWrapper0, 0.11901053718841254, 0.11901053718841254);
      double double0 = boxMullerGaussianSampler0.sample();
      double double1 = boxMullerGaussianSampler0.sample();
}"
684,"    public BoxMullerGaussianSampler(UniformRandomProvider rng,
                                    double mean,
                                    double standardDeviation) {
        super(null);
        if (standardDeviation <= 0) {
            throw new IllegalArgumentException(""standard deviation is not strictly positive: "" +
                standardDeviation);
        }
        this.rng = rng;
        this.mean = mean;
        this.standardDeviation = standardDeviation;
    }","  public void test6()  throws Throwable  {
      BoxMullerGaussianSampler boxMullerGaussianSampler0 = null;
      try {
        boxMullerGaussianSampler0 = new BoxMullerGaussianSampler((UniformRandomProvider) null, (-3049.58125444409), (-3049.58125444409));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // standard deviation is not strictly positive: -3049.58125444409
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.BoxMullerGaussianSampler"", e);
      }
  }"
685,"    public String toString() {
        return ""Box-Muller Gaussian deviate ["" + rng.toString() + ""]"";
    }","  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      BoxMullerGaussianSampler boxMullerGaussianSampler0 = new BoxMullerGaussianSampler(jDKRandomWrapper0, 0.11901053718841254, 0.11901053718841254);
      String string0 = boxMullerGaussianSampler0.toString();
}"
686,"    public abstract UniformLongSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Creates a new discrete uniform distribution sampler.
     *
     * @param rng Generator of uniformly distributed random numbers.
     * @param lower Lower bound (inclusive) of the distribution.
     * @param upper Upper bound (inclusive) of the distribution.
     * @return the sampler
     * @throws IllegalArgumentException if {@code lower > upper}","  public void test0()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
      UniformLongSampler uniformLongSampler0 = UniformLongSampler.of(jDKRandomWrapper0, (-560L), 1L);
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper((Random) null);
      UniformLongSampler uniformLongSampler1 = uniformLongSampler0.withUniformRandomProvider(jDKRandomWrapper1);
}"
687,"    public static UniformLongSampler of(UniformRandomProvider rng,
                                        long lower,
                                        long upper) {
        if (lower > upper) {
            throw new IllegalArgumentException(lower  + "" > "" + upper);
        }

        // Choose the algorithm depending on the range

        // Edge case for no range.
        // This must be done first as the methods to handle lower == 0
        // do not handle upper == 0.
        if (upper == lower) {
            return new FixedUniformLongSampler(lower);
        }

        // Algorithms to ignore the lower bound if it is zero.
        if (lower == 0) {
            return createZeroBoundedSampler(rng, upper);
        }

        final long range = (upper - lower) + 1;
        // Check power of 2 first to handle range == 2^63.
        if (isPowerOf2(range)) {
            return new OffsetUniformLongSampler(lower,
                                                new PowerOf2RangeUniformLongSampler(rng, range));
        }
        if (range <= 0) {
            // The range is too wide to fit in a positive long (larger
            // than 2^63); use a simple rejection method.
            // Note: if range == 0 then the input is [Long.MIN_VALUE, Long.MAX_VALUE].
            // No specialisation exists for this and it is handled as a large range.
            return new LargeRangeUniformLongSampler(rng, lower, upper);
        }
        // Use a sample from the range added to the lower bound.
        return new OffsetUniformLongSampler(lower,
                                            new SmallRangeUniformLongSampler(rng, range));
    }","  public void test1()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(Integer.MAX_VALUE);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextFloat();
      UniformLongSampler uniformLongSampler0 = UniformLongSampler.of(jDKRandomWrapper0, 1194L, 1753L);
      long long0 = uniformLongSampler0.sample();
}"
688,"    public abstract UniformLongSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Creates a new discrete uniform distribution sampler.
     *
     * @param rng Generator of uniformly distributed random numbers.
     * @param lower Lower bound (inclusive) of the distribution.
     * @param upper Upper bound (inclusive) of the distribution.
     * @return the sampler
     * @throws IllegalArgumentException if {@code lower > upper}","  public void test2()  throws Throwable  {
      UniformLongSampler uniformLongSampler0 = UniformLongSampler.of((UniformRandomProvider) null, (-1L), 0L);
      MockRandom mockRandom0 = new MockRandom((-4914L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UniformLongSampler uniformLongSampler1 = uniformLongSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
689,"    public static UniformLongSampler of(UniformRandomProvider rng,
                                        long lower,
                                        long upper) {
        if (lower > upper) {
            throw new IllegalArgumentException(lower  + "" > "" + upper);
        }

        // Choose the algorithm depending on the range

        // Edge case for no range.
        // This must be done first as the methods to handle lower == 0
        // do not handle upper == 0.
        if (upper == lower) {
            return new FixedUniformLongSampler(lower);
        }

        // Algorithms to ignore the lower bound if it is zero.
        if (lower == 0) {
            return createZeroBoundedSampler(rng, upper);
        }

        final long range = (upper - lower) + 1;
        // Check power of 2 first to handle range == 2^63.
        if (isPowerOf2(range)) {
            return new OffsetUniformLongSampler(lower,
                                                new PowerOf2RangeUniformLongSampler(rng, range));
        }
        if (range <= 0) {
            // The range is too wide to fit in a positive long (larger
            // than 2^63); use a simple rejection method.
            // Note: if range == 0 then the input is [Long.MIN_VALUE, Long.MAX_VALUE].
            // No specialisation exists for this and it is handled as a large range.
            return new LargeRangeUniformLongSampler(rng, lower, upper);
        }
        // Use a sample from the range added to the lower bound.
        return new OffsetUniformLongSampler(lower,
                                            new SmallRangeUniformLongSampler(rng, range));
    }","  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UniformLongSampler uniformLongSampler0 = UniformLongSampler.of(jDKRandomWrapper0, 0L, 1L);
      uniformLongSampler0.sample();
      long long0 = uniformLongSampler0.sample();
}"
690,"    public String toString() {
        return ""Uniform deviate ["" + rng.toString() + ""]"";
    }","  public void test4()  throws Throwable  {
      UniformLongSampler uniformLongSampler0 = UniformLongSampler.of((UniformRandomProvider) null, (-243L), 1187L);
      // Undeclared exception!
      try { 
        uniformLongSampler0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
691,"    public String toString() {
        return ""Uniform deviate ["" + rng.toString() + ""]"";
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UniformLongSampler uniformLongSampler0 = UniformLongSampler.of(jDKRandomWrapper0, 0L, 1L);
      String string0 = uniformLongSampler0.toString();
}"
692,"    public static UniformLongSampler of(UniformRandomProvider rng,
                                        long lower,
                                        long upper) {
        if (lower > upper) {
            throw new IllegalArgumentException(lower  + "" > "" + upper);
        }

        // Choose the algorithm depending on the range

        // Edge case for no range.
        // This must be done first as the methods to handle lower == 0
        // do not handle upper == 0.
        if (upper == lower) {
            return new FixedUniformLongSampler(lower);
        }

        // Algorithms to ignore the lower bound if it is zero.
        if (lower == 0) {
            return createZeroBoundedSampler(rng, upper);
        }

        final long range = (upper - lower) + 1;
        // Check power of 2 first to handle range == 2^63.
        if (isPowerOf2(range)) {
            return new OffsetUniformLongSampler(lower,
                                                new PowerOf2RangeUniformLongSampler(rng, range));
        }
        if (range <= 0) {
            // The range is too wide to fit in a positive long (larger
            // than 2^63); use a simple rejection method.
            // Note: if range == 0 then the input is [Long.MIN_VALUE, Long.MAX_VALUE].
            // No specialisation exists for this and it is handled as a large range.
            return new LargeRangeUniformLongSampler(rng, lower, upper);
        }
        // Use a sample from the range added to the lower bound.
        return new OffsetUniformLongSampler(lower,
                                            new SmallRangeUniformLongSampler(rng, range));
    }","  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1091L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UniformLongSampler uniformLongSampler0 = UniformLongSampler.of(jDKRandomWrapper0, 0L, 1091L);
}"
693,"    public static UniformLongSampler of(UniformRandomProvider rng,
                                        long lower,
                                        long upper) {
        if (lower > upper) {
            throw new IllegalArgumentException(lower  + "" > "" + upper);
        }

        // Choose the algorithm depending on the range

        // Edge case for no range.
        // This must be done first as the methods to handle lower == 0
        // do not handle upper == 0.
        if (upper == lower) {
            return new FixedUniformLongSampler(lower);
        }

        // Algorithms to ignore the lower bound if it is zero.
        if (lower == 0) {
            return createZeroBoundedSampler(rng, upper);
        }

        final long range = (upper - lower) + 1;
        // Check power of 2 first to handle range == 2^63.
        if (isPowerOf2(range)) {
            return new OffsetUniformLongSampler(lower,
                                                new PowerOf2RangeUniformLongSampler(rng, range));
        }
        if (range <= 0) {
            // The range is too wide to fit in a positive long (larger
            // than 2^63); use a simple rejection method.
            // Note: if range == 0 then the input is [Long.MIN_VALUE, Long.MAX_VALUE].
            // No specialisation exists for this and it is handled as a large range.
            return new LargeRangeUniformLongSampler(rng, lower, upper);
        }
        // Use a sample from the range added to the lower bound.
        return new OffsetUniformLongSampler(lower,
                                            new SmallRangeUniformLongSampler(rng, range));
    }","  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        UniformLongSampler.of(jDKRandomWrapper0, 5059L, 0L);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // 5059 > 0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.UniformLongSampler"", e);
      }
  }"
694,"    public abstract UniformLongSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Creates a new discrete uniform distribution sampler.
     *
     * @param rng Generator of uniformly distributed random numbers.
     * @param lower Lower bound (inclusive) of the distribution.
     * @param upper Upper bound (inclusive) of the distribution.
     * @return the sampler
     * @throws IllegalArgumentException if {@code lower > upper}","  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1091L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UniformLongSampler uniformLongSampler0 = UniformLongSampler.of(jDKRandomWrapper0, 1091L, 1091L);
      UniformLongSampler uniformLongSampler1 = uniformLongSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
695,"    public String toString() {
        return ""Uniform deviate ["" + rng.toString() + ""]"";
    }","  public void test9()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1091L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UniformLongSampler uniformLongSampler0 = UniformLongSampler.of(jDKRandomWrapper0, 1091L, 1091L);
      String string0 = uniformLongSampler0.toString();
}"
696,"    public static UniformLongSampler of(UniformRandomProvider rng,
                                        long lower,
                                        long upper) {
        if (lower > upper) {
            throw new IllegalArgumentException(lower  + "" > "" + upper);
        }

        // Choose the algorithm depending on the range

        // Edge case for no range.
        // This must be done first as the methods to handle lower == 0
        // do not handle upper == 0.
        if (upper == lower) {
            return new FixedUniformLongSampler(lower);
        }

        // Algorithms to ignore the lower bound if it is zero.
        if (lower == 0) {
            return createZeroBoundedSampler(rng, upper);
        }

        final long range = (upper - lower) + 1;
        // Check power of 2 first to handle range == 2^63.
        if (isPowerOf2(range)) {
            return new OffsetUniformLongSampler(lower,
                                                new PowerOf2RangeUniformLongSampler(rng, range));
        }
        if (range <= 0) {
            // The range is too wide to fit in a positive long (larger
            // than 2^63); use a simple rejection method.
            // Note: if range == 0 then the input is [Long.MIN_VALUE, Long.MAX_VALUE].
            // No specialisation exists for this and it is handled as a large range.
            return new LargeRangeUniformLongSampler(rng, lower, upper);
        }
        // Use a sample from the range added to the lower bound.
        return new OffsetUniformLongSampler(lower,
                                            new SmallRangeUniformLongSampler(rng, range));
    }","  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UniformLongSampler uniformLongSampler0 = UniformLongSampler.of(jDKRandomWrapper0, 1L, 1L);
      long long0 = uniformLongSampler0.sample();
}"
697,"    public double sample() {
        return function.inverseCumulativeProbability(rng.nextDouble());
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousInverseCumulativeProbabilityFunction continuousInverseCumulativeProbabilityFunction0 = mock(ContinuousInverseCumulativeProbabilityFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(continuousInverseCumulativeProbabilityFunction0).inverseCumulativeProbability(anyDouble());
      InverseTransformContinuousSampler inverseTransformContinuousSampler0 = new InverseTransformContinuousSampler(jDKRandomWrapper0, continuousInverseCumulativeProbabilityFunction0);
      double double0 = inverseTransformContinuousSampler0.sample();
}"
698,"    public double sample() {
        return function.inverseCumulativeProbability(rng.nextDouble());
    }","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousInverseCumulativeProbabilityFunction continuousInverseCumulativeProbabilityFunction0 = mock(ContinuousInverseCumulativeProbabilityFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2689.2), (-2689.2), 66.0).when(continuousInverseCumulativeProbabilityFunction0).inverseCumulativeProbability(anyDouble());
      InverseTransformContinuousSampler inverseTransformContinuousSampler0 = new InverseTransformContinuousSampler(jDKRandomWrapper0, continuousInverseCumulativeProbabilityFunction0);
      double double0 = inverseTransformContinuousSampler0.sample();
      inverseTransformContinuousSampler0.sample();
      double double1 = inverseTransformContinuousSampler0.sample();
}"
699,"    public double sample() {
        return function.inverseCumulativeProbability(rng.nextDouble());
    }","  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      InverseTransformContinuousSampler inverseTransformContinuousSampler0 = new InverseTransformContinuousSampler(jDKRandomWrapper0, (ContinuousInverseCumulativeProbabilityFunction) null);
      // Undeclared exception!
      try { 
        inverseTransformContinuousSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.InverseTransformContinuousSampler"", e);
      }
  }"
700,"    public String toString() {
        return function.toString() + "" (inverse method) ["" + rng.toString() + ""]"";
    }","  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-54L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousInverseCumulativeProbabilityFunction continuousInverseCumulativeProbabilityFunction0 = mock(ContinuousInverseCumulativeProbabilityFunction.class, new ViolatedAssumptionAnswer());
      InverseTransformContinuousSampler inverseTransformContinuousSampler0 = new InverseTransformContinuousSampler(jDKRandomWrapper0, continuousInverseCumulativeProbabilityFunction0);
      String string0 = inverseTransformContinuousSampler0.toString();
}"
701,"    public static SharedStateContinuousSampler of(UniformRandomProvider rng,
                                                  ContinuousInverseCumulativeProbabilityFunction function) {
        return new InverseTransformContinuousSampler(rng, function);
    }","  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-54L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousInverseCumulativeProbabilityFunction continuousInverseCumulativeProbabilityFunction0 = mock(ContinuousInverseCumulativeProbabilityFunction.class, new ViolatedAssumptionAnswer());
      SharedStateContinuousSampler sharedStateContinuousSampler0 = InverseTransformContinuousSampler.of(jDKRandomWrapper0, continuousInverseCumulativeProbabilityFunction0);
}"
702,"    public SharedStateContinuousSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return new InverseTransformContinuousSampler(rng, function);
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-54L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousInverseCumulativeProbabilityFunction continuousInverseCumulativeProbabilityFunction0 = mock(ContinuousInverseCumulativeProbabilityFunction.class, new ViolatedAssumptionAnswer());
      InverseTransformContinuousSampler inverseTransformContinuousSampler0 = new InverseTransformContinuousSampler(jDKRandomWrapper0, continuousInverseCumulativeProbabilityFunction0);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = inverseTransformContinuousSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
703,"    public String toString() {
        return function.toString() + "" (inverse method) ["" + rng.toString() + ""]"";
    }","  public void test6()  throws Throwable  {
      ContinuousInverseCumulativeProbabilityFunction continuousInverseCumulativeProbabilityFunction0 = mock(ContinuousInverseCumulativeProbabilityFunction.class, new ViolatedAssumptionAnswer());
      InverseTransformContinuousSampler inverseTransformContinuousSampler0 = new InverseTransformContinuousSampler((UniformRandomProvider) null, continuousInverseCumulativeProbabilityFunction0);
      // Undeclared exception!
      try { 
        inverseTransformContinuousSampler0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
704,"    public static DirichletSampler symmetric(UniformRandomProvider rng,
                                             int k,
                                             double alpha) {
        validateNumberOfCategories(k);
        final SharedStateContinuousSampler sampler = createSampler(rng, alpha);
        return new SymmetricDirichletSampler(rng, k, sampler);
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        DirichletSampler.symmetric(jDKRandomWrapper0, 457, (-1556.38034795));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid concentration: -1556.38034795
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.DirichletSampler"", e);
      }
  }"
705,"    public String toString() {
        return ""Dirichlet deviate ["" + rng.toString() + ""]"";
    }","  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1784.55296731;
      doubleArray0[1] = 4039.3505708;
      doubleArray0[2] = 1033.784520067;
      DirichletSampler dirichletSampler0 = DirichletSampler.of((UniformRandomProvider) null, doubleArray0);
      // Undeclared exception!
      try { 
        dirichletSampler0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
706,"    public double[] sample() {
        // Create Gamma(alpha_i, 1) deviates for all alpha
        final double[] y = new double[getK()];
        double norm = 0;
        for (int i = 0; i < y.length; i++) {
            final double yi = nextGamma(i);
            norm += yi;
            y[i] = yi;
        }
        // Normalize by dividing by the sum of the samples
        norm = 1.0 / norm;
        // Detect an invalid normalization, e.g. cases of all zero samples
        if (!isNonZeroPositiveFinite(norm)) {
            // Sample again using recursion.
            // A stack overflow due to a broken RNG will eventually occur
            // rather than the alternative which is an infinite loop.
            return sample();
        }
        // Normalise
        for (int i = 0; i < y.length; i++) {
            y[i] *= norm;
        }
        return y;
    }","  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DirichletSampler dirichletSampler0 = DirichletSampler.symmetric(jDKRandomWrapper0, 243, 7.570418950288642E-21);
      // Undeclared exception!
      dirichletSampler0.sample();
  }"
707,"    public double[] sample() {
        // Create Gamma(alpha_i, 1) deviates for all alpha
        final double[] y = new double[getK()];
        double norm = 0;
        for (int i = 0; i < y.length; i++) {
            final double yi = nextGamma(i);
            norm += yi;
            y[i] = yi;
        }
        // Normalize by dividing by the sum of the samples
        norm = 1.0 / norm;
        // Detect an invalid normalization, e.g. cases of all zero samples
        if (!isNonZeroPositiveFinite(norm)) {
            // Sample again using recursion.
            // A stack overflow due to a broken RNG will eventually occur
            // rather than the alternative which is an infinite loop.
            return sample();
        }
        // Normalise
        for (int i = 0; i < y.length; i++) {
            y[i] *= norm;
        }
        return y;
    }","  public void test3()  throws Throwable  {
      DirichletSampler dirichletSampler0 = DirichletSampler.symmetric((UniformRandomProvider) null, 2973, 2973);
      // Undeclared exception!
      try { 
        dirichletSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.ZigguratSampler"", e);
      }
  }"
708,"    public static DirichletSampler of(UniformRandomProvider rng,
                                      double... alpha) {
        validateNumberOfCategories(alpha.length);
        final SharedStateContinuousSampler[] samplers = new SharedStateContinuousSampler[alpha.length];
        for (int i = 0; i < samplers.length; i++) {
            samplers[i] = createSampler(rng, alpha[i]);
        }
        return new GeneralDirichletSampler(rng, samplers);
    }","  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        DirichletSampler.of(jDKRandomWrapper0, (double[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.DirichletSampler"", e);
      }
  }"
709,"    public static DirichletSampler of(UniformRandomProvider rng,
                                      double... alpha) {
        validateNumberOfCategories(alpha.length);
        final SharedStateContinuousSampler[] samplers = new SharedStateContinuousSampler[alpha.length];
        for (int i = 0; i < samplers.length; i++) {
            samplers[i] = createSampler(rng, alpha[i]);
        }
        return new GeneralDirichletSampler(rng, samplers);
    }","  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        DirichletSampler.of((UniformRandomProvider) null, doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid concentration: 0.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.DirichletSampler"", e);
      }
  }"
710,"    public static DirichletSampler symmetric(UniformRandomProvider rng,
                                             int k,
                                             double alpha) {
        validateNumberOfCategories(k);
        final SharedStateContinuousSampler sampler = createSampler(rng, alpha);
        return new SymmetricDirichletSampler(rng, k, sampler);
    }","  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DirichletSampler.symmetric(jDKRandomWrapper0, 76, 1.0);
  }"
711,"    public abstract DirichletSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Creates a new Dirichlet distribution sampler.
     *
     * @param rng Generator of uniformly distributed random numbers.
     * @param alpha Concentration parameters.
     * @return the sampler
     * @throws IllegalArgumentException if the number of concentration parameters
     * is less than 2; or if any concentration parameter is not strictly positive.
     */
    public static DirichletSampler of(UniformRandomProvider rng,
                                      double... alpha) {
        validateNumberOfCategories(alpha.length);
        final SharedStateContinuousSampler[] samplers = new SharedStateContinuousSampler[alpha.length];
        for (int i = 0; i < samplers.length; i++) {
            samplers[i] = createSampler(rng, alpha[i]);
        }
        return new GeneralDirichletSampler(rng, samplers);
    }","  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4294967296L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 4294967296L;
      doubleArray0[1] = (double) 4294967296L;
      doubleArray0[2] = (double) 4294967296L;
      doubleArray0[3] = (double) 4294967296L;
      DirichletSampler dirichletSampler0 = DirichletSampler.of(jDKRandomWrapper0, doubleArray0);
      dirichletSampler0.withUniformRandomProvider(jDKRandomWrapper0);
  }"
712,"    public abstract DirichletSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Creates a new Dirichlet distribution sampler.
     *
     * @param rng Generator of uniformly distributed random numbers.
     * @param alpha Concentration parameters.
     * @return the sampler
     * @throws IllegalArgumentException if the number of concentration parameters
     * is less than 2; or if any concentration parameter is not strictly positive.
     */
    public static DirichletSampler of(UniformRandomProvider rng,
                                      double... alpha) {
        validateNumberOfCategories(alpha.length);
        final SharedStateContinuousSampler[] samplers = new SharedStateContinuousSampler[alpha.length];
        for (int i = 0; i < samplers.length; i++) {
            samplers[i] = createSampler(rng, alpha[i]);
        }
        return new GeneralDirichletSampler(rng, samplers);
    }","  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DirichletSampler dirichletSampler0 = DirichletSampler.symmetric(jDKRandomWrapper0, 76, 76);
      dirichletSampler0.withUniformRandomProvider(jDKRandomWrapper0);
  }"
713,"    public double[] sample() {
        // Create Gamma(alpha_i, 1) deviates for all alpha
        final double[] y = new double[getK()];
        double norm = 0;
        for (int i = 0; i < y.length; i++) {
            final double yi = nextGamma(i);
            norm += yi;
            y[i] = yi;
        }
        // Normalize by dividing by the sum of the samples
        norm = 1.0 / norm;
        // Detect an invalid normalization, e.g. cases of all zero samples
        if (!isNonZeroPositiveFinite(norm)) {
            // Sample again using recursion.
            // A stack overflow due to a broken RNG will eventually occur
            // rather than the alternative which is an infinite loop.
            return sample();
        }
        // Normalise
        for (int i = 0; i < y.length; i++) {
            y[i] *= norm;
        }
        return y;
    }","  public void test9()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1812433253L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1812433253L;
      doubleArray0[1] = (double) 1812433253L;
      DirichletSampler dirichletSampler0 = DirichletSampler.of(jDKRandomWrapper0, doubleArray0);
      double[] doubleArray1 = dirichletSampler0.sample();
}"
714,"    public static DirichletSampler symmetric(UniformRandomProvider rng,
                                             int k,
                                             double alpha) {
        validateNumberOfCategories(k);
        final SharedStateContinuousSampler sampler = createSampler(rng, alpha);
        return new SymmetricDirichletSampler(rng, k, sampler);
    }","  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1812433253L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        DirichletSampler.symmetric(jDKRandomWrapper0, (-3206), 1812433253L);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid number of categories: -3206
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.DirichletSampler"", e);
      }
  }"
715,"    public String toString() {
        return ""Dirichlet deviate ["" + rng.toString() + ""]"";
    }","  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1812433253L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1812433253L;
      doubleArray0[1] = (double) 1812433253L;
      DirichletSampler dirichletSampler0 = DirichletSampler.of(jDKRandomWrapper0, doubleArray0);
      String string0 = dirichletSampler0.toString();
}"
716,"    public int sample() {
        return delegate.sample();
    }","  public void test0()  throws Throwable  {
      Random.setNextRandom(1717986918);
      MockRandom mockRandom0 = new MockRandom((-1L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DiscreteUniformSampler discreteUniformSampler0 = new DiscreteUniformSampler(jDKRandomWrapper0, (-1373), 2048);
      int int0 = discreteUniformSampler0.sample();
}"
717,"    public SharedStateDiscreteSampler withUniformRandomProvider(UniformRandomProvider rng) {
        // Direct return of the optimised sampler
        return delegate.withUniformRandomProvider(rng);
    }","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DiscreteUniformSampler discreteUniformSampler0 = new DiscreteUniformSampler(jDKRandomWrapper0, (-1444), 0);
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper(mockRandom0);
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = discreteUniformSampler0.withUniformRandomProvider(jDKRandomWrapper1);
}"
718,"    public SharedStateDiscreteSampler withUniformRandomProvider(UniformRandomProvider rng) {
        // Direct return of the optimised sampler
        return delegate.withUniformRandomProvider(rng);
    }","  public void test2()  throws Throwable  {
      DiscreteUniformSampler discreteUniformSampler0 = new DiscreteUniformSampler((UniformRandomProvider) null, 0, 255);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = discreteUniformSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
719,"    public int sample() {
        return delegate.sample();
    }","  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DiscreteUniformSampler discreteUniformSampler0 = new DiscreteUniformSampler(jDKRandomWrapper0, (-1), 0);
      jDKRandomWrapper0.nextInt();
      int int0 = discreteUniformSampler0.sample();
}"
720,"    public int sample() {
        return delegate.sample();
    }","  public void test4()  throws Throwable  {
      DiscreteUniformSampler discreteUniformSampler0 = new DiscreteUniformSampler((UniformRandomProvider) null, 0, 0);
      int int0 = discreteUniformSampler0.sample();
}"
721,"    public int sample() {
        return delegate.sample();
    }","  public void test5()  throws Throwable  {
      DiscreteUniformSampler discreteUniformSampler0 = new DiscreteUniformSampler((UniformRandomProvider) null, 1, 275);
      // Undeclared exception!
      try { 
        discreteUniformSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.DiscreteUniformSampler$SmallRangeDiscreteUniformSampler"", e);
      }
  }"
722,"    public DiscreteUniformSampler(UniformRandomProvider rng,
                                  int lower,
                                  int upper) {
        super(null);
        delegate = of(rng, lower, upper);
    }","  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DiscreteUniformSampler discreteUniformSampler0 = null;
      try {
        discreteUniformSampler0 = new DiscreteUniformSampler(jDKRandomWrapper0, 19, 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // 19 > 0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.DiscreteUniformSampler"", e);
      }
  }"
723,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                int lower,
                                                int upper) {
        if (lower > upper) {
            throw new IllegalArgumentException(lower  + "" > "" + upper);
        }

        // Choose the algorithm depending on the range

        // Edge case for no range.
        // This must be done first as the methods to handle lower == 0
        // do not handle upper == 0.
        if (upper == lower) {
            return new FixedDiscreteUniformSampler(lower);
        }

        // Algorithms to ignore the lower bound if it is zero.
        if (lower == 0) {
            return createZeroBoundedSampler(rng, upper);
        }

        final int range = (upper - lower) + 1;
        // Check power of 2 first to handle range == 2^31.
        if (isPowerOf2(range)) {
            return new OffsetDiscreteUniformSampler(lower,
                                                    new PowerOf2RangeDiscreteUniformSampler(rng, range));
        }
        if (range <= 0) {
            // The range is too wide to fit in a positive int (larger
            // than 2^31); use a simple rejection method.
            // Note: if range == 0 then the input is [Integer.MIN_VALUE, Integer.MAX_VALUE].
            // No specialisation exists for this and it is handled as a large range.
            return new LargeRangeDiscreteUniformSampler(rng, lower, upper);
        }
        // Use a sample from the range added to the lower bound.
        return new OffsetDiscreteUniformSampler(lower,
                                                new SmallRangeDiscreteUniformSampler(rng, range));
    }","  public void test7()  throws Throwable  {
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = DiscreteUniformSampler.of((UniformRandomProvider) null, 16, 17);
}"
724,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                int lower,
                                                int upper) {
        if (lower > upper) {
            throw new IllegalArgumentException(lower  + "" > "" + upper);
        }

        // Choose the algorithm depending on the range

        // Edge case for no range.
        // This must be done first as the methods to handle lower == 0
        // do not handle upper == 0.
        if (upper == lower) {
            return new FixedDiscreteUniformSampler(lower);
        }

        // Algorithms to ignore the lower bound if it is zero.
        if (lower == 0) {
            return createZeroBoundedSampler(rng, upper);
        }

        final int range = (upper - lower) + 1;
        // Check power of 2 first to handle range == 2^31.
        if (isPowerOf2(range)) {
            return new OffsetDiscreteUniformSampler(lower,
                                                    new PowerOf2RangeDiscreteUniformSampler(rng, range));
        }
        if (range <= 0) {
            // The range is too wide to fit in a positive int (larger
            // than 2^31); use a simple rejection method.
            // Note: if range == 0 then the input is [Integer.MIN_VALUE, Integer.MAX_VALUE].
            // No specialisation exists for this and it is handled as a large range.
            return new LargeRangeDiscreteUniformSampler(rng, lower, upper);
        }
        // Use a sample from the range added to the lower bound.
        return new OffsetDiscreteUniformSampler(lower,
                                                new SmallRangeDiscreteUniformSampler(rng, range));
    }","  public void test8()  throws Throwable  {
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = DiscreteUniformSampler.of((UniformRandomProvider) null, (-1058), 0);
}"
725,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                int lower,
                                                int upper) {
        if (lower > upper) {
            throw new IllegalArgumentException(lower  + "" > "" + upper);
        }

        // Choose the algorithm depending on the range

        // Edge case for no range.
        // This must be done first as the methods to handle lower == 0
        // do not handle upper == 0.
        if (upper == lower) {
            return new FixedDiscreteUniformSampler(lower);
        }

        // Algorithms to ignore the lower bound if it is zero.
        if (lower == 0) {
            return createZeroBoundedSampler(rng, upper);
        }

        final int range = (upper - lower) + 1;
        // Check power of 2 first to handle range == 2^31.
        if (isPowerOf2(range)) {
            return new OffsetDiscreteUniformSampler(lower,
                                                    new PowerOf2RangeDiscreteUniformSampler(rng, range));
        }
        if (range <= 0) {
            // The range is too wide to fit in a positive int (larger
            // than 2^31); use a simple rejection method.
            // Note: if range == 0 then the input is [Integer.MIN_VALUE, Integer.MAX_VALUE].
            // No specialisation exists for this and it is handled as a large range.
            return new LargeRangeDiscreteUniformSampler(rng, lower, upper);
        }
        // Use a sample from the range added to the lower bound.
        return new OffsetDiscreteUniformSampler(lower,
                                                new SmallRangeDiscreteUniformSampler(rng, range));
    }","  public void test9()  throws Throwable  {
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = DiscreteUniformSampler.of((UniformRandomProvider) null, 0, 0);
}"
726,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                int lower,
                                                int upper) {
        if (lower > upper) {
            throw new IllegalArgumentException(lower  + "" > "" + upper);
        }

        // Choose the algorithm depending on the range

        // Edge case for no range.
        // This must be done first as the methods to handle lower == 0
        // do not handle upper == 0.
        if (upper == lower) {
            return new FixedDiscreteUniformSampler(lower);
        }

        // Algorithms to ignore the lower bound if it is zero.
        if (lower == 0) {
            return createZeroBoundedSampler(rng, upper);
        }

        final int range = (upper - lower) + 1;
        // Check power of 2 first to handle range == 2^31.
        if (isPowerOf2(range)) {
            return new OffsetDiscreteUniformSampler(lower,
                                                    new PowerOf2RangeDiscreteUniformSampler(rng, range));
        }
        if (range <= 0) {
            // The range is too wide to fit in a positive int (larger
            // than 2^31); use a simple rejection method.
            // Note: if range == 0 then the input is [Integer.MIN_VALUE, Integer.MAX_VALUE].
            // No specialisation exists for this and it is handled as a large range.
            return new LargeRangeDiscreteUniformSampler(rng, lower, upper);
        }
        // Use a sample from the range added to the lower bound.
        return new OffsetDiscreteUniformSampler(lower,
                                                new SmallRangeDiscreteUniformSampler(rng, range));
    }","  public void test10()  throws Throwable  {
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = DiscreteUniformSampler.of((UniformRandomProvider) null, 0, 62);
}"
727,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                int lower,
                                                int upper) {
        if (lower > upper) {
            throw new IllegalArgumentException(lower  + "" > "" + upper);
        }

        // Choose the algorithm depending on the range

        // Edge case for no range.
        // This must be done first as the methods to handle lower == 0
        // do not handle upper == 0.
        if (upper == lower) {
            return new FixedDiscreteUniformSampler(lower);
        }

        // Algorithms to ignore the lower bound if it is zero.
        if (lower == 0) {
            return createZeroBoundedSampler(rng, upper);
        }

        final int range = (upper - lower) + 1;
        // Check power of 2 first to handle range == 2^31.
        if (isPowerOf2(range)) {
            return new OffsetDiscreteUniformSampler(lower,
                                                    new PowerOf2RangeDiscreteUniformSampler(rng, range));
        }
        if (range <= 0) {
            // The range is too wide to fit in a positive int (larger
            // than 2^31); use a simple rejection method.
            // Note: if range == 0 then the input is [Integer.MIN_VALUE, Integer.MAX_VALUE].
            // No specialisation exists for this and it is handled as a large range.
            return new LargeRangeDiscreteUniformSampler(rng, lower, upper);
        }
        // Use a sample from the range added to the lower bound.
        return new OffsetDiscreteUniformSampler(lower,
                                                new SmallRangeDiscreteUniformSampler(rng, range));
    }","  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        DiscreteUniformSampler.of(jDKRandomWrapper0, 50, 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // 50 > 0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.DiscreteUniformSampler"", e);
      }
  }"
728,"    public int sample() {
        return delegate.sample();
    }","  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DiscreteUniformSampler discreteUniformSampler0 = new DiscreteUniformSampler(jDKRandomWrapper0, 2, 6);
      int int0 = discreteUniformSampler0.sample();
}"
729,"    public String toString() {
        return delegate.toString();
    }","  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DiscreteUniformSampler discreteUniformSampler0 = new DiscreteUniformSampler(jDKRandomWrapper0, 2, 6);
      String string0 = discreteUniformSampler0.toString();
}"
730,"    public SharedStateDiscreteSampler withUniformRandomProvider(UniformRandomProvider rng) {
        // Direct return of the optimised sampler
        return delegate.withUniformRandomProvider(rng);
    }","  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      DiscreteUniformSampler discreteUniformSampler0 = new DiscreteUniformSampler(jDKRandomWrapper0, 50, 50);
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = discreteUniformSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
731,"    public double sample() {
        return sampler.sample();
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextInt();
      BoxMullerLogNormalSampler boxMullerLogNormalSampler0 = new BoxMullerLogNormalSampler(jDKRandomWrapper0, 172.27, 172.27);
      byte[] byteArray0 = new byte[2];
      jDKRandomWrapper0.nextBytes(byteArray0);
      double double0 = boxMullerLogNormalSampler0.sample();
      boxMullerLogNormalSampler0.sample();
      double double1 = boxMullerLogNormalSampler0.sample();
}"
732,"    public BoxMullerLogNormalSampler(UniformRandomProvider rng,
                                     double scale,
                                     double shape) {
        super(null);
        sampler = LogNormalSampler.of(new BoxMullerNormalizedGaussianSampler(rng),
                                      scale, shape);
    }","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      BoxMullerLogNormalSampler boxMullerLogNormalSampler0 = null;
      try {
        boxMullerLogNormalSampler0 = new BoxMullerLogNormalSampler(jDKRandomWrapper0, 0.0, 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // shape is not strictly positive: 0.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.LogNormalSampler"", e);
      }
  }"
733,"    public String toString() {
        return sampler.toString();
    }","  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4294967296L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      BoxMullerLogNormalSampler boxMullerLogNormalSampler0 = new BoxMullerLogNormalSampler(jDKRandomWrapper0, 4294967296L, 4490.4712022539);
      String string0 = boxMullerLogNormalSampler0.toString();
}"
734,"    public double sample() {
        return sampler.sample();
    }","  public void test3()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
      BoxMullerLogNormalSampler boxMullerLogNormalSampler0 = new BoxMullerLogNormalSampler(jDKRandomWrapper0, 2997.62670964, 2997.62670964);
      // Undeclared exception!
      try { 
        boxMullerLogNormalSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.JDKRandomWrapper"", e);
      }
  }"
735,"    public double getMinMean() {
        return minN;
    }","  public void test0()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache(40.0, 40.0);
      PoissonSamplerCache poissonSamplerCache1 = poissonSamplerCache0.withRange(41.36243642874038, 2801.12);
}"
736,"    public double getMinMean() {
        return minN;
    }","  public void test1()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache(40.0, 40.0);
      PoissonSamplerCache poissonSamplerCache1 = poissonSamplerCache0.withRange(41.36243642874038, 2801.12);
}"
737,"    public double getMinMean() {
        return minN;
    }","  public void test2()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache((-1199.40117), 2578.6783006159512);
      PoissonSamplerCache poissonSamplerCache1 = poissonSamplerCache0.withRange(2578.6783006159512, 2578.6783006159512);
}"
738,"    public double getMinMean() {
        return minN;
    }","  public void test3()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache((-1199.40117), 2578.6783006159512);
      PoissonSamplerCache poissonSamplerCache1 = poissonSamplerCache0.withRange(2578.6783006159512, 2578.6783006159512);
}"
739,"    public double getMinMean() {
        return minN;
    }","  public void test4()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache((-1358.0), 1849.35);
      boolean boolean0 = poissonSamplerCache0.withinRange(1849.35);
}"
740,"    public boolean withinRange(double mean) {
        if (mean < PoissonSampler.PIVOT) {
            // Construction is optimal
            return true;
        }
        // Convert the mean into an integer.
        final int n = (int) Math.floor(mean);
        return n <= maxN && n >= minN;
    }","  public void test5()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache((-1358.0), 1849.35);
      boolean boolean0 = poissonSamplerCache0.withinRange(1849.35);
}"
741,"    public double getMinMean() {
        return minN;
    }","  public void test6()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache(0.0, 6926.0934937);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      poissonSamplerCache0.createPoissonSampler(jDKRandomWrapper0, 3523.7307);
}"
742,"    public double getMinMean() {
        return minN;
    }","  public void test7()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache((-3194.38294667), (-3194.38294667));
      double double0 = poissonSamplerCache0.getMinMean();
}"
743,"    public PoissonSamplerCache(double minMean,
                               double maxMean) {

        checkMeanRange(minMean, maxMean);

        // The cache can only be used for the LargeMeanPoissonSampler.
        if (maxMean < PoissonSampler.PIVOT) {
            // The upper limit is too small so no cache will be used.
            // This class will just construct new samplers.
            minN = 0;
            maxN = 0;
            values = null;
        } else {
            // Convert the mean into integers.
            // Note the minimum is clipped to the algorithm switch point.
            this.minN = (int) Math.floor(Math.max(minMean, PoissonSampler.PIVOT));
            this.maxN = (int) Math.floor(Math.min(maxMean, Integer.MAX_VALUE));
            values = new LargeMeanPoissonSamplerState[maxN - minN + 1];
        }
    }","  public void test8()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = null;
      try {
        poissonSamplerCache0 = new PoissonSamplerCache(3457.387189, (-473.0464));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Max mean: -473.0464 < 3457.387189
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.PoissonSamplerCache"", e);
      }
  }"
744,"    public double getMinMean() {
        return minN;
    }","  public void test9()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache(2628.3533776, 2628.3533776);
      boolean boolean0 = poissonSamplerCache0.isValidRange();
}"
745,"    public boolean isValidRange() {
        return values != null;
    }","  public void test10()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache(2628.3533776, 2628.3533776);
      boolean boolean0 = poissonSamplerCache0.isValidRange();
}"
746,"    public double getMinMean() {
        return minN;
    }","  public void test11()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache((-831.82596332191), 2500.64139);
      PoissonSamplerCache poissonSamplerCache1 = poissonSamplerCache0.withRange((-831.82596332191), (-831.82596332191));
      boolean boolean0 = poissonSamplerCache1.isValidRange();
}"
747,"    public double getMinMean() {
        return minN;
    }","  public void test12()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache((-831.82596332191), 2500.64139);
      PoissonSamplerCache poissonSamplerCache1 = poissonSamplerCache0.withRange((-831.82596332191), (-831.82596332191));
      boolean boolean0 = poissonSamplerCache1.isValidRange();
}"
748,"    public boolean isValidRange() {
        return values != null;
    }","  public void test13()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache((-831.82596332191), 2500.64139);
      PoissonSamplerCache poissonSamplerCache1 = poissonSamplerCache0.withRange((-831.82596332191), (-831.82596332191));
      boolean boolean0 = poissonSamplerCache1.isValidRange();
}"
749,"    public double getMinMean() {
        return minN;
    }","  public void test14()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache(9.09262082929965E-21, 40.0);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      poissonSamplerCache0.createPoissonSampler(jDKRandomWrapper0, 40.0);
      poissonSamplerCache0.createSharedStateSampler(jDKRandomWrapper0, 40.0);
}"
750,"    public double getMinMean() {
        return minN;
    }","  public void test15()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache(763.0, 763.0);
      PoissonSamplerCache poissonSamplerCache1 = poissonSamplerCache0.withRange((-3179.49), 894.117967332);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      poissonSamplerCache1.createSharedStateSampler(jDKRandomWrapper0, 40.0);
}"
751,"    public double getMinMean() {
        return minN;
    }","  public void test16()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache(763.0, 763.0);
      PoissonSamplerCache poissonSamplerCache1 = poissonSamplerCache0.withRange((-3179.49), 894.117967332);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      poissonSamplerCache1.createSharedStateSampler(jDKRandomWrapper0, 40.0);
}"
752,"    public double getMinMean() {
        return minN;
    }","  public void test17()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache(763.0, 763.0);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      poissonSamplerCache0.createSharedStateSampler(jDKRandomWrapper0, 40.0);
}"
753,"    public SharedStateDiscreteSampler createSharedStateSampler(UniformRandomProvider rng,
                                                               double mean) {
        // Ensure the same functionality as the PoissonSampler by
        // using a SmallMeanPoissonSampler under the switch point.
        if (mean < PoissonSampler.PIVOT) {
            return SmallMeanPoissonSampler.of(rng, mean);
        }
        if (mean > maxN) {
            // Outside the range of the cache.
            // This avoids extra parameter checks and handles the case when
            // the cache is empty or if Math.floor(mean) is not an integer.
            return LargeMeanPoissonSampler.of(rng, mean);
        }

        // Convert the mean into an integer.
        final int n = (int) Math.floor(mean);
        if (n < minN) {
            // Outside the lower range of the cache.
            return LargeMeanPoissonSampler.of(rng, mean);
        }

        // Look in the cache for a state that can be reused.
        // Note: The cache is offset by minN.
        final int index = n - minN;
        final LargeMeanPoissonSamplerState state = values[index];
        if (state == null) {
            // Create a sampler and store the state for reuse.
            // Do not worry about thread contention
            // as the state is effectively immutable.
            // If recomputed and replaced it will the same.
            final LargeMeanPoissonSampler sampler = new LargeMeanPoissonSampler(rng, mean);
            values[index] = sampler.getState();
            return sampler;
        }
        // Compute the remaining fraction of the mean
        final double lambdaFractional = mean - n;
        return new LargeMeanPoissonSampler(rng, state, lambdaFractional);
    }","  public void test18()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache((-464.179020613658), (-464.179020613658));
      // Undeclared exception!
      try { 
        poissonSamplerCache0.createSharedStateSampler((UniformRandomProvider) null, (-1089.16505));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // mean is not strictly positive: -1089.16505
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.SmallMeanPoissonSampler"", e);
      }
  }"
754,"    public double getMinMean() {
        return minN;
    }","  public void test19()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache(0.0, 0.0);
      PoissonSamplerCache poissonSamplerCache1 = poissonSamplerCache0.withRange(0.0, 2746.2);
}"
755,"    public double getMinMean() {
        return minN;
    }","  public void test20()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache(0.0, 0.0);
      PoissonSamplerCache poissonSamplerCache1 = poissonSamplerCache0.withRange(0.0, 2746.2);
}"
756,"    public double getMinMean() {
        return minN;
    }","  public void test21()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache(4253.2803416, 4253.2803416);
      PoissonSamplerCache poissonSamplerCache1 = poissonSamplerCache0.withRange(4253.2803416, 4253.2803416);
}"
757,"    public double getMinMean() {
        return minN;
    }","  public void test22()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache(4253.2803416, 4253.2803416);
      PoissonSamplerCache poissonSamplerCache1 = poissonSamplerCache0.withRange(4253.2803416, 4253.2803416);
}"
758,"    public double getMaxMean() {
        if (isValidRange()) {
            return Math.nextDown(maxN + 1.0);
        }
        return 0;
    }","  public void test23()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache(4253.2803416, 4253.2803416);
      double double0 = poissonSamplerCache0.getMaxMean();
}"
759,"    public double getMinMean() {
        return minN;
    }","  public void test24()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache(4253.2803416, 4253.2803416);
      double double0 = poissonSamplerCache0.getMaxMean();
}"
760,"    public double getMaxMean() {
        if (isValidRange()) {
            return Math.nextDown(maxN + 1.0);
        }
        return 0;
    }","  public void test25()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache((-40.02404256169862), (-40.02404256169862));
      double double0 = poissonSamplerCache0.getMaxMean();
}"
761,"    public double getMinMean() {
        return minN;
    }","  public void test26()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache((-40.02404256169862), (-40.02404256169862));
      double double0 = poissonSamplerCache0.getMaxMean();
}"
762,"    public boolean isValidRange() {
        return values != null;
    }","  public void test27()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache(1478.1096337182353, 1478.1096337182353);
      boolean boolean0 = poissonSamplerCache0.withinRange(40.0);
}"
763,"    public boolean withinRange(double mean) {
        if (mean < PoissonSampler.PIVOT) {
            // Construction is optimal
            return true;
        }
        // Convert the mean into an integer.
        final int n = (int) Math.floor(mean);
        return n <= maxN && n >= minN;
    }","  public void test28()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache(1478.1096337182353, 1478.1096337182353);
      boolean boolean0 = poissonSamplerCache0.withinRange(40.0);
}"
764,"    public boolean withinRange(double mean) {
        if (mean < PoissonSampler.PIVOT) {
            // Construction is optimal
            return true;
        }
        // Convert the mean into an integer.
        final int n = (int) Math.floor(mean);
        return n <= maxN && n >= minN;
    }","  public void test29()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache(4253.2803416, 4253.2803416);
      PoissonSamplerCache poissonSamplerCache1 = poissonSamplerCache0.withRange(40.0, 40.0);
      boolean boolean0 = poissonSamplerCache1.withinRange(4253.999999999999);
}"
765,"    public double getMinMean() {
        return minN;
    }","  public void test30()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache(4253.2803416, 4253.2803416);
      PoissonSamplerCache poissonSamplerCache1 = poissonSamplerCache0.withRange(40.0, 40.0);
      boolean boolean0 = poissonSamplerCache1.withinRange(4253.999999999999);
}"
766,"    public boolean withinRange(double mean) {
        if (mean < PoissonSampler.PIVOT) {
            // Construction is optimal
            return true;
        }
        // Convert the mean into an integer.
        final int n = (int) Math.floor(mean);
        return n <= maxN && n >= minN;
    }","  public void test31()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache((-40.02404256169862), (-40.02404256169862));
      boolean boolean0 = poissonSamplerCache0.withinRange(0.0);
}"
767,"    public double getMinMean() {
        return minN;
    }","  public void test32()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache((-40.02404256169862), (-40.02404256169862));
      boolean boolean0 = poissonSamplerCache0.withinRange(0.0);
}"
768,"    public double getMinMean() {
        return minN;
    }","  public void test33()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache(4253.2803416, 4253.2803416);
      boolean boolean0 = poissonSamplerCache0.withinRange(4253.999999999999);
}"
769,"    public boolean withinRange(double mean) {
        if (mean < PoissonSampler.PIVOT) {
            // Construction is optimal
            return true;
        }
        // Convert the mean into an integer.
        final int n = (int) Math.floor(mean);
        return n <= maxN && n >= minN;
    }","  public void test34()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache(4253.2803416, 4253.2803416);
      boolean boolean0 = poissonSamplerCache0.withinRange(4253.999999999999);
}"
770,"    public double getMinMean() {
        return minN;
    }","  public void test35()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache(9.09262082929965E-21, 40.0);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      poissonSamplerCache0.createSharedStateSampler(jDKRandomWrapper0, 1989.0);
}"
771,"    public DiscreteSampler createPoissonSampler(UniformRandomProvider rng,
                                                double mean) {
        return createSharedStateSampler(rng, mean);
    }","  public void test36()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache(40.0, 40.0);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        poissonSamplerCache0.createPoissonSampler(jDKRandomWrapper0, 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // mean is not strictly positive: 0.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.SmallMeanPoissonSampler"", e);
      }
  }"
772,"    public PoissonSamplerCache withRange(double minMean,
                                         double maxMean) {
        if (values == null) {
            // Nothing to reuse
            return new PoissonSamplerCache(minMean, maxMean);
        }
        checkMeanRange(minMean, maxMean);

        // The cache can only be used for the LargeMeanPoissonSampler.
        if (maxMean < PoissonSampler.PIVOT) {
            return new PoissonSamplerCache(0, 0);
        }

        // Convert the mean into integers.
        // Note the minimum is clipped to the algorithm switch point.
        final int withMinN = (int) Math.floor(Math.max(minMean, PoissonSampler.PIVOT));
        final int withMaxN = (int) Math.floor(maxMean);
        final LargeMeanPoissonSamplerState[] states =
                new LargeMeanPoissonSamplerState[withMaxN - withMinN + 1];

        // Preserve values from the current array to the next
        int currentIndex;
        int nextIndex;
        if (this.minN <= withMinN) {
            // The current array starts before the new array
            currentIndex = withMinN - this.minN;
            nextIndex = 0;
        } else {
            // The new array starts before the current array
            currentIndex = 0;
            nextIndex = this.minN - withMinN;
        }
        final int length = Math.min(values.length - currentIndex, states.length - nextIndex);
        if (length > 0) {
            System.arraycopy(values, currentIndex, states, nextIndex, length);
        }

        return new PoissonSamplerCache(withMinN, withMaxN, states);
    }","  public void test37()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache(4253.2803416, 4253.2803416);
      // Undeclared exception!
      try { 
        poissonSamplerCache0.withRange(4253.999999999999, 4253.2803416);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Max mean: 4253.2803416 < 4253.999999999999
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.PoissonSamplerCache"", e);
      }
  }"
773,"    public double getMinMean() {
        return minN;
    }","  public void test38()  throws Throwable  {
      PoissonSamplerCache poissonSamplerCache0 = new PoissonSamplerCache(40.0, 40.0);
      double double0 = poissonSamplerCache0.getMinMean();
}"
774,"    public static double getMinimumCachedMean() {
        return PoissonSampler.PIVOT;
    }","  public void test39()  throws Throwable  {
      double double0 = PoissonSamplerCache.getMinimumCachedMean();
}"
775,"    public double sample() {
        double random;
        if (Double.isNaN(nextGaussian)) {
            // Generate a pair of Gaussian numbers.

            // Avoid zero for the uniform deviate y.
            // The extreme tail of the sample is:
            // y = 2^-53
            // r = 8.57167
            final double x = rng.nextDouble();
            final double y = InternalUtils.makeNonZeroDouble(rng.nextLong());
            final double alpha = 2 * Math.PI * x;
            final double r = Math.sqrt(-2 * Math.log(y));

            // Return the first element of the generated pair.
            random = r * Math.cos(alpha);

            // Keep second element of the pair for next invocation.
            nextGaussian = r * Math.sin(alpha);
        } else {
            // Use the second element of the pair (generated at the
            // previous invocation).
            random = nextGaussian;

            // Both elements of the pair have been used.
            nextGaussian = Double.NaN;
        }

        return random;
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2113L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      BoxMullerNormalizedGaussianSampler boxMullerNormalizedGaussianSampler0 = BoxMullerNormalizedGaussianSampler.of((UniformRandomProvider) jDKRandomWrapper0);
      boxMullerNormalizedGaussianSampler0.sample();
      mockRandom0.nextGaussian();
      double double0 = boxMullerNormalizedGaussianSampler0.sample();
}"
776,"    public double sample() {
        double random;
        if (Double.isNaN(nextGaussian)) {
            // Generate a pair of Gaussian numbers.

            // Avoid zero for the uniform deviate y.
            // The extreme tail of the sample is:
            // y = 2^-53
            // r = 8.57167
            final double x = rng.nextDouble();
            final double y = InternalUtils.makeNonZeroDouble(rng.nextLong());
            final double alpha = 2 * Math.PI * x;
            final double r = Math.sqrt(-2 * Math.log(y));

            // Return the first element of the generated pair.
            random = r * Math.cos(alpha);

            // Keep second element of the pair for next invocation.
            nextGaussian = r * Math.sin(alpha);
        } else {
            // Use the second element of the pair (generated at the
            // previous invocation).
            random = nextGaussian;

            // Both elements of the pair have been used.
            nextGaussian = Double.NaN;
        }

        return random;
    }","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2113L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      BoxMullerNormalizedGaussianSampler boxMullerNormalizedGaussianSampler0 = BoxMullerNormalizedGaussianSampler.of((UniformRandomProvider) jDKRandomWrapper0);
      boxMullerNormalizedGaussianSampler0.sample();
      mockRandom0.nextGaussian();
      double double0 = boxMullerNormalizedGaussianSampler0.sample();
      double double1 = boxMullerNormalizedGaussianSampler0.sample();
}"
777,"    public String toString() {
        return ""Box-Muller normalized Gaussian deviate ["" + rng.toString() + ""]"";
    }","  public void test2()  throws Throwable  {
      BoxMullerNormalizedGaussianSampler boxMullerNormalizedGaussianSampler0 = new BoxMullerNormalizedGaussianSampler((UniformRandomProvider) null);
      // Undeclared exception!
      try { 
        boxMullerNormalizedGaussianSampler0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
778,"    public double sample() {
        double random;
        if (Double.isNaN(nextGaussian)) {
            // Generate a pair of Gaussian numbers.

            // Avoid zero for the uniform deviate y.
            // The extreme tail of the sample is:
            // y = 2^-53
            // r = 8.57167
            final double x = rng.nextDouble();
            final double y = InternalUtils.makeNonZeroDouble(rng.nextLong());
            final double alpha = 2 * Math.PI * x;
            final double r = Math.sqrt(-2 * Math.log(y));

            // Return the first element of the generated pair.
            random = r * Math.cos(alpha);

            // Keep second element of the pair for next invocation.
            nextGaussian = r * Math.sin(alpha);
        } else {
            // Use the second element of the pair (generated at the
            // previous invocation).
            random = nextGaussian;

            // Both elements of the pair have been used.
            nextGaussian = Double.NaN;
        }

        return random;
    }","  public void test3()  throws Throwable  {
      BoxMullerNormalizedGaussianSampler boxMullerNormalizedGaussianSampler0 = new BoxMullerNormalizedGaussianSampler((UniformRandomProvider) null);
      // Undeclared exception!
      try { 
        boxMullerNormalizedGaussianSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.BoxMullerNormalizedGaussianSampler"", e);
      }
  }"
779,"    public String toString() {
        return ""Box-Muller normalized Gaussian deviate ["" + rng.toString() + ""]"";
    }","  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      BoxMullerNormalizedGaussianSampler boxMullerNormalizedGaussianSampler0 = new BoxMullerNormalizedGaussianSampler(jDKRandomWrapper0);
      String string0 = boxMullerNormalizedGaussianSampler0.toString();
}"
780,"    public SharedStateContinuousSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return new BoxMullerNormalizedGaussianSampler(rng);
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      BoxMullerNormalizedGaussianSampler boxMullerNormalizedGaussianSampler0 = new BoxMullerNormalizedGaussianSampler(jDKRandomWrapper0);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = boxMullerNormalizedGaussianSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
781,"    public double sample() {
        if (Double.isNaN(nextGaussian)) {
            // Rejection scheme for selecting a pair that lies within the unit circle.
            while (true) {
                // Generate a pair of numbers within [-1 , 1).
                final double x = 2 * rng.nextDouble() - 1;
                final double y = 2 * rng.nextDouble() - 1;
                final double r2 = x * x + y * y;

                if (r2 < 1 && r2 > 0) {
                    // Pair (x, y) is within unit circle.
                    final double alpha = Math.sqrt(-2 * Math.log(r2) / r2);

                    // Keep second element of the pair for next invocation.
                    nextGaussian = alpha * y;

                    // Return the first element of the generated pair.
                    return alpha * x;
                }

                // Pair is not within the unit circle: Generate another one.
            }
        }

        // Use the second element of the pair (generated at the
        // previous invocation).
        final double r = nextGaussian;

        // Both elements of the pair have been used.
        nextGaussian = Double.NaN;

        return r;
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextFloat();
      MarsagliaNormalizedGaussianSampler marsagliaNormalizedGaussianSampler0 = new MarsagliaNormalizedGaussianSampler(jDKRandomWrapper0);
      double double0 = marsagliaNormalizedGaussianSampler0.sample();
}"
782,"    public double sample() {
        if (Double.isNaN(nextGaussian)) {
            // Rejection scheme for selecting a pair that lies within the unit circle.
            while (true) {
                // Generate a pair of numbers within [-1 , 1).
                final double x = 2 * rng.nextDouble() - 1;
                final double y = 2 * rng.nextDouble() - 1;
                final double r2 = x * x + y * y;

                if (r2 < 1 && r2 > 0) {
                    // Pair (x, y) is within unit circle.
                    final double alpha = Math.sqrt(-2 * Math.log(r2) / r2);

                    // Keep second element of the pair for next invocation.
                    nextGaussian = alpha * y;

                    // Return the first element of the generated pair.
                    return alpha * x;
                }

                // Pair is not within the unit circle: Generate another one.
            }
        }

        // Use the second element of the pair (generated at the
        // previous invocation).
        final double r = nextGaussian;

        // Both elements of the pair have been used.
        nextGaussian = Double.NaN;

        return r;
    }","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      byte[] byteArray0 = new byte[17];
      jDKRandomWrapper0.nextBytes(byteArray0);
      MarsagliaNormalizedGaussianSampler marsagliaNormalizedGaussianSampler0 = MarsagliaNormalizedGaussianSampler.of((UniformRandomProvider) jDKRandomWrapper0);
      double double0 = marsagliaNormalizedGaussianSampler0.sample();
}"
783,"    public double sample() {
        if (Double.isNaN(nextGaussian)) {
            // Rejection scheme for selecting a pair that lies within the unit circle.
            while (true) {
                // Generate a pair of numbers within [-1 , 1).
                final double x = 2 * rng.nextDouble() - 1;
                final double y = 2 * rng.nextDouble() - 1;
                final double r2 = x * x + y * y;

                if (r2 < 1 && r2 > 0) {
                    // Pair (x, y) is within unit circle.
                    final double alpha = Math.sqrt(-2 * Math.log(r2) / r2);

                    // Keep second element of the pair for next invocation.
                    nextGaussian = alpha * y;

                    // Return the first element of the generated pair.
                    return alpha * x;
                }

                // Pair is not within the unit circle: Generate another one.
            }
        }

        // Use the second element of the pair (generated at the
        // previous invocation).
        final double r = nextGaussian;

        // Both elements of the pair have been used.
        nextGaussian = Double.NaN;

        return r;
    }","  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      byte[] byteArray0 = new byte[17];
      jDKRandomWrapper0.nextBytes(byteArray0);
      MarsagliaNormalizedGaussianSampler marsagliaNormalizedGaussianSampler0 = MarsagliaNormalizedGaussianSampler.of((UniformRandomProvider) jDKRandomWrapper0);
      double double0 = marsagliaNormalizedGaussianSampler0.sample();
      double double1 = marsagliaNormalizedGaussianSampler0.sample();
}"
784,"    public String toString() {
        return ""Box-Muller (with rejection) normalized Gaussian deviate ["" + rng.toString() + ""]"";
    }","  public void test3()  throws Throwable  {
      MarsagliaNormalizedGaussianSampler marsagliaNormalizedGaussianSampler0 = MarsagliaNormalizedGaussianSampler.of((UniformRandomProvider) null);
      // Undeclared exception!
      try { 
        marsagliaNormalizedGaussianSampler0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
785,"    public double sample() {
        if (Double.isNaN(nextGaussian)) {
            // Rejection scheme for selecting a pair that lies within the unit circle.
            while (true) {
                // Generate a pair of numbers within [-1 , 1).
                final double x = 2 * rng.nextDouble() - 1;
                final double y = 2 * rng.nextDouble() - 1;
                final double r2 = x * x + y * y;

                if (r2 < 1 && r2 > 0) {
                    // Pair (x, y) is within unit circle.
                    final double alpha = Math.sqrt(-2 * Math.log(r2) / r2);

                    // Keep second element of the pair for next invocation.
                    nextGaussian = alpha * y;

                    // Return the first element of the generated pair.
                    return alpha * x;
                }

                // Pair is not within the unit circle: Generate another one.
            }
        }

        // Use the second element of the pair (generated at the
        // previous invocation).
        final double r = nextGaussian;

        // Both elements of the pair have been used.
        nextGaussian = Double.NaN;

        return r;
    }","  public void test4()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
      MarsagliaNormalizedGaussianSampler marsagliaNormalizedGaussianSampler0 = new MarsagliaNormalizedGaussianSampler(jDKRandomWrapper0);
      // Undeclared exception!
      try { 
        marsagliaNormalizedGaussianSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.JDKRandomWrapper"", e);
      }
  }"
786,"    public double sample() {
        if (Double.isNaN(nextGaussian)) {
            // Rejection scheme for selecting a pair that lies within the unit circle.
            while (true) {
                // Generate a pair of numbers within [-1 , 1).
                final double x = 2 * rng.nextDouble() - 1;
                final double y = 2 * rng.nextDouble() - 1;
                final double r2 = x * x + y * y;

                if (r2 < 1 && r2 > 0) {
                    // Pair (x, y) is within unit circle.
                    final double alpha = Math.sqrt(-2 * Math.log(r2) / r2);

                    // Keep second element of the pair for next invocation.
                    nextGaussian = alpha * y;

                    // Return the first element of the generated pair.
                    return alpha * x;
                }

                // Pair is not within the unit circle: Generate another one.
            }
        }

        // Use the second element of the pair (generated at the
        // previous invocation).
        final double r = nextGaussian;

        // Both elements of the pair have been used.
        nextGaussian = Double.NaN;

        return r;
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      MarsagliaNormalizedGaussianSampler marsagliaNormalizedGaussianSampler0 = MarsagliaNormalizedGaussianSampler.of((UniformRandomProvider) jDKRandomWrapper0);
      double double0 = marsagliaNormalizedGaussianSampler0.sample();
}"
787,"    public double sample() {
        if (Double.isNaN(nextGaussian)) {
            // Rejection scheme for selecting a pair that lies within the unit circle.
            while (true) {
                // Generate a pair of numbers within [-1 , 1).
                final double x = 2 * rng.nextDouble() - 1;
                final double y = 2 * rng.nextDouble() - 1;
                final double r2 = x * x + y * y;

                if (r2 < 1 && r2 > 0) {
                    // Pair (x, y) is within unit circle.
                    final double alpha = Math.sqrt(-2 * Math.log(r2) / r2);

                    // Keep second element of the pair for next invocation.
                    nextGaussian = alpha * y;

                    // Return the first element of the generated pair.
                    return alpha * x;
                }

                // Pair is not within the unit circle: Generate another one.
            }
        }

        // Use the second element of the pair (generated at the
        // previous invocation).
        final double r = nextGaussian;

        // Both elements of the pair have been used.
        nextGaussian = Double.NaN;

        return r;
    }","  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      MarsagliaNormalizedGaussianSampler marsagliaNormalizedGaussianSampler0 = MarsagliaNormalizedGaussianSampler.of((UniformRandomProvider) jDKRandomWrapper0);
      double double0 = marsagliaNormalizedGaussianSampler0.sample();
      double double1 = marsagliaNormalizedGaussianSampler0.sample();
}"
788,"    public SharedStateContinuousSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return new MarsagliaNormalizedGaussianSampler(rng);
    }","  public void test7()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
      MarsagliaNormalizedGaussianSampler marsagliaNormalizedGaussianSampler0 = new MarsagliaNormalizedGaussianSampler(jDKRandomWrapper0);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = marsagliaNormalizedGaussianSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
789,"    public String toString() {
        return ""Box-Muller (with rejection) normalized Gaussian deviate ["" + rng.toString() + ""]"";
    }","  public void test8()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
      MarsagliaNormalizedGaussianSampler marsagliaNormalizedGaussianSampler0 = new MarsagliaNormalizedGaussianSampler(jDKRandomWrapper0);
      String string0 = marsagliaNormalizedGaussianSampler0.toString();
}"
790,"    public double sample() {
        return Math.exp(scale + shape * gaussian.sample());
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1240L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      MarsagliaNormalizedGaussianSampler marsagliaNormalizedGaussianSampler0 = new MarsagliaNormalizedGaussianSampler(jDKRandomWrapper0);
      LogNormalSampler logNormalSampler0 = new LogNormalSampler(marsagliaNormalizedGaussianSampler0, 3.049176835000556E-19, 2156.39);
      double double0 = logNormalSampler0.sample();
}"
791,"    public static SharedStateContinuousSampler of(NormalizedGaussianSampler gaussian,
                                                  double scale,
                                                  double shape) {
        return new LogNormalSampler(gaussian, scale, shape);
    }","  public void test1()  throws Throwable  {
      SharedStateContinuousSampler sharedStateContinuousSampler0 = LogNormalSampler.of((NormalizedGaussianSampler) null, 0.0, 1684);
}"
792,"    public SharedStateContinuousSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return new LogNormalSampler(rng, this);
    }","  public void test2()  throws Throwable  {
      LogNormalSampler logNormalSampler0 = new LogNormalSampler((NormalizedGaussianSampler) null, 1.0, 1.0);
      MockRandom mockRandom0 = new MockRandom(328L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        logNormalSampler0.withUniformRandomProvider(jDKRandomWrapper0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // The underlying sampler cannot share state
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.InternalUtils"", e);
      }
  }"
793,"    public String toString() {
        return ""Log-normal deviate ["" + gaussian.toString() + ""]"";
    }","  public void test3()  throws Throwable  {
      LogNormalSampler logNormalSampler0 = new LogNormalSampler((NormalizedGaussianSampler) null, 780.48248596289, 780.48248596289);
      // Undeclared exception!
      try { 
        logNormalSampler0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
794,"    public double sample() {
        return Math.exp(scale + shape * gaussian.sample());
    }","  public void test4()  throws Throwable  {
      LogNormalSampler logNormalSampler0 = new LogNormalSampler((NormalizedGaussianSampler) null, 2329.970466, 102.61993633868698);
      // Undeclared exception!
      try { 
        logNormalSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.LogNormalSampler"", e);
      }
  }"
795,"    public LogNormalSampler(NormalizedGaussianSampler gaussian,
                            double scale,
                            double shape) {
        if (scale < 0) {
            throw new IllegalArgumentException(""scale is not positive: "" + scale);
        }
        if (shape <= 0) {
            throw new IllegalArgumentException(""shape is not strictly positive: "" + shape);
        }
        this.scale = scale;
        this.shape = shape;
        this.gaussian = gaussian;
    }","  public void test5()  throws Throwable  {
      LogNormalSampler logNormalSampler0 = null;
      try {
        logNormalSampler0 = new LogNormalSampler((NormalizedGaussianSampler) null, 0.0, (-2554.702445645193));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // shape is not strictly positive: -2554.702445645193
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.LogNormalSampler"", e);
      }
  }"
796,"    public LogNormalSampler(NormalizedGaussianSampler gaussian,
                            double scale,
                            double shape) {
        if (scale < 0) {
            throw new IllegalArgumentException(""scale is not positive: "" + scale);
        }
        if (shape <= 0) {
            throw new IllegalArgumentException(""shape is not strictly positive: "" + shape);
        }
        this.scale = scale;
        this.shape = shape;
        this.gaussian = gaussian;
    }","  public void test6()  throws Throwable  {
      LogNormalSampler logNormalSampler0 = null;
      try {
        logNormalSampler0 = new LogNormalSampler((NormalizedGaussianSampler) null, (-2510.869718343213), (-2510.869718343213));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // scale is not positive: -2510.869718343213
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.LogNormalSampler"", e);
      }
  }"
797,"    public double sample() {
        return Math.exp(scale + shape * gaussian.sample());
    }","  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      MarsagliaNormalizedGaussianSampler marsagliaNormalizedGaussianSampler0 = MarsagliaNormalizedGaussianSampler.of((UniformRandomProvider) jDKRandomWrapper0);
      LogNormalSampler logNormalSampler0 = new LogNormalSampler(marsagliaNormalizedGaussianSampler0, 0L, 6.026367581040399);
      double double0 = logNormalSampler0.sample();
}"
798,"    public SharedStateContinuousSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return new LogNormalSampler(rng, this);
    }","  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      MarsagliaNormalizedGaussianSampler marsagliaNormalizedGaussianSampler0 = MarsagliaNormalizedGaussianSampler.of((UniformRandomProvider) jDKRandomWrapper0);
      LogNormalSampler logNormalSampler0 = new LogNormalSampler(marsagliaNormalizedGaussianSampler0, 0L, 6.026367581040399);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = logNormalSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
799,"    public String toString() {
        return ""Log-normal deviate ["" + gaussian.toString() + ""]"";
    }","  public void test9()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      MarsagliaNormalizedGaussianSampler marsagliaNormalizedGaussianSampler0 = MarsagliaNormalizedGaussianSampler.of((UniformRandomProvider) jDKRandomWrapper0);
      LogNormalSampler logNormalSampler0 = new LogNormalSampler(marsagliaNormalizedGaussianSampler0, 0L, 6.026367581040399);
      String string0 = logNormalSampler0.toString();
}"
800,"    public static SharedStateContinuousSampler of(NormalizedGaussianSampler gaussian,
                                                  double scale,
                                                  double shape) {
        return new LogNormalSampler(gaussian, scale, shape);
    }","  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      MarsagliaNormalizedGaussianSampler marsagliaNormalizedGaussianSampler0 = MarsagliaNormalizedGaussianSampler.of((UniformRandomProvider) jDKRandomWrapper0);
      // Undeclared exception!
      try { 
        LogNormalSampler.of(marsagliaNormalizedGaussianSampler0, 6.026367581040399, 0L);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // shape is not strictly positive: 0.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.LogNormalSampler"", e);
      }
  }"
801,"    public static SharedStateDiscreteSampler of(final UniformRandomProvider rng,
                                                final double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1042.94129003714;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = AliasMethodDiscreteSampler.of((UniformRandomProvider) null, doubleArray0, 9);
}"
802,"    public static SharedStateDiscreteSampler of(final UniformRandomProvider rng,
                                                final double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(9007199254740992L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 9007199254740992L;
      doubleArray0[1] = (double) 9007199254740992L;
      doubleArray0[2] = (double) 9007199254740992L;
      doubleArray0[3] = (double) 9007199254740992L;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0);
}"
803,"    public static SharedStateDiscreteSampler of(final UniformRandomProvider rng,
                                                final double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 11;
      doubleArray0[1] = (double) 11;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, 11);
}"
804,"    public SharedStateDiscreteSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return new AliasMethodDiscreteSampler(rng, probability, alias);
    }","  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = 878.0153;
      AliasMethodDiscreteSampler aliasMethodDiscreteSampler0 = (AliasMethodDiscreteSampler)AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-1018));
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper(mockRandom0);
      AliasMethodDiscreteSampler aliasMethodDiscreteSampler1 = (AliasMethodDiscreteSampler)aliasMethodDiscreteSampler0.withUniformRandomProvider(jDKRandomWrapper1);
}"
805,"    public static SharedStateDiscreteSampler of(final UniformRandomProvider rng,
                                                final double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = 878.0153;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-2934));
      Random.setNextRandom((-2934));
      int int0 = ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
}"
806,"    public static SharedStateDiscreteSampler of(final UniformRandomProvider rng,
                                                final double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[6];
      jDKRandomWrapper0.nextFloat();
      doubleArray0[3] = 878.0153;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-2934));
      int int0 = ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
}"
807,"    public static SharedStateDiscreteSampler of(final UniformRandomProvider rng,
                                                final double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[14];
      doubleArray0[3] = 878.0153;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-1018));
      Random.setNextRandom((-1018));
      int int0 = ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
}"
808,"    public SharedStateDiscreteSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return new AliasMethodDiscreteSampler(rng, probability, alias);
    }","  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = 878.0153;
      AliasMethodDiscreteSampler aliasMethodDiscreteSampler0 = (AliasMethodDiscreteSampler)AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-1018));
      JDKRandomWrapper jDKRandomWrapper1 = new JDKRandomWrapper(mockRandom0);
      AliasMethodDiscreteSampler aliasMethodDiscreteSampler1 = (AliasMethodDiscreteSampler)aliasMethodDiscreteSampler0.withUniformRandomProvider(jDKRandomWrapper1);
}"
809,"    public static SharedStateDiscreteSampler of(final UniformRandomProvider rng,
                                                final double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = 878.0153;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-1018));
      Random.setNextRandom((-1018));
      jDKRandomWrapper0.nextDouble();
      int int0 = ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
      int int1 = ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
}"
810,"    public static SharedStateDiscreteSampler of(final UniformRandomProvider rng,
                                                final double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test9()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = 878.0153;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-1018));
      Random.setNextRandom((-1018));
      jDKRandomWrapper0.nextDouble();
      int int0 = ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
      int int1 = ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
}"
811,"    public String toString() {
        return ""Alias method ["" + rng.toString() + ""]"";
    }","  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1042.94129003714;
      AliasMethodDiscreteSampler aliasMethodDiscreteSampler0 = (AliasMethodDiscreteSampler)AliasMethodDiscreteSampler.of((UniformRandomProvider) null, doubleArray0, (-3566));
      // Undeclared exception!
      try { 
        aliasMethodDiscreteSampler0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
812,"    public static SharedStateDiscreteSampler of(final UniformRandomProvider rng,
                                                final double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test11()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1L;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-1018));
      // Undeclared exception!
      try { 
        ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.JDKRandomWrapper"", e);
      }
  }"
813,"    public static SharedStateDiscreteSampler of(final UniformRandomProvider rng,
                                                final double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 15;
      // Undeclared exception!
      AliasMethodDiscreteSampler.of((UniformRandomProvider) null, doubleArray0, 15);
  }"
814,"    public static SharedStateDiscreteSampler of(final UniformRandomProvider rng,
                                                final double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        AliasMethodDiscreteSampler.of((UniformRandomProvider) null, doubleArray0, 2351);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid sum of probabilities: 0.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.InternalUtils"", e);
      }
  }"
815,"    public static SharedStateDiscreteSampler of(final UniformRandomProvider rng,
                                                final double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[30];
      doubleArray0[0] = (double) 19L;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-1018));
      int int0 = ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
      int int1 = ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
}"
816,"    public static SharedStateDiscreteSampler of(final UniformRandomProvider rng,
                                                final double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = 878.0153;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-1018));
      Random.setNextRandom((-1018));
      int int0 = ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
}"
817,"    public static SharedStateDiscreteSampler of(final UniformRandomProvider rng,
                                                final double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = 878.0153;
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-1018));
      Random.setNextRandom((-1018));
      int int0 = ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
      int int1 = ((AliasMethodDiscreteSampler) sharedStateDiscreteSampler0).sample();
}"
818,"    public static SharedStateDiscreteSampler of(final UniformRandomProvider rng,
                                                final double[] probabilities) {
        return of(rng, probabilities, DEFAULT_ALPHA);
    }","  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        AliasMethodDiscreteSampler.of((UniformRandomProvider) null, doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid sum of probabilities: 0.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.InternalUtils"", e);
      }
  }"
819,"    public String toString() {
        return ""Alias method ["" + rng.toString() + ""]"";
    }","  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[30];
      doubleArray0[0] = (double) 19L;
      AliasMethodDiscreteSampler aliasMethodDiscreteSampler0 = (AliasMethodDiscreteSampler)AliasMethodDiscreteSampler.of((UniformRandomProvider) jDKRandomWrapper0, doubleArray0, (-1018));
      String string0 = aliasMethodDiscreteSampler0.toString();
}"
820,,"  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
}"
821,,"  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
822,,"  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      long long0 = jDKRandomWrapper0.nextLong();
}"
823,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      long long0 = jDKRandomWrapper0.nextLong();
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(8.896797153024387E-5, 8.896797153024387E-5, 8.896797153024387E-5, 8.896797153024387E-5, 4.1023029246790967E-20, (-2508.0460052978), 4.1023029246790967E-20, 0.6, (-1209.792));
}"
824,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      long long0 = jDKRandomWrapper0.nextLong();
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(8.896797153024387E-5, 8.896797153024387E-5, 8.896797153024387E-5, 8.896797153024387E-5, 4.1023029246790967E-20, (-2508.0460052978), 4.1023029246790967E-20, 0.6, (-1209.792));
      LargeMeanPoissonSampler largeMeanPoissonSampler0 = new LargeMeanPoissonSampler(jDKRandomWrapper0, largeMeanPoissonSampler_LargeMeanPoissonSamplerState0, 0.6);
}"
825,"    public int sample() {
        // This will never be null. It may be a no-op delegate that returns zero.
        final int y2 = smallMeanPoissonSampler.sample();

        double x;
        double y;
        double v;
        int a;
        double t;
        double qr;
        double qa;
        while (true) {
            // Step 1:
            final double u = rng.nextDouble();
            if (u <= p1) {
                // Step 2:
                final double n = gaussian.sample();
                x = n * Math.sqrt(lambda + halfDelta) - 0.5d;
                if (x > delta || x < -lambda) {
                    continue;
                }
                y = x < 0 ? Math.floor(x) : Math.ceil(x);
                final double e = exponential.sample();
                v = -e - 0.5 * n * n + c1;
            } else {
                // Step 3:
                if (u > p1 + p2) {
                    y = lambda;
                    break;
                }
                x = delta + (twolpd / delta) * exponential.sample();
                y = Math.ceil(x);
                v = -exponential.sample() - delta * (x + 1) / twolpd;
            }
            // The Squeeze Principle
            // Step 4.1:
            a = x < 0 ? 1 : 0;
            t = y * (y + 1) / (2 * lambda);
            // Step 4.2
            if (v < -t && a == 0) {
                y = lambda + y;
                break;
            }
            // Step 4.3:
            qr = t * ((2 * y + 1) / (6 * lambda) - 1);
            qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));
            // Step 4.4:
            if (v < qa) {
                y = lambda + y;
                break;
            }
            // Step 4.5:
            if (v > qr) {
                continue;
            }
            // Step 4.6:
            if (v < y * logLambda - getFactorialLog((int) (y + lambda)) + logLambdaFactorial) {
                y = lambda + y;
                break;
            }
        }

        return (int) Math.min(y2 + (long) y, Integer.MAX_VALUE);
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      long long0 = jDKRandomWrapper0.nextLong();
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(8.896797153024387E-5, 8.896797153024387E-5, 8.896797153024387E-5, 8.896797153024387E-5, 4.1023029246790967E-20, (-2508.0460052978), 4.1023029246790967E-20, 0.6, (-1209.792));
      LargeMeanPoissonSampler largeMeanPoissonSampler0 = new LargeMeanPoissonSampler(jDKRandomWrapper0, largeMeanPoissonSampler_LargeMeanPoissonSamplerState0, 0.6);
      int int0 = largeMeanPoissonSampler0.sample();
}"
826,"    public int sample() {
        // This will never be null. It may be a no-op delegate that returns zero.
        final int y2 = smallMeanPoissonSampler.sample();

        double x;
        double y;
        double v;
        int a;
        double t;
        double qr;
        double qa;
        while (true) {
            // Step 1:
            final double u = rng.nextDouble();
            if (u <= p1) {
                // Step 2:
                final double n = gaussian.sample();
                x = n * Math.sqrt(lambda + halfDelta) - 0.5d;
                if (x > delta || x < -lambda) {
                    continue;
                }
                y = x < 0 ? Math.floor(x) : Math.ceil(x);
                final double e = exponential.sample();
                v = -e - 0.5 * n * n + c1;
            } else {
                // Step 3:
                if (u > p1 + p2) {
                    y = lambda;
                    break;
                }
                x = delta + (twolpd / delta) * exponential.sample();
                y = Math.ceil(x);
                v = -exponential.sample() - delta * (x + 1) / twolpd;
            }
            // The Squeeze Principle
            // Step 4.1:
            a = x < 0 ? 1 : 0;
            t = y * (y + 1) / (2 * lambda);
            // Step 4.2
            if (v < -t && a == 0) {
                y = lambda + y;
                break;
            }
            // Step 4.3:
            qr = t * ((2 * y + 1) / (6 * lambda) - 1);
            qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));
            // Step 4.4:
            if (v < qa) {
                y = lambda + y;
                break;
            }
            // Step 4.5:
            if (v > qr) {
                continue;
            }
            // Step 4.6:
            if (v < y * logLambda - getFactorialLog((int) (y + lambda)) + logLambdaFactorial) {
                y = lambda + y;
                break;
            }
        }

        return (int) Math.min(y2 + (long) y, Integer.MAX_VALUE);
    }","  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      long long0 = jDKRandomWrapper0.nextLong();
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(8.896797153024387E-5, 8.896797153024387E-5, 8.896797153024387E-5, 8.896797153024387E-5, 4.1023029246790967E-20, (-2508.0460052978), 4.1023029246790967E-20, 0.6, (-1209.792));
      LargeMeanPoissonSampler largeMeanPoissonSampler0 = new LargeMeanPoissonSampler(jDKRandomWrapper0, largeMeanPoissonSampler_LargeMeanPoissonSamplerState0, 0.6);
      int int0 = largeMeanPoissonSampler0.sample();
      int int1 = largeMeanPoissonSampler0.sample();
}"
827,"    public int sample() {
        // This will never be null. It may be a no-op delegate that returns zero.
        final int y2 = smallMeanPoissonSampler.sample();

        double x;
        double y;
        double v;
        int a;
        double t;
        double qr;
        double qa;
        while (true) {
            // Step 1:
            final double u = rng.nextDouble();
            if (u <= p1) {
                // Step 2:
                final double n = gaussian.sample();
                x = n * Math.sqrt(lambda + halfDelta) - 0.5d;
                if (x > delta || x < -lambda) {
                    continue;
                }
                y = x < 0 ? Math.floor(x) : Math.ceil(x);
                final double e = exponential.sample();
                v = -e - 0.5 * n * n + c1;
            } else {
                // Step 3:
                if (u > p1 + p2) {
                    y = lambda;
                    break;
                }
                x = delta + (twolpd / delta) * exponential.sample();
                y = Math.ceil(x);
                v = -exponential.sample() - delta * (x + 1) / twolpd;
            }
            // The Squeeze Principle
            // Step 4.1:
            a = x < 0 ? 1 : 0;
            t = y * (y + 1) / (2 * lambda);
            // Step 4.2
            if (v < -t && a == 0) {
                y = lambda + y;
                break;
            }
            // Step 4.3:
            qr = t * ((2 * y + 1) / (6 * lambda) - 1);
            qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));
            // Step 4.4:
            if (v < qa) {
                y = lambda + y;
                break;
            }
            // Step 4.5:
            if (v > qr) {
                continue;
            }
            // Step 4.6:
            if (v < y * logLambda - getFactorialLog((int) (y + lambda)) + logLambdaFactorial) {
                y = lambda + y;
                break;
            }
        }

        return (int) Math.min(y2 + (long) y, Integer.MAX_VALUE);
    }","  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      long long0 = jDKRandomWrapper0.nextLong();
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(8.896797153024387E-5, 8.896797153024387E-5, 8.896797153024387E-5, 8.896797153024387E-5, 4.1023029246790967E-20, (-2508.0460052978), 4.1023029246790967E-20, 0.6, (-1209.792));
      LargeMeanPoissonSampler largeMeanPoissonSampler0 = new LargeMeanPoissonSampler(jDKRandomWrapper0, largeMeanPoissonSampler_LargeMeanPoissonSamplerState0, 0.6);
      int int0 = largeMeanPoissonSampler0.sample();
      int int1 = largeMeanPoissonSampler0.sample();
}"
828,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test8()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState((-1.5501529104123046), 0.0, (-1.5501529104123046), 0.0, (-1.5501529104123046), 0.0, 0.0, (-1.5501529104123046), 0.0);
}"
829,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test9()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState((-1.5501529104123046), 0.0, (-1.5501529104123046), 0.0, (-1.5501529104123046), 0.0, 0.0, (-1.5501529104123046), 0.0);
      double double0 = largeMeanPoissonSampler_LargeMeanPoissonSamplerState0.getTwolpd();
}"
830,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test10()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(1499.1062, 1499.1062, 1499.1062, (-1887.6435376117267), (-1887.6435376117267), (-1887.6435376117267), (-1887.6435376117267), (-1887.6435376117267), (-2075.95));
}"
831,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test11()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(1499.1062, 1499.1062, 1499.1062, (-1887.6435376117267), (-1887.6435376117267), (-1887.6435376117267), (-1887.6435376117267), (-1887.6435376117267), (-2075.95));
      double double0 = largeMeanPoissonSampler_LargeMeanPoissonSamplerState0.getP2();
}"
832,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test12()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(731.04, 731.04, 731.04, 0.0, 1744.777417128199, 0.0, 1.0, 1.0, 1744.777417128199);
}"
833,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test13()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(731.04, 731.04, 731.04, 0.0, 1744.777417128199, 0.0, 1.0, 1.0, 1744.777417128199);
      double double0 = largeMeanPoissonSampler_LargeMeanPoissonSamplerState0.getP1();
}"
834,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test14()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState((-1503.27221406947), 6.99568031585645E-20, (-1503.27221406947), 0.0, (-1503.27221406947), 6.99568031585645E-20, (-1503.27221406947), (-1240.831), 815.63664573);
}"
835,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test15()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState((-1503.27221406947), 6.99568031585645E-20, (-1503.27221406947), 0.0, (-1503.27221406947), 6.99568031585645E-20, (-1503.27221406947), (-1240.831), 815.63664573);
      double double0 = largeMeanPoissonSampler_LargeMeanPoissonSamplerState0.getLogLambdaFactorial();
}"
836,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test16()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(1499.1062, 1499.1062, 1499.1062, (-1887.6435376117267), (-1887.6435376117267), (-1887.6435376117267), (-1887.6435376117267), (-1887.6435376117267), (-2075.95));
}"
837,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test17()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(1499.1062, 1499.1062, 1499.1062, (-1887.6435376117267), (-1887.6435376117267), (-1887.6435376117267), (-1887.6435376117267), (-1887.6435376117267), (-2075.95));
      double double0 = largeMeanPoissonSampler_LargeMeanPoissonSamplerState0.getLogLambda();
}"
838,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test18()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(731.04, 731.04, 731.04, 0.0, 1744.777417128199, 0.0, 1.0, 1.0, 1744.777417128199);
}"
839,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test19()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(731.04, 731.04, 731.04, 0.0, 1744.777417128199, 0.0, 1.0, 1.0, 1744.777417128199);
      double double0 = largeMeanPoissonSampler_LargeMeanPoissonSamplerState0.getLambdaRaw();
}"
840,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test20()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(0.0, 0.0, 1.4463079671711862E-19, 0.0, 4.9E-324, 3.0, 4.9E-324, 1.2980275057923788E-19, 716.11439971376);
}"
841,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test21()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(0.0, 0.0, 1.4463079671711862E-19, 0.0, 4.9E-324, 3.0, 4.9E-324, 1.2980275057923788E-19, 716.11439971376);
      double double0 = largeMeanPoissonSampler_LargeMeanPoissonSamplerState0.getHalfDelta();
}"
842,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test22()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(0.0, 0.0, 1.4463079671711862E-19, 0.0, 4.9E-324, 3.0, 4.9E-324, 1.2980275057923788E-19, 716.11439971376);
}"
843,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test23()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(0.0, 0.0, 1.4463079671711862E-19, 0.0, 4.9E-324, 3.0, 4.9E-324, 1.2980275057923788E-19, 716.11439971376);
      double double0 = largeMeanPoissonSampler_LargeMeanPoissonSamplerState0.getDelta();
}"
844,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test24()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState((-1.5501529104123046), 0.0, (-1.5501529104123046), 0.0, (-1.5501529104123046), 0.0, 0.0, (-1.5501529104123046), 0.0);
}"
845,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test25()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState((-1.5501529104123046), 0.0, (-1.5501529104123046), 0.0, (-1.5501529104123046), 0.0, 0.0, (-1.5501529104123046), 0.0);
      double double0 = largeMeanPoissonSampler_LargeMeanPoissonSamplerState0.getC1();
}"
846,,"  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
}"
847,,"  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
848,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test28()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState((-2075.95), 1499.1062, 8.896797153023922E-5, (-3296.19675691541), 3.5757701901149035E-20, 3.0, 8.896797153023922E-5, 3.5757701901149035E-20, (-3296.19675691541));
}"
849,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState((-2075.95), 1499.1062, 8.896797153023922E-5, (-3296.19675691541), 3.5757701901149035E-20, 3.0, 8.896797153023922E-5, 3.5757701901149035E-20, (-3296.19675691541));
      LargeMeanPoissonSampler largeMeanPoissonSampler0 = new LargeMeanPoissonSampler(jDKRandomWrapper0, largeMeanPoissonSampler_LargeMeanPoissonSamplerState0, 8.8967971530239E-5);
}"
850,"    public int sample() {
        // This will never be null. It may be a no-op delegate that returns zero.
        final int y2 = smallMeanPoissonSampler.sample();

        double x;
        double y;
        double v;
        int a;
        double t;
        double qr;
        double qa;
        while (true) {
            // Step 1:
            final double u = rng.nextDouble();
            if (u <= p1) {
                // Step 2:
                final double n = gaussian.sample();
                x = n * Math.sqrt(lambda + halfDelta) - 0.5d;
                if (x > delta || x < -lambda) {
                    continue;
                }
                y = x < 0 ? Math.floor(x) : Math.ceil(x);
                final double e = exponential.sample();
                v = -e - 0.5 * n * n + c1;
            } else {
                // Step 3:
                if (u > p1 + p2) {
                    y = lambda;
                    break;
                }
                x = delta + (twolpd / delta) * exponential.sample();
                y = Math.ceil(x);
                v = -exponential.sample() - delta * (x + 1) / twolpd;
            }
            // The Squeeze Principle
            // Step 4.1:
            a = x < 0 ? 1 : 0;
            t = y * (y + 1) / (2 * lambda);
            // Step 4.2
            if (v < -t && a == 0) {
                y = lambda + y;
                break;
            }
            // Step 4.3:
            qr = t * ((2 * y + 1) / (6 * lambda) - 1);
            qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));
            // Step 4.4:
            if (v < qa) {
                y = lambda + y;
                break;
            }
            // Step 4.5:
            if (v > qr) {
                continue;
            }
            // Step 4.6:
            if (v < y * logLambda - getFactorialLog((int) (y + lambda)) + logLambdaFactorial) {
                y = lambda + y;
                break;
            }
        }

        return (int) Math.min(y2 + (long) y, Integer.MAX_VALUE);
    }","  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState((-2075.95), 1499.1062, 8.896797153023922E-5, (-3296.19675691541), 3.5757701901149035E-20, 3.0, 8.896797153023922E-5, 3.5757701901149035E-20, (-3296.19675691541));
      LargeMeanPoissonSampler largeMeanPoissonSampler0 = new LargeMeanPoissonSampler(jDKRandomWrapper0, largeMeanPoissonSampler_LargeMeanPoissonSamplerState0, 8.8967971530239E-5);
      int int0 = largeMeanPoissonSampler0.sample();
}"
851,,"  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
}"
852,,"  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
853,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double mean) {
        return new LargeMeanPoissonSampler(rng, mean);
    }","  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = LargeMeanPoissonSampler.of(jDKRandomWrapper0, 2384);
}"
854,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test34()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(0.0, 0.0, 0.0, 0.0, (-1598.3741277), 304.2031462023, 1999.748, 0.0, 2717.24431280015);
}"
855,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test35()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(0.0, 0.0, 0.0, 0.0, (-1598.3741277), 304.2031462023, 1999.748, 0.0, 2717.24431280015);
      LargeMeanPoissonSampler largeMeanPoissonSampler0 = new LargeMeanPoissonSampler((UniformRandomProvider) null, largeMeanPoissonSampler_LargeMeanPoissonSamplerState0, 0);
}"
856,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test36()  throws Throwable  {
      LargeMeanPoissonSampler largeMeanPoissonSampler0 = new LargeMeanPoissonSampler((UniformRandomProvider) null, 731.04);
}"
857,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test37()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(2.0, 2.0, 2.0, 0.0, 0.0, (-1.1921982786403236), 0.0, 2.0, 2.0);
}"
858,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test38()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(2.0, 2.0, 2.0, 0.0, 0.0, (-1.1921982786403236), 0.0, 2.0, 2.0);
      MockRandom mockRandom0 = new MockRandom();
}"
859,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test39()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(2.0, 2.0, 2.0, 0.0, 0.0, (-1.1921982786403236), 0.0, 2.0, 2.0);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
860,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test40()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(2.0, 2.0, 2.0, 0.0, 0.0, (-1.1921982786403236), 0.0, 2.0, 2.0);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LargeMeanPoissonSampler largeMeanPoissonSampler0 = new LargeMeanPoissonSampler(jDKRandomWrapper0, largeMeanPoissonSampler_LargeMeanPoissonSamplerState0, 3.4786339973011376E-20);
}"
861,,"  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
}"
862,,"  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
863,,"  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2289663232373870848L);
}"
864,,"  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2289663232373870848L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
865,,"  public void test45()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((Random) null);
}"
866,"    public int sample() {
        // This will never be null. It may be a no-op delegate that returns zero.
        final int y2 = smallMeanPoissonSampler.sample();

        double x;
        double y;
        double v;
        int a;
        double t;
        double qr;
        double qa;
        while (true) {
            // Step 1:
            final double u = rng.nextDouble();
            if (u <= p1) {
                // Step 2:
                final double n = gaussian.sample();
                x = n * Math.sqrt(lambda + halfDelta) - 0.5d;
                if (x > delta || x < -lambda) {
                    continue;
                }
                y = x < 0 ? Math.floor(x) : Math.ceil(x);
                final double e = exponential.sample();
                v = -e - 0.5 * n * n + c1;
            } else {
                // Step 3:
                if (u > p1 + p2) {
                    y = lambda;
                    break;
                }
                x = delta + (twolpd / delta) * exponential.sample();
                y = Math.ceil(x);
                v = -exponential.sample() - delta * (x + 1) / twolpd;
            }
            // The Squeeze Principle
            // Step 4.1:
            a = x < 0 ? 1 : 0;
            t = y * (y + 1) / (2 * lambda);
            // Step 4.2
            if (v < -t && a == 0) {
                y = lambda + y;
                break;
            }
            // Step 4.3:
            qr = t * ((2 * y + 1) / (6 * lambda) - 1);
            qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));
            // Step 4.4:
            if (v < qa) {
                y = lambda + y;
                break;
            }
            // Step 4.5:
            if (v > qr) {
                continue;
            }
            // Step 4.6:
            if (v < y * logLambda - getFactorialLog((int) (y + lambda)) + logLambdaFactorial) {
                y = lambda + y;
                break;
            }
        }

        return (int) Math.min(y2 + (long) y, Integer.MAX_VALUE);
    }","  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextLong();
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(2.0, 2.0, 2.256543402504904E-20, 2.256543402504904E-20, (-1496.9927130471008), 2.0, 2.256543402504904E-20, 2.0, (-1496.9927130471008));
      LargeMeanPoissonSampler largeMeanPoissonSampler0 = new LargeMeanPoissonSampler(jDKRandomWrapper0, largeMeanPoissonSampler_LargeMeanPoissonSamplerState0, 2.256543402504904E-20);
      int int0 = largeMeanPoissonSampler0.sample();
}"
867,"    public int sample() {
        // This will never be null. It may be a no-op delegate that returns zero.
        final int y2 = smallMeanPoissonSampler.sample();

        double x;
        double y;
        double v;
        int a;
        double t;
        double qr;
        double qa;
        while (true) {
            // Step 1:
            final double u = rng.nextDouble();
            if (u <= p1) {
                // Step 2:
                final double n = gaussian.sample();
                x = n * Math.sqrt(lambda + halfDelta) - 0.5d;
                if (x > delta || x < -lambda) {
                    continue;
                }
                y = x < 0 ? Math.floor(x) : Math.ceil(x);
                final double e = exponential.sample();
                v = -e - 0.5 * n * n + c1;
            } else {
                // Step 3:
                if (u > p1 + p2) {
                    y = lambda;
                    break;
                }
                x = delta + (twolpd / delta) * exponential.sample();
                y = Math.ceil(x);
                v = -exponential.sample() - delta * (x + 1) / twolpd;
            }
            // The Squeeze Principle
            // Step 4.1:
            a = x < 0 ? 1 : 0;
            t = y * (y + 1) / (2 * lambda);
            // Step 4.2
            if (v < -t && a == 0) {
                y = lambda + y;
                break;
            }
            // Step 4.3:
            qr = t * ((2 * y + 1) / (6 * lambda) - 1);
            qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));
            // Step 4.4:
            if (v < qa) {
                y = lambda + y;
                break;
            }
            // Step 4.5:
            if (v > qr) {
                continue;
            }
            // Step 4.6:
            if (v < y * logLambda - getFactorialLog((int) (y + lambda)) + logLambdaFactorial) {
                y = lambda + y;
                break;
            }
        }

        return (int) Math.min(y2 + (long) y, Integer.MAX_VALUE);
    }","  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(2.0, 2.0, 2.256543402504904E-20, 2, (-1496.9927130471008), 2.0, 0.0, 2.0, 0.0);
      LargeMeanPoissonSampler largeMeanPoissonSampler0 = new LargeMeanPoissonSampler(jDKRandomWrapper0, largeMeanPoissonSampler_LargeMeanPoissonSamplerState0, 3.4786339973011376E-20);
      int int0 = largeMeanPoissonSampler0.sample();
}"
868,"    public int sample() {
        // This will never be null. It may be a no-op delegate that returns zero.
        final int y2 = smallMeanPoissonSampler.sample();

        double x;
        double y;
        double v;
        int a;
        double t;
        double qr;
        double qa;
        while (true) {
            // Step 1:
            final double u = rng.nextDouble();
            if (u <= p1) {
                // Step 2:
                final double n = gaussian.sample();
                x = n * Math.sqrt(lambda + halfDelta) - 0.5d;
                if (x > delta || x < -lambda) {
                    continue;
                }
                y = x < 0 ? Math.floor(x) : Math.ceil(x);
                final double e = exponential.sample();
                v = -e - 0.5 * n * n + c1;
            } else {
                // Step 3:
                if (u > p1 + p2) {
                    y = lambda;
                    break;
                }
                x = delta + (twolpd / delta) * exponential.sample();
                y = Math.ceil(x);
                v = -exponential.sample() - delta * (x + 1) / twolpd;
            }
            // The Squeeze Principle
            // Step 4.1:
            a = x < 0 ? 1 : 0;
            t = y * (y + 1) / (2 * lambda);
            // Step 4.2
            if (v < -t && a == 0) {
                y = lambda + y;
                break;
            }
            // Step 4.3:
            qr = t * ((2 * y + 1) / (6 * lambda) - 1);
            qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));
            // Step 4.4:
            if (v < qa) {
                y = lambda + y;
                break;
            }
            // Step 4.5:
            if (v > qr) {
                continue;
            }
            // Step 4.6:
            if (v < y * logLambda - getFactorialLog((int) (y + lambda)) + logLambdaFactorial) {
                y = lambda + y;
                break;
            }
        }

        return (int) Math.min(y2 + (long) y, Integer.MAX_VALUE);
    }","  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(2.0, 2.0, 2.256543402504904E-20, 2.256543402504904E-20, (-1496.9927130471008), 2.0, 2.256543402504904E-20, 2.0, (-1496.9927130471008));
      LargeMeanPoissonSampler largeMeanPoissonSampler0 = new LargeMeanPoissonSampler(jDKRandomWrapper0, largeMeanPoissonSampler_LargeMeanPoissonSamplerState0, 2.256543402504904E-20);
      // Undeclared exception!
      largeMeanPoissonSampler0.sample();
  }"
869,"    public int sample() {
        // This will never be null. It may be a no-op delegate that returns zero.
        final int y2 = smallMeanPoissonSampler.sample();

        double x;
        double y;
        double v;
        int a;
        double t;
        double qr;
        double qa;
        while (true) {
            // Step 1:
            final double u = rng.nextDouble();
            if (u <= p1) {
                // Step 2:
                final double n = gaussian.sample();
                x = n * Math.sqrt(lambda + halfDelta) - 0.5d;
                if (x > delta || x < -lambda) {
                    continue;
                }
                y = x < 0 ? Math.floor(x) : Math.ceil(x);
                final double e = exponential.sample();
                v = -e - 0.5 * n * n + c1;
            } else {
                // Step 3:
                if (u > p1 + p2) {
                    y = lambda;
                    break;
                }
                x = delta + (twolpd / delta) * exponential.sample();
                y = Math.ceil(x);
                v = -exponential.sample() - delta * (x + 1) / twolpd;
            }
            // The Squeeze Principle
            // Step 4.1:
            a = x < 0 ? 1 : 0;
            t = y * (y + 1) / (2 * lambda);
            // Step 4.2
            if (v < -t && a == 0) {
                y = lambda + y;
                break;
            }
            // Step 4.3:
            qr = t * ((2 * y + 1) / (6 * lambda) - 1);
            qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));
            // Step 4.4:
            if (v < qa) {
                y = lambda + y;
                break;
            }
            // Step 4.5:
            if (v > qr) {
                continue;
            }
            // Step 4.6:
            if (v < y * logLambda - getFactorialLog((int) (y + lambda)) + logLambdaFactorial) {
                y = lambda + y;
                break;
            }
        }

        return (int) Math.min(y2 + (long) y, Integer.MAX_VALUE);
    }","  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextLong();
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(8.896797E-5, 8.896797E-5, 8.896797E-5, (-1813.56911547), 0L, (-1813.56911547), 0L, 0.6, (-1813.56911547));
      LargeMeanPoissonSampler largeMeanPoissonSampler0 = new LargeMeanPoissonSampler(jDKRandomWrapper0, largeMeanPoissonSampler_LargeMeanPoissonSamplerState0, 0.6);
      largeMeanPoissonSampler0.sample();
      int int0 = largeMeanPoissonSampler0.sample();
}"
870,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test50()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666);
      LargeMeanPoissonSampler largeMeanPoissonSampler0 = null;
      try {
        largeMeanPoissonSampler0 = new LargeMeanPoissonSampler((UniformRandomProvider) null, largeMeanPoissonSampler_LargeMeanPoissonSamplerState0, 1666);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // lambdaFractional must be in the range 0 (inclusive) to 1 (exclusive): 1666.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.LargeMeanPoissonSampler"", e);
      }
  }"
871,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LargeMeanPoissonSampler largeMeanPoissonSampler0 = null;
      try {
        largeMeanPoissonSampler0 = new LargeMeanPoissonSampler(jDKRandomWrapper0, (LargeMeanPoissonSampler.LargeMeanPoissonSamplerState) null, (-1887.6435376117267));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // lambdaFractional must be in the range 0 (inclusive) to 1 (exclusive): -1887.6435376117267
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.LargeMeanPoissonSampler"", e);
      }
  }"
872,"    public int sample() {
        // This will never be null. It may be a no-op delegate that returns zero.
        final int y2 = smallMeanPoissonSampler.sample();

        double x;
        double y;
        double v;
        int a;
        double t;
        double qr;
        double qa;
        while (true) {
            // Step 1:
            final double u = rng.nextDouble();
            if (u <= p1) {
                // Step 2:
                final double n = gaussian.sample();
                x = n * Math.sqrt(lambda + halfDelta) - 0.5d;
                if (x > delta || x < -lambda) {
                    continue;
                }
                y = x < 0 ? Math.floor(x) : Math.ceil(x);
                final double e = exponential.sample();
                v = -e - 0.5 * n * n + c1;
            } else {
                // Step 3:
                if (u > p1 + p2) {
                    y = lambda;
                    break;
                }
                x = delta + (twolpd / delta) * exponential.sample();
                y = Math.ceil(x);
                v = -exponential.sample() - delta * (x + 1) / twolpd;
            }
            // The Squeeze Principle
            // Step 4.1:
            a = x < 0 ? 1 : 0;
            t = y * (y + 1) / (2 * lambda);
            // Step 4.2
            if (v < -t && a == 0) {
                y = lambda + y;
                break;
            }
            // Step 4.3:
            qr = t * ((2 * y + 1) / (6 * lambda) - 1);
            qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));
            // Step 4.4:
            if (v < qa) {
                y = lambda + y;
                break;
            }
            // Step 4.5:
            if (v > qr) {
                continue;
            }
            // Step 4.6:
            if (v < y * logLambda - getFactorialLog((int) (y + lambda)) + logLambdaFactorial) {
                y = lambda + y;
                break;
            }
        }

        return (int) Math.min(y2 + (long) y, Integer.MAX_VALUE);
    }","  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LargeMeanPoissonSampler largeMeanPoissonSampler0 = new LargeMeanPoissonSampler(jDKRandomWrapper0, 2385.09398781);
      int int0 = largeMeanPoissonSampler0.sample();
}"
873,"    public LargeMeanPoissonSampler(UniformRandomProvider rng,
                                   double mean) {
        if (mean < 1) {
            throw new IllegalArgumentException(""mean is not >= 1: "" + mean);
        }
        // The algorithm is not valid if Math.floor(mean) is not an integer.
        if (mean > MAX_MEAN) {
            throw new IllegalArgumentException(""mean "" + mean + "" > "" + MAX_MEAN);
        }
        this.rng = rng;

        gaussian = ZigguratSampler.NormalizedGaussian.of(rng);
        exponential = ZigguratSampler.Exponential.of(rng);
        // Plain constructor uses the uncached function.
        factorialLog = NO_CACHE_FACTORIAL_LOG;

        // Cache values used in the algorithm
        lambda = Math.floor(mean);
        logLambda = Math.log(lambda);
        logLambdaFactorial = getFactorialLog((int) lambda);
        delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
        halfDelta = delta / 2;
        twolpd = 2 * lambda + delta;
        c1 = 1 / (8 * lambda);
        final double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(c1);
        final double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
        final double aSum = a1 + a2 + 1;
        p1 = a1 / aSum;
        p2 = a2 / aSum;

        // The algorithm requires a Poisson sample from the remaining lambda fraction.
        final double lambdaFractional = mean - lambda;
        smallMeanPoissonSampler = (lambdaFractional < Double.MIN_VALUE) ?
            NO_SMALL_MEAN_POISSON_SAMPLER : // Not used.
            KempSmallMeanPoissonSampler.of(rng, lambdaFractional);
    }","  public void test53()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(0.0, 0.0, 0.0, 0.0, (-1598.3741277), 304.2031462023, 1999.748, 0.0, 2717.24431280015);
      int int0 = largeMeanPoissonSampler_LargeMeanPoissonSamplerState0.getLambda();
}"
874,"    LargeMeanPoissonSamplerState getState() {
        return new LargeMeanPoissonSamplerState(lambda, logLambda, logLambdaFactorial,
                delta, halfDelta, twolpd, p1, p2, c1);
    }","  public void test54()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2259L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LargeMeanPoissonSampler largeMeanPoissonSampler0 = new LargeMeanPoissonSampler(jDKRandomWrapper0, 2.0);
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = largeMeanPoissonSampler0.getState();
}"
875,"    public String toString() {
        return ""Large Mean Poisson deviate ["" + rng.toString() + ""]"";
    }","  public void test55()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2259L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LargeMeanPoissonSampler largeMeanPoissonSampler0 = new LargeMeanPoissonSampler(jDKRandomWrapper0, 2.0);
      String string0 = largeMeanPoissonSampler0.toString();
}"
876,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double mean) {
        return new LargeMeanPoissonSampler(rng, mean);
    }","  public void test56()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2259L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        LargeMeanPoissonSampler.of(jDKRandomWrapper0, 1.7809061685599652E-19);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // mean is not >= 1: 1.7809061685599652E-19
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.LargeMeanPoissonSampler"", e);
      }
  }"
877,"    public int sample() {
        // This will never be null. It may be a no-op delegate that returns zero.
        final int y2 = smallMeanPoissonSampler.sample();

        double x;
        double y;
        double v;
        int a;
        double t;
        double qr;
        double qa;
        while (true) {
            // Step 1:
            final double u = rng.nextDouble();
            if (u <= p1) {
                // Step 2:
                final double n = gaussian.sample();
                x = n * Math.sqrt(lambda + halfDelta) - 0.5d;
                if (x > delta || x < -lambda) {
                    continue;
                }
                y = x < 0 ? Math.floor(x) : Math.ceil(x);
                final double e = exponential.sample();
                v = -e - 0.5 * n * n + c1;
            } else {
                // Step 3:
                if (u > p1 + p2) {
                    y = lambda;
                    break;
                }
                x = delta + (twolpd / delta) * exponential.sample();
                y = Math.ceil(x);
                v = -exponential.sample() - delta * (x + 1) / twolpd;
            }
            // The Squeeze Principle
            // Step 4.1:
            a = x < 0 ? 1 : 0;
            t = y * (y + 1) / (2 * lambda);
            // Step 4.2
            if (v < -t && a == 0) {
                y = lambda + y;
                break;
            }
            // Step 4.3:
            qr = t * ((2 * y + 1) / (6 * lambda) - 1);
            qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));
            // Step 4.4:
            if (v < qa) {
                y = lambda + y;
                break;
            }
            // Step 4.5:
            if (v > qr) {
                continue;
            }
            // Step 4.6:
            if (v < y * logLambda - getFactorialLog((int) (y + lambda)) + logLambdaFactorial) {
                y = lambda + y;
                break;
            }
        }

        return (int) Math.min(y2 + (long) y, Integer.MAX_VALUE);
    }","  public void test57()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LargeMeanPoissonSampler largeMeanPoissonSampler0 = new LargeMeanPoissonSampler(jDKRandomWrapper0, largeMeanPoissonSampler_LargeMeanPoissonSamplerState0, 0.0);
      int int0 = largeMeanPoissonSampler0.sample();
}"
878,"    public SharedStateDiscreteSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return new LargeMeanPoissonSampler(rng, this);
    }","  public void test58()  throws Throwable  {
      LargeMeanPoissonSampler.LargeMeanPoissonSamplerState largeMeanPoissonSampler_LargeMeanPoissonSamplerState0 = new LargeMeanPoissonSampler.LargeMeanPoissonSamplerState(0.0, 0.0, 0.0, 0.0, (-1598.3741277), 304.2031462023, 1999.748, 0.0, 2717.24431280015);
      LargeMeanPoissonSampler largeMeanPoissonSampler0 = new LargeMeanPoissonSampler((UniformRandomProvider) null, largeMeanPoissonSampler_LargeMeanPoissonSamplerState0, 0);
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = largeMeanPoissonSampler0.withUniformRandomProvider((UniformRandomProvider) null);
}"
879,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double mean) {
        // Each sampler should check the input arguments.
        return mean < PIVOT ?
            SmallMeanPoissonSampler.of(rng, mean) :
            LargeMeanPoissonSampler.of(rng, mean);
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1534L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = PoissonSampler.of(jDKRandomWrapper0, 40.0);
}"
880,"    public int sample() {
        return poissonSamplerDelegate.sample();
    }","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1810L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      PoissonSampler poissonSampler0 = new PoissonSampler(jDKRandomWrapper0, 6.0);
      int int0 = poissonSampler0.sample();
}"
881,"    public int sample() {
        return poissonSamplerDelegate.sample();
    }","  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2114L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      PoissonSampler poissonSampler0 = new PoissonSampler(jDKRandomWrapper0, 2114L);
      // Undeclared exception!
      poissonSampler0.sample();
  }"
882,"    public int sample() {
        return poissonSamplerDelegate.sample();
    }","  public void test3()  throws Throwable  {
      PoissonSampler poissonSampler0 = new PoissonSampler((UniformRandomProvider) null, 735.8645914318064);
      // Undeclared exception!
      try { 
        poissonSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.KempSmallMeanPoissonSampler"", e);
      }
  }"
883,"    public PoissonSampler(UniformRandomProvider rng,
                          double mean) {
        super(null);

        // Delegate all work to specialised samplers.
        poissonSamplerDelegate = of(rng, mean);
    }","  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      PoissonSampler poissonSampler0 = null;
      try {
        poissonSampler0 = new PoissonSampler(jDKRandomWrapper0, (-1430.134));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // mean is not strictly positive: -1430.134
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.SmallMeanPoissonSampler"", e);
      }
  }"
884,"    public static SharedStateDiscreteSampler of(UniformRandomProvider rng,
                                                double mean) {
        // Each sampler should check the input arguments.
        return mean < PIVOT ?
            SmallMeanPoissonSampler.of(rng, mean) :
            LargeMeanPoissonSampler.of(rng, mean);
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        PoissonSampler.of(jDKRandomWrapper0, (-44.79014700404934));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // mean is not strictly positive: -44.79014700404934
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.SmallMeanPoissonSampler"", e);
      }
  }"
885,"    public int sample() {
        return poissonSamplerDelegate.sample();
    }","  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      PoissonSampler poissonSampler0 = new PoissonSampler(jDKRandomWrapper0, 1320.1583093144677);
      int int0 = poissonSampler0.sample();
}"
886,"    public SharedStateDiscreteSampler withUniformRandomProvider(UniformRandomProvider rng) {
        // Direct return of the optimised sampler
        return poissonSamplerDelegate.withUniformRandomProvider(rng);
    }","  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      PoissonSampler poissonSampler0 = new PoissonSampler(jDKRandomWrapper0, 1320.1583093144677);
      SharedStateDiscreteSampler sharedStateDiscreteSampler0 = poissonSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
887,"    public String toString() {
        return poissonSamplerDelegate.toString();
    }","  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      PoissonSampler poissonSampler0 = new PoissonSampler(jDKRandomWrapper0, 1320.1583093144677);
      String string0 = poissonSampler0.toString();
}"
888,"    public double sample() {
        // Step 1:
        double a = 0;
        // Avoid u=0 which creates an infinite loop
        double u = InternalUtils.makeNonZeroDouble(rng.nextLong());

        // Step 2 and 3:
        while (u < 0.5) {
            a += EXPONENTIAL_SA_QI[0];
            u *= 2;
        }

        // Step 4 (now u >= 0.5):
        u += u - 1;

        // Step 5:
        if (u <= EXPONENTIAL_SA_QI[0]) {
            return mean * (a + u);
        }

        // Step 6:
        int i = 0; // Should be 1, be we iterate before it in while using 0.
        double u2 = rng.nextDouble();
        double umin = u2;

        // Step 7 and 8:
        do {
            ++i;
            u2 = rng.nextDouble();

            if (u2 < umin) {
                umin = u2;
            }

            // Step 8:
        } while (u > EXPONENTIAL_SA_QI[i]); // Ensured to exit since EXPONENTIAL_SA_QI[MAX] = 1.

        return mean * (a + umin * EXPONENTIAL_SA_QI[0]);
    }","  public void test0()  throws Throwable  {
      Random.setNextRandom(2147483646);
      MockRandom mockRandom0 = new MockRandom(2147483646);
      byte[] byteArray0 = new byte[20];
      mockRandom0.nextBytes(byteArray0);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextBytes(byteArray0);
      AhrensDieterExponentialSampler ahrensDieterExponentialSampler0 = new AhrensDieterExponentialSampler(jDKRandomWrapper0, 2147483646);
      double double0 = ahrensDieterExponentialSampler0.sample();
}"
889,"    public double sample() {
        // Step 1:
        double a = 0;
        // Avoid u=0 which creates an infinite loop
        double u = InternalUtils.makeNonZeroDouble(rng.nextLong());

        // Step 2 and 3:
        while (u < 0.5) {
            a += EXPONENTIAL_SA_QI[0];
            u *= 2;
        }

        // Step 4 (now u >= 0.5):
        u += u - 1;

        // Step 5:
        if (u <= EXPONENTIAL_SA_QI[0]) {
            return mean * (a + u);
        }

        // Step 6:
        int i = 0; // Should be 1, be we iterate before it in while using 0.
        double u2 = rng.nextDouble();
        double umin = u2;

        // Step 7 and 8:
        do {
            ++i;
            u2 = rng.nextDouble();

            if (u2 < umin) {
                umin = u2;
            }

            // Step 8:
        } while (u > EXPONENTIAL_SA_QI[i]); // Ensured to exit since EXPONENTIAL_SA_QI[MAX] = 1.

        return mean * (a + umin * EXPONENTIAL_SA_QI[0]);
    }","  public void test1()  throws Throwable  {
      Random.setNextRandom((-113025091));
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      AhrensDieterExponentialSampler ahrensDieterExponentialSampler0 = new AhrensDieterExponentialSampler(jDKRandomWrapper0, 42);
      double double0 = ahrensDieterExponentialSampler0.sample();
}"
890,"    public static SharedStateContinuousSampler of(UniformRandomProvider rng,
                                                  double mean) {
        return new AhrensDieterExponentialSampler(rng, mean);
    }","  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = AhrensDieterExponentialSampler.of(jDKRandomWrapper0, 1955.8410428);
}"
891,"    public String toString() {
        return ""Ahrens-Dieter Exponential deviate ["" + rng.toString() + ""]"";
    }","  public void test3()  throws Throwable  {
      AhrensDieterExponentialSampler ahrensDieterExponentialSampler0 = new AhrensDieterExponentialSampler((UniformRandomProvider) null, 1.1102230246251565E-16);
      // Undeclared exception!
      try { 
        ahrensDieterExponentialSampler0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
892,"    public double sample() {
        // Step 1:
        double a = 0;
        // Avoid u=0 which creates an infinite loop
        double u = InternalUtils.makeNonZeroDouble(rng.nextLong());

        // Step 2 and 3:
        while (u < 0.5) {
            a += EXPONENTIAL_SA_QI[0];
            u *= 2;
        }

        // Step 4 (now u >= 0.5):
        u += u - 1;

        // Step 5:
        if (u <= EXPONENTIAL_SA_QI[0]) {
            return mean * (a + u);
        }

        // Step 6:
        int i = 0; // Should be 1, be we iterate before it in while using 0.
        double u2 = rng.nextDouble();
        double umin = u2;

        // Step 7 and 8:
        do {
            ++i;
            u2 = rng.nextDouble();

            if (u2 < umin) {
                umin = u2;
            }

            // Step 8:
        } while (u > EXPONENTIAL_SA_QI[i]); // Ensured to exit since EXPONENTIAL_SA_QI[MAX] = 1.

        return mean * (a + umin * EXPONENTIAL_SA_QI[0]);
    }","  public void test4()  throws Throwable  {
      AhrensDieterExponentialSampler ahrensDieterExponentialSampler0 = new AhrensDieterExponentialSampler((UniformRandomProvider) null, 359.0);
      // Undeclared exception!
      try { 
        ahrensDieterExponentialSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.AhrensDieterExponentialSampler"", e);
      }
  }"
893,"    public AhrensDieterExponentialSampler(UniformRandomProvider rng,
                                          double mean) {
        super(null);
        if (mean <= 0) {
            throw new IllegalArgumentException(""mean is not strictly positive: "" + mean);
        }
        this.rng = rng;
        this.mean = mean;
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1812433253L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      AhrensDieterExponentialSampler ahrensDieterExponentialSampler0 = null;
      try {
        ahrensDieterExponentialSampler0 = new AhrensDieterExponentialSampler(jDKRandomWrapper0, 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // mean is not strictly positive: 0.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.AhrensDieterExponentialSampler"", e);
      }
  }"
894,"    public double sample() {
        // Step 1:
        double a = 0;
        // Avoid u=0 which creates an infinite loop
        double u = InternalUtils.makeNonZeroDouble(rng.nextLong());

        // Step 2 and 3:
        while (u < 0.5) {
            a += EXPONENTIAL_SA_QI[0];
            u *= 2;
        }

        // Step 4 (now u >= 0.5):
        u += u - 1;

        // Step 5:
        if (u <= EXPONENTIAL_SA_QI[0]) {
            return mean * (a + u);
        }

        // Step 6:
        int i = 0; // Should be 1, be we iterate before it in while using 0.
        double u2 = rng.nextDouble();
        double umin = u2;

        // Step 7 and 8:
        do {
            ++i;
            u2 = rng.nextDouble();

            if (u2 < umin) {
                umin = u2;
            }

            // Step 8:
        } while (u > EXPONENTIAL_SA_QI[i]); // Ensured to exit since EXPONENTIAL_SA_QI[MAX] = 1.

        return mean * (a + umin * EXPONENTIAL_SA_QI[0]);
    }","  public void test6()  throws Throwable  {
      Random.setNextRandom(2147483646);
      MockRandom mockRandom0 = new MockRandom(2147483646);
      byte[] byteArray0 = new byte[20];
      mockRandom0.nextBytes(byteArray0);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      AhrensDieterExponentialSampler ahrensDieterExponentialSampler0 = new AhrensDieterExponentialSampler(jDKRandomWrapper0, 2147483646);
      double double0 = ahrensDieterExponentialSampler0.sample();
}"
895,"    public double sample() {
        // Step 1:
        double a = 0;
        // Avoid u=0 which creates an infinite loop
        double u = InternalUtils.makeNonZeroDouble(rng.nextLong());

        // Step 2 and 3:
        while (u < 0.5) {
            a += EXPONENTIAL_SA_QI[0];
            u *= 2;
        }

        // Step 4 (now u >= 0.5):
        u += u - 1;

        // Step 5:
        if (u <= EXPONENTIAL_SA_QI[0]) {
            return mean * (a + u);
        }

        // Step 6:
        int i = 0; // Should be 1, be we iterate before it in while using 0.
        double u2 = rng.nextDouble();
        double umin = u2;

        // Step 7 and 8:
        do {
            ++i;
            u2 = rng.nextDouble();

            if (u2 < umin) {
                umin = u2;
            }

            // Step 8:
        } while (u > EXPONENTIAL_SA_QI[i]); // Ensured to exit since EXPONENTIAL_SA_QI[MAX] = 1.

        return mean * (a + umin * EXPONENTIAL_SA_QI[0]);
    }","  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      AhrensDieterExponentialSampler ahrensDieterExponentialSampler0 = new AhrensDieterExponentialSampler(jDKRandomWrapper0, 42);
      double double0 = ahrensDieterExponentialSampler0.sample();
}"
896,"    public String toString() {
        return ""Ahrens-Dieter Exponential deviate ["" + rng.toString() + ""]"";
    }","  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      AhrensDieterExponentialSampler ahrensDieterExponentialSampler0 = new AhrensDieterExponentialSampler(jDKRandomWrapper0, 42);
      String string0 = ahrensDieterExponentialSampler0.toString();
}"
897,"    public static SharedStateContinuousSampler of(UniformRandomProvider rng,
                                                  double mean) {
        return new AhrensDieterExponentialSampler(rng, mean);
    }","  public void test9()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        AhrensDieterExponentialSampler.of(jDKRandomWrapper0, (-113025091));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // mean is not strictly positive: -1.13025091E8
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.AhrensDieterExponentialSampler"", e);
      }
  }"
898,"    public SharedStateContinuousSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return new AhrensDieterExponentialSampler(rng, this);
    }","  public void test10()  throws Throwable  {
      AhrensDieterExponentialSampler ahrensDieterExponentialSampler0 = new AhrensDieterExponentialSampler((UniformRandomProvider) null, 1.1102230246251565E-16);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = ahrensDieterExponentialSampler0.withUniformRandomProvider((UniformRandomProvider) null);
}"
899,,"  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
}"
900,,"  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
901,"    public static SharedStateContinuousSampler of(UniformRandomProvider rng,
                                                  double lo,
                                                  double hi) {
        return new ContinuousUniformSampler(rng, lo, hi);
    }","  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = ContinuousUniformSampler.of((UniformRandomProvider) jDKRandomWrapper0, 1.0, 0.0, true);
}"
902,"    public static SharedStateContinuousSampler of(UniformRandomProvider rng,
                                                  double lo,
                                                  double hi) {
        return new ContinuousUniformSampler(rng, lo, hi);
    }","  public void test3()  throws Throwable  {
      SharedStateContinuousSampler sharedStateContinuousSampler0 = ContinuousUniformSampler.of((UniformRandomProvider) null, (-255.0), 1444.68006847362);
}"
903,,"  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
}"
904,,"  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
905,"    public static SharedStateContinuousSampler of(UniformRandomProvider rng,
                                                  double lo,
                                                  double hi) {
        return new ContinuousUniformSampler(rng, lo, hi);
    }","  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = ContinuousUniformSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.0, 0.0);
}"
906,"    public static SharedStateContinuousSampler of(UniformRandomProvider rng,
                                                  double lo,
                                                  double hi) {
        return new ContinuousUniformSampler(rng, lo, hi);
    }","  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = ContinuousUniformSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.0, 0.0);
      double double0 = ((ContinuousUniformSampler) sharedStateContinuousSampler0).sample();
}"
907,"    public ContinuousUniformSampler(UniformRandomProvider rng,
                                    double lo,
                                    double hi) {
        super(null);
        this.rng = rng;
        this.lo = lo;
        this.hi = hi;
    }","  public void test8()  throws Throwable  {
      ContinuousUniformSampler continuousUniformSampler0 = new ContinuousUniformSampler((UniformRandomProvider) null, 0.0, 0.0);
}"
908,"    double getLo() {
        return lo;
    }","  public void test9()  throws Throwable  {
      ContinuousUniformSampler continuousUniformSampler0 = new ContinuousUniformSampler((UniformRandomProvider) null, 0.0, 0.0);
      double double0 = continuousUniformSampler0.getLo();
}"
909,,"  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4294967296L);
}"
910,,"  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4294967296L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
911,"    public ContinuousUniformSampler(UniformRandomProvider rng,
                                    double lo,
                                    double hi) {
        super(null);
        this.rng = rng;
        this.lo = lo;
        this.hi = hi;
    }","  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4294967296L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousUniformSampler continuousUniformSampler0 = new ContinuousUniformSampler(jDKRandomWrapper0, 4294967296L, 0.0);
}"
912,"    double getLo() {
        return lo;
    }","  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4294967296L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousUniformSampler continuousUniformSampler0 = new ContinuousUniformSampler(jDKRandomWrapper0, 4294967296L, 0.0);
      double double0 = continuousUniformSampler0.getLo();
}"
913,,"  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-255L));
}"
914,,"  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-255L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
915,"    public ContinuousUniformSampler(UniformRandomProvider rng,
                                    double lo,
                                    double hi) {
        super(null);
        this.rng = rng;
        this.lo = lo;
        this.hi = hi;
    }","  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-255L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousUniformSampler continuousUniformSampler0 = new ContinuousUniformSampler(jDKRandomWrapper0, (-255L), (-255L));
}"
916,"    double getLo() {
        return lo;
    }","  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-255L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousUniformSampler continuousUniformSampler0 = new ContinuousUniformSampler(jDKRandomWrapper0, (-255L), (-255L));
      double double0 = continuousUniformSampler0.getLo();
}"
917,,"  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
}"
918,,"  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
919,"    public static SharedStateContinuousSampler of(UniformRandomProvider rng,
                                                  double lo,
                                                  double hi) {
        return new ContinuousUniformSampler(rng, lo, hi);
    }","  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousUniformSampler continuousUniformSampler0 = (ContinuousUniformSampler)ContinuousUniformSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.0, 0.0);
}"
920,"    double getHi() {
        return hi;
    }","  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousUniformSampler continuousUniformSampler0 = (ContinuousUniformSampler)ContinuousUniformSampler.of((UniformRandomProvider) jDKRandomWrapper0, 0.0, 0.0);
      double double0 = continuousUniformSampler0.getHi();
}"
921,,"  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
}"
922,,"  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
923,"    public ContinuousUniformSampler(UniformRandomProvider rng,
                                    double lo,
                                    double hi) {
        super(null);
        this.rng = rng;
        this.lo = lo;
        this.hi = hi;
    }","  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousUniformSampler continuousUniformSampler0 = new ContinuousUniformSampler(jDKRandomWrapper0, 1.0, 1.0);
}"
924,"    double getHi() {
        return hi;
    }","  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousUniformSampler continuousUniformSampler0 = new ContinuousUniformSampler(jDKRandomWrapper0, 1.0, 1.0);
      double double0 = continuousUniformSampler0.getHi();
}"
925,,"  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
}"
926,,"  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
}"
927,"    public ContinuousUniformSampler(UniformRandomProvider rng,
                                    double lo,
                                    double hi) {
        super(null);
        this.rng = rng;
        this.lo = lo;
        this.hi = hi;
    }","  public void test28()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousUniformSampler continuousUniformSampler0 = new ContinuousUniformSampler(jDKRandomWrapper0, 535.99298214164, (-2066.19));
}"
928,"    double getHi() {
        return hi;
    }","  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousUniformSampler continuousUniformSampler0 = new ContinuousUniformSampler(jDKRandomWrapper0, 535.99298214164, (-2066.19));
      double double0 = continuousUniformSampler0.getHi();
}"
929,"    public static SharedStateContinuousSampler of(UniformRandomProvider rng,
                                                  double lo,
                                                  double hi) {
        return new ContinuousUniformSampler(rng, lo, hi);
    }","  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = ContinuousUniformSampler.of((UniformRandomProvider) jDKRandomWrapper0, (double) (byte) (-20), (double) (byte)50, true);
      double double0 = ((ContinuousUniformSampler) sharedStateContinuousSampler0).sample();
}"
930,"    public double sample() {
        final double u = rng.nextDouble();
        return u * hi + (1 - u) * lo;
    }","  public void test31()  throws Throwable  {
      ContinuousUniformSampler continuousUniformSampler0 = new ContinuousUniformSampler((UniformRandomProvider) null, 0.0, 0.0);
      // Undeclared exception!
      try { 
        continuousUniformSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.ContinuousUniformSampler"", e);
      }
  }"
931,"    public static SharedStateContinuousSampler of(UniformRandomProvider rng,
                                                  double lo,
                                                  double hi) {
        return new ContinuousUniformSampler(rng, lo, hi);
    }","  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        ContinuousUniformSampler.of((UniformRandomProvider) jDKRandomWrapper0, 49.1, 49.1, true);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid open interval (49.1,49.1)
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.ContinuousUniformSampler"", e);
      }
  }"
932,"    public String toString() {
        return ""Uniform deviate ["" + rng.toString() + ""]"";
    }","  public void test33()  throws Throwable  {
      ContinuousUniformSampler continuousUniformSampler0 = (ContinuousUniformSampler)ContinuousUniformSampler.of((UniformRandomProvider) null, 0.0, 3129.5, false);
      // Undeclared exception!
      try { 
        continuousUniformSampler0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
933,"    public SharedStateContinuousSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return new ContinuousUniformSampler(rng, lo, hi);
    }","  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousUniformSampler continuousUniformSampler0 = (ContinuousUniformSampler)ContinuousUniformSampler.of((UniformRandomProvider) jDKRandomWrapper0, (double) (byte)50, (double) (byte)49, true);
      ContinuousUniformSampler continuousUniformSampler1 = (ContinuousUniformSampler)continuousUniformSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
934,"    public static SharedStateContinuousSampler of(UniformRandomProvider rng,
                                                  double lo,
                                                  double hi) {
        return new ContinuousUniformSampler(rng, lo, hi);
    }","  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      SharedStateContinuousSampler sharedStateContinuousSampler0 = ContinuousUniformSampler.of((UniformRandomProvider) jDKRandomWrapper0, (double) (byte)21, (double) (byte) (-128), true);
      double double0 = ((ContinuousUniformSampler) sharedStateContinuousSampler0).sample();
}"
935,"    public SharedStateContinuousSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return new ContinuousUniformSampler(rng, lo, hi);
    }","  public void test36()  throws Throwable  {
      ContinuousUniformSampler continuousUniformSampler0 = (ContinuousUniformSampler)ContinuousUniformSampler.of((UniformRandomProvider) null, (-1.0), (-1.0));
      ContinuousUniformSampler continuousUniformSampler1 = (ContinuousUniformSampler)continuousUniformSampler0.withUniformRandomProvider((UniformRandomProvider) null);
}"
936,"    public String toString() {
        return ""Uniform deviate ["" + rng.toString() + ""]"";
    }","  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      ContinuousUniformSampler continuousUniformSampler0 = (ContinuousUniformSampler)ContinuousUniformSampler.of((UniformRandomProvider) jDKRandomWrapper0, (double) (byte)21, (double) (byte) (-128), true);
      String string0 = continuousUniformSampler0.toString();
}"
937,"    public static LevySampler of(UniformRandomProvider rng,
                                 double location,
                                 double scale) {
        if (scale <= 0) {
            throw new IllegalArgumentException(""scale is not strictly positive: "" + scale);
        }
        return new LevySampler(rng, location, scale);
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2028L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        LevySampler.of(jDKRandomWrapper0, 0L, 0L);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // scale is not strictly positive: 0.0
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.LevySampler"", e);
      }
  }"
938,"    public double sample() {
        final double n = gaussian.sample();
        return scale / (n * n) + location;
    }","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-4395757214229401600L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      byte[] byteArray0 = new byte[3];
      jDKRandomWrapper0.nextBytes(byteArray0);
      LevySampler levySampler0 = LevySampler.of(jDKRandomWrapper0, (-4395757214229401600L), 4.820892075688811E-20);
      double double0 = levySampler0.sample();
}"
939,"    public String toString() {
        return ""Lévy deviate ["" + rng.toString() + ""]"";
    }","  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LevySampler levySampler0 = LevySampler.of(jDKRandomWrapper0, 0L, 2276.916368933711);
      LevySampler levySampler1 = levySampler0.withUniformRandomProvider((UniformRandomProvider) null);
      // Undeclared exception!
      try { 
        levySampler1.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
940,"    public double sample() {
        final double n = gaussian.sample();
        return scale / (n * n) + location;
    }","  public void test3()  throws Throwable  {
      LevySampler levySampler0 = LevySampler.of((UniformRandomProvider) null, 1.0, 3071.96154772086);
      // Undeclared exception!
      try { 
        levySampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.ZigguratSampler"", e);
      }
  }"
941,"    public static LevySampler of(UniformRandomProvider rng,
                                 double location,
                                 double scale) {
        if (scale <= 0) {
            throw new IllegalArgumentException(""scale is not strictly positive: "" + scale);
        }
        return new LevySampler(rng, location, scale);
    }","  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        LevySampler.of(jDKRandomWrapper0, Double.POSITIVE_INFINITY, (-12.627922851118589));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // scale is not strictly positive: -12.627922851118589
         //
         verifyException(""org.apache.commons.rng.sampling.distribution.LevySampler"", e);
      }
  }"
942,"    public double sample() {
        final double n = gaussian.sample();
        return scale / (n * n) + location;
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LevySampler levySampler0 = LevySampler.of(jDKRandomWrapper0, (-12.627922851118589), 994.1962297571228);
      double double0 = levySampler0.sample();
}"
943,"    public String toString() {
        return ""Lévy deviate ["" + rng.toString() + ""]"";
    }","  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      LevySampler levySampler0 = LevySampler.of(jDKRandomWrapper0, (-12.627922851118589), 994.1962297571228);
      String string0 = levySampler0.toString();
}"
944,"    public static LineSampler of(UniformRandomProvider rng,
                                 double[] a,
                                 double[] b) {
        final int dimension = a.length;
        if (dimension != b.length) {
            throw new IllegalArgumentException(
                new StringBuilder(""Mismatch of vertex dimensions: "").append(dimension).append(',')
                                                                    .append(b.length).toString());
        }
        // Detect non-finite vertices
        Coordinates.requireFinite(a, ""Vertex a"");
        Coordinates.requireFinite(b, ""Vertex b"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new LineSampler2D(rng, a, b);
        } else if (dimension == THREE_D) {
            return new LineSampler3D(rng, a, b);
        } else if (dimension > THREE_D) {
            return new LineSamplerND(rng, a, b);
        } else if (dimension == ONE_D) {
            // Unlikely case of 1D is placed last.
            // Use o.a.c.rng.sampling.distribution.ContinuousUniformSampler for non-array samples.
            return new LineSampler1D(rng, a, b);
        }
        // Less than 1D
        throw new IllegalArgumentException(""Unsupported dimension: "" + dimension);
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2095L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[4];
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double[] doubleArray1 = lineSampler0.sample();
      LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray1);
}"
945,"    public static LineSampler of(UniformRandomProvider rng,
                                 double[] a,
                                 double[] b) {
        final int dimension = a.length;
        if (dimension != b.length) {
            throw new IllegalArgumentException(
                new StringBuilder(""Mismatch of vertex dimensions: "").append(dimension).append(',')
                                                                    .append(b.length).toString());
        }
        // Detect non-finite vertices
        Coordinates.requireFinite(a, ""Vertex a"");
        Coordinates.requireFinite(b, ""Vertex b"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new LineSampler2D(rng, a, b);
        } else if (dimension == THREE_D) {
            return new LineSampler3D(rng, a, b);
        } else if (dimension > THREE_D) {
            return new LineSamplerND(rng, a, b);
        } else if (dimension == ONE_D) {
            // Unlikely case of 1D is placed last.
            // Use o.a.c.rng.sampling.distribution.ContinuousUniformSampler for non-array samples.
            return new LineSampler1D(rng, a, b);
        }
        // Less than 1D
        throw new IllegalArgumentException(""Unsupported dimension: "" + dimension);
    }","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(587L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double[] doubleArray1 = lineSampler0.sample();
      LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray1);
}"
946,"    public static LineSampler of(UniformRandomProvider rng,
                                 double[] a,
                                 double[] b) {
        final int dimension = a.length;
        if (dimension != b.length) {
            throw new IllegalArgumentException(
                new StringBuilder(""Mismatch of vertex dimensions: "").append(dimension).append(',')
                                                                    .append(b.length).toString());
        }
        // Detect non-finite vertices
        Coordinates.requireFinite(a, ""Vertex a"");
        Coordinates.requireFinite(b, ""Vertex b"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new LineSampler2D(rng, a, b);
        } else if (dimension == THREE_D) {
            return new LineSampler3D(rng, a, b);
        } else if (dimension > THREE_D) {
            return new LineSamplerND(rng, a, b);
        } else if (dimension == ONE_D) {
            // Unlikely case of 1D is placed last.
            // Use o.a.c.rng.sampling.distribution.ContinuousUniformSampler for non-array samples.
            return new LineSampler1D(rng, a, b);
        }
        // Less than 1D
        throw new IllegalArgumentException(""Unsupported dimension: "" + dimension);
    }","  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[9];
      // Undeclared exception!
      try { 
        LineSampler.of(jDKRandomWrapper0, doubleArray1, doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Mismatch of vertex dimensions: 9,7
         //
         verifyException(""org.apache.commons.rng.sampling.shape.LineSampler"", e);
      }
  }"
947,"    public double[] sample() {
        final double u = rng.nextDouble();
        return createSample(1.0 - u, u);
    }","  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4294967295L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 4294967295L;
      mockRandom0.nextInt();
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double[] doubleArray1 = lineSampler0.sample();
}"
948,"    public double[] sample() {
        final double u = rng.nextDouble();
        return createSample(1.0 - u, u);
    }","  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 1253.17;
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      mockRandom0.nextLong();
      double[] doubleArray1 = lineSampler0.sample();
}"
949,"    public double[] sample() {
        final double u = rng.nextDouble();
        return createSample(1.0 - u, u);
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1.0;
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      mockRandom0.nextLong();
      double[] doubleArray1 = lineSampler0.sample();
}"
950,"    public double[] sample() {
        final double u = rng.nextDouble();
        return createSample(1.0 - u, u);
    }","  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      jDKRandomWrapper0.nextInt();
      doubleArray0[0] = (-2395.11568160212);
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double[] doubleArray1 = lineSampler0.sample();
}"
951,"    public double[] sample() {
        final double u = rng.nextDouble();
        return createSample(1.0 - u, u);
    }","  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1521L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (-1521L);
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      lineSampler0.sample();
      double[] doubleArray1 = lineSampler0.sample();
}"
952,"    public double[] sample() {
        final double u = rng.nextDouble();
        return createSample(1.0 - u, u);
    }","  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1521L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1521L);
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      lineSampler0.sample();
      double[] doubleArray1 = lineSampler0.sample();
}"
953,"    public double[] sample() {
        final double u = rng.nextDouble();
        return createSample(1.0 - u, u);
    }","  public void test9()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 979.81817416795;
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      lineSampler0.sample();
      double[] doubleArray1 = lineSampler0.sample();
}"
954,"    public double[] sample() {
        final double u = rng.nextDouble();
        return createSample(1.0 - u, u);
    }","  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      LineSampler lineSampler0 = LineSampler.of((UniformRandomProvider) null, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        lineSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.shape.LineSampler"", e);
      }
  }"
955,"    public static LineSampler of(UniformRandomProvider rng,
                                 double[] a,
                                 double[] b) {
        final int dimension = a.length;
        if (dimension != b.length) {
            throw new IllegalArgumentException(
                new StringBuilder(""Mismatch of vertex dimensions: "").append(dimension).append(',')
                                                                    .append(b.length).toString());
        }
        // Detect non-finite vertices
        Coordinates.requireFinite(a, ""Vertex a"");
        Coordinates.requireFinite(b, ""Vertex b"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new LineSampler2D(rng, a, b);
        } else if (dimension == THREE_D) {
            return new LineSampler3D(rng, a, b);
        } else if (dimension > THREE_D) {
            return new LineSamplerND(rng, a, b);
        } else if (dimension == ONE_D) {
            // Unlikely case of 1D is placed last.
            // Use o.a.c.rng.sampling.distribution.ContinuousUniformSampler for non-array samples.
            return new LineSampler1D(rng, a, b);
        }
        // Less than 1D
        throw new IllegalArgumentException(""Unsupported dimension: "" + dimension);
    }","  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        LineSampler.of(jDKRandomWrapper0, (double[]) null, doubleArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.shape.LineSampler"", e);
      }
  }"
956,"    public static LineSampler of(UniformRandomProvider rng,
                                 double[] a,
                                 double[] b) {
        final int dimension = a.length;
        if (dimension != b.length) {
            throw new IllegalArgumentException(
                new StringBuilder(""Mismatch of vertex dimensions: "").append(dimension).append(',')
                                                                    .append(b.length).toString());
        }
        // Detect non-finite vertices
        Coordinates.requireFinite(a, ""Vertex a"");
        Coordinates.requireFinite(b, ""Vertex b"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new LineSampler2D(rng, a, b);
        } else if (dimension == THREE_D) {
            return new LineSampler3D(rng, a, b);
        } else if (dimension > THREE_D) {
            return new LineSamplerND(rng, a, b);
        } else if (dimension == ONE_D) {
            // Unlikely case of 1D is placed last.
            // Use o.a.c.rng.sampling.distribution.ContinuousUniformSampler for non-array samples.
            return new LineSampler1D(rng, a, b);
        }
        // Less than 1D
        throw new IllegalArgumentException(""Unsupported dimension: "" + dimension);
    }","  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        LineSampler.of((UniformRandomProvider) null, doubleArray0, doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Unsupported dimension: 0
         //
         verifyException(""org.apache.commons.rng.sampling.shape.LineSampler"", e);
      }
  }"
957,"    public static LineSampler of(UniformRandomProvider rng,
                                 double[] a,
                                 double[] b) {
        final int dimension = a.length;
        if (dimension != b.length) {
            throw new IllegalArgumentException(
                new StringBuilder(""Mismatch of vertex dimensions: "").append(dimension).append(',')
                                                                    .append(b.length).toString());
        }
        // Detect non-finite vertices
        Coordinates.requireFinite(a, ""Vertex a"");
        Coordinates.requireFinite(b, ""Vertex b"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new LineSampler2D(rng, a, b);
        } else if (dimension == THREE_D) {
            return new LineSampler3D(rng, a, b);
        } else if (dimension > THREE_D) {
            return new LineSamplerND(rng, a, b);
        } else if (dimension == ONE_D) {
            // Unlikely case of 1D is placed last.
            // Use o.a.c.rng.sampling.distribution.ContinuousUniformSampler for non-array samples.
            return new LineSampler1D(rng, a, b);
        }
        // Less than 1D
        throw new IllegalArgumentException(""Unsupported dimension: "" + dimension);
    }","  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[10];
      double[] doubleArray2 = lineSampler0.sample();
      // Undeclared exception!
      try { 
        LineSampler.of(jDKRandomWrapper0, doubleArray2, doubleArray1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Mismatch of vertex dimensions: 3,10
         //
         verifyException(""org.apache.commons.rng.sampling.shape.LineSampler"", e);
      }
  }"
958,"    public abstract LineSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Create a line sampler with vertices {@code a}","  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[1];
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      LineSampler lineSampler1 = lineSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
959,"    public static LineSampler of(UniformRandomProvider rng,
                                 double[] a,
                                 double[] b) {
        final int dimension = a.length;
        if (dimension != b.length) {
            throw new IllegalArgumentException(
                new StringBuilder(""Mismatch of vertex dimensions: "").append(dimension).append(',')
                                                                    .append(b.length).toString());
        }
        // Detect non-finite vertices
        Coordinates.requireFinite(a, ""Vertex a"");
        Coordinates.requireFinite(b, ""Vertex b"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new LineSampler2D(rng, a, b);
        } else if (dimension == THREE_D) {
            return new LineSampler3D(rng, a, b);
        } else if (dimension > THREE_D) {
            return new LineSamplerND(rng, a, b);
        } else if (dimension == ONE_D) {
            // Unlikely case of 1D is placed last.
            // Use o.a.c.rng.sampling.distribution.ContinuousUniformSampler for non-array samples.
            return new LineSampler1D(rng, a, b);
        }
        // Less than 1D
        throw new IllegalArgumentException(""Unsupported dimension: "" + dimension);
    }","  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[1];
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double[] doubleArray1 = lineSampler0.sample();
      LineSampler.of(jDKRandomWrapper0, doubleArray1, doubleArray0);
}"
960,"    public abstract LineSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Create a line sampler with vertices {@code a}","  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      LineSampler lineSampler1 = lineSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
961,"    public abstract LineSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Create a line sampler with vertices {@code a}","  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      LineSampler lineSampler1 = lineSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
962,"    public static LineSampler of(UniformRandomProvider rng,
                                 double[] a,
                                 double[] b) {
        final int dimension = a.length;
        if (dimension != b.length) {
            throw new IllegalArgumentException(
                new StringBuilder(""Mismatch of vertex dimensions: "").append(dimension).append(',')
                                                                    .append(b.length).toString());
        }
        // Detect non-finite vertices
        Coordinates.requireFinite(a, ""Vertex a"");
        Coordinates.requireFinite(b, ""Vertex b"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new LineSampler2D(rng, a, b);
        } else if (dimension == THREE_D) {
            return new LineSampler3D(rng, a, b);
        } else if (dimension > THREE_D) {
            return new LineSamplerND(rng, a, b);
        } else if (dimension == ONE_D) {
            // Unlikely case of 1D is placed last.
            // Use o.a.c.rng.sampling.distribution.ContinuousUniformSampler for non-array samples.
            return new LineSampler1D(rng, a, b);
        }
        // Less than 1D
        throw new IllegalArgumentException(""Unsupported dimension: "" + dimension);
    }","  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double[] doubleArray1 = lineSampler0.sample();
      LineSampler.of(jDKRandomWrapper0, doubleArray1, doubleArray0);
}"
963,"    public abstract LineSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Create a line sampler with vertices {@code a}","  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[7];
      LineSampler lineSampler0 = LineSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      LineSampler lineSampler1 = lineSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
964,"    public static TriangleSampler of(UniformRandomProvider rng,
                                     double[] a,
                                     double[] b,
                                     double[] c) {
        final int dimension = a.length;
        if (dimension != b.length || dimension != c.length) {
            throw new IllegalArgumentException(
                    new StringBuilder(""Mismatch of vertex dimensions: "").append(dimension).append(',')
                                                                        .append(b.length).append(',')
                                                                        .append(c.length).toString());
        }
        // Detect non-finite vertices
        Coordinates.requireFinite(a, ""Vertex a"");
        Coordinates.requireFinite(b, ""Vertex b"");
        Coordinates.requireFinite(c, ""Vertex c"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new TriangleSampler2D(rng, a, b, c);
        } else if (dimension == THREE_D) {
            return new TriangleSampler3D(rng, a, b, c);
        } else if (dimension > THREE_D) {
            return new TriangleSamplerND(rng, a, b, c);
        }
        // Less than 2D
        throw new IllegalArgumentException(
                ""Unsupported dimension: "" + dimension);
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3254L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[5];
      TriangleSampler triangleSampler0 = TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = triangleSampler0.sample();
      TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray1, doubleArray1);
}"
965,"    public static TriangleSampler of(UniformRandomProvider rng,
                                     double[] a,
                                     double[] b,
                                     double[] c) {
        final int dimension = a.length;
        if (dimension != b.length || dimension != c.length) {
            throw new IllegalArgumentException(
                    new StringBuilder(""Mismatch of vertex dimensions: "").append(dimension).append(',')
                                                                        .append(b.length).append(',')
                                                                        .append(c.length).toString());
        }
        // Detect non-finite vertices
        Coordinates.requireFinite(a, ""Vertex a"");
        Coordinates.requireFinite(b, ""Vertex b"");
        Coordinates.requireFinite(c, ""Vertex c"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new TriangleSampler2D(rng, a, b, c);
        } else if (dimension == THREE_D) {
            return new TriangleSampler3D(rng, a, b, c);
        } else if (dimension > THREE_D) {
            return new TriangleSamplerND(rng, a, b, c);
        }
        // Less than 2D
        throw new IllegalArgumentException(
                ""Unsupported dimension: "" + dimension);
    }","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3254L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[5];
      TriangleSampler triangleSampler0 = TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = triangleSampler0.sample();
      TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray1, doubleArray0);
}"
966,"    public static TriangleSampler of(UniformRandomProvider rng,
                                     double[] a,
                                     double[] b,
                                     double[] c) {
        final int dimension = a.length;
        if (dimension != b.length || dimension != c.length) {
            throw new IllegalArgumentException(
                    new StringBuilder(""Mismatch of vertex dimensions: "").append(dimension).append(',')
                                                                        .append(b.length).append(',')
                                                                        .append(c.length).toString());
        }
        // Detect non-finite vertices
        Coordinates.requireFinite(a, ""Vertex a"");
        Coordinates.requireFinite(b, ""Vertex b"");
        Coordinates.requireFinite(c, ""Vertex c"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new TriangleSampler2D(rng, a, b, c);
        } else if (dimension == THREE_D) {
            return new TriangleSampler3D(rng, a, b, c);
        } else if (dimension > THREE_D) {
            return new TriangleSamplerND(rng, a, b, c);
        }
        // Less than 2D
        throw new IllegalArgumentException(
                ""Unsupported dimension: "" + dimension);
    }","  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      TriangleSampler triangleSampler0 = TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = triangleSampler0.sample();
      TriangleSampler.of(jDKRandomWrapper0, doubleArray1, doubleArray1, doubleArray0);
}"
967,"    public static TriangleSampler of(UniformRandomProvider rng,
                                     double[] a,
                                     double[] b,
                                     double[] c) {
        final int dimension = a.length;
        if (dimension != b.length || dimension != c.length) {
            throw new IllegalArgumentException(
                    new StringBuilder(""Mismatch of vertex dimensions: "").append(dimension).append(',')
                                                                        .append(b.length).append(',')
                                                                        .append(c.length).toString());
        }
        // Detect non-finite vertices
        Coordinates.requireFinite(a, ""Vertex a"");
        Coordinates.requireFinite(b, ""Vertex b"");
        Coordinates.requireFinite(c, ""Vertex c"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new TriangleSampler2D(rng, a, b, c);
        } else if (dimension == THREE_D) {
            return new TriangleSampler3D(rng, a, b, c);
        } else if (dimension > THREE_D) {
            return new TriangleSamplerND(rng, a, b, c);
        }
        // Less than 2D
        throw new IllegalArgumentException(
                ""Unsupported dimension: "" + dimension);
    }","  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      TriangleSampler triangleSampler0 = TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = triangleSampler0.sample();
      TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray1, doubleArray0);
}"
968,"    public static TriangleSampler of(UniformRandomProvider rng,
                                     double[] a,
                                     double[] b,
                                     double[] c) {
        final int dimension = a.length;
        if (dimension != b.length || dimension != c.length) {
            throw new IllegalArgumentException(
                    new StringBuilder(""Mismatch of vertex dimensions: "").append(dimension).append(',')
                                                                        .append(b.length).append(',')
                                                                        .append(c.length).toString());
        }
        // Detect non-finite vertices
        Coordinates.requireFinite(a, ""Vertex a"");
        Coordinates.requireFinite(b, ""Vertex b"");
        Coordinates.requireFinite(c, ""Vertex c"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new TriangleSampler2D(rng, a, b, c);
        } else if (dimension == THREE_D) {
            return new TriangleSampler3D(rng, a, b, c);
        } else if (dimension > THREE_D) {
            return new TriangleSamplerND(rng, a, b, c);
        }
        // Less than 2D
        throw new IllegalArgumentException(
                ""Unsupported dimension: "" + dimension);
    }","  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-635L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[3];
      TriangleSampler triangleSampler0 = TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray1);
}"
969,"    public static TriangleSampler of(UniformRandomProvider rng,
                                     double[] a,
                                     double[] b,
                                     double[] c) {
        final int dimension = a.length;
        if (dimension != b.length || dimension != c.length) {
            throw new IllegalArgumentException(
                    new StringBuilder(""Mismatch of vertex dimensions: "").append(dimension).append(',')
                                                                        .append(b.length).append(',')
                                                                        .append(c.length).toString());
        }
        // Detect non-finite vertices
        Coordinates.requireFinite(a, ""Vertex a"");
        Coordinates.requireFinite(b, ""Vertex b"");
        Coordinates.requireFinite(c, ""Vertex c"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new TriangleSampler2D(rng, a, b, c);
        } else if (dimension == THREE_D) {
            return new TriangleSampler3D(rng, a, b, c);
        } else if (dimension > THREE_D) {
            return new TriangleSamplerND(rng, a, b, c);
        }
        // Less than 2D
        throw new IllegalArgumentException(
                ""Unsupported dimension: "" + dimension);
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[3];
      TriangleSampler triangleSampler0 = TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray1, doubleArray0);
}"
970,"    public static TriangleSampler of(UniformRandomProvider rng,
                                     double[] a,
                                     double[] b,
                                     double[] c) {
        final int dimension = a.length;
        if (dimension != b.length || dimension != c.length) {
            throw new IllegalArgumentException(
                    new StringBuilder(""Mismatch of vertex dimensions: "").append(dimension).append(',')
                                                                        .append(b.length).append(',')
                                                                        .append(c.length).toString());
        }
        // Detect non-finite vertices
        Coordinates.requireFinite(a, ""Vertex a"");
        Coordinates.requireFinite(b, ""Vertex b"");
        Coordinates.requireFinite(c, ""Vertex c"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new TriangleSampler2D(rng, a, b, c);
        } else if (dimension == THREE_D) {
            return new TriangleSampler3D(rng, a, b, c);
        } else if (dimension > THREE_D) {
            return new TriangleSamplerND(rng, a, b, c);
        }
        // Less than 2D
        throw new IllegalArgumentException(
                ""Unsupported dimension: "" + dimension);
    }","  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[4];
      // Undeclared exception!
      try { 
        TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Mismatch of vertex dimensions: 2,2,4
         //
         verifyException(""org.apache.commons.rng.sampling.shape.TriangleSampler"", e);
      }
  }"
971,"    public static TriangleSampler of(UniformRandomProvider rng,
                                     double[] a,
                                     double[] b,
                                     double[] c) {
        final int dimension = a.length;
        if (dimension != b.length || dimension != c.length) {
            throw new IllegalArgumentException(
                    new StringBuilder(""Mismatch of vertex dimensions: "").append(dimension).append(',')
                                                                        .append(b.length).append(',')
                                                                        .append(c.length).toString());
        }
        // Detect non-finite vertices
        Coordinates.requireFinite(a, ""Vertex a"");
        Coordinates.requireFinite(b, ""Vertex b"");
        Coordinates.requireFinite(c, ""Vertex c"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new TriangleSampler2D(rng, a, b, c);
        } else if (dimension == THREE_D) {
            return new TriangleSampler3D(rng, a, b, c);
        } else if (dimension > THREE_D) {
            return new TriangleSamplerND(rng, a, b, c);
        }
        // Less than 2D
        throw new IllegalArgumentException(
                ""Unsupported dimension: "" + dimension);
    }","  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray1, doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Mismatch of vertex dimensions: 4,0,4
         //
         verifyException(""org.apache.commons.rng.sampling.shape.TriangleSampler"", e);
      }
  }"
972,"    public double[] sample() {
        final double s = rng.nextDouble();
        final double t = rng.nextDouble();
        final double spt = s + t;
        if (spt > 1) {
            // Transform: s1 = 1 - s; t1 = 1 - t.
            // Compute: 1 - s1 - t1
            // Do not assume (1 - (1-s) - (1-t)) is (s + t - 1), i.e. (spt - 1.0),
            // to avoid loss of a random bit due to rounding when s + t > 1.
            // An exact sum is (s - 1 + t).
            return createSample(s - 1.0 + t, 1.0 - s, 1.0 - t);
        }
        // Here s + t is exact so can be subtracted to make 1 - s - t
        return createSample(1.0 - spt, s, t);
    }","  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      TriangleSampler triangleSampler0 = TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0);
      triangleSampler0.sample();
      triangleSampler0.sample();
      triangleSampler0.sample();
      double[] doubleArray1 = triangleSampler0.sample();
}"
973,"    public double[] sample() {
        final double s = rng.nextDouble();
        final double t = rng.nextDouble();
        final double spt = s + t;
        if (spt > 1) {
            // Transform: s1 = 1 - s; t1 = 1 - t.
            // Compute: 1 - s1 - t1
            // Do not assume (1 - (1-s) - (1-t)) is (s + t - 1), i.e. (spt - 1.0),
            // to avoid loss of a random bit due to rounding when s + t > 1.
            // An exact sum is (s - 1 + t).
            return createSample(s - 1.0 + t, 1.0 - s, 1.0 - t);
        }
        // Here s + t is exact so can be subtracted to make 1 - s - t
        return createSample(1.0 - spt, s, t);
    }","  public void test9()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = 1.0;
      TriangleSampler triangleSampler0 = TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = triangleSampler0.sample();
}"
974,"    public double[] sample() {
        final double s = rng.nextDouble();
        final double t = rng.nextDouble();
        final double spt = s + t;
        if (spt > 1) {
            // Transform: s1 = 1 - s; t1 = 1 - t.
            // Compute: 1 - s1 - t1
            // Do not assume (1 - (1-s) - (1-t)) is (s + t - 1), i.e. (spt - 1.0),
            // to avoid loss of a random bit due to rounding when s + t > 1.
            // An exact sum is (s - 1 + t).
            return createSample(s - 1.0 + t, 1.0 - s, 1.0 - t);
        }
        // Here s + t is exact so can be subtracted to make 1 - s - t
        return createSample(1.0 - spt, s, t);
    }","  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = 1.0;
      TriangleSampler triangleSampler0 = TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = triangleSampler0.sample();
      double[] doubleArray2 = triangleSampler0.sample();
}"
975,"    public double[] sample() {
        final double s = rng.nextDouble();
        final double t = rng.nextDouble();
        final double spt = s + t;
        if (spt > 1) {
            // Transform: s1 = 1 - s; t1 = 1 - t.
            // Compute: 1 - s1 - t1
            // Do not assume (1 - (1-s) - (1-t)) is (s + t - 1), i.e. (spt - 1.0),
            // to avoid loss of a random bit due to rounding when s + t > 1.
            // An exact sum is (s - 1 + t).
            return createSample(s - 1.0 + t, 1.0 - s, 1.0 - t);
        }
        // Here s + t is exact so can be subtracted to make 1 - s - t
        return createSample(1.0 - spt, s, t);
    }","  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-635L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) (-635L);
      TriangleSampler triangleSampler0 = TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = triangleSampler0.sample();
}"
976,"    public double[] sample() {
        final double s = rng.nextDouble();
        final double t = rng.nextDouble();
        final double spt = s + t;
        if (spt > 1) {
            // Transform: s1 = 1 - s; t1 = 1 - t.
            // Compute: 1 - s1 - t1
            // Do not assume (1 - (1-s) - (1-t)) is (s + t - 1), i.e. (spt - 1.0),
            // to avoid loss of a random bit due to rounding when s + t > 1.
            // An exact sum is (s - 1 + t).
            return createSample(s - 1.0 + t, 1.0 - s, 1.0 - t);
        }
        // Here s + t is exact so can be subtracted to make 1 - s - t
        return createSample(1.0 - spt, s, t);
    }","  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-635L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) (-635L);
      TriangleSampler triangleSampler0 = TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = triangleSampler0.sample();
      double[] doubleArray2 = triangleSampler0.sample();
}"
977,"    public double[] sample() {
        final double s = rng.nextDouble();
        final double t = rng.nextDouble();
        final double spt = s + t;
        if (spt > 1) {
            // Transform: s1 = 1 - s; t1 = 1 - t.
            // Compute: 1 - s1 - t1
            // Do not assume (1 - (1-s) - (1-t)) is (s + t - 1), i.e. (spt - 1.0),
            // to avoid loss of a random bit due to rounding when s + t > 1.
            // An exact sum is (s - 1 + t).
            return createSample(s - 1.0 + t, 1.0 - s, 1.0 - t);
        }
        // Here s + t is exact so can be subtracted to make 1 - s - t
        return createSample(1.0 - spt, s, t);
    }","  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-635L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (-635L);
      TriangleSampler triangleSampler0 = TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0);
      triangleSampler0.sample();
      double[] doubleArray1 = triangleSampler0.sample();
}"
978,"    public double[] sample() {
        final double s = rng.nextDouble();
        final double t = rng.nextDouble();
        final double spt = s + t;
        if (spt > 1) {
            // Transform: s1 = 1 - s; t1 = 1 - t.
            // Compute: 1 - s1 - t1
            // Do not assume (1 - (1-s) - (1-t)) is (s + t - 1), i.e. (spt - 1.0),
            // to avoid loss of a random bit due to rounding when s + t > 1.
            // An exact sum is (s - 1 + t).
            return createSample(s - 1.0 + t, 1.0 - s, 1.0 - t);
        }
        // Here s + t is exact so can be subtracted to make 1 - s - t
        return createSample(1.0 - spt, s, t);
    }","  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-635L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-635L);
      TriangleSampler triangleSampler0 = TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = triangleSampler0.sample();
}"
979,"    public double[] sample() {
        final double s = rng.nextDouble();
        final double t = rng.nextDouble();
        final double spt = s + t;
        if (spt > 1) {
            // Transform: s1 = 1 - s; t1 = 1 - t.
            // Compute: 1 - s1 - t1
            // Do not assume (1 - (1-s) - (1-t)) is (s + t - 1), i.e. (spt - 1.0),
            // to avoid loss of a random bit due to rounding when s + t > 1.
            // An exact sum is (s - 1 + t).
            return createSample(s - 1.0 + t, 1.0 - s, 1.0 - t);
        }
        // Here s + t is exact so can be subtracted to make 1 - s - t
        return createSample(1.0 - spt, s, t);
    }","  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-635L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-635L);
      TriangleSampler triangleSampler0 = TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = triangleSampler0.sample();
      double[] doubleArray2 = triangleSampler0.sample();
}"
980,"    public double[] sample() {
        final double s = rng.nextDouble();
        final double t = rng.nextDouble();
        final double spt = s + t;
        if (spt > 1) {
            // Transform: s1 = 1 - s; t1 = 1 - t.
            // Compute: 1 - s1 - t1
            // Do not assume (1 - (1-s) - (1-t)) is (s + t - 1), i.e. (spt - 1.0),
            // to avoid loss of a random bit due to rounding when s + t > 1.
            // An exact sum is (s - 1 + t).
            return createSample(s - 1.0 + t, 1.0 - s, 1.0 - t);
        }
        // Here s + t is exact so can be subtracted to make 1 - s - t
        return createSample(1.0 - spt, s, t);
    }","  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3393L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      mockRandom0.nextDouble();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1282.358744;
      TriangleSampler triangleSampler0 = TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = triangleSampler0.sample();
}"
981,"    public double[] sample() {
        final double s = rng.nextDouble();
        final double t = rng.nextDouble();
        final double spt = s + t;
        if (spt > 1) {
            // Transform: s1 = 1 - s; t1 = 1 - t.
            // Compute: 1 - s1 - t1
            // Do not assume (1 - (1-s) - (1-t)) is (s + t - 1), i.e. (spt - 1.0),
            // to avoid loss of a random bit due to rounding when s + t > 1.
            // An exact sum is (s - 1 + t).
            return createSample(s - 1.0 + t, 1.0 - s, 1.0 - t);
        }
        // Here s + t is exact so can be subtracted to make 1 - s - t
        return createSample(1.0 - spt, s, t);
    }","  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      jDKRandomWrapper0.nextLong();
      TriangleSampler triangleSampler0 = TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = triangleSampler0.sample();
}"
982,"    public static TriangleSampler of(UniformRandomProvider rng,
                                     double[] a,
                                     double[] b,
                                     double[] c) {
        final int dimension = a.length;
        if (dimension != b.length || dimension != c.length) {
            throw new IllegalArgumentException(
                    new StringBuilder(""Mismatch of vertex dimensions: "").append(dimension).append(',')
                                                                        .append(b.length).append(',')
                                                                        .append(c.length).toString());
        }
        // Detect non-finite vertices
        Coordinates.requireFinite(a, ""Vertex a"");
        Coordinates.requireFinite(b, ""Vertex b"");
        Coordinates.requireFinite(c, ""Vertex c"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new TriangleSampler2D(rng, a, b, c);
        } else if (dimension == THREE_D) {
            return new TriangleSampler3D(rng, a, b, c);
        } else if (dimension > THREE_D) {
            return new TriangleSamplerND(rng, a, b, c);
        }
        // Less than 2D
        throw new IllegalArgumentException(
                ""Unsupported dimension: "" + dimension);
    }","  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        TriangleSampler.of(jDKRandomWrapper0, (double[]) null, (double[]) null, (double[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.shape.TriangleSampler"", e);
      }
  }"
983,"    public static TriangleSampler of(UniformRandomProvider rng,
                                     double[] a,
                                     double[] b,
                                     double[] c) {
        final int dimension = a.length;
        if (dimension != b.length || dimension != c.length) {
            throw new IllegalArgumentException(
                    new StringBuilder(""Mismatch of vertex dimensions: "").append(dimension).append(',')
                                                                        .append(b.length).append(',')
                                                                        .append(c.length).toString());
        }
        // Detect non-finite vertices
        Coordinates.requireFinite(a, ""Vertex a"");
        Coordinates.requireFinite(b, ""Vertex b"");
        Coordinates.requireFinite(c, ""Vertex c"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new TriangleSampler2D(rng, a, b, c);
        } else if (dimension == THREE_D) {
            return new TriangleSampler3D(rng, a, b, c);
        } else if (dimension > THREE_D) {
            return new TriangleSamplerND(rng, a, b, c);
        }
        // Less than 2D
        throw new IllegalArgumentException(
                ""Unsupported dimension: "" + dimension);
    }","  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        TriangleSampler.of((UniformRandomProvider) null, doubleArray0, doubleArray0, doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Unsupported dimension: 1
         //
         verifyException(""org.apache.commons.rng.sampling.shape.TriangleSampler"", e);
      }
  }"
984,"    public static TriangleSampler of(UniformRandomProvider rng,
                                     double[] a,
                                     double[] b,
                                     double[] c) {
        final int dimension = a.length;
        if (dimension != b.length || dimension != c.length) {
            throw new IllegalArgumentException(
                    new StringBuilder(""Mismatch of vertex dimensions: "").append(dimension).append(',')
                                                                        .append(b.length).append(',')
                                                                        .append(c.length).toString());
        }
        // Detect non-finite vertices
        Coordinates.requireFinite(a, ""Vertex a"");
        Coordinates.requireFinite(b, ""Vertex b"");
        Coordinates.requireFinite(c, ""Vertex c"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new TriangleSampler2D(rng, a, b, c);
        } else if (dimension == THREE_D) {
            return new TriangleSampler3D(rng, a, b, c);
        } else if (dimension > THREE_D) {
            return new TriangleSamplerND(rng, a, b, c);
        }
        // Less than 2D
        throw new IllegalArgumentException(
                ""Unsupported dimension: "" + dimension);
    }","  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[5];
      // Undeclared exception!
      try { 
        TriangleSampler.of((UniformRandomProvider) null, doubleArray1, doubleArray1, doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Mismatch of vertex dimensions: 5,5,2
         //
         verifyException(""org.apache.commons.rng.sampling.shape.TriangleSampler"", e);
      }
  }"
985,"    public static TriangleSampler of(UniformRandomProvider rng,
                                     double[] a,
                                     double[] b,
                                     double[] c) {
        final int dimension = a.length;
        if (dimension != b.length || dimension != c.length) {
            throw new IllegalArgumentException(
                    new StringBuilder(""Mismatch of vertex dimensions: "").append(dimension).append(',')
                                                                        .append(b.length).append(',')
                                                                        .append(c.length).toString());
        }
        // Detect non-finite vertices
        Coordinates.requireFinite(a, ""Vertex a"");
        Coordinates.requireFinite(b, ""Vertex b"");
        Coordinates.requireFinite(c, ""Vertex c"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new TriangleSampler2D(rng, a, b, c);
        } else if (dimension == THREE_D) {
            return new TriangleSampler3D(rng, a, b, c);
        } else if (dimension > THREE_D) {
            return new TriangleSamplerND(rng, a, b, c);
        }
        // Less than 2D
        throw new IllegalArgumentException(
                ""Unsupported dimension: "" + dimension);
    }","  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[4];
      TriangleSampler triangleSampler0 = TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[15];
      double[] doubleArray2 = triangleSampler0.sample();
      // Undeclared exception!
      try { 
        TriangleSampler.of(jDKRandomWrapper0, doubleArray2, doubleArray1, doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Mismatch of vertex dimensions: 4,15,4
         //
         verifyException(""org.apache.commons.rng.sampling.shape.TriangleSampler"", e);
      }
  }"
986,"    public double[] sample() {
        final double s = rng.nextDouble();
        final double t = rng.nextDouble();
        final double spt = s + t;
        if (spt > 1) {
            // Transform: s1 = 1 - s; t1 = 1 - t.
            // Compute: 1 - s1 - t1
            // Do not assume (1 - (1-s) - (1-t)) is (s + t - 1), i.e. (spt - 1.0),
            // to avoid loss of a random bit due to rounding when s + t > 1.
            // An exact sum is (s - 1 + t).
            return createSample(s - 1.0 + t, 1.0 - s, 1.0 - t);
        }
        // Here s + t is exact so can be subtracted to make 1 - s - t
        return createSample(1.0 - spt, s, t);
    }","  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Random.setNextRandom((-2575));
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      TriangleSampler triangleSampler0 = TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = triangleSampler0.sample();
}"
987,"    public abstract TriangleSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Create a triangle sampler with vertices {@code a}","  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[4];
      TriangleSampler triangleSampler0 = TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0);
      TriangleSampler triangleSampler1 = triangleSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
988,"    public abstract TriangleSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Create a triangle sampler with vertices {@code a}","  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      TriangleSampler triangleSampler0 = TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0);
      TriangleSampler triangleSampler1 = triangleSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
989,"    public abstract TriangleSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Create a triangle sampler with vertices {@code a}","  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      TriangleSampler triangleSampler0 = TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0);
      TriangleSampler triangleSampler1 = triangleSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
990,"    public double[] sample() {
        final double s = rng.nextDouble();
        final double t = rng.nextDouble();
        final double spt = s + t;
        if (spt > 1) {
            // Transform: s1 = 1 - s; t1 = 1 - t.
            // Compute: 1 - s1 - t1
            // Do not assume (1 - (1-s) - (1-t)) is (s + t - 1), i.e. (spt - 1.0),
            // to avoid loss of a random bit due to rounding when s + t > 1.
            // An exact sum is (s - 1 + t).
            return createSample(s - 1.0 + t, 1.0 - s, 1.0 - t);
        }
        // Here s + t is exact so can be subtracted to make 1 - s - t
        return createSample(1.0 - spt, s, t);
    }","  public void test26()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      double[] doubleArray0 = new double[5];
      TriangleSampler triangleSampler0 = TriangleSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        triangleSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.JDKRandomWrapper"", e);
      }
  }"
991,"    public static UnitBallSampler of(UniformRandomProvider rng,
                                     int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitBallSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitBallSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitBallSampler3D(rng);
        }
        return new UnitBallSamplerND(rng, dimension);
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        UnitBallSampler.of(jDKRandomWrapper0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Dimension must be strictly positive
         //
         verifyException(""org.apache.commons.rng.sampling.shape.UnitBallSampler"", e);
      }
  }"
992,"    public abstract double[] sample();

    /** {@inheritDoc}","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2370L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitBallSampler unitBallSampler0 = UnitBallSampler.of(jDKRandomWrapper0, 3);
      UnitBallSampler unitBallSampler1 = UnitBallSampler.of(jDKRandomWrapper0, 1609);
      unitBallSampler1.sample();
      UnitBallSampler unitBallSampler2 = unitBallSampler0.withUniformRandomProvider(jDKRandomWrapper0);
      unitBallSampler2.sample();
  }"
993,"    public abstract double[] sample();

    /** {@inheritDoc}","  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitBallSampler unitBallSampler0 = UnitBallSampler.of(jDKRandomWrapper0, 2);
      Random.setNextRandom((-1954));
      unitBallSampler0.sample();
  }"
994,"    public abstract double[] sample();

    /** {@inheritDoc}","  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitBallSampler unitBallSampler0 = UnitBallSampler.of(jDKRandomWrapper0, 4855);
      unitBallSampler0.sample();
      unitBallSampler0.sample();
      // Undeclared exception!
      unitBallSampler0.sample();
  }"
995,"    public abstract double[] sample();

    /** {@inheritDoc}","  public void test4()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      UnitBallSampler unitBallSampler0 = UnitBallSampler.of(jDKRandomWrapper0, 3);
      // Undeclared exception!
      try { 
        unitBallSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
996,"    public static UnitBallSampler of(UniformRandomProvider rng,
                                     int dimension) {
        if (dimension <= 0) {
            throw new IllegalArgumentException(""Dimension must be strictly positive"");
        } else if (dimension == ONE_D) {
            return new UnitBallSampler1D(rng);
        } else if (dimension == TWO_D) {
            return new UnitBallSampler2D(rng);
        } else if (dimension == THREE_D) {
            return new UnitBallSampler3D(rng);
        }
        return new UnitBallSamplerND(rng, dimension);
    }","  public void test5()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      // Undeclared exception!
      try { 
        UnitBallSampler.of(jDKRandomWrapper0, (-2169));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Dimension must be strictly positive
         //
         verifyException(""org.apache.commons.rng.sampling.shape.UnitBallSampler"", e);
      }
  }"
997,"    public abstract UnitBallSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Create a unit n-ball sampler for the given dimension.
     * Sampled points are uniformly distributed within the unit n-ball.
     *
     * <p>Sampling is supported in dimensions of 1 or above.
     *
     * @param rng Source of randomness.
     * @param dimension Space dimension.
     * @return the sampler
     * @throws IllegalArgumentException If {@code dimension <= 0}","  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitBallSampler unitBallSampler0 = UnitBallSampler.of(jDKRandomWrapper0, 2);
      UnitBallSampler unitBallSampler1 = unitBallSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
998,"    public abstract UnitBallSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Create a unit n-ball sampler for the given dimension.
     * Sampled points are uniformly distributed within the unit n-ball.
     *
     * <p>Sampling is supported in dimensions of 1 or above.
     *
     * @param rng Source of randomness.
     * @param dimension Space dimension.
     * @return the sampler
     * @throws IllegalArgumentException If {@code dimension <= 0}","  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitBallSampler unitBallSampler0 = UnitBallSampler.of(jDKRandomWrapper0, 29);
      UnitBallSampler unitBallSampler1 = unitBallSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
999,"    public abstract double[] sample();

    /** {@inheritDoc}","  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitBallSampler unitBallSampler0 = UnitBallSampler.of(jDKRandomWrapper0, 1);
      double[] doubleArray0 = unitBallSampler0.sample();
}"
1000,"    public abstract UnitBallSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Create a unit n-ball sampler for the given dimension.
     * Sampled points are uniformly distributed within the unit n-ball.
     *
     * <p>Sampling is supported in dimensions of 1 or above.
     *
     * @param rng Source of randomness.
     * @param dimension Space dimension.
     * @return the sampler
     * @throws IllegalArgumentException If {@code dimension <= 0}","  public void test9()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      UnitBallSampler unitBallSampler0 = UnitBallSampler.of(jDKRandomWrapper0, 1);
      UnitBallSampler unitBallSampler1 = unitBallSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
1001,"    static double[] requireLength(double[] values, int length, String message) {
        if (values.length != length) {
            throw new IllegalArgumentException(String.format(""%s length mismatch: %d != %d"",
                    message, values.length, length));
        }
        return values;
    }","  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        Coordinates.requireLength(doubleArray0, 1511, ""G8%HVh}T|JF/0"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // G8%HVh}T|JF/0 length mismatch: 1 != 1511
         //
         verifyException(""org.apache.commons.rng.sampling.shape.Coordinates"", e);
      }
  }"
1002,"    static double[] requireLength(double[] values, int length, String message) {
        if (values.length != length) {
            throw new IllegalArgumentException(String.format(""%s length mismatch: %d != %d"",
                    message, values.length, length));
        }
        return values;
    }","  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = Coordinates.requireLength(doubleArray0, 3, ""D#(2Z'uVQ!}VU"");
}"
1003,"    static double[] requireFinite(double[] values, String message) {
        for (final double value : values) {
            if (!Double.isFinite(value)) {
                throw new IllegalArgumentException(message + "" contains non-finite value: "" + value);
            }
        }
        return values;
    }","  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = Coordinates.requireFinite(doubleArray0, ""%s length mismatch: %d != %d"");
}"
1004,"    static double[] requireLength(double[] values, int length, String message) {
        if (values.length != length) {
            throw new IllegalArgumentException(String.format(""%s length mismatch: %d != %d"",
                    message, values.length, length));
        }
        return values;
    }","  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        Coordinates.requireLength((double[]) null, (-859), """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.shape.Coordinates"", e);
      }
  }"
1005,"    static double[] requireFinite(double[] values, String message) {
        for (final double value : values) {
            if (!Double.isFinite(value)) {
                throw new IllegalArgumentException(message + "" contains non-finite value: "" + value);
            }
        }
        return values;
    }","  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        Coordinates.requireFinite((double[]) null, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.shape.Coordinates"", e);
      }
  }"
1006,"    static double[] requireLength(double[] values, int length, String message) {
        if (values.length != length) {
            throw new IllegalArgumentException(String.format(""%s length mismatch: %d != %d"",
                    message, values.length, length));
        }
        return values;
    }","  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try { 
        Coordinates.requireLength(doubleArray0, 0, """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         //  length mismatch: 9 != 0
         //
         verifyException(""org.apache.commons.rng.sampling.shape.Coordinates"", e);
      }
  }"
1007,"    static double[] requireLength(double[] values, int length, String message) {
        if (values.length != length) {
            throw new IllegalArgumentException(String.format(""%s length mismatch: %d != %d"",
                    message, values.length, length));
        }
        return values;
    }","  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = Coordinates.requireLength(doubleArray0, 0, """");
}"
1008,"    static double[] requireFinite(double[] values, String message) {
        for (final double value : values) {
            if (!Double.isFinite(value)) {
                throw new IllegalArgumentException(message + "" contains non-finite value: "" + value);
            }
        }
        return values;
    }","  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = Coordinates.requireFinite(doubleArray0, """");
}"
1009,"    public static BoxSampler of(UniformRandomProvider rng,
                                double[] a,
                                double[] b) {
        final int dimension = a.length;
        if (dimension != b.length) {
            throw new IllegalArgumentException(
                new StringBuilder(""Mismatch of box dimensions: "").append(dimension).append(',')
                                                                 .append(b.length).toString());
        }
        // Detect non-finite bounds
        Coordinates.requireFinite(a, ""Bound a"");
        Coordinates.requireFinite(b, ""Bound b"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new BoxSampler2D(rng, a, b);
        } else if (dimension == THREE_D) {
            return new BoxSampler3D(rng, a, b);
        } else if (dimension > THREE_D) {
            return new BoxSamplerND(rng, a, b);
        }
        // Less than 2D
        throw new IllegalArgumentException(""Unsupported dimension: "" + dimension);
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      BoxSampler boxSampler0 = BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double[] doubleArray1 = boxSampler0.sample();
      BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray1);
}"
1010,"    public static BoxSampler of(UniformRandomProvider rng,
                                double[] a,
                                double[] b) {
        final int dimension = a.length;
        if (dimension != b.length) {
            throw new IllegalArgumentException(
                new StringBuilder(""Mismatch of box dimensions: "").append(dimension).append(',')
                                                                 .append(b.length).toString());
        }
        // Detect non-finite bounds
        Coordinates.requireFinite(a, ""Bound a"");
        Coordinates.requireFinite(b, ""Bound b"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new BoxSampler2D(rng, a, b);
        } else if (dimension == THREE_D) {
            return new BoxSampler3D(rng, a, b);
        } else if (dimension > THREE_D) {
            return new BoxSamplerND(rng, a, b);
        }
        // Less than 2D
        throw new IllegalArgumentException(""Unsupported dimension: "" + dimension);
    }","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[2];
      BoxSampler boxSampler0 = BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray1);
}"
1011,"    public static BoxSampler of(UniformRandomProvider rng,
                                double[] a,
                                double[] b) {
        final int dimension = a.length;
        if (dimension != b.length) {
            throw new IllegalArgumentException(
                new StringBuilder(""Mismatch of box dimensions: "").append(dimension).append(',')
                                                                 .append(b.length).toString());
        }
        // Detect non-finite bounds
        Coordinates.requireFinite(a, ""Bound a"");
        Coordinates.requireFinite(b, ""Bound b"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new BoxSampler2D(rng, a, b);
        } else if (dimension == THREE_D) {
            return new BoxSampler3D(rng, a, b);
        } else if (dimension > THREE_D) {
            return new BoxSamplerND(rng, a, b);
        }
        // Less than 2D
        throw new IllegalArgumentException(""Unsupported dimension: "" + dimension);
    }","  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[7];
      BoxSampler boxSampler0 = BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray1);
}"
1012,"    public static BoxSampler of(UniformRandomProvider rng,
                                double[] a,
                                double[] b) {
        final int dimension = a.length;
        if (dimension != b.length) {
            throw new IllegalArgumentException(
                new StringBuilder(""Mismatch of box dimensions: "").append(dimension).append(',')
                                                                 .append(b.length).toString());
        }
        // Detect non-finite bounds
        Coordinates.requireFinite(a, ""Bound a"");
        Coordinates.requireFinite(b, ""Bound b"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new BoxSampler2D(rng, a, b);
        } else if (dimension == THREE_D) {
            return new BoxSampler3D(rng, a, b);
        } else if (dimension > THREE_D) {
            return new BoxSamplerND(rng, a, b);
        }
        // Less than 2D
        throw new IllegalArgumentException(""Unsupported dimension: "" + dimension);
    }","  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1488L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[5];
      // Undeclared exception!
      try { 
        BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Mismatch of box dimensions: 2,5
         //
         verifyException(""org.apache.commons.rng.sampling.shape.BoxSampler"", e);
      }
  }"
1013,"    public abstract double[] sample();

    /**
     * Creates the sample between bound a and b.
     *
     * @param a Bound a
     * @param b Bound b
     * @return the sample
     */
    double createSample(double a, double b) {
        final double u = rng.nextDouble();
        return (1.0 - u) * a + u * b;
    }","  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-188L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      mockRandom0.nextDouble();
      doubleArray0[0] = (double) (-188L);
      BoxSampler boxSampler0 = BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double[] doubleArray1 = boxSampler0.sample();
}"
1014,"    double createSample(double a, double b) {
        final double u = rng.nextDouble();
        return (1.0 - u) * a + u * b;
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[5];
      BoxSampler boxSampler0 = BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double double0 = boxSampler0.createSample(0.0, 3865.886604);
}"
1015,"    double createSample(double a, double b) {
        final double u = rng.nextDouble();
        return (1.0 - u) * a + u * b;
    }","  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3030L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[4];
      BoxSampler boxSampler0 = BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double double0 = boxSampler0.createSample(3030L, 3030.0);
}"
1016,"    double createSample(double a, double b) {
        final double u = rng.nextDouble();
        return (1.0 - u) * a + u * b;
    }","  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[4];
      BoxSampler boxSampler0 = BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double double0 = boxSampler0.createSample((-1108.920899), 0.0);
}"
1017,"    public abstract double[] sample();

    /**
     * Creates the sample between bound a and b.
     *
     * @param a Bound a
     * @param b Bound b
     * @return the sample
     */
    double createSample(double a, double b) {
        final double u = rng.nextDouble();
        return (1.0 - u) * a + u * b;
    }","  public void test8()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      BoxSampler boxSampler0 = BoxSampler.of((UniformRandomProvider) null, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        boxSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.shape.BoxSampler"", e);
      }
  }"
1018,"    public static BoxSampler of(UniformRandomProvider rng,
                                double[] a,
                                double[] b) {
        final int dimension = a.length;
        if (dimension != b.length) {
            throw new IllegalArgumentException(
                new StringBuilder(""Mismatch of box dimensions: "").append(dimension).append(',')
                                                                 .append(b.length).toString());
        }
        // Detect non-finite bounds
        Coordinates.requireFinite(a, ""Bound a"");
        Coordinates.requireFinite(b, ""Bound b"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new BoxSampler2D(rng, a, b);
        } else if (dimension == THREE_D) {
            return new BoxSampler3D(rng, a, b);
        } else if (dimension > THREE_D) {
            return new BoxSamplerND(rng, a, b);
        }
        // Less than 2D
        throw new IllegalArgumentException(""Unsupported dimension: "" + dimension);
    }","  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        BoxSampler.of((UniformRandomProvider) null, (double[]) null, (double[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.shape.BoxSampler"", e);
      }
  }"
1019,"    double createSample(double a, double b) {
        final double u = rng.nextDouble();
        return (1.0 - u) * a + u * b;
    }","  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      BoxSampler boxSampler0 = BoxSampler.of((UniformRandomProvider) null, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        boxSampler0.createSample(0.0, 0.0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.shape.BoxSampler"", e);
      }
  }"
1020,"    public static BoxSampler of(UniformRandomProvider rng,
                                double[] a,
                                double[] b) {
        final int dimension = a.length;
        if (dimension != b.length) {
            throw new IllegalArgumentException(
                new StringBuilder(""Mismatch of box dimensions: "").append(dimension).append(',')
                                                                 .append(b.length).toString());
        }
        // Detect non-finite bounds
        Coordinates.requireFinite(a, ""Bound a"");
        Coordinates.requireFinite(b, ""Bound b"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new BoxSampler2D(rng, a, b);
        } else if (dimension == THREE_D) {
            return new BoxSampler3D(rng, a, b);
        } else if (dimension > THREE_D) {
            return new BoxSamplerND(rng, a, b);
        }
        // Less than 2D
        throw new IllegalArgumentException(""Unsupported dimension: "" + dimension);
    }","  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Unsupported dimension: 1
         //
         verifyException(""org.apache.commons.rng.sampling.shape.BoxSampler"", e);
      }
  }"
1021,"    public static BoxSampler of(UniformRandomProvider rng,
                                double[] a,
                                double[] b) {
        final int dimension = a.length;
        if (dimension != b.length) {
            throw new IllegalArgumentException(
                new StringBuilder(""Mismatch of box dimensions: "").append(dimension).append(',')
                                                                 .append(b.length).toString());
        }
        // Detect non-finite bounds
        Coordinates.requireFinite(a, ""Bound a"");
        Coordinates.requireFinite(b, ""Bound b"");
        // Low dimension specialisations
        if (dimension == TWO_D) {
            return new BoxSampler2D(rng, a, b);
        } else if (dimension == THREE_D) {
            return new BoxSampler3D(rng, a, b);
        } else if (dimension > THREE_D) {
            return new BoxSamplerND(rng, a, b);
        }
        // Less than 2D
        throw new IllegalArgumentException(""Unsupported dimension: "" + dimension);
    }","  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[15];
      // Undeclared exception!
      try { 
        BoxSampler.of(jDKRandomWrapper0, doubleArray1, doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Mismatch of box dimensions: 15,2
         //
         verifyException(""org.apache.commons.rng.sampling.shape.BoxSampler"", e);
      }
  }"
1022,"    public abstract double[] sample();

    /**
     * Creates the sample between bound a and b.
     *
     * @param a Bound a
     * @param b Bound b
     * @return the sample
     */
    double createSample(double a, double b) {
        final double u = rng.nextDouble();
        return (1.0 - u) * a + u * b;
    }","  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[4];
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      BoxSampler boxSampler0 = BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double[] doubleArray1 = boxSampler0.sample();
}"
1023,"    public abstract BoxSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Create a box sampler with bounds {@code a}","  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      BoxSampler boxSampler0 = BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      BoxSampler boxSampler1 = boxSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
1024,"    public abstract BoxSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Create a box sampler with bounds {@code a}","  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      BoxSampler boxSampler0 = BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      BoxSampler boxSampler1 = boxSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
1025,"    public abstract BoxSampler withUniformRandomProvider(UniformRandomProvider rng);

    /**
     * Create a box sampler with bounds {@code a}","  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[4];
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      BoxSampler boxSampler0 = BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      BoxSampler boxSampler1 = boxSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
1026,"    public abstract double[] sample();

    /**
     * Creates the sample between bound a and b.
     *
     * @param a Bound a
     * @param b Bound b
     * @return the sample
     */
    double createSample(double a, double b) {
        final double u = rng.nextDouble();
        return (1.0 - u) * a + u * b;
    }","  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[2];
      BoxSampler boxSampler0 = BoxSampler.of(jDKRandomWrapper0, doubleArray0, doubleArray0);
      double[] doubleArray1 = boxSampler0.sample();
}"
1027,"    public static TetrahedronSampler of(UniformRandomProvider rng,
                                        double[] a,
                                        double[] b,
                                        double[] c,
                                        double[] d) {
        // Must be 3D
        Coordinates.requireLength(a, THREE_D, VERTEX_A);
        Coordinates.requireLength(b, THREE_D, VERTEX_B);
        Coordinates.requireLength(c, THREE_D, VERTEX_C);
        Coordinates.requireLength(d, THREE_D, VERTEX_D);
        // Detect non-finite vertices
        Coordinates.requireFinite(a, VERTEX_A);
        Coordinates.requireFinite(b, VERTEX_B);
        Coordinates.requireFinite(c, VERTEX_C);
        Coordinates.requireFinite(d, VERTEX_D);
        return new TetrahedronSampler(rng, a, b, c, d);
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[5];
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = tetrahedronSampler0.sample();
      double[] doubleArray2 = tetrahedronSampler0.sample();
      TetrahedronSampler.of(jDKRandomWrapper0, doubleArray2, doubleArray2, doubleArray1, doubleArray1);
}"
1028,"    public static TetrahedronSampler of(UniformRandomProvider rng,
                                        double[] a,
                                        double[] b,
                                        double[] c,
                                        double[] d) {
        // Must be 3D
        Coordinates.requireLength(a, THREE_D, VERTEX_A);
        Coordinates.requireLength(b, THREE_D, VERTEX_B);
        Coordinates.requireLength(c, THREE_D, VERTEX_C);
        Coordinates.requireLength(d, THREE_D, VERTEX_D);
        // Detect non-finite vertices
        Coordinates.requireFinite(a, VERTEX_A);
        Coordinates.requireFinite(b, VERTEX_B);
        Coordinates.requireFinite(c, VERTEX_C);
        Coordinates.requireFinite(d, VERTEX_D);
        return new TetrahedronSampler(rng, a, b, c, d);
    }","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[5];
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = tetrahedronSampler0.sample();
      double[] doubleArray2 = tetrahedronSampler0.sample();
      TetrahedronSampler.of(jDKRandomWrapper0, doubleArray2, doubleArray2, doubleArray1, doubleArray1);
}"
1029,"    public static TetrahedronSampler of(UniformRandomProvider rng,
                                        double[] a,
                                        double[] b,
                                        double[] c,
                                        double[] d) {
        // Must be 3D
        Coordinates.requireLength(a, THREE_D, VERTEX_A);
        Coordinates.requireLength(b, THREE_D, VERTEX_B);
        Coordinates.requireLength(c, THREE_D, VERTEX_C);
        Coordinates.requireLength(d, THREE_D, VERTEX_D);
        // Detect non-finite vertices
        Coordinates.requireFinite(a, VERTEX_A);
        Coordinates.requireFinite(b, VERTEX_B);
        Coordinates.requireFinite(c, VERTEX_C);
        Coordinates.requireFinite(d, VERTEX_D);
        return new TetrahedronSampler(rng, a, b, c, d);
    }","  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[3];
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray1, doubleArray0, doubleArray0);
      double[] doubleArray2 = tetrahedronSampler0.sample();
      TetrahedronSampler.of(jDKRandomWrapper0, doubleArray1, doubleArray1, doubleArray2, doubleArray1);
}"
1030,"    public static TetrahedronSampler of(UniformRandomProvider rng,
                                        double[] a,
                                        double[] b,
                                        double[] c,
                                        double[] d) {
        // Must be 3D
        Coordinates.requireLength(a, THREE_D, VERTEX_A);
        Coordinates.requireLength(b, THREE_D, VERTEX_B);
        Coordinates.requireLength(c, THREE_D, VERTEX_C);
        Coordinates.requireLength(d, THREE_D, VERTEX_D);
        // Detect non-finite vertices
        Coordinates.requireFinite(a, VERTEX_A);
        Coordinates.requireFinite(b, VERTEX_B);
        Coordinates.requireFinite(c, VERTEX_C);
        Coordinates.requireFinite(d, VERTEX_D);
        return new TetrahedronSampler(rng, a, b, c, d);
    }","  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[3];
      // Undeclared exception!
      try { 
        TetrahedronSampler.of(jDKRandomWrapper0, doubleArray1, doubleArray1, doubleArray0, doubleArray1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Vertex c length mismatch: 8 != 3
         //
         verifyException(""org.apache.commons.rng.sampling.shape.Coordinates"", e);
      }
  }"
1031,"    public static TetrahedronSampler of(UniformRandomProvider rng,
                                        double[] a,
                                        double[] b,
                                        double[] c,
                                        double[] d) {
        // Must be 3D
        Coordinates.requireLength(a, THREE_D, VERTEX_A);
        Coordinates.requireLength(b, THREE_D, VERTEX_B);
        Coordinates.requireLength(c, THREE_D, VERTEX_C);
        Coordinates.requireLength(d, THREE_D, VERTEX_D);
        // Detect non-finite vertices
        Coordinates.requireFinite(a, VERTEX_A);
        Coordinates.requireFinite(b, VERTEX_B);
        Coordinates.requireFinite(c, VERTEX_C);
        Coordinates.requireFinite(d, VERTEX_D);
        return new TetrahedronSampler(rng, a, b, c, d);
    }","  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[3];
      // Undeclared exception!
      try { 
        TetrahedronSampler.of(jDKRandomWrapper0, doubleArray1, doubleArray0, doubleArray1, doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Vertex b length mismatch: 8 != 3
         //
         verifyException(""org.apache.commons.rng.sampling.shape.Coordinates"", e);
      }
  }"
1032,"    public double[] sample() {
        double s = rng.nextDouble();
        double t = rng.nextDouble();
        final double u = rng.nextDouble();
        // Care is taken to ensure the 3 deviates remain in the 2^53 dyadic rationals in [0, 1).
        // The following are exact for all the 2^53 dyadic rationals:
        // 1 - u; u in [0, 1]
        // u - 1; u in [0, 1]
        // u + 1; u in [-1, 0]
        // u + v; u in [-1, 0], v in [0, 1]
        // u + v; u, v in [0, 1], u + v <= 1

        // Cut and fold with the plane s + t = 1
        if (s + t > 1) {
            // (s, t, u) = (1 - s, 1 - t, u)                if s + t > 1
            s = 1 - s;
            t = 1 - t;
        }
        // Now s + t <= 1.
        // Cut and fold with the planes t + u = 1 and s + t + u = 1.
        final double tpu = t + u;
        final double sptpu = s + tpu;
        if (sptpu > 1) {
            if (tpu > 1) {
                // (s, t, u) = (s, 1 - u, 1 - s - t)        if t + u > 1
                // 1 - s - (1-u) - (1-s-t) == u - 1 + t
                return createSample(u - 1 + t, s, 1 - u, 1 - s - t);
            }
            // (s, t, u) = (1 - t - u, t, s + t + u - 1)    if t + u <= 1
            // 1 - (1-t-u) - t - (s+t+u-1) == 1 - s - t
            return createSample(1 - s - t, 1 - tpu, t, s - 1 + tpu);
        }
        return createSample(1 - sptpu, s, t, u);
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) 1L;
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = tetrahedronSampler0.sample();
}"
1033,"    public double[] sample() {
        double s = rng.nextDouble();
        double t = rng.nextDouble();
        final double u = rng.nextDouble();
        // Care is taken to ensure the 3 deviates remain in the 2^53 dyadic rationals in [0, 1).
        // The following are exact for all the 2^53 dyadic rationals:
        // 1 - u; u in [0, 1]
        // u - 1; u in [0, 1]
        // u + 1; u in [-1, 0]
        // u + v; u in [-1, 0], v in [0, 1]
        // u + v; u, v in [0, 1], u + v <= 1

        // Cut and fold with the plane s + t = 1
        if (s + t > 1) {
            // (s, t, u) = (1 - s, 1 - t, u)                if s + t > 1
            s = 1 - s;
            t = 1 - t;
        }
        // Now s + t <= 1.
        // Cut and fold with the planes t + u = 1 and s + t + u = 1.
        final double tpu = t + u;
        final double sptpu = s + tpu;
        if (sptpu > 1) {
            if (tpu > 1) {
                // (s, t, u) = (s, 1 - u, 1 - s - t)        if t + u > 1
                // 1 - s - (1-u) - (1-s-t) == u - 1 + t
                return createSample(u - 1 + t, s, 1 - u, 1 - s - t);
            }
            // (s, t, u) = (1 - t - u, t, s + t + u - 1)    if t + u <= 1
            // 1 - (1-t-u) - t - (s+t+u-1) == 1 - s - t
            return createSample(1 - s - t, 1 - tpu, t, s - 1 + tpu);
        }
        return createSample(1 - sptpu, s, t, u);
    }","  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) 1L;
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = tetrahedronSampler0.sample();
      double[] doubleArray2 = tetrahedronSampler0.sample();
}"
1034,"    public double[] sample() {
        double s = rng.nextDouble();
        double t = rng.nextDouble();
        final double u = rng.nextDouble();
        // Care is taken to ensure the 3 deviates remain in the 2^53 dyadic rationals in [0, 1).
        // The following are exact for all the 2^53 dyadic rationals:
        // 1 - u; u in [0, 1]
        // u - 1; u in [0, 1]
        // u + 1; u in [-1, 0]
        // u + v; u in [-1, 0], v in [0, 1]
        // u + v; u, v in [0, 1], u + v <= 1

        // Cut and fold with the plane s + t = 1
        if (s + t > 1) {
            // (s, t, u) = (1 - s, 1 - t, u)                if s + t > 1
            s = 1 - s;
            t = 1 - t;
        }
        // Now s + t <= 1.
        // Cut and fold with the planes t + u = 1 and s + t + u = 1.
        final double tpu = t + u;
        final double sptpu = s + tpu;
        if (sptpu > 1) {
            if (tpu > 1) {
                // (s, t, u) = (s, 1 - u, 1 - s - t)        if t + u > 1
                // 1 - s - (1-u) - (1-s-t) == u - 1 + t
                return createSample(u - 1 + t, s, 1 - u, 1 - s - t);
            }
            // (s, t, u) = (1 - t - u, t, s + t + u - 1)    if t + u <= 1
            // 1 - (1-t-u) - t - (s+t+u-1) == 1 - s - t
            return createSample(1 - s - t, 1 - tpu, t, s - 1 + tpu);
        }
        return createSample(1 - sptpu, s, t, u);
    }","  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 1L;
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = tetrahedronSampler0.sample();
}"
1035,"    public double[] sample() {
        double s = rng.nextDouble();
        double t = rng.nextDouble();
        final double u = rng.nextDouble();
        // Care is taken to ensure the 3 deviates remain in the 2^53 dyadic rationals in [0, 1).
        // The following are exact for all the 2^53 dyadic rationals:
        // 1 - u; u in [0, 1]
        // u - 1; u in [0, 1]
        // u + 1; u in [-1, 0]
        // u + v; u in [-1, 0], v in [0, 1]
        // u + v; u, v in [0, 1], u + v <= 1

        // Cut and fold with the plane s + t = 1
        if (s + t > 1) {
            // (s, t, u) = (1 - s, 1 - t, u)                if s + t > 1
            s = 1 - s;
            t = 1 - t;
        }
        // Now s + t <= 1.
        // Cut and fold with the planes t + u = 1 and s + t + u = 1.
        final double tpu = t + u;
        final double sptpu = s + tpu;
        if (sptpu > 1) {
            if (tpu > 1) {
                // (s, t, u) = (s, 1 - u, 1 - s - t)        if t + u > 1
                // 1 - s - (1-u) - (1-s-t) == u - 1 + t
                return createSample(u - 1 + t, s, 1 - u, 1 - s - t);
            }
            // (s, t, u) = (1 - t - u, t, s + t + u - 1)    if t + u <= 1
            // 1 - (1-t-u) - t - (s+t+u-1) == 1 - s - t
            return createSample(1 - s - t, 1 - tpu, t, s - 1 + tpu);
        }
        return createSample(1 - sptpu, s, t, u);
    }","  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 1L;
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = tetrahedronSampler0.sample();
      double[] doubleArray2 = tetrahedronSampler0.sample();
}"
1036,"    public double[] sample() {
        double s = rng.nextDouble();
        double t = rng.nextDouble();
        final double u = rng.nextDouble();
        // Care is taken to ensure the 3 deviates remain in the 2^53 dyadic rationals in [0, 1).
        // The following are exact for all the 2^53 dyadic rationals:
        // 1 - u; u in [0, 1]
        // u - 1; u in [0, 1]
        // u + 1; u in [-1, 0]
        // u + v; u in [-1, 0], v in [0, 1]
        // u + v; u, v in [0, 1], u + v <= 1

        // Cut and fold with the plane s + t = 1
        if (s + t > 1) {
            // (s, t, u) = (1 - s, 1 - t, u)                if s + t > 1
            s = 1 - s;
            t = 1 - t;
        }
        // Now s + t <= 1.
        // Cut and fold with the planes t + u = 1 and s + t + u = 1.
        final double tpu = t + u;
        final double sptpu = s + tpu;
        if (sptpu > 1) {
            if (tpu > 1) {
                // (s, t, u) = (s, 1 - u, 1 - s - t)        if t + u > 1
                // 1 - s - (1-u) - (1-s-t) == u - 1 + t
                return createSample(u - 1 + t, s, 1 - u, 1 - s - t);
            }
            // (s, t, u) = (1 - t - u, t, s + t + u - 1)    if t + u <= 1
            // 1 - (1-t-u) - t - (s+t+u-1) == 1 - s - t
            return createSample(1 - s - t, 1 - tpu, t, s - 1 + tpu);
        }
        return createSample(1 - sptpu, s, t, u);
    }","  public void test9()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1L;
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = tetrahedronSampler0.sample();
}"
1037,"    public double[] sample() {
        double s = rng.nextDouble();
        double t = rng.nextDouble();
        final double u = rng.nextDouble();
        // Care is taken to ensure the 3 deviates remain in the 2^53 dyadic rationals in [0, 1).
        // The following are exact for all the 2^53 dyadic rationals:
        // 1 - u; u in [0, 1]
        // u - 1; u in [0, 1]
        // u + 1; u in [-1, 0]
        // u + v; u in [-1, 0], v in [0, 1]
        // u + v; u, v in [0, 1], u + v <= 1

        // Cut and fold with the plane s + t = 1
        if (s + t > 1) {
            // (s, t, u) = (1 - s, 1 - t, u)                if s + t > 1
            s = 1 - s;
            t = 1 - t;
        }
        // Now s + t <= 1.
        // Cut and fold with the planes t + u = 1 and s + t + u = 1.
        final double tpu = t + u;
        final double sptpu = s + tpu;
        if (sptpu > 1) {
            if (tpu > 1) {
                // (s, t, u) = (s, 1 - u, 1 - s - t)        if t + u > 1
                // 1 - s - (1-u) - (1-s-t) == u - 1 + t
                return createSample(u - 1 + t, s, 1 - u, 1 - s - t);
            }
            // (s, t, u) = (1 - t - u, t, s + t + u - 1)    if t + u <= 1
            // 1 - (1-t-u) - t - (s+t+u-1) == 1 - s - t
            return createSample(1 - s - t, 1 - tpu, t, s - 1 + tpu);
        }
        return createSample(1 - sptpu, s, t, u);
    }","  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1L;
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = tetrahedronSampler0.sample();
      double[] doubleArray2 = tetrahedronSampler0.sample();
}"
1038,"    public double[] sample() {
        double s = rng.nextDouble();
        double t = rng.nextDouble();
        final double u = rng.nextDouble();
        // Care is taken to ensure the 3 deviates remain in the 2^53 dyadic rationals in [0, 1).
        // The following are exact for all the 2^53 dyadic rationals:
        // 1 - u; u in [0, 1]
        // u - 1; u in [0, 1]
        // u + 1; u in [-1, 0]
        // u + v; u in [-1, 0], v in [0, 1]
        // u + v; u, v in [0, 1], u + v <= 1

        // Cut and fold with the plane s + t = 1
        if (s + t > 1) {
            // (s, t, u) = (1 - s, 1 - t, u)                if s + t > 1
            s = 1 - s;
            t = 1 - t;
        }
        // Now s + t <= 1.
        // Cut and fold with the planes t + u = 1 and s + t + u = 1.
        final double tpu = t + u;
        final double sptpu = s + tpu;
        if (sptpu > 1) {
            if (tpu > 1) {
                // (s, t, u) = (s, 1 - u, 1 - s - t)        if t + u > 1
                // 1 - s - (1-u) - (1-s-t) == u - 1 + t
                return createSample(u - 1 + t, s, 1 - u, 1 - s - t);
            }
            // (s, t, u) = (1 - t - u, t, s + t + u - 1)    if t + u <= 1
            // 1 - (1-t-u) - t - (s+t+u-1) == 1 - s - t
            return createSample(1 - s - t, 1 - tpu, t, s - 1 + tpu);
        }
        return createSample(1 - sptpu, s, t, u);
    }","  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[3];
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      mockRandom0.nextGaussian();
      tetrahedronSampler0.sample();
      tetrahedronSampler0.sample();
      double[] doubleArray1 = tetrahedronSampler0.sample();
}"
1039,"    public double[] sample() {
        double s = rng.nextDouble();
        double t = rng.nextDouble();
        final double u = rng.nextDouble();
        // Care is taken to ensure the 3 deviates remain in the 2^53 dyadic rationals in [0, 1).
        // The following are exact for all the 2^53 dyadic rationals:
        // 1 - u; u in [0, 1]
        // u - 1; u in [0, 1]
        // u + 1; u in [-1, 0]
        // u + v; u in [-1, 0], v in [0, 1]
        // u + v; u, v in [0, 1], u + v <= 1

        // Cut and fold with the plane s + t = 1
        if (s + t > 1) {
            // (s, t, u) = (1 - s, 1 - t, u)                if s + t > 1
            s = 1 - s;
            t = 1 - t;
        }
        // Now s + t <= 1.
        // Cut and fold with the planes t + u = 1 and s + t + u = 1.
        final double tpu = t + u;
        final double sptpu = s + tpu;
        if (sptpu > 1) {
            if (tpu > 1) {
                // (s, t, u) = (s, 1 - u, 1 - s - t)        if t + u > 1
                // 1 - s - (1-u) - (1-s-t) == u - 1 + t
                return createSample(u - 1 + t, s, 1 - u, 1 - s - t);
            }
            // (s, t, u) = (1 - t - u, t, s + t + u - 1)    if t + u <= 1
            // 1 - (1-t-u) - t - (s+t+u-1) == 1 - s - t
            return createSample(1 - s - t, 1 - tpu, t, s - 1 + tpu);
        }
        return createSample(1 - sptpu, s, t, u);
    }","  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[5];
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      tetrahedronSampler0.sample();
      tetrahedronSampler0.sample();
      tetrahedronSampler0.sample();
      tetrahedronSampler0.sample();
      tetrahedronSampler0.sample();
      double[] doubleArray1 = tetrahedronSampler0.sample();
}"
1040,"    TetrahedronSampler(UniformRandomProvider rng, double[] a, double[] b, double[] c, double[] d) {
        // Defensive copy
        this.a = a.clone();
        this.b = b.clone();
        this.c = c.clone();
        this.d = d.clone();
        this.rng = rng;
    }","  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[8];
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      TetrahedronSampler tetrahedronSampler1 = new TetrahedronSampler(jDKRandomWrapper0, tetrahedronSampler0);
}"
1041,"    public static TetrahedronSampler of(UniformRandomProvider rng,
                                        double[] a,
                                        double[] b,
                                        double[] c,
                                        double[] d) {
        // Must be 3D
        Coordinates.requireLength(a, THREE_D, VERTEX_A);
        Coordinates.requireLength(b, THREE_D, VERTEX_B);
        Coordinates.requireLength(c, THREE_D, VERTEX_C);
        Coordinates.requireLength(d, THREE_D, VERTEX_D);
        // Detect non-finite vertices
        Coordinates.requireFinite(a, VERTEX_A);
        Coordinates.requireFinite(b, VERTEX_B);
        Coordinates.requireFinite(c, VERTEX_C);
        Coordinates.requireFinite(d, VERTEX_D);
        return new TetrahedronSampler(rng, a, b, c, d);
    }","  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[15];
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = tetrahedronSampler0.sample();
      double[] doubleArray2 = tetrahedronSampler0.sample();
      TetrahedronSampler.of(jDKRandomWrapper0, doubleArray2, doubleArray1, doubleArray1, doubleArray1);
}"
1042,"    public static TetrahedronSampler of(UniformRandomProvider rng,
                                        double[] a,
                                        double[] b,
                                        double[] c,
                                        double[] d) {
        // Must be 3D
        Coordinates.requireLength(a, THREE_D, VERTEX_A);
        Coordinates.requireLength(b, THREE_D, VERTEX_B);
        Coordinates.requireLength(c, THREE_D, VERTEX_C);
        Coordinates.requireLength(d, THREE_D, VERTEX_D);
        // Detect non-finite vertices
        Coordinates.requireFinite(a, VERTEX_A);
        Coordinates.requireFinite(b, VERTEX_B);
        Coordinates.requireFinite(c, VERTEX_C);
        Coordinates.requireFinite(d, VERTEX_D);
        return new TetrahedronSampler(rng, a, b, c, d);
    }","  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[15];
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = tetrahedronSampler0.sample();
      double[] doubleArray2 = tetrahedronSampler0.sample();
      TetrahedronSampler.of(jDKRandomWrapper0, doubleArray2, doubleArray1, doubleArray1, doubleArray1);
}"
1043,"    public double[] sample() {
        double s = rng.nextDouble();
        double t = rng.nextDouble();
        final double u = rng.nextDouble();
        // Care is taken to ensure the 3 deviates remain in the 2^53 dyadic rationals in [0, 1).
        // The following are exact for all the 2^53 dyadic rationals:
        // 1 - u; u in [0, 1]
        // u - 1; u in [0, 1]
        // u + 1; u in [-1, 0]
        // u + v; u in [-1, 0], v in [0, 1]
        // u + v; u, v in [0, 1], u + v <= 1

        // Cut and fold with the plane s + t = 1
        if (s + t > 1) {
            // (s, t, u) = (1 - s, 1 - t, u)                if s + t > 1
            s = 1 - s;
            t = 1 - t;
        }
        // Now s + t <= 1.
        // Cut and fold with the planes t + u = 1 and s + t + u = 1.
        final double tpu = t + u;
        final double sptpu = s + tpu;
        if (sptpu > 1) {
            if (tpu > 1) {
                // (s, t, u) = (s, 1 - u, 1 - s - t)        if t + u > 1
                // 1 - s - (1-u) - (1-s-t) == u - 1 + t
                return createSample(u - 1 + t, s, 1 - u, 1 - s - t);
            }
            // (s, t, u) = (1 - t - u, t, s + t + u - 1)    if t + u <= 1
            // 1 - (1-t-u) - t - (s+t+u-1) == 1 - s - t
            return createSample(1 - s - t, 1 - tpu, t, s - 1 + tpu);
        }
        return createSample(1 - sptpu, s, t, u);
    }","  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler((UniformRandomProvider) null, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        tetrahedronSampler0.sample();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.shape.TetrahedronSampler"", e);
      }
  }"
1044,"    public double[] sample() {
        double s = rng.nextDouble();
        double t = rng.nextDouble();
        final double u = rng.nextDouble();
        // Care is taken to ensure the 3 deviates remain in the 2^53 dyadic rationals in [0, 1).
        // The following are exact for all the 2^53 dyadic rationals:
        // 1 - u; u in [0, 1]
        // u - 1; u in [0, 1]
        // u + 1; u in [-1, 0]
        // u + v; u in [-1, 0], v in [0, 1]
        // u + v; u, v in [0, 1], u + v <= 1

        // Cut and fold with the plane s + t = 1
        if (s + t > 1) {
            // (s, t, u) = (1 - s, 1 - t, u)                if s + t > 1
            s = 1 - s;
            t = 1 - t;
        }
        // Now s + t <= 1.
        // Cut and fold with the planes t + u = 1 and s + t + u = 1.
        final double tpu = t + u;
        final double sptpu = s + tpu;
        if (sptpu > 1) {
            if (tpu > 1) {
                // (s, t, u) = (s, 1 - u, 1 - s - t)        if t + u > 1
                // 1 - s - (1-u) - (1-s-t) == u - 1 + t
                return createSample(u - 1 + t, s, 1 - u, 1 - s - t);
            }
            // (s, t, u) = (1 - t - u, t, s + t + u - 1)    if t + u <= 1
            // 1 - (1-t-u) - t - (s+t+u-1) == 1 - s - t
            return createSample(1 - s - t, 1 - tpu, t, s - 1 + tpu);
        }
        return createSample(1 - sptpu, s, t, u);
    }","  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1941L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[0];
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        tetrahedronSampler0.sample();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException(""org.apache.commons.rng.sampling.shape.TetrahedronSampler"", e);
      }
  }"
1045,"    public static TetrahedronSampler of(UniformRandomProvider rng,
                                        double[] a,
                                        double[] b,
                                        double[] c,
                                        double[] d) {
        // Must be 3D
        Coordinates.requireLength(a, THREE_D, VERTEX_A);
        Coordinates.requireLength(b, THREE_D, VERTEX_B);
        Coordinates.requireLength(c, THREE_D, VERTEX_C);
        Coordinates.requireLength(d, THREE_D, VERTEX_D);
        // Detect non-finite vertices
        Coordinates.requireFinite(a, VERTEX_A);
        Coordinates.requireFinite(b, VERTEX_B);
        Coordinates.requireFinite(c, VERTEX_C);
        Coordinates.requireFinite(d, VERTEX_D);
        return new TetrahedronSampler(rng, a, b, c, d);
    }","  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        TetrahedronSampler.of(jDKRandomWrapper0, (double[]) null, (double[]) null, (double[]) null, (double[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.shape.Coordinates"", e);
      }
  }"
1046,"    TetrahedronSampler(UniformRandomProvider rng, double[] a, double[] b, double[] c, double[] d) {
        // Defensive copy
        this.a = a.clone();
        this.b = b.clone();
        this.c = c.clone();
        this.d = d.clone();
        this.rng = rng;
    }","  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      TetrahedronSampler tetrahedronSampler0 = null;
      try {
        tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, (double[]) null, (double[]) null, (double[]) null, (double[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.shape.TetrahedronSampler"", e);
      }
  }"
1047,"    TetrahedronSampler(UniformRandomProvider rng, double[] a, double[] b, double[] c, double[] d) {
        // Defensive copy
        this.a = a.clone();
        this.b = b.clone();
        this.c = c.clone();
        this.d = d.clone();
        this.rng = rng;
    }","  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      TetrahedronSampler tetrahedronSampler0 = null;
      try {
        tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, (TetrahedronSampler) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.sampling.shape.TetrahedronSampler"", e);
      }
  }"
1048,"    public TetrahedronSampler withUniformRandomProvider(UniformRandomProvider rng) {
        return new TetrahedronSampler(rng, this);
    }","  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double[] doubleArray0 = new double[15];
      TetrahedronSampler tetrahedronSampler0 = new TetrahedronSampler(jDKRandomWrapper0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      TetrahedronSampler tetrahedronSampler1 = tetrahedronSampler0.withUniformRandomProvider(jDKRandomWrapper0);
}"
1049,"    public long nextLong() {
        return rng.nextLong();
    }","  public void test0()  throws Throwable  {
      Random.setNextRandom(2147483646);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      long long0 = jDKRandomWrapper0.nextLong(611L);
}"
1050,"    public long nextLong() {
        return rng.nextLong();
    }","  public void test1()  throws Throwable  {
      Random.setNextRandom(2147483646);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      long long0 = jDKRandomWrapper0.nextLong(611L);
      long long1 = jDKRandomWrapper0.nextLong(1L);
}"
1051,"    public long nextLong() {
        return rng.nextLong();
    }","  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        jDKRandomWrapper0.nextLong((-487L));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Must be strictly positive: -487
         //
         verifyException(""org.apache.commons.rng.simple.JDKRandomWrapper"", e);
      }
  }"
1052,"    public void nextBytes(byte[] bytes) {
        rng.nextBytes(bytes);
    }","  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      byte[] byteArray0 = new byte[7];
      jDKRandomWrapper0.nextBytes(byteArray0, (int) (byte)0, (int) (byte)0);
}"
1053,"    public long nextLong() {
        return rng.nextLong();
    }","  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      long long0 = jDKRandomWrapper0.nextLong((long) 1);
}"
1054,"    public long nextLong() {
        return rng.nextLong();
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      long long0 = jDKRandomWrapper0.nextLong((long) 1);
      long long1 = jDKRandomWrapper0.nextLong();
}"
1055,"    public long nextLong() {
        return rng.nextLong();
    }","  public void test6()  throws Throwable  {
      Random.setNextRandom(2147483646);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      long long0 = jDKRandomWrapper0.nextLong(611L);
}"
1056,"    public long nextLong() {
        return rng.nextLong();
    }","  public void test7()  throws Throwable  {
      Random.setNextRandom(2147483646);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      long long0 = jDKRandomWrapper0.nextLong(611L);
      long long1 = jDKRandomWrapper0.nextLong();
}"
1057,"    public int nextInt() {
        return rng.nextInt();
    }","  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(597L);
      mockRandom0.nextLong();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt((-645));
}"
1058,"    public long nextLong() {
        return rng.nextLong();
    }","  public void test9()  throws Throwable  {
      Random.setNextRandom(2147483646);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      long long0 = jDKRandomWrapper0.nextLong(611L);
}"
1059,"    public int nextInt() {
        return rng.nextInt();
    }","  public void test10()  throws Throwable  {
      Random.setNextRandom(2147483646);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      long long0 = jDKRandomWrapper0.nextLong(611L);
      int int0 = jDKRandomWrapper0.nextInt(2734);
}"
1060,"    public int nextInt() {
        return rng.nextInt();
    }","  public void test11()  throws Throwable  {
      Random.setNextRandom(2147483646);
      MockRandom mockRandom0 = new MockRandom(256L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextFloat();
      int int0 = jDKRandomWrapper0.nextInt();
      int int1 = jDKRandomWrapper0.nextInt();
}"
1061,"    public float nextFloat() {
        return rng.nextFloat();
    }","  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4101L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextLong();
      float float0 = jDKRandomWrapper0.nextFloat();
}"
1062,"    public float nextFloat() {
        return rng.nextFloat();
    }","  public void test13()  throws Throwable  {
      Random.setNextRandom(2147483646);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextLong(611L);
      float float0 = jDKRandomWrapper0.nextFloat();
}"
1063,"    public long nextLong() {
        return rng.nextLong();
    }","  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      long long0 = jDKRandomWrapper0.nextLong((long) 1);
}"
1064,"    public double nextDouble() {
        return rng.nextDouble();
    }","  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      long long0 = jDKRandomWrapper0.nextLong((long) 1);
      double double0 = jDKRandomWrapper0.nextDouble();
}"
1065,"    public double nextDouble() {
        return rng.nextDouble();
    }","  public void test16()  throws Throwable  {
      Random.setNextRandom((-2147483645));
      MockRandom mockRandom0 = new MockRandom((-2147483645));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      jDKRandomWrapper0.nextInt();
      byte[] byteArray0 = new byte[8];
      jDKRandomWrapper0.nextBytes(byteArray0);
      double double0 = jDKRandomWrapper0.nextDouble();
}"
1066,"    public long nextLong() {
        return rng.nextLong();
    }","  public void test17()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      // Undeclared exception!
      try { 
        jDKRandomWrapper0.nextLong(1748L);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1067,"    public int nextInt() {
        return rng.nextInt();
    }","  public void test18()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      // Undeclared exception!
      try { 
        jDKRandomWrapper0.nextInt(1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.JDKRandomWrapper"", e);
      }
  }"
1068,"    public int nextInt() {
        return rng.nextInt();
    }","  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        jDKRandomWrapper0.nextInt(0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1069,"    public int nextInt() {
        return rng.nextInt();
    }","  public void test20()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      // Undeclared exception!
      try { 
        jDKRandomWrapper0.nextInt();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.JDKRandomWrapper"", e);
      }
  }"
1070,"    public float nextFloat() {
        return rng.nextFloat();
    }","  public void test21()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      // Undeclared exception!
      try { 
        jDKRandomWrapper0.nextFloat();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.JDKRandomWrapper"", e);
      }
  }"
1071,"    public double nextDouble() {
        return rng.nextDouble();
    }","  public void test22()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      // Undeclared exception!
      try { 
        jDKRandomWrapper0.nextDouble();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.JDKRandomWrapper"", e);
      }
  }"
1072,"    public void nextBytes(byte[] bytes) {
        rng.nextBytes(bytes);
    }","  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        jDKRandomWrapper0.nextBytes(byteArray0, (-87), (-87));
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.JDKRandomWrapper"", e);
      }
  }"
1073,"    public void nextBytes(byte[] bytes) {
        rng.nextBytes(bytes);
    }","  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-219L));
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        jDKRandomWrapper0.nextBytes(byteArray0, (int) (byte)116, (int) (byte)0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }"
1074,"    public void nextBytes(byte[] bytes) {
        rng.nextBytes(bytes);
    }","  public void test25()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        jDKRandomWrapper0.nextBytes(byteArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.JDKRandomWrapper"", e);
      }
  }"
1075,"    public boolean nextBoolean() {
        return rng.nextBoolean();
    }","  public void test26()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      // Undeclared exception!
      try { 
        jDKRandomWrapper0.nextBoolean();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.JDKRandomWrapper"", e);
      }
  }"
1076,"    public long nextLong() {
        return rng.nextLong();
    }","  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      // Undeclared exception!
      try { 
        jDKRandomWrapper0.nextLong((long) 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Must be strictly positive: 0
         //
         verifyException(""org.apache.commons.rng.simple.JDKRandomWrapper"", e);
      }
  }"
1077,"    public float nextFloat() {
        return rng.nextFloat();
    }","  public void test28()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      float float0 = jDKRandomWrapper0.nextFloat();
}"
1078,"    public double nextDouble() {
        return rng.nextDouble();
    }","  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      double double0 = jDKRandomWrapper0.nextDouble();
}"
1079,"    public int nextInt() {
        return rng.nextInt();
    }","  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt(1);
}"
1080,"    public int nextInt() {
        return rng.nextInt();
    }","  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = jDKRandomWrapper0.nextInt();
}"
1081,"    public boolean nextBoolean() {
        return rng.nextBoolean();
    }","  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      boolean boolean0 = jDKRandomWrapper0.nextBoolean();
}"
1082,"    public void nextBytes(byte[] bytes) {
        rng.nextBytes(bytes);
    }","  public void test33()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        jDKRandomWrapper0.nextBytes(byteArray0, (int) (byte)89, (int) (byte)89);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.JDKRandomWrapper"", e);
      }
  }"
1083,"    public long nextLong() {
        return rng.nextLong();
    }","  public void test34()  throws Throwable  {
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper((java.util.Random) null);
      // Undeclared exception!
      try { 
        jDKRandomWrapper0.nextLong();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1084,"    protected int next(int n) {
        synchronized (this) {
            return delegate.nextInt() >>> (32 - n);
        }
    }","  public void test0()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.MT_64;
      JDKRandomBridge jDKRandomBridge0 = new JDKRandomBridge(randomSource0, (Object) null);
      jDKRandomBridge0.nextGaussian();
      int int0 = 4373;
      int int1 = jDKRandomBridge0.next((-126));
      double double0 = (-2450.0);
      // Undeclared exception!
      try { 
        jDKRandomBridge0.doubles((long) int1, (double) int1, double0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException(""java.util.Random"", e);
      }
  }"
1085,"    public JDKRandomBridge(RandomSource source,
                           Object seed) {
        this.source = source;
        delegate = source.create(seed);
        isInitialized = true;
    }","  public void test1()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.PCG_XSH_RS_32_OS;
      JDKRandomBridge jDKRandomBridge0 = null;
      try {
        jDKRandomBridge0 = new JDKRandomBridge(randomSource0, randomSource0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // Unrecognized seed type: PCG_XSH_RS_32_OS
         //
         verifyException(""org.apache.commons.rng.simple.internal.NativeSeedType"", e);
      }
  }"
1086,"    public JDKRandomBridge(RandomSource source,
                           Object seed) {
        this.source = source;
        delegate = source.create(seed);
        isInitialized = true;
    }","  public void test2()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.TWO_CMRES_SELECT;
      JDKRandomBridge jDKRandomBridge0 = null;
      try {
        jDKRandomBridge0 = new JDKRandomBridge(randomSource0, (Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
1087,"    public synchronized void setSeed(long seed) {
        if (isInitialized) {
            delegate = source.create(seed);

            // Force the clearing of the ""haveNextNextGaussian"" flag
            // (cf. Javadoc of the base class); the value passed here
            // is irrelevant (since it will not be used).
            super.setSeed(0L);
        }
    }","  public void test3()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.SPLIT_MIX_64;
      JDKRandomBridge jDKRandomBridge0 = new JDKRandomBridge(randomSource0, (Object) null);
      jDKRandomBridge0.setSeed(92);
  }"
1088,"    public JDKRandomBridge(RandomSource source,
                           Object seed) {
        this.source = source;
        delegate = source.create(seed);
        isInitialized = true;
    }","  public void test4()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.PCG_RXS_M_XS_64;
      JDKRandomBridge jDKRandomBridge0 = null;
      try {
        jDKRandomBridge0 = new JDKRandomBridge((RandomSource) null, randomSource0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.JDKRandomBridge"", e);
      }
  }"
1089,,"  public void test0()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.valueOf(""XO_RO_SHI_RO_1024_SS"");
}"
1090,"    public boolean isLongJumpable() {
        return isAssignableTo(org.apache.commons.rng.LongJumpableUniformRandomProvider.class);
    }","  public void test1()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.XO_SHI_RO_256_PLUS;
      boolean boolean0 = randomSource0.isLongJumpable();
}"
1091,"    public boolean isJumpable() {
        return isAssignableTo(org.apache.commons.rng.JumpableUniformRandomProvider.class);
    }","  public void test2()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.XO_RO_SHI_RO_128_PP;
      boolean boolean0 = randomSource0.isJumpable();
}"
1092,"    ProviderBuilder.RandomSourceInternal getInternalIdentifier() {
        return internalIdentifier;
    }","  public void test3()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.MSWS;
      randomSource0.getInternalIdentifier();
  }"
1093,"    public static long[] createLongArray(int n) {
        return SeedFactory.createLongArray(n);
    }","  public void test4()  throws Throwable  {
      long[] longArray0 = RandomSource.createLongArray(47);
}"
1094,"    public static long[] createLongArray(int n) {
        return SeedFactory.createLongArray(n);
    }","  public void test5()  throws Throwable  {
      long[] longArray0 = RandomSource.createLongArray(0);
}"
1095,"    public static int[] createIntArray(int n) {
        return SeedFactory.createIntArray(n);
    }","  public void test6()  throws Throwable  {
      int[] intArray0 = RandomSource.createIntArray(1365);
}"
1096,"    public static int[] createIntArray(int n) {
        return SeedFactory.createIntArray(n);
    }","  public void test7()  throws Throwable  {
      int[] intArray0 = RandomSource.createIntArray(0);
}"
1097,"    public RestorableUniformRandomProvider create() {
        return ProviderBuilder.create(getInternalIdentifier());
    }","  public void test8()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.PCG_XSH_RS_32_OS;
      RestorableUniformRandomProvider restorableUniformRandomProvider0 = RandomSource.create(randomSource0, (Object) null, (Object[]) null);
}"
1098,"    public RestorableUniformRandomProvider create() {
        return ProviderBuilder.create(getInternalIdentifier());
    }","  public void test9()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.WELL_44497_B;
      Object[] objectArray0 = new Object[0];
      RestorableUniformRandomProvider restorableUniformRandomProvider0 = randomSource0.create((Object) null, objectArray0);
}"
1099,"    public byte[] createSeed() {
        return internalIdentifier.createSeedBytes();
    }","  public void test10()  throws Throwable  {
      XoRoShiRo128Plus xoRoShiRo128Plus0 = new XoRoShiRo128Plus(0L, 0L);
      RandomSource randomSource0 = RandomSource.MSWS;
      // Undeclared exception!
      randomSource0.createSeed((UniformRandomProvider) xoRoShiRo128Plus0);
  }"
1100,"    public byte[] createSeed() {
        return internalIdentifier.createSeedBytes();
    }","  public void test11()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.XO_RO_SHI_RO_1024_SS;
      // Undeclared exception!
      try { 
        randomSource0.createSeed((UniformRandomProvider) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.SeedFactory"", e);
      }
  }"
1101,"    public static long[] createLongArray(int n) {
        return SeedFactory.createLongArray(n);
    }","  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomSource.createLongArray((-279458192));
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.SeedFactory"", e);
      }
  }"
1102,"    public static int[] createIntArray(int n) {
        return SeedFactory.createIntArray(n);
    }","  public void test13()  throws Throwable  {
      // Undeclared exception!
      RandomSource.createIntArray(100747837);
  }"
1103,"    public RestorableUniformRandomProvider create() {
        return ProviderBuilder.create(getInternalIdentifier());
    }","  public void test14()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.TWO_CMRES;
      UniformRandomProvider uniformRandomProvider0 = RandomSource.unrestorable((UniformRandomProvider) null);
      RandomSource[] randomSourceArray0 = RandomSource.values();
      // Undeclared exception!
      try { 
        RandomSource.create(randomSource0, (Object) uniformRandomProvider0, (Object[]) randomSourceArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1104,"    public RestorableUniformRandomProvider create() {
        return ProviderBuilder.create(getInternalIdentifier());
    }","  public void test15()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.PCG_XSH_RS_32_OS;
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        RandomSource.create(randomSource0, (Object) null, objectArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
1105,"    public RestorableUniformRandomProvider create() {
        return ProviderBuilder.create(getInternalIdentifier());
    }","  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomSource.create((RandomSource) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.RandomSource"", e);
      }
  }"
1106,"    public RestorableUniformRandomProvider create() {
        return ProviderBuilder.create(getInternalIdentifier());
    }","  public void test17()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.TWO_CMRES_SELECT;
      // Undeclared exception!
      try { 
        RandomSource.create(randomSource0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
1107,"    public RestorableUniformRandomProvider create() {
        return ProviderBuilder.create(getInternalIdentifier());
    }","  public void test18()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.TWO_CMRES;
      UniformRandomProvider uniformRandomProvider0 = RandomSource.unrestorable((UniformRandomProvider) null);
      // Undeclared exception!
      try { 
        randomSource0.create((Object) uniformRandomProvider0, (Object[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1108,"    public RestorableUniformRandomProvider create() {
        return ProviderBuilder.create(getInternalIdentifier());
    }","  public void test19()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.WELL_44497_A;
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        randomSource0.create((Object) null, objectArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
1109,"    public RestorableUniformRandomProvider create() {
        return ProviderBuilder.create(getInternalIdentifier());
    }","  public void test20()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.TWO_CMRES_SELECT;
      // Undeclared exception!
      try { 
        randomSource0.create();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
1110,"    public boolean isJumpable() {
        return isAssignableTo(org.apache.commons.rng.JumpableUniformRandomProvider.class);
    }","  public void test21()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.TWO_CMRES;
      boolean boolean0 = randomSource0.isJumpable();
}"
1111,"    public RestorableUniformRandomProvider create() {
        return ProviderBuilder.create(getInternalIdentifier());
    }","  public void test22()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.XOR_SHIFT_1024_S;
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        RandomSource.create(randomSource0, (Object) randomSource0, objectArray0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // Unrecognized seed type: XOR_SHIFT_1024_S
         //
         verifyException(""org.apache.commons.rng.simple.internal.NativeSeedType"", e);
      }
  }"
1112,"    public boolean isLongJumpable() {
        return isAssignableTo(org.apache.commons.rng.LongJumpableUniformRandomProvider.class);
    }","  public void test23()  throws Throwable  {
      RandomSource[] randomSourceArray0 = RandomSource.values();
      boolean boolean0 = randomSourceArray0[0].isLongJumpable();
}"
1113,"    public static int[] createIntArray(int n) {
        return SeedFactory.createIntArray(n);
    }","  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomSource.createIntArray((-3450));
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.SeedFactory"", e);
      }
  }"
1114,"    public RestorableUniformRandomProvider create() {
        return ProviderBuilder.create(getInternalIdentifier());
    }","  public void test25()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.MSWS;
      RestorableUniformRandomProvider restorableUniformRandomProvider0 = RandomSource.create(randomSource0);
}"
1115,"    public boolean isNativeSeed(Object seed) {
        return internalIdentifier.isNativeSeed(seed);
    }","  public void test26()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.WELL_44497_A;
      boolean boolean0 = randomSource0.isNativeSeed(randomSource0);
}"
1116,"    public static long[] createLongArray(int n) {
        return SeedFactory.createLongArray(n);
    }","  public void test27()  throws Throwable  {
      // Undeclared exception!
      RandomSource.createLongArray(44497);
  }"
1117,"    public RestorableUniformRandomProvider create() {
        return ProviderBuilder.create(getInternalIdentifier());
    }","  public void test28()  throws Throwable  {
      XoRoShiRo128Plus xoRoShiRo128Plus0 = new XoRoShiRo128Plus((-1884L), (-1884L));
      UniformRandomProvider uniformRandomProvider0 = RandomSource.unrestorable(xoRoShiRo128Plus0);
      RandomSource[] randomSourceArray0 = RandomSource.values();
      RandomSource randomSource0 = RandomSource.TWO_CMRES_SELECT;
      // Undeclared exception!
      try { 
        randomSource0.create((Object) uniformRandomProvider0, (Object[]) randomSourceArray0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // Unrecognized seed type: org.apache.commons.rng.core.source64.XoRoShiRo128Plus@0000000001
         //
         verifyException(""org.apache.commons.rng.simple.internal.NativeSeedType"", e);
      }
  }"
1118,"    public byte[] createSeed() {
        return internalIdentifier.createSeedBytes();
    }","  public void test29()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.XOR_SHIFT_1024_S;
      RestorableUniformRandomProvider restorableUniformRandomProvider0 = randomSource0.create();
      UniformRandomProvider uniformRandomProvider0 = RandomSource.unrestorable(restorableUniformRandomProvider0);
      byte[] byteArray0 = randomSource0.createSeed(uniformRandomProvider0);
}"
1119,"    public byte[] createSeed() {
        return internalIdentifier.createSeedBytes();
    }","  public void test30()  throws Throwable  {
      XoRoShiRo128Plus xoRoShiRo128Plus0 = new XoRoShiRo128Plus((-1884L), (-1884L));
      UniformRandomProvider uniformRandomProvider0 = RandomSource.unrestorable(xoRoShiRo128Plus0);
      RandomSource randomSource0 = RandomSource.MSWS;
      byte[] byteArray0 = randomSource0.createSeed(uniformRandomProvider0);
}"
1120,"    public static UniformRandomProvider current(RandomSource source) {
        ThreadLocal<UniformRandomProvider> rng = SOURCES.get(source);
        // Implement double-checked locking:
        // https://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java
        if (rng == null) {
            // Do the checks on the source here since it is an edge case
            // and the EnumMap handles null (returning null).
            if (source == null) {
                throw new IllegalArgumentException(""Random source is null"");
            }

            synchronized (SOURCES) {
                rng = SOURCES.get(source);
                if (rng == null) {
                    rng = new ThreadLocalRng(source);
                    SOURCES.put(source, rng);
                }
            }
        }
        return rng.get();
    }","  public void test0()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.TWO_CMRES_SELECT;
      // Undeclared exception!
      try { 
        ThreadLocalRandomSource.current(randomSource0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
1121,"    public static UniformRandomProvider current(RandomSource source) {
        ThreadLocal<UniformRandomProvider> rng = SOURCES.get(source);
        // Implement double-checked locking:
        // https://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java
        if (rng == null) {
            // Do the checks on the source here since it is an edge case
            // and the EnumMap handles null (returning null).
            if (source == null) {
                throw new IllegalArgumentException(""Random source is null"");
            }

            synchronized (SOURCES) {
                rng = SOURCES.get(source);
                if (rng == null) {
                    rng = new ThreadLocalRng(source);
                    SOURCES.put(source, rng);
                }
            }
        }
        return rng.get();
    }","  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadLocalRandomSource.current((RandomSource) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Random source is null
         //
         verifyException(""org.apache.commons.rng.simple.ThreadLocalRandomSource"", e);
      }
  }"
1122,"    public static UniformRandomProvider current(RandomSource source) {
        ThreadLocal<UniformRandomProvider> rng = SOURCES.get(source);
        // Implement double-checked locking:
        // https://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java
        if (rng == null) {
            // Do the checks on the source here since it is an edge case
            // and the EnumMap handles null (returning null).
            if (source == null) {
                throw new IllegalArgumentException(""Random source is null"");
            }

            synchronized (SOURCES) {
                rng = SOURCES.get(source);
                if (rng == null) {
                    rng = new ThreadLocalRng(source);
                    SOURCES.put(source, rng);
                }
            }
        }
        return rng.get();
    }","  public void test2()  throws Throwable  {
      RandomSource randomSource0 = RandomSource.TWO_CMRES;
      TwoCmres twoCmres0 = (TwoCmres)ThreadLocalRandomSource.current(randomSource0);
}"
1123,"    public OUT convert(IN seed) {
        final TRANS trans = first.convert(seed);
        return second.convert(trans);
    }","  public void test0()  throws Throwable  {
      NoOpConverter<String> noOpConverter0 = new NoOpConverter<String>();
      SeedConverterComposer<String, String, String> seedConverterComposer0 = new SeedConverterComposer<String, String, String>(noOpConverter0, noOpConverter0);
      String string0 = seedConverterComposer0.convert(""org.apache.commons.rng.simple.internal.Long2Int"");
}"
1124,"    public OUT convert(IN seed) {
        final TRANS trans = first.convert(seed);
        return second.convert(trans);
    }","  public void test1()  throws Throwable  {
      SeedConverter<Integer, Object> seedConverter0 = (SeedConverter<Integer, Object>) mock(SeedConverter.class, new ViolatedAssumptionAnswer());
      SeedConverterComposer<Object, Integer, Object> seedConverterComposer0 = new SeedConverterComposer<Object, Integer, Object>((SeedConverter<Object, Integer>) null, seedConverter0);
      // Undeclared exception!
      try { 
        seedConverterComposer0.convert((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.SeedConverterComposer"", e);
      }
  }"
1125,"    public OUT convert(IN seed) {
        final TRANS trans = first.convert(seed);
        return second.convert(trans);
    }","  public void test2()  throws Throwable  {
      NoOpConverter<Object> noOpConverter0 = new NoOpConverter<Object>();
      SeedConverter<Object, String> seedConverter0 = (SeedConverter<Object, String>) mock(SeedConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(seedConverter0).convert(any());
      SeedConverter<String, String> seedConverter1 = (SeedConverter<String, String>) mock(SeedConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(seedConverter1).convert(anyString());
      SeedConverterComposer<Object, String, String> seedConverterComposer0 = new SeedConverterComposer<Object, String, String>(seedConverter0, seedConverter1);
      String string0 = seedConverterComposer0.convert(noOpConverter0);
}"
1126,"    public long[] convert(int[] seed) {
        final int outSize = (seed.length + 1) / 2;
        final long[] out = new long[outSize];
        for (int i = 0; i < outSize; i++) {
            final int lo = seed[i];
            final int hi = outSize + i < seed.length ? seed[outSize + i] : 0;
            out[i] = NumberFactory.makeLong(hi, lo);
        }

        return out;
    }","  public void test0()  throws Throwable  {
      IntArray2LongArray intArray2LongArray0 = new IntArray2LongArray();
      int[] intArray0 = new int[2];
      intArray0[0] = 3628;
      long[] longArray0 = intArray2LongArray0.convert(intArray0);
}"
1127,"    public long[] convert(int[] seed) {
        final int outSize = (seed.length + 1) / 2;
        final long[] out = new long[outSize];
        for (int i = 0; i < outSize; i++) {
            final int lo = seed[i];
            final int hi = outSize + i < seed.length ? seed[outSize + i] : 0;
            out[i] = NumberFactory.makeLong(hi, lo);
        }

        return out;
    }","  public void test1()  throws Throwable  {
      IntArray2LongArray intArray2LongArray0 = new IntArray2LongArray();
      int[] intArray0 = new int[0];
      long[] longArray0 = intArray2LongArray0.convert(intArray0);
}"
1128,"    public long[] convert(int[] seed) {
        final int outSize = (seed.length + 1) / 2;
        final long[] out = new long[outSize];
        for (int i = 0; i < outSize; i++) {
            final int lo = seed[i];
            final int hi = outSize + i < seed.length ? seed[outSize + i] : 0;
            out[i] = NumberFactory.makeLong(hi, lo);
        }

        return out;
    }","  public void test2()  throws Throwable  {
      IntArray2LongArray intArray2LongArray0 = new IntArray2LongArray();
      // Undeclared exception!
      try { 
        intArray2LongArray0.convert((int[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.IntArray2LongArray"", e);
      }
  }"
1129,"    public long[] convert(int[] seed) {
        final int outSize = (seed.length + 1) / 2;
        final long[] out = new long[outSize];
        for (int i = 0; i < outSize; i++) {
            final int lo = seed[i];
            final int hi = outSize + i < seed.length ? seed[outSize + i] : 0;
            out[i] = NumberFactory.makeLong(hi, lo);
        }

        return out;
    }","  public void test3()  throws Throwable  {
      IntArray2LongArray intArray2LongArray0 = new IntArray2LongArray();
      int[] intArray0 = new int[6];
      long[] longArray0 = intArray2LongArray0.convert(intArray0);
}"
1130,"    public long[] convert(int[] seed) {
        final int outSize = (seed.length + 1) / 2;
        final long[] out = new long[outSize];
        for (int i = 0; i < outSize; i++) {
            final int lo = seed[i];
            final int hi = outSize + i < seed.length ? seed[outSize + i] : 0;
            out[i] = NumberFactory.makeLong(hi, lo);
        }

        return out;
    }","  public void test4()  throws Throwable  {
      IntArray2LongArray intArray2LongArray0 = new IntArray2LongArray();
      int[] intArray0 = new int[1];
      long[] longArray0 = intArray2LongArray0.convert(intArray0);
}"
1131,"    static void ensureNonZero(int[] seed) {
        // Zero occurs 1 in 2^32
        if (seed.length != 0 && seed[0] == 0) {
            do {
                seed[0] = createInt();
            } while (seed[0] == 0);
        }
    }","  public void test0()  throws Throwable  {
      XoShiRo256Plus xoShiRo256Plus0 = new XoShiRo256Plus(3895567441539718553L, 0L, 276L, 0L);
      long long0 = SeedFactory.ensureNonZero(xoShiRo256Plus0, 0L);
}"
1132,"    static byte[] createByteArray(UniformRandomProvider source,
                                  int n) {
        final byte[] seed = new byte[n];
        source.nextBytes(seed);
        // If the seed is zero it is assumed the input source RNG is either broken
        // or the seed is small and it was zero by chance. Revert to the built-in
        // source of randomness to ensure it is non-zero.
        ensureNonZero(seed);
        return seed;
    }","  public void test1()  throws Throwable  {
      long[] longArray0 = new long[5];
      PcgRxsMXs64 pcgRxsMXs64_0 = new PcgRxsMXs64(longArray0);
      byte[] byteArray0 = SeedFactory.createByteArray(pcgRxsMXs64_0, 737);
}"
1133,"    static void ensureNonZero(int[] seed) {
        // Zero occurs 1 in 2^32
        if (seed.length != 0 && seed[0] == 0) {
            do {
                seed[0] = createInt();
            } while (seed[0] == 0);
        }
    }","  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        SeedFactory.ensureNonZero((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.SeedFactory"", e);
      }
  }"
1134,"    static void ensureNonZero(int[] seed) {
        // Zero occurs 1 in 2^32
        if (seed.length != 0 && seed[0] == 0) {
            do {
                seed[0] = createInt();
            } while (seed[0] == 0);
        }
    }","  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        SeedFactory.ensureNonZero((int[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.SeedFactory"", e);
      }
  }"
1135,"    static void ensureNonZero(int[] seed) {
        // Zero occurs 1 in 2^32
        if (seed.length != 0 && seed[0] == 0) {
            do {
                seed[0] = createInt();
            } while (seed[0] == 0);
        }
    }","  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        SeedFactory.ensureNonZero((RandomLongSource) null, 0L);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1136,"    public static int[] createIntArray(int n) {
        final int[] seed = new int[n];
        // Compute the size that can be filled with complete blocks
        final int blockSize = INT_ARRAY_BLOCK_SIZE * (n / INT_ARRAY_BLOCK_SIZE);
        int i = 0;
        while (i < blockSize) {
            final int end = i + INT_ARRAY_BLOCK_SIZE;
            fillIntArray(seed, i, end);
            i = end;
        }
        // Final fill only if required
        if (i != n) {
            fillIntArray(seed, i, n);
        }
        ensureNonZero(seed);
        return seed;
    }","  public void test5()  throws Throwable  {
      // Undeclared exception!
      SeedFactory.createIntArray(115200);
  }"
1137,"    static byte[] createByteArray(UniformRandomProvider source,
                                  int n) {
        final byte[] seed = new byte[n];
        source.nextBytes(seed);
        // If the seed is zero it is assumed the input source RNG is either broken
        // or the seed is small and it was zero by chance. Revert to the built-in
        // source of randomness to ensure it is non-zero.
        ensureNonZero(seed);
        return seed;
    }","  public void test6()  throws Throwable  {
      XoShiRo256StarStar xoShiRo256StarStar0 = new XoShiRo256StarStar(64424509454L, 64424509454L, 1, 64424509454L);
      // Undeclared exception!
      SeedFactory.createByteArray(xoShiRo256StarStar0, 86400);
  }"
1138,"    static byte[] createByteArray(UniformRandomProvider source,
                                  int n) {
        final byte[] seed = new byte[n];
        source.nextBytes(seed);
        // If the seed is zero it is assumed the input source RNG is either broken
        // or the seed is small and it was zero by chance. Revert to the built-in
        // source of randomness to ensure it is non-zero.
        ensureNonZero(seed);
        return seed;
    }","  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        SeedFactory.createByteArray((UniformRandomProvider) null, 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.SeedFactory"", e);
      }
  }"
1139,"    static byte[] createByteArray(UniformRandomProvider source,
                                  int n) {
        final byte[] seed = new byte[n];
        source.nextBytes(seed);
        // If the seed is zero it is assumed the input source RNG is either broken
        // or the seed is small and it was zero by chance. Revert to the built-in
        // source of randomness to ensure it is non-zero.
        ensureNonZero(seed);
        return seed;
    }","  public void test8()  throws Throwable  {
      XoShiRo256PlusPlus xoShiRo256PlusPlus0 = new XoShiRo256PlusPlus((-7142163116770761254L), (-7142163116770761254L), (-7142163116770761254L), (-7142163116770761254L));
      // Undeclared exception!
      try { 
        SeedFactory.createByteArray(xoShiRo256PlusPlus0, (-1195));
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.SeedFactory"", e);
      }
  }"
1140,"    public static long[] createLongArray(int n) {
        final long[] seed = new long[n];
        // Compute the size that can be filled with complete blocks
        final int blockSize = LONG_ARRAY_BLOCK_SIZE * (n / LONG_ARRAY_BLOCK_SIZE);
        int i = 0;
        while (i < blockSize) {
            final int end = i + LONG_ARRAY_BLOCK_SIZE;
            fillLongArray(seed, i, end);
            i = end;
        }
        // Final fill only if required
        if (i != n) {
            fillLongArray(seed, i, n);
        }
        ensureNonZero(seed);
        return seed;
    }","  public void test9()  throws Throwable  {
      SeedFactory.createIntArray(1);
      XoShiRo256StarStar xoShiRo256StarStar0 = new XoShiRo256StarStar(64424509454L, 64424509454L, 1, 64424509454L);
      xoShiRo256StarStar0.nextLong(64424509454L);
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)0;
      xoShiRo256StarStar0.toString();
      byteArray0[3] = (byte)14;
      xoShiRo256StarStar0.nextBytes(byteArray0);
      SeedFactory.createByteArray(xoShiRo256StarStar0, 1);
      xoShiRo256StarStar0.saveState();
      xoShiRo256StarStar0.nextFloat();
      // Undeclared exception!
      try { 
        SeedFactory.createLongArray((byte) (-61));
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.SeedFactory"", e);
      }
  }"
1141,"    static void ensureNonZero(int[] seed) {
        // Zero occurs 1 in 2^32
        if (seed.length != 0 && seed[0] == 0) {
            do {
                seed[0] = createInt();
            } while (seed[0] == 0);
        }
    }","  public void test10()  throws Throwable  {
      long[] longArray0 = new long[19];
      XorShift1024Star xorShift1024Star0 = new XorShift1024Star(longArray0);
      // Undeclared exception!
      SeedFactory.ensureNonZero(xorShift1024Star0, 0L);
  }"
1142,"    static byte[] createByteArray(UniformRandomProvider source,
                                  int n) {
        final byte[] seed = new byte[n];
        source.nextBytes(seed);
        // If the seed is zero it is assumed the input source RNG is either broken
        // or the seed is small and it was zero by chance. Revert to the built-in
        // source of randomness to ensure it is non-zero.
        ensureNonZero(seed);
        return seed;
    }","  public void test11()  throws Throwable  {
      long[] longArray0 = new long[3];
      XorShift1024Star xorShift1024Star0 = new XorShift1024Star(longArray0);
      byte[] byteArray0 = SeedFactory.createByteArray(xorShift1024Star0, 1807);
}"
1143,"    static byte[] createByteArray(UniformRandomProvider source,
                                  int n) {
        final byte[] seed = new byte[n];
        source.nextBytes(seed);
        // If the seed is zero it is assumed the input source RNG is either broken
        // or the seed is small and it was zero by chance. Revert to the built-in
        // source of randomness to ensure it is non-zero.
        ensureNonZero(seed);
        return seed;
    }","  public void test12()  throws Throwable  {
      XoShiRo512StarStar xoShiRo512StarStar0 = new XoShiRo512StarStar(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
      byte[] byteArray0 = SeedFactory.createByteArray(xoShiRo512StarStar0, 0);
}"
1144,"    public static long[] createLongArray(int n) {
        final long[] seed = new long[n];
        // Compute the size that can be filled with complete blocks
        final int blockSize = LONG_ARRAY_BLOCK_SIZE * (n / LONG_ARRAY_BLOCK_SIZE);
        int i = 0;
        while (i < blockSize) {
            final int end = i + LONG_ARRAY_BLOCK_SIZE;
            fillLongArray(seed, i, end);
            i = end;
        }
        // Final fill only if required
        if (i != n) {
            fillLongArray(seed, i, n);
        }
        ensureNonZero(seed);
        return seed;
    }","  public void test13()  throws Throwable  {
      SeedFactory.createLongArray(2031);
      SeedFactory.createLongArray(2031);
      SeedFactory.createLongArray(2031);
      // Undeclared exception!
      SeedFactory.createLongArray(2031);
  }"
1145,"    public static long[] createLongArray(int n) {
        final long[] seed = new long[n];
        // Compute the size that can be filled with complete blocks
        final int blockSize = LONG_ARRAY_BLOCK_SIZE * (n / LONG_ARRAY_BLOCK_SIZE);
        int i = 0;
        while (i < blockSize) {
            final int end = i + LONG_ARRAY_BLOCK_SIZE;
            fillLongArray(seed, i, end);
            i = end;
        }
        // Final fill only if required
        if (i != n) {
            fillLongArray(seed, i, n);
        }
        ensureNonZero(seed);
        return seed;
    }","  public void test14()  throws Throwable  {
      long[] longArray0 = SeedFactory.createLongArray(0);
}"
1146,"    public static int[] createIntArray(int n) {
        final int[] seed = new int[n];
        // Compute the size that can be filled with complete blocks
        final int blockSize = INT_ARRAY_BLOCK_SIZE * (n / INT_ARRAY_BLOCK_SIZE);
        int i = 0;
        while (i < blockSize) {
            final int end = i + INT_ARRAY_BLOCK_SIZE;
            fillIntArray(seed, i, end);
            i = end;
        }
        // Final fill only if required
        if (i != n) {
            fillIntArray(seed, i, n);
        }
        ensureNonZero(seed);
        return seed;
    }","  public void test15()  throws Throwable  {
      int[] intArray0 = SeedFactory.createIntArray(0);
}"
1147,"    static long createLongHexPermutation(UniformRandomProvider rng) {
        final UnsignedByteProvider provider = new UnsignedByteProvider(rng);
        // Extract upper bits and combine with a second sample
        return NumberFactory.makeLong(createUpperBitsHexPermutation(provider),
                createUpperBitsHexPermutation(provider));
    }","  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1777L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      mockRandom0.nextDouble();
      long long0 = SeedUtils.createLongHexPermutation(jDKRandomWrapper0);
}"
1148,"    static int createIntHexPermutation(UniformRandomProvider rng) {
        final UnsignedByteProvider provider = new UnsignedByteProvider(rng);
        return createUpperBitsHexPermutation(provider);
    }","  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1777L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      mockRandom0.nextDouble();
      long long0 = SeedUtils.createLongHexPermutation(jDKRandomWrapper0);
      int int0 = SeedUtils.createIntHexPermutation(jDKRandomWrapper0);
}"
1149,"    static long createLongHexPermutation(UniformRandomProvider rng) {
        final UnsignedByteProvider provider = new UnsignedByteProvider(rng);
        // Extract upper bits and combine with a second sample
        return NumberFactory.makeLong(createUpperBitsHexPermutation(provider),
                createUpperBitsHexPermutation(provider));
    }","  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1777L);
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      mockRandom0.nextDouble();
      long long0 = SeedUtils.createLongHexPermutation(jDKRandomWrapper0);
      int int0 = SeedUtils.createIntHexPermutation(jDKRandomWrapper0);
      SeedUtils.createIntHexPermutation(jDKRandomWrapper0);
      long long1 = SeedUtils.createLongHexPermutation(jDKRandomWrapper0);
}"
1150,"    static long createLongHexPermutation(UniformRandomProvider rng) {
        final UnsignedByteProvider provider = new UnsignedByteProvider(rng);
        // Extract upper bits and combine with a second sample
        return NumberFactory.makeLong(createUpperBitsHexPermutation(provider),
                createUpperBitsHexPermutation(provider));
    }","  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        SeedUtils.createLongHexPermutation((UniformRandomProvider) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.SeedUtils$UnsignedByteProvider"", e);
      }
  }"
1151,"    static int createIntHexPermutation(UniformRandomProvider rng) {
        final UnsignedByteProvider provider = new UnsignedByteProvider(rng);
        return createUpperBitsHexPermutation(provider);
    }","  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        SeedUtils.createIntHexPermutation((UniformRandomProvider) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.SeedUtils$UnsignedByteProvider"", e);
      }
  }"
1152,"    static int createIntHexPermutation(UniformRandomProvider rng) {
        final UnsignedByteProvider provider = new UnsignedByteProvider(rng);
        return createUpperBitsHexPermutation(provider);
    }","  public void test5()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = SeedUtils.createIntHexPermutation(jDKRandomWrapper0);
}"
1153,"    static long createLongHexPermutation(UniformRandomProvider rng) {
        final UnsignedByteProvider provider = new UnsignedByteProvider(rng);
        // Extract upper bits and combine with a second sample
        return NumberFactory.makeLong(createUpperBitsHexPermutation(provider),
                createUpperBitsHexPermutation(provider));
    }","  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      int int0 = SeedUtils.createIntHexPermutation(jDKRandomWrapper0);
      long long0 = SeedUtils.createLongHexPermutation(jDKRandomWrapper0);
}"
1154,"    public int[] convert(long[] seed) {
        final int[] out = new int[seed.length * 2];
        for (int i = 0; i < seed.length; i++) {
            final long current = seed[i];
            out[i] = NumberFactory.extractLo(current);
            out[seed.length + i] = NumberFactory.extractHi(current);
        }

        return out;
    }","  public void test0()  throws Throwable  {
      LongArray2IntArray longArray2IntArray0 = new LongArray2IntArray();
      long[] longArray0 = new long[8];
      int[] intArray0 = longArray2IntArray0.convert(longArray0);
}"
1155,"    public int[] convert(long[] seed) {
        final int[] out = new int[seed.length * 2];
        for (int i = 0; i < seed.length; i++) {
            final long current = seed[i];
            out[i] = NumberFactory.extractLo(current);
            out[seed.length + i] = NumberFactory.extractHi(current);
        }

        return out;
    }","  public void test1()  throws Throwable  {
      LongArray2IntArray longArray2IntArray0 = new LongArray2IntArray();
      long[] longArray0 = new long[0];
      int[] intArray0 = longArray2IntArray0.convert(longArray0);
}"
1156,"    public int[] convert(long[] seed) {
        final int[] out = new int[seed.length * 2];
        for (int i = 0; i < seed.length; i++) {
            final long current = seed[i];
            out[i] = NumberFactory.extractLo(current);
            out[seed.length + i] = NumberFactory.extractHi(current);
        }

        return out;
    }","  public void test2()  throws Throwable  {
      LongArray2IntArray longArray2IntArray0 = new LongArray2IntArray();
      // Undeclared exception!
      try { 
        longArray2IntArray0.convert((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.LongArray2IntArray"", e);
      }
  }"
1157,"    public SEED convert(SEED seed) {
        return seed;
    }","  public void test0()  throws Throwable  {
      NoOpConverter<String> noOpConverter0 = new NoOpConverter<String>();
      String string0 = noOpConverter0.convert((String) null);
}"
1158,"    public SEED convert(SEED seed) {
        return seed;
    }","  public void test1()  throws Throwable  {
      NoOpConverter<Integer> noOpConverter0 = new NoOpConverter<Integer>();
      Integer integer0 = new Integer((-584));
      Integer integer1 = noOpConverter0.convert(integer0);
}"
1159,"    public int[] convert(byte[] seed) {
        final byte[] tmp = seed.length % INT_SIZE == 0 ?
            seed :
            Arrays.copyOf(seed, INT_SIZE * ((seed.length + INT_SIZE - 1) / INT_SIZE));

        return NumberFactory.makeIntArray(tmp);
    }","  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArray2IntArray byteArray2IntArray0 = new ByteArray2IntArray();
      int[] intArray0 = byteArray2IntArray0.convert(byteArray0);
}"
1160,"    public int[] convert(byte[] seed) {
        final byte[] tmp = seed.length % INT_SIZE == 0 ?
            seed :
            Arrays.copyOf(seed, INT_SIZE * ((seed.length + INT_SIZE - 1) / INT_SIZE));

        return NumberFactory.makeIntArray(tmp);
    }","  public void test1()  throws Throwable  {
      ByteArray2IntArray byteArray2IntArray0 = new ByteArray2IntArray();
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = byteArray2IntArray0.convert(byteArray0);
}"
1161,"    public int[] convert(byte[] seed) {
        final byte[] tmp = seed.length % INT_SIZE == 0 ?
            seed :
            Arrays.copyOf(seed, INT_SIZE * ((seed.length + INT_SIZE - 1) / INT_SIZE));

        return NumberFactory.makeIntArray(tmp);
    }","  public void test2()  throws Throwable  {
      ByteArray2IntArray byteArray2IntArray0 = new ByteArray2IntArray();
      // Undeclared exception!
      try { 
        byteArray2IntArray0.convert((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.ByteArray2IntArray"", e);
      }
  }"
1162,"    public Long convert(long[] seed) {
        long out = 0;
        for (final long s : seed) {
            out ^= s;
        }

        return out;
    }","  public void test0()  throws Throwable  {
      LongArray2Long longArray2Long0 = new LongArray2Long();
      long[] longArray0 = new long[2];
      longArray0[0] = (-944L);
      longArray0[1] = 1180L;
      Long long0 = longArray2Long0.convert(longArray0);
}"
1163,"    public Long convert(long[] seed) {
        long out = 0;
        for (final long s : seed) {
            out ^= s;
        }

        return out;
    }","  public void test1()  throws Throwable  {
      LongArray2Long longArray2Long0 = new LongArray2Long();
      long[] longArray0 = new long[1];
      longArray0[0] = (-226L);
      Long long0 = longArray2Long0.convert(longArray0);
}"
1164,"    public Long convert(long[] seed) {
        long out = 0;
        for (final long s : seed) {
            out ^= s;
        }

        return out;
    }","  public void test2()  throws Throwable  {
      LongArray2Long longArray2Long0 = new LongArray2Long();
      long[] longArray0 = new long[2];
      longArray0[1] = 1180L;
      Long long0 = longArray2Long0.convert(longArray0);
}"
1165,"    public Long convert(long[] seed) {
        long out = 0;
        for (final long s : seed) {
            out ^= s;
        }

        return out;
    }","  public void test3()  throws Throwable  {
      LongArray2Long longArray2Long0 = new LongArray2Long();
      // Undeclared exception!
      try { 
        longArray2Long0.convert((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.LongArray2Long"", e);
      }
  }"
1166,"    public Long convert(long[] seed) {
        long out = 0;
        for (final long s : seed) {
            out ^= s;
        }

        return out;
    }","  public void test4()  throws Throwable  {
      LongArray2Long longArray2Long0 = new LongArray2Long();
      long[] longArray0 = new long[1];
      Long long0 = longArray2Long0.convert(longArray0);
}"
1167,,"  public void test0()  throws Throwable  {
      NativeSeedType[] nativeSeedTypeArray0 = NativeSeedType.values();
}"
1168,"    public Class<?> getType() {
        return type;
    }","  public void test1()  throws Throwable  {
      NativeSeedType nativeSeedType0 = NativeSeedType.INT;
      Class<?> class0 = nativeSeedType0.getType();
}"
1169,"    public static byte[] convertSeedToBytes(Object seed) {
        if (seed instanceof Integer) {
            return NumberFactory.makeByteArray((Integer) seed);
        } else if (seed instanceof Long) {
            return NumberFactory.makeByteArray((Long) seed);
        } else if (seed instanceof int[]) {
            return NumberFactory.makeByteArray((int[]) seed);
        } else if (seed instanceof long[]) {
            return NumberFactory.makeByteArray((long[]) seed);
        } else if (seed instanceof byte[]) {
            return (byte[]) seed;
        }

        throw new UnsupportedOperationException(UNRECOGNISED_SEED + seed);
    }","  public void test2()  throws Throwable  {
      NativeSeedType nativeSeedType0 = NativeSeedType.LONG_ARRAY;
      Object object0 = nativeSeedType0.createSeed(0);
      byte[] byteArray0 = NativeSeedType.convertSeedToBytes(object0);
}"
1170,"    public abstract Object createSeed(int size);

    /**
     * Converts the input seed from any of the supported seed types to the native seed type.
     * If the output is an array the required size of the array can be specified.
     *
     * @param seed Input seed.
     * @param size The size of the output seed (array types only).
     * @return the native seed.
     * @throws UnsupportedOperationException if the {@code seed}","  public void test3()  throws Throwable  {
      NativeSeedType nativeSeedType0 = NativeSeedType.LONG_ARRAY;
      // Undeclared exception!
      try { 
        nativeSeedType0.createSeed((-2957));
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.SeedFactory"", e);
      }
  }"
1171,"    public Object convertSeed(Object seed,
                              int size) {
        // Convert to native type.
        // Each method must be overridden by specific implementations.

        if (seed instanceof Integer) {
            return convert((Integer) seed, size);
        } else if (seed instanceof Long) {
            return convert((Long) seed, size);
        } else if (seed instanceof int[]) {
            return convert((int[]) seed, size);
        } else if (seed instanceof long[]) {
            return convert((long[]) seed, size);
        } else if (seed instanceof byte[]) {
            return convert((byte[]) seed, size);
        }

        throw new UnsupportedOperationException(UNRECOGNISED_SEED + seed);
    }","  public void test4()  throws Throwable  {
      NativeSeedType nativeSeedType0 = NativeSeedType.LONG_ARRAY;
      Integer integer0 = new Integer(2);
      nativeSeedType0.convertSeed(integer0, 4805);
      Long long0 = new Long((long) integer0);
      // Undeclared exception!
      nativeSeedType0.convertSeed(long0, 6185);
  }"
1172,"    public static byte[] convertSeedToBytes(Object seed) {
        if (seed instanceof Integer) {
            return NumberFactory.makeByteArray((Integer) seed);
        } else if (seed instanceof Long) {
            return NumberFactory.makeByteArray((Long) seed);
        } else if (seed instanceof int[]) {
            return NumberFactory.makeByteArray((int[]) seed);
        } else if (seed instanceof long[]) {
            return NumberFactory.makeByteArray((long[]) seed);
        } else if (seed instanceof byte[]) {
            return (byte[]) seed;
        }

        throw new UnsupportedOperationException(UNRECOGNISED_SEED + seed);
    }","  public void test5()  throws Throwable  {
      NativeSeedType nativeSeedType0 = NativeSeedType.LONG_ARRAY;
      // Undeclared exception!
      try { 
        NativeSeedType.convertSeedToBytes(nativeSeedType0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // Unrecognized seed type: LONG_ARRAY
         //
         verifyException(""org.apache.commons.rng.simple.internal.NativeSeedType"", e);
      }
  }"
1173,"    public static byte[] convertSeedToBytes(Object seed) {
        if (seed instanceof Integer) {
            return NumberFactory.makeByteArray((Integer) seed);
        } else if (seed instanceof Long) {
            return NumberFactory.makeByteArray((Long) seed);
        } else if (seed instanceof int[]) {
            return NumberFactory.makeByteArray((int[]) seed);
        } else if (seed instanceof long[]) {
            return NumberFactory.makeByteArray((long[]) seed);
        } else if (seed instanceof byte[]) {
            return (byte[]) seed;
        }

        throw new UnsupportedOperationException(UNRECOGNISED_SEED + seed);
    }","  public void test6()  throws Throwable  {
      NativeSeedType nativeSeedType0 = NativeSeedType.INT_ARRAY;
      Object object0 = nativeSeedType0.createSeed(41);
      byte[] byteArray0 = NativeSeedType.convertSeedToBytes(object0);
}"
1174,"    public static byte[] convertSeedToBytes(Object seed) {
        if (seed instanceof Integer) {
            return NumberFactory.makeByteArray((Integer) seed);
        } else if (seed instanceof Long) {
            return NumberFactory.makeByteArray((Long) seed);
        } else if (seed instanceof int[]) {
            return NumberFactory.makeByteArray((int[]) seed);
        } else if (seed instanceof long[]) {
            return NumberFactory.makeByteArray((long[]) seed);
        } else if (seed instanceof byte[]) {
            return (byte[]) seed;
        }

        throw new UnsupportedOperationException(UNRECOGNISED_SEED + seed);
    }","  public void test7()  throws Throwable  {
      Long long0 = new Long((-15L));
      byte[] byteArray0 = NativeSeedType.convertSeedToBytes(long0);
}"
1175,"    public Object convertSeed(Object seed,
                              int size) {
        // Convert to native type.
        // Each method must be overridden by specific implementations.

        if (seed instanceof Integer) {
            return convert((Integer) seed, size);
        } else if (seed instanceof Long) {
            return convert((Long) seed, size);
        } else if (seed instanceof int[]) {
            return convert((int[]) seed, size);
        } else if (seed instanceof long[]) {
            return convert((long[]) seed, size);
        } else if (seed instanceof byte[]) {
            return convert((byte[]) seed, size);
        }

        throw new UnsupportedOperationException(UNRECOGNISED_SEED + seed);
    }","  public void test8()  throws Throwable  {
      NativeSeedType nativeSeedType0 = NativeSeedType.INT;
      // Undeclared exception!
      try { 
        nativeSeedType0.convertSeed(nativeSeedType0, (-4268));
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // Unrecognized seed type: INT
         //
         verifyException(""org.apache.commons.rng.simple.internal.NativeSeedType"", e);
      }
  }"
1176,"    public Object convertSeed(Object seed,
                              int size) {
        // Convert to native type.
        // Each method must be overridden by specific implementations.

        if (seed instanceof Integer) {
            return convert((Integer) seed, size);
        } else if (seed instanceof Long) {
            return convert((Long) seed, size);
        } else if (seed instanceof int[]) {
            return convert((int[]) seed, size);
        } else if (seed instanceof long[]) {
            return convert((long[]) seed, size);
        } else if (seed instanceof byte[]) {
            return convert((byte[]) seed, size);
        }

        throw new UnsupportedOperationException(UNRECOGNISED_SEED + seed);
    }","  public void test9()  throws Throwable  {
      NativeSeedType nativeSeedType0 = NativeSeedType.LONG_ARRAY;
      Object object0 = nativeSeedType0.createSeed(10);
      Object object1 = nativeSeedType0.convertSeed(object0, 10);
}"
1177,"    public Object convertSeed(Object seed,
                              int size) {
        // Convert to native type.
        // Each method must be overridden by specific implementations.

        if (seed instanceof Integer) {
            return convert((Integer) seed, size);
        } else if (seed instanceof Long) {
            return convert((Long) seed, size);
        } else if (seed instanceof int[]) {
            return convert((int[]) seed, size);
        } else if (seed instanceof long[]) {
            return convert((long[]) seed, size);
        } else if (seed instanceof byte[]) {
            return convert((byte[]) seed, size);
        }

        throw new UnsupportedOperationException(UNRECOGNISED_SEED + seed);
    }","  public void test10()  throws Throwable  {
      NativeSeedType nativeSeedType0 = NativeSeedType.INT_ARRAY;
      Object object0 = nativeSeedType0.createSeed(41);
      NativeSeedType nativeSeedType1 = NativeSeedType.LONG_ARRAY;
      Object object1 = nativeSeedType1.convertSeed(object0, 41);
      Object object2 = nativeSeedType0.convertSeed(object1, 41);
}"
1178,"    public Object convertSeed(Object seed,
                              int size) {
        // Convert to native type.
        // Each method must be overridden by specific implementations.

        if (seed instanceof Integer) {
            return convert((Integer) seed, size);
        } else if (seed instanceof Long) {
            return convert((Long) seed, size);
        } else if (seed instanceof int[]) {
            return convert((int[]) seed, size);
        } else if (seed instanceof long[]) {
            return convert((long[]) seed, size);
        } else if (seed instanceof byte[]) {
            return convert((byte[]) seed, size);
        }

        throw new UnsupportedOperationException(UNRECOGNISED_SEED + seed);
    }","  public void test11()  throws Throwable  {
      NativeSeedType nativeSeedType0 = NativeSeedType.LONG;
      Object object0 = nativeSeedType0.createSeed((-26));
      NativeSeedType nativeSeedType1 = NativeSeedType.INT_ARRAY;
      // Undeclared exception!
      try { 
        nativeSeedType1.convertSeed(object0, (-26));
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.Long2IntArray"", e);
      }
  }"
1179,"    public Object convertSeed(Object seed,
                              int size) {
        // Convert to native type.
        // Each method must be overridden by specific implementations.

        if (seed instanceof Integer) {
            return convert((Integer) seed, size);
        } else if (seed instanceof Long) {
            return convert((Long) seed, size);
        } else if (seed instanceof int[]) {
            return convert((int[]) seed, size);
        } else if (seed instanceof long[]) {
            return convert((long[]) seed, size);
        } else if (seed instanceof byte[]) {
            return convert((byte[]) seed, size);
        }

        throw new UnsupportedOperationException(UNRECOGNISED_SEED + seed);
    }","  public void test12()  throws Throwable  {
      NativeSeedType nativeSeedType0 = NativeSeedType.INT_ARRAY;
      Object object0 = nativeSeedType0.createSeed(1868);
      Object object1 = nativeSeedType0.convertSeed(object0, 1868);
}"
1180,"    public Object convertSeed(Object seed,
                              int size) {
        // Convert to native type.
        // Each method must be overridden by specific implementations.

        if (seed instanceof Integer) {
            return convert((Integer) seed, size);
        } else if (seed instanceof Long) {
            return convert((Long) seed, size);
        } else if (seed instanceof int[]) {
            return convert((int[]) seed, size);
        } else if (seed instanceof long[]) {
            return convert((long[]) seed, size);
        } else if (seed instanceof byte[]) {
            return convert((byte[]) seed, size);
        }

        throw new UnsupportedOperationException(UNRECOGNISED_SEED + seed);
    }","  public void test13()  throws Throwable  {
      NativeSeedType nativeSeedType0 = NativeSeedType.INT;
      Long long0 = new Long((-15L));
      Object object0 = nativeSeedType0.convertSeed(long0, 159);
}"
1181,"    public Object convertSeed(Object seed,
                              int size) {
        // Convert to native type.
        // Each method must be overridden by specific implementations.

        if (seed instanceof Integer) {
            return convert((Integer) seed, size);
        } else if (seed instanceof Long) {
            return convert((Long) seed, size);
        } else if (seed instanceof int[]) {
            return convert((int[]) seed, size);
        } else if (seed instanceof long[]) {
            return convert((long[]) seed, size);
        } else if (seed instanceof byte[]) {
            return convert((byte[]) seed, size);
        }

        throw new UnsupportedOperationException(UNRECOGNISED_SEED + seed);
    }","  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(10);
      NativeSeedType nativeSeedType0 = NativeSeedType.INT;
      Object object0 = nativeSeedType0.convertSeed(integer0, 10);
}"
1182,"    public Object convertSeed(Object seed,
                              int size) {
        // Convert to native type.
        // Each method must be overridden by specific implementations.

        if (seed instanceof Integer) {
            return convert((Integer) seed, size);
        } else if (seed instanceof Long) {
            return convert((Long) seed, size);
        } else if (seed instanceof int[]) {
            return convert((int[]) seed, size);
        } else if (seed instanceof long[]) {
            return convert((long[]) seed, size);
        } else if (seed instanceof byte[]) {
            return convert((byte[]) seed, size);
        }

        throw new UnsupportedOperationException(UNRECOGNISED_SEED + seed);
    }","  public void test15()  throws Throwable  {
      NativeSeedType nativeSeedType0 = NativeSeedType.LONG_ARRAY;
      Object object0 = nativeSeedType0.createSeed(10);
      NativeSeedType nativeSeedType1 = NativeSeedType.INT;
      Object object1 = nativeSeedType1.convertSeed(object0, 8);
}"
1183,"    public Class<?> getType() {
        return type;
    }","  public void test16()  throws Throwable  {
      NativeSeedType nativeSeedType0 = NativeSeedType.LONG_ARRAY;
      Class<?> class0 = nativeSeedType0.getType();
}"
1184,"    public int getBytes() {
        return bytes;
    }","  public void test17()  throws Throwable  {
      NativeSeedType nativeSeedType0 = NativeSeedType.LONG_ARRAY;
      int int0 = nativeSeedType0.getBytes();
}"
1185,"    public long[] convert(byte[] seed) {
        final byte[] tmp = seed.length % LONG_SIZE == 0 ?
            seed :
            Arrays.copyOf(seed, LONG_SIZE * ((seed.length + LONG_SIZE - 1) / LONG_SIZE));

        return NumberFactory.makeLongArray(tmp);
    }","  public void test0()  throws Throwable  {
      ByteArray2LongArray byteArray2LongArray0 = new ByteArray2LongArray();
      byte[] byteArray0 = new byte[0];
      long[] longArray0 = byteArray2LongArray0.convert(byteArray0);
}"
1186,"    public long[] convert(byte[] seed) {
        final byte[] tmp = seed.length % LONG_SIZE == 0 ?
            seed :
            Arrays.copyOf(seed, LONG_SIZE * ((seed.length + LONG_SIZE - 1) / LONG_SIZE));

        return NumberFactory.makeLongArray(tmp);
    }","  public void test1()  throws Throwable  {
      ByteArray2LongArray byteArray2LongArray0 = new ByteArray2LongArray();
      // Undeclared exception!
      try { 
        byteArray2LongArray0.convert((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.ByteArray2LongArray"", e);
      }
  }"
1187,"    public long[] convert(byte[] seed) {
        final byte[] tmp = seed.length % LONG_SIZE == 0 ?
            seed :
            Arrays.copyOf(seed, LONG_SIZE * ((seed.length + LONG_SIZE - 1) / LONG_SIZE));

        return NumberFactory.makeLongArray(tmp);
    }","  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArray2LongArray byteArray2LongArray0 = new ByteArray2LongArray();
      long[] longArray0 = byteArray2LongArray0.convert(byteArray0);
}"
1188,"    public long[] convert(byte[] seed) {
        final byte[] tmp = seed.length % LONG_SIZE == 0 ?
            seed :
            Arrays.copyOf(seed, LONG_SIZE * ((seed.length + LONG_SIZE - 1) / LONG_SIZE));

        return NumberFactory.makeLongArray(tmp);
    }","  public void test3()  throws Throwable  {
      ByteArray2LongArray byteArray2LongArray0 = new ByteArray2LongArray();
      byte[] byteArray0 = new byte[13];
      long[] longArray0 = byteArray2LongArray0.convert(byteArray0);
}"
1189,"    public Integer convert(Long seed) {
        return NumberFactory.makeInt(seed);
    }","  public void test0()  throws Throwable  {
      Long2Int long2Int0 = new Long2Int();
      Long long0 = new Long((-1L));
      Integer integer0 = long2Int0.convert(long0);
}"
1190,"    public Integer convert(Long seed) {
        return NumberFactory.makeInt(seed);
    }","  public void test1()  throws Throwable  {
      Long2Int long2Int0 = new Long2Int();
      Long long0 = new Long(529L);
      Integer integer0 = long2Int0.convert(long0);
}"
1191,"    public Integer convert(Long seed) {
        return NumberFactory.makeInt(seed);
    }","  public void test2()  throws Throwable  {
      Long2Int long2Int0 = new Long2Int();
      Long long0 = new Long(4294967295L);
      Integer integer0 = long2Int0.convert(long0);
}"
1192,"    public Integer convert(Long seed) {
        return NumberFactory.makeInt(seed);
    }","  public void test3()  throws Throwable  {
      Long2Int long2Int0 = new Long2Int();
      // Undeclared exception!
      try { 
        long2Int0.convert((Long) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.Long2Int"", e);
      }
  }"
1193,"    public int[] convert(Long seed) {
        return convertSeed(seed, size);
    }","  public void test0()  throws Throwable  {
      Long2IntArray long2IntArray0 = new Long2IntArray(5854);
      Long long0 = new Long(5854);
      int[] intArray0 = long2IntArray0.convert(long0, 0);
}"
1194,"    public int[] convert(Long seed) {
        return convertSeed(seed, size);
    }","  public void test1()  throws Throwable  {
      Long2IntArray long2IntArray0 = new Long2IntArray(0);
      Long long0 = new Long(0L);
      int[] intArray0 = long2IntArray0.convert(long0);
}"
1195,"    public int[] convert(Long seed) {
        return convertSeed(seed, size);
    }","  public void test2()  throws Throwable  {
      Long2IntArray long2IntArray0 = new Long2IntArray(5854);
      Long long0 = new Long(5854);
      long2IntArray0.convert(long0);
      long2IntArray0.convert(long0);
      long2IntArray0.convert(long0, 5854);
      // Undeclared exception!
      long2IntArray0.convert(long0, 5854);
  }"
1196,"    public int[] convert(Long seed) {
        return convertSeed(seed, size);
    }","  public void test3()  throws Throwable  {
      Long2IntArray long2IntArray0 = new Long2IntArray(1);
      // Undeclared exception!
      try { 
        long2IntArray0.convert((Long) null, 456);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1197,"    public int[] convert(Long seed) {
        return convertSeed(seed, size);
    }","  public void test4()  throws Throwable  {
      Long2IntArray long2IntArray0 = new Long2IntArray((-1));
      Long long0 = new Long(1060L);
      // Undeclared exception!
      try { 
        long2IntArray0.convert(long0, (-1));
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.Long2IntArray"", e);
      }
  }"
1198,"    public int[] convert(Long seed) {
        return convertSeed(seed, size);
    }","  public void test5()  throws Throwable  {
      Long2IntArray long2IntArray0 = new Long2IntArray(5854);
      Long long0 = new Long(5854);
      long2IntArray0.convert(long0, 5854);
      long2IntArray0.convert(long0);
      long2IntArray0.convert(long0);
      // Undeclared exception!
      long2IntArray0.convert(long0);
  }"
1199,"    public int[] convert(Long seed) {
        return convertSeed(seed, size);
    }","  public void test6()  throws Throwable  {
      Long2IntArray long2IntArray0 = new Long2IntArray(257);
      // Undeclared exception!
      try { 
        long2IntArray0.convert((Long) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1200,"    public int[] convert(Long seed) {
        return convertSeed(seed, size);
    }","  public void test7()  throws Throwable  {
      Long2IntArray long2IntArray0 = new Long2IntArray((-1));
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        long2IntArray0.convert(long0);
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.Long2IntArray"", e);
      }
  }"
1201,"    public int[] convert(Long seed) {
        return convertSeed(seed, size);
    }","  public void test8()  throws Throwable  {
      Long long0 = new Long(12);
      Long2IntArray long2IntArray0 = new Long2IntArray(12);
      int[] intArray0 = long2IntArray0.convert(long0, 2527);
}"
1202,"    public Integer convert(int[] seed) {
        int out = 0;
        for (final int s : seed) {
            out ^= s;
        }

        return out;
    }","  public void test0()  throws Throwable  {
      IntArray2Int intArray2Int0 = new IntArray2Int();
      int[] intArray0 = new int[3];
      intArray0[0] = (-341);
      intArray0[1] = (-3717);
      Integer integer0 = intArray2Int0.convert(intArray0);
}"
1203,"    public Integer convert(int[] seed) {
        int out = 0;
        for (final int s : seed) {
            out ^= s;
        }

        return out;
    }","  public void test1()  throws Throwable  {
      IntArray2Int intArray2Int0 = new IntArray2Int();
      int[] intArray0 = new int[1];
      intArray0[0] = 1149;
      Integer integer0 = intArray2Int0.convert(intArray0);
}"
1204,"    public Integer convert(int[] seed) {
        int out = 0;
        for (final int s : seed) {
            out ^= s;
        }

        return out;
    }","  public void test2()  throws Throwable  {
      IntArray2Int intArray2Int0 = new IntArray2Int();
      int[] intArray0 = new int[2];
      intArray0[1] = (-90);
      Integer integer0 = intArray2Int0.convert(intArray0);
}"
1205,"    public Integer convert(int[] seed) {
        int out = 0;
        for (final int s : seed) {
            out ^= s;
        }

        return out;
    }","  public void test3()  throws Throwable  {
      IntArray2Int intArray2Int0 = new IntArray2Int();
      // Undeclared exception!
      try { 
        intArray2Int0.convert((int[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.IntArray2Int"", e);
      }
  }"
1206,"    public Integer convert(int[] seed) {
        int out = 0;
        for (final int s : seed) {
            out ^= s;
        }

        return out;
    }","  public void test4()  throws Throwable  {
      IntArray2Int intArray2Int0 = new IntArray2Int();
      int[] intArray0 = new int[1];
      Integer integer0 = intArray2Int0.convert(intArray0);
}"
1207,"    public long[] convert(Long seed) {
        return convertSeed(seed, size);
    }","  public void test0()  throws Throwable  {
      Long2LongArray long2LongArray0 = new Long2LongArray(1585);
      Long long0 = new Long(1585);
      long[] longArray0 = long2LongArray0.convert(long0, 0);
}"
1208,"    public long[] convert(Long seed) {
        return convertSeed(seed, size);
    }","  public void test1()  throws Throwable  {
      Long2LongArray long2LongArray0 = new Long2LongArray(0);
      Long long0 = new Long(0);
      long[] longArray0 = long2LongArray0.convert(long0);
}"
1209,"    public long[] convert(Long seed) {
        return convertSeed(seed, size);
    }","  public void test2()  throws Throwable  {
      Long2LongArray long2LongArray0 = new Long2LongArray(5162);
      Long long0 = new Long(0L);
      long2LongArray0.convert(long0);
      // Undeclared exception!
      long2LongArray0.convert(long0, 5162);
  }"
1210,"    public long[] convert(Long seed) {
        return convertSeed(seed, size);
    }","  public void test3()  throws Throwable  {
      Long2LongArray long2LongArray0 = new Long2LongArray(1236);
      // Undeclared exception!
      try { 
        long2LongArray0.convert((Long) null, 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1211,"    public long[] convert(Long seed) {
        return convertSeed(seed, size);
    }","  public void test4()  throws Throwable  {
      Long2LongArray long2LongArray0 = new Long2LongArray((-106));
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        long2LongArray0.convert(long0, (-106));
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.Long2LongArray"", e);
      }
  }"
1212,"    public long[] convert(Long seed) {
        return convertSeed(seed, size);
    }","  public void test5()  throws Throwable  {
      Long2LongArray long2LongArray0 = new Long2LongArray(3200);
      Long long0 = new Long(3200);
      long2LongArray0.convert(long0);
      long2LongArray0.convert(long0, 3200);
      long2LongArray0.convert(long0);
      // Undeclared exception!
      long2LongArray0.convert(long0);
  }"
1213,"    public long[] convert(Long seed) {
        return convertSeed(seed, size);
    }","  public void test6()  throws Throwable  {
      Long2LongArray long2LongArray0 = new Long2LongArray(1585);
      // Undeclared exception!
      try { 
        long2LongArray0.convert((Long) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1214,"    public long[] convert(Long seed) {
        return convertSeed(seed, size);
    }","  public void test7()  throws Throwable  {
      Long2LongArray long2LongArray0 = new Long2LongArray((-2206));
      Long long0 = new Long((-2206));
      // Undeclared exception!
      try { 
        long2LongArray0.convert(long0);
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.Long2LongArray"", e);
      }
  }"
1215,"    public Long convert(Integer seed) {
        final int s = seed;
        return NumberFactory.makeLong(s, ~s);
    }","  public void test0()  throws Throwable  {
      Int2Long int2Long0 = new Int2Long();
      Integer integer0 = new Integer((-475));
      Long long0 = int2Long0.convert(integer0);
}"
1216,"    public Long convert(Integer seed) {
        final int s = seed;
        return NumberFactory.makeLong(s, ~s);
    }","  public void test1()  throws Throwable  {
      Int2Long int2Long0 = new Int2Long();
      Integer integer0 = new Integer((-1));
      Long long0 = int2Long0.convert(integer0);
}"
1217,"    public Long convert(Integer seed) {
        final int s = seed;
        return NumberFactory.makeLong(s, ~s);
    }","  public void test2()  throws Throwable  {
      Int2Long int2Long0 = new Int2Long();
      Integer integer0 = new Integer(684);
      Long long0 = int2Long0.convert(integer0);
}"
1218,"    public Long convert(Integer seed) {
        final int s = seed;
        return NumberFactory.makeLong(s, ~s);
    }","  public void test3()  throws Throwable  {
      Int2Long int2Long0 = new Int2Long();
      // Undeclared exception!
      try { 
        int2Long0.convert((Integer) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.Int2Long"", e);
      }
  }"
1219,"    public static RestorableUniformRandomProvider create(RandomSourceInternal source) {
        // Delegate to the random source allowing generator specific implementations.
        return source.create();
    }","  public void test0()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.XO_SHI_RO_128_PP;
      Integer integer0 = new Integer(25);
      Object[] objectArray0 = new Object[0];
      RestorableUniformRandomProvider restorableUniformRandomProvider0 = providerBuilder_RandomSourceInternal0.create(integer0, objectArray0);
}"
1220,,"  public void test1()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.ISAAC;
      Class<?> class0 = providerBuilder_RandomSourceInternal0.getSeed();
}"
1221,,"  public void test2()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.TWO_CMRES_SELECT;
      Class<?>[] classArray0 = providerBuilder_RandomSourceInternal0.getArgs();
}"
1222,"    public static RestorableUniformRandomProvider create(RandomSourceInternal source) {
        // Delegate to the random source allowing generator specific implementations.
        return source.create();
    }","  public void test3()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.MSWS;
      // Undeclared exception!
      try { 
        ProviderBuilder.create(providerBuilder_RandomSourceInternal0, (Object) providerBuilder_RandomSourceInternal0, (Object[]) null);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // Unrecognized seed type: MSWS
         //
         verifyException(""org.apache.commons.rng.simple.internal.NativeSeedType"", e);
      }
  }"
1223,"    public static RestorableUniformRandomProvider create(RandomSourceInternal source) {
        // Delegate to the random source allowing generator specific implementations.
        return source.create();
    }","  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        ProviderBuilder.create((ProviderBuilder.RandomSourceInternal) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.ProviderBuilder"", e);
      }
  }"
1224,"    public static RestorableUniformRandomProvider create(RandomSourceInternal source) {
        // Delegate to the random source allowing generator specific implementations.
        return source.create();
    }","  public void test5()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.TWO_CMRES_SELECT;
      // Undeclared exception!
      try { 
        ProviderBuilder.create(providerBuilder_RandomSourceInternal0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
1225,"    public static RestorableUniformRandomProvider create(RandomSourceInternal source) {
        // Delegate to the random source allowing generator specific implementations.
        return source.create();
    }","  public void test6()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.ISAAC;
      RestorableUniformRandomProvider restorableUniformRandomProvider0 = providerBuilder_RandomSourceInternal0.create();
}"
1226,,"  public void test7()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.MSWS;
      Class<?> class0 = providerBuilder_RandomSourceInternal0.getRng();
}"
1227,,"  public void test8()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.XOR_SHIFT_1024_S;
      Object object0 = providerBuilder_RandomSourceInternal0.createSeed();
      boolean boolean0 = providerBuilder_RandomSourceInternal0.isNativeSeed(object0);
}"
1228,,"  public void test9()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.XO_SHI_RO_256_PP;
      boolean boolean0 = providerBuilder_RandomSourceInternal0.isNativeSeed((Integer) null);
}"
1229,,"  public void test10()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.MSWS;
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal1 = ProviderBuilder.RandomSourceInternal.JSF_64;
      Object object0 = providerBuilder_RandomSourceInternal1.createSeed();
      Object object1 = providerBuilder_RandomSourceInternal0.convertSeed(object0);
}"
1230,"    public static RestorableUniformRandomProvider create(RandomSourceInternal source) {
        // Delegate to the random source allowing generator specific implementations.
        return source.create();
    }","  public void test11()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ProviderBuilder.create((ProviderBuilder.RandomSourceInternal) null, object0, (Object[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.simple.internal.ProviderBuilder"", e);
      }
  }"
1231,"    public static RestorableUniformRandomProvider create(RandomSourceInternal source) {
        // Delegate to the random source allowing generator specific implementations.
        return source.create();
    }","  public void test12()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.XO_RO_SHI_RO_1024_SS;
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        ProviderBuilder.create(providerBuilder_RandomSourceInternal0, (Object) null, objectArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
1232,"    public static RestorableUniformRandomProvider create(RandomSourceInternal source) {
        // Delegate to the random source allowing generator specific implementations.
        return source.create();
    }","  public void test13()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.XO_SHI_RO_256_PP;
      RestorableUniformRandomProvider restorableUniformRandomProvider0 = ProviderBuilder.create(providerBuilder_RandomSourceInternal0);
}"
1233,,"  public void test14()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.MSWS;
      byte[] byteArray0 = providerBuilder_RandomSourceInternal0.createSeedBytes();
}"
1234,,"  public void test15()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.XOR_SHIFT_1024_S;
      boolean boolean0 = providerBuilder_RandomSourceInternal0.isNativeSeed(""XO_SHI_RO_256_PP"");
}"
1235,"    public static RestorableUniformRandomProvider create(RandomSourceInternal source) {
        // Delegate to the random source allowing generator specific implementations.
        return source.create();
    }","  public void test16()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.MSWS;
      RestorableUniformRandomProvider restorableUniformRandomProvider0 = providerBuilder_RandomSourceInternal0.create();
      byte[] byteArray0 = providerBuilder_RandomSourceInternal0.createSeedBytes((UniformRandomProvider) restorableUniformRandomProvider0);
}"
1236,,"  public void test17()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.XOR_SHIFT_1024_S;
      MockRandom mockRandom0 = new MockRandom();
      JDKRandomWrapper jDKRandomWrapper0 = new JDKRandomWrapper(mockRandom0);
      byte[] byteArray0 = providerBuilder_RandomSourceInternal0.createByteArraySeed(jDKRandomWrapper0);
}"
1237,"    public static RestorableUniformRandomProvider create(RandomSourceInternal source) {
        // Delegate to the random source allowing generator specific implementations.
        return source.create();
    }","  public void test18()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.XO_SHI_RO_256_PLUS;
      RestorableUniformRandomProvider restorableUniformRandomProvider0 = ProviderBuilder.create(providerBuilder_RandomSourceInternal0, (Object) null, (Object[]) null);
}"
1238,"    public static RestorableUniformRandomProvider create(RandomSourceInternal source) {
        // Delegate to the random source allowing generator specific implementations.
        return source.create();
    }","  public void test19()  throws Throwable  {
      ProviderBuilder.RandomSourceInternal providerBuilder_RandomSourceInternal0 = ProviderBuilder.RandomSourceInternal.MSWS;
      Integer integer0 = new Integer((-837));
      RestorableUniformRandomProvider restorableUniformRandomProvider0 = providerBuilder_RandomSourceInternal0.create(integer0);
}"
1239,,"  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Integer integer0 = new Integer((byte)0);
      TwoCmres twoCmres0 = new TwoCmres(integer0);
      // Undeclared exception!
      try { 
        twoCmres0.nextBytes(byteArray0, (int) (byte)0, 2150);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // 2150 is out of interval [0, 1]
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1240,,"  public void test1()  throws Throwable  {
      XoShiRo256Plus xoShiRo256Plus0 = new XoShiRo256Plus(8202884508482404352L, 8202884508482404352L, 8202884508482404352L, (-840L));
      byte[] byteArray0 = new byte[5];
      xoShiRo256Plus0.nextBytes(byteArray0, 0, (int) (byte)0);
}"
1241,,"  public void test2()  throws Throwable  {
      int[] intArray0 = new int[4];
      KISSRandom kISSRandom0 = new KISSRandom(intArray0);
  }"
1242,"    public long nextLong(long n) {
        if (n <= 0) {
            throw new IllegalArgumentException(NOT_POSITIVE + n);
        }

        long bits;
        long val;
        do {
            bits = nextLong() >>> 1;
            val  = bits % n;
        } while (bits - val + (n - 1) < 0);

        return val;
    }","  public void test3()  throws Throwable  {
      long[] longArray0 = new long[5];
      XoShiRo512StarStar xoShiRo512StarStar0 = new XoShiRo512StarStar(longArray0);
      long long0 = xoShiRo512StarStar0.nextLong(1L);
}"
1243,"    public long nextLong(long n) {
        if (n <= 0) {
            throw new IllegalArgumentException(NOT_POSITIVE + n);
        }

        long bits;
        long val;
        do {
            bits = nextLong() >>> 1;
            val  = bits % n;
        } while (bits - val + (n - 1) < 0);

        return val;
    }","  public void test4()  throws Throwable  {
      XoShiRo256Plus xoShiRo256Plus0 = new XoShiRo256Plus(8202884508482404352L, 8202884508482404352L, 8202884508482404352L, (-840L));
      // Undeclared exception!
      try { 
        xoShiRo256Plus0.nextLong((-2862L));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Must be strictly positive: -2862
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1244,"    public int nextInt(int n) {
        if (n <= 0) {
            throw new IllegalArgumentException(NOT_POSITIVE + n);
        }

        // Lemire (2019): Fast Random Integer Generation in an Interval
        // https://arxiv.org/abs/1805.10941
        long m = (nextInt() & 0xffffffffL) * n;
        long l = m & 0xffffffffL;
        if (l < n) {
            // 2^32 % n
            final long t = POW_32 % n;
            while (l < t) {
                m = (nextInt() & 0xffffffffL) * n;
                l = m & 0xffffffffL;
            }
        }
        return (int) (m >>> 32);
    }","  public void test5()  throws Throwable  {
      XoShiRo256PlusPlus xoShiRo256PlusPlus0 = new XoShiRo256PlusPlus(0L, 0L, 0L, 0L);
      int int0 = xoShiRo256PlusPlus0.nextInt(2);
}"
1245,"    public int nextInt(int n) {
        if (n <= 0) {
            throw new IllegalArgumentException(NOT_POSITIVE + n);
        }

        // Lemire (2019): Fast Random Integer Generation in an Interval
        // https://arxiv.org/abs/1805.10941
        long m = (nextInt() & 0xffffffffL) * n;
        long l = m & 0xffffffffL;
        if (l < n) {
            // 2^32 % n
            final long t = POW_32 % n;
            while (l < t) {
                m = (nextInt() & 0xffffffffL) * n;
                l = m & 0xffffffffL;
            }
        }
        return (int) (m >>> 32);
    }","  public void test6()  throws Throwable  {
      XoRoShiRo64Star xoRoShiRo64Star0 = new XoRoShiRo64Star(Integer.MIN_VALUE, Integer.MIN_VALUE);
      int int0 = xoRoShiRo64Star0.nextInt(248);
}"
1246,"    public int nextInt(int n) {
        if (n <= 0) {
            throw new IllegalArgumentException(NOT_POSITIVE + n);
        }

        // Lemire (2019): Fast Random Integer Generation in an Interval
        // https://arxiv.org/abs/1805.10941
        long m = (nextInt() & 0xffffffffL) * n;
        long l = m & 0xffffffffL;
        if (l < n) {
            // 2^32 % n
            final long t = POW_32 % n;
            while (l < t) {
                m = (nextInt() & 0xffffffffL) * n;
                l = m & 0xffffffffL;
            }
        }
        return (int) (m >>> 32);
    }","  public void test7()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = 4294967295L;
      MiddleSquareWeylSequence middleSquareWeylSequence0 = new MiddleSquareWeylSequence(longArray0);
      int int0 = middleSquareWeylSequence0.nextInt(248);
}"
1247,"    public int nextInt(int n) {
        if (n <= 0) {
            throw new IllegalArgumentException(NOT_POSITIVE + n);
        }

        // Lemire (2019): Fast Random Integer Generation in an Interval
        // https://arxiv.org/abs/1805.10941
        long m = (nextInt() & 0xffffffffL) * n;
        long l = m & 0xffffffffL;
        if (l < n) {
            // 2^32 % n
            final long t = POW_32 % n;
            while (l < t) {
                m = (nextInt() & 0xffffffffL) * n;
                l = m & 0xffffffffL;
            }
        }
        return (int) (m >>> 32);
    }","  public void test8()  throws Throwable  {
      long[] longArray0 = new long[6];
      MiddleSquareWeylSequence middleSquareWeylSequence0 = new MiddleSquareWeylSequence(longArray0);
      // Undeclared exception!
      try { 
        middleSquareWeylSequence0.nextInt(0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Must be strictly positive: 0
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1248,"    public long nextLong(long n) {
        if (n <= 0) {
            throw new IllegalArgumentException(NOT_POSITIVE + n);
        }

        long bits;
        long val;
        do {
            bits = nextLong() >>> 1;
            val  = bits % n;
        } while (bits - val + (n - 1) < 0);

        return val;
    }","  public void test9()  throws Throwable  {
      long[] longArray0 = new long[1];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
      long long0 = xoRoShiRo1024StarStar0.nextLong((long) (byte)116);
}"
1249,"    public int nextInt(int n) {
        if (n <= 0) {
            throw new IllegalArgumentException(NOT_POSITIVE + n);
        }

        // Lemire (2019): Fast Random Integer Generation in an Interval
        // https://arxiv.org/abs/1805.10941
        long m = (nextInt() & 0xffffffffL) * n;
        long l = m & 0xffffffffL;
        if (l < n) {
            // 2^32 % n
            final long t = POW_32 % n;
            while (l < t) {
                m = (nextInt() & 0xffffffffL) * n;
                l = m & 0xffffffffL;
            }
        }
        return (int) (m >>> 32);
    }","  public void test10()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well512a well512a0 = new Well512a(intArray0);
      int int0 = well512a0.nextInt(1123);
}"
1250,"    public void restoreState(RandomProviderState state) {
        if (state instanceof RandomProviderDefaultState) {
            setStateInternal(((RandomProviderDefaultState) state).getState());
        } else {
            throw new IllegalArgumentException(""Foreign instance"");
        }
    }","  public void test11()  throws Throwable  {
      Long long0 = new Long(161L);
      JDKRandom jDKRandom0 = new JDKRandom(long0);
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte) (-57);
      RandomProviderDefaultState randomProviderDefaultState0 = new RandomProviderDefaultState(byteArray0);
      // Undeclared exception!
      try { 
        jDKRandom0.restoreState(randomProviderDefaultState0);
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1251,,"  public void test12()  throws Throwable  {
      long[] longArray0 = new long[16];
      XorShift1024Star xorShift1024Star0 = new XorShift1024Star(longArray0);
      byte[] byteArray0 = new byte[13];
      // Undeclared exception!
      try { 
        xorShift1024Star0.nextBytes(byteArray0, (int) (byte) (-122), (int) (byte)0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // -122 is out of interval [0, 12]
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1252,,"  public void test13()  throws Throwable  {
      int[] intArray0 = new int[39];
      KISSRandom kISSRandom0 = new KISSRandom(intArray0);
  }"
1253,"    public void restoreState(RandomProviderState state) {
        if (state instanceof RandomProviderDefaultState) {
            setStateInternal(((RandomProviderDefaultState) state).getState());
        } else {
            throw new IllegalArgumentException(""Foreign instance"");
        }
    }","  public void test14()  throws Throwable  {
      long[] longArray0 = new long[1];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
      RandomProviderState randomProviderState0 = xoRoShiRo1024StarStar0.saveState();
      XoRoShiRo128PlusPlus xoRoShiRo128PlusPlus0 = new XoRoShiRo128PlusPlus(longArray0);
      // Undeclared exception!
      try { 
        xoRoShiRo128PlusPlus0.restoreState(randomProviderState0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State not fully recovered by subclasses
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1254,"    public void restoreState(RandomProviderState state) {
        if (state instanceof RandomProviderDefaultState) {
            setStateInternal(((RandomProviderDefaultState) state).getState());
        } else {
            throw new IllegalArgumentException(""Foreign instance"");
        }
    }","  public void test15()  throws Throwable  {
      Long long0 = new Long(0);
      SplitMix64 splitMix64_0 = new SplitMix64(long0);
      // Undeclared exception!
      try { 
        splitMix64_0.restoreState((RandomProviderState) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Foreign instance
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1255,"    public long nextLong(long n) {
        if (n <= 0) {
            throw new IllegalArgumentException(NOT_POSITIVE + n);
        }

        long bits;
        long val;
        do {
            bits = nextLong() >>> 1;
            val  = bits % n;
        } while (bits - val + (n - 1) < 0);

        return val;
    }","  public void test16()  throws Throwable  {
      long[] longArray0 = new long[16];
      longArray0[1] = (long) 231265814;
      XorShift1024Star xorShift1024Star0 = new XorShift1024Star(longArray0);
      long long0 = xorShift1024Star0.nextLong(2708408564748875214L);
}"
1256,"    public long nextLong(long n) {
        if (n <= 0) {
            throw new IllegalArgumentException(NOT_POSITIVE + n);
        }

        long bits;
        long val;
        do {
            bits = nextLong() >>> 1;
            val  = bits % n;
        } while (bits - val + (n - 1) < 0);

        return val;
    }","  public void test17()  throws Throwable  {
      XoRoShiRo128PlusPlus xoRoShiRo128PlusPlus0 = new XoRoShiRo128PlusPlus((byte)66, (byte)66);
      // Undeclared exception!
      try { 
        xoRoShiRo128PlusPlus0.nextLong((long) 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Must be strictly positive: 0
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1257,"    public long nextLong(long n) {
        if (n <= 0) {
            throw new IllegalArgumentException(NOT_POSITIVE + n);
        }

        long bits;
        long val;
        do {
            bits = nextLong() >>> 1;
            val  = bits % n;
        } while (bits - val + (n - 1) < 0);

        return val;
    }","  public void test18()  throws Throwable  {
      long[] longArray0 = new long[17];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
      long long0 = xoRoShiRo1024StarStar0.nextLong((long) (byte)116);
}"
1258,"    public int nextInt(int n) {
        if (n <= 0) {
            throw new IllegalArgumentException(NOT_POSITIVE + n);
        }

        // Lemire (2019): Fast Random Integer Generation in an Interval
        // https://arxiv.org/abs/1805.10941
        long m = (nextInt() & 0xffffffffL) * n;
        long l = m & 0xffffffffL;
        if (l < n) {
            // 2^32 % n
            final long t = POW_32 % n;
            while (l < t) {
                m = (nextInt() & 0xffffffffL) * n;
                l = m & 0xffffffffL;
            }
        }
        return (int) (m >>> 32);
    }","  public void test19()  throws Throwable  {
      int[] intArray0 = new int[8];
      Well1024a well1024a0 = new Well1024a(intArray0);
      // Undeclared exception!
      try { 
        well1024a0.nextInt((-1479));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Must be strictly positive: -1479
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1259,"    public int nextInt(int n) {
        if (n <= 0) {
            throw new IllegalArgumentException(NOT_POSITIVE + n);
        }

        // Lemire (2019): Fast Random Integer Generation in an Interval
        // https://arxiv.org/abs/1805.10941
        long m = (nextInt() & 0xffffffffL) * n;
        long l = m & 0xffffffffL;
        if (l < n) {
            // 2^32 % n
            final long t = POW_32 % n;
            while (l < t) {
                m = (nextInt() & 0xffffffffL) * n;
                l = m & 0xffffffffL;
            }
        }
        return (int) (m >>> 32);
    }","  public void test20()  throws Throwable  {
      long[] longArray0 = new long[17];
      XoRoShiRo128PlusPlus xoRoShiRo128PlusPlus0 = new XoRoShiRo128PlusPlus(longArray0);
      // Undeclared exception!
      xoRoShiRo128PlusPlus0.nextInt(1735);
  }"
1260,"    public String toString() {
        return getClass().getName();
    }","  public void test21()  throws Throwable  {
      long[] longArray0 = new long[17];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
      String string0 = xoRoShiRo1024StarStar0.toString();
}"
1261,"    public void restoreState(RandomProviderState state) {
        if (state instanceof RandomProviderDefaultState) {
            setStateInternal(((RandomProviderDefaultState) state).getState());
        } else {
            throw new IllegalArgumentException(""Foreign instance"");
        }
    }","  public void test22()  throws Throwable  {
      long[] longArray0 = new long[17];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
      RandomProviderState randomProviderState0 = xoRoShiRo1024StarStar0.saveState();
      xoRoShiRo1024StarStar0.restoreState(randomProviderState0);
  }"
1262,"    public void restoreState(RandomProviderState state) {
        if (state instanceof RandomProviderDefaultState) {
            setStateInternal(((RandomProviderDefaultState) state).getState());
        } else {
            throw new IllegalArgumentException(""Foreign instance"");
        }
    }","  public void test23()  throws Throwable  {
      int[] intArray0 = new int[5];
      MultiplyWithCarry256 multiplyWithCarry256_0 = new MultiplyWithCarry256(intArray0);
      byte[] byteArray0 = new byte[6];
      RandomProviderDefaultState randomProviderDefaultState0 = new RandomProviderDefaultState(byteArray0);
      // Undeclared exception!
      try { 
        multiplyWithCarry256_0.restoreState(randomProviderDefaultState0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 1032 but was 6
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1263,"    public byte[] getState() {
        return Arrays.copyOf(state, state.length);
    }","  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      RandomProviderDefaultState randomProviderDefaultState0 = new RandomProviderDefaultState(byteArray0);
      byte[] byteArray1 = randomProviderDefaultState0.getState();
}"
1264,"    public byte[] getState() {
        return Arrays.copyOf(state, state.length);
    }","  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RandomProviderDefaultState randomProviderDefaultState0 = new RandomProviderDefaultState(byteArray0);
      byte[] byteArray1 = randomProviderDefaultState0.getState();
}"
1265,"    public RandomProviderDefaultState(byte[] state) {
        this.state = Arrays.copyOf(state, state.length);
    }","  public void test2()  throws Throwable  {
      RandomProviderDefaultState randomProviderDefaultState0 = null;
      try {
        randomProviderDefaultState0 = new RandomProviderDefaultState((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.RandomProviderDefaultState"", e);
      }
  }"
1266,,"  public void test0()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
}"
1267,,"  public void test1()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
}"
1268,,"  public void test2()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
}"
1269,"    protected byte[] getStateInternal() {
        final long[] s = Arrays.copyOf(state, SEED_SIZE + 1);
        s[SEED_SIZE] = index;

        return composeStateInternal(NumberFactory.makeByteArray(s),
                                    super.getStateInternal());
    }","  public void test3()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      byte[] byteArray0 = xoRoShiRo1024Star0.getStateInternal();
}"
1270,"    protected byte[] getStateInternal() {
        final long[] s = Arrays.copyOf(state, SEED_SIZE + 1);
        s[SEED_SIZE] = index;

        return composeStateInternal(NumberFactory.makeByteArray(s),
                                    super.getStateInternal());
    }","  public void test4()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      byte[] byteArray0 = xoRoShiRo1024Star0.getStateInternal();
}"
1271,"    protected byte[] getStateInternal() {
        final long[] s = Arrays.copyOf(state, SEED_SIZE + 1);
        s[SEED_SIZE] = index;

        return composeStateInternal(NumberFactory.makeByteArray(s),
                                    super.getStateInternal());
    }","  public void test5()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      byte[] byteArray0 = xoRoShiRo1024Star0.getStateInternal();
}"
1272,"    protected byte[] getStateInternal() {
        final long[] s = Arrays.copyOf(state, SEED_SIZE + 1);
        s[SEED_SIZE] = index;

        return composeStateInternal(NumberFactory.makeByteArray(s),
                                    super.getStateInternal());
    }","  public void test6()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      byte[] byteArray0 = xoRoShiRo1024Star0.getStateInternal();
}"
1273,"    protected byte[] getStateInternal() {
        final long[] s = Arrays.copyOf(state, SEED_SIZE + 1);
        s[SEED_SIZE] = index;

        return composeStateInternal(NumberFactory.makeByteArray(s),
                                    super.getStateInternal());
    }","  public void test7()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      byte[] byteArray0 = xoRoShiRo1024Star0.getStateInternal();
      XoRoShiRo1024PlusPlus xoRoShiRo1024PlusPlus0 = new XoRoShiRo1024PlusPlus(longArray0);
}"
1274,"    protected byte[] getStateInternal() {
        final long[] s = Arrays.copyOf(state, SEED_SIZE + 1);
        s[SEED_SIZE] = index;

        return composeStateInternal(NumberFactory.makeByteArray(s),
                                    super.getStateInternal());
    }","  public void test8()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      byte[] byteArray0 = xoRoShiRo1024Star0.getStateInternal();
      XoRoShiRo1024PlusPlus xoRoShiRo1024PlusPlus0 = new XoRoShiRo1024PlusPlus(longArray0);
}"
1275,"    protected byte[] getStateInternal() {
        final long[] s = Arrays.copyOf(state, SEED_SIZE + 1);
        s[SEED_SIZE] = index;

        return composeStateInternal(NumberFactory.makeByteArray(s),
                                    super.getStateInternal());
    }","  public void test9()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      byte[] byteArray0 = xoRoShiRo1024Star0.getStateInternal();
      XoRoShiRo1024PlusPlus xoRoShiRo1024PlusPlus0 = new XoRoShiRo1024PlusPlus(longArray0);
}"
1276,"    protected byte[] getStateInternal() {
        final long[] s = Arrays.copyOf(state, SEED_SIZE + 1);
        s[SEED_SIZE] = index;

        return composeStateInternal(NumberFactory.makeByteArray(s),
                                    super.getStateInternal());
    }","  public void test10()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      byte[] byteArray0 = xoRoShiRo1024Star0.getStateInternal();
      XoRoShiRo1024PlusPlus xoRoShiRo1024PlusPlus0 = new XoRoShiRo1024PlusPlus(longArray0);
      xoRoShiRo1024PlusPlus0.nextBytes(byteArray0, 3, 3);
}"
1277,"    protected byte[] getStateInternal() {
        final long[] s = Arrays.copyOf(state, SEED_SIZE + 1);
        s[SEED_SIZE] = index;

        return composeStateInternal(NumberFactory.makeByteArray(s),
                                    super.getStateInternal());
    }","  public void test11()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      byte[] byteArray0 = xoRoShiRo1024Star0.getStateInternal();
      XoRoShiRo1024PlusPlus xoRoShiRo1024PlusPlus0 = new XoRoShiRo1024PlusPlus(longArray0);
      xoRoShiRo1024PlusPlus0.nextBytes(byteArray0, 3, 3);
}"
1278,"    protected byte[] getStateInternal() {
        final long[] s = Arrays.copyOf(state, SEED_SIZE + 1);
        s[SEED_SIZE] = index;

        return composeStateInternal(NumberFactory.makeByteArray(s),
                                    super.getStateInternal());
    }","  public void test12()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      byte[] byteArray0 = xoRoShiRo1024Star0.getStateInternal();
      XoRoShiRo1024PlusPlus xoRoShiRo1024PlusPlus0 = new XoRoShiRo1024PlusPlus(longArray0);
      xoRoShiRo1024PlusPlus0.nextBytes(byteArray0, 3, 3);
}"
1279,"    public UniformRandomProvider jump() {
        final UniformRandomProvider copy = copy();
        performJump(JUMP_COEFFICIENTS);
        return copy;
    }","  public void test13()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      byte[] byteArray0 = xoRoShiRo1024Star0.getStateInternal();
      XoRoShiRo1024PlusPlus xoRoShiRo1024PlusPlus0 = new XoRoShiRo1024PlusPlus(longArray0);
      xoRoShiRo1024PlusPlus0.nextBytes(byteArray0, 3, 3);
      UniformRandomProvider uniformRandomProvider0 = xoRoShiRo1024PlusPlus0.jump();
}"
1280,"    public UniformRandomProvider jump() {
        final UniformRandomProvider copy = copy();
        performJump(JUMP_COEFFICIENTS);
        return copy;
    }","  public void test14()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      byte[] byteArray0 = xoRoShiRo1024Star0.getStateInternal();
      XoRoShiRo1024PlusPlus xoRoShiRo1024PlusPlus0 = new XoRoShiRo1024PlusPlus(longArray0);
      xoRoShiRo1024PlusPlus0.nextBytes(byteArray0, 3, 3);
      UniformRandomProvider uniformRandomProvider0 = xoRoShiRo1024PlusPlus0.jump();
}"
1281,"    public UniformRandomProvider jump() {
        final UniformRandomProvider copy = copy();
        performJump(JUMP_COEFFICIENTS);
        return copy;
    }","  public void test15()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      byte[] byteArray0 = xoRoShiRo1024Star0.getStateInternal();
      XoRoShiRo1024PlusPlus xoRoShiRo1024PlusPlus0 = new XoRoShiRo1024PlusPlus(longArray0);
      xoRoShiRo1024PlusPlus0.nextBytes(byteArray0, 3, 3);
      UniformRandomProvider uniformRandomProvider0 = xoRoShiRo1024PlusPlus0.jump();
}"
1282,"    public UniformRandomProvider jump() {
        final UniformRandomProvider copy = copy();
        performJump(JUMP_COEFFICIENTS);
        return copy;
    }","  public void test16()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      byte[] byteArray0 = xoRoShiRo1024Star0.getStateInternal();
      XoRoShiRo1024PlusPlus xoRoShiRo1024PlusPlus0 = new XoRoShiRo1024PlusPlus(longArray0);
      xoRoShiRo1024PlusPlus0.nextBytes(byteArray0, 3, 3);
      UniformRandomProvider uniformRandomProvider0 = xoRoShiRo1024PlusPlus0.jump();
}"
1283,"    public UniformRandomProvider jump() {
        final UniformRandomProvider copy = copy();
        performJump(JUMP_COEFFICIENTS);
        return copy;
    }","  public void test17()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      byte[] byteArray0 = xoRoShiRo1024Star0.getStateInternal();
      XoRoShiRo1024PlusPlus xoRoShiRo1024PlusPlus0 = new XoRoShiRo1024PlusPlus(longArray0);
      xoRoShiRo1024PlusPlus0.nextBytes(byteArray0, 3, 3);
      UniformRandomProvider uniformRandomProvider0 = xoRoShiRo1024PlusPlus0.jump();
}"
1284,"    public UniformRandomProvider jump() {
        final UniformRandomProvider copy = copy();
        performJump(JUMP_COEFFICIENTS);
        return copy;
    }","  public void test18()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      byte[] byteArray0 = xoRoShiRo1024Star0.getStateInternal();
      XoRoShiRo1024PlusPlus xoRoShiRo1024PlusPlus0 = new XoRoShiRo1024PlusPlus(longArray0);
      xoRoShiRo1024PlusPlus0.nextBytes(byteArray0, 3, 3);
      UniformRandomProvider uniformRandomProvider0 = xoRoShiRo1024PlusPlus0.jump();
}"
1285,,"  public void test19()  throws Throwable  {
      long[] longArray0 = new long[7];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
}"
1286,,"  public void test20()  throws Throwable  {
      long[] longArray0 = new long[7];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
}"
1287,,"  public void test21()  throws Throwable  {
      long[] longArray0 = new long[7];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
}"
1288,"    public long next() {
        final int q = index;
        index = (index + 1) & 15;
        final long s0 = state[index];
        long s15 = state[q];
        final long result = transform(s0, s15);

        s15 ^= s0;
        state[q] = Long.rotateLeft(s0, 25) ^ s15 ^ (s15 << 27);
        state[index] = Long.rotateLeft(s15, 36);

        return result;
    }","  public void test22()  throws Throwable  {
      long[] longArray0 = new long[7];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
      long long0 = xoRoShiRo1024StarStar0.next();
}"
1289,"    public long next() {
        final int q = index;
        index = (index + 1) & 15;
        final long s0 = state[index];
        long s15 = state[q];
        final long result = transform(s0, s15);

        s15 ^= s0;
        state[q] = Long.rotateLeft(s0, 25) ^ s15 ^ (s15 << 27);
        state[index] = Long.rotateLeft(s15, 36);

        return result;
    }","  public void test23()  throws Throwable  {
      long[] longArray0 = new long[7];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
      long long0 = xoRoShiRo1024StarStar0.next();
}"
1290,"    public long next() {
        final int q = index;
        index = (index + 1) & 15;
        final long s0 = state[index];
        long s15 = state[q];
        final long result = transform(s0, s15);

        s15 ^= s0;
        state[q] = Long.rotateLeft(s0, 25) ^ s15 ^ (s15 << 27);
        state[index] = Long.rotateLeft(s15, 36);

        return result;
    }","  public void test24()  throws Throwable  {
      long[] longArray0 = new long[7];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
      long long0 = xoRoShiRo1024StarStar0.next();
}"
1291,,"  public void test25()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
}"
1292,,"  public void test26()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
}"
1293,,"  public void test27()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
}"
1294,"    public long next() {
        final int q = index;
        index = (index + 1) & 15;
        final long s0 = state[index];
        long s15 = state[q];
        final long result = transform(s0, s15);

        s15 ^= s0;
        state[q] = Long.rotateLeft(s0, 25) ^ s15 ^ (s15 << 27);
        state[index] = Long.rotateLeft(s15, 36);

        return result;
    }","  public void test28()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
      long long0 = xoRoShiRo1024StarStar0.next();
}"
1295,"    public long next() {
        final int q = index;
        index = (index + 1) & 15;
        final long s0 = state[index];
        long s15 = state[q];
        final long result = transform(s0, s15);

        s15 ^= s0;
        state[q] = Long.rotateLeft(s0, 25) ^ s15 ^ (s15 << 27);
        state[index] = Long.rotateLeft(s15, 36);

        return result;
    }","  public void test29()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
      long long0 = xoRoShiRo1024StarStar0.next();
}"
1296,"    public long next() {
        final int q = index;
        index = (index + 1) & 15;
        final long s0 = state[index];
        long s15 = state[q];
        final long result = transform(s0, s15);

        s15 ^= s0;
        state[q] = Long.rotateLeft(s0, 25) ^ s15 ^ (s15 << 27);
        state[index] = Long.rotateLeft(s15, 36);

        return result;
    }","  public void test30()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
      long long0 = xoRoShiRo1024StarStar0.next();
}"
1297,,"  public void test31()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
}"
1298,,"  public void test32()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
}"
1299,,"  public void test33()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
}"
1300,"    public long next() {
        final int q = index;
        index = (index + 1) & 15;
        final long s0 = state[index];
        long s15 = state[q];
        final long result = transform(s0, s15);

        s15 ^= s0;
        state[q] = Long.rotateLeft(s0, 25) ^ s15 ^ (s15 << 27);
        state[index] = Long.rotateLeft(s15, 36);

        return result;
    }","  public void test34()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      long long0 = xoRoShiRo1024Star0.next();
}"
1301,"    public long next() {
        final int q = index;
        index = (index + 1) & 15;
        final long s0 = state[index];
        long s15 = state[q];
        final long result = transform(s0, s15);

        s15 ^= s0;
        state[q] = Long.rotateLeft(s0, 25) ^ s15 ^ (s15 << 27);
        state[index] = Long.rotateLeft(s15, 36);

        return result;
    }","  public void test35()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      long long0 = xoRoShiRo1024Star0.next();
}"
1302,"    public long next() {
        final int q = index;
        index = (index + 1) & 15;
        final long s0 = state[index];
        long s15 = state[q];
        final long result = transform(s0, s15);

        s15 ^= s0;
        state[q] = Long.rotateLeft(s0, 25) ^ s15 ^ (s15 << 27);
        state[index] = Long.rotateLeft(s15, 36);

        return result;
    }","  public void test36()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      long long0 = xoRoShiRo1024Star0.next();
}"
1303,,"  public void test37()  throws Throwable  {
      long[] longArray0 = new long[9];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
}"
1304,,"  public void test38()  throws Throwable  {
      long[] longArray0 = new long[9];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
}"
1305,,"  public void test39()  throws Throwable  {
      long[] longArray0 = new long[9];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
}"
1306,,"  public void test40()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
}"
1307,,"  public void test41()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
}"
1308,,"  public void test42()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
}"
1309,"    public JumpableUniformRandomProvider longJump() {
        final JumpableUniformRandomProvider copy = copy();
        performJump(LONG_JUMP_COEFFICIENTS);
        return copy;
    }","  public void test43()  throws Throwable  {
      long[] longArray0 = new long[4];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
      xoRoShiRo1024StarStar0.jump();
      // Undeclared exception!
      xoRoShiRo1024StarStar0.longJump();
  }"
1310,"    public JumpableUniformRandomProvider longJump() {
        final JumpableUniformRandomProvider copy = copy();
        performJump(LONG_JUMP_COEFFICIENTS);
        return copy;
    }","  public void test44()  throws Throwable  {
      long[] longArray0 = new long[2];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      byte[] byteArray0 = xoRoShiRo1024Star0.getStateInternal();
      xoRoShiRo1024Star0.nextBytes(byteArray0);
      xoRoShiRo1024Star0.setStateInternal(byteArray0);
      // Undeclared exception!
      try { 
        xoRoShiRo1024Star0.longJump();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1311,"    public UniformRandomProvider jump() {
        final UniformRandomProvider copy = copy();
        performJump(JUMP_COEFFICIENTS);
        return copy;
    }","  public void test45()  throws Throwable  {
      long[] longArray0 = new long[2];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      byte[] byteArray0 = xoRoShiRo1024Star0.getStateInternal();
      xoRoShiRo1024Star0.nextBytes(byteArray0);
      xoRoShiRo1024Star0.setStateInternal(byteArray0);
      // Undeclared exception!
      try { 
        xoRoShiRo1024Star0.jump();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1312,"    public UniformRandomProvider jump() {
        final UniformRandomProvider copy = copy();
        performJump(JUMP_COEFFICIENTS);
        return copy;
    }","  public void test46()  throws Throwable  {
      long[] longArray0 = new long[1];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
      xoRoShiRo1024StarStar0.longJump();
      // Undeclared exception!
      xoRoShiRo1024StarStar0.jump();
  }"
1313,"    protected long nextOutput() {
        return Long.rotateLeft(state1 * 5, 7) * 9;
    }","  public void test0()  throws Throwable  {
      XoShiRo512StarStar xoShiRo512StarStar0 = new XoShiRo512StarStar(9L, 0L, 9L, 9L, 0L, 9L, 9L, 0L);
      long long0 = xoShiRo512StarStar0.nextOutput();
}"
1314,"    protected long nextOutput() {
        return Long.rotateLeft(state1 * 5, 7) * 9;
    }","  public void test1()  throws Throwable  {
      XoShiRo512StarStar xoShiRo512StarStar0 = new XoShiRo512StarStar(0L, 3101L, 0L, 0L, 2037L, 0L, 0L, 0L);
      long long0 = xoShiRo512StarStar0.nextOutput();
}"
1315,"    public XoShiRo512StarStar(long[] seed) {
        super(seed);
    }","  public void test2()  throws Throwable  {
      XoShiRo512StarStar xoShiRo512StarStar0 = null;
      try {
        xoShiRo512StarStar0 = new XoShiRo512StarStar((XoShiRo512StarStar) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.LongProvider"", e);
      }
  }"
1316,"    public XoShiRo512StarStar(long[] seed) {
        super(seed);
    }","  public void test3()  throws Throwable  {
      long[] longArray0 = new long[1];
      XoShiRo512StarStar xoShiRo512StarStar0 = new XoShiRo512StarStar(longArray0);
  }"
1317,"    public XoShiRo512StarStar(long[] seed) {
        super(seed);
    }","  public void test4()  throws Throwable  {
      XoShiRo512StarStar xoShiRo512StarStar0 = new XoShiRo512StarStar(9L, 0L, 9L, 9L, 0L, 9L, 9L, 0L);
      XoShiRo512StarStar xoShiRo512StarStar1 = new XoShiRo512StarStar(xoShiRo512StarStar0);
}"
1318,"    public XoShiRo512StarStar(long[] seed) {
        super(seed);
    }","  public void test5()  throws Throwable  {
      XoShiRo512StarStar xoShiRo512StarStar0 = null;
      try {
        xoShiRo512StarStar0 = new XoShiRo512StarStar((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.AbstractXoShiRo512"", e);
      }
  }"
1319,"    protected long nextOutput() {
        return Long.rotateLeft(state1 * 5, 7) * 9;
    }","  public void test6()  throws Throwable  {
      XoShiRo512StarStar xoShiRo512StarStar0 = new XoShiRo512StarStar(4111957640723818079L, 4111957640723818079L, 4111957640723818079L, 4111957640723818079L, 4111957640723818079L, 4111957640723818079L, 4111957640723818079L, 4111957640723818079L);
      long long0 = xoShiRo512StarStar0.nextOutput();
}"
1320,"    protected XoShiRo512StarStar copy() {
        // This exists to ensure the jump function performed in the super class returns
        // the correct class type. It should not be public.
        return new XoShiRo512StarStar(this);
    }","  public void test7()  throws Throwable  {
      XoShiRo512StarStar xoShiRo512StarStar0 = new XoShiRo512StarStar(4111957640723818079L, 4111957640723818079L, 4111957640723818079L, 4111957640723818079L, 4111957640723818079L, 4111957640723818079L, 4111957640723818079L, 4111957640723818079L);
      XoShiRo512StarStar xoShiRo512StarStar1 = xoShiRo512StarStar0.copy();
}"
1321,"    public XorShift1024StarPhi(long[] seed) {
        super(seed, 0x9e3779b97f4a7c13L);
    }","  public void test0()  throws Throwable  {
      XorShift1024StarPhi xorShift1024StarPhi0 = null;
      try {
        xorShift1024StarPhi0 = new XorShift1024StarPhi((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1322,"    public XorShift1024StarPhi(long[] seed) {
        super(seed, 0x9e3779b97f4a7c13L);
    }","  public void test1()  throws Throwable  {
      long[] longArray0 = new long[1];
      XorShift1024StarPhi xorShift1024StarPhi0 = new XorShift1024StarPhi(longArray0);
      XorShift1024StarPhi xorShift1024StarPhi1 = new XorShift1024StarPhi(xorShift1024StarPhi0);
}"
1323,"    protected XorShift1024StarPhi copy() {
        // This exists to ensure the jump function performed in the super class returns
        // the correct class type. It should not be public.
        return new XorShift1024StarPhi(this);
    }","  public void test2()  throws Throwable  {
      long[] longArray0 = new long[0];
      XorShift1024StarPhi xorShift1024StarPhi0 = new XorShift1024StarPhi(longArray0);
      XorShift1024StarPhi xorShift1024StarPhi1 = xorShift1024StarPhi0.copy();
}"
1324,"    public XorShift1024StarPhi(long[] seed) {
        super(seed, 0x9e3779b97f4a7c13L);
    }","  public void test3()  throws Throwable  {
      XorShift1024StarPhi xorShift1024StarPhi0 = null;
      try {
        xorShift1024StarPhi0 = new XorShift1024StarPhi((XorShift1024StarPhi) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.LongProvider"", e);
      }
  }"
1325,"    protected long transform(long s0, long s15) {
        return s0 * 0x9e3779b97f4a7c13L;
    }","  public void test0()  throws Throwable  {
      long[] longArray0 = new long[2];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      long long0 = xoRoShiRo1024Star0.transform(0L, 0L);
}"
1326,"    protected long transform(long s0, long s15) {
        return s0 * 0x9e3779b97f4a7c13L;
    }","  public void test1()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      long long0 = xoRoShiRo1024Star0.transform((-2985L), (-2985L));
}"
1327,"    protected long transform(long s0, long s15) {
        return s0 * 0x9e3779b97f4a7c13L;
    }","  public void test2()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      long long0 = xoRoShiRo1024Star0.transform(440L, 0L);
}"
1328,"    public XoRoShiRo1024Star(long[] seed) {
        super(seed);
    }","  public void test3()  throws Throwable  {
      XoRoShiRo1024Star xoRoShiRo1024Star0 = null;
      try {
        xoRoShiRo1024Star0 = new XoRoShiRo1024Star((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1329,"    public XoRoShiRo1024Star(long[] seed) {
        super(seed);
    }","  public void test4()  throws Throwable  {
      XoRoShiRo1024Star xoRoShiRo1024Star0 = null;
      try {
        xoRoShiRo1024Star0 = new XoRoShiRo1024Star((XoRoShiRo1024Star) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.LongProvider"", e);
      }
  }"
1330,"    public XoRoShiRo1024Star(long[] seed) {
        super(seed);
    }","  public void test5()  throws Throwable  {
      long[] longArray0 = new long[2];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      XoRoShiRo1024Star xoRoShiRo1024Star1 = new XoRoShiRo1024Star(xoRoShiRo1024Star0);
}"
1331,"    protected XoRoShiRo1024Star copy() {
        // This exists to ensure the jump function returns
        // the correct class type. It should not be public.
        return new XoRoShiRo1024Star(this);
    }","  public void test6()  throws Throwable  {
      long[] longArray0 = new long[1];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      XoRoShiRo1024Star xoRoShiRo1024Star1 = xoRoShiRo1024Star0.copy();
}"
1332,"    protected long nextOutput() {
        return Long.rotateLeft(state0 + state3, 23) + state0;
    }","  public void test0()  throws Throwable  {
      XoShiRo256PlusPlus xoShiRo256PlusPlus0 = new XoShiRo256PlusPlus(0L, 0L, 0L, 0L);
      long long0 = xoShiRo256PlusPlus0.nextOutput();
}"
1333,"    protected long nextOutput() {
        return Long.rotateLeft(state0 + state3, 23) + state0;
    }","  public void test1()  throws Throwable  {
      XoShiRo256PlusPlus xoShiRo256PlusPlus0 = new XoShiRo256PlusPlus((-136L), (-136L), (-136L), (-136L));
      long long0 = xoShiRo256PlusPlus0.nextOutput();
}"
1334,"    public XoShiRo256PlusPlus(long[] seed) {
        super(seed);
    }","  public void test2()  throws Throwable  {
      XoShiRo256PlusPlus xoShiRo256PlusPlus0 = null;
      try {
        xoShiRo256PlusPlus0 = new XoShiRo256PlusPlus((XoShiRo256PlusPlus) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.LongProvider"", e);
      }
  }"
1335,"    protected long nextOutput() {
        return Long.rotateLeft(state0 + state3, 23) + state0;
    }","  public void test3()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoShiRo256PlusPlus xoShiRo256PlusPlus0 = new XoShiRo256PlusPlus(longArray0);
      long long0 = xoShiRo256PlusPlus0.nextOutput();
}"
1336,"    public XoShiRo256PlusPlus(long[] seed) {
        super(seed);
    }","  public void test4()  throws Throwable  {
      XoShiRo256PlusPlus xoShiRo256PlusPlus0 = null;
      try {
        xoShiRo256PlusPlus0 = new XoShiRo256PlusPlus((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.AbstractXoShiRo256"", e);
      }
  }"
1337,"    protected XoShiRo256PlusPlus copy() {
        // This exists to ensure the jump function performed in the super class returns
        // the correct class type. It should not be public.
        return new XoShiRo256PlusPlus(this);
    }","  public void test5()  throws Throwable  {
      XoShiRo256PlusPlus xoShiRo256PlusPlus0 = new XoShiRo256PlusPlus(583L, 583L, 583L, 583L);
      XoShiRo256PlusPlus xoShiRo256PlusPlus1 = xoShiRo256PlusPlus0.copy();
}"
1338,"    public XoShiRo256PlusPlus(long[] seed) {
        super(seed);
    }","  public void test6()  throws Throwable  {
      XoShiRo256PlusPlus xoShiRo256PlusPlus0 = new XoShiRo256PlusPlus((-136L), (-136L), (-136L), (-136L));
      XoShiRo256PlusPlus xoShiRo256PlusPlus1 = new XoShiRo256PlusPlus(xoShiRo256PlusPlus0);
}"
1339,"    protected long transform(long s0, long s15) {
        return Long.rotateLeft(s0 + s15, 23) + s15;
    }","  public void test0()  throws Throwable  {
      long[] longArray0 = new long[3];
      XoRoShiRo1024PlusPlus xoRoShiRo1024PlusPlus0 = new XoRoShiRo1024PlusPlus(longArray0);
      long long0 = xoRoShiRo1024PlusPlus0.transform(0L, 0L);
}"
1340,"    protected long transform(long s0, long s15) {
        return Long.rotateLeft(s0 + s15, 23) + s15;
    }","  public void test1()  throws Throwable  {
      long[] longArray0 = new long[2];
      XoRoShiRo1024PlusPlus xoRoShiRo1024PlusPlus0 = new XoRoShiRo1024PlusPlus(longArray0);
      long long0 = xoRoShiRo1024PlusPlus0.transform(1296L, 1L);
}"
1341,"    protected long transform(long s0, long s15) {
        return Long.rotateLeft(s0 + s15, 23) + s15;
    }","  public void test2()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024PlusPlus xoRoShiRo1024PlusPlus0 = new XoRoShiRo1024PlusPlus(longArray0);
      long long0 = xoRoShiRo1024PlusPlus0.transform((-1379L), 5L);
}"
1342,"    public XoRoShiRo1024PlusPlus(long[] seed) {
        super(seed);
    }","  public void test3()  throws Throwable  {
      XoRoShiRo1024PlusPlus xoRoShiRo1024PlusPlus0 = null;
      try {
        xoRoShiRo1024PlusPlus0 = new XoRoShiRo1024PlusPlus((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1343,"    public XoRoShiRo1024PlusPlus(long[] seed) {
        super(seed);
    }","  public void test4()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024PlusPlus xoRoShiRo1024PlusPlus0 = new XoRoShiRo1024PlusPlus(longArray0);
      XoRoShiRo1024PlusPlus xoRoShiRo1024PlusPlus1 = new XoRoShiRo1024PlusPlus(xoRoShiRo1024PlusPlus0);
}"
1344,"    protected XoRoShiRo1024PlusPlus copy() {
        // This exists to ensure the jump function returns
        // the correct class type. It should not be public.
        return new XoRoShiRo1024PlusPlus(this);
    }","  public void test5()  throws Throwable  {
      long[] longArray0 = new long[7];
      XoRoShiRo1024PlusPlus xoRoShiRo1024PlusPlus0 = new XoRoShiRo1024PlusPlus(longArray0);
      XoRoShiRo1024PlusPlus xoRoShiRo1024PlusPlus1 = xoRoShiRo1024PlusPlus0.copy();
}"
1345,"    public XoRoShiRo1024PlusPlus(long[] seed) {
        super(seed);
    }","  public void test6()  throws Throwable  {
      XoRoShiRo1024PlusPlus xoRoShiRo1024PlusPlus0 = null;
      try {
        xoRoShiRo1024PlusPlus0 = new XoRoShiRo1024PlusPlus((XoRoShiRo1024PlusPlus) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.LongProvider"", e);
      }
  }"
1346,"    private TwoCmres(int seed,
                     Cmres x,
                     Cmres y) {
        if (x.equals(y)) {
            throw new IllegalArgumentException(""Subcycle generators must be different"");
        }
        this.x = x;
        this.y = y;
        setSeedInternal(seed);
    }","  public void test0()  throws Throwable  {
      LinkedList<TwoCmres.Cmres> linkedList0 = new LinkedList<TwoCmres.Cmres>();
      TwoCmres.Cmres twoCmres_Cmres0 = new TwoCmres.Cmres((-1851L), (-2548), (-2548));
      linkedList0.add(twoCmres_Cmres0);
      TwoCmres.Cmres.Factory.checkUnique(linkedList0, 0L);
  }"
1347,"    private TwoCmres(int seed,
                     Cmres x,
                     Cmres y) {
        if (x.equals(y)) {
            throw new IllegalArgumentException(""Subcycle generators must be different"");
        }
        this.x = x;
        this.y = y;
        setSeedInternal(seed);
    }","  public void test1()  throws Throwable  {
      TwoCmres.Cmres.Factory twoCmres_Cmres_Factory0 = new TwoCmres.Cmres.Factory();
      // Undeclared exception!
      try { 
        twoCmres_Cmres_Factory0.get(14);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Out of interval [0, 13]
         //
         verifyException(""org.apache.commons.rng.core.source64.TwoCmres$Cmres$Factory"", e);
      }
  }"
1348,"    private TwoCmres(int seed,
                     Cmres x,
                     Cmres y) {
        if (x.equals(y)) {
            throw new IllegalArgumentException(""Subcycle generators must be different"");
        }
        this.x = x;
        this.y = y;
        setSeedInternal(seed);
    }","  public void test2()  throws Throwable  {
      TwoCmres.Cmres twoCmres_Cmres0 = new TwoCmres.Cmres((-1311035227701529639L), 1954, 1954);
      twoCmres_Cmres0.transform((-8823573168932131537L));
  }"
1349,"    public String toString() {
        return super.toString() + "" ("" + x + "" + "" + y + "")"";
    }","  public void test3()  throws Throwable  {
      TwoCmres.Cmres twoCmres_Cmres0 = new TwoCmres.Cmres((-2009L), 56, (-1));
      twoCmres_Cmres0.toString();
  }"
1350,"    private TwoCmres(int seed,
                     Cmres x,
                     Cmres y) {
        if (x.equals(y)) {
            throw new IllegalArgumentException(""Subcycle generators must be different"");
        }
        this.x = x;
        this.y = y;
        setSeedInternal(seed);
    }","  public void test4()  throws Throwable  {
      TwoCmres.Cmres twoCmres_Cmres0 = new TwoCmres.Cmres(3692L, Integer.MAX_VALUE, Integer.MAX_VALUE);
      twoCmres_Cmres0.getMultiply();
  }"
1351,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, 16);

        final long[] state = NumberFactory.makeLongArray(c[0]);
        xx = state[0];
        yy = state[1];

        super.setStateInternal(c[1]);
    }","  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(56);
      TwoCmres twoCmres0 = new TwoCmres(integer0);
      byte[] byteArray0 = twoCmres0.getStateInternal();
      twoCmres0.setStateInternal(byteArray0);
  }"
1352,"    public long next() {
        xx = x.transform(xx);
        yy = y.transform(yy);

        return xx + yy;
    }","  public void test6()  throws Throwable  {
      Integer integer0 = new Integer(56);
      TwoCmres twoCmres0 = new TwoCmres(integer0);
      twoCmres0.nextFloat();
      twoCmres0.next();
  }"
1353,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, 16);

        final long[] state = NumberFactory.makeLongArray(c[0]);
        xx = state[0];
        yy = state[1];

        super.setStateInternal(c[1]);
    }","  public void test7()  throws Throwable  {
      Integer integer0 = new Integer(1);
      TwoCmres twoCmres0 = new TwoCmres(integer0);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        twoCmres0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 16 but was 5
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1354,"    private TwoCmres(int seed,
                     Cmres x,
                     Cmres y) {
        if (x.equals(y)) {
            throw new IllegalArgumentException(""Subcycle generators must be different"");
        }
        this.x = x;
        this.y = y;
        setSeedInternal(seed);
    }","  public void test8()  throws Throwable  {
      TwoCmres twoCmres0 = null;
      try {
        twoCmres0 = new TwoCmres((Integer) null, 244, 244);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.TwoCmres"", e);
      }
  }"
1355,"    private TwoCmres(int seed,
                     Cmres x,
                     Cmres y) {
        if (x.equals(y)) {
            throw new IllegalArgumentException(""Subcycle generators must be different"");
        }
        this.x = x;
        this.y = y;
        setSeedInternal(seed);
    }","  public void test9()  throws Throwable  {
      Integer integer0 = new Integer(106120225);
      TwoCmres twoCmres0 = new TwoCmres(integer0);
  }"
1356,"    private TwoCmres(int seed,
                     Cmres x,
                     Cmres y) {
        if (x.equals(y)) {
            throw new IllegalArgumentException(""Subcycle generators must be different"");
        }
        this.x = x;
        this.y = y;
        setSeedInternal(seed);
    }","  public void test10()  throws Throwable  {
      TwoCmres twoCmres0 = null;
      try {
        twoCmres0 = new TwoCmres((Integer) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.TwoCmres"", e);
      }
  }"
1357,"    private TwoCmres(int seed,
                     Cmres x,
                     Cmres y) {
        if (x.equals(y)) {
            throw new IllegalArgumentException(""Subcycle generators must be different"");
        }
        this.x = x;
        this.y = y;
        setSeedInternal(seed);
    }","  public void test11()  throws Throwable  {
      TwoCmres.Cmres twoCmres_Cmres0 = new TwoCmres.Cmres(2040L, 1, 1);
      int int0 = twoCmres_Cmres0.getStart();
}"
1358,"    private TwoCmres(int seed,
                     Cmres x,
                     Cmres y) {
        if (x.equals(y)) {
            throw new IllegalArgumentException(""Subcycle generators must be different"");
        }
        this.x = x;
        this.y = y;
        setSeedInternal(seed);
    }","  public void test12()  throws Throwable  {
      TwoCmres.Cmres twoCmres_Cmres0 = new TwoCmres.Cmres(2040L, 1, 1);
      int int0 = twoCmres_Cmres0.getStart();
}"
1359,"    public static int numberOfSubcycleGenerators() {
        return FACTORY.numberOfSubcycleGenerators();
    }","  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(878);
      TwoCmres twoCmres0 = new TwoCmres(integer0, 0, 8);
}"
1360,"    private TwoCmres(int seed,
                     Cmres x,
                     Cmres y) {
        if (x.equals(y)) {
            throw new IllegalArgumentException(""Subcycle generators must be different"");
        }
        this.x = x;
        this.y = y;
        setSeedInternal(seed);
    }","  public void test14()  throws Throwable  {
      TwoCmres.Cmres twoCmres_Cmres0 = new TwoCmres.Cmres(3925L, Integer.MAX_VALUE, Integer.MAX_VALUE);
      LinkedList<TwoCmres.Cmres> linkedList0 = new LinkedList<TwoCmres.Cmres>();
      linkedList0.add(twoCmres_Cmres0);
      // Undeclared exception!
      try { 
        TwoCmres.Cmres.Factory.checkUnique(linkedList0, 3925L);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Internal error: Please file a bug report
         //
         verifyException(""org.apache.commons.rng.core.source64.TwoCmres$Cmres$Factory"", e);
      }
  }"
1361,"    private TwoCmres(int seed,
                     Cmres x,
                     Cmres y) {
        if (x.equals(y)) {
            throw new IllegalArgumentException(""Subcycle generators must be different"");
        }
        this.x = x;
        this.y = y;
        setSeedInternal(seed);
    }","  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(7);
      TwoCmres twoCmres0 = null;
      try {
        twoCmres0 = new TwoCmres(integer0, 7, 79);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Out of interval [0, 13]
         //
         verifyException(""org.apache.commons.rng.core.source64.TwoCmres$Cmres$Factory"", e);
      }
  }"
1362,"    private TwoCmres(int seed,
                     Cmres x,
                     Cmres y) {
        if (x.equals(y)) {
            throw new IllegalArgumentException(""Subcycle generators must be different"");
        }
        this.x = x;
        this.y = y;
        setSeedInternal(seed);
    }","  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(7);
      TwoCmres twoCmres0 = null;
      try {
        twoCmres0 = new TwoCmres(integer0, 7, 7);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Subcycle generators must be different
         //
         verifyException(""org.apache.commons.rng.core.source64.TwoCmres"", e);
      }
  }"
1363,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, 16);

        final long[] state = NumberFactory.makeLongArray(c[0]);
        xx = state[0];
        yy = state[1];

        super.setStateInternal(c[1]);
    }","  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(6);
      TwoCmres twoCmres0 = new TwoCmres(integer0);
      // Undeclared exception!
      try { 
        twoCmres0.setStateInternal((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1364,"    public long next() {
        xx = x.transform(xx);
        yy = y.transform(yy);

        return xx + yy;
    }","  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(156);
      TwoCmres twoCmres0 = new TwoCmres(integer0);
      long long0 = twoCmres0.next();
}"
1365,"    public String toString() {
        return super.toString() + "" ("" + x + "" + "" + y + "")"";
    }","  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(156);
      TwoCmres twoCmres0 = new TwoCmres(integer0);
      String string0 = twoCmres0.toString();
}"
1366,"    private TwoCmres(int seed,
                     Cmres x,
                     Cmres y) {
        if (x.equals(y)) {
            throw new IllegalArgumentException(""Subcycle generators must be different"");
        }
        this.x = x;
        this.y = y;
        setSeedInternal(seed);
    }","  public void test20()  throws Throwable  {
      TwoCmres.Cmres twoCmres_Cmres0 = new TwoCmres.Cmres(386L, (-855), (-855));
      LinkedList<TwoCmres.Cmres> linkedList0 = new LinkedList<TwoCmres.Cmres>();
      linkedList0.add(twoCmres_Cmres0);
      TwoCmres.Cmres.Factory.checkUnique(linkedList0, (-151293619798402135L));
}"
1367,"    private TwoCmres(int seed,
                     Cmres x,
                     Cmres y) {
        if (x.equals(y)) {
            throw new IllegalArgumentException(""Subcycle generators must be different"");
        }
        this.x = x;
        this.y = y;
        setSeedInternal(seed);
    }","  public void test21()  throws Throwable  {
      TwoCmres.Cmres.Factory twoCmres_Cmres_Factory0 = new TwoCmres.Cmres.Factory();
      // Undeclared exception!
      try { 
        twoCmres_Cmres_Factory0.get((-1287));
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Out of interval [0, 13]
         //
         verifyException(""org.apache.commons.rng.core.source64.TwoCmres$Cmres$Factory"", e);
      }
  }"
1368,"    public static int numberOfSubcycleGenerators() {
        return FACTORY.numberOfSubcycleGenerators();
    }","  public void test22()  throws Throwable  {
      int int0 = TwoCmres.numberOfSubcycleGenerators();
}"
1369,"    public XorShift1024Star(long[] seed) {
        this(seed, 1181783497276652981L);
    }","  public void test0()  throws Throwable  {
      long[] longArray0 = new long[1];
      XorShift1024Star xorShift1024Star0 = new XorShift1024Star(longArray0, 14L);
  }"
1370,"    public long next() {
        final long s0 = state[index];
        index = (index + 1) & 15;
        long s1 = state[index];
        s1 ^= s1 << 31; // a
        state[index] = s1 ^ s0 ^ (s1 >>> 11) ^ (s0 >>> 30); // b,c
        return state[index] * multiplier;
    }","  public void test1()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-1813L);
      XorShift1024StarPhi xorShift1024StarPhi0 = new XorShift1024StarPhi(longArray0);
      long long0 = xorShift1024StarPhi0.next();
}"
1371,"    public long next() {
        final long s0 = state[index];
        index = (index + 1) & 15;
        long s1 = state[index];
        s1 ^= s1 << 31; // a
        state[index] = s1 ^ s0 ^ (s1 >>> 11) ^ (s0 >>> 30); // b,c
        return state[index] * multiplier;
    }","  public void test2()  throws Throwable  {
      long[] longArray0 = new long[0];
      XorShift1024StarPhi xorShift1024StarPhi0 = new XorShift1024StarPhi(longArray0);
      long long0 = xorShift1024StarPhi0.next();
}"
1372,"    protected XorShift1024Star copy() {
        // This exists to ensure the jump function returns
        // the correct class type. It should not be public.
        return new XorShift1024Star(this);
    }","  public void test3()  throws Throwable  {
      long[] longArray0 = new long[0];
      XorShift1024Star xorShift1024Star0 = new XorShift1024Star(longArray0);
      XorShift1024Star xorShift1024Star1 = xorShift1024Star0.copy();
}"
1373,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, (SEED_SIZE + 1) * 8);

        final long[] tmp = NumberFactory.makeLongArray(c[0]);
        System.arraycopy(tmp, 0, state, 0, SEED_SIZE);
        index = (int) tmp[SEED_SIZE];

        super.setStateInternal(c[1]);
    }","  public void test4()  throws Throwable  {
      long[] longArray0 = new long[5];
      XorShift1024StarPhi xorShift1024StarPhi0 = new XorShift1024StarPhi(longArray0);
      // Undeclared exception!
      try { 
        xorShift1024StarPhi0.setStateInternal((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1374,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, (SEED_SIZE + 1) * 8);

        final long[] tmp = NumberFactory.makeLongArray(c[0]);
        System.arraycopy(tmp, 0, state, 0, SEED_SIZE);
        index = (int) tmp[SEED_SIZE];

        super.setStateInternal(c[1]);
    }","  public void test5()  throws Throwable  {
      long[] longArray0 = new long[0];
      XorShift1024Star xorShift1024Star0 = new XorShift1024Star(longArray0);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        xorShift1024Star0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 136 but was 5
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1375,"    public UniformRandomProvider jump() {
        final UniformRandomProvider copy = copy();
        performJump();
        return copy;
    }","  public void test6()  throws Throwable  {
      long[] longArray0 = new long[0];
      XorShift1024StarPhi xorShift1024StarPhi0 = new XorShift1024StarPhi(longArray0);
      xorShift1024StarPhi0.jump();
      // Undeclared exception!
      xorShift1024StarPhi0.jump();
  }"
1376,"    public XorShift1024Star(long[] seed) {
        this(seed, 1181783497276652981L);
    }","  public void test7()  throws Throwable  {
      XorShift1024Star xorShift1024Star0 = null;
      try {
        xorShift1024Star0 = new XorShift1024Star((XorShift1024Star) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.LongProvider"", e);
      }
  }"
1377,"    public XorShift1024Star(long[] seed) {
        this(seed, 1181783497276652981L);
    }","  public void test8()  throws Throwable  {
      long[] longArray0 = new long[0];
      XorShift1024StarPhi xorShift1024StarPhi0 = new XorShift1024StarPhi(longArray0);
      XorShift1024Star xorShift1024Star0 = new XorShift1024Star(xorShift1024StarPhi0);
  }"
1378,"    public XorShift1024Star(long[] seed) {
        this(seed, 1181783497276652981L);
    }","  public void test9()  throws Throwable  {
      XorShift1024Star xorShift1024Star0 = null;
      try {
        xorShift1024Star0 = new XorShift1024Star((long[]) null, 0L);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1379,"    public long next() {
        final long s0 = state[index];
        index = (index + 1) & 15;
        long s1 = state[index];
        s1 ^= s1 << 31; // a
        state[index] = s1 ^ s0 ^ (s1 >>> 11) ^ (s0 >>> 30); // b,c
        return state[index] * multiplier;
    }","  public void test10()  throws Throwable  {
      long[] longArray0 = new long[2];
      XorShift1024StarPhi xorShift1024StarPhi0 = new XorShift1024StarPhi(longArray0);
      long long0 = xorShift1024StarPhi0.next();
}"
1380,"    public XorShift1024Star(long[] seed) {
        this(seed, 1181783497276652981L);
    }","  public void test11()  throws Throwable  {
      long[] longArray0 = new long[22];
      XorShift1024Star xorShift1024Star0 = new XorShift1024Star(longArray0);
      RandomProviderState randomProviderState0 = xorShift1024Star0.saveState();
      xorShift1024Star0.restoreState(randomProviderState0);
  }"
1381,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, (SEED_SIZE + 1) * 8);

        final long[] tmp = NumberFactory.makeLongArray(c[0]);
        System.arraycopy(tmp, 0, state, 0, SEED_SIZE);
        index = (int) tmp[SEED_SIZE];

        super.setStateInternal(c[1]);
    }","  public void test12()  throws Throwable  {
      long[] longArray0 = new long[0];
      XorShift1024StarPhi xorShift1024StarPhi0 = new XorShift1024StarPhi(longArray0);
      byte[] byteArray0 = xorShift1024StarPhi0.getStateInternal();
      xorShift1024StarPhi0.setStateInternal(byteArray0);
}"
1382,"    public UniformRandomProvider jump() {
        final UniformRandomProvider copy = copy();
        performJump();
        return copy;
    }","  public void test13()  throws Throwable  {
      long[] longArray0 = new long[0];
      XorShift1024Star xorShift1024Star0 = new XorShift1024Star(longArray0);
      xorShift1024Star0.nextLong();
      UniformRandomProvider uniformRandomProvider0 = xorShift1024Star0.jump();
}"
1383,"    public XorShift1024Star(long[] seed) {
        this(seed, 1181783497276652981L);
    }","  public void test14()  throws Throwable  {
      XorShift1024Star xorShift1024Star0 = null;
      try {
        xorShift1024Star0 = new XorShift1024Star((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1384,"    protected long nextOutput() {
        return state0 + state1;
    }","  public void test0()  throws Throwable  {
      XoRoShiRo128Plus xoRoShiRo128Plus0 = new XoRoShiRo128Plus(0L, 0L);
      long long0 = xoRoShiRo128Plus0.nextOutput();
}"
1385,"    protected long nextOutput() {
        return state0 + state1;
    }","  public void test1()  throws Throwable  {
      XoRoShiRo128Plus xoRoShiRo128Plus0 = new XoRoShiRo128Plus(4294967295L, 1827L);
      long long0 = xoRoShiRo128Plus0.nextOutput();
}"
1386,"    protected long nextOutput() {
        return state0 + state1;
    }","  public void test2()  throws Throwable  {
      XoRoShiRo128Plus xoRoShiRo128Plus0 = new XoRoShiRo128Plus(0L, (-1L));
      long long0 = xoRoShiRo128Plus0.nextOutput();
}"
1387,"    public XoRoShiRo128Plus(long[] seed) {
        super(seed);
    }","  public void test3()  throws Throwable  {
      XoRoShiRo128Plus xoRoShiRo128Plus0 = null;
      try {
        xoRoShiRo128Plus0 = new XoRoShiRo128Plus((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.AbstractXoRoShiRo128"", e);
      }
  }"
1388,"    public XoRoShiRo128Plus(long[] seed) {
        super(seed);
    }","  public void test4()  throws Throwable  {
      XoRoShiRo128Plus xoRoShiRo128Plus0 = null;
      try {
        xoRoShiRo128Plus0 = new XoRoShiRo128Plus((XoRoShiRo128Plus) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.LongProvider"", e);
      }
  }"
1389,"    public XoRoShiRo128Plus(long[] seed) {
        super(seed);
    }","  public void test5()  throws Throwable  {
      XoRoShiRo128Plus xoRoShiRo128Plus0 = new XoRoShiRo128Plus(0L, (-1L));
      XoRoShiRo128Plus xoRoShiRo128Plus1 = new XoRoShiRo128Plus(xoRoShiRo128Plus0);
}"
1390,"    public XoRoShiRo128Plus(long[] seed) {
        super(seed);
    }","  public void test6()  throws Throwable  {
      long[] longArray0 = new long[1];
      XoRoShiRo128Plus xoRoShiRo128Plus0 = new XoRoShiRo128Plus(longArray0);
      boolean boolean0 = xoRoShiRo128Plus0.nextBoolean();
}"
1391,"    protected XoRoShiRo128Plus copy() {
        // This exists to ensure the jump function performed in the super class returns
        // the correct class type. It should not be public.
        return new XoRoShiRo128Plus(this);
    }","  public void test7()  throws Throwable  {
      XoRoShiRo128Plus xoRoShiRo128Plus0 = new XoRoShiRo128Plus((-3452L), (-3452L));
      XoRoShiRo128Plus xoRoShiRo128Plus1 = xoRoShiRo128Plus0.copy();
}"
1392,"    protected long transform(long s0, long s15) {
        return Long.rotateLeft(s0 * 5, 7) * 9;
    }","  public void test0()  throws Throwable  {
      long[] longArray0 = new long[1];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
      long long0 = xoRoShiRo1024StarStar0.transform(0L, (-1L));
}"
1393,"    protected long transform(long s0, long s15) {
        return Long.rotateLeft(s0 * 5, 7) * 9;
    }","  public void test1()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
      long long0 = xoRoShiRo1024StarStar0.transform(1399L, 1399L);
}"
1394,"    protected long transform(long s0, long s15) {
        return Long.rotateLeft(s0 * 5, 7) * 9;
    }","  public void test2()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
      long long0 = xoRoShiRo1024StarStar0.transform((-983L), (-983L));
}"
1395,"    public XoRoShiRo1024StarStar(long[] seed) {
        super(seed);
    }","  public void test3()  throws Throwable  {
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = null;
      try {
        xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar((XoRoShiRo1024StarStar) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.LongProvider"", e);
      }
  }"
1396,"    protected XoRoShiRo1024StarStar copy() {
        // This exists to ensure the jump function returns
        // the correct class type. It should not be public.
        return new XoRoShiRo1024StarStar(this);
    }","  public void test4()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar1 = xoRoShiRo1024StarStar0.copy();
}"
1397,"    public XoRoShiRo1024StarStar(long[] seed) {
        super(seed);
    }","  public void test5()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar1 = new XoRoShiRo1024StarStar(xoRoShiRo1024StarStar0);
}"
1398,"    public XoRoShiRo1024StarStar(long[] seed) {
        super(seed);
    }","  public void test6()  throws Throwable  {
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = null;
      try {
        xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1399,"    protected long nextOutput() {
        return Long.rotateLeft(state1 * 5, 7) * 9;
    }","  public void test0()  throws Throwable  {
      XoShiRo256StarStar xoShiRo256StarStar0 = new XoShiRo256StarStar(0L, 0L, 0L, 0L);
      long long0 = xoShiRo256StarStar0.nextOutput();
}"
1400,"    protected long nextOutput() {
        return Long.rotateLeft(state1 * 5, 7) * 9;
    }","  public void test1()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoShiRo256StarStar xoShiRo256StarStar0 = new XoShiRo256StarStar(longArray0);
      long long0 = xoShiRo256StarStar0.nextOutput();
}"
1401,"    protected long nextOutput() {
        return Long.rotateLeft(state1 * 5, 7) * 9;
    }","  public void test2()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = 5267131003631869839L;
      XoShiRo256StarStar xoShiRo256StarStar0 = new XoShiRo256StarStar(longArray0);
      long long0 = xoShiRo256StarStar0.nextOutput();
}"
1402,"    public XoShiRo256StarStar(long[] seed) {
        super(seed);
    }","  public void test3()  throws Throwable  {
      XoShiRo256StarStar xoShiRo256StarStar0 = null;
      try {
        xoShiRo256StarStar0 = new XoShiRo256StarStar((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.AbstractXoShiRo256"", e);
      }
  }"
1403,"    public XoShiRo256StarStar(long[] seed) {
        super(seed);
    }","  public void test4()  throws Throwable  {
      XoShiRo256StarStar xoShiRo256StarStar0 = null;
      try {
        xoShiRo256StarStar0 = new XoShiRo256StarStar((XoShiRo256StarStar) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.LongProvider"", e);
      }
  }"
1404,"    protected XoShiRo256StarStar copy() {
        // This exists to ensure the jump function performed in the super class returns
        // the correct class type. It should not be public.
        return new XoShiRo256StarStar(this);
    }","  public void test5()  throws Throwable  {
      long[] longArray0 = new long[12];
      XoShiRo256StarStar xoShiRo256StarStar0 = new XoShiRo256StarStar(longArray0);
      XoShiRo256StarStar xoShiRo256StarStar1 = xoShiRo256StarStar0.copy();
}"
1405,"    public XoShiRo256StarStar(long[] seed) {
        super(seed);
    }","  public void test6()  throws Throwable  {
      XoShiRo256StarStar xoShiRo256StarStar0 = new XoShiRo256StarStar(0L, 0L, 0L, 0L);
      XoShiRo256StarStar xoShiRo256StarStar1 = new XoShiRo256StarStar(xoShiRo256StarStar0);
}"
1406,"    public long next() {
        // Override the abstract class to use a different state update step.
        // Note: This requires different jump coefficients.

        final long s0 = state0;
        long s1 = state1;
        final long result = Long.rotateLeft(s0 + s1, 17) + s0;

        s1 ^= s0;
        state0 = Long.rotateLeft(s0, 49) ^ s1 ^ (s1 << 21); // a, b
        state1 = Long.rotateLeft(s1, 28); // c

        return result;
    }","  public void test0()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 5040521015619105285L;
      XoRoShiRo128PlusPlus xoRoShiRo128PlusPlus0 = new XoRoShiRo128PlusPlus(longArray0);
      long long0 = xoRoShiRo128PlusPlus0.next();
}"
1407,"    public long next() {
        // Override the abstract class to use a different state update step.
        // Note: This requires different jump coefficients.

        final long s0 = state0;
        long s1 = state1;
        final long result = Long.rotateLeft(s0 + s1, 17) + s0;

        s1 ^= s0;
        state0 = Long.rotateLeft(s0, 49) ^ s1 ^ (s1 << 21); // a, b
        state1 = Long.rotateLeft(s1, 28); // c

        return result;
    }","  public void test1()  throws Throwable  {
      XoRoShiRo128PlusPlus xoRoShiRo128PlusPlus0 = new XoRoShiRo128PlusPlus((-859L), (-859L));
      long long0 = xoRoShiRo128PlusPlus0.next();
}"
1408,"    protected XoRoShiRo128PlusPlus copy() {
        // This exists to ensure the jump function performed in the super class returns
        // the correct class type. It should not be public.
        return new XoRoShiRo128PlusPlus(this);
    }","  public void test2()  throws Throwable  {
      XoRoShiRo128PlusPlus xoRoShiRo128PlusPlus0 = new XoRoShiRo128PlusPlus((-859L), (-859L));
      XoRoShiRo128PlusPlus xoRoShiRo128PlusPlus1 = xoRoShiRo128PlusPlus0.copy();
}"
1409,"    public XoRoShiRo128PlusPlus(long[] seed) {
        super(seed);
    }","  public void test3()  throws Throwable  {
      XoRoShiRo128PlusPlus xoRoShiRo128PlusPlus0 = null;
      try {
        xoRoShiRo128PlusPlus0 = new XoRoShiRo128PlusPlus((XoRoShiRo128PlusPlus) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.LongProvider"", e);
      }
  }"
1410,"    public XoRoShiRo128PlusPlus(long[] seed) {
        super(seed);
    }","  public void test4()  throws Throwable  {
      long[] longArray0 = new long[2];
      XoRoShiRo128PlusPlus xoRoShiRo128PlusPlus0 = new XoRoShiRo128PlusPlus(longArray0);
      XoRoShiRo128PlusPlus xoRoShiRo128PlusPlus1 = new XoRoShiRo128PlusPlus(xoRoShiRo128PlusPlus0);
}"
1411,"    public long next() {
        // Override the abstract class to use a different state update step.
        // Note: This requires different jump coefficients.

        final long s0 = state0;
        long s1 = state1;
        final long result = Long.rotateLeft(s0 + s1, 17) + s0;

        s1 ^= s0;
        state0 = Long.rotateLeft(s0, 49) ^ s1 ^ (s1 << 21); // a, b
        state1 = Long.rotateLeft(s1, 28); // c

        return result;
    }","  public void test5()  throws Throwable  {
      long[] longArray0 = new long[2];
      XoRoShiRo128PlusPlus xoRoShiRo128PlusPlus0 = new XoRoShiRo128PlusPlus(longArray0);
      long long0 = xoRoShiRo128PlusPlus0.next();
}"
1412,"    protected long nextOutput() {
        throw new UnsupportedOperationException(""The PlusPlus algorithm redefines the next() method"");
    }","  public void test6()  throws Throwable  {
      long[] longArray0 = new long[1];
      XoRoShiRo128PlusPlus xoRoShiRo128PlusPlus0 = new XoRoShiRo128PlusPlus(longArray0);
      // Undeclared exception!
      try { 
        xoRoShiRo128PlusPlus0.nextOutput();
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // The PlusPlus algorithm redefines the next() method
         //
         verifyException(""org.apache.commons.rng.core.source64.XoRoShiRo128PlusPlus"", e);
      }
  }"
1413,"    public JumpableUniformRandomProvider longJump() {
        // Duplicated from the abstract class to change the jump coefficients
        final JumpableUniformRandomProvider copy = copy();
        performJump(LONG_JUMP_COEFFICIENTS);
        return copy;
    }","  public void test7()  throws Throwable  {
      XoRoShiRo128PlusPlus xoRoShiRo128PlusPlus0 = new XoRoShiRo128PlusPlus(26L, 26L);
      JumpableUniformRandomProvider jumpableUniformRandomProvider0 = xoRoShiRo128PlusPlus0.longJump();
}"
1414,"    public UniformRandomProvider jump() {
        // Duplicated from the abstract class to change the jump coefficients
        final UniformRandomProvider copy = copy();
        performJump(JUMP_COEFFICIENTS);
        return copy;
    }","  public void test8()  throws Throwable  {
      long[] longArray0 = new long[1];
      XoRoShiRo128PlusPlus xoRoShiRo128PlusPlus0 = new XoRoShiRo128PlusPlus(longArray0);
      UniformRandomProvider uniformRandomProvider0 = xoRoShiRo128PlusPlus0.jump();
}"
1415,"    public XoRoShiRo128PlusPlus(long[] seed) {
        super(seed);
    }","  public void test9()  throws Throwable  {
      XoRoShiRo128PlusPlus xoRoShiRo128PlusPlus0 = null;
      try {
        xoRoShiRo128PlusPlus0 = new XoRoShiRo128PlusPlus((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.AbstractXoRoShiRo128"", e);
      }
  }"
1416,"    static void nextBytesFill(RandomLongSource source,
                              byte[] bytes,
                              int start,
                              int len) {
        int index = start; // Index of first insertion.

        // Index of first insertion plus multiple of 8 part of length
        // (i.e. length with 3 least significant bits unset).
        final int indexLoopLimit = index + (len & 0x7ffffff8);

        // Start filling in the byte array, 8 bytes at a time.
        while (index < indexLoopLimit) {
            final long random = source.next();
            bytes[index++] = (byte) random;
            bytes[index++] = (byte) (random >>> 8);
            bytes[index++] = (byte) (random >>> 16);
            bytes[index++] = (byte) (random >>> 24);
            bytes[index++] = (byte) (random >>> 32);
            bytes[index++] = (byte) (random >>> 40);
            bytes[index++] = (byte) (random >>> 48);
            bytes[index++] = (byte) (random >>> 56);
        }

        final int indexLimit = start + len; // Index of last insertion + 1.

        // Fill in the remaining bytes.
        if (index < indexLimit) {
            long random = source.next();
            while (true) {
                bytes[index++] = (byte) random;
                if (index < indexLimit) {
                    random >>>= 8;
                } else {
                    break;
                }
            }
        }
    }","  public void test0()  throws Throwable  {
      XoShiRo256PlusPlus xoShiRo256PlusPlus0 = new XoShiRo256PlusPlus(1L, 0L, 1L, 1L);
      byte[] byteArray0 = new byte[8];
      LongProvider.nextBytesFill(xoShiRo256PlusPlus0, byteArray0, (byte)103, (byte) (-33));
}"
1417,"    public boolean nextBoolean() {
        // Shift up. This will eventually overflow and become zero.
        booleanBitMask <<= 1;
        // The mask will either contain a single bit or none.
        if (booleanBitMask == 0) {
            // Set the least significant bit
            booleanBitMask = 1;
            // Get the next value
            booleanSource = nextLong();
        }
        // Return if the bit is set
        return (booleanSource & booleanBitMask) != 0;
    }","  public void test1()  throws Throwable  {
      long[] longArray0 = new long[2];
      MersenneTwister64 mersenneTwister64_0 = new MersenneTwister64(longArray0);
      boolean boolean0 = mersenneTwister64_0.nextBoolean();
      boolean boolean1 = mersenneTwister64_0.nextBoolean();
}"
1418,"    public boolean nextBoolean() {
        // Shift up. This will eventually overflow and become zero.
        booleanBitMask <<= 1;
        // The mask will either contain a single bit or none.
        if (booleanBitMask == 0) {
            // Set the least significant bit
            booleanBitMask = 1;
            // Get the next value
            booleanSource = nextLong();
        }
        // Return if the bit is set
        return (booleanSource & booleanBitMask) != 0;
    }","  public void test2()  throws Throwable  {
      long[] longArray0 = new long[2];
      MersenneTwister64 mersenneTwister64_0 = new MersenneTwister64(longArray0);
      boolean boolean0 = mersenneTwister64_0.nextBoolean();
      boolean boolean1 = mersenneTwister64_0.nextBoolean();
}"
1419,"    static void nextBytesFill(RandomLongSource source,
                              byte[] bytes,
                              int start,
                              int len) {
        int index = start; // Index of first insertion.

        // Index of first insertion plus multiple of 8 part of length
        // (i.e. length with 3 least significant bits unset).
        final int indexLoopLimit = index + (len & 0x7ffffff8);

        // Start filling in the byte array, 8 bytes at a time.
        while (index < indexLoopLimit) {
            final long random = source.next();
            bytes[index++] = (byte) random;
            bytes[index++] = (byte) (random >>> 8);
            bytes[index++] = (byte) (random >>> 16);
            bytes[index++] = (byte) (random >>> 24);
            bytes[index++] = (byte) (random >>> 32);
            bytes[index++] = (byte) (random >>> 40);
            bytes[index++] = (byte) (random >>> 48);
            bytes[index++] = (byte) (random >>> 56);
        }

        final int indexLimit = start + len; // Index of last insertion + 1.

        // Fill in the remaining bytes.
        if (index < indexLimit) {
            long random = source.next();
            while (true) {
                bytes[index++] = (byte) random;
                if (index < indexLimit) {
                    random >>>= 8;
                } else {
                    break;
                }
            }
        }
    }","  public void test3()  throws Throwable  {
      XoRoShiRo128Plus xoRoShiRo128Plus0 = new XoRoShiRo128Plus((-1673L), 5443821109340885276L);
      byte[] byteArray0 = new byte[3];
      LongProvider.nextBytesFill(xoRoShiRo128Plus0, byteArray0, 1, 1);
}"
1420,"    public long nextLong() {
        return next();
    }","  public void test4()  throws Throwable  {
      long[] longArray0 = new long[9];
      XoRoShiRo1024StarStar xoRoShiRo1024StarStar0 = new XoRoShiRo1024StarStar(longArray0);
      long long0 = xoRoShiRo1024StarStar0.nextLong();
}"
1421,"    public long nextLong() {
        return next();
    }","  public void test5()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = (-2132L);
      XoShiRo512StarStar xoShiRo512StarStar0 = new XoShiRo512StarStar(longArray0);
      long long0 = xoShiRo512StarStar0.nextLong();
}"
1422,"    public int nextInt() {
        // Directly store and use the long value as a source for ints
        if (cachedIntSource) {
            // Consume the cache value
            cachedIntSource = false;
            // Return the lower 32 bits
            return NumberFactory.extractLo(intSource);
        }
        // Fill the cache
        cachedIntSource = true;
        intSource = nextLong();
        // Return the upper 32 bits
        return NumberFactory.extractHi(intSource);
    }","  public void test6()  throws Throwable  {
      XoShiRo512StarStar xoShiRo512StarStar0 = new XoShiRo512StarStar((-7264645677142396983L), (-7264645677142396983L), 1L, 3444880142468915289L, (-388L), (-3162L), 3444880142468915289L, 1980173651575369784L);
      xoShiRo512StarStar0.nextDouble();
      int int0 = xoShiRo512StarStar0.nextInt();
}"
1423,"    public double nextDouble() {
        return NumberFactory.makeDouble(nextLong());
    }","  public void test7()  throws Throwable  {
      XoRoShiRo128Plus xoRoShiRo128Plus0 = new XoRoShiRo128Plus(0L, 0L);
      double double0 = xoRoShiRo128Plus0.nextDouble();
}"
1424,"    protected byte[] getStateInternal() {
        // Pack the boolean inefficiently as a long
        final long[] state = {booleanSource,
                              booleanBitMask,
                              intSource,
                              cachedIntSource ? 1 : 0 };
        return composeStateInternal(NumberFactory.makeByteArray(state),
                                    super.getStateInternal());
    }","  public void test8()  throws Throwable  {
      XoRoShiRo128StarStar xoRoShiRo128StarStar0 = new XoRoShiRo128StarStar((-8924956236279331811L), (-8924956236279331811L));
      byte[] byteArray0 = xoRoShiRo128StarStar0.getStateInternal();
}"
1425,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, 32);
        final long[] state = NumberFactory.makeLongArray(c[0]);
        booleanSource   = state[0];
        booleanBitMask  = state[1];
        intSource       = state[2];
        // Non-zero is true
        cachedIntSource = state[3] != 0;
        super.setStateInternal(c[1]);
    }","  public void test9()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoShiRo256StarStar xoShiRo256StarStar0 = new XoShiRo256StarStar(longArray0);
      // Undeclared exception!
      try { 
        xoShiRo256StarStar0.setStateInternal((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1426,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, 32);
        final long[] state = NumberFactory.makeLongArray(c[0]);
        booleanSource   = state[0];
        booleanBitMask  = state[1];
        intSource       = state[2];
        // Non-zero is true
        cachedIntSource = state[3] != 0;
        super.setStateInternal(c[1]);
    }","  public void test10()  throws Throwable  {
      Long long0 = new Long(0L);
      SplitMix64 splitMix64_0 = new SplitMix64(long0);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        splitMix64_0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 8 but was 6
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1427,"    public long nextLong() {
        return next();
    }","  public void test11()  throws Throwable  {
      long[] longArray0 = new long[1];
      MersenneTwister64 mersenneTwister64_0 = new MersenneTwister64(longArray0);
      mersenneTwister64_0.nextInt();
      byte[] byteArray0 = mersenneTwister64_0.getStateInternal();
      mersenneTwister64_0.nextBytes(byteArray0);
      mersenneTwister64_0.setStateInternal(byteArray0);
      // Undeclared exception!
      try { 
        mersenneTwister64_0.nextLong();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1428,"    public int nextInt() {
        // Directly store and use the long value as a source for ints
        if (cachedIntSource) {
            // Consume the cache value
            cachedIntSource = false;
            // Return the lower 32 bits
            return NumberFactory.extractLo(intSource);
        }
        // Fill the cache
        cachedIntSource = true;
        intSource = nextLong();
        // Return the upper 32 bits
        return NumberFactory.extractHi(intSource);
    }","  public void test12()  throws Throwable  {
      long[] longArray0 = new long[10];
      MersenneTwister64 mersenneTwister64_0 = new MersenneTwister64(longArray0);
      byte[] byteArray0 = mersenneTwister64_0.getStateInternal();
      mersenneTwister64_0.nextBytes(byteArray0);
      mersenneTwister64_0.setStateInternal(byteArray0);
      mersenneTwister64_0.nextInt(14);
      // Undeclared exception!
      try { 
        mersenneTwister64_0.nextInt();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1429,"    public double nextDouble() {
        return NumberFactory.makeDouble(nextLong());
    }","  public void test13()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 8502941058421957549L;
      MersenneTwister64 mersenneTwister64_0 = new MersenneTwister64(longArray0);
      byte[] byteArray0 = mersenneTwister64_0.getStateInternal();
      mersenneTwister64_0.nextBytes(byteArray0);
      mersenneTwister64_0.setStateInternal(byteArray0);
      // Undeclared exception!
      try { 
        mersenneTwister64_0.nextDouble();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1430,"    static void nextBytesFill(RandomLongSource source,
                              byte[] bytes,
                              int start,
                              int len) {
        int index = start; // Index of first insertion.

        // Index of first insertion plus multiple of 8 part of length
        // (i.e. length with 3 least significant bits unset).
        final int indexLoopLimit = index + (len & 0x7ffffff8);

        // Start filling in the byte array, 8 bytes at a time.
        while (index < indexLoopLimit) {
            final long random = source.next();
            bytes[index++] = (byte) random;
            bytes[index++] = (byte) (random >>> 8);
            bytes[index++] = (byte) (random >>> 16);
            bytes[index++] = (byte) (random >>> 24);
            bytes[index++] = (byte) (random >>> 32);
            bytes[index++] = (byte) (random >>> 40);
            bytes[index++] = (byte) (random >>> 48);
            bytes[index++] = (byte) (random >>> 56);
        }

        final int indexLimit = start + len; // Index of last insertion + 1.

        // Fill in the remaining bytes.
        if (index < indexLimit) {
            long random = source.next();
            while (true) {
                bytes[index++] = (byte) random;
                if (index < indexLimit) {
                    random >>>= 8;
                } else {
                    break;
                }
            }
        }
    }","  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        LongProvider.nextBytesFill((RandomLongSource) null, byteArray0, (byte) (-38), (-2337));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.LongProvider"", e);
      }
  }"
1431,"    static void nextBytesFill(RandomLongSource source,
                              byte[] bytes,
                              int start,
                              int len) {
        int index = start; // Index of first insertion.

        // Index of first insertion plus multiple of 8 part of length
        // (i.e. length with 3 least significant bits unset).
        final int indexLoopLimit = index + (len & 0x7ffffff8);

        // Start filling in the byte array, 8 bytes at a time.
        while (index < indexLoopLimit) {
            final long random = source.next();
            bytes[index++] = (byte) random;
            bytes[index++] = (byte) (random >>> 8);
            bytes[index++] = (byte) (random >>> 16);
            bytes[index++] = (byte) (random >>> 24);
            bytes[index++] = (byte) (random >>> 32);
            bytes[index++] = (byte) (random >>> 40);
            bytes[index++] = (byte) (random >>> 48);
            bytes[index++] = (byte) (random >>> 56);
        }

        final int indexLimit = start + len; // Index of last insertion + 1.

        // Fill in the remaining bytes.
        if (index < indexLimit) {
            long random = source.next();
            while (true) {
                bytes[index++] = (byte) random;
                if (index < indexLimit) {
                    random >>>= 8;
                } else {
                    break;
                }
            }
        }
    }","  public void test15()  throws Throwable  {
      XoShiRo512StarStar xoShiRo512StarStar0 = new XoShiRo512StarStar(3935559000370003845L, (-7550217L), (-1311L), 3935559000370003845L, 3935559000370003845L, (-1498L), 1467L, 3935559000370003845L);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        LongProvider.nextBytesFill(xoShiRo512StarStar0, byteArray0, (byte)82, (-335));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 82
         //
         verifyException(""org.apache.commons.rng.core.source64.LongProvider"", e);
      }
  }"
1432,"    public void nextBytes(byte[] bytes) {
        nextBytesFill(this, bytes, 0, bytes.length);
    }","  public void test16()  throws Throwable  {
      long[] longArray0 = new long[5];
      XorShift1024StarPhi xorShift1024StarPhi0 = new XorShift1024StarPhi(longArray0);
      // Undeclared exception!
      try { 
        xorShift1024StarPhi0.nextBytes((byte[]) null, 0, 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.LongProvider"", e);
      }
  }"
1433,"    public void nextBytes(byte[] bytes) {
        nextBytesFill(this, bytes, 0, bytes.length);
    }","  public void test17()  throws Throwable  {
      long[] longArray0 = new long[5];
      PcgRxsMXs64 pcgRxsMXs64_0 = new PcgRxsMXs64(longArray0);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        pcgRxsMXs64_0.nextBytes(byteArray0, (-2244), 0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // -2244 is out of interval [0, 3]
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1434,"    public void nextBytes(byte[] bytes) {
        nextBytesFill(this, bytes, 0, bytes.length);
    }","  public void test18()  throws Throwable  {
      Long long0 = new Long(1L);
      JenkinsSmallFast64 jenkinsSmallFast64_0 = new JenkinsSmallFast64(long0);
      // Undeclared exception!
      try { 
        jenkinsSmallFast64_0.nextBytes((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.LongProvider"", e);
      }
  }"
1435,"    public void nextBytes(byte[] bytes) {
        nextBytesFill(this, bytes, 0, bytes.length);
    }","  public void test19()  throws Throwable  {
      long[] longArray0 = new long[10];
      MersenneTwister64 mersenneTwister64_0 = new MersenneTwister64(longArray0);
      byte[] byteArray0 = mersenneTwister64_0.getStateInternal();
      mersenneTwister64_0.nextBytes(byteArray0);
      mersenneTwister64_0.setStateInternal(byteArray0);
      // Undeclared exception!
      try { 
        mersenneTwister64_0.nextBytes(byteArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1436,"    public int nextInt() {
        // Directly store and use the long value as a source for ints
        if (cachedIntSource) {
            // Consume the cache value
            cachedIntSource = false;
            // Return the lower 32 bits
            return NumberFactory.extractLo(intSource);
        }
        // Fill the cache
        cachedIntSource = true;
        intSource = nextLong();
        // Return the upper 32 bits
        return NumberFactory.extractHi(intSource);
    }","  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(0);
      TwoCmres twoCmres0 = new TwoCmres(integer0);
      int int0 = twoCmres0.nextInt();
}"
1437,"    public long nextLong() {
        return next();
    }","  public void test21()  throws Throwable  {
      long[] longArray0 = new long[1];
      MersenneTwister64 mersenneTwister64_0 = new MersenneTwister64(longArray0);
      long long0 = mersenneTwister64_0.nextLong();
}"
1438,"    public void nextBytes(byte[] bytes) {
        nextBytesFill(this, bytes, 0, bytes.length);
    }","  public void test22()  throws Throwable  {
      XoRoShiRo128Plus xoRoShiRo128Plus0 = new XoRoShiRo128Plus(0L, 0L);
      byte[] byteArray0 = new byte[15];
      xoRoShiRo128Plus0.nextBytes(byteArray0, (int) (byte)3, (int) (byte)3);
}"
1439,"    public boolean nextBoolean() {
        // Shift up. This will eventually overflow and become zero.
        booleanBitMask <<= 1;
        // The mask will either contain a single bit or none.
        if (booleanBitMask == 0) {
            // Set the least significant bit
            booleanBitMask = 1;
            // Get the next value
            booleanSource = nextLong();
        }
        // Return if the bit is set
        return (booleanSource & booleanBitMask) != 0;
    }","  public void test23()  throws Throwable  {
      Long long0 = new Long(0L);
      JenkinsSmallFast64 jenkinsSmallFast64_0 = new JenkinsSmallFast64(long0);
      jenkinsSmallFast64_0.next();
      jenkinsSmallFast64_0.nextDouble();
      boolean boolean0 = jenkinsSmallFast64_0.nextBoolean();
}"
1440,"    public boolean nextBoolean() {
        // Shift up. This will eventually overflow and become zero.
        booleanBitMask <<= 1;
        // The mask will either contain a single bit or none.
        if (booleanBitMask == 0) {
            // Set the least significant bit
            booleanBitMask = 1;
            // Get the next value
            booleanSource = nextLong();
        }
        // Return if the bit is set
        return (booleanSource & booleanBitMask) != 0;
    }","  public void test24()  throws Throwable  {
      long[] longArray0 = new long[7];
      MersenneTwister64 mersenneTwister64_0 = new MersenneTwister64(longArray0);
      byte[] byteArray0 = mersenneTwister64_0.getStateInternal();
      mersenneTwister64_0.nextBytes(byteArray0);
      mersenneTwister64_0.setStateInternal(byteArray0);
      boolean boolean0 = mersenneTwister64_0.nextBoolean();
}"
1441,"    public float nextFloat() {
        return NumberFactory.makeFloat(nextInt());
    }","  public void test25()  throws Throwable  {
      long[] longArray0 = new long[10];
      MersenneTwister64 mersenneTwister64_0 = new MersenneTwister64(longArray0);
      byte[] byteArray0 = mersenneTwister64_0.getStateInternal();
      mersenneTwister64_0.nextBytes(byteArray0);
      mersenneTwister64_0.setStateInternal(byteArray0);
      mersenneTwister64_0.nextInt();
      // Undeclared exception!
      try { 
        mersenneTwister64_0.nextFloat();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1442,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, 32);
        final long[] state = NumberFactory.makeLongArray(c[0]);
        booleanSource   = state[0];
        booleanBitMask  = state[1];
        intSource       = state[2];
        // Non-zero is true
        cachedIntSource = state[3] != 0;
        super.setStateInternal(c[1]);
    }","  public void test26()  throws Throwable  {
      Long long0 = new Long(0L);
      SplitMix64 splitMix64_0 = new SplitMix64(long0);
      byte[] byteArray0 = splitMix64_0.getStateInternal();
      splitMix64_0.setStateInternal(byteArray0);
}"
1443,"    public float nextFloat() {
        return NumberFactory.makeFloat(nextInt());
    }","  public void test27()  throws Throwable  {
      Long long0 = new Long(0L);
      SplitMix64 splitMix64_0 = new SplitMix64(long0);
      float float0 = splitMix64_0.nextFloat();
}"
1444,"    protected byte[] getStateInternal() {
        // Pack the boolean inefficiently as a long
        final long[] state = {booleanSource,
                              booleanBitMask,
                              intSource,
                              cachedIntSource ? 1 : 0 };
        return composeStateInternal(NumberFactory.makeByteArray(state),
                                    super.getStateInternal());
    }","  public void test28()  throws Throwable  {
      Long long0 = new Long(0L);
      SplitMix64 splitMix64_0 = new SplitMix64(long0);
      float float0 = splitMix64_0.nextFloat();
      byte[] byteArray0 = splitMix64_0.getStateInternal();
}"
1445,"    public void nextBytes(byte[] bytes) {
        nextBytesFill(this, bytes, 0, bytes.length);
    }","  public void test29()  throws Throwable  {
      long[] longArray0 = new long[6];
      JenkinsSmallFast64 jenkinsSmallFast64_0 = new JenkinsSmallFast64((Long) 8883327418280326963L);
      byte[] byteArray0 = jenkinsSmallFast64_0.getStateInternal();
      DotyHumphreySmallFastCounting64 dotyHumphreySmallFastCounting64_0 = new DotyHumphreySmallFastCounting64(longArray0);
      dotyHumphreySmallFastCounting64_0.nextBytes(byteArray0, 0, 49);
}"
1446,"    public float nextFloat() {
        return NumberFactory.makeFloat(nextInt());
    }","  public void test30()  throws Throwable  {
      long[] longArray0 = new long[5];
      XoRoShiRo1024Star xoRoShiRo1024Star0 = new XoRoShiRo1024Star(longArray0);
      float float0 = xoRoShiRo1024Star0.nextFloat();
}"
1447,,"  public void test31()  throws Throwable  {
      long[] longArray0 = new long[2];
      XoRoShiRo128PlusPlus xoRoShiRo128PlusPlus0 = new XoRoShiRo128PlusPlus(longArray0);
      JumpableUniformRandomProvider jumpableUniformRandomProvider0 = xoRoShiRo128PlusPlus0.longJump();
}"
1448,"    protected void resetCachedState() {
        booleanSource = 0L;
        booleanBitMask = 0L;
        intSource = 0L;
        cachedIntSource = false;
    }","  public void test32()  throws Throwable  {
      Long long0 = new Long(0L);
      SplitMix64 splitMix64_0 = new SplitMix64(long0);
      splitMix64_0.resetCachedState();
  }"
1449,"    protected byte[] getStateInternal() {
        // The increment is divided by 2 before saving.
        // This transform is used in the reference PCG code; it prevents restoring from
        // a byte state a non-odd increment that results in a sub-maximal period generator.
        return composeStateInternal(NumberFactory.makeByteArray(
                new long[] {state, increment >>> 1}),
                super.getStateInternal());
    }","  public void test0()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-1009L);
      PcgRxsMXs64 pcgRxsMXs64_0 = new PcgRxsMXs64(longArray0);
      byte[] byteArray0 = pcgRxsMXs64_0.getStateInternal();
}"
1450,"    public long next() {
        final long x = state;
        state = bump(state);
        final long word = ((x >>> ((x >>> 59) + 5)) ^ x) * -5840758589994634535L;
        return (word >>> 43) ^ word;
    }","  public void test1()  throws Throwable  {
      Long long0 = new Long((-5840758589994634535L));
      PcgRxsMXs64 pcgRxsMXs64_0 = new PcgRxsMXs64(long0);
      long long1 = pcgRxsMXs64_0.next();
}"
1451,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, SEED_SIZE * 8);
        final long[] tempseed = NumberFactory.makeLongArray(c[0]);
        state = tempseed[0];
        // Reverse the transform performed during getState to make the increment odd again.
        increment = tempseed[1] << 1 | 1;
        super.setStateInternal(c[1]);
    }","  public void test2()  throws Throwable  {
      Long long0 = new Long(3347L);
      PcgRxsMXs64 pcgRxsMXs64_0 = new PcgRxsMXs64(long0);
      byte[] byteArray0 = pcgRxsMXs64_0.getStateInternal();
      pcgRxsMXs64_0.setStateInternal(byteArray0);
}"
1452,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, SEED_SIZE * 8);
        final long[] tempseed = NumberFactory.makeLongArray(c[0]);
        state = tempseed[0];
        // Reverse the transform performed during getState to make the increment odd again.
        increment = tempseed[1] << 1 | 1;
        super.setStateInternal(c[1]);
    }","  public void test3()  throws Throwable  {
      long[] longArray0 = new long[1];
      PcgRxsMXs64 pcgRxsMXs64_0 = new PcgRxsMXs64(longArray0);
      // Undeclared exception!
      try { 
        pcgRxsMXs64_0.setStateInternal((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1453,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, SEED_SIZE * 8);
        final long[] tempseed = NumberFactory.makeLongArray(c[0]);
        state = tempseed[0];
        // Reverse the transform performed during getState to make the increment odd again.
        increment = tempseed[1] << 1 | 1;
        super.setStateInternal(c[1]);
    }","  public void test4()  throws Throwable  {
      Long long0 = new Long((-1660L));
      PcgRxsMXs64 pcgRxsMXs64_0 = new PcgRxsMXs64(long0);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        pcgRxsMXs64_0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 16 but was 7
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1454,"    public PcgRxsMXs64(Long seed) {
        increment = DEFAULT_INCREMENT;
        state = bump(seed + this.increment);
    }","  public void test5()  throws Throwable  {
      PcgRxsMXs64 pcgRxsMXs64_0 = null;
      try {
        pcgRxsMXs64_0 = new PcgRxsMXs64((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.PcgRxsMXs64"", e);
      }
  }"
1455,"    public PcgRxsMXs64(Long seed) {
        increment = DEFAULT_INCREMENT;
        state = bump(seed + this.increment);
    }","  public void test6()  throws Throwable  {
      PcgRxsMXs64 pcgRxsMXs64_0 = null;
      try {
        pcgRxsMXs64_0 = new PcgRxsMXs64((Long) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.PcgRxsMXs64"", e);
      }
  }"
1456,"    public long next() {
        final long x = state;
        state = bump(state);
        final long word = ((x >>> ((x >>> 59) + 5)) ^ x) * -5840758589994634535L;
        return (word >>> 43) ^ word;
    }","  public void test7()  throws Throwable  {
      Long long0 = new Long((-11L));
      PcgRxsMXs64 pcgRxsMXs64_0 = new PcgRxsMXs64(long0);
      long long1 = pcgRxsMXs64_0.next();
}"
1457,"    protected long nextOutput() {
        return state0 + state2;
    }","  public void test0()  throws Throwable  {
      XoShiRo512Plus xoShiRo512Plus0 = new XoShiRo512Plus(0L, 0L, 0L, 0L, 0L, 446L, 603L, 603L);
      long long0 = xoShiRo512Plus0.nextOutput();
}"
1458,"    protected long nextOutput() {
        return state0 + state2;
    }","  public void test1()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoShiRo512Plus xoShiRo512Plus0 = new XoShiRo512Plus(longArray0);
      long long0 = xoShiRo512Plus0.nextOutput();
}"
1459,"    public XoShiRo512Plus(long[] seed) {
        super(seed);
    }","  public void test2()  throws Throwable  {
      XoShiRo512Plus xoShiRo512Plus0 = null;
      try {
        xoShiRo512Plus0 = new XoShiRo512Plus((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.AbstractXoShiRo512"", e);
      }
  }"
1460,"    public XoShiRo512Plus(long[] seed) {
        super(seed);
    }","  public void test3()  throws Throwable  {
      XoShiRo512Plus xoShiRo512Plus0 = new XoShiRo512Plus((-2119L), (-2119L), 1659688472399708668L, (-2119L), 3916182429352585840L, 3916182429352585840L, 1659688472399708668L, 1L);
      XoShiRo512Plus xoShiRo512Plus1 = new XoShiRo512Plus(xoShiRo512Plus0);
}"
1461,"    protected long nextOutput() {
        return state0 + state2;
    }","  public void test4()  throws Throwable  {
      XoShiRo512Plus xoShiRo512Plus0 = new XoShiRo512Plus((-2439L), (-2439L), (-2439L), (-2439L), (-2439L), (-2439L), (-2439L), (-2439L));
      long long0 = xoShiRo512Plus0.nextOutput();
}"
1462,"    protected XoShiRo512Plus copy() {
        // This exists to ensure the jump function performed in the super class returns
        // the correct class type. It should not be public.
        return new XoShiRo512Plus(this);
    }","  public void test5()  throws Throwable  {
      long[] longArray0 = new long[1];
      XoShiRo512Plus xoShiRo512Plus0 = new XoShiRo512Plus(longArray0);
      XoShiRo512Plus xoShiRo512Plus1 = xoShiRo512Plus0.copy();
}"
1463,"    public XoShiRo512Plus(long[] seed) {
        super(seed);
    }","  public void test6()  throws Throwable  {
      XoShiRo512Plus xoShiRo512Plus0 = null;
      try {
        xoShiRo512Plus0 = new XoShiRo512Plus((XoShiRo512Plus) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.LongProvider"", e);
      }
  }"
1464,"    protected byte[] getStateInternal() {
        return composeStateInternal(NumberFactory.makeByteArray(
                                        new long[] {state0, state1, state2, state3,
                                                    state4, state5, state6, state7}),
                                    super.getStateInternal());
    }","  public void test0()  throws Throwable  {
      XoShiRo512PlusPlus xoShiRo512PlusPlus0 = new XoShiRo512PlusPlus((-2578L), 0L, 0L, 0L, 0L, 0L, (-1834L), 0L);
      xoShiRo512PlusPlus0.longJump();
      byte[] byteArray0 = xoShiRo512PlusPlus0.getStateInternal();
}"
1465,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, SEED_SIZE * 8);

        setState(NumberFactory.makeLongArray(c[0]));

        super.setStateInternal(c[1]);
    }","  public void test1()  throws Throwable  {
      XoShiRo512PlusPlus xoShiRo512PlusPlus0 = new XoShiRo512PlusPlus(0L, 0L, 7373545129600583345L, 7373545129600583345L, 7373545129600583345L, 7373545129600583345L, 7373545129600583345L, 2124L);
      long[] longArray0 = new long[3];
      XoShiRo512Plus xoShiRo512Plus0 = new XoShiRo512Plus(longArray0);
      byte[] byteArray0 = xoShiRo512Plus0.getStateInternal();
      xoShiRo512PlusPlus0.setStateInternal(byteArray0);
}"
1466,"    public long next() {
        final long result = nextOutput();

        final long t = state1 << 11;

        state2 ^= state0;
        state5 ^= state1;
        state1 ^= state2;
        state7 ^= state3;
        state3 ^= state4;
        state4 ^= state5;
        state0 ^= state6;
        state6 ^= state7;

        state6 ^= t;

        state7 = Long.rotateLeft(state7, 21);

        return result;
    }","  public void test2()  throws Throwable  {
      XoShiRo512Plus xoShiRo512Plus0 = new XoShiRo512Plus(0L, 0L, 0L, 0L, 0L, 2867L, 2867L, 0L);
      long long0 = xoShiRo512Plus0.next();
}"
1467,"    public long next() {
        final long result = nextOutput();

        final long t = state1 << 11;

        state2 ^= state0;
        state5 ^= state1;
        state1 ^= state2;
        state7 ^= state3;
        state3 ^= state4;
        state4 ^= state5;
        state0 ^= state6;
        state6 ^= state7;

        state6 ^= t;

        state7 = Long.rotateLeft(state7, 21);

        return result;
    }","  public void test3()  throws Throwable  {
      XoShiRo512PlusPlus xoShiRo512PlusPlus0 = new XoShiRo512PlusPlus((-5362622907718333345L), (-5362622907718333345L), (-2340L), (-5362622907718333345L), 0L, (-996L), 655L, 655L);
      long long0 = xoShiRo512PlusPlus0.next();
}"
1468,"    public long next() {
        final long result = nextOutput();

        final long t = state1 << 11;

        state2 ^= state0;
        state5 ^= state1;
        state1 ^= state2;
        state7 ^= state3;
        state3 ^= state4;
        state4 ^= state5;
        state0 ^= state6;
        state6 ^= state7;

        state6 ^= t;

        state7 = Long.rotateLeft(state7, 21);

        return result;
    }","  public void test4()  throws Throwable  {
      XoShiRo512StarStar xoShiRo512StarStar0 = new XoShiRo512StarStar((-2241461938891922586L), (-2241461938891922586L), (-425L), (-2241461938891922586L), (-2241461938891922586L), (-2241461938891922586L), 0L, 0L);
      xoShiRo512StarStar0.nextBoolean();
      long long0 = xoShiRo512StarStar0.next();
}"
1469,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, SEED_SIZE * 8);

        setState(NumberFactory.makeLongArray(c[0]));

        super.setStateInternal(c[1]);
    }","  public void test5()  throws Throwable  {
      XoShiRo512PlusPlus xoShiRo512PlusPlus0 = new XoShiRo512PlusPlus(6018250552094165679L, 750L, 750L, 6018250552094165679L, 6018250552094165679L, 6018250552094165679L, 0L, 6018250552094165679L);
      // Undeclared exception!
      try { 
        xoShiRo512PlusPlus0.setStateInternal((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1470,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, SEED_SIZE * 8);

        setState(NumberFactory.makeLongArray(c[0]));

        super.setStateInternal(c[1]);
    }","  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      long[] longArray0 = new long[0];
      XoShiRo512StarStar xoShiRo512StarStar0 = new XoShiRo512StarStar(longArray0);
      // Undeclared exception!
      try { 
        xoShiRo512StarStar0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 64 but was 2
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1471,"    public JumpableUniformRandomProvider longJump() {
        final JumpableUniformRandomProvider copy = copy();
        performJump(LONG_JUMP_COEFFICIENTS);
        return copy;
    }","  public void test7()  throws Throwable  {
      long[] longArray0 = new long[8];
      XoShiRo512Plus xoShiRo512Plus0 = new XoShiRo512Plus(longArray0);
      JumpableUniformRandomProvider jumpableUniformRandomProvider0 = xoShiRo512Plus0.longJump();
}"
1472,"    public UniformRandomProvider jump() {
        final UniformRandomProvider copy = copy();
        performJump(JUMP_COEFFICIENTS);
        return copy;
    }","  public void test8()  throws Throwable  {
      XoShiRo512StarStar xoShiRo512StarStar0 = new XoShiRo512StarStar(258L, 258L, 258L, 258L, 258L, 258L, 258L, 258L);
      UniformRandomProvider uniformRandomProvider0 = xoShiRo512StarStar0.jump();
}"
1473,,"  public void test0()  throws Throwable  {
      XoShiRo256PlusPlus xoShiRo256PlusPlus0 = new XoShiRo256PlusPlus((-237L), 357L, (-336L), (-237L));
      xoShiRo256PlusPlus0.nextDouble();
      RandomProviderState randomProviderState0 = xoShiRo256PlusPlus0.saveState();
}"
1474,"    public long next() {
        final long result = nextOutput();

        final long t = state1 << 17;

        state2 ^= state0;
        state3 ^= state1;
        state1 ^= state2;
        state0 ^= state3;

        state2 ^= t;

        state3 = Long.rotateLeft(state3, 45);

        return result;
    }","  public void test1()  throws Throwable  {
      XoShiRo256Plus xoShiRo256Plus0 = new XoShiRo256Plus(0L, 0L, (-1L), 0L);
      xoShiRo256Plus0.next();
      RandomProviderState randomProviderState0 = xoShiRo256Plus0.saveState();
}"
1475,"    public long next() {
        final long result = nextOutput();

        final long t = state1 << 17;

        state2 ^= state0;
        state3 ^= state1;
        state1 ^= state2;
        state0 ^= state3;

        state2 ^= t;

        state3 = Long.rotateLeft(state3, 45);

        return result;
    }","  public void test2()  throws Throwable  {
      XoShiRo256PlusPlus xoShiRo256PlusPlus0 = new XoShiRo256PlusPlus((-237L), 357L, (-336L), (-237L));
      xoShiRo256PlusPlus0.nextDouble();
      long long0 = xoShiRo256PlusPlus0.next();
}"
1476,"    public long next() {
        final long result = nextOutput();

        final long t = state1 << 17;

        state2 ^= state0;
        state3 ^= state1;
        state1 ^= state2;
        state0 ^= state3;

        state2 ^= t;

        state3 = Long.rotateLeft(state3, 45);

        return result;
    }","  public void test3()  throws Throwable  {
      XoShiRo256Plus xoShiRo256Plus0 = new XoShiRo256Plus((-3959L), (-3959L), (-3959L), (-3959L));
      long long0 = xoShiRo256Plus0.next();
}"
1477,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, SEED_SIZE * 8);

        setState(NumberFactory.makeLongArray(c[0]));

        super.setStateInternal(c[1]);
    }","  public void test4()  throws Throwable  {
      long[] longArray0 = new long[5];
      XoShiRo256Plus xoShiRo256Plus0 = new XoShiRo256Plus(longArray0);
      // Undeclared exception!
      try { 
        xoShiRo256Plus0.setStateInternal((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1478,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, SEED_SIZE * 8);

        setState(NumberFactory.makeLongArray(c[0]));

        super.setStateInternal(c[1]);
    }","  public void test5()  throws Throwable  {
      XoShiRo256PlusPlus xoShiRo256PlusPlus0 = new XoShiRo256PlusPlus(987L, 987L, 3817L, 987L);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        xoShiRo256PlusPlus0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 32 but was 1
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1479,,"  public void test6()  throws Throwable  {
      long[] longArray0 = new long[1];
      XoShiRo256StarStar xoShiRo256StarStar0 = new XoShiRo256StarStar(longArray0);
  }"
1480,"    public JumpableUniformRandomProvider longJump() {
        final JumpableUniformRandomProvider copy = copy();
        performJump(LONG_JUMP_COEFFICIENTS);
        return copy;
    }","  public void test7()  throws Throwable  {
      XoShiRo256PlusPlus xoShiRo256PlusPlus0 = new XoShiRo256PlusPlus(1811L, 1811L, 1811L, 1811L);
      JumpableUniformRandomProvider jumpableUniformRandomProvider0 = xoShiRo256PlusPlus0.longJump();
}"
1481,"    public UniformRandomProvider jump() {
        final UniformRandomProvider copy = copy();
        performJump(JUMP_COEFFICIENTS);
        return copy;
    }","  public void test8()  throws Throwable  {
      XoShiRo256PlusPlus xoShiRo256PlusPlus0 = new XoShiRo256PlusPlus(1811L, 1811L, 1811L, 1811L);
      UniformRandomProvider uniformRandomProvider0 = xoShiRo256PlusPlus0.jump();
}"
1482,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, SEED_SIZE * 8);

        setState(NumberFactory.makeLongArray(c[0]));

        super.setStateInternal(c[1]);
    }","  public void test9()  throws Throwable  {
      XoShiRo256PlusPlus xoShiRo256PlusPlus0 = new XoShiRo256PlusPlus(1811L, 1811L, 1811L, 1811L);
      long[] longArray0 = new long[5];
      XoShiRo256StarStar xoShiRo256StarStar0 = new XoShiRo256StarStar(longArray0);
      byte[] byteArray0 = xoShiRo256StarStar0.getStateInternal();
      xoShiRo256PlusPlus0.setStateInternal(byteArray0);
}"
1483,"    protected long nextOutput() {
        return state0 + state3;
    }","  public void test0()  throws Throwable  {
      XoShiRo256Plus xoShiRo256Plus0 = new XoShiRo256Plus(0L, 0L, 1L, 0L);
      long long0 = xoShiRo256Plus0.nextOutput();
}"
1484,"    protected long nextOutput() {
        return state0 + state3;
    }","  public void test1()  throws Throwable  {
      XoShiRo256Plus xoShiRo256Plus0 = new XoShiRo256Plus(1040L, 1040L, (-1L), (-1L));
      long long0 = xoShiRo256Plus0.nextOutput();
}"
1485,"    public XoShiRo256Plus(long[] seed) {
        super(seed);
    }","  public void test2()  throws Throwable  {
      XoShiRo256Plus xoShiRo256Plus0 = null;
      try {
        xoShiRo256Plus0 = new XoShiRo256Plus((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.AbstractXoShiRo256"", e);
      }
  }"
1486,"    public XoShiRo256Plus(long[] seed) {
        super(seed);
    }","  public void test3()  throws Throwable  {
      XoShiRo256Plus xoShiRo256Plus0 = null;
      try {
        xoShiRo256Plus0 = new XoShiRo256Plus((XoShiRo256Plus) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.LongProvider"", e);
      }
  }"
1487,"    protected XoShiRo256Plus copy() {
        // This exists to ensure the jump function performed in the super class returns
        // the correct class type. It should not be public.
        return new XoShiRo256Plus(this);
    }","  public void test4()  throws Throwable  {
      long[] longArray0 = new long[42];
      XoShiRo256Plus xoShiRo256Plus0 = new XoShiRo256Plus(longArray0);
      XoShiRo256Plus xoShiRo256Plus1 = xoShiRo256Plus0.copy();
}"
1488,"    public XoShiRo256Plus(long[] seed) {
        super(seed);
    }","  public void test5()  throws Throwable  {
      XoShiRo256Plus xoShiRo256Plus0 = new XoShiRo256Plus(0L, (-7046029254386353131L), (-2617L), (-2617L));
      XoShiRo256Plus xoShiRo256Plus1 = new XoShiRo256Plus(xoShiRo256Plus0);
}"
1489,"    protected long nextOutput() {
        return state0 + state3;
    }","  public void test6()  throws Throwable  {
      XoShiRo256Plus xoShiRo256Plus0 = new XoShiRo256Plus(0L, (-7046029254386353131L), (-2617L), (-2617L));
      long long0 = xoShiRo256Plus0.nextOutput();
}"
1490,"    protected long nextOutput() {
        return Long.rotateLeft(state0 + state2, 17) + state2;
    }","  public void test0()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoShiRo512PlusPlus xoShiRo512PlusPlus0 = new XoShiRo512PlusPlus(longArray0);
      long long0 = xoShiRo512PlusPlus0.nextOutput();
}"
1491,"    protected long nextOutput() {
        return Long.rotateLeft(state0 + state2, 17) + state2;
    }","  public void test1()  throws Throwable  {
      XoShiRo512PlusPlus xoShiRo512PlusPlus0 = new XoShiRo512PlusPlus((-1L), (-1072L), (-1L), (-1072L), (-1072L), (-1L), (-2147483648L), (-1072L));
      long long0 = xoShiRo512PlusPlus0.nextOutput();
}"
1492,"    public XoShiRo512PlusPlus(long[] seed) {
        super(seed);
    }","  public void test2()  throws Throwable  {
      XoShiRo512PlusPlus xoShiRo512PlusPlus0 = null;
      try {
        xoShiRo512PlusPlus0 = new XoShiRo512PlusPlus((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.AbstractXoShiRo512"", e);
      }
  }"
1493,"    public XoShiRo512PlusPlus(long[] seed) {
        super(seed);
    }","  public void test3()  throws Throwable  {
      long[] longArray0 = new long[0];
      XoShiRo512PlusPlus xoShiRo512PlusPlus0 = new XoShiRo512PlusPlus(longArray0);
      XoShiRo512PlusPlus xoShiRo512PlusPlus1 = new XoShiRo512PlusPlus(xoShiRo512PlusPlus0);
}"
1494,"    protected long nextOutput() {
        return Long.rotateLeft(state0 + state2, 17) + state2;
    }","  public void test4()  throws Throwable  {
      long[] longArray0 = new long[6];
      XoShiRo512PlusPlus xoShiRo512PlusPlus0 = new XoShiRo512PlusPlus(longArray0);
      long long0 = xoShiRo512PlusPlus0.nextOutput();
}"
1495,"    protected XoShiRo512PlusPlus copy() {
        // This exists to ensure the jump function performed in the super class returns
        // the correct class type. It should not be public.
        return new XoShiRo512PlusPlus(this);
    }","  public void test5()  throws Throwable  {
      long[] longArray0 = new long[6];
      XoShiRo512PlusPlus xoShiRo512PlusPlus0 = new XoShiRo512PlusPlus(longArray0);
      XoShiRo512PlusPlus xoShiRo512PlusPlus1 = xoShiRo512PlusPlus0.copy();
}"
1496,"    public XoShiRo512PlusPlus(long[] seed) {
        super(seed);
    }","  public void test6()  throws Throwable  {
      XoShiRo512PlusPlus xoShiRo512PlusPlus0 = null;
      try {
        xoShiRo512PlusPlus0 = new XoShiRo512PlusPlus((XoShiRo512PlusPlus) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.LongProvider"", e);
      }
  }"
1497,"    public SplitMix64(long seed) {
        state = seed;
    }","  public void test0()  throws Throwable  {
      Long long0 = new Long(0L);
      SplitMix64 splitMix64_0 = new SplitMix64(long0);
  }"
1498,"    public long next() {
        long z = state += 0x9e3779b97f4a7c15L;
        z = (z ^ (z >>> 30)) * 0xbf58476d1ce4e5b9L;
        z = (z ^ (z >>> 27)) * 0x94d049bb133111ebL;
        return z ^ (z >>> 31);
    }","  public void test1()  throws Throwable  {
      SplitMix64 splitMix64_0 = new SplitMix64((-3304L));
      long long0 = splitMix64_0.next();
}"
1499,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, 8);

        state = NumberFactory.makeLong(c[0]);
        super.setStateInternal(c[1]);
    }","  public void test2()  throws Throwable  {
      SplitMix64 splitMix64_0 = new SplitMix64((-7046029254386353131L));
      byte[] byteArray0 = splitMix64_0.getStateInternal();
      splitMix64_0.setStateInternal(byteArray0);
}"
1500,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, 8);

        state = NumberFactory.makeLong(c[0]);
        super.setStateInternal(c[1]);
    }","  public void test3()  throws Throwable  {
      SplitMix64 splitMix64_0 = new SplitMix64(979L);
      // Undeclared exception!
      try { 
        splitMix64_0.setStateInternal((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1501,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, 8);

        state = NumberFactory.makeLong(c[0]);
        super.setStateInternal(c[1]);
    }","  public void test4()  throws Throwable  {
      SplitMix64 splitMix64_0 = new SplitMix64(531L);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        splitMix64_0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 8 but was 4
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1502,"    public long next() {
        long z = state += 0x9e3779b97f4a7c15L;
        z = (z ^ (z >>> 30)) * 0xbf58476d1ce4e5b9L;
        z = (z ^ (z >>> 27)) * 0x94d049bb133111ebL;
        return z ^ (z >>> 31);
    }","  public void test5()  throws Throwable  {
      SplitMix64 splitMix64_0 = new SplitMix64((-7046029254386353131L));
      long long0 = splitMix64_0.next();
}"
1503,"    public SplitMix64(long seed) {
        state = seed;
    }","  public void test6()  throws Throwable  {
      SplitMix64 splitMix64_0 = null;
      try {
        splitMix64_0 = new SplitMix64((Long) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.SplitMix64"", e);
      }
  }"
1504,"    public long next() {
        long x;

        if (mti >= NN) { // generate NN words at one time
            for (int i = 0; i < NN - MM; i++) {
                x = (mt[i] & UM) | (mt[i + 1] & LM);
                mt[i] = mt[i + MM] ^ (x >>> 1) ^ MAG01[(int)(x & 0x1L)];
            }
            for (int i = NN - MM; i < NN - 1; i++) {
                x = (mt[i] & UM) | (mt[i + 1] & LM);
                mt[i] = mt[ i + (MM - NN)] ^ (x >>> 1) ^ MAG01[(int)(x & 0x1L)];
            }

            x = (mt[NN - 1] & UM) | (mt[0] & LM);
            mt[NN - 1] = mt[MM - 1] ^ (x >>> 1) ^ MAG01[(int)(x & 0x1L)];

            mti = 0;
        }

        x = mt[mti++];

        x ^= (x >>> 29) & 0x5555555555555555L;
        x ^= (x << 17) & 0x71d67fffeda60000L;
        x ^= (x << 37) & 0xfff7eee000000000L;
        x ^= x >>> 43;

        return x;
    }","  public void test0()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 895L;
      MersenneTwister64 mersenneTwister64_0 = new MersenneTwister64(longArray0);
      byte[] byteArray0 = mersenneTwister64_0.getStateInternal();
      mersenneTwister64_0.nextBytes(byteArray0);
      mersenneTwister64_0.setStateInternal(byteArray0);
      long long0 = mersenneTwister64_0.next();
}"
1505,"    public long next() {
        long x;

        if (mti >= NN) { // generate NN words at one time
            for (int i = 0; i < NN - MM; i++) {
                x = (mt[i] & UM) | (mt[i + 1] & LM);
                mt[i] = mt[i + MM] ^ (x >>> 1) ^ MAG01[(int)(x & 0x1L)];
            }
            for (int i = NN - MM; i < NN - 1; i++) {
                x = (mt[i] & UM) | (mt[i + 1] & LM);
                mt[i] = mt[ i + (MM - NN)] ^ (x >>> 1) ^ MAG01[(int)(x & 0x1L)];
            }

            x = (mt[NN - 1] & UM) | (mt[0] & LM);
            mt[NN - 1] = mt[MM - 1] ^ (x >>> 1) ^ MAG01[(int)(x & 0x1L)];

            mti = 0;
        }

        x = mt[mti++];

        x ^= (x >>> 29) & 0x5555555555555555L;
        x ^= (x << 17) & 0x71d67fffeda60000L;
        x ^= (x << 37) & 0xfff7eee000000000L;
        x ^= x >>> 43;

        return x;
    }","  public void test1()  throws Throwable  {
      long[] longArray0 = new long[3];
      MersenneTwister64 mersenneTwister64_0 = new MersenneTwister64(longArray0);
      long long0 = mersenneTwister64_0.next();
}"
1506,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, (NN + 1) * 8);

        final long[] tmp = NumberFactory.makeLongArray(c[0]);
        System.arraycopy(tmp, 0, mt, 0, NN);
        mti = (int) tmp[NN];

        super.setStateInternal(c[1]);
    }","  public void test2()  throws Throwable  {
      long[] longArray0 = new long[7];
      MersenneTwister64 mersenneTwister64_0 = new MersenneTwister64(longArray0);
      // Undeclared exception!
      try { 
        mersenneTwister64_0.setStateInternal((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1507,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, (NN + 1) * 8);

        final long[] tmp = NumberFactory.makeLongArray(c[0]);
        System.arraycopy(tmp, 0, mt, 0, NN);
        mti = (int) tmp[NN];

        super.setStateInternal(c[1]);
    }","  public void test3()  throws Throwable  {
      long[] longArray0 = new long[1];
      MersenneTwister64 mersenneTwister64_0 = new MersenneTwister64(longArray0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        mersenneTwister64_0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 2504 but was 0
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1508,"    public long next() {
        long x;

        if (mti >= NN) { // generate NN words at one time
            for (int i = 0; i < NN - MM; i++) {
                x = (mt[i] & UM) | (mt[i + 1] & LM);
                mt[i] = mt[i + MM] ^ (x >>> 1) ^ MAG01[(int)(x & 0x1L)];
            }
            for (int i = NN - MM; i < NN - 1; i++) {
                x = (mt[i] & UM) | (mt[i + 1] & LM);
                mt[i] = mt[ i + (MM - NN)] ^ (x >>> 1) ^ MAG01[(int)(x & 0x1L)];
            }

            x = (mt[NN - 1] & UM) | (mt[0] & LM);
            mt[NN - 1] = mt[MM - 1] ^ (x >>> 1) ^ MAG01[(int)(x & 0x1L)];

            mti = 0;
        }

        x = mt[mti++];

        x ^= (x >>> 29) & 0x5555555555555555L;
        x ^= (x << 17) & 0x71d67fffeda60000L;
        x ^= (x << 37) & 0xfff7eee000000000L;
        x ^= x >>> 43;

        return x;
    }","  public void test4()  throws Throwable  {
      long[] longArray0 = new long[9];
      MersenneTwister64 mersenneTwister64_0 = new MersenneTwister64(longArray0);
      byte[] byteArray0 = mersenneTwister64_0.getStateInternal();
      mersenneTwister64_0.nextBytes(byteArray0);
      mersenneTwister64_0.setStateInternal(byteArray0);
      // Undeclared exception!
      try { 
        mersenneTwister64_0.next();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1509,"    public MersenneTwister64(long[] seed) {
        setSeedInternal(seed);
    }","  public void test5()  throws Throwable  {
      MersenneTwister64 mersenneTwister64_0 = null;
      try {
        mersenneTwister64_0 = new MersenneTwister64((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1510,"    public long next() {
        long x;

        if (mti >= NN) { // generate NN words at one time
            for (int i = 0; i < NN - MM; i++) {
                x = (mt[i] & UM) | (mt[i + 1] & LM);
                mt[i] = mt[i + MM] ^ (x >>> 1) ^ MAG01[(int)(x & 0x1L)];
            }
            for (int i = NN - MM; i < NN - 1; i++) {
                x = (mt[i] & UM) | (mt[i + 1] & LM);
                mt[i] = mt[ i + (MM - NN)] ^ (x >>> 1) ^ MAG01[(int)(x & 0x1L)];
            }

            x = (mt[NN - 1] & UM) | (mt[0] & LM);
            mt[NN - 1] = mt[MM - 1] ^ (x >>> 1) ^ MAG01[(int)(x & 0x1L)];

            mti = 0;
        }

        x = mt[mti++];

        x ^= (x >>> 29) & 0x5555555555555555L;
        x ^= (x << 17) & 0x71d67fffeda60000L;
        x ^= (x << 37) & 0xfff7eee000000000L;
        x ^= x >>> 43;

        return x;
    }","  public void test6()  throws Throwable  {
      long[] longArray0 = new long[0];
      MersenneTwister64 mersenneTwister64_0 = new MersenneTwister64(longArray0);
      long long0 = mersenneTwister64_0.next();
}"
1511,"    protected long nextOutput() {
        return Long.rotateLeft(state0 * 5, 7) * 9;
    }","  public void test0()  throws Throwable  {
      XoRoShiRo128StarStar xoRoShiRo128StarStar0 = new XoRoShiRo128StarStar(0L, 0L);
      long long0 = xoRoShiRo128StarStar0.nextOutput();
}"
1512,"    protected long nextOutput() {
        return Long.rotateLeft(state0 * 5, 7) * 9;
    }","  public void test1()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 3553L;
      XoRoShiRo128StarStar xoRoShiRo128StarStar0 = new XoRoShiRo128StarStar(longArray0);
      long long0 = xoRoShiRo128StarStar0.nextOutput();
}"
1513,"    protected long nextOutput() {
        return Long.rotateLeft(state0 * 5, 7) * 9;
    }","  public void test2()  throws Throwable  {
      XoRoShiRo128StarStar xoRoShiRo128StarStar0 = new XoRoShiRo128StarStar((-7046029254386353133L), (-492L));
      long long0 = xoRoShiRo128StarStar0.nextOutput();
}"
1514,"    public XoRoShiRo128StarStar(long[] seed) {
        super(seed);
    }","  public void test3()  throws Throwable  {
      XoRoShiRo128StarStar xoRoShiRo128StarStar0 = null;
      try {
        xoRoShiRo128StarStar0 = new XoRoShiRo128StarStar((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.AbstractXoRoShiRo128"", e);
      }
  }"
1515,"    public XoRoShiRo128StarStar(long[] seed) {
        super(seed);
    }","  public void test4()  throws Throwable  {
      XoRoShiRo128StarStar xoRoShiRo128StarStar0 = null;
      try {
        xoRoShiRo128StarStar0 = new XoRoShiRo128StarStar((XoRoShiRo128StarStar) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.LongProvider"", e);
      }
  }"
1516,"    public XoRoShiRo128StarStar(long[] seed) {
        super(seed);
    }","  public void test5()  throws Throwable  {
      XoRoShiRo128StarStar xoRoShiRo128StarStar0 = new XoRoShiRo128StarStar(0L, 0L);
      XoRoShiRo128StarStar xoRoShiRo128StarStar1 = new XoRoShiRo128StarStar(xoRoShiRo128StarStar0);
}"
1517,"    protected XoRoShiRo128StarStar copy() {
        // This exists to ensure the jump function performed in the super class returns
        // the correct class type. It should not be public.
        return new XoRoShiRo128StarStar(this);
    }","  public void test6()  throws Throwable  {
      XoRoShiRo128StarStar xoRoShiRo128StarStar0 = new XoRoShiRo128StarStar(0L, 324108011427370141L);
      XoRoShiRo128StarStar xoRoShiRo128StarStar1 = xoRoShiRo128StarStar0.copy();
}"
1518,"    public final long next() {
        final long tmp = a + b + counter++;
        a = b ^ (b >>> 11);
        b = c + (c << 3);
        c = Long.rotateLeft(c, 24) + tmp;
        return tmp;
    }","  public void test0()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2298L);
      DotyHumphreySmallFastCounting64 dotyHumphreySmallFastCounting64_0 = new DotyHumphreySmallFastCounting64(longArray0);
      long long0 = dotyHumphreySmallFastCounting64_0.next();
}"
1519,"    protected void setStateInternal(byte[] s) {
        final byte[][] parts = splitStateInternal(s, 4 * 8);

        final long[] tmp = NumberFactory.makeLongArray(parts[0]);
        a = tmp[0];
        b = tmp[1];
        c = tmp[2];
        counter = tmp[3];

        super.setStateInternal(parts[1]);
    }","  public void test1()  throws Throwable  {
      long[] longArray0 = new long[8];
      DotyHumphreySmallFastCounting64 dotyHumphreySmallFastCounting64_0 = new DotyHumphreySmallFastCounting64(longArray0);
      // Undeclared exception!
      try { 
        dotyHumphreySmallFastCounting64_0.setStateInternal((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1520,"    protected void setStateInternal(byte[] s) {
        final byte[][] parts = splitStateInternal(s, 4 * 8);

        final long[] tmp = NumberFactory.makeLongArray(parts[0]);
        a = tmp[0];
        b = tmp[1];
        c = tmp[2];
        counter = tmp[3];

        super.setStateInternal(parts[1]);
    }","  public void test2()  throws Throwable  {
      long[] longArray0 = new long[9];
      DotyHumphreySmallFastCounting64 dotyHumphreySmallFastCounting64_0 = new DotyHumphreySmallFastCounting64(longArray0);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        dotyHumphreySmallFastCounting64_0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 32 but was 7
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1521,"    public DotyHumphreySmallFastCounting64(long[] seed) {
        if (seed.length < SEED_SIZE) {
            final long[] state = new long[SEED_SIZE];
            fillState(state, seed);
            setSeedInternal(state);
        } else {
            setSeedInternal(seed);
        }
    }","  public void test3()  throws Throwable  {
      DotyHumphreySmallFastCounting64 dotyHumphreySmallFastCounting64_0 = null;
      try {
        dotyHumphreySmallFastCounting64_0 = new DotyHumphreySmallFastCounting64((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.DotyHumphreySmallFastCounting64"", e);
      }
  }"
1522,"    public final long next() {
        final long tmp = a + b + counter++;
        a = b ^ (b >>> 11);
        b = c + (c << 3);
        c = Long.rotateLeft(c, 24) + tmp;
        return tmp;
    }","  public void test4()  throws Throwable  {
      long[] longArray0 = new long[9];
      DotyHumphreySmallFastCounting64 dotyHumphreySmallFastCounting64_0 = new DotyHumphreySmallFastCounting64(longArray0);
      long long0 = dotyHumphreySmallFastCounting64_0.next();
}"
1523,"    protected void setStateInternal(byte[] s) {
        final byte[][] parts = splitStateInternal(s, 4 * 8);

        final long[] tmp = NumberFactory.makeLongArray(parts[0]);
        a = tmp[0];
        b = tmp[1];
        c = tmp[2];
        counter = tmp[3];

        super.setStateInternal(parts[1]);
    }","  public void test5()  throws Throwable  {
      long[] longArray0 = new long[1];
      DotyHumphreySmallFastCounting64 dotyHumphreySmallFastCounting64_0 = new DotyHumphreySmallFastCounting64(longArray0);
      byte[] byteArray0 = dotyHumphreySmallFastCounting64_0.getStateInternal();
      dotyHumphreySmallFastCounting64_0.setStateInternal(byteArray0);
}"
1524,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, SEED_SIZE * 8);

        setState(NumberFactory.makeLongArray(c[0]));

        super.setStateInternal(c[1]);
    }","  public void test0()  throws Throwable  {
      long[] longArray0 = new long[1];
      XoRoShiRo128PlusPlus xoRoShiRo128PlusPlus0 = new XoRoShiRo128PlusPlus(longArray0);
      byte[] byteArray0 = xoRoShiRo128PlusPlus0.getStateInternal();
      XoRoShiRo128Plus xoRoShiRo128Plus0 = new XoRoShiRo128Plus(longArray0);
      xoRoShiRo128Plus0.setStateInternal(byteArray0);
}"
1525,"    final void performJump(long[] jumpCoefficients) {
        long s0 = 0;
        long s1 = 0;
        for (final long jc : jumpCoefficients) {
            for (int b = 0; b < 64; b++) {
                if ((jc & (1L << b)) != 0) {
                    s0 ^= state0;
                    s1 ^= state1;
                }
                next();
            }
        }
        state0 = s0;
        state1 = s1;
        resetCachedState();
    }","  public void test1()  throws Throwable  {
      XoRoShiRo128StarStar xoRoShiRo128StarStar0 = new XoRoShiRo128StarStar(0L, 0L);
      long[] longArray0 = new long[0];
      xoRoShiRo128StarStar0.performJump(longArray0);
}"
1526,"    public long next() {
        final long result = nextOutput();

        final long s0 = state0;
        long s1 = state1;

        s1 ^= s0;
        state0 = Long.rotateLeft(s0, 24) ^ s1 ^ (s1 << 16); // a, b
        state1 = Long.rotateLeft(s1, 37); // c

        return result;
    }","  public void test2()  throws Throwable  {
      long[] longArray0 = new long[7];
      XoRoShiRo128StarStar xoRoShiRo128StarStar0 = new XoRoShiRo128StarStar(longArray0);
      long long0 = xoRoShiRo128StarStar0.next();
}"
1527,"    public long next() {
        final long result = nextOutput();

        final long s0 = state0;
        long s1 = state1;

        s1 ^= s0;
        state0 = Long.rotateLeft(s0, 24) ^ s1 ^ (s1 << 16); // a, b
        state1 = Long.rotateLeft(s1, 37); // c

        return result;
    }","  public void test3()  throws Throwable  {
      XoRoShiRo128StarStar xoRoShiRo128StarStar0 = new XoRoShiRo128StarStar(3895567441539718553L, 2617L);
      byte[] byteArray0 = new byte[5];
      xoRoShiRo128StarStar0.nextBytes(byteArray0);
      xoRoShiRo128StarStar0.nextInt();
      long long0 = xoRoShiRo128StarStar0.next();
}"
1528,"    public long next() {
        final long result = nextOutput();

        final long s0 = state0;
        long s1 = state1;

        s1 ^= s0;
        state0 = Long.rotateLeft(s0, 24) ^ s1 ^ (s1 << 16); // a, b
        state1 = Long.rotateLeft(s1, 37); // c

        return result;
    }","  public void test4()  throws Throwable  {
      XoRoShiRo128StarStar xoRoShiRo128StarStar0 = new XoRoShiRo128StarStar(3741798284078044153L, 3741798284078044153L);
      xoRoShiRo128StarStar0.state0 = (-3266927057705177477L);
      long long0 = xoRoShiRo128StarStar0.next();
}"
1529,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, SEED_SIZE * 8);

        setState(NumberFactory.makeLongArray(c[0]));

        super.setStateInternal(c[1]);
    }","  public void test5()  throws Throwable  {
      long[] longArray0 = new long[8];
      XoRoShiRo128PlusPlus xoRoShiRo128PlusPlus0 = new XoRoShiRo128PlusPlus(longArray0);
      // Undeclared exception!
      try { 
        xoRoShiRo128PlusPlus0.setStateInternal((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1530,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, SEED_SIZE * 8);

        setState(NumberFactory.makeLongArray(c[0]));

        super.setStateInternal(c[1]);
    }","  public void test6()  throws Throwable  {
      XoRoShiRo128StarStar xoRoShiRo128StarStar0 = new XoRoShiRo128StarStar((-1648L), 0L);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        xoRoShiRo128StarStar0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 16 but was 6
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1531,"    final void performJump(long[] jumpCoefficients) {
        long s0 = 0;
        long s1 = 0;
        for (final long jc : jumpCoefficients) {
            for (int b = 0; b < 64; b++) {
                if ((jc & (1L << b)) != 0) {
                    s0 ^= state0;
                    s1 ^= state1;
                }
                next();
            }
        }
        state0 = s0;
        state1 = s1;
        resetCachedState();
    }","  public void test7()  throws Throwable  {
      XoRoShiRo128StarStar xoRoShiRo128StarStar0 = new XoRoShiRo128StarStar(3895567441539718553L, 2617L);
      // Undeclared exception!
      try { 
        xoRoShiRo128StarStar0.performJump((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.AbstractXoRoShiRo128"", e);
      }
  }"
1532,"    public JumpableUniformRandomProvider longJump() {
        final JumpableUniformRandomProvider copy = copy();
        performJump(LONG_JUMP_COEFFICIENTS);
        return copy;
    }","  public void test8()  throws Throwable  {
      long[] longArray0 = new long[1];
      XoRoShiRo128StarStar xoRoShiRo128StarStar0 = new XoRoShiRo128StarStar(longArray0);
      JumpableUniformRandomProvider jumpableUniformRandomProvider0 = xoRoShiRo128StarStar0.longJump();
}"
1533,"    public UniformRandomProvider jump() {
        final UniformRandomProvider copy = copy();
        performJump(JUMP_COEFFICIENTS);
        return copy;
    }","  public void test9()  throws Throwable  {
      long[] longArray0 = new long[4];
      XoRoShiRo128StarStar xoRoShiRo128StarStar0 = new XoRoShiRo128StarStar(longArray0);
      UniformRandomProvider uniformRandomProvider0 = xoRoShiRo128StarStar0.jump();
}"
1534,"    public final long next() {
        final long e = a - Long.rotateLeft(b, 7);
        a = b ^ Long.rotateLeft(c, 13);
        b = c + Long.rotateLeft(d, 37);
        c = d + e;
        d = e + a;
        return d;
    }","  public void test0()  throws Throwable  {
      Long long0 = new Long(0L);
      JenkinsSmallFast64 jenkinsSmallFast64_0 = new JenkinsSmallFast64(long0);
      long long1 = jenkinsSmallFast64_0.next();
}"
1535,"    protected void setStateInternal(byte[] s) {
        final byte[][] parts = splitStateInternal(s, 4 * 8);

        final long[] tmp = NumberFactory.makeLongArray(parts[0]);
        a = tmp[0];
        b = tmp[1];
        c = tmp[2];
        d = tmp[3];

        super.setStateInternal(parts[1]);
    }","  public void test1()  throws Throwable  {
      Long long0 = new Long(2189L);
      JenkinsSmallFast64 jenkinsSmallFast64_0 = new JenkinsSmallFast64(long0);
      // Undeclared exception!
      try { 
        jenkinsSmallFast64_0.setStateInternal((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1536,"    protected void setStateInternal(byte[] s) {
        final byte[][] parts = splitStateInternal(s, 4 * 8);

        final long[] tmp = NumberFactory.makeLongArray(parts[0]);
        a = tmp[0];
        b = tmp[1];
        c = tmp[2];
        d = tmp[3];

        super.setStateInternal(parts[1]);
    }","  public void test2()  throws Throwable  {
      Long long0 = new Long((-107L));
      JenkinsSmallFast64 jenkinsSmallFast64_0 = new JenkinsSmallFast64(long0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        jenkinsSmallFast64_0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 32 but was 0
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1537,"    public JenkinsSmallFast64(Long seed) {
        setSeedInternal(seed);
    }","  public void test3()  throws Throwable  {
      JenkinsSmallFast64 jenkinsSmallFast64_0 = null;
      try {
        jenkinsSmallFast64_0 = new JenkinsSmallFast64((Long) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source64.JenkinsSmallFast64"", e);
      }
  }"
1538,"    public final long next() {
        final long e = a - Long.rotateLeft(b, 7);
        a = b ^ Long.rotateLeft(c, 13);
        b = c + Long.rotateLeft(d, 37);
        c = d + e;
        d = e + a;
        return d;
    }","  public void test4()  throws Throwable  {
      Long long0 = new Long((-5075132425047734838L));
      JenkinsSmallFast64 jenkinsSmallFast64_0 = new JenkinsSmallFast64(long0);
      long long1 = jenkinsSmallFast64_0.next();
}"
1539,"    protected void setStateInternal(byte[] s) {
        final byte[][] parts = splitStateInternal(s, 4 * 8);

        final long[] tmp = NumberFactory.makeLongArray(parts[0]);
        a = tmp[0];
        b = tmp[1];
        c = tmp[2];
        d = tmp[3];

        super.setStateInternal(parts[1]);
    }","  public void test5()  throws Throwable  {
      Long long0 = new Long((-5075132425047734838L));
      JenkinsSmallFast64 jenkinsSmallFast64_0 = new JenkinsSmallFast64(long0);
      byte[] byteArray0 = jenkinsSmallFast64_0.getStateInternal();
      jenkinsSmallFast64_0.setStateInternal(byteArray0);
}"
1540,"    public static float makeFloat(int v) {
        // Require the least significant 24-bits so shift the higher bits across
        return (v >>> 8) * FLOAT_MULTIPLIER;
    }","  public void test0()  throws Throwable  {
      float float0 = NumberFactory.makeFloat((-1));
}"
1541,"    public static double makeDouble(long v) {
        // Require the least significant 53-bits so shift the higher bits across
        return (v >>> 11) * DOUBLE_MULTIPLIER;
    }","  public void test1()  throws Throwable  {
      double double0 = NumberFactory.makeDouble((-3276), (-3276));
}"
1542,"    public static double makeDouble(long v) {
        // Require the least significant 53-bits so shift the higher bits across
        return (v >>> 11) * DOUBLE_MULTIPLIER;
    }","  public void test2()  throws Throwable  {
      double double0 = NumberFactory.makeDouble(0, 1965);
}"
1543,"    public static double makeDouble(long v) {
        // Require the least significant 53-bits so shift the higher bits across
        return (v >>> 11) * DOUBLE_MULTIPLIER;
    }","  public void test3()  throws Throwable  {
      double double0 = NumberFactory.makeDouble((-2353L));
}"
1544,"    public static boolean makeBoolean(int v) {
        return v < 0;
    }","  public void test4()  throws Throwable  {
      boolean boolean0 = NumberFactory.makeBoolean(0L);
}"
1545,"    public static boolean makeBoolean(int v) {
        return v < 0;
    }","  public void test5()  throws Throwable  {
      boolean boolean0 = NumberFactory.makeBoolean(0);
}"
1546,"    public static long makeLong(int v,
                                int w) {
        return (((long) v) << 32) | (w & 0xffffffffL);
    }","  public void test6()  throws Throwable  {
      long[] longArray0 = new long[1];
      byte[] byteArray0 = NumberFactory.makeByteArray(longArray0);
      long long0 = NumberFactory.makeLong(byteArray0);
}"
1547,"    public static long makeLong(int v,
                                int w) {
        return (((long) v) << 32) | (w & 0xffffffffL);
    }","  public void test7()  throws Throwable  {
      long[] longArray0 = new long[1];
      byte[] byteArray0 = NumberFactory.makeByteArray(longArray0);
      long long0 = NumberFactory.makeLong(byteArray0);
}"
1548,"    public static long makeLong(int v,
                                int w) {
        return (((long) v) << 32) | (w & 0xffffffffL);
    }","  public void test8()  throws Throwable  {
      byte[] byteArray0 = NumberFactory.makeByteArray((-1L));
      long long0 = NumberFactory.makeLong(byteArray0);
}"
1549,"    public static long makeLong(int v,
                                int w) {
        return (((long) v) << 32) | (w & 0xffffffffL);
    }","  public void test9()  throws Throwable  {
      long long0 = NumberFactory.makeLong(0, 0);
}"
1550,"    public static long makeLong(int v,
                                int w) {
        return (((long) v) << 32) | (w & 0xffffffffL);
    }","  public void test10()  throws Throwable  {
      long long0 = NumberFactory.makeLong((-246), 1224);
}"
1551,"    public static int[] makeIntArray(byte[] input) {
        final int size = input.length;
        final int num = size / INT_SIZE;
        checkSize(num * INT_SIZE, size);

        final int[] output = new int[num];
        for (int i = 0; i < num; i++) {
            output[i] = getInt(input, i * INT_SIZE);
        }

        return output;
    }","  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = NumberFactory.makeIntArray(byteArray0);
}"
1552,"    public static int makeInt(long v) {
        return extractHi(v) ^ extractLo(v);
    }","  public void test12()  throws Throwable  {
      byte[] byteArray0 = NumberFactory.makeByteArray(693);
      int int0 = NumberFactory.makeInt(byteArray0);
}"
1553,"    public static int makeInt(long v) {
        return extractHi(v) ^ extractLo(v);
    }","  public void test13()  throws Throwable  {
      byte[] byteArray0 = NumberFactory.makeByteArray((-2131));
      int int0 = NumberFactory.makeInt(byteArray0);
}"
1554,"    public static int makeInt(long v) {
        return extractHi(v) ^ extractLo(v);
    }","  public void test14()  throws Throwable  {
      int int0 = NumberFactory.makeInt(0L);
}"
1555,"    public static int makeInt(long v) {
        return extractHi(v) ^ extractLo(v);
    }","  public void test15()  throws Throwable  {
      int int0 = NumberFactory.makeInt((-1056561953592L));
}"
1556,"    public static float makeFloat(int v) {
        // Require the least significant 24-bits so shift the higher bits across
        return (v >>> 8) * FLOAT_MULTIPLIER;
    }","  public void test16()  throws Throwable  {
      float float0 = NumberFactory.makeFloat(0);
}"
1557,"    public static double makeDouble(long v) {
        // Require the least significant 53-bits so shift the higher bits across
        return (v >>> 11) * DOUBLE_MULTIPLIER;
    }","  public void test17()  throws Throwable  {
      double double0 = NumberFactory.makeDouble((long) 259);
}"
1558,"    public static double makeDouble(long v) {
        // Require the least significant 53-bits so shift the higher bits across
        return (v >>> 11) * DOUBLE_MULTIPLIER;
    }","  public void test18()  throws Throwable  {
      double double0 = NumberFactory.makeDouble(0, 0);
}"
1559,"    public static long[] makeLongArray(byte[] input) {
        final int size = input.length;
        final int num = size / LONG_SIZE;
        checkSize(num * LONG_SIZE, size);

        final long[] output = new long[num];
        for (int i = 0; i < num; i++) {
            output[i] = getLong(input, i * LONG_SIZE);
        }

        return output;
    }","  public void test19()  throws Throwable  {
      int[] intArray0 = new int[0];
      byte[] byteArray0 = NumberFactory.makeByteArray(intArray0);
      long[] longArray0 = NumberFactory.makeLongArray(byteArray0);
}"
1560,"    public static int extractLo(long v) {
        return (int) v;
    }","  public void test20()  throws Throwable  {
      int int0 = NumberFactory.extractLo(59L);
}"
1561,"    public static int extractLo(long v) {
        return (int) v;
    }","  public void test21()  throws Throwable  {
      int int0 = NumberFactory.extractLo((-3046L));
}"
1562,"    public static int extractHi(long v) {
        return (int) (v >>> 32);
    }","  public void test22()  throws Throwable  {
      int int0 = NumberFactory.extractHi(17179869183L);
}"
1563,"    public static int extractHi(long v) {
        return (int) (v >>> 32);
    }","  public void test23()  throws Throwable  {
      int int0 = NumberFactory.extractHi((-737L));
}"
1564,"    public static long[] makeLongArray(byte[] input) {
        final int size = input.length;
        final int num = size / LONG_SIZE;
        checkSize(num * LONG_SIZE, size);

        final long[] output = new long[num];
        for (int i = 0; i < num; i++) {
            output[i] = getLong(input, i * LONG_SIZE);
        }

        return output;
    }","  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberFactory.makeLongArray((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.util.NumberFactory"", e);
      }
  }"
1565,"    public static long[] makeLongArray(byte[] input) {
        final int size = input.length;
        final int num = size / LONG_SIZE;
        checkSize(num * LONG_SIZE, size);

        final long[] output = new long[num];
        for (int i = 0; i < num; i++) {
            output[i] = getLong(input, i * LONG_SIZE);
        }

        return output;
    }","  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        NumberFactory.makeLongArray(byteArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Array size: Expected 0 but was 1
         //
         verifyException(""org.apache.commons.rng.core.util.NumberFactory"", e);
      }
  }"
1566,"    public static long makeLong(int v,
                                int w) {
        return (((long) v) << 32) | (w & 0xffffffffL);
    }","  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberFactory.makeLong((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.util.NumberFactory"", e);
      }
  }"
1567,"    public static int[] makeIntArray(byte[] input) {
        final int size = input.length;
        final int num = size / INT_SIZE;
        checkSize(num * INT_SIZE, size);

        final int[] output = new int[num];
        for (int i = 0; i < num; i++) {
            output[i] = getInt(input, i * INT_SIZE);
        }

        return output;
    }","  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberFactory.makeIntArray((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.util.NumberFactory"", e);
      }
  }"
1568,"    public static int[] makeIntArray(byte[] input) {
        final int size = input.length;
        final int num = size / INT_SIZE;
        checkSize(num * INT_SIZE, size);

        final int[] output = new int[num];
        for (int i = 0; i < num; i++) {
            output[i] = getInt(input, i * INT_SIZE);
        }

        return output;
    }","  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        NumberFactory.makeIntArray(byteArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Array size: Expected 8 but was 9
         //
         verifyException(""org.apache.commons.rng.core.util.NumberFactory"", e);
      }
  }"
1569,"    public static int makeInt(long v) {
        return extractHi(v) ^ extractLo(v);
    }","  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberFactory.makeInt((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.util.NumberFactory"", e);
      }
  }"
1570,"    public static byte[] makeByteArray(long v) {
        final byte[] b = new byte[LONG_SIZE];
        putLong(v, b, 0);
        return b;
    }","  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberFactory.makeByteArray((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.util.NumberFactory"", e);
      }
  }"
1571,"    public static byte[] makeByteArray(long v) {
        final byte[] b = new byte[LONG_SIZE];
        putLong(v, b, 0);
        return b;
    }","  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberFactory.makeByteArray((int[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.util.NumberFactory"", e);
      }
  }"
1572,"    public static byte[] makeByteArray(long v) {
        final byte[] b = new byte[LONG_SIZE];
        putLong(v, b, 0);
        return b;
    }","  public void test32()  throws Throwable  {
      byte[] byteArray0 = NumberFactory.makeByteArray(2012L);
      long[] longArray0 = NumberFactory.makeLongArray(byteArray0);
      NumberFactory.makeByteArray(longArray0);
}"
1573,"    public static byte[] makeByteArray(long v) {
        final byte[] b = new byte[LONG_SIZE];
        putLong(v, b, 0);
        return b;
    }","  public void test33()  throws Throwable  {
      byte[] byteArray0 = NumberFactory.makeByteArray(2012L);
      long[] longArray0 = NumberFactory.makeLongArray(byteArray0);
      NumberFactory.makeByteArray(longArray0);
}"
1574,"    public static boolean makeBoolean(int v) {
        return v < 0;
    }","  public void test34()  throws Throwable  {
      boolean boolean0 = NumberFactory.makeBoolean((-3446L));
}"
1575,"    public static boolean makeBoolean(int v) {
        return v < 0;
    }","  public void test35()  throws Throwable  {
      boolean boolean0 = NumberFactory.makeBoolean(2012L);
}"
1576,"    public static boolean makeBoolean(int v) {
        return v < 0;
    }","  public void test36()  throws Throwable  {
      boolean boolean0 = NumberFactory.makeBoolean((-2144765264));
}"
1577,"    public static boolean makeBoolean(int v) {
        return v < 0;
    }","  public void test37()  throws Throwable  {
      boolean boolean0 = NumberFactory.makeBoolean(259);
}"
1578,"    public static int[] makeIntArray(byte[] input) {
        final int size = input.length;
        final int num = size / INT_SIZE;
        checkSize(num * INT_SIZE, size);

        final int[] output = new int[num];
        for (int i = 0; i < num; i++) {
            output[i] = getInt(input, i * INT_SIZE);
        }

        return output;
    }","  public void test38()  throws Throwable  {
      byte[] byteArray0 = NumberFactory.makeByteArray(2012L);
      int[] intArray0 = NumberFactory.makeIntArray(byteArray0);
}"
1579,"    public static int makeInt(long v) {
        return extractHi(v) ^ extractLo(v);
    }","  public void test39()  throws Throwable  {
      int int0 = NumberFactory.makeInt(676L);
}"
1580,"    public static int extractHi(long v) {
        return (int) (v >>> 32);
    }","  public void test40()  throws Throwable  {
      int int0 = NumberFactory.extractHi(0L);
}"
1581,"    public static int extractLo(long v) {
        return (int) v;
    }","  public void test41()  throws Throwable  {
      int int0 = NumberFactory.extractLo(0L);
}"
1582,"    public static int makeInt(long v) {
        return extractHi(v) ^ extractLo(v);
    }","  public void test42()  throws Throwable  {
      byte[] byteArray0 = NumberFactory.makeByteArray(0);
      int int0 = NumberFactory.makeInt(byteArray0);
}"
1583,"    public static int makeInt(long v) {
        return extractHi(v) ^ extractLo(v);
    }","  public void test43()  throws Throwable  {
      byte[] byteArray0 = NumberFactory.makeByteArray(0);
      int int0 = NumberFactory.makeInt(byteArray0);
}"
1584,"    public static int makeInt(long v) {
        return extractHi(v) ^ extractLo(v);
    }","  public void test44()  throws Throwable  {
      long[] longArray0 = new long[0];
      byte[] byteArray0 = NumberFactory.makeByteArray(longArray0);
      // Undeclared exception!
      try { 
        NumberFactory.makeInt(byteArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Array size: Expected 4 but was 0
         //
         verifyException(""org.apache.commons.rng.core.util.NumberFactory"", e);
      }
  }"
1585,"    public static byte[] makeByteArray(long v) {
        final byte[] b = new byte[LONG_SIZE];
        putLong(v, b, 0);
        return b;
    }","  public void test45()  throws Throwable  {
      int[] intArray0 = new int[6];
      byte[] byteArray0 = NumberFactory.makeByteArray(intArray0);
}"
1586,"    public static byte[] makeByteArray(long v) {
        final byte[] b = new byte[LONG_SIZE];
        putLong(v, b, 0);
        return b;
    }","  public void test46()  throws Throwable  {
      int[] intArray0 = new int[6];
      byte[] byteArray0 = NumberFactory.makeByteArray(intArray0);
      long[] longArray0 = NumberFactory.makeLongArray(byteArray0);
      NumberFactory.makeByteArray(longArray0);
}"
1587,"    public static long makeLong(int v,
                                int w) {
        return (((long) v) << 32) | (w & 0xffffffffL);
    }","  public void test47()  throws Throwable  {
      byte[] byteArray0 = NumberFactory.makeByteArray(676L);
      long long0 = NumberFactory.makeLong(byteArray0);
}"
1588,"    public static long makeLong(int v,
                                int w) {
        return (((long) v) << 32) | (w & 0xffffffffL);
    }","  public void test48()  throws Throwable  {
      long long0 = NumberFactory.makeLong(676, 676);
}"
1589,"    public static long makeLong(int v,
                                int w) {
        return (((long) v) << 32) | (w & 0xffffffffL);
    }","  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        NumberFactory.makeLong(byteArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Array size: Expected 8 but was 3
         //
         verifyException(""org.apache.commons.rng.core.util.NumberFactory"", e);
      }
  }"
1590,"    protected int transform(long x) {
        final int count = (int)(x >>> 61);
        return (int)((x ^ (x >>> 22)) >>> (22 + count));
    }","  public void test0()  throws Throwable  {
      Long long0 = new Long(2317L);
      PcgMcgXshRs32 pcgMcgXshRs32_0 = new PcgMcgXshRs32(long0);
      int int0 = pcgMcgXshRs32_0.transform(2317L);
}"
1591,"    protected int transform(long x) {
        final int count = (int)(x >>> 61);
        return (int)((x ^ (x >>> 22)) >>> (22 + count));
    }","  public void test1()  throws Throwable  {
      Long long0 = new Long(2317L);
      PcgMcgXshRs32 pcgMcgXshRs32_0 = new PcgMcgXshRs32(long0);
      int int0 = pcgMcgXshRs32_0.transform(6364136223846793005L);
}"
1592,"    public PcgMcgXshRs32(Long seed) {
        super(seed);
    }","  public void test2()  throws Throwable  {
      PcgMcgXshRs32 pcgMcgXshRs32_0 = null;
      try {
        pcgMcgXshRs32_0 = new PcgMcgXshRs32((Long) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractPcgMcg6432"", e);
      }
  }"
1593,"    protected int transform(long x) {
        final int count = (int)(x >>> 61);
        return (int)((x ^ (x >>> 22)) >>> (22 + count));
    }","  public void test3()  throws Throwable  {
      Long long0 = new Long((-2710L));
      PcgMcgXshRs32 pcgMcgXshRs32_0 = new PcgMcgXshRs32(long0);
      int int0 = pcgMcgXshRs32_0.transform((-2710L));
}"
1594,"    public int next() {
        int z4 = super.next();

        // Matsumoto-Kurita tempering to get a maximally equidistributed generator.
        z4 ^= (z4 << 7) & 0xe46e1700;
        z4 ^= (z4 << 15) & 0x9b868000;

        return z4;
    }","  public void test0()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well19937c well19937c0 = new Well19937c(intArray0);
      int int0 = well19937c0.next();
}"
1595,"    public int next() {
        int z4 = super.next();

        // Matsumoto-Kurita tempering to get a maximally equidistributed generator.
        z4 ^= (z4 << 7) & 0xe46e1700;
        z4 ^= (z4 << 15) & 0x9b868000;

        return z4;
    }","  public void test1()  throws Throwable  {
      int[] intArray0 = new int[8];
      Well19937c well19937c0 = new Well19937c(intArray0);
      well19937c0.index = (-2930);
      // Undeclared exception!
      try { 
        well19937c0.next();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2930
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractWell$IndexTable"", e);
      }
  }"
1596,"    public Well19937c(int[] seed) {
        super(seed);
    }","  public void test2()  throws Throwable  {
      Well19937c well19937c0 = null;
      try {
        well19937c0 = new Well19937c((int[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractWell"", e);
      }
  }"
1597,"    public int next() {
        int z4 = super.next();

        // Matsumoto-Kurita tempering to get a maximally equidistributed generator.
        z4 ^= (z4 << 7) & 0xe46e1700;
        z4 ^= (z4 << 15) & 0x9b868000;

        return z4;
    }","  public void test3()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well19937c well19937c0 = new Well19937c(intArray0);
      int int0 = well19937c0.next();
}"
1598,"    protected int nextOutput() {
        return state0 * 0x9e3779bb;
    }","  public void test0()  throws Throwable  {
      XoRoShiRo64Star xoRoShiRo64Star0 = new XoRoShiRo64Star(0, 0);
      int int0 = xoRoShiRo64Star0.nextOutput();
}"
1599,"    protected int nextOutput() {
        return state0 * 0x9e3779bb;
    }","  public void test1()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2500;
      XoRoShiRo64Star xoRoShiRo64Star0 = new XoRoShiRo64Star(intArray0);
      int int0 = xoRoShiRo64Star0.nextOutput();
}"
1600,"    public XoRoShiRo64Star(int[] seed) {
        super(seed);
    }","  public void test2()  throws Throwable  {
      XoRoShiRo64Star xoRoShiRo64Star0 = null;
      try {
        xoRoShiRo64Star0 = new XoRoShiRo64Star((int[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractXoRoShiRo64"", e);
      }
  }"
1601,"    protected int nextOutput() {
        return state0 * 0x9e3779bb;
    }","  public void test3()  throws Throwable  {
      int[] intArray0 = new int[0];
      XoRoShiRo64Star xoRoShiRo64Star0 = new XoRoShiRo64Star(intArray0);
      xoRoShiRo64Star0.nextDouble();
      int int0 = xoRoShiRo64Star0.nextOutput();
}"
1602,"    protected byte[] getStateInternal() {
        // The increment is divided by 2 before saving.
        // This transform is used in the reference PCG code; it prevents restoring from
        // a byte state a non-odd increment that results in a sub-maximal period generator.
        return composeStateInternal(NumberFactory.makeByteArray(
                new long[] {state, increment >>> 1}),
                super.getStateInternal());
    }","  public void test0()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = (-1184L);
      PcgXshRs32 pcgXshRs32_0 = new PcgXshRs32(longArray0);
      byte[] byteArray0 = pcgXshRs32_0.getStateInternal();
}"
1603,"    public int next() {
        final long x = state;
        state = bump(state);
        return transform(x);
    }","  public void test1()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-1L);
      PcgXshRr32 pcgXshRr32_0 = new PcgXshRr32(longArray0);
      int int0 = pcgXshRr32_0.next();
}"
1604,"    public int next() {
        final long x = state;
        state = bump(state);
        return transform(x);
    }","  public void test2()  throws Throwable  {
      Long long0 = new Long(0L);
      PcgXshRr32 pcgXshRr32_0 = new PcgXshRr32(long0);
      int int0 = pcgXshRr32_0.next();
}"
1605,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, SEED_SIZE * 8);
        final long[] tempseed = NumberFactory.makeLongArray(c[0]);
        state = tempseed[0];
        // Reverse the transform performed during getState to make the increment odd again.
        increment = tempseed[1] << 1 | 1;
        super.setStateInternal(c[1]);
    }","  public void test3()  throws Throwable  {
      Long long0 = new Long((-813L));
      PcgXshRr32 pcgXshRr32_0 = new PcgXshRr32(long0);
      // Undeclared exception!
      try { 
        pcgXshRr32_0.setStateInternal((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1606,"    public int next() {
        final long x = state;
        state = bump(state);
        return transform(x);
    }","  public void test4()  throws Throwable  {
      long[] longArray0 = new long[9];
      PcgXshRs32 pcgXshRs32_0 = new PcgXshRs32(longArray0);
      int int0 = pcgXshRs32_0.next();
}"
1607,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, SEED_SIZE * 8);
        final long[] tempseed = NumberFactory.makeLongArray(c[0]);
        state = tempseed[0];
        // Reverse the transform performed during getState to make the increment odd again.
        increment = tempseed[1] << 1 | 1;
        super.setStateInternal(c[1]);
    }","  public void test5()  throws Throwable  {
      Long long0 = new Long(0L);
      PcgXshRr32 pcgXshRr32_0 = new PcgXshRr32(long0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        pcgXshRr32_0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 16 but was 0
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1608,,"  public void test6()  throws Throwable  {
      long[] longArray0 = new long[9];
      PcgXshRs32 pcgXshRs32_0 = new PcgXshRs32(longArray0);
      RandomProviderState randomProviderState0 = pcgXshRs32_0.saveState();
      pcgXshRs32_0.restoreState(randomProviderState0);
  }"
1609,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, SEED_SIZE * 8);
        final long[] tempseed = NumberFactory.makeLongArray(c[0]);
        state = tempseed[0];
        // Reverse the transform performed during getState to make the increment odd again.
        increment = tempseed[1] << 1 | 1;
        super.setStateInternal(c[1]);
    }","  public void test7()  throws Throwable  {
      long[] longArray0 = new long[1];
      PcgXshRr32 pcgXshRr32_0 = new PcgXshRr32(longArray0);
      byte[] byteArray0 = pcgXshRr32_0.getStateInternal();
      pcgXshRr32_0.setStateInternal(byteArray0);
}"
1610,"    public int next() {
        int z4 = super.next();

        // Matsumoto-Kurita tempering to get a maximally equidistributed generator.
        z4 ^= (z4 << 7) & 0x93dd1400;
        z4 ^= (z4 << 15) & 0xfa118000;

        return z4;
    }","  public void test0()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[5] = 1110;
      Well44497b well44497b0 = new Well44497b(intArray0);
      int int0 = well44497b0.next();
}"
1611,"    public int next() {
        int z4 = super.next();

        // Matsumoto-Kurita tempering to get a maximally equidistributed generator.
        z4 ^= (z4 << 7) & 0x93dd1400;
        z4 ^= (z4 << 15) & 0xfa118000;

        return z4;
    }","  public void test1()  throws Throwable  {
      int[] intArray0 = new int[7];
      Well44497b well44497b0 = new Well44497b(intArray0);
      well44497b0.index = (-1617797059);
      // Undeclared exception!
      try { 
        well44497b0.next();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1617797059
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractWell$IndexTable"", e);
      }
  }"
1612,"    public Well44497b(int[] seed) {
        super(seed);
    }","  public void test2()  throws Throwable  {
      Well44497b well44497b0 = null;
      try {
        well44497b0 = new Well44497b((int[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1613,"    public int next() {
        int z4 = super.next();

        // Matsumoto-Kurita tempering to get a maximally equidistributed generator.
        z4 ^= (z4 << 7) & 0x93dd1400;
        z4 ^= (z4 << 15) & 0xfa118000;

        return z4;
    }","  public void test3()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well44497b well44497b0 = new Well44497b(intArray0);
      int int0 = well44497b0.next();
}"
1614,"    public int next() {
        final int indexRm1 = TABLE.getIndexPred(index);

        final int v0 = v[index];
        final int vM1 = v[TABLE.getIndexM1(index)];
        final int vM2 = v[TABLE.getIndexM2(index)];
        final int vM3 = v[TABLE.getIndexM3(index)];

        final int z0 = v[indexRm1];
        final int z1 = v0 ^ (vM1 ^ (vM1 >>> 8));
        final int z2 = (vM2 ^ (vM2 << 19)) ^ (vM3 ^ (vM3 << 14));
        final int z3 = z1 ^ z2;
        final int z4 = (z0 ^ (z0 << 11)) ^ (z1 ^ (z1 << 7)) ^ (z2 ^ (z2 << 13));

        v[index] = z3;
        v[indexRm1] = z4;
        index = indexRm1;

        return z4;
    }","  public void test0()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 24;
      Well1024a well1024a0 = new Well1024a(intArray0);
      int int0 = well1024a0.next();
}"
1615,"    public int next() {
        final int indexRm1 = TABLE.getIndexPred(index);

        final int v0 = v[index];
        final int vM1 = v[TABLE.getIndexM1(index)];
        final int vM2 = v[TABLE.getIndexM2(index)];
        final int vM3 = v[TABLE.getIndexM3(index)];

        final int z0 = v[indexRm1];
        final int z1 = v0 ^ (vM1 ^ (vM1 >>> 8));
        final int z2 = (vM2 ^ (vM2 << 19)) ^ (vM3 ^ (vM3 << 14));
        final int z3 = z1 ^ z2;
        final int z4 = (z0 ^ (z0 << 11)) ^ (z1 ^ (z1 << 7)) ^ (z2 ^ (z2 << 13));

        v[index] = z3;
        v[indexRm1] = z4;
        index = indexRm1;

        return z4;
    }","  public void test1()  throws Throwable  {
      int[] intArray0 = new int[44];
      Well1024a well1024a0 = new Well1024a(intArray0);
      int int0 = well1024a0.next();
}"
1616,"    public int next() {
        final int indexRm1 = TABLE.getIndexPred(index);

        final int v0 = v[index];
        final int vM1 = v[TABLE.getIndexM1(index)];
        final int vM2 = v[TABLE.getIndexM2(index)];
        final int vM3 = v[TABLE.getIndexM3(index)];

        final int z0 = v[indexRm1];
        final int z1 = v0 ^ (vM1 ^ (vM1 >>> 8));
        final int z2 = (vM2 ^ (vM2 << 19)) ^ (vM3 ^ (vM3 << 14));
        final int z3 = z1 ^ z2;
        final int z4 = (z0 ^ (z0 << 11)) ^ (z1 ^ (z1 << 7)) ^ (z2 ^ (z2 << 13));

        v[index] = z3;
        v[indexRm1] = z4;
        index = indexRm1;

        return z4;
    }","  public void test2()  throws Throwable  {
      int[] intArray0 = new int[4];
      Well1024a well1024a0 = new Well1024a(intArray0);
      well1024a0.index = 733;
      // Undeclared exception!
      try { 
        well1024a0.next();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 733
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractWell$IndexTable"", e);
      }
  }"
1617,"    public int next() {
        final int indexRm1 = TABLE.getIndexPred(index);

        final int v0 = v[index];
        final int vM1 = v[TABLE.getIndexM1(index)];
        final int vM2 = v[TABLE.getIndexM2(index)];
        final int vM3 = v[TABLE.getIndexM3(index)];

        final int z0 = v[indexRm1];
        final int z1 = v0 ^ (vM1 ^ (vM1 >>> 8));
        final int z2 = (vM2 ^ (vM2 << 19)) ^ (vM3 ^ (vM3 << 14));
        final int z3 = z1 ^ z2;
        final int z4 = (z0 ^ (z0 << 11)) ^ (z1 ^ (z1 << 7)) ^ (z2 ^ (z2 << 13));

        v[index] = z3;
        v[indexRm1] = z4;
        index = indexRm1;

        return z4;
    }","  public void test3()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well1024a well1024a0 = new Well1024a(intArray0);
      int int0 = well1024a0.next();
}"
1618,"    public Well1024a(int[] seed) {
        super(K, seed);
    }","  public void test4()  throws Throwable  {
      Well1024a well1024a0 = null;
      try {
        well1024a0 = new Well1024a((int[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractWell"", e);
      }
  }"
1619,"    public int next() {
        final int result = nextOutput();

        final int s0 = state0;
        int s1 = state1;

        s1 ^= s0;
        state0 = Integer.rotateLeft(s0, 26) ^ s1 ^ (s1 << 9); // a, b
        state1 = Integer.rotateLeft(s1, 13); // c

        return result;
    }","  public void test0()  throws Throwable  {
      int[] intArray0 = new int[0];
      XoRoShiRo64Star xoRoShiRo64Star0 = new XoRoShiRo64Star(intArray0);
      int int0 = xoRoShiRo64Star0.next();
}"
1620,"    public int next() {
        final int result = nextOutput();

        final int s0 = state0;
        int s1 = state1;

        s1 ^= s0;
        state0 = Integer.rotateLeft(s0, 26) ^ s1 ^ (s1 << 9); // a, b
        state1 = Integer.rotateLeft(s1, 13); // c

        return result;
    }","  public void test1()  throws Throwable  {
      XoRoShiRo64Star xoRoShiRo64Star0 = new XoRoShiRo64Star(332, 0);
      int int0 = xoRoShiRo64Star0.next();
}"
1621,"    public int next() {
        final int result = nextOutput();

        final int s0 = state0;
        int s1 = state1;

        s1 ^= s0;
        state0 = Integer.rotateLeft(s0, 26) ^ s1 ^ (s1 << 9); // a, b
        state1 = Integer.rotateLeft(s1, 13); // c

        return result;
    }","  public void test2()  throws Throwable  {
      XoRoShiRo64Star xoRoShiRo64Star0 = new XoRoShiRo64Star(11, (-181));
      int int0 = xoRoShiRo64Star0.next();
}"
1622,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, SEED_SIZE * 4);

        setState(NumberFactory.makeIntArray(c[0]));

        super.setStateInternal(c[1]);
    }","  public void test3()  throws Throwable  {
      XoRoShiRo64Star xoRoShiRo64Star0 = new XoRoShiRo64Star(1, 1);
      // Undeclared exception!
      try { 
        xoRoShiRo64Star0.setStateInternal((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1623,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, SEED_SIZE * 4);

        setState(NumberFactory.makeIntArray(c[0]));

        super.setStateInternal(c[1]);
    }","  public void test4()  throws Throwable  {
      XoRoShiRo64Star xoRoShiRo64Star0 = new XoRoShiRo64Star((-3238), 9);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        xoRoShiRo64Star0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 8 but was 0
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1624,"    protected byte[] getStateInternal() {
        return composeStateInternal(NumberFactory.makeByteArray(new int[] {state0, state1}),
                                    super.getStateInternal());
    }","  public void test5()  throws Throwable  {
      int[] intArray0 = new int[1];
      XoRoShiRo64StarStar xoRoShiRo64StarStar0 = new XoRoShiRo64StarStar(intArray0);
      byte[] byteArray0 = xoRoShiRo64StarStar0.getStateInternal();
}"
1625,,"  public void test6()  throws Throwable  {
      int[] intArray0 = new int[13];
      XoRoShiRo64StarStar xoRoShiRo64StarStar0 = new XoRoShiRo64StarStar(intArray0);
      double double0 = xoRoShiRo64StarStar0.nextDouble();
}"
1626,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, SEED_SIZE * 4);

        setState(NumberFactory.makeIntArray(c[0]));

        super.setStateInternal(c[1]);
    }","  public void test7()  throws Throwable  {
      int[] intArray0 = new int[13];
      XoRoShiRo64StarStar xoRoShiRo64StarStar0 = new XoRoShiRo64StarStar(intArray0);
      byte[] byteArray0 = xoRoShiRo64StarStar0.getStateInternal();
      xoRoShiRo64StarStar0.setStateInternal(byteArray0);
}"
1627,"    public MultiplyWithCarry256(int[] seed) {
        setSeedInternal(seed);
    }","  public void test0()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = Integer.MIN_VALUE;
      MultiplyWithCarry256 multiplyWithCarry256_0 = new MultiplyWithCarry256(intArray0);
      int int0 = multiplyWithCarry256_0.nextInt();
}"
1628,"    public int next() {
        // Produce an index in the range 0-255
        index &= 0xff;
        final long t = A * (state[index] & 0xffffffffL) + carry;
        carry = (int) (t >> 32);
        return state[index++] = (int) t;
    }","  public void test1()  throws Throwable  {
      int[] intArray0 = new int[1];
      MultiplyWithCarry256 multiplyWithCarry256_0 = new MultiplyWithCarry256(intArray0);
      int int0 = multiplyWithCarry256_0.next();
}"
1629,"    public int next() {
        // Produce an index in the range 0-255
        index &= 0xff;
        final long t = A * (state[index] & 0xffffffffL) + carry;
        carry = (int) (t >> 32);
        return state[index++] = (int) t;
    }","  public void test2()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 32767;
      MultiplyWithCarry256 multiplyWithCarry256_0 = new MultiplyWithCarry256(intArray0);
      int int0 = multiplyWithCarry256_0.next();
}"
1630,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, (SEED_SIZE + 1) * 4);

        final int[] tmp = NumberFactory.makeIntArray(c[0]);

        System.arraycopy(tmp, 0, state, 0, Q_SIZE);
        carry = tmp[SEED_SIZE - 1];
        index = tmp[SEED_SIZE];

        super.setStateInternal(c[1]);
    }","  public void test3()  throws Throwable  {
      int[] intArray0 = new int[7];
      MultiplyWithCarry256 multiplyWithCarry256_0 = new MultiplyWithCarry256(intArray0);
      // Undeclared exception!
      try { 
        multiplyWithCarry256_0.setStateInternal((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1631,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, (SEED_SIZE + 1) * 4);

        final int[] tmp = NumberFactory.makeIntArray(c[0]);

        System.arraycopy(tmp, 0, state, 0, Q_SIZE);
        carry = tmp[SEED_SIZE - 1];
        index = tmp[SEED_SIZE];

        super.setStateInternal(c[1]);
    }","  public void test4()  throws Throwable  {
      int[] intArray0 = new int[4];
      MultiplyWithCarry256 multiplyWithCarry256_0 = new MultiplyWithCarry256(intArray0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        multiplyWithCarry256_0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 1032 but was 0
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1632,"    public MultiplyWithCarry256(int[] seed) {
        setSeedInternal(seed);
    }","  public void test5()  throws Throwable  {
      MultiplyWithCarry256 multiplyWithCarry256_0 = null;
      try {
        multiplyWithCarry256_0 = new MultiplyWithCarry256((int[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1633,"    public int next() {
        // Produce an index in the range 0-255
        index &= 0xff;
        final long t = A * (state[index] & 0xffffffffL) + carry;
        carry = (int) (t >> 32);
        return state[index++] = (int) t;
    }","  public void test6()  throws Throwable  {
      int[] intArray0 = new int[5];
      MultiplyWithCarry256 multiplyWithCarry256_0 = new MultiplyWithCarry256(intArray0);
      int int0 = multiplyWithCarry256_0.next();
}"
1634,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, (SEED_SIZE + 1) * 4);

        final int[] tmp = NumberFactory.makeIntArray(c[0]);

        System.arraycopy(tmp, 0, state, 0, Q_SIZE);
        carry = tmp[SEED_SIZE - 1];
        index = tmp[SEED_SIZE];

        super.setStateInternal(c[1]);
    }","  public void test7()  throws Throwable  {
      int[] intArray0 = new int[5];
      MultiplyWithCarry256 multiplyWithCarry256_0 = new MultiplyWithCarry256(intArray0);
      byte[] byteArray0 = multiplyWithCarry256_0.getStateInternal();
      multiplyWithCarry256_0.setStateInternal(byteArray0);
}"
1635,"    protected void setStateInternal(byte[] state) {
        final byte[][] c = splitStateInternal(state, SEED_SIZE * 8);
        setSeedInternal(NumberFactory.makeLongArray(c[0]));
        super.setStateInternal(c[1]);
    }","  public void test0()  throws Throwable  {
      long[] longArray0 = new long[1];
      MiddleSquareWeylSequence middleSquareWeylSequence0 = new MiddleSquareWeylSequence(longArray0);
      byte[] byteArray0 = middleSquareWeylSequence0.getStateInternal();
      middleSquareWeylSequence0.setStateInternal(byteArray0);
}"
1636,"    public long nextLong() {
        // Avoid round trip from long to int to long by performing two iterations inline
        x *= x;
        x += w += s;
        final long i1 = x & 0xffffffff00000000L;
        x = (x >>> 32) | (x << 32);
        x *= x;
        x += w += s;
        final long i2 = x >>> 32;
        x = i2 | x << 32;
        return i1 | i2;
    }","  public void test1()  throws Throwable  {
      long[] longArray0 = new long[3];
      MiddleSquareWeylSequence middleSquareWeylSequence0 = new MiddleSquareWeylSequence(longArray0);
      long long0 = middleSquareWeylSequence0.nextLong();
}"
1637,"    public int next() {
        x *= x;
        x += w += s;
        x = (x >>> 32) | (x << 32);
        return (int) x;
    }","  public void test2()  throws Throwable  {
      long[] longArray0 = new long[3];
      MiddleSquareWeylSequence middleSquareWeylSequence0 = new MiddleSquareWeylSequence(longArray0);
      int int0 = middleSquareWeylSequence0.next();
}"
1638,"    public int next() {
        x *= x;
        x += w += s;
        x = (x >>> 32) | (x << 32);
        return (int) x;
    }","  public void test3()  throws Throwable  {
      long[] longArray0 = new long[0];
      MiddleSquareWeylSequence middleSquareWeylSequence0 = new MiddleSquareWeylSequence(longArray0);
      int int0 = middleSquareWeylSequence0.next();
}"
1639,"    protected void setStateInternal(byte[] state) {
        final byte[][] c = splitStateInternal(state, SEED_SIZE * 8);
        setSeedInternal(NumberFactory.makeLongArray(c[0]));
        super.setStateInternal(c[1]);
    }","  public void test4()  throws Throwable  {
      long[] longArray0 = new long[8];
      MiddleSquareWeylSequence middleSquareWeylSequence0 = new MiddleSquareWeylSequence(longArray0);
      // Undeclared exception!
      try { 
        middleSquareWeylSequence0.setStateInternal((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1640,"    public MiddleSquareWeylSequence(long[] seed) {
        if (seed.length < SEED_SIZE) {
            // Complete the seed with a default to avoid
            // low complexity Weyl increments.
            final long[] tmp = Arrays.copyOf(seed, SEED_SIZE);
            System.arraycopy(DEFAULT_SEED, seed.length, tmp, seed.length, SEED_SIZE - seed.length);
            setSeedInternal(tmp);
        } else {
            setSeedInternal(seed);
        }
    }","  public void test5()  throws Throwable  {
      MiddleSquareWeylSequence middleSquareWeylSequence0 = null;
      try {
        middleSquareWeylSequence0 = new MiddleSquareWeylSequence((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.MiddleSquareWeylSequence"", e);
      }
  }"
1641,"    protected void setStateInternal(byte[] state) {
        final byte[][] c = splitStateInternal(state, SEED_SIZE * 8);
        setSeedInternal(NumberFactory.makeLongArray(c[0]));
        super.setStateInternal(c[1]);
    }","  public void test6()  throws Throwable  {
      long[] longArray0 = new long[7];
      MiddleSquareWeylSequence middleSquareWeylSequence0 = new MiddleSquareWeylSequence(longArray0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        middleSquareWeylSequence0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 24 but was 1
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1642,"    public long nextLong() {
        // Avoid round trip from long to int to long by performing two iterations inline
        x *= x;
        x += w += s;
        final long i1 = x & 0xffffffff00000000L;
        x = (x >>> 32) | (x << 32);
        x *= x;
        x += w += s;
        final long i2 = x >>> 32;
        x = i2 | x << 32;
        return i1 | i2;
    }","  public void test7()  throws Throwable  {
      long[] longArray0 = new long[1];
      MiddleSquareWeylSequence middleSquareWeylSequence0 = new MiddleSquareWeylSequence(longArray0);
      long long0 = middleSquareWeylSequence0.nextLong();
}"
1643,"    public int next() {
        x *= x;
        x += w += s;
        x = (x >>> 32) | (x << 32);
        return (int) x;
    }","  public void test8()  throws Throwable  {
      long[] longArray0 = new long[1];
      MiddleSquareWeylSequence middleSquareWeylSequence0 = new MiddleSquareWeylSequence(longArray0);
      int int0 = middleSquareWeylSequence0.next();
}"
1644,"    public long nextLong() {
        // Avoid round trip from long to int to long by performing two iterations inline
        x *= x;
        x += w += s;
        final long i1 = x & 0xffffffff00000000L;
        x = (x >>> 32) | (x << 32);
        x *= x;
        x += w += s;
        final long i2 = x >>> 32;
        x = i2 | x << 32;
        return i1 | i2;
    }","  public void test9()  throws Throwable  {
      long[] longArray0 = new long[1];
      MiddleSquareWeylSequence middleSquareWeylSequence0 = new MiddleSquareWeylSequence(longArray0);
      int int0 = middleSquareWeylSequence0.next();
      long long0 = middleSquareWeylSequence0.nextLong();
}"
1645,"    public ISAACRandom(int[] seed) {
        setSeedInternal(seed);
    }","  public void test0()  throws Throwable  {
      int[] intArray0 = new int[256];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
  }"
1646,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, (2 * SIZE + 4) * 4);

        final int[] tmp = NumberFactory.makeIntArray(c[0]);
        System.arraycopy(tmp, 0, rsl, 0, SIZE);
        System.arraycopy(tmp, SIZE, mem, 0, SIZE);
        final int offset = 2 * SIZE;
        count = tmp[offset];
        isaacA = tmp[offset + 1];
        isaacB = tmp[offset + 2];
        isaacC = tmp[offset + 3];

        super.setStateInternal(c[1]);
    }","  public void test1()  throws Throwable  {
      int[] intArray0 = new int[2];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      // Undeclared exception!
      try { 
        iSAACRandom0.setStateInternal((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1647,"    public int next() {
        if (count < 0) {
            isaac();
            count = SIZE - 1;
        }
        return rsl[count--];
    }","  public void test2()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 273;
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      byte[] byteArray0 = iSAACRandom0.getStateInternal();
      iSAACRandom0.nextBytes(byteArray0);
      iSAACRandom0.setStateInternal(byteArray0);
      // Undeclared exception!
      try { 
        iSAACRandom0.next();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1648,"    public ISAACRandom(int[] seed) {
        setSeedInternal(seed);
    }","  public void test3()  throws Throwable  {
      ISAACRandom iSAACRandom0 = null;
      try {
        iSAACRandom0 = new ISAACRandom((int[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.ISAACRandom"", e);
      }
  }"
1649,"    protected byte[] getStateInternal() {
        final int[] sRsl = Arrays.copyOf(rsl, SIZE);
        final int[] sMem = Arrays.copyOf(mem, SIZE);
        final int[] sRem = Arrays.copyOf(new int[] {count, isaacA, isaacB, isaacC}, 4);

        final int[] s = new int[2 * SIZE + sRem.length];
        System.arraycopy(sRsl, 0, s, 0, SIZE);
        System.arraycopy(sMem, 0, s, SIZE, SIZE);
        System.arraycopy(sRem, 0, s, 2 * SIZE, sRem.length);

        return composeStateInternal(NumberFactory.makeByteArray(s),
                                    super.getStateInternal());
    }","  public void test4()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 273;
      intArray0[2] = (-4641);
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      byte[] byteArray0 = iSAACRandom0.getStateInternal();
      iSAACRandom0.nextBytes(byteArray0);
}"
1650,"    public int next() {
        if (count < 0) {
            isaac();
            count = SIZE - 1;
        }
        return rsl[count--];
    }","  public void test5()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 273;
      intArray0[2] = (-4641);
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      byte[] byteArray0 = iSAACRandom0.getStateInternal();
      iSAACRandom0.nextBytes(byteArray0);
      iSAACRandom0.setStateInternal(byteArray0);
      int int0 = iSAACRandom0.next();
}"
1651,"    public int next() {
        if (count < 0) {
            isaac();
            count = SIZE - 1;
        }
        return rsl[count--];
    }","  public void test6()  throws Throwable  {
      int[] intArray0 = new int[4];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      int int0 = iSAACRandom0.next();
}"
1652,"    public ISAACRandom(int[] seed) {
        setSeedInternal(seed);
    }","  public void test7()  throws Throwable  {
      int[] intArray0 = new int[317];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
  }"
1653,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, (2 * SIZE + 4) * 4);

        final int[] tmp = NumberFactory.makeIntArray(c[0]);
        System.arraycopy(tmp, 0, rsl, 0, SIZE);
        System.arraycopy(tmp, SIZE, mem, 0, SIZE);
        final int offset = 2 * SIZE;
        count = tmp[offset];
        isaacA = tmp[offset + 1];
        isaacB = tmp[offset + 2];
        isaacC = tmp[offset + 3];

        super.setStateInternal(c[1]);
    }","  public void test8()  throws Throwable  {
      int[] intArray0 = new int[1];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        iSAACRandom0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 2064 but was 1
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1654,"    public KISSRandom(int[] seed) {
        setSeedInternal(seed);
    }","  public void test0()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-4839);
      KISSRandom kISSRandom0 = new KISSRandom(intArray0);
      double double0 = kISSRandom0.nextDouble();
}"
1655,"    public int next() {
        z = computeNew(36969, z);
        w = computeNew(18000, w);
        final int mwc = (z << 16) + w;

        // Cf. correction mentioned in the reply to the original post:
        //   https://programmingpraxis.com/2010/10/05/george-marsaglias-random-number-generators/
        jsr ^= jsr << 13;
        jsr ^= jsr >>> 17;
        jsr ^= jsr << 5;

        jcong = 69069 * jcong + 1234567;

        return (mwc ^ jcong) + jsr;
    }","  public void test1()  throws Throwable  {
      int[] intArray0 = new int[1];
      KISSRandom kISSRandom0 = new KISSRandom(intArray0);
      int int0 = kISSRandom0.next();
}"
1656,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, SEED_SIZE * 4);

        final int[] tmp = NumberFactory.makeIntArray(c[0]);
        z = tmp[0];
        w = tmp[1];
        jsr = tmp[2];
        jcong = tmp[3];

        super.setStateInternal(c[1]);
    }","  public void test2()  throws Throwable  {
      int[] intArray0 = new int[5];
      KISSRandom kISSRandom0 = new KISSRandom(intArray0);
      // Undeclared exception!
      try { 
        kISSRandom0.setStateInternal((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1657,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, SEED_SIZE * 4);

        final int[] tmp = NumberFactory.makeIntArray(c[0]);
        z = tmp[0];
        w = tmp[1];
        jsr = tmp[2];
        jcong = tmp[3];

        super.setStateInternal(c[1]);
    }","  public void test3()  throws Throwable  {
      int[] intArray0 = new int[8];
      KISSRandom kISSRandom0 = new KISSRandom(intArray0);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        kISSRandom0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 16 but was 4
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1658,"    public int next() {
        z = computeNew(36969, z);
        w = computeNew(18000, w);
        final int mwc = (z << 16) + w;

        // Cf. correction mentioned in the reply to the original post:
        //   https://programmingpraxis.com/2010/10/05/george-marsaglias-random-number-generators/
        jsr ^= jsr << 13;
        jsr ^= jsr >>> 17;
        jsr ^= jsr << 5;

        jcong = 69069 * jcong + 1234567;

        return (mwc ^ jcong) + jsr;
    }","  public void test4()  throws Throwable  {
      int[] intArray0 = new int[0];
      KISSRandom kISSRandom0 = new KISSRandom(intArray0);
      int int0 = kISSRandom0.next();
}"
1659,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, SEED_SIZE * 4);

        final int[] tmp = NumberFactory.makeIntArray(c[0]);
        z = tmp[0];
        w = tmp[1];
        jsr = tmp[2];
        jcong = tmp[3];

        super.setStateInternal(c[1]);
    }","  public void test5()  throws Throwable  {
      int[] intArray0 = new int[0];
      KISSRandom kISSRandom0 = new KISSRandom(intArray0);
      byte[] byteArray0 = kISSRandom0.getStateInternal();
      kISSRandom0.setStateInternal(byteArray0);
}"
1660,"    public KISSRandom(int[] seed) {
        setSeedInternal(seed);
    }","  public void test6()  throws Throwable  {
      KISSRandom kISSRandom0 = null;
      try {
        kISSRandom0 = new KISSRandom((int[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1661,"    protected int nextOutput() {
        return Integer.rotateLeft(state0 * 0x9e3779bb, 5) * 5;
    }","  public void test0()  throws Throwable  {
      XoRoShiRo64StarStar xoRoShiRo64StarStar0 = new XoRoShiRo64StarStar(2180, 2180);
      xoRoShiRo64StarStar0.state0 = 0;
      int int0 = xoRoShiRo64StarStar0.nextOutput();
}"
1662,"    protected int nextOutput() {
        return Integer.rotateLeft(state0 * 0x9e3779bb, 5) * 5;
    }","  public void test1()  throws Throwable  {
      XoRoShiRo64StarStar xoRoShiRo64StarStar0 = new XoRoShiRo64StarStar(2180, 2180);
      int int0 = xoRoShiRo64StarStar0.nextOutput();
}"
1663,"    protected int nextOutput() {
        return Integer.rotateLeft(state0 * 0x9e3779bb, 5) * 5;
    }","  public void test2()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-110);
      XoRoShiRo64StarStar xoRoShiRo64StarStar0 = new XoRoShiRo64StarStar(intArray0);
      int int0 = xoRoShiRo64StarStar0.nextOutput();
}"
1664,"    public XoRoShiRo64StarStar(int[] seed) {
        super(seed);
    }","  public void test3()  throws Throwable  {
      XoRoShiRo64StarStar xoRoShiRo64StarStar0 = null;
      try {
        xoRoShiRo64StarStar0 = new XoRoShiRo64StarStar((int[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractXoRoShiRo64"", e);
      }
  }"
1665,,"  public void test0()  throws Throwable  {
      int[] intArray0 = new int[16];
      Well512a well512a0 = new Well512a(intArray0);
  }"
1666,"    protected AbstractWell(final int k,
                           final int[] seed) {
        final int r = calculateBlockCount(k);
        v = new int[r];
        index = 0;

        // Initialize the pool content.
        setSeedInternal(seed);
    }","  public void test1()  throws Throwable  {
      AbstractWell.IndexTable abstractWell_IndexTable0 = new AbstractWell.IndexTable(1, (-1640531527), 1, 1);
      int int0 = abstractWell_IndexTable0.getIndexM3(0);
}"
1667,"    protected AbstractWell(final int k,
                           final int[] seed) {
        final int r = calculateBlockCount(k);
        v = new int[r];
        index = 0;

        // Initialize the pool content.
        setSeedInternal(seed);
    }","  public void test2()  throws Throwable  {
      AbstractWell.IndexTable abstractWell_IndexTable0 = new AbstractWell.IndexTable(1, 1, (-172), 1);
      int int0 = abstractWell_IndexTable0.getIndexM2(0);
}"
1668,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, (v.length + 1) * 4);

        final int[] tmp = NumberFactory.makeIntArray(c[0]);
        System.arraycopy(tmp, 0, v, 0, v.length);
        index = tmp[v.length];

        super.setStateInternal(c[1]);
    }","  public void test3()  throws Throwable  {
      int[] intArray0 = new int[1];
      Well44497b well44497b0 = new Well44497b(intArray0);
      byte[] byteArray0 = well44497b0.getStateInternal();
      well44497b0.setStateInternal(byteArray0);
}"
1669,"    protected AbstractWell(final int k,
                           final int[] seed) {
        final int r = calculateBlockCount(k);
        v = new int[r];
        index = 0;

        // Initialize the pool content.
        setSeedInternal(seed);
    }","  public void test4()  throws Throwable  {
      AbstractWell.IndexTable abstractWell_IndexTable0 = new AbstractWell.IndexTable(2581, 2581, 30, 30);
      int int0 = abstractWell_IndexTable0.getIndexPred2(30);
}"
1670,"    protected AbstractWell(final int k,
                           final int[] seed) {
        final int r = calculateBlockCount(k);
        v = new int[r];
        index = 0;

        // Initialize the pool content.
        setSeedInternal(seed);
    }","  public void test5()  throws Throwable  {
      AbstractWell.IndexTable abstractWell_IndexTable0 = new AbstractWell.IndexTable((byte)104, (byte) (-54), (byte)104, (byte)34);
      int int0 = abstractWell_IndexTable0.getIndexPred(0);
}"
1671,"    protected AbstractWell(final int k,
                           final int[] seed) {
        final int r = calculateBlockCount(k);
        v = new int[r];
        index = 0;

        // Initialize the pool content.
        setSeedInternal(seed);
    }","  public void test6()  throws Throwable  {
      AbstractWell.IndexTable abstractWell_IndexTable0 = new AbstractWell.IndexTable(986, 0, 1156, 0);
      int int0 = abstractWell_IndexTable0.getIndexM1(0);
}"
1672,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, (v.length + 1) * 4);

        final int[] tmp = NumberFactory.makeIntArray(c[0]);
        System.arraycopy(tmp, 0, v, 0, v.length);
        index = tmp[v.length];

        super.setStateInternal(c[1]);
    }","  public void test7()  throws Throwable  {
      int[] intArray0 = new int[5];
      Well1024a well1024a0 = new Well1024a(intArray0);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        well1024a0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 132 but was 9
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1673,,"  public void test8()  throws Throwable  {
      int[] intArray0 = new int[27];
      Well512a well512a0 = new Well512a(intArray0);
      RandomProviderState randomProviderState0 = well512a0.saveState();
      well512a0.restoreState(randomProviderState0);
  }"
1674,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, (v.length + 1) * 4);

        final int[] tmp = NumberFactory.makeIntArray(c[0]);
        System.arraycopy(tmp, 0, v, 0, v.length);
        index = tmp[v.length];

        super.setStateInternal(c[1]);
    }","  public void test9()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well44497a well44497a0 = new Well44497a(intArray0);
      // Undeclared exception!
      try { 
        well44497a0.setStateInternal((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1675,"    protected int transform(long x) {
        final int count = (int)(x >>> 59);
        return Integer.rotateRight((int)((x ^ (x >>> 18)) >>> 27), count);
    }","  public void test0()  throws Throwable  {
      Long long0 = new Long((-539L));
      PcgXshRr32 pcgXshRr32_0 = new PcgXshRr32(long0);
      int int0 = pcgXshRr32_0.transform(84972160111362308L);
}"
1676,"    protected int transform(long x) {
        final int count = (int)(x >>> 59);
        return Integer.rotateRight((int)((x ^ (x >>> 18)) >>> 27), count);
    }","  public void test1()  throws Throwable  {
      Long long0 = new Long(0L);
      PcgXshRr32 pcgXshRr32_0 = new PcgXshRr32(long0);
      int int0 = pcgXshRr32_0.transform((-2357L));
}"
1677,"    public PcgXshRr32(Long seed) {
        super(seed);
    }","  public void test2()  throws Throwable  {
      PcgXshRr32 pcgXshRr32_0 = null;
      try {
        pcgXshRr32_0 = new PcgXshRr32((Long) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractPcg6432"", e);
      }
  }"
1678,"    protected int transform(long x) {
        final int count = (int)(x >>> 59);
        return Integer.rotateRight((int)((x ^ (x >>> 18)) >>> 27), count);
    }","  public void test3()  throws Throwable  {
      long[] longArray0 = new long[3];
      PcgXshRr32 pcgXshRr32_0 = new PcgXshRr32(longArray0);
      int int0 = pcgXshRr32_0.transform(2550L);
}"
1679,"    public PcgXshRr32(Long seed) {
        super(seed);
    }","  public void test4()  throws Throwable  {
      PcgXshRr32 pcgXshRr32_0 = null;
      try {
        pcgXshRr32_0 = new PcgXshRr32((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractPcg6432"", e);
      }
  }"
1680,"    protected int transform(long x) {
        final int count = (int)(x >>> 59);
        return Integer.rotateRight((int)((x ^ (x >>> 18)) >>> 27), count);
    }","  public void test0()  throws Throwable  {
      Long long0 = new Long(0L);
      PcgMcgXshRr32 pcgMcgXshRr32_0 = new PcgMcgXshRr32(long0);
      int int0 = pcgMcgXshRr32_0.transform(1L);
}"
1681,"    protected int transform(long x) {
        final int count = (int)(x >>> 59);
        return Integer.rotateRight((int)((x ^ (x >>> 18)) >>> 27), count);
    }","  public void test1()  throws Throwable  {
      Long long0 = new Long((-1767L));
      PcgMcgXshRr32 pcgMcgXshRr32_0 = new PcgMcgXshRr32(long0);
      int int0 = pcgMcgXshRr32_0.transform(4294967295L);
}"
1682,"    public PcgMcgXshRr32(Long seed) {
        super(seed);
    }","  public void test2()  throws Throwable  {
      PcgMcgXshRr32 pcgMcgXshRr32_0 = null;
      try {
        pcgMcgXshRr32_0 = new PcgMcgXshRr32((Long) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractPcgMcg6432"", e);
      }
  }"
1683,"    protected int transform(long x) {
        final int count = (int)(x >>> 59);
        return Integer.rotateRight((int)((x ^ (x >>> 18)) >>> 27), count);
    }","  public void test3()  throws Throwable  {
      Long long0 = new Long((-1767L));
      PcgMcgXshRr32 pcgMcgXshRr32_0 = new PcgMcgXshRr32(long0);
      int int0 = pcgMcgXshRr32_0.transform((-1767L));
}"
1684,"    protected int nextOutput() {
        return state0 + state3;
    }","  public void test0()  throws Throwable  {
      XoShiRo128Plus xoShiRo128Plus0 = new XoShiRo128Plus(0, 2601, 2601, 0);
      int int0 = xoShiRo128Plus0.nextOutput();
}"
1685,"    protected int nextOutput() {
        return state0 + state3;
    }","  public void test1()  throws Throwable  {
      int[] intArray0 = new int[2];
      XoShiRo128Plus xoShiRo128Plus0 = new XoShiRo128Plus(intArray0);
      int int0 = xoShiRo128Plus0.nextOutput();
}"
1686,"    protected int nextOutput() {
        return state0 + state3;
    }","  public void test2()  throws Throwable  {
      XoShiRo128Plus xoShiRo128Plus0 = new XoShiRo128Plus((-2247), (-2247), (-2247), 2);
      int int0 = xoShiRo128Plus0.nextOutput();
}"
1687,"    public XoShiRo128Plus(int[] seed) {
        super(seed);
    }","  public void test3()  throws Throwable  {
      XoShiRo128Plus xoShiRo128Plus0 = null;
      try {
        xoShiRo128Plus0 = new XoShiRo128Plus((int[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractXoShiRo128"", e);
      }
  }"
1688,"    public XoShiRo128Plus(int[] seed) {
        super(seed);
    }","  public void test4()  throws Throwable  {
      XoShiRo128Plus xoShiRo128Plus0 = null;
      try {
        xoShiRo128Plus0 = new XoShiRo128Plus((XoShiRo128Plus) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.IntProvider"", e);
      }
  }"
1689,"    public XoShiRo128Plus(int[] seed) {
        super(seed);
    }","  public void test5()  throws Throwable  {
      XoShiRo128Plus xoShiRo128Plus0 = new XoShiRo128Plus((-358), (-358), (-358), 0);
      XoShiRo128Plus xoShiRo128Plus1 = new XoShiRo128Plus(xoShiRo128Plus0);
}"
1690,"    protected XoShiRo128Plus copy() {
        // This exists to ensure the jump function performed in the super class returns
        // the correct class type. It should not be public.
        return new XoShiRo128Plus(this);
    }","  public void test6()  throws Throwable  {
      int[] intArray0 = new int[6];
      XoShiRo128Plus xoShiRo128Plus0 = new XoShiRo128Plus(intArray0);
      XoShiRo128Plus xoShiRo128Plus1 = xoShiRo128Plus0.copy();
}"
1691,"    protected void setStateInternal(byte[] s) {
        final byte[][] parts = splitStateInternal(s, 4 * 4);

        final int[] tmp = NumberFactory.makeIntArray(parts[0]);
        a = tmp[0];
        b = tmp[1];
        c = tmp[2];
        counter = tmp[3];

        super.setStateInternal(parts[1]);
    }","  public void test0()  throws Throwable  {
      int[] intArray0 = new int[1];
      DotyHumphreySmallFastCounting32 dotyHumphreySmallFastCounting32_0 = new DotyHumphreySmallFastCounting32(intArray0);
      byte[] byteArray0 = dotyHumphreySmallFastCounting32_0.getStateInternal();
      dotyHumphreySmallFastCounting32_0.setStateInternal(byteArray0);
}"
1692,"    public final int next() {
        final int tmp = a + b + counter++;
        a = b ^ (b >>> 9);
        b = c + (c << 3);
        c = Integer.rotateLeft(c, 21) + tmp;
        return tmp;
    }","  public void test1()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1117;
      DotyHumphreySmallFastCounting32 dotyHumphreySmallFastCounting32_0 = new DotyHumphreySmallFastCounting32(intArray0);
      int int0 = dotyHumphreySmallFastCounting32_0.next();
}"
1693,"    protected void setStateInternal(byte[] s) {
        final byte[][] parts = splitStateInternal(s, 4 * 4);

        final int[] tmp = NumberFactory.makeIntArray(parts[0]);
        a = tmp[0];
        b = tmp[1];
        c = tmp[2];
        counter = tmp[3];

        super.setStateInternal(parts[1]);
    }","  public void test2()  throws Throwable  {
      int[] intArray0 = new int[7];
      DotyHumphreySmallFastCounting32 dotyHumphreySmallFastCounting32_0 = new DotyHumphreySmallFastCounting32(intArray0);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        dotyHumphreySmallFastCounting32_0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 16 but was 5
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1694,"    public DotyHumphreySmallFastCounting32(int[] seed) {
        if (seed.length < SEED_SIZE) {
            final int[] state = new int[SEED_SIZE];
            fillState(state, seed);
            setSeedInternal(state);
        } else {
            setSeedInternal(seed);
        }
    }","  public void test3()  throws Throwable  {
      DotyHumphreySmallFastCounting32 dotyHumphreySmallFastCounting32_0 = null;
      try {
        dotyHumphreySmallFastCounting32_0 = new DotyHumphreySmallFastCounting32((int[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.DotyHumphreySmallFastCounting32"", e);
      }
  }"
1695,"    public final int next() {
        final int tmp = a + b + counter++;
        a = b ^ (b >>> 9);
        b = c + (c << 3);
        c = Integer.rotateLeft(c, 21) + tmp;
        return tmp;
    }","  public void test4()  throws Throwable  {
      int[] intArray0 = new int[3];
      DotyHumphreySmallFastCounting32 dotyHumphreySmallFastCounting32_0 = new DotyHumphreySmallFastCounting32(intArray0);
      int int0 = dotyHumphreySmallFastCounting32_0.next();
}"
1696,"    protected void setStateInternal(byte[] s) {
        final byte[][] parts = splitStateInternal(s, 4 * 4);

        final int[] tmp = NumberFactory.makeIntArray(parts[0]);
        a = tmp[0];
        b = tmp[1];
        c = tmp[2];
        counter = tmp[3];

        super.setStateInternal(parts[1]);
    }","  public void test5()  throws Throwable  {
      int[] intArray0 = new int[3];
      DotyHumphreySmallFastCounting32 dotyHumphreySmallFastCounting32_0 = new DotyHumphreySmallFastCounting32(intArray0);
      // Undeclared exception!
      try { 
        dotyHumphreySmallFastCounting32_0.setStateInternal((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1697,"    protected void setStateInternal(byte[] s) {
        // First obtain the state size
        final byte[][] s2 = splitStateInternal(s, 4);
        final int stateSize = NumberFactory.makeInt(s2[0]);

        // Second obtain the state
        final byte[][] c = splitStateInternal(s2[1], stateSize);

        // Use look-ahead deserialization to validate the state byte[] contains java.util.Random.
        try (ByteArrayInputStream bis = new ByteArrayInputStream(c[0]);
             ObjectInputStream ois = new ValidatingObjectInputStream(bis)) {

            delegate = (Random) ois.readObject();
        } catch (ClassNotFoundException | IOException e) {
            // Workaround checked exception.
            throw new IllegalStateException(e);
        }

        super.setStateInternal(c[1]);
    }","  public void test0()  throws Throwable  {
      Long long0 = new Long(0L);
      JDKRandom jDKRandom0 = new JDKRandom(long0);
      byte[] byteArray0 = jDKRandom0.getStateInternal();
      jDKRandom0.nextBytes(byteArray0);
      // Undeclared exception!
      try { 
        jDKRandom0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // java.io.EOFException
         //
         verifyException(""org.apache.commons.rng.core.source32.JDKRandom"", e);
      }
  }"
1698,"    public int next() {
        return delegate.nextInt();
    }","  public void test1()  throws Throwable  {
      Long long0 = Long.getLong(""org.apache.commons.rng.core.source32.JDKRandom"", 2L);
      JDKRandom jDKRandom0 = new JDKRandom(long0);
      Random.setNextRandom(2147483644);
      jDKRandom0.nextLong(2L);
      jDKRandom0.next();
      jDKRandom0.next();
      int int0 = jDKRandom0.next();
}"
1699,"    protected void setStateInternal(byte[] s) {
        // First obtain the state size
        final byte[][] s2 = splitStateInternal(s, 4);
        final int stateSize = NumberFactory.makeInt(s2[0]);

        // Second obtain the state
        final byte[][] c = splitStateInternal(s2[1], stateSize);

        // Use look-ahead deserialization to validate the state byte[] contains java.util.Random.
        try (ByteArrayInputStream bis = new ByteArrayInputStream(c[0]);
             ObjectInputStream ois = new ValidatingObjectInputStream(bis)) {

            delegate = (Random) ois.readObject();
        } catch (ClassNotFoundException | IOException e) {
            // Workaround checked exception.
            throw new IllegalStateException(e);
        }

        super.setStateInternal(c[1]);
    }","  public void test2()  throws Throwable  {
      Long long0 = new Long(439L);
      JDKRandom jDKRandom0 = new JDKRandom(long0);
      // Undeclared exception!
      try { 
        jDKRandom0.setStateInternal((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1700,"    protected void setStateInternal(byte[] s) {
        // First obtain the state size
        final byte[][] s2 = splitStateInternal(s, 4);
        final int stateSize = NumberFactory.makeInt(s2[0]);

        // Second obtain the state
        final byte[][] c = splitStateInternal(s2[1], stateSize);

        // Use look-ahead deserialization to validate the state byte[] contains java.util.Random.
        try (ByteArrayInputStream bis = new ByteArrayInputStream(c[0]);
             ObjectInputStream ois = new ValidatingObjectInputStream(bis)) {

            delegate = (Random) ois.readObject();
        } catch (ClassNotFoundException | IOException e) {
            // Workaround checked exception.
            throw new IllegalStateException(e);
        }

        super.setStateInternal(c[1]);
    }","  public void test3()  throws Throwable  {
      Long long0 = new Long(925L);
      JDKRandom jDKRandom0 = new JDKRandom(long0);
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-33);
      // Undeclared exception!
      try { 
        jDKRandom0.setStateInternal(byteArray0);
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1701,"    public int next() {
        return delegate.nextInt();
    }","  public void test4()  throws Throwable  {
      Long long0 = Long.getLong(""org.apache.commons.rng.core.source32.JDKRandom"", 2L);
      JDKRandom jDKRandom0 = new JDKRandom(long0);
      int int0 = jDKRandom0.next();
}"
1702,"    protected void setStateInternal(byte[] s) {
        // First obtain the state size
        final byte[][] s2 = splitStateInternal(s, 4);
        final int stateSize = NumberFactory.makeInt(s2[0]);

        // Second obtain the state
        final byte[][] c = splitStateInternal(s2[1], stateSize);

        // Use look-ahead deserialization to validate the state byte[] contains java.util.Random.
        try (ByteArrayInputStream bis = new ByteArrayInputStream(c[0]);
             ObjectInputStream ois = new ValidatingObjectInputStream(bis)) {

            delegate = (Random) ois.readObject();
        } catch (ClassNotFoundException | IOException e) {
            // Workaround checked exception.
            throw new IllegalStateException(e);
        }

        super.setStateInternal(c[1]);
    }","  public void test5()  throws Throwable  {
      Long long0 = new Long(1664500L);
      JDKRandom jDKRandom0 = new JDKRandom(long0);
      byte[] byteArray0 = jDKRandom0.getStateInternal();
      // Undeclared exception!
      try { 
        jDKRandom0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Stream does not contain java.util.Random: org.evosuite.runtime.mock.java.util.MockRandom
         //
         verifyException(""org.apache.commons.rng.core.source32.JDKRandom$ValidatingObjectInputStream"", e);
      }
  }"
1703,"    public JDKRandom(Long seed) {
        delegate = new Random(seed);
    }","  public void test6()  throws Throwable  {
      JDKRandom jDKRandom0 = null;
      try {
        jDKRandom0 = new JDKRandom((Long) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.JDKRandom"", e);
      }
  }"
1704,,"  public void test0()  throws Throwable  {
      XoShiRo128PlusPlus xoShiRo128PlusPlus0 = new XoShiRo128PlusPlus(2171, 2171, 2171, 0);
      xoShiRo128PlusPlus0.nextInt();
      RandomProviderState randomProviderState0 = xoShiRo128PlusPlus0.saveState();
}"
1705,"    public int next() {
        final int result = nextOutput();

        final int t = state1 << 9;

        state2 ^= state0;
        state3 ^= state1;
        state1 ^= state2;
        state0 ^= state3;

        state2 ^= t;

        state3 = Integer.rotateLeft(state3, 11);

        return result;
    }","  public void test1()  throws Throwable  {
      int[] intArray0 = new int[0];
      XoShiRo128StarStar xoShiRo128StarStar0 = new XoShiRo128StarStar(intArray0);
      int int0 = xoShiRo128StarStar0.next();
}"
1706,"    public int next() {
        final int result = nextOutput();

        final int t = state1 << 9;

        state2 ^= state0;
        state3 ^= state1;
        state1 ^= state2;
        state0 ^= state3;

        state2 ^= t;

        state3 = Integer.rotateLeft(state3, 11);

        return result;
    }","  public void test2()  throws Throwable  {
      int[] intArray0 = new int[0];
      XoShiRo128Plus xoShiRo128Plus0 = new XoShiRo128Plus(intArray0);
      int int0 = xoShiRo128Plus0.next();
}"
1707,"    public int next() {
        final int result = nextOutput();

        final int t = state1 << 9;

        state2 ^= state0;
        state3 ^= state1;
        state1 ^= state2;
        state0 ^= state3;

        state2 ^= t;

        state3 = Integer.rotateLeft(state3, 11);

        return result;
    }","  public void test3()  throws Throwable  {
      XoShiRo128Plus xoShiRo128Plus0 = new XoShiRo128Plus((-4214), 2218, 2218, 1518);
      int int0 = xoShiRo128Plus0.next();
}"
1708,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, SEED_SIZE * 4);

        setState(NumberFactory.makeIntArray(c[0]));

        super.setStateInternal(c[1]);
    }","  public void test4()  throws Throwable  {
      XoShiRo128StarStar xoShiRo128StarStar0 = new XoShiRo128StarStar(2234, 2234, 2234, (-347));
      // Undeclared exception!
      try { 
        xoShiRo128StarStar0.setStateInternal((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1709,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, SEED_SIZE * 4);

        setState(NumberFactory.makeIntArray(c[0]));

        super.setStateInternal(c[1]);
    }","  public void test5()  throws Throwable  {
      XoShiRo128StarStar xoShiRo128StarStar0 = new XoShiRo128StarStar((-2629), 16, 16, 16);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        xoShiRo128StarStar0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 16 but was 0
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1710,"    public UniformRandomProvider jump() {
        final UniformRandomProvider copy = copy();
        performJump(JUMP_COEFFICIENTS);
        return copy;
    }","  public void test6()  throws Throwable  {
      int[] intArray0 = new int[7];
      XoShiRo128PlusPlus xoShiRo128PlusPlus0 = new XoShiRo128PlusPlus(intArray0);
      UniformRandomProvider uniformRandomProvider0 = xoShiRo128PlusPlus0.jump();
}"
1711,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, SEED_SIZE * 4);

        setState(NumberFactory.makeIntArray(c[0]));

        super.setStateInternal(c[1]);
    }","  public void test7()  throws Throwable  {
      int[] intArray0 = new int[7];
      XoShiRo128PlusPlus xoShiRo128PlusPlus0 = new XoShiRo128PlusPlus(intArray0);
      XoShiRo128StarStar xoShiRo128StarStar0 = new XoShiRo128StarStar(0, 0, (-34), (-34));
      byte[] byteArray0 = xoShiRo128StarStar0.getStateInternal();
      xoShiRo128PlusPlus0.setStateInternal(byteArray0);
}"
1712,"    public JumpableUniformRandomProvider longJump() {
        final JumpableUniformRandomProvider copy = copy();
        performJump(LONG_JUMP_COEFFICIENTS);
        return copy;
    }","  public void test8()  throws Throwable  {
      XoShiRo128StarStar xoShiRo128StarStar0 = new XoShiRo128StarStar(0, 0, (-34), (-34));
      JumpableUniformRandomProvider jumpableUniformRandomProvider0 = xoShiRo128StarStar0.longJump();
}"
1713,"    protected int nextOutput() {
        return Integer.rotateLeft(state0 + state3, 7) + state0;
    }","  public void test0()  throws Throwable  {
      XoShiRo128PlusPlus xoShiRo128PlusPlus0 = new XoShiRo128PlusPlus(0, (-1255959250), (-1255959250), 0);
      int int0 = xoShiRo128PlusPlus0.nextOutput();
}"
1714,"    protected int nextOutput() {
        return Integer.rotateLeft(state0 + state3, 7) + state0;
    }","  public void test1()  throws Throwable  {
      XoShiRo128PlusPlus xoShiRo128PlusPlus0 = new XoShiRo128PlusPlus((-1151), (-1808), (-1808), 3084);
      int int0 = xoShiRo128PlusPlus0.nextOutput();
}"
1715,"    public XoShiRo128PlusPlus(int[] seed) {
        super(seed);
    }","  public void test2()  throws Throwable  {
      XoShiRo128PlusPlus xoShiRo128PlusPlus0 = null;
      try {
        xoShiRo128PlusPlus0 = new XoShiRo128PlusPlus((int[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractXoShiRo128"", e);
      }
  }"
1716,"    public XoShiRo128PlusPlus(int[] seed) {
        super(seed);
    }","  public void test3()  throws Throwable  {
      XoShiRo128PlusPlus xoShiRo128PlusPlus0 = null;
      try {
        xoShiRo128PlusPlus0 = new XoShiRo128PlusPlus((XoShiRo128PlusPlus) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.IntProvider"", e);
      }
  }"
1717,"    public XoShiRo128PlusPlus(int[] seed) {
        super(seed);
    }","  public void test4()  throws Throwable  {
      XoShiRo128PlusPlus xoShiRo128PlusPlus0 = new XoShiRo128PlusPlus((-15), (-15), (-15), (-15));
      XoShiRo128PlusPlus xoShiRo128PlusPlus1 = new XoShiRo128PlusPlus(xoShiRo128PlusPlus0);
}"
1718,"    protected XoShiRo128PlusPlus copy() {
        // This exists to ensure the jump function performed in the super class returns
        // the correct class type. It should not be public.
        return new XoShiRo128PlusPlus(this);
    }","  public void test5()  throws Throwable  {
      int[] intArray0 = new int[10];
      XoShiRo128PlusPlus xoShiRo128PlusPlus0 = new XoShiRo128PlusPlus(intArray0);
      XoShiRo128PlusPlus xoShiRo128PlusPlus1 = xoShiRo128PlusPlus0.copy();
}"
1719,"    protected int nextOutput() {
        return Integer.rotateLeft(state0 + state3, 7) + state0;
    }","  public void test6()  throws Throwable  {
      XoShiRo128PlusPlus xoShiRo128PlusPlus0 = new XoShiRo128PlusPlus((-498), (-498), (-1405), (-1405));
      int int0 = xoShiRo128PlusPlus0.nextOutput();
}"
1720,"    public int next() {
        final long x = state;
        state = bump(state);
        return transform(x);
    }","  public void test0()  throws Throwable  {
      Long long0 = new Long((-4029002846318278299L));
      PcgMcgXshRr32 pcgMcgXshRr32_0 = new PcgMcgXshRr32(long0);
      int int0 = pcgMcgXshRr32_0.next();
}"
1721,"    public int next() {
        final long x = state;
        state = bump(state);
        return transform(x);
    }","  public void test1()  throws Throwable  {
      Long long0 = new Long((-2763L));
      PcgMcgXshRs32 pcgMcgXshRs32_0 = new PcgMcgXshRs32(long0);
      int int0 = pcgMcgXshRs32_0.next();
}"
1722,"    protected void setStateInternal(byte[] s) {
        final byte[][] d = splitStateInternal(s, 8);
        // As per the constructor, ensure the lower 2 bits of state are set.
        state = NumberFactory.makeLong(d[0]) | 3;
        super.setStateInternal(d[1]);
    }","  public void test2()  throws Throwable  {
      Long long0 = new Long((-1726L));
      PcgMcgXshRr32 pcgMcgXshRr32_0 = new PcgMcgXshRr32(long0);
      // Undeclared exception!
      try { 
        pcgMcgXshRr32_0.setStateInternal((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1723,"    protected void setStateInternal(byte[] s) {
        final byte[][] d = splitStateInternal(s, 8);
        // As per the constructor, ensure the lower 2 bits of state are set.
        state = NumberFactory.makeLong(d[0]) | 3;
        super.setStateInternal(d[1]);
    }","  public void test3()  throws Throwable  {
      Long long0 = new Long((-2035L));
      PcgMcgXshRr32 pcgMcgXshRr32_0 = new PcgMcgXshRr32(long0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        pcgMcgXshRr32_0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 8 but was 0
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1724,"    public int next() {
        final long x = state;
        state = bump(state);
        return transform(x);
    }","  public void test4()  throws Throwable  {
      Long long0 = new Long(2055L);
      PcgMcgXshRs32 pcgMcgXshRs32_0 = new PcgMcgXshRs32(long0);
      int int0 = pcgMcgXshRs32_0.next();
}"
1725,"    protected void setStateInternal(byte[] s) {
        final byte[][] d = splitStateInternal(s, 8);
        // As per the constructor, ensure the lower 2 bits of state are set.
        state = NumberFactory.makeLong(d[0]) | 3;
        super.setStateInternal(d[1]);
    }","  public void test5()  throws Throwable  {
      Long long0 = new Long(2055L);
      PcgMcgXshRs32 pcgMcgXshRs32_0 = new PcgMcgXshRs32(long0);
      byte[] byteArray0 = pcgMcgXshRs32_0.getStateInternal();
      pcgMcgXshRs32_0.setStateInternal(byteArray0);
}"
1726,"    protected int nextOutput() {
        return Integer.rotateLeft(state0 * 5, 7) * 9;
    }","  public void test0()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 5667;
      XoShiRo128StarStar xoShiRo128StarStar0 = new XoShiRo128StarStar(intArray0);
      int int0 = xoShiRo128StarStar0.nextOutput();
}"
1727,"    protected int nextOutput() {
        return Integer.rotateLeft(state0 * 5, 7) * 9;
    }","  public void test1()  throws Throwable  {
      XoShiRo128StarStar xoShiRo128StarStar0 = new XoShiRo128StarStar((-2459), (-2459), (-2459), (-2459));
      int int0 = xoShiRo128StarStar0.nextOutput();
}"
1728,"    public XoShiRo128StarStar(int[] seed) {
        super(seed);
    }","  public void test2()  throws Throwable  {
      XoShiRo128StarStar xoShiRo128StarStar0 = null;
      try {
        xoShiRo128StarStar0 = new XoShiRo128StarStar((int[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractXoShiRo128"", e);
      }
  }"
1729,"    public XoShiRo128StarStar(int[] seed) {
        super(seed);
    }","  public void test3()  throws Throwable  {
      XoShiRo128StarStar xoShiRo128StarStar0 = null;
      try {
        xoShiRo128StarStar0 = new XoShiRo128StarStar((XoShiRo128StarStar) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.IntProvider"", e);
      }
  }"
1730,"    public XoShiRo128StarStar(int[] seed) {
        super(seed);
    }","  public void test4()  throws Throwable  {
      int[] intArray0 = new int[1];
      XoShiRo128StarStar xoShiRo128StarStar0 = new XoShiRo128StarStar(intArray0);
      XoShiRo128StarStar xoShiRo128StarStar1 = new XoShiRo128StarStar(xoShiRo128StarStar0);
}"
1731,"    protected XoShiRo128StarStar copy() {
        // This exists to ensure the jump function performed in the super class returns
        // the correct class type. It should not be public.
        return new XoShiRo128StarStar(this);
    }","  public void test5()  throws Throwable  {
      int[] intArray0 = new int[16];
      XoShiRo128StarStar xoShiRo128StarStar0 = new XoShiRo128StarStar(intArray0);
      XoShiRo128StarStar xoShiRo128StarStar1 = xoShiRo128StarStar0.copy();
}"
1732,"    protected int nextOutput() {
        return Integer.rotateLeft(state0 * 5, 7) * 9;
    }","  public void test6()  throws Throwable  {
      XoShiRo128StarStar xoShiRo128StarStar0 = new XoShiRo128StarStar(0, (-1), 0, 501);
      int int0 = xoShiRo128StarStar0.nextOutput();
}"
1733,"    public final int next() {
        final int e = a - Integer.rotateLeft(b, 27);
        a = b ^ Integer.rotateLeft(c, 17);
        b = c + d;
        c = d + e;
        d = e + a;
        return d;
    }","  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(0);
      JenkinsSmallFast32 jenkinsSmallFast32_0 = new JenkinsSmallFast32(integer0);
      jenkinsSmallFast32_0.nextDouble();
      int int0 = jenkinsSmallFast32_0.next();
}"
1734,"    protected void setStateInternal(byte[] s) {
        final byte[][] parts = splitStateInternal(s, 4 * 4);

        final int[] tmp = NumberFactory.makeIntArray(parts[0]);
        a = tmp[0];
        b = tmp[1];
        c = tmp[2];
        d = tmp[3];

        super.setStateInternal(parts[1]);
    }","  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(0);
      JenkinsSmallFast32 jenkinsSmallFast32_0 = new JenkinsSmallFast32(integer0);
      // Undeclared exception!
      try { 
        jenkinsSmallFast32_0.setStateInternal((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1735,"    protected void setStateInternal(byte[] s) {
        final byte[][] parts = splitStateInternal(s, 4 * 4);

        final int[] tmp = NumberFactory.makeIntArray(parts[0]);
        a = tmp[0];
        b = tmp[1];
        c = tmp[2];
        d = tmp[3];

        super.setStateInternal(parts[1]);
    }","  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(1372);
      JenkinsSmallFast32 jenkinsSmallFast32_0 = new JenkinsSmallFast32(integer0);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        jenkinsSmallFast32_0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 16 but was 7
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1736,"    public JenkinsSmallFast32(Integer seed) {
        setSeedInternal(seed);
    }","  public void test3()  throws Throwable  {
      JenkinsSmallFast32 jenkinsSmallFast32_0 = null;
      try {
        jenkinsSmallFast32_0 = new JenkinsSmallFast32((Integer) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.JenkinsSmallFast32"", e);
      }
  }"
1737,"    public final int next() {
        final int e = a - Integer.rotateLeft(b, 27);
        a = b ^ Integer.rotateLeft(c, 17);
        b = c + d;
        c = d + e;
        d = e + a;
        return d;
    }","  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(0);
      JenkinsSmallFast32 jenkinsSmallFast32_0 = new JenkinsSmallFast32(integer0);
      int int0 = jenkinsSmallFast32_0.next();
}"
1738,"    protected void setStateInternal(byte[] s) {
        final byte[][] parts = splitStateInternal(s, 4 * 4);

        final int[] tmp = NumberFactory.makeIntArray(parts[0]);
        a = tmp[0];
        b = tmp[1];
        c = tmp[2];
        d = tmp[3];

        super.setStateInternal(parts[1]);
    }","  public void test5()  throws Throwable  {
      Integer integer0 = new Integer((-236298515));
      JenkinsSmallFast32 jenkinsSmallFast32_0 = new JenkinsSmallFast32(integer0);
      byte[] byteArray0 = jenkinsSmallFast32_0.getStateInternal();
      jenkinsSmallFast32_0.setStateInternal(byteArray0);
}"
1739,"    public int next() {
        final int indexRm1 = TABLE.getIndexPred(index);
        final int indexRm2 = TABLE.getIndexPred2(index);

        final int v0 = v[index];
        final int vM1 = v[TABLE.getIndexM1(index)];
        final int vM2 = v[TABLE.getIndexM2(index)];
        final int vM3 = v[TABLE.getIndexM3(index)];

        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);
        final int z1 = (v0 ^ (v0 << 25)) ^ (vM1 ^ (vM1 >>> 27));
        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));
        final int z3 = z1 ^ z2;
        final int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));

        v[index] = z3;
        v[indexRm1] = z4;
        v[indexRm2] &= 0x80000000;
        index = indexRm1;

        return z4;
    }","  public void test0()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2366);
      Well19937a well19937a0 = new Well19937a(intArray0);
      int int0 = well19937a0.next();
}"
1740,"    public int next() {
        final int indexRm1 = TABLE.getIndexPred(index);
        final int indexRm2 = TABLE.getIndexPred2(index);

        final int v0 = v[index];
        final int vM1 = v[TABLE.getIndexM1(index)];
        final int vM2 = v[TABLE.getIndexM2(index)];
        final int vM3 = v[TABLE.getIndexM3(index)];

        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);
        final int z1 = (v0 ^ (v0 << 25)) ^ (vM1 ^ (vM1 >>> 27));
        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));
        final int z3 = z1 ^ z2;
        final int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));

        v[index] = z3;
        v[indexRm1] = z4;
        v[indexRm2] &= 0x80000000;
        index = indexRm1;

        return z4;
    }","  public void test1()  throws Throwable  {
      int[] intArray0 = new int[3];
      Well19937a well19937a0 = new Well19937a(intArray0);
      well19937a0.index = (-3821);
      // Undeclared exception!
      try { 
        well19937a0.next();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3821
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractWell$IndexTable"", e);
      }
  }"
1741,"    public int next() {
        final int indexRm1 = TABLE.getIndexPred(index);
        final int indexRm2 = TABLE.getIndexPred2(index);

        final int v0 = v[index];
        final int vM1 = v[TABLE.getIndexM1(index)];
        final int vM2 = v[TABLE.getIndexM2(index)];
        final int vM3 = v[TABLE.getIndexM3(index)];

        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);
        final int z1 = (v0 ^ (v0 << 25)) ^ (vM1 ^ (vM1 >>> 27));
        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));
        final int z3 = z1 ^ z2;
        final int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));

        v[index] = z3;
        v[indexRm1] = z4;
        v[indexRm2] &= 0x80000000;
        index = indexRm1;

        return z4;
    }","  public void test2()  throws Throwable  {
      int[] intArray0 = new int[1];
      Well19937a well19937a0 = new Well19937a(intArray0);
      int int0 = well19937a0.next();
}"
1742,"    public Well19937a(int[] seed) {
        super(K, seed);
    }","  public void test3()  throws Throwable  {
      Well19937a well19937a0 = null;
      try {
        well19937a0 = new Well19937a((int[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1743,"   protected int transform(long x) {
        final int count = (int)(x >>> 61);
        return (int)((x ^ (x >>> 22)) >>> (22 + count));
    }","  public void test0()  throws Throwable  {
      Long long0 = new Long(809430660L);
      PcgXshRs32 pcgXshRs32_0 = new PcgXshRs32(long0);
      int int0 = pcgXshRs32_0.transform(192);
}"
1744,"   protected int transform(long x) {
        final int count = (int)(x >>> 61);
        return (int)((x ^ (x >>> 22)) >>> (22 + count));
    }","  public void test1()  throws Throwable  {
      Long long0 = new Long(809430660L);
      PcgXshRs32 pcgXshRs32_0 = new PcgXshRs32(long0);
      int int0 = pcgXshRs32_0.transform((-1704L));
}"
1745,"    public PcgXshRs32(Long seed) {
        super(seed);
    }","  public void test2()  throws Throwable  {
      PcgXshRs32 pcgXshRs32_0 = null;
      try {
        pcgXshRs32_0 = new PcgXshRs32((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractPcg6432"", e);
      }
  }"
1746,"    public PcgXshRs32(Long seed) {
        super(seed);
    }","  public void test3()  throws Throwable  {
      PcgXshRs32 pcgXshRs32_0 = null;
      try {
        pcgXshRs32_0 = new PcgXshRs32((Long) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractPcg6432"", e);
      }
  }"
1747,"    public PcgXshRs32(Long seed) {
        super(seed);
    }","  public void test4()  throws Throwable  {
      long[] longArray0 = new long[1];
      PcgXshRs32 pcgXshRs32_0 = new PcgXshRs32(longArray0);
  }"
1748,"   protected int transform(long x) {
        final int count = (int)(x >>> 61);
        return (int)((x ^ (x >>> 22)) >>> (22 + count));
    }","  public void test5()  throws Throwable  {
      Long long0 = new Long(809430660L);
      PcgXshRs32 pcgXshRs32_0 = new PcgXshRs32(long0);
      int int0 = pcgXshRs32_0.transform(809430660L);
}"
1749,"    protected byte[] getStateInternal() {
        final int[] s = Arrays.copyOf(mt, N + 1);
        s[N] = mti;

        return composeStateInternal(NumberFactory.makeByteArray(s),
                                    super.getStateInternal());
    }","  public void test0()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 18;
      intArray0[1] = (-560);
      intArray0[2] = 1872770499;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      byte[] byteArray0 = mersenneTwister0.getStateInternal();
      float float0 = mersenneTwister0.nextFloat();
}"
1750,"    protected byte[] getStateInternal() {
        final int[] s = Arrays.copyOf(mt, N + 1);
        s[N] = mti;

        return composeStateInternal(NumberFactory.makeByteArray(s),
                                    super.getStateInternal());
    }","  public void test1()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 18;
      intArray0[1] = (-560);
      intArray0[2] = 1872770499;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      byte[] byteArray0 = mersenneTwister0.getStateInternal();
      float float0 = mersenneTwister0.nextFloat();
      mersenneTwister0.nextBoolean();
      long long0 = mersenneTwister0.nextLong();
}"
1751,"    public int next() {
        int y;

        if (mti >= N) { // Generate N words at one time.
            int mtNext = mt[0];
            for (int k = 0; k < N - M; ++k) {
                final int mtCurr = mtNext;
                mtNext = mt[k + 1];
                y = (mtCurr & UPPER_MASK) | (mtNext & LOWER_MASK);
                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 1];
            }
            for (int k = N - M; k < N - 1; ++k) {
                final int mtCurr = mtNext;
                mtNext = mt[k + 1];
                y = (mtCurr & UPPER_MASK) | (mtNext & LOWER_MASK);
                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 1];
            }
            y = (mtNext & UPPER_MASK) | (mt[0] & LOWER_MASK);
            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 1];

            mti = 0;
        }

        y = mt[mti++];

        // Tempering.
        y ^=  y >>> 11;
        y ^= (y << 7) & 0x9d2c5680;
        y ^= (y << 15) & 0xefc60000;
        y ^=  y >>> 18;

        return y;
    }","  public void test2()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 18;
      intArray0[1] = (-560);
      intArray0[2] = 1872770499;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      byte[] byteArray0 = mersenneTwister0.getStateInternal();
      float float0 = mersenneTwister0.nextFloat();
      mersenneTwister0.nextBoolean();
      long long0 = mersenneTwister0.nextLong();
      mersenneTwister0.nextInt();
      mersenneTwister0.nextBytes(byteArray0);
      mersenneTwister0.setStateInternal(byteArray0);
      int int0 = mersenneTwister0.next();
}"
1752,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, (N + 1) * 4);

        final int[] tmp = NumberFactory.makeIntArray(c[0]);
        System.arraycopy(tmp, 0, mt, 0, N);
        mti = tmp[N];

        super.setStateInternal(c[1]);
    }","  public void test3()  throws Throwable  {
      int[] intArray0 = new int[0];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      // Undeclared exception!
      try { 
        mersenneTwister0.setStateInternal((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1753,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, (N + 1) * 4);

        final int[] tmp = NumberFactory.makeIntArray(c[0]);
        System.arraycopy(tmp, 0, mt, 0, N);
        mti = tmp[N];

        super.setStateInternal(c[1]);
    }","  public void test4()  throws Throwable  {
      int[] intArray0 = new int[7];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        mersenneTwister0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 2500 but was 7
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1754,"    public int next() {
        int y;

        if (mti >= N) { // Generate N words at one time.
            int mtNext = mt[0];
            for (int k = 0; k < N - M; ++k) {
                final int mtCurr = mtNext;
                mtNext = mt[k + 1];
                y = (mtCurr & UPPER_MASK) | (mtNext & LOWER_MASK);
                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 1];
            }
            for (int k = N - M; k < N - 1; ++k) {
                final int mtCurr = mtNext;
                mtNext = mt[k + 1];
                y = (mtCurr & UPPER_MASK) | (mtNext & LOWER_MASK);
                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 1];
            }
            y = (mtNext & UPPER_MASK) | (mt[0] & LOWER_MASK);
            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 1];

            mti = 0;
        }

        y = mt[mti++];

        // Tempering.
        y ^=  y >>> 11;
        y ^= (y << 7) & 0x9d2c5680;
        y ^= (y << 15) & 0xefc60000;
        y ^=  y >>> 18;

        return y;
    }","  public void test5()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 18;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      byte[] byteArray0 = mersenneTwister0.getStateInternal();
      mersenneTwister0.nextBytes(byteArray0);
      mersenneTwister0.setStateInternal(byteArray0);
      // Undeclared exception!
      try { 
        mersenneTwister0.next();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -781057225
         //
         verifyException(""org.apache.commons.rng.core.source32.MersenneTwister"", e);
      }
  }"
1755,"    public int next() {
        int y;

        if (mti >= N) { // Generate N words at one time.
            int mtNext = mt[0];
            for (int k = 0; k < N - M; ++k) {
                final int mtCurr = mtNext;
                mtNext = mt[k + 1];
                y = (mtCurr & UPPER_MASK) | (mtNext & LOWER_MASK);
                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 1];
            }
            for (int k = N - M; k < N - 1; ++k) {
                final int mtCurr = mtNext;
                mtNext = mt[k + 1];
                y = (mtCurr & UPPER_MASK) | (mtNext & LOWER_MASK);
                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 1];
            }
            y = (mtNext & UPPER_MASK) | (mt[0] & LOWER_MASK);
            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 1];

            mti = 0;
        }

        y = mt[mti++];

        // Tempering.
        y ^=  y >>> 11;
        y ^= (y << 7) & 0x9d2c5680;
        y ^= (y << 15) & 0xefc60000;
        y ^=  y >>> 18;

        return y;
    }","  public void test6()  throws Throwable  {
      int[] intArray0 = new int[4];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      int int0 = mersenneTwister0.next();
}"
1756,"    public MersenneTwister(int[] seed) {
        setSeedInternal(seed);
    }","  public void test7()  throws Throwable  {
      MersenneTwister mersenneTwister0 = null;
      try {
        mersenneTwister0 = new MersenneTwister((int[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.MersenneTwister"", e);
      }
  }"
1757,"    public int next() {
        final int indexRm1 = TABLE.getIndexPred(index);

        final int vi = v[index];
        final int vi1 = v[TABLE.getIndexM1(index)];
        final int vi2 = v[TABLE.getIndexM2(index)];
        final int z0 = v[indexRm1];

        // the values below include the errata of the original article
        final int z1 = (vi ^ (vi << 16)) ^ (vi1 ^ (vi1 << 15));
        final int z2 = vi2 ^ (vi2 >>> 11);
        final int z3 = z1 ^ z2;
        final int z4 = (z0 ^ (z0 << 2)) ^ (z1 ^ (z1 << 18)) ^ (z2 << 28) ^ (z3 ^ ((z3 << 5) & 0xda442d24));

        v[index] = z3;
        v[indexRm1] = z4;
        index = indexRm1;

        return z4;
    }","  public void test0()  throws Throwable  {
      int[] intArray0 = new int[4];
      Well512a well512a0 = new Well512a(intArray0);
      int int0 = well512a0.next();
}"
1758,"    public int next() {
        final int indexRm1 = TABLE.getIndexPred(index);

        final int vi = v[index];
        final int vi1 = v[TABLE.getIndexM1(index)];
        final int vi2 = v[TABLE.getIndexM2(index)];
        final int z0 = v[indexRm1];

        // the values below include the errata of the original article
        final int z1 = (vi ^ (vi << 16)) ^ (vi1 ^ (vi1 << 15));
        final int z2 = vi2 ^ (vi2 >>> 11);
        final int z3 = z1 ^ z2;
        final int z4 = (z0 ^ (z0 << 2)) ^ (z1 ^ (z1 << 18)) ^ (z2 << 28) ^ (z3 ^ ((z3 << 5) & 0xda442d24));

        v[index] = z3;
        v[indexRm1] = z4;
        index = indexRm1;

        return z4;
    }","  public void test1()  throws Throwable  {
      int[] intArray0 = new int[4];
      Well512a well512a0 = new Well512a(intArray0);
      int int0 = well512a0.next();
      int int1 = well512a0.next();
}"
1759,"    public int next() {
        final int indexRm1 = TABLE.getIndexPred(index);

        final int vi = v[index];
        final int vi1 = v[TABLE.getIndexM1(index)];
        final int vi2 = v[TABLE.getIndexM2(index)];
        final int z0 = v[indexRm1];

        // the values below include the errata of the original article
        final int z1 = (vi ^ (vi << 16)) ^ (vi1 ^ (vi1 << 15));
        final int z2 = vi2 ^ (vi2 >>> 11);
        final int z3 = z1 ^ z2;
        final int z4 = (z0 ^ (z0 << 2)) ^ (z1 ^ (z1 << 18)) ^ (z2 << 28) ^ (z3 ^ ((z3 << 5) & 0xda442d24));

        v[index] = z3;
        v[indexRm1] = z4;
        index = indexRm1;

        return z4;
    }","  public void test2()  throws Throwable  {
      int[] intArray0 = new int[26];
      intArray0[7] = 397;
      Well512a well512a0 = new Well512a(intArray0);
      well512a0.next();
      well512a0.next();
      well512a0.nextBoolean();
      long long0 = well512a0.nextLong();
}"
1760,"    public int next() {
        final int indexRm1 = TABLE.getIndexPred(index);

        final int vi = v[index];
        final int vi1 = v[TABLE.getIndexM1(index)];
        final int vi2 = v[TABLE.getIndexM2(index)];
        final int z0 = v[indexRm1];

        // the values below include the errata of the original article
        final int z1 = (vi ^ (vi << 16)) ^ (vi1 ^ (vi1 << 15));
        final int z2 = vi2 ^ (vi2 >>> 11);
        final int z3 = z1 ^ z2;
        final int z4 = (z0 ^ (z0 << 2)) ^ (z1 ^ (z1 << 18)) ^ (z2 << 28) ^ (z3 ^ ((z3 << 5) & 0xda442d24));

        v[index] = z3;
        v[indexRm1] = z4;
        index = indexRm1;

        return z4;
    }","  public void test3()  throws Throwable  {
      int[] intArray0 = new int[26];
      intArray0[7] = 397;
      Well512a well512a0 = new Well512a(intArray0);
      well512a0.next();
      well512a0.next();
      well512a0.nextBoolean();
      long long0 = well512a0.nextLong();
      well512a0.next();
      int int0 = well512a0.next();
}"
1761,"    public int next() {
        final int indexRm1 = TABLE.getIndexPred(index);

        final int vi = v[index];
        final int vi1 = v[TABLE.getIndexM1(index)];
        final int vi2 = v[TABLE.getIndexM2(index)];
        final int z0 = v[indexRm1];

        // the values below include the errata of the original article
        final int z1 = (vi ^ (vi << 16)) ^ (vi1 ^ (vi1 << 15));
        final int z2 = vi2 ^ (vi2 >>> 11);
        final int z3 = z1 ^ z2;
        final int z4 = (z0 ^ (z0 << 2)) ^ (z1 ^ (z1 << 18)) ^ (z2 << 28) ^ (z3 ^ ((z3 << 5) & 0xda442d24));

        v[index] = z3;
        v[indexRm1] = z4;
        index = indexRm1;

        return z4;
    }","  public void test4()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well512a well512a0 = new Well512a(intArray0);
      well512a0.index = 255;
      // Undeclared exception!
      try { 
        well512a0.next();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractWell$IndexTable"", e);
      }
  }"
1762,"    public Well512a(int[] seed) {
        super(K, seed);
    }","  public void test5()  throws Throwable  {
      Well512a well512a0 = null;
      try {
        well512a0 = new Well512a((int[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractWell"", e);
      }
  }"
1763,"    public void nextBytes(byte[] bytes) {
        nextBytesFill(this, bytes, 0, bytes.length);
    }","  public void test0()  throws Throwable  {
      int[] intArray0 = new int[1];
      KISSRandom kISSRandom0 = new KISSRandom(intArray0);
      byte[] byteArray0 = new byte[3];
      kISSRandom0.nextBytes(byteArray0);
}"
1764,"    public void nextBytes(byte[] bytes) {
        nextBytesFill(this, bytes, 0, bytes.length);
    }","  public void test1()  throws Throwable  {
      int[] intArray0 = new int[1];
      MultiplyWithCarry256 multiplyWithCarry256_0 = new MultiplyWithCarry256(intArray0);
      byte[] byteArray0 = multiplyWithCarry256_0.getStateInternal();
      multiplyWithCarry256_0.nextBytes(byteArray0, 5, 5);
}"
1765,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, 8);
        final int[] state = NumberFactory.makeIntArray(c[0]);
        booleanSource  = state[0];
        booleanBitMask = state[1];
        super.setStateInternal(c[1]);
    }","  public void test2()  throws Throwable  {
      int[] intArray0 = new int[1];
      KISSRandom kISSRandom0 = new KISSRandom(intArray0);
      byte[] byteArray0 = kISSRandom0.getStateInternal();
      kISSRandom0.setStateInternal(byteArray0);
}"
1766,"    static void nextBytesFill(RandomIntSource source,
                              byte[] bytes,
                              int start,
                              int len) {
        int index = start; // Index of first insertion.

        // Index of first insertion plus multiple of 4 part of length
        // (i.e. length with 2 least significant bits unset).
        final int indexLoopLimit = index + (len & 0x7ffffffc);

        // Start filling in the byte array, 4 bytes at a time.
        while (index < indexLoopLimit) {
            final int random = source.next();
            bytes[index++] = (byte) random;
            bytes[index++] = (byte) (random >>> 8);
            bytes[index++] = (byte) (random >>> 16);
            bytes[index++] = (byte) (random >>> 24);
        }

        final int indexLimit = start + len; // Index of last insertion + 1.

        // Fill in the remaining bytes.
        if (index < indexLimit) {
            int random = source.next();
            while (true) {
                bytes[index++] = (byte) random;
                if (index < indexLimit) {
                    random >>>= 8;
                } else {
                    break;
                }
            }
        }
    }","  public void test3()  throws Throwable  {
      int[] intArray0 = new int[1];
      Well44497b well44497b0 = new Well44497b(intArray0);
      byte[] byteArray0 = new byte[1];
      IntProvider.nextBytesFill(well44497b0, byteArray0, 2147483644, 605);
}"
1767,"    public long nextLong() {
        return NumberFactory.makeLong(nextInt(), nextInt());
    }","  public void test4()  throws Throwable  {
      XoShiRo128PlusPlus xoShiRo128PlusPlus0 = new XoShiRo128PlusPlus(0, 0, 0, 0);
      long long0 = xoShiRo128PlusPlus0.nextLong();
}"
1768,"    public long nextLong() {
        return NumberFactory.makeLong(nextInt(), nextInt());
    }","  public void test5()  throws Throwable  {
      XoShiRo128Plus xoShiRo128Plus0 = new XoShiRo128Plus((-548), (-711), 256, 0);
      long long0 = xoShiRo128Plus0.nextLong();
}"
1769,"    public int nextInt() {
        return next();
    }","  public void test6()  throws Throwable  {
      XoShiRo128PlusPlus xoShiRo128PlusPlus0 = new XoShiRo128PlusPlus(0, 0, 0, 0);
      int int0 = xoShiRo128PlusPlus0.nextInt();
}"
1770,"    public int nextInt() {
        return next();
    }","  public void test7()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-44);
      Well512a well512a0 = new Well512a(intArray0);
      int int0 = well512a0.nextInt();
}"
1771,"    public double nextDouble() {
        return NumberFactory.makeDouble(nextInt(), nextInt());
    }","  public void test8()  throws Throwable  {
      XoRoShiRo64StarStar xoRoShiRo64StarStar0 = new XoRoShiRo64StarStar(0, 0);
      double double0 = xoRoShiRo64StarStar0.nextDouble();
}"
1772,"    public double nextDouble() {
        return NumberFactory.makeDouble(nextInt(), nextInt());
    }","  public void test9()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well512a well512a0 = new Well512a(intArray0);
      double double0 = well512a0.nextDouble();
}"
1773,"    protected byte[] getStateInternal() {
        final int[] state = {booleanSource,
                             booleanBitMask};
        return composeStateInternal(NumberFactory.makeByteArray(state),
                                    super.getStateInternal());
    }","  public void test10()  throws Throwable  {
      int[] intArray0 = new int[1];
      XoShiRo128PlusPlus xoShiRo128PlusPlus0 = new XoShiRo128PlusPlus(intArray0);
      byte[] byteArray0 = xoShiRo128PlusPlus0.getStateInternal();
}"
1774,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, 8);
        final int[] state = NumberFactory.makeIntArray(c[0]);
        booleanSource  = state[0];
        booleanBitMask = state[1];
        super.setStateInternal(c[1]);
    }","  public void test11()  throws Throwable  {
      XoShiRo128PlusPlus xoShiRo128PlusPlus0 = new XoShiRo128PlusPlus((-3318), 3773, 16, 3773);
      // Undeclared exception!
      try { 
        xoShiRo128PlusPlus0.setStateInternal((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1775,"    protected void setStateInternal(byte[] s) {
        final byte[][] c = splitStateInternal(s, 8);
        final int[] state = NumberFactory.makeIntArray(c[0]);
        booleanSource  = state[0];
        booleanBitMask = state[1];
        super.setStateInternal(c[1]);
    }","  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(1234567);
      JenkinsSmallFast32 jenkinsSmallFast32_0 = new JenkinsSmallFast32(integer0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        jenkinsSmallFast32_0.setStateInternal(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // State size must be larger than 16 but was 0
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1776,"    public long nextLong() {
        return NumberFactory.makeLong(nextInt(), nextInt());
    }","  public void test13()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well44497b well44497b0 = new Well44497b(intArray0);
      well44497b0.index = 1861;
      // Undeclared exception!
      try { 
        well44497b0.nextLong();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1861
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractWell$IndexTable"", e);
      }
  }"
1777,"    public int nextInt() {
        return next();
    }","  public void test14()  throws Throwable  {
      int[] intArray0 = new int[3];
      Well19937c well19937c0 = new Well19937c(intArray0);
      well19937c0.index = (-1279);
      // Undeclared exception!
      try { 
        well19937c0.nextInt();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1279
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractWell$IndexTable"", e);
      }
  }"
1778,"    public float nextFloat() {
        return NumberFactory.makeFloat(nextInt());
    }","  public void test15()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well44497a well44497a0 = new Well44497a(intArray0);
      well44497a0.index = 2504;
      // Undeclared exception!
      try { 
        well44497a0.nextFloat();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2504
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractWell$IndexTable"", e);
      }
  }"
1779,"    public double nextDouble() {
        return NumberFactory.makeDouble(nextInt(), nextInt());
    }","  public void test16()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well44497b well44497b0 = new Well44497b(intArray0);
      well44497b0.index = 1861;
      // Undeclared exception!
      try { 
        well44497b0.nextDouble();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1861
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractWell$IndexTable"", e);
      }
  }"
1780,"    static void nextBytesFill(RandomIntSource source,
                              byte[] bytes,
                              int start,
                              int len) {
        int index = start; // Index of first insertion.

        // Index of first insertion plus multiple of 4 part of length
        // (i.e. length with 2 least significant bits unset).
        final int indexLoopLimit = index + (len & 0x7ffffffc);

        // Start filling in the byte array, 4 bytes at a time.
        while (index < indexLoopLimit) {
            final int random = source.next();
            bytes[index++] = (byte) random;
            bytes[index++] = (byte) (random >>> 8);
            bytes[index++] = (byte) (random >>> 16);
            bytes[index++] = (byte) (random >>> 24);
        }

        final int indexLimit = start + len; // Index of last insertion + 1.

        // Fill in the remaining bytes.
        if (index < indexLimit) {
            int random = source.next();
            while (true) {
                bytes[index++] = (byte) random;
                if (index < indexLimit) {
                    random >>>= 8;
                } else {
                    break;
                }
            }
        }
    }","  public void test17()  throws Throwable  {
      int[] intArray0 = new int[1];
      XoShiRo128Plus xoShiRo128Plus0 = new XoShiRo128Plus(intArray0);
      // Undeclared exception!
      try { 
        IntProvider.nextBytesFill(xoShiRo128Plus0, (byte[]) null, 0, (-272236544));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.IntProvider"", e);
      }
  }"
1781,"    static void nextBytesFill(RandomIntSource source,
                              byte[] bytes,
                              int start,
                              int len) {
        int index = start; // Index of first insertion.

        // Index of first insertion plus multiple of 4 part of length
        // (i.e. length with 2 least significant bits unset).
        final int indexLoopLimit = index + (len & 0x7ffffffc);

        // Start filling in the byte array, 4 bytes at a time.
        while (index < indexLoopLimit) {
            final int random = source.next();
            bytes[index++] = (byte) random;
            bytes[index++] = (byte) (random >>> 8);
            bytes[index++] = (byte) (random >>> 16);
            bytes[index++] = (byte) (random >>> 24);
        }

        final int indexLimit = start + len; // Index of last insertion + 1.

        // Fill in the remaining bytes.
        if (index < indexLimit) {
            int random = source.next();
            while (true) {
                bytes[index++] = (byte) random;
                if (index < indexLimit) {
                    random >>>= 8;
                } else {
                    break;
                }
            }
        }
    }","  public void test18()  throws Throwable  {
      XoRoShiRo64Star xoRoShiRo64Star0 = new XoRoShiRo64Star(Integer.MAX_VALUE, Integer.MAX_VALUE);
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        IntProvider.nextBytesFill(xoRoShiRo64Star0, byteArray0, 0, 16);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException(""org.apache.commons.rng.core.source32.IntProvider"", e);
      }
  }"
1782,"    public void nextBytes(byte[] bytes) {
        nextBytesFill(this, bytes, 0, bytes.length);
    }","  public void test19()  throws Throwable  {
      int[] intArray0 = new int[5];
      XoRoShiRo64Star xoRoShiRo64Star0 = new XoRoShiRo64Star(intArray0);
      // Undeclared exception!
      try { 
        xoRoShiRo64Star0.nextBytes((byte[]) null, 688, 313906775);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.IntProvider"", e);
      }
  }"
1783,"    public void nextBytes(byte[] bytes) {
        nextBytesFill(this, bytes, 0, bytes.length);
    }","  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(4);
      JenkinsSmallFast32 jenkinsSmallFast32_0 = new JenkinsSmallFast32(integer0);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        jenkinsSmallFast32_0.nextBytes(byteArray0, (int) (byte)0, 1233);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // 1233 is out of interval [0, 6]
         //
         verifyException(""org.apache.commons.rng.core.BaseProvider"", e);
      }
  }"
1784,"    public void nextBytes(byte[] bytes) {
        nextBytesFill(this, bytes, 0, bytes.length);
    }","  public void test21()  throws Throwable  {
      int[] intArray0 = new int[9];
      Well19937c well19937c0 = new Well19937c(intArray0);
      well19937c0.index = 2626;
      byte[] byteArray0 = well19937c0.getStateInternal();
      // Undeclared exception!
      try { 
        well19937c0.nextBytes(byteArray0, 8, 52);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2626
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractWell$IndexTable"", e);
      }
  }"
1785,"    public void nextBytes(byte[] bytes) {
        nextBytesFill(this, bytes, 0, bytes.length);
    }","  public void test22()  throws Throwable  {
      int[] intArray0 = new int[19];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      // Undeclared exception!
      try { 
        iSAACRandom0.nextBytes((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.rng.core.source32.IntProvider"", e);
      }
  }"
1786,"    public void nextBytes(byte[] bytes) {
        nextBytesFill(this, bytes, 0, bytes.length);
    }","  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      int[] intArray0 = new int[4];
      Well512a well512a0 = new Well512a(intArray0);
      well512a0.index = (int) (byte)121;
      // Undeclared exception!
      try { 
        well512a0.nextBytes(byteArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 121
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractWell$IndexTable"", e);
      }
  }"
1787,"    public boolean nextBoolean() {
        // Shift up. This will eventually overflow and become zero.
        booleanBitMask <<= 1;
        // The mask will either contain a single bit or none.
        if (booleanBitMask == 0) {
            // Set the least significant bit
            booleanBitMask = 1;
            // Get the next value
            booleanSource = nextInt();
        }
        // Return if the bit is set
        return (booleanSource & booleanBitMask) != 0;
    }","  public void test24()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well19937a well19937a0 = new Well19937a(intArray0);
      well19937a0.index = 1061;
      // Undeclared exception!
      try { 
        well19937a0.nextBoolean();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1061
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractWell$IndexTable"", e);
      }
  }"
1788,"    public int nextInt() {
        return next();
    }","  public void test25()  throws Throwable  {
      int[] intArray0 = new int[4];
      Well512a well512a0 = new Well512a(intArray0);
      int int0 = well512a0.nextInt();
}"
1789,"    public boolean nextBoolean() {
        // Shift up. This will eventually overflow and become zero.
        booleanBitMask <<= 1;
        // The mask will either contain a single bit or none.
        if (booleanBitMask == 0) {
            // Set the least significant bit
            booleanBitMask = 1;
            // Get the next value
            booleanSource = nextInt();
        }
        // Return if the bit is set
        return (booleanSource & booleanBitMask) != 0;
    }","  public void test26()  throws Throwable  {
      int[] intArray0 = new int[12];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      boolean boolean0 = mersenneTwister0.nextBoolean();
      boolean boolean1 = mersenneTwister0.nextBoolean();
}"
1790,"    public boolean nextBoolean() {
        // Shift up. This will eventually overflow and become zero.
        booleanBitMask <<= 1;
        // The mask will either contain a single bit or none.
        if (booleanBitMask == 0) {
            // Set the least significant bit
            booleanBitMask = 1;
            // Get the next value
            booleanSource = nextInt();
        }
        // Return if the bit is set
        return (booleanSource & booleanBitMask) != 0;
    }","  public void test27()  throws Throwable  {
      int[] intArray0 = new int[12];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      boolean boolean0 = mersenneTwister0.nextBoolean();
      boolean boolean1 = mersenneTwister0.nextBoolean();
}"
1791,"    public void nextBytes(byte[] bytes) {
        nextBytesFill(this, bytes, 0, bytes.length);
    }","  public void test28()  throws Throwable  {
      int[] intArray0 = new int[23];
      MultiplyWithCarry256 multiplyWithCarry256_0 = new MultiplyWithCarry256(intArray0);
      byte[] byteArray0 = multiplyWithCarry256_0.getStateInternal();
      multiplyWithCarry256_0.nextBytes(byteArray0, 12, 12);
}"
1792,"    protected void resetCachedState() {
        booleanSource = 0;
        booleanBitMask = 0;
    }","  public void test29()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well44497b well44497b0 = new Well44497b(intArray0);
      well44497b0.resetCachedState();
  }"
1793,,"  public void test30()  throws Throwable  {
      XoShiRo128StarStar xoShiRo128StarStar0 = new XoShiRo128StarStar(0, 0, 12, 0);
      XoShiRo128StarStar xoShiRo128StarStar1 = new XoShiRo128StarStar(xoShiRo128StarStar0);
}"
1794,"    public void nextBytes(byte[] bytes) {
        nextBytesFill(this, bytes, 0, bytes.length);
    }","  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      int[] intArray0 = new int[15];
      Well512a well512a0 = new Well512a(intArray0);
      well512a0.nextBytes(byteArray0);
}"
1795,"    public float nextFloat() {
        return NumberFactory.makeFloat(nextInt());
    }","  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      int[] intArray0 = new int[15];
      Well512a well512a0 = new Well512a(intArray0);
      well512a0.nextBytes(byteArray0);
      float float0 = well512a0.nextFloat();
}"
1796,"    public float nextFloat() {
        return NumberFactory.makeFloat(nextInt());
    }","  public void test33()  throws Throwable  {
      int[] intArray0 = new int[15];
      Well512a well512a0 = new Well512a(intArray0);
      float float0 = well512a0.nextFloat();
}"
1797,"    public long nextLong() {
        return NumberFactory.makeLong(nextInt(), nextInt());
    }","  public void test34()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well44497b well44497b0 = new Well44497b(intArray0);
      long long0 = well44497b0.nextLong();
}"
1798,"    public Well44497a(int[] seed) {
        super(K, seed);
    }","  public void test0()  throws Throwable  {
      int[] intArray0 = new int[1];
      Well44497a well44497a0 = new Well44497a(intArray0);
      float float0 = well44497a0.nextFloat();
}"
1799,"    public int next() {
        final int indexRm1 = TABLE.getIndexPred(index);
        final int indexRm2 = TABLE.getIndexPred2(index);

        final int v0 = v[index];
        final int vM1 = v[TABLE.getIndexM1(index)];
        final int vM2 = v[TABLE.getIndexM2(index)];
        final int vM3 = v[TABLE.getIndexM3(index)];

        // the values below include the errata of the original article
        final int z0 = (0xFFFF8000 & v[indexRm1]) ^ (0x00007FFF & v[indexRm2]);
        final int z1 = (v0 ^ (v0 << 24)) ^ (vM1 ^ (vM1 >>> 30));
        final int z2 = (vM2 ^ (vM2 << 10)) ^ (vM3 << 26);
        final int z3 = z1 ^ z2;
        final int z2Prime = ((z2 << 9) ^ (z2 >>> 23)) & 0xfbffffff;
        final int z2Second = ((z2 & 0x00020000) == 0) ? z2Prime : (z2Prime ^ 0xb729fcec);
        final int z4 = z0 ^ (z1 ^ (z1 >>> 20)) ^ z2Second ^ z3;

        v[index] = z3;
        v[indexRm1] = z4;
        v[indexRm2] &= 0xFFFF8000;
        index = indexRm1;

        return z4;
    }","  public void test1()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 8;
      Well44497a well44497a0 = new Well44497a(intArray0);
      int int0 = well44497a0.next();
}"
1800,"    public int next() {
        final int indexRm1 = TABLE.getIndexPred(index);
        final int indexRm2 = TABLE.getIndexPred2(index);

        final int v0 = v[index];
        final int vM1 = v[TABLE.getIndexM1(index)];
        final int vM2 = v[TABLE.getIndexM2(index)];
        final int vM3 = v[TABLE.getIndexM3(index)];

        // the values below include the errata of the original article
        final int z0 = (0xFFFF8000 & v[indexRm1]) ^ (0x00007FFF & v[indexRm2]);
        final int z1 = (v0 ^ (v0 << 24)) ^ (vM1 ^ (vM1 >>> 30));
        final int z2 = (vM2 ^ (vM2 << 10)) ^ (vM3 << 26);
        final int z3 = z1 ^ z2;
        final int z2Prime = ((z2 << 9) ^ (z2 >>> 23)) & 0xfbffffff;
        final int z2Second = ((z2 & 0x00020000) == 0) ? z2Prime : (z2Prime ^ 0xb729fcec);
        final int z4 = z0 ^ (z1 ^ (z1 >>> 20)) ^ z2Second ^ z3;

        v[index] = z3;
        v[indexRm1] = z4;
        v[indexRm2] &= 0xFFFF8000;
        index = indexRm1;

        return z4;
    }","  public void test2()  throws Throwable  {
      int[] intArray0 = new int[3];
      Well44497a well44497a0 = new Well44497a(intArray0);
      well44497a0.index = 2876;
      // Undeclared exception!
      try { 
        well44497a0.next();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2876
         //
         verifyException(""org.apache.commons.rng.core.source32.AbstractWell$IndexTable"", e);
      }
  }"
1801,"    public Well44497a(int[] seed) {
        super(K, seed);
    }","  public void test3()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 8;
      Well44497a well44497a0 = new Well44497a(intArray0);
      float float0 = well44497a0.nextFloat();
}"
1802,"    public int next() {
        final int indexRm1 = TABLE.getIndexPred(index);
        final int indexRm2 = TABLE.getIndexPred2(index);

        final int v0 = v[index];
        final int vM1 = v[TABLE.getIndexM1(index)];
        final int vM2 = v[TABLE.getIndexM2(index)];
        final int vM3 = v[TABLE.getIndexM3(index)];

        // the values below include the errata of the original article
        final int z0 = (0xFFFF8000 & v[indexRm1]) ^ (0x00007FFF & v[indexRm2]);
        final int z1 = (v0 ^ (v0 << 24)) ^ (vM1 ^ (vM1 >>> 30));
        final int z2 = (vM2 ^ (vM2 << 10)) ^ (vM3 << 26);
        final int z3 = z1 ^ z2;
        final int z2Prime = ((z2 << 9) ^ (z2 >>> 23)) & 0xfbffffff;
        final int z2Second = ((z2 & 0x00020000) == 0) ? z2Prime : (z2Prime ^ 0xb729fcec);
        final int z4 = z0 ^ (z1 ^ (z1 >>> 20)) ^ z2Second ^ z3;

        v[index] = z3;
        v[indexRm1] = z4;
        v[indexRm2] &= 0xFFFF8000;
        index = indexRm1;

        return z4;
    }","  public void test4()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 8;
      Well44497a well44497a0 = new Well44497a(intArray0);
      float float0 = well44497a0.nextFloat();
      int int0 = well44497a0.next();
}"
1803,"    public Well44497a(int[] seed) {
        super(K, seed);
    }","  public void test5()  throws Throwable  {
      Well44497a well44497a0 = null;
      try {
        well44497a0 = new Well44497a((int[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
