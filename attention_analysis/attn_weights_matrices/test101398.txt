101398
Test: public void test315() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test315"); org.joda.time.format.DateTimeFormatterBuilder.StringLiteral stringLiteral1 = new org.joda.time.format.DateTimeFormatterBuilder.StringLiteral("57600"); java.lang.StringBuffer stringBuffer2 = null; org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstanceUTC(); org.joda.time.Chronology chronology6 = gregorianChronology5.withUTC(); java.lang.String str7 = gregorianChronology5.toString(); org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' '); long long13 = dateTimeZone10.adjustOffset((long) 1, false); org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 10904, dateTimeZone10); org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(); int int16 = mutableDateTime15.getDayOfMonth(); mutableDateTime15.addSeconds(0); org.joda.time.Chronology chronology19 = mutableDateTime15.getChronology(); org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, (org.joda.time.ReadableInstant) mutableDateTime15); org.joda.time.Chronology chronology21 = gregorianChronology5.withZone(dateTimeZone10); org.joda.time.DurationField durationField22 = gregorianChronology5.centuries(); boolean boolean23 = gJChronology4.equals((java.lang.Object) gregorianChronology5); org.joda.time.DateTimeZone dateTimeZone24 = gJChronology4.getZone(); org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstanceUTC(); int int27 = julianChronology26.getMinimumDaysInFirstWeek(); org.joda.time.DateTimeField dateTimeField28 = julianChronology26.hourOfDay(); org.joda.time.DateTimeZone dateTimeZone29 = julianChronology26.getZone(); org.joda.time.Chronology chronology30 = null; org.joda.time.ReadableInterval readableInterval31 = null; org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval31); org.joda.time.DateTimeField dateTimeField33 = chronology32.weekyearOfCentury(); org.joda.time.DateTimeField dateTimeField34 = chronology32.secondOfDay(); java.lang.String str36 = dateTimeField34.getAsShortText(0L); org.joda.time.field.SkipDateTimeField skipDateTimeField37 = new org.joda.time.field.SkipDateTimeField(chronology30, dateTimeField34); long long40 = skipDateTimeField37.getDifferenceAsLong((long) 9, 0L); org.joda.time.DurationField durationField41 = skipDateTimeField37.getRangeDurationField(); java.util.Locale locale43 = null; java.lang.String str44 = skipDateTimeField37.getAsShortText((long) 191, locale43); org.joda.time.Chronology chronology45 = null; org.joda.time.ReadableInterval readableInterval46 = null; org.joda.time.Chronology chronology47 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval46); org.joda.time.DateTimeField dateTimeField48 = chronology47.weekyearOfCentury(); org.joda.time.DateTimeField dateTimeField49 = chronology47.secondOfDay(); java.lang.String str51 = dateTimeField49.getAsShortText(0L); org.joda.time.field.SkipDateTimeField skipDateTimeField52 = new org.joda.time.field.SkipDateTimeField(chronology45, dateTimeField49); long long55 = skipDateTimeField52.getDifferenceAsLong((long) 9, 0L); org.joda.time.DurationField durationField56 = skipDateTimeField52.getRangeDurationField(); org.joda.time.MutableDateTime mutableDateTime57 = org.joda.time.MutableDateTime.now(); org.joda.time.DateTime dateTime58 = mutableDateTime57.toDateTime(); org.joda.time.DateTime dateTime60 = dateTime58.withMinuteOfHour((int) (short) 1); org.joda.time.DateTime dateTime62 = dateTime60.plusHours(10); int int63 = dateTime62.getSecondOfDay(); org.joda.time.LocalDateTime localDateTime64 = dateTime62.toLocalDateTime(); int[] intArray71 = new int[] { 288, 10906, 32, 10905, '#', (short) 0 }; int int72 = skipDateTimeField52.getMinimumValue((org.joda.time.ReadablePartial) localDateTime64, intArray71); java.util.Locale locale74 = null; java.lang.String str75 = skipDateTimeField52.getAsShortText(10909, locale74); org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.centuryOfEra(); org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber unpaddedNumber80 = new org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType77, (int) (short) 100, true); org.joda.time.Chronology chronology82 = null; java.util.Locale locale83 = null; org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology82, locale83); int int87 = unpaddedNumber80.parseInto(dateTimeParserBucket84, "2021-07-09T17:49:08.298-07:00", 10862); java.util.Locale locale88 = dateTimeParserBucket84.getLocale(); java.lang.String str89 = skipDateTimeField52.getAsShortText(0, locale88); int int90 = skipDateTimeField37.getMaximumShortTextLength(locale88); java.text.DateFormatSymbols dateFormatSymbols91 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale88); try { stringLiteral1.printTo(stringBuffer2, 0L, (org.joda.time.Chronology) gJChronology4, 10865571, dateTimeZone29, locale88); } catch (java.lang.NullPointerException e) { } }
Code: public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException("Instant must not be null"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); int defaultYear = chrono.year().get(instantLocal); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, defaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone != null) { instant.setZone(iZone); } return newPos; }
tensor([[0.0073, 0.0044, 0.0100,  ..., 0.0082, 0.0265, 0.0034],
        [0.0049, 0.0034, 0.0085,  ..., 0.0079, 0.0263, 0.0025],
        [0.0062, 0.0037, 0.0086,  ..., 0.0088, 0.0302, 0.0028],
        ...,
        [0.0048, 0.0027, 0.0092,  ..., 0.0068, 0.0312, 0.0028],
        [0.0056, 0.0029, 0.0073,  ..., 0.0071, 0.0302, 0.0018],
        [0.0053, 0.0040, 0.0100,  ..., 0.0118, 0.0199, 0.0030]])