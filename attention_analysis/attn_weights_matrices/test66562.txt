66562
Test: public void testEnumWithJsonValue() throws Exception { final Set<String> values = new TreeSet<String>(); MAPPER.acceptJsonFormatVisitor(TestEnumWithJsonValue.class, new JsonFormatVisitorWrapper.Base() { @Override public JsonStringFormatVisitor expectStringFormat(JavaType type) { return new JsonStringFormatVisitor() { @Override public void enumTypes(Set<String> enums) { values.addAll(enums); } @Override public void format(JsonValueFormat format) { } }; } }); TreeSet<String> exp = new TreeSet<String>(Arrays.asList( "value-A", "value-B", "value-C" )); }
Code: public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { if (_isInt) { visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { Class<?> h = handledType(); if (h == BigDecimal.class) { visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { visitor.expectNumberFormat(typeHint); } } }
tensor([[0.0214, 0.0172, 0.0233,  ..., 0.0088, 0.0088, 0.0088],
        [0.0175, 0.0141, 0.0225,  ..., 0.0079, 0.0079, 0.0079],
        [0.0163, 0.0136, 0.0258,  ..., 0.0060, 0.0060, 0.0060],
        ...,
        [0.0154, 0.0135, 0.0159,  ..., 0.0072, 0.0072, 0.0072],
        [0.0154, 0.0135, 0.0159,  ..., 0.0072, 0.0072, 0.0072],
        [0.0154, 0.0135, 0.0159,  ..., 0.0072, 0.0072, 0.0072]])