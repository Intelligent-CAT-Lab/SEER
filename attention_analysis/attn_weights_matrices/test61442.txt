61442
Test: public void test0823() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0823"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withNullString("hi!"); cSVFormat2.validate(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withNullString("\r\n"); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withCommentStart((java.lang.Character) '4'); java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false Header:[hi!, a\t0]", "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:true", "hi!\t\"a\t0\"", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withHeader(strArray12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat7.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withNullString("hi!"); cSVFormat18.validate(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat18.withCommentStart('\037'); java.lang.String str24 = cSVFormat18.toString(); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat18.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withIgnoreSurroundingSpaces(true); boolean boolean31 = cSVFormat28.getIgnoreSurroundingSpaces(); boolean boolean32 = cSVFormat7.equals((java.lang.Object) boolean31); }
Code: public String toString(){final StringBuilder sb = new StringBuilder();sb.append("Delimiter=<").append(delimiter).append('>');if (isEscaping()) {sb.append(' ');sb.append("Escape=<").append(escape).append('>');}if (isQuoting()) {sb.append(' ');;}if (isCommentingEnabled()) {sb.append(' ');sb.append("CommentStart=<").append(commentStart).append('>');}if (isNullHandling()) {sb.append(' ');;}if(recordSeparator != null) {sb.append(' ');sb.append("RecordSeparator=<").append(recordSeparator).append('>');}if (getIgnoreEmptyLines()) {sb.append(" EmptyLines:ignored");}if (true) {sb.append(" SurroundingSpaces:ignored");}sb.append(" SkipHeaderRecord:").append(skipHeaderRecord);if (header != null) {sb.append(' ');sb.append("Header:").append(Arrays.toString(header));}return sb.toString();}
tensor([[0.0222, 0.0281, 0.0148,  ..., 0.0467, 0.0377, 0.0250],
        [0.0232, 0.0270, 0.0149,  ..., 0.0460, 0.0391, 0.0252],
        [0.0178, 0.0324, 0.0136,  ..., 0.0407, 0.0310, 0.0252],
        ...,
        [0.0215, 0.0333, 0.0174,  ..., 0.0400, 0.0342, 0.0237],
        [0.0165, 0.0289, 0.0134,  ..., 0.0431, 0.0247, 0.0173],
        [0.0224, 0.0312, 0.0149,  ..., 0.0442, 0.0277, 0.0248]])