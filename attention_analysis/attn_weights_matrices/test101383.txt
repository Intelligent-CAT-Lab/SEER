101383
Test: public void test398() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test398"); org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (short) -1); java.util.Date date2 = localDate1.toDate(); org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) -1); java.util.Date date5 = localDate4.toDate(); int int6 = localDate1.compareTo((org.joda.time.ReadablePartial) localDate4); int int7 = localDate4.getEra(); org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.weeks(); int int9 = localDate4.indexOf(durationFieldType8); org.joda.time.DateMidnight dateMidnight10 = localDate4.toDateMidnight(); org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstance(); org.joda.time.DateTimeZone dateTimeZone12 = gregorianChronology11.getZone(); org.joda.time.DateTimeField dateTimeField13 = gregorianChronology11.clockhourOfDay(); org.joda.time.Chronology chronology14 = gregorianChronology11.withUTC(); org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now((org.joda.time.Chronology) gregorianChronology11); org.joda.time.Months months16 = org.joda.time.Months.FIVE; java.lang.String str17 = months16.toString(); int int18 = org.joda.time.base.BaseSingleFieldPeriod.between((org.joda.time.ReadablePartial) localDate4, (org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePeriod) months16); }
Code: protected static int between(ReadablePartial start, ReadablePartial end, ReadablePeriod zeroInstance) { if (start == null || end == null) { throw new IllegalArgumentException("ReadablePartial objects must not be null"); } if (start.size() != end.size()) { throw new IllegalArgumentException("ReadablePartial objects must have the same set of fields"); } for (int i = 0, isize = start.size(); i < isize; i++) { if (start.getFieldType(i) != end.getFieldType(i)) { throw new IllegalArgumentException("ReadablePartial objects must have the same set of fields"); } } if (DateTimeUtils.isContiguous(start) == false) { throw new IllegalArgumentException("ReadablePartial objects must be contiguous"); } Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC(); int[] values = chrono.get(zeroInstance, chrono.set(start, START_1972), chrono.set(end, START_1972)); return values[0]; }
tensor([[0.0107, 0.0194, 0.0035,  ..., 0.0078, 0.0109, 0.0025],
        [0.0114, 0.0199, 0.0036,  ..., 0.0068, 0.0089, 0.0037],
        [0.0104, 0.0290, 0.0030,  ..., 0.0072, 0.0107, 0.0022],
        ...,
        [0.0113, 0.0225, 0.0026,  ..., 0.0065, 0.0137, 0.0026],
        [0.0092, 0.0226, 0.0030,  ..., 0.0083, 0.0138, 0.0033],
        [0.0105, 0.0210, 0.0037,  ..., 0.0107, 0.0105, 0.0028]])