101436
Test: public void test_getOffsetFromLocal_NewYork_Autumn() { doTest_getOffsetFromLocal(11, 4, 0, 0, "2007-11-04T00:00:00.000-04:00", ZONE_NEW_YORK); doTest_getOffsetFromLocal(11, 4, 0,30, "2007-11-04T00:30:00.000-04:00", ZONE_NEW_YORK); doTest_getOffsetFromLocal(11, 4, 1, 0, "2007-11-04T01:00:00.000-04:00", ZONE_NEW_YORK); doTest_getOffsetFromLocal(11, 4, 1,30, "2007-11-04T01:30:00.000-04:00", ZONE_NEW_YORK); doTest_getOffsetFromLocal(11, 4, 2, 0, "2007-11-04T02:00:00.000-05:00", ZONE_NEW_YORK); doTest_getOffsetFromLocal(11, 4, 2,30, "2007-11-04T02:30:00.000-05:00", ZONE_NEW_YORK); doTest_getOffsetFromLocal(11, 4, 3, 0, "2007-11-04T03:00:00.000-05:00", ZONE_NEW_YORK); doTest_getOffsetFromLocal(11, 4, 3,30, "2007-11-04T03:30:00.000-05:00", ZONE_NEW_YORK); doTest_getOffsetFromLocal(11, 4, 4, 0, "2007-11-04T04:00:00.000-05:00", ZONE_NEW_YORK); doTest_getOffsetFromLocal(11, 4, 5, 0, "2007-11-04T05:00:00.000-05:00", ZONE_NEW_YORK); doTest_getOffsetFromLocal(11, 4, 6, 0, "2007-11-04T06:00:00.000-05:00", ZONE_NEW_YORK); doTest_getOffsetFromLocal(11, 4, 7, 0, "2007-11-04T07:00:00.000-05:00", ZONE_NEW_YORK); doTest_getOffsetFromLocal(11, 4, 8, 0, "2007-11-04T08:00:00.000-05:00", ZONE_NEW_YORK); }
Code: public int getOffsetFromLocal(long instantLocal){final int offsetLocal = getOffset(instantLocal);final long instantAdjusted = instantLocal - offsetLocal;final int offsetAdjusted = getOffset(instantAdjusted);if (offsetLocal != offsetAdjusted) {if ((offsetLocal - offsetAdjusted) < 1) {long nextLocal = nextTransition(instantAdjusted);long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);if (nextLocal != nextAdjusted) {return offsetLocal;}}} else if (offsetLocal > 0) {long prev = previousTransition(instantAdjusted);if (prev < instantAdjusted) {int offsetPrev = getOffset(prev);int diff = offsetPrev - offsetLocal;if (instantAdjusted - prev <= diff) {return offsetPrev;}}}return offsetAdjusted;}
tensor([[0.0096, 0.0056, 0.0197,  ..., 0.0324, 0.0092, 0.0103],
        [0.0065, 0.0045, 0.0172,  ..., 0.0375, 0.0082, 0.0090],
        [0.0104, 0.0041, 0.0217,  ..., 0.0251, 0.0102, 0.0104],
        ...,
        [0.0071, 0.0042, 0.0165,  ..., 0.0330, 0.0103, 0.0116],
        [0.0076, 0.0049, 0.0179,  ..., 0.0325, 0.0088, 0.0107],
        [0.0089, 0.0045, 0.0191,  ..., 0.0331, 0.0089, 0.0105]])