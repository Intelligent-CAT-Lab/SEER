65048
Test: public void testSimpleEnum() throws Exception { final Set<String> values = new TreeSet<String>(); ObjectWriter w = MAPPER.writer(SerializationFeature.WRITE_ENUMS_USING_TO_STRING); w.acceptJsonFormatVisitor(TestEnum.class, new JsonFormatVisitorWrapper.Base() { @Override public JsonStringFormatVisitor expectStringFormat(JavaType type) { return new JsonStringFormatVisitor() { @Override public void enumTypes(Set<String> enums) { values.addAll(enums); } @Override public void format(JsonValueFormat format) { } }; } }); TreeSet<String> exp = new TreeSet<String>(Arrays.asList( "ToString:A", "ToString:B", "ToString:C" )); }
Code: public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { if (_isInt) { visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { if (((Class<?>) handledType()) == BigDecimal.class) { visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL); } else { visitor.expectNumberFormat(typeHint); } } }
tensor([[0.0234, 0.0186, 0.0260,  ..., 0.0094, 0.0094, 0.0094],
        [0.0193, 0.0154, 0.0253,  ..., 0.0084, 0.0084, 0.0084],
        [0.0181, 0.0149, 0.0293,  ..., 0.0064, 0.0064, 0.0064],
        ...,
        [0.0168, 0.0147, 0.0175,  ..., 0.0077, 0.0077, 0.0077],
        [0.0168, 0.0147, 0.0175,  ..., 0.0077, 0.0077, 0.0077],
        [0.0168, 0.0147, 0.0175,  ..., 0.0077, 0.0077, 0.0077]])