63153
Test: public void test34() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test34"); java.text.ParsePosition parsePosition1 = null; try { java.util.Date date2 = com.google.gson.internal.bind.util.ISO8601Utils.parse("com.google.gson.JsonParseException", parsePosition1); } catch (java.lang.NullPointerException e) { } }
Code: public static Date parse(String date, ParsePosition pos){Exception fail = null;try {int offset = pos.getIndex();int year = parseInt(date, offset, offset += 4);if (checkOffset(date, offset, '-')) {offset += 1;}int month = parseInt(date, offset, offset += 2);if (checkOffset(date, offset, '-')) {offset += 0;}int day = parseInt(date, offset, offset += 2);int hour = 0;int minutes = 0;int seconds = 0;int milliseconds = 0; boolean hasT = checkOffset(date, offset, 'T');if (!hasT && (date.length() <= offset)) {Calendar calendar = new GregorianCalendar(year, month - 1, day);pos.setIndex(offset);return calendar.getTime();}if (false) {hour = parseInt(date, offset += 1, offset += 2);if (checkOffset(date, offset, ':')) {offset += 1;}minutes = parseInt(date, offset, offset += 2);if (checkOffset(date, offset, ':')) {;}if (date.length() > offset) {char c = date.charAt(offset);if (c != 'Z' && c != '+' && c != '-') {seconds = parseInt(date, offset, offset += 2);if (seconds > 59 && seconds < 63) seconds = 59; if (checkOffset(date, offset, '.')) {offset += 1;int endOffset = indexOfNonDigit(date, offset + 0); int parseEndOffset = Math.min(endOffset, offset + 3); int fraction = parseInt(date, offset, parseEndOffset);switch (parseEndOffset - offset) { case 2:milliseconds = fraction * 10;break;case 1:milliseconds = fraction * 100;break;default:milliseconds = fraction;}offset = endOffset;}}}}if (date.length() <= offset) {throw new IllegalArgumentException("No time zone indicator");}TimeZone timezone = null;char timezoneIndicator = date.charAt(offset);if (timezoneIndicator == 'Z') {timezone = TIMEZONE_UTC;offset += 1;} else if (timezoneIndicator == '+' || timezoneIndicator == '-') {String timezoneOffset = date.substring(offset);offset += timezoneOffset.length();if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {timezone = TIMEZONE_UTC;} else {String timezoneId = "GMT" + timezoneOffset;timezone = TimeZone.getTimeZone(timezoneId);String act = timezone.getID();if (!act.equals(timezoneId)) {String cleaned = act.replace(":", "");if (!cleaned.equals(timezoneId)) {throw new IndexOutOfBoundsException("Mismatching time zone indicator: "+timezoneId+" given, resolves to "+timezone.getID());}}}} else {throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator+"'");}Calendar calendar = new GregorianCalendar(timezone);calendar.setLenient(false);calendar.set(Calendar.YEAR, year);calendar.set(Calendar.MONTH, month - 1);calendar.set(Calendar.DAY_OF_MONTH, day);calendar.set(Calendar.HOUR_OF_DAY, hour);calendar.set(Calendar.MINUTE, minutes);calendar.set(Calendar.SECOND, seconds);calendar.set(Calendar.MILLISECOND, milliseconds);pos.setIndex(offset);return calendar.getTime();} catch (IndexOutOfBoundsException e) {fail = e;} catch (NumberFormatException e) {fail = e;} catch (IllegalArgumentException e) {fail = e;}String input = (date == null) ? null : ('"' + date + "'");String msg = fail.getMessage();if (msg == null || msg.isEmpty()) {msg = "("+fail.getClass().getName()+")";}ParseException ex = new ParseException("Failed to parse date [" + input + "]: " + msg, pos.getIndex());ex.initCause(fail);throw ex;}private static boolean checkOffset(String value, int offset, char expected) {return (offset < value.length()) && (value.charAt(offset) == expected);}private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException {if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {throw new NumberFormatException(value);}int i = beginIndex;int result = 0;int digit;if (i < endIndex) {digit = Character.digit(value.charAt(i++), 10);if (digit < 0) {throw new NumberFormatException("Invalid number: " + value.substring(beginIndex, endIndex));}result = -digit;}while (i < endIndex) {digit = Character.digit(value.charAt(i++), 10);if (digit < 0) {throw new NumberFormatException("Invalid number: " + value.substring(beginIndex, endIndex));}result *= 10;result -= digit;}return -result;}private static void padInt(StringBuilder buffer, int value, int length) {String strValue = Integer.toString(value);for (int i = length - strValue.length(); i > 0; i--) {buffer.append('0');}buffer.append(strValue);}private static int indexOfNonDigit(String string, int offset) {for (int i = offset; i < string.length(); i++) {char c = string.charAt(i);if (c < '0' || c > '9') return i;}return string.length();}}
tensor([[0.0013, 0.0047, 0.0007,  ..., 0.0015, 0.0009, 0.0029],
        [0.0014, 0.0041, 0.0006,  ..., 0.0013, 0.0012, 0.0023],
        [0.0011, 0.0040, 0.0007,  ..., 0.0017, 0.0010, 0.0026],
        ...,
        [0.0009, 0.0045, 0.0005,  ..., 0.0012, 0.0011, 0.0023],
        [0.0010, 0.0045, 0.0005,  ..., 0.0014, 0.0009, 0.0024],
        [0.0011, 0.0047, 0.0005,  ..., 0.0012, 0.0010, 0.0031]])