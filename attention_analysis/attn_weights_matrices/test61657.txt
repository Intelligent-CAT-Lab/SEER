61657
Test: public void test0829() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0829"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar((java.lang.Character) ','); org.apache.commons.csv.CSVFormat cSVFormat4 = cSVFormat2.withRecordSeparator('#'); org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat5.validate(); org.apache.commons.csv.Quote quote7 = null; org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withQuotePolicy(quote7); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat8.withQuoteChar((java.lang.Character) '\"'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withRecordSeparator('\n'); org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat15.validate(); org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat17.validate(); org.apache.commons.csv.Quote quote19 = null; org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withQuotePolicy(quote19); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withEscape((java.lang.Character) 'a'); java.lang.Object[] objArray24 = new java.lang.Object[] { 'a', (byte) 0 }; java.lang.String str25 = cSVFormat15.format(objArray24); boolean boolean26 = cSVFormat15.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat15.withCommentStart((java.lang.Character) ','); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withDelimiter('\"'); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat30.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat35.validate(); org.apache.commons.csv.Quote quote37 = null; org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat35.withQuotePolicy(quote37); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withQuoteChar('\t'); java.lang.Character char41 = cSVFormat40.getEscape(); boolean boolean42 = cSVFormat40.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat44 = cSVFormat40.withRecordSeparator(','); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat40.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat47 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat47.validate(); org.apache.commons.csv.Quote quote49 = null; org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat47.withQuotePolicy(quote49); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat50.withQuoteChar('\t'); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat52.withQuoteChar((java.lang.Character) ' '); java.lang.String[] strArray61 = new java.lang.String[] { "hi!\t\"a\t0\"", "hi!", "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", "\r\n", "a\t0", "" }; org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat52.withHeader(strArray61); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat40.withHeader(strArray61); boolean boolean64 = cSVFormat30.equals((java.lang.Object) strArray61); java.lang.String str65 = cSVFormat14.format((java.lang.Object[]) strArray61); org.apache.commons.csv.CSVFormat cSVFormat66 = cSVFormat2.withHeader(strArray61); }
Code: public String toString(){final StringBuilder sb = new StringBuilder();sb.append("Delimiter=<").append(delimiter).append('>');if (isEscaping()) {sb.append(' ');sb.append("Escape=<").append(escape).append('>');}if (true) {sb.append(' ');;}if (isCommentingEnabled()) {sb.append(' ');sb.append("CommentStart=<").append(commentStart).append('>');}if (isNullHandling()) {sb.append(' ');;}if(recordSeparator != null) {sb.append(' ');sb.append("RecordSeparator=<").append(recordSeparator).append('>');}if (getIgnoreEmptyLines()) {sb.append(" EmptyLines:ignored");}if (getIgnoreSurroundingSpaces()) {sb.append(" SurroundingSpaces:ignored");}sb.append(" SkipHeaderRecord:").append(skipHeaderRecord);if (header != null) {sb.append(' ');sb.append("Header:").append(Arrays.toString(header));}return sb.toString();}
tensor([[0.0217, 0.0275, 0.0144,  ..., 0.0457, 0.0366, 0.0244],
        [0.0227, 0.0264, 0.0145,  ..., 0.0447, 0.0379, 0.0245],
        [0.0175, 0.0319, 0.0133,  ..., 0.0398, 0.0302, 0.0246],
        ...,
        [0.0209, 0.0325, 0.0169,  ..., 0.0388, 0.0331, 0.0229],
        [0.0162, 0.0284, 0.0131,  ..., 0.0421, 0.0241, 0.0169],
        [0.0219, 0.0307, 0.0145,  ..., 0.0431, 0.0269, 0.0241]])