69153
Test: public void test577() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test577"); org.jsoup.nodes.Comment comment2 = new org.jsoup.nodes.Comment("#root", ""); comment2.setSiblingIndex((int) (short) 0); java.lang.StringBuilder stringBuilder5 = null; org.jsoup.nodes.TextNode textNode9 = org.jsoup.nodes.TextNode.createFromEncoded("data-", "hi!"); boolean boolean10 = textNode9.isBlank(); textNode9.text = ""; java.lang.StringBuilder stringBuilder13 = null; java.lang.StringBuilder stringBuilder15 = null; org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Entities.escape(stringBuilder15, "", outputSettings17, false, true, false); textNode9.outerHtmlHead(stringBuilder13, (int) (byte) -1, outputSettings17); comment2.outerHtmlTail(stringBuilder5, (int) (byte) 1, outputSettings17); java.lang.String str24 = comment2.getData(); }
Code: static void escape(StringBuilder accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) { boolean lastWasWhite = false; boolean reachedNonWhite = false; final EscapeMode escapeMode = out.escapeMode(); final CharsetEncoder encoder = out.encoder(); final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name()); final Map<Character, String> map = escapeMode.getMap(); final int length = string.length(); int codePoint; for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) { codePoint = string.codePointAt(offset); if (normaliseWhite) { if (StringUtil.isWhitespace(codePoint)) { if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite) continue; accum.append(' '); lastWasWhite = true; continue; } else { lastWasWhite = false; reachedNonWhite = true; } } if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { final char c = (char) codePoint; switch (c) { case '&': accum.append("&amp;"); break; case 0xA0: if (escapeMode != EscapeMode.xhtml) accum.append("&nbsp;"); else accum.append("&#xa0;"); break; case '<': if (!inAttribute) accum.append("&lt;"); else accum.append(c); break; case '>': if (!inAttribute) accum.append("&gt;"); else accum.append(c); break; case '"': if (inAttribute) accum.append("&quot;"); else accum.append(c); break; default: if (canEncode(coreCharset, c, encoder)) accum.append(c); else if (map.containsKey(c)) accum.append('&').append(map.get(c)).append(';'); else accum.append("&#x").append(Integer.toHexString(codePoint)).append(';'); } } else { final String c = new String(Character.toChars(codePoint)); if (encoder.canEncode(c)) accum.append(c); else accum.append("&#x").append(Integer.toHexString(codePoint)).append(';'); } } }
tensor([[0.0115, 0.0028, 0.0061,  ..., 0.0021, 0.0021, 0.0021],
        [0.0122, 0.0029, 0.0056,  ..., 0.0018, 0.0018, 0.0018],
        [0.0144, 0.0021, 0.0082,  ..., 0.0011, 0.0011, 0.0011],
        ...,
        [0.0124, 0.0027, 0.0066,  ..., 0.0016, 0.0016, 0.0016],
        [0.0124, 0.0027, 0.0066,  ..., 0.0016, 0.0016, 0.0016],
        [0.0124, 0.0027, 0.0066,  ..., 0.0016, 0.0016, 0.0016]])