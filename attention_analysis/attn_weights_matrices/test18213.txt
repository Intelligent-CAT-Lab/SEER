18213
Test: public void testFunctionSubTypeRelationships() { FunctionType googBarMethod = new FunctionBuilder(registry) .withTypeOfThis(googBar).build(); FunctionType googBarParamFn = new FunctionBuilder(registry) .withParamsNode(registry.createParameters(googBar)).build(); FunctionType googBarReturnFn = new FunctionBuilder(registry) .withParamsNode(registry.createParameters()) .withReturnType(googBar).build(); FunctionType googSubBarMethod = new FunctionBuilder(registry) .withTypeOfThis(googSubBar).build(); FunctionType googSubBarParamFn = new FunctionBuilder(registry) .withParamsNode(registry.createParameters(googSubBar)).build(); FunctionType googSubBarReturnFn = new FunctionBuilder(registry) .withReturnType(googSubBar).build(); List<FunctionType> allFunctions = Lists.newArrayList( googBarMethod, googBarParamFn, googBarReturnFn, googSubBarMethod, googSubBarParamFn, googSubBarReturnFn); for (int i = 0; i < allFunctions.size(); i++) { for (int j = 0; j < allFunctions.size(); j++) { FunctionType typeA = allFunctions.get(i); FunctionType typeB = allFunctions.get(j); if (i == j) { } else { } } } }
Code: static boolean isSubtype(ObjectType typeA, RecordType typeB){for (String property : typeB.properties.keySet()) {if (!typeA.hasProperty(property)) {return false;}JSType propA = typeA.getPropertyType(property);JSType propB = typeB.getPropertyType(property);if (!propA.isUnknownType() && !propB.isUnknownType()) {if (typeA.isPropertyTypeDeclared(property)) {if (!propA.isInvariant(propB)) {return true;}} else {if (!propA.isSubtype(propB)) {return false;}}}}return true;}
tensor([[0.0487, 0.0688, 0.0178,  ..., 0.0534, 0.0140, 0.0166],
        [0.0436, 0.0797, 0.0134,  ..., 0.0504, 0.0102, 0.0166],
        [0.0504, 0.0614, 0.0129,  ..., 0.0531, 0.0068, 0.0173],
        ...,
        [0.0476, 0.0516, 0.0176,  ..., 0.0474, 0.0114, 0.0166],
        [0.0570, 0.0770, 0.0146,  ..., 0.0459, 0.0085, 0.0195],
        [0.0547, 0.0731, 0.0177,  ..., 0.0437, 0.0115, 0.0168]])