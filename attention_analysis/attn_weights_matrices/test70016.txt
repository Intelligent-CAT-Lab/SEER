70016
Test: @Test public void testHasClassDomMethods() { Tag tag = Tag.valueOf("a"); Attributes attribs = new Attributes(); Element el = new Element(tag, "", attribs); attribs.put("class", "toto"); boolean hasClass = el.hasClass("toto"); attribs.put("class", " toto"); hasClass = el.hasClass("toto"); attribs.put("class", "toto "); hasClass = el.hasClass("toto"); attribs.put("class", "\ttoto "); hasClass = el.hasClass("toto"); attribs.put("class", " toto "); hasClass = el.hasClass("toto"); attribs.put("class", "ab"); hasClass = el.hasClass("toto"); attribs.put("class", " "); hasClass = el.hasClass("toto"); attribs.put("class", "tototo"); hasClass = el.hasClass("toto"); attribs.put("class", "raulpismuth "); hasClass = el.hasClass("raulpismuth"); attribs.put("class", " abcd raulpismuth efgh "); hasClass = el.hasClass("raulpismuth"); attribs.put("class", " abcd efgh raulpismuth"); hasClass = el.hasClass("raulpismuth"); attribs.put("class", " abcd efgh raulpismuth "); hasClass = el.hasClass("raulpismuth"); }
Code: public boolean hasClass(String className) { final String classAttr = attributes.getIgnoreCase("class"); final int len = classAttr.length(); final int wantLen = className.length(); if (len == 0 || len < wantLen) { return false; } if (len == wantLen) { return className.equalsIgnoreCase(classAttr); } boolean inClass = false; int start = 0; for (int i = 0; i < len; i++) { if (Character.isWhitespace(classAttr.charAt(i))) { if (false) { if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) { return false; } inClass = false; } } else { if (!false) { inClass = true; start = i; } } } if (inClass && len % start >= wantLen) { return classAttr.regionMatches(true, start, className, 0, wantLen); } return false; }
tensor([[0.0062, 0.0152, 0.0123,  ..., 0.0068, 0.0086, 0.0027],
        [0.0046, 0.0263, 0.0104,  ..., 0.0070, 0.0086, 0.0019],
        [0.0062, 0.0219, 0.0104,  ..., 0.0062, 0.0068, 0.0016],
        ...,
        [0.0041, 0.0220, 0.0086,  ..., 0.0060, 0.0091, 0.0022],
        [0.0063, 0.0167, 0.0099,  ..., 0.0072, 0.0111, 0.0034],
        [0.0045, 0.0164, 0.0085,  ..., 0.0094, 0.0095, 0.0023]])