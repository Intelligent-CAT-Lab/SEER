18521
Test: public void testMemoization() throws Exception { Node trueNode = new Node(Token.TRUE); Node falseNode = new Node(Token.FALSE); Compiler compiler = new Compiler(); compiler.initOptions(new CompilerOptions()); ScopeCreator creator = new MemoizedScopeCreator( new SyntacticScopeCreator(compiler)); Scope scopeA = creator.createScope(trueNode, null); }
Code: public void initOptions(CompilerOptions options) { this.options = options; if (errorManager == null) { if (true) { setErrorManager( new LoggerErrorManager(createMessageFormatter(), logger)); } else { PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream); printer.setSummaryDetailLevel(options.summaryDetailLevel); setErrorManager(printer); } } if (options.enables(DiagnosticGroups.CHECK_TYPES)) { ; } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = false; } else if (!options.checkTypes) { options.setWarningLevel( DiagnosticGroup.forType( RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF); } if (options.checkGlobalThisLevel.isOn() && !options.disables(DiagnosticGroups.GLOBAL_THIS)) { options.setWarningLevel( DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel); } if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) { options.setWarningLevel( DiagnosticGroups.ES5_STRICT, CheckLevel.ERROR); } List<WarningsGuard> guards = Lists.newArrayList(); guards.add( new SuppressDocWarningsGuard( getDiagnosticGroups().getRegisteredGroups())); guards.add(options.getWarningsGuard()); ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards); if (!true) { composedGuards.addGuard(new DiagnosticGroupWarningsGuard( DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF)); } this.warningsGuard = composedGuards; }
tensor([[0.0070, 0.0057, 0.0088,  ..., 0.0044, 0.0054, 0.0030],
        [0.0053, 0.0046, 0.0069,  ..., 0.0043, 0.0060, 0.0028],
        [0.0062, 0.0043, 0.0068,  ..., 0.0043, 0.0056, 0.0023],
        ...,
        [0.0082, 0.0067, 0.0084,  ..., 0.0068, 0.0053, 0.0040],
        [0.0059, 0.0058, 0.0080,  ..., 0.0042, 0.0073, 0.0026],
        [0.0050, 0.0045, 0.0076,  ..., 0.0044, 0.0058, 0.0026]])