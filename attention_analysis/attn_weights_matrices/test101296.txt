101296
Test: public void test009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test009"); org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear(); org.joda.time.ReadableInterval readableInterval1 = null; org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1); org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1); org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury(); org.joda.time.DurationField durationField5 = chronology3.millis(); org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5); long long9 = unsupportedDateTimeField6.getDifferenceAsLong(1625877282601L, (-210861660779418L)); org.joda.time.ReadableInterval readableInterval10 = null; org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval10); org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval10); org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury(); org.joda.time.DurationField durationField14 = chronology12.millis(); org.joda.time.DurationField durationField15 = chronology12.centuries(); org.joda.time.Chronology chronology16 = chronology12.withUTC(); org.joda.time.DurationField durationField17 = chronology16.halfdays(); org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra(); org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.centuryOfEra(); org.joda.time.field.DividedDateTimeField dividedDateTimeField21 = new org.joda.time.field.DividedDateTimeField(dateTimeField18, dateTimeFieldType19, 10); long long24 = dividedDateTimeField21.set(0L, 100); org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear(); org.joda.time.ReadableInterval readableInterval26 = null; org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26); org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26); org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury(); org.joda.time.DurationField durationField30 = chronology28.millis(); org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30); org.joda.time.field.RemainderDateTimeField remainderDateTimeField32 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField21, dateTimeFieldType25); org.joda.time.ReadablePartial readablePartial33 = null; java.util.Locale locale35 = null; java.lang.String str36 = dividedDateTimeField21.getAsShortText(readablePartial33, 29227899, locale35); org.joda.time.field.OffsetDateTimeField offsetDateTimeField38 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField21, 29227899); org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.hourOfDay(); java.lang.String str40 = dateTimeFieldType39.getName(); org.joda.time.ReadableInterval readableInterval42 = null; org.joda.time.ReadableInterval readableInterval43 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval42); org.joda.time.Chronology chronology44 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval42); org.joda.time.DateTimeField dateTimeField45 = chronology44.yearOfCentury(); org.joda.time.Partial partial46 = new org.joda.time.Partial(dateTimeFieldType39, (int) (short) 0, chronology44); org.joda.time.ReadableInterval readableInterval47 = null; org.joda.time.ReadableInterval readableInterval48 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval47); org.joda.time.Chronology chronology49 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval47); org.joda.time.DateTimeField dateTimeField50 = chronology49.yearOfCentury(); org.joda.time.DurationField durationField51 = chronology49.millis(); org.joda.time.DateTimeField dateTimeField52 = chronology49.centuryOfEra(); org.joda.time.DateTimeField dateTimeField53 = chronology49.clockhourOfDay(); org.joda.time.ReadablePartial readablePartial54 = null; int[] intArray61 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 }; int int62 = dateTimeField53.getMaximumValue(readablePartial54, intArray61); int int63 = dividedDateTimeField21.getMinimumValue((org.joda.time.ReadablePartial) partial46, intArray61); org.joda.time.ReadableInterval readableInterval65 = null; org.joda.time.ReadableInterval readableInterval66 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval65); org.joda.time.Chronology chronology67 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval65); org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury(); org.joda.time.DateTimeField dateTimeField69 = chronology67.minuteOfDay(); org.joda.time.ReadableInterval readableInterval70 = null; org.joda.time.ReadableInterval readableInterval71 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval70); org.joda.time.ReadableInterval readableInterval72 = null; boolean boolean73 = readableInterval71.contains(readableInterval72); org.joda.time.PeriodType periodType74 = null; org.joda.time.Period period75 = readableInterval71.toPeriod(periodType74); int[] intArray77 = chronology67.get((org.joda.time.ReadablePeriod) period75, (-210866846400000L)); try { int[] intArray79 = unsupportedDateTimeField6.set((org.joda.time.ReadablePartial) partial46, 27097894, intArray77, 4); } catch (java.lang.UnsupportedOperationException e) { } }
Code: public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) { super(); chronology = DateTimeUtils.getChronology(chronology).withUTC(); iChronology = chronology; if (types == null) { throw new IllegalArgumentException("Types array must not be null"); } if (values == null) { throw new IllegalArgumentException("Values array must not be null"); } if (values.length != types.length) { throw new IllegalArgumentException("Values array must be the same length as the types array"); } if (types.length == 0) { iTypes = types; iValues = values; return; } for (int i = 0; i < types.length; i++) { if (types[i] == null) { throw new IllegalArgumentException("Types array must not contain null: index " + i); } } DurationField lastUnitField = null; for (int i = 0; i < types.length; i++) { DateTimeFieldType loopType = types[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (i > 0) { int compare = lastUnitField.compareTo(loopUnitField); if (compare < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } else if (compare == 0) { if (types[i - 1].getRangeDurationType() == null) { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } else { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (lastRangeField.compareTo(loopRangeField) < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } if (lastRangeField.compareTo(loopRangeField) == 0) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } } } lastUnitField = loopUnitField; } iTypes = (DateTimeFieldType[]) types.clone(); chronology.validate(this, values); iValues = (int[]) values.clone(); }
tensor([[0.0024, 0.0017, 0.0024,  ..., 0.0011, 0.0015, 0.0011],
        [0.0019, 0.0016, 0.0023,  ..., 0.0010, 0.0014, 0.0008],
        [0.0016, 0.0015, 0.0024,  ..., 0.0011, 0.0010, 0.0007],
        ...,
        [0.0019, 0.0018, 0.0023,  ..., 0.0012, 0.0012, 0.0011],
        [0.0018, 0.0013, 0.0024,  ..., 0.0015, 0.0013, 0.0010],
        [0.0017, 0.0015, 0.0022,  ..., 0.0013, 0.0014, 0.0009]])