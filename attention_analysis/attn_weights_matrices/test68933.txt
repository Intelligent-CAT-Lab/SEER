68933
Test: public void test23() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test23"); java.nio.ByteBuffer byteBuffer0 = org.jsoup.helper.DataUtil.emptyByteBuffer(); org.jsoup.parser.Parser parser5 = org.jsoup.parser.Parser.xmlParser(); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse(":root", "hi!", parser5); try { org.jsoup.nodes.Document document7 = org.jsoup.helper.DataUtil.parseByteData(byteBuffer0, ":gt(1)", ":eq(100)", parser5); } catch (java.nio.BufferUnderflowException e) { } }
Code: static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) { String docData; Document doc = null; byteData.mark(); byte[] bom = new byte[4]; byteData.get(bom); byteData.rewind(); if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00) { charsetName = "UTF-32"; } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) { charsetName = "UTF-16"; } else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) { charsetName = "UTF-8"; byteData.position(3); } if (charsetName == null) { docData = Charset.forName(defaultCharset).decode(byteData).toString(); doc = parser.parseInput(docData, baseUri); Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first(); if (meta != null) { String foundCharset = null; if (meta.hasAttr("http-equiv")) { foundCharset = getCharsetFromContentType(meta.attr("content")); } if (foundCharset == null && meta.hasAttr("charset")) { try { if (Charset.isSupported(meta.attr("charset"))) { foundCharset = meta.attr("charset"); } } catch (IllegalCharsetNameException e) { foundCharset = null; } } if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { foundCharset = foundCharset.trim().replaceAll("[\"']", ""); charsetName = foundCharset; byteData.rewind(); docData = Charset.forName(foundCharset).decode(byteData).toString(); doc = null; } } } else { Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML"); docData = Charset.forName(charsetName).decode(byteData).toString(); } if (doc == null) { doc = parser.parseInput(docData, baseUri); doc.outputSettings().charset(charsetName); } return doc; }
tensor([[0.0077, 0.0107, 0.0032,  ..., 0.0027, 0.0024, 0.0014],
        [0.0067, 0.0102, 0.0029,  ..., 0.0028, 0.0019, 0.0008],
        [0.0082, 0.0093, 0.0031,  ..., 0.0033, 0.0023, 0.0010],
        ...,
        [0.0087, 0.0107, 0.0031,  ..., 0.0027, 0.0019, 0.0010],
        [0.0081, 0.0112, 0.0030,  ..., 0.0032, 0.0021, 0.0008],
        [0.0078, 0.0088, 0.0029,  ..., 0.0042, 0.0025, 0.0010]])