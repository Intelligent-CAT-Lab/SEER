65133
Test: public void testDoubleToLong() throws Exception { Long L = MAPPER.readValue(" 3.33 ", Long.class); LongWrapper w = MAPPER.readValue("{\"l\":-2.25 }", LongWrapper.class); try { R.forType(Long.class).readValue("1.5"); fail("Should not pass"); } catch (JsonMappingException e) { verifyException(e, "Can not coerce a floating-point"); } try { R.forType(Long.TYPE).readValue("1.5"); fail("Should not pass"); } catch (JsonMappingException e) { verifyException(e, "Can not coerce a floating-point"); } try { R.forType(LongWrapper.class).readValue("{\"l\": 7.7 }"); fail("Should not pass"); } catch (JsonMappingException e) { verifyException(e, "Can not coerce a floating-point"); } }
Code: public static StdKeyDeserializer forType(Class<?> raw) { int kind; if (raw == String.class || raw == Object.class) { return StringKD.forType(raw); } else if (raw == UUID.class) { kind = TYPE_UUID; } else if (raw == Integer.class) { kind = TYPE_INT; } else if (raw == Long.class) { kind = TYPE_LONG; } else if (raw == Date.class) { kind = TYPE_DATE; } else if (raw == Calendar.class) { kind = TYPE_CALENDAR; } else if (raw == Boolean.class) { kind = TYPE_BOOLEAN; } else if (raw == Byte.class) { kind = TYPE_BYTE; } else if (raw == Character.class) { kind = TYPE_CHAR; } else if (raw == Short.class) { kind = TYPE_SHORT; } else if (raw == Float.class) { kind = TYPE_FLOAT; } else if (raw == Double.class) { kind = TYPE_DOUBLE; } else if (raw == URI.class) { kind = TYPE_URI; } else if (raw == URL.class) { kind = TYPE_URL; } else if (raw == Class.class) { kind = TYPE_CLASS; } else if (raw == Locale.class) { FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class); return new StdKeyDeserializer(TYPE_LOCALE, raw, deser); } else if (raw == Currency.class) { FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Currency.class); return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser); } else { return null; } return new StdKeyDeserializer(kind, raw); }
tensor([[0.0031, 0.0112, 0.0054,  ..., 0.0034, 0.0020, 0.0016],
        [0.0031, 0.0097, 0.0059,  ..., 0.0027, 0.0016, 0.0018],
        [0.0018, 0.0125, 0.0044,  ..., 0.0031, 0.0017, 0.0009],
        ...,
        [0.0022, 0.0106, 0.0059,  ..., 0.0034, 0.0018, 0.0013],
        [0.0028, 0.0091, 0.0047,  ..., 0.0025, 0.0018, 0.0015],
        [0.0020, 0.0101, 0.0066,  ..., 0.0029, 0.0017, 0.0013]])