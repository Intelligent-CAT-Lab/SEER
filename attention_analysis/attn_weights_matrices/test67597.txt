67597
Test: public void test32() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test32"); com.fasterxml.jackson.databind.ser.Serializers.Base base0 = new com.fasterxml.jackson.databind.ser.Serializers.Base(); com.fasterxml.jackson.databind.cfg.BaseSettings baseSettings1 = null; com.fasterxml.jackson.databind.jsontype.SubtypeResolver subtypeResolver2 = null; com.fasterxml.jackson.databind.introspect.SimpleMixInResolver simpleMixInResolver3 = null; com.fasterxml.jackson.databind.util.RootNameLookup rootNameLookup4 = null; com.fasterxml.jackson.databind.SerializationConfig serializationConfig5 = new com.fasterxml.jackson.databind.SerializationConfig(baseSettings1, subtypeResolver2, simpleMixInResolver3, rootNameLookup4); com.fasterxml.jackson.databind.type.ReferenceType referenceType6 = null; com.fasterxml.jackson.databind.BeanDescription beanDescription7 = null; com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSerializer8 = null; com.fasterxml.jackson.databind.JavaType javaType9 = null; com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSerializer11 = null; com.fasterxml.jackson.databind.ser.std.SqlDateSerializer sqlDateSerializer13 = new com.fasterxml.jackson.databind.ser.std.SqlDateSerializer((java.lang.Boolean) false); com.fasterxml.jackson.databind.SerializerProvider serializerProvider14 = null; com.fasterxml.jackson.databind.BeanProperty beanProperty15 = null; com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer16 = sqlDateSerializer13.createContextual(serializerProvider14, beanProperty15); com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer objectArraySerializer17 = new com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer(javaType9, false, typeSerializer11, (com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>) wildcardJsonSerializer16); com.fasterxml.jackson.databind.ObjectMapper objectMapper18 = null; com.fasterxml.jackson.databind.MappingJsonFactory mappingJsonFactory19 = new com.fasterxml.jackson.databind.MappingJsonFactory(objectMapper18); com.fasterxml.jackson.databind.ser.DefaultSerializerProvider defaultSerializerProvider20 = null; com.fasterxml.jackson.databind.deser.DefaultDeserializationContext defaultDeserializationContext21 = null; com.fasterxml.jackson.databind.ObjectMapper objectMapper22 = new com.fasterxml.jackson.databind.ObjectMapper((com.fasterxml.jackson.core.JsonFactory) mappingJsonFactory19, defaultSerializerProvider20, defaultDeserializationContext21); com.fasterxml.jackson.databind.MapperFeature[] mapperFeatureArray23 = new com.fasterxml.jackson.databind.MapperFeature[] {}; com.fasterxml.jackson.databind.ObjectMapper objectMapper24 = objectMapper22.enable(mapperFeatureArray23); com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = null; com.fasterxml.jackson.databind.SerializerProvider serializerProvider26 = null; objectArraySerializer17.serializeContents((java.lang.Object[]) mapperFeatureArray23, jsonGenerator25, serializerProvider26); com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap propertySerializerMap28 = com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.emptyForRootValues(); objectArraySerializer17._dynamicSerializers = propertySerializerMap28; com.fasterxml.jackson.databind.JavaType javaType30 = objectArraySerializer17._elementType; com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer31 = objectArraySerializer17.getContentSerializer(); com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer32 = base0.findReferenceSerializer(serializationConfig5, referenceType6, beanDescription7, typeSerializer8, (com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>) wildcardJsonSerializer31); com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder stdTypeResolverBuilder33 = com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.noTypeInfoBuilder(); com.fasterxml.jackson.databind.DeserializationConfig deserializationConfig34 = null; com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer inetSocketAddressSerializer35 = new com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer(); java.lang.Class<java.net.InetSocketAddress> inetSocketAddressClass36 = inetSocketAddressSerializer35.handledType(); boolean boolean37 = com.fasterxml.jackson.databind.util.ClassUtil.isNonStaticInnerClass(inetSocketAddressClass36); com.fasterxml.jackson.databind.type.SimpleType simpleType38 = com.fasterxml.jackson.databind.type.SimpleType.construct(inetSocketAddressClass36); com.fasterxml.jackson.databind.jsontype.NamedType[] namedTypeArray39 = new com.fasterxml.jackson.databind.jsontype.NamedType[] {}; java.util.ArrayList<com.fasterxml.jackson.databind.jsontype.NamedType> namedTypeList40 = new java.util.ArrayList<com.fasterxml.jackson.databind.jsontype.NamedType>(); boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>) namedTypeList40, namedTypeArray39); com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer42 = stdTypeResolverBuilder33.buildTypeDeserializer(deserializationConfig34, (com.fasterxml.jackson.databind.JavaType) simpleType38, (java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>) namedTypeList40); java.lang.String str43 = simpleType38.toCanonical(); com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer inetSocketAddressSerializer44 = new com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer(); java.lang.Class<java.net.InetSocketAddress> inetSocketAddressClass45 = inetSocketAddressSerializer44.handledType(); boolean boolean46 = com.fasterxml.jackson.databind.util.ClassUtil.isNonStaticInnerClass(inetSocketAddressClass45); com.fasterxml.jackson.databind.type.SimpleType simpleType47 = com.fasterxml.jackson.databind.type.SimpleType.construct(inetSocketAddressClass45); com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder stdTypeResolverBuilder48 = com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.noTypeInfoBuilder(); com.fasterxml.jackson.databind.DeserializationConfig deserializationConfig49 = null; com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer inetSocketAddressSerializer50 = new com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer(); java.lang.Class<java.net.InetSocketAddress> inetSocketAddressClass51 = inetSocketAddressSerializer50.handledType(); boolean boolean52 = com.fasterxml.jackson.databind.util.ClassUtil.isNonStaticInnerClass(inetSocketAddressClass51); com.fasterxml.jackson.databind.type.SimpleType simpleType53 = com.fasterxml.jackson.databind.type.SimpleType.construct(inetSocketAddressClass51); com.fasterxml.jackson.databind.jsontype.NamedType[] namedTypeArray54 = new com.fasterxml.jackson.databind.jsontype.NamedType[] {}; java.util.ArrayList<com.fasterxml.jackson.databind.jsontype.NamedType> namedTypeList55 = new java.util.ArrayList<com.fasterxml.jackson.databind.jsontype.NamedType>(); boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>) namedTypeList55, namedTypeArray54); com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer57 = stdTypeResolverBuilder48.buildTypeDeserializer(deserializationConfig49, (com.fasterxml.jackson.databind.JavaType) simpleType53, (java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>) namedTypeList55); com.fasterxml.jackson.databind.type.MapLikeType mapLikeType58 = com.fasterxml.jackson.databind.type.MapLikeType.upgradeFrom((com.fasterxml.jackson.databind.JavaType) simpleType38, (com.fasterxml.jackson.databind.JavaType) simpleType47, (com.fasterxml.jackson.databind.JavaType) simpleType53); java.lang.Object obj59 = null; com.fasterxml.jackson.databind.type.MapLikeType mapLikeType60 = mapLikeType58.withKeyValueHandler(obj59); try { com.fasterxml.jackson.databind.BeanDescription beanDescription61 = serializationConfig5.introspectDirectClassAnnotations((com.fasterxml.jackson.databind.JavaType) mapLikeType60); } catch (java.lang.NullPointerException e) { } }
Code: public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException { if (false) { return this; } JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (false) { return this; } JsonFormat.Shape shape = format.getShape(); if (true) { return withFormat(Boolean.TRUE, null); } if (format.hasPattern()) { final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc); TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone(); df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } final boolean hasLocale = format.hasLocale(); final boolean hasTZ = format.hasTimeZone(); final boolean asString = (shape == JsonFormat.Shape.STRING); if (!hasLocale && !asString) { return this; } DateFormat df0 = serializers.getConfig().getDateFormat(); if (df0 instanceof StdDateFormat) { StdDateFormat std = (StdDateFormat) df0; if (format.hasLocale()) { std = std.withLocale(format.getLocale()); } if (format.hasTimeZone()) { std = std.withTimeZone(format.getTimeZone()); } return withFormat(Boolean.FALSE, std); } if (!(df0 instanceof SimpleDateFormat)) { serializers.reportMappingProblem("Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`",df0.getClass().getName()); } SimpleDateFormat df = (SimpleDateFormat) df0; if (hasLocale) { df = new SimpleDateFormat(df.toPattern(), format.getLocale()); } else { ; } TimeZone newTz = format.getTimeZone(); boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone()); if (changeTZ) { df.setTimeZone(newTz); } return withFormat(Boolean.FALSE, df); }
tensor([[0.0039, 0.0169, 0.0023,  ..., 0.0058, 0.0074, 0.0018],
        [0.0038, 0.0175, 0.0024,  ..., 0.0046, 0.0060, 0.0021],
        [0.0032, 0.0251, 0.0024,  ..., 0.0049, 0.0061, 0.0016],
        ...,
        [0.0041, 0.0170, 0.0031,  ..., 0.0052, 0.0071, 0.0020],
        [0.0048, 0.0137, 0.0033,  ..., 0.0062, 0.0064, 0.0022],
        [0.0028, 0.0185, 0.0027,  ..., 0.0055, 0.0079, 0.0016]])