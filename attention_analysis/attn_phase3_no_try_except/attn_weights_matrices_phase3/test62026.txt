62026
Test: public void test21514() throws Throwable { DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder(); FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null); DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfHour(141); HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>(); DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0); DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendLiteral("Europe/I"); DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay(); dateTimeFormatterBuilder3.appendDecimal(dateTimeFieldType0, 141, 141); DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.centuryOfEra(); dateTimeFormatterBuilder0.appendSecondOfDay(141); FileSystemHandling.createFolder((EvoSuiteFile) null); dateTimeFormatterBuilder3.appendFractionOfDay(141, (-59)); dateTimeFieldType1.getDurationType(); dateTimeFormatterBuilder0.appendClockhourOfDay(141); DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true); dateTimeFormatterBuilder_TextField0.estimatePrintedLength(); DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-59), hashMap0); IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC(); LocalDate localDate0 = LocalDate.now((Chronology) islamicChronology0); LocalTime localTime0 = LocalTime.fromMillisOfDay((long) 1); DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.year(); DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType2, (-2079), false); Locale locale0 = Locale.CANADA_FRENCH; Integer integer0 = new Integer((byte) (-126)); DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-59), islamicChronology0, locale0, integer0, (-5304)); dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "Europe/I", 329); // Undeclared exception!  localDate0.toLocalDateTime(localTime0);   }
Code: public DateTimeFormatterBuilder() { super(); iElementPairs = new ArrayList<Object>(); }
[[0.10067669 0.22655657 0.13086987 0.10574874 0.13966145 0.0631328
 0.05100965 0.14018644 0.04215779]
[0.091461   0.22738758 0.19379827 0.07846569 0.14026177 0.06118948
 0.05248094 0.12435228 0.03060302]
[0.09967426 0.19508041 0.14702831 0.11445388 0.13647722 0.08238067
 0.05752943 0.11342402 0.0539518 ]
[0.09872083 0.24858196 0.13182631 0.09818368 0.14872181 0.06113599
 0.04187419 0.13231102 0.03864422]
[0.07963037 0.24905154 0.11645733 0.11293884 0.1346758  0.08350071
 0.05967984 0.12378407 0.04028152]
[0.1143311  0.17332347 0.12045491 0.10046301 0.1619586  0.09229627
 0.05331694 0.12991253 0.05394327]
[0.08239397 0.26597977 0.14812857 0.10462534 0.12681583 0.06601487
 0.05368596 0.1092655  0.04309018]
[0.08509356 0.2708762  0.1605871  0.09346877 0.13266835 0.07090164
 0.04258157 0.10857648 0.03524632]
[0.07259694 0.23985347 0.16758464 0.09611273 0.13905215 0.06358396
 0.04058683 0.14365089 0.03697842]]