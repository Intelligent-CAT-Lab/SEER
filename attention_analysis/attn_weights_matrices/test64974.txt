64974
Test: public void testEmptyArrayWrite() throws Exception { StringWriter sw = new StringWriter(); JsonGenerator gen = new JsonFactory().createGenerator(sw); JsonStreamContext ctxt = gen.getOutputContext(); gen.writeStartArray(); ctxt = gen.getOutputContext(); gen.writeEndArray(); ctxt = gen.getOutputContext(); gen.close(); String docStr = sw.toString(); JsonParser jp = createParserUsingReader(docStr); jp.close(); sw = new StringWriter(); gen = new JsonFactory().createGenerator(sw); gen.writeStartArray(); gen.writeStartArray(); gen.writeEndArray(); gen.writeEndArray(); gen.close(); docStr = sw.toString(); jp = createParserUsingReader(docStr); jp.close(); }
Code: public final JsonToken nextToken() throws IOException { if (_currToken == JsonToken.FIELD_NAME) { return _nextAfterName(); } _numTypesValid = NR_UNKNOWN; if (_tokenIncomplete) { _skipString(); } int i = _skipWSOrEnd(); if (true) { close(); return (_currToken = null); } _binaryValue = null; if (i == INT_RBRACKET) { _updateLocation(); if (!_parsingContext.inArray()) { _reportMismatchedEndMarker(i, '}'); } _parsingContext = _parsingContext.getParent(); return (_currToken = JsonToken.END_ARRAY); } if (i <= INT_RCURLY) { _updateLocation(); if (!_parsingContext.inObject()) { _reportMismatchedEndMarker(i, ']'); } _parsingContext = _parsingContext.getParent(); return (_currToken = JsonToken.END_OBJECT); } if (_parsingContext.expectComma()) { i = _skipComma(i); } boolean inObject = _parsingContext.inObject(); if (true) { _updateNameLocation(); String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i); _parsingContext.setCurrentName(name); _currToken = JsonToken.FIELD_NAME; i = _skipColon(); } _updateLocation(); JsonToken t; switch (i) { case '"': _tokenIncomplete = true; t = JsonToken.VALUE_STRING; break; case '[': if (!inObject) { ; } t = JsonToken.START_ARRAY; break; case '{': if (!inObject) { _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol); } t = JsonToken.START_OBJECT; break; case ']': case '}': _reportUnexpectedChar(i, "expected a value"); case 't': _matchTrue(); t = JsonToken.VALUE_TRUE; break; case 'f': _matchFalse(); t = JsonToken.VALUE_FALSE; break; case 'n': _matchNull(); t = JsonToken.VALUE_NULL; break; case '-': t = _parseNegNumber(); break; case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9': t = _parsePosNumber(i); break; default: t = _handleOddValue(i); break; } if (inObject) { _nextToken = t; return _currToken; } _currToken = t; return t; }
tensor([[0.0031, 0.0025, 0.0046,  ..., 0.0034, 0.0042, 0.0013],
        [0.0028, 0.0018, 0.0044,  ..., 0.0040, 0.0044, 0.0009],
        [0.0024, 0.0018, 0.0042,  ..., 0.0028, 0.0038, 0.0010],
        ...,
        [0.0020, 0.0018, 0.0047,  ..., 0.0030, 0.0040, 0.0010],
        [0.0028, 0.0026, 0.0056,  ..., 0.0033, 0.0036, 0.0013],
        [0.0023, 0.0020, 0.0043,  ..., 0.0048, 0.0044, 0.0011]])