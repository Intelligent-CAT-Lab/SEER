67554
Test: public void test16() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test16"); com.fasterxml.jackson.databind.json.JsonMapper jsonMapper0 = new com.fasterxml.jackson.databind.json.JsonMapper(); java.text.DateFormat dateFormat1 = null; com.fasterxml.jackson.databind.ObjectMapper objectMapper2 = jsonMapper0.setDateFormat(dateFormat1); com.fasterxml.jackson.annotation.JsonSetter.Value value3 = null; com.fasterxml.jackson.databind.ObjectMapper objectMapper4 = jsonMapper0.setDefaultSetterInfo(value3); com.fasterxml.jackson.databind.cfg.HandlerInstantiator handlerInstantiator5 = null; java.lang.Object obj6 = jsonMapper0.setHandlerInstantiator(handlerInstantiator5); com.fasterxml.jackson.databind.json.JsonMapper jsonMapper7 = new com.fasterxml.jackson.databind.json.JsonMapper(); com.fasterxml.jackson.databind.SerializationFeature serializationFeature8 = com.fasterxml.jackson.databind.SerializationFeature.WRITE_EMPTY_JSON_ARRAYS; boolean boolean9 = jsonMapper7.isEnabled(serializationFeature8); com.fasterxml.jackson.databind.SerializationFeature serializationFeature10 = com.fasterxml.jackson.databind.SerializationFeature.FLUSH_AFTER_WRITE_VALUE; java.lang.String str11 = jsonMapper7.writeValueAsString((java.lang.Object) serializationFeature10); com.fasterxml.jackson.databind.node.BooleanNode booleanNode12 = com.fasterxml.jackson.databind.node.BooleanNode.FALSE; com.fasterxml.jackson.databind.node.BooleanNode booleanNode14 = com.fasterxml.jackson.databind.node.BooleanNode.FALSE; com.fasterxml.jackson.databind.JsonNode[] jsonNodeArray15 = new com.fasterxml.jackson.databind.JsonNode[] { booleanNode14 }; java.util.ArrayList<com.fasterxml.jackson.databind.JsonNode> jsonNodeList16 = new java.util.ArrayList<com.fasterxml.jackson.databind.JsonNode>(); boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.fasterxml.jackson.databind.JsonNode>) jsonNodeList16, jsonNodeArray15); java.util.List<com.fasterxml.jackson.databind.JsonNode> jsonNodeList18 = booleanNode12.findParents("", (java.util.List<com.fasterxml.jackson.databind.JsonNode>) jsonNodeList16); com.fasterxml.jackson.core.JsonParser jsonParser19 = booleanNode12.traverse(); com.fasterxml.jackson.core.FormatSchema formatSchema20 = null; boolean boolean21 = jsonParser19.canUseSchema(formatSchema20); com.fasterxml.jackson.core.JsonLocation jsonLocation23 = null; com.fasterxml.jackson.databind.ser.std.DateSerializer dateSerializer24 = com.fasterxml.jackson.databind.ser.std.DateSerializer.instance; com.fasterxml.jackson.databind.ser.std.DateSerializer dateSerializer25 = com.fasterxml.jackson.databind.ser.std.DateSerializer.instance; boolean boolean26 = dateSerializer24.isDefaultSerializer((com.fasterxml.jackson.databind.JsonSerializer<java.util.Date>) dateSerializer25); java.lang.Class<java.util.Date> dateClass27 = dateSerializer24.handledType(); java.util.Collection<java.lang.Object> objCollection29 = null; com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException unrecognizedPropertyException30 = new com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException(jsonParser19, "", jsonLocation23, dateClass27, "JSON", objCollection29); com.fasterxml.jackson.databind.ser.std.NumberSerializer numberSerializer31 = com.fasterxml.jackson.databind.ser.std.NumberSerializer.instance; com.fasterxml.jackson.databind.SerializerProvider serializerProvider32 = null; com.fasterxml.jackson.databind.node.BooleanNode booleanNode33 = com.fasterxml.jackson.databind.node.BooleanNode.FALSE; com.fasterxml.jackson.databind.node.BooleanNode booleanNode35 = com.fasterxml.jackson.databind.node.BooleanNode.FALSE; com.fasterxml.jackson.databind.JsonNode[] jsonNodeArray36 = new com.fasterxml.jackson.databind.JsonNode[] { booleanNode35 }; java.util.ArrayList<com.fasterxml.jackson.databind.JsonNode> jsonNodeList37 = new java.util.ArrayList<com.fasterxml.jackson.databind.JsonNode>(); boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.fasterxml.jackson.databind.JsonNode>) jsonNodeList37, jsonNodeArray36); java.util.List<com.fasterxml.jackson.databind.JsonNode> jsonNodeList39 = booleanNode33.findParents("", (java.util.List<com.fasterxml.jackson.databind.JsonNode>) jsonNodeList37); com.fasterxml.jackson.core.JsonParser jsonParser40 = booleanNode33.traverse(); com.fasterxml.jackson.core.FormatSchema formatSchema41 = null; boolean boolean42 = jsonParser40.canUseSchema(formatSchema41); com.fasterxml.jackson.core.JsonLocation jsonLocation44 = null; com.fasterxml.jackson.databind.ser.std.DateSerializer dateSerializer45 = com.fasterxml.jackson.databind.ser.std.DateSerializer.instance; com.fasterxml.jackson.databind.ser.std.DateSerializer dateSerializer46 = com.fasterxml.jackson.databind.ser.std.DateSerializer.instance; boolean boolean47 = dateSerializer45.isDefaultSerializer((com.fasterxml.jackson.databind.JsonSerializer<java.util.Date>) dateSerializer46); java.lang.Class<java.util.Date> dateClass48 = dateSerializer45.handledType(); java.util.Collection<java.lang.Object> objCollection50 = null; com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException unrecognizedPropertyException51 = new com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException(jsonParser40, "", jsonLocation44, dateClass48, "JSON", objCollection50); com.fasterxml.jackson.databind.JsonNode jsonNode52 = numberSerializer31.getSchema(serializerProvider32, (java.lang.reflect.Type) dateClass48); jsonMapper7.addMixInAnnotations(dateClass27, dateClass48); com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper54 = null; try { jsonMapper0.acceptJsonFormatVisitor(dateClass27, jsonFormatVisitorWrapper54); } catch (java.lang.NullPointerException e) { } }
Code: public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint){if (true) {visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);} else {if (((Class<?>) handledType()) == BigDecimal.class) {;} else {}
tensor([[0.0432, 0.0359, 0.0416, 0.0559, 0.0693, 0.0372, 0.1051, 0.0718, 0.0829,
         0.0452, 0.0581, 0.0518, 0.0496, 0.0285, 0.0661, 0.0415, 0.0219, 0.0581,
         0.0362],
        [0.0324, 0.0293, 0.0355, 0.0406, 0.0783, 0.0412, 0.1591, 0.0628, 0.1031,
         0.0434, 0.0629, 0.0357, 0.0413, 0.0205, 0.0461, 0.0425, 0.0181, 0.0629,
         0.0444],
        [0.0325, 0.0292, 0.0463, 0.0525, 0.0691, 0.0377, 0.1083, 0.0630, 0.1111,
         0.0451, 0.0575, 0.0386, 0.0516, 0.0195, 0.0562, 0.0589, 0.0236, 0.0575,
         0.0416],
        [0.0402, 0.0302, 0.0335, 0.0507, 0.0687, 0.0352, 0.1206, 0.0491, 0.0855,
         0.0432, 0.0685, 0.0451, 0.0627, 0.0212, 0.0609, 0.0476, 0.0222, 0.0685,
         0.0462],
        [0.0427, 0.0247, 0.0341, 0.0491, 0.0768, 0.0334, 0.1308, 0.0795, 0.0915,
         0.0491, 0.0554, 0.0293, 0.0565, 0.0207, 0.0629, 0.0490, 0.0203, 0.0554,
         0.0387],
        [0.0384, 0.0387, 0.0395, 0.0479, 0.0707, 0.0409, 0.1253, 0.0577, 0.0766,
         0.0412, 0.0666, 0.0454, 0.0448, 0.0268, 0.0533, 0.0420, 0.0271, 0.0666,
         0.0504],
        [0.0298, 0.0244, 0.0377, 0.0472, 0.0683, 0.0359, 0.1665, 0.0596, 0.1042,
         0.0402, 0.0694, 0.0333, 0.0452, 0.0156, 0.0535, 0.0423, 0.0154, 0.0694,
         0.0420],
        [0.0301, 0.0280, 0.0460, 0.0545, 0.0788, 0.0454, 0.1221, 0.0724, 0.1005,
         0.0390, 0.0604, 0.0313, 0.0505, 0.0173, 0.0496, 0.0393, 0.0255, 0.0604,
         0.0491],
        [0.0361, 0.0272, 0.0443, 0.0590, 0.0684, 0.0386, 0.1442, 0.0591, 0.1105,
         0.0383, 0.0624, 0.0300, 0.0498, 0.0185, 0.0548, 0.0438, 0.0170, 0.0624,
         0.0355],
        [0.0332, 0.0285, 0.0475, 0.0530, 0.0779, 0.0354, 0.1406, 0.0630, 0.1006,
         0.0404, 0.0558, 0.0297, 0.0517, 0.0179, 0.0540, 0.0416, 0.0212, 0.0558,
         0.0523],
        [0.0332, 0.0256, 0.0374, 0.0494, 0.0766, 0.0389, 0.1480, 0.0621, 0.0770,
         0.0454, 0.0642, 0.0356, 0.0484, 0.0190, 0.0513, 0.0622, 0.0223, 0.0642,
         0.0391],
        [0.0285, 0.0262, 0.0478, 0.0536, 0.0647, 0.0491, 0.1260, 0.0716, 0.0885,
         0.0410, 0.0605, 0.0340, 0.0725, 0.0205, 0.0614, 0.0446, 0.0162, 0.0605,
         0.0328],
        [0.0391, 0.0339, 0.0308, 0.0456, 0.0659, 0.0414, 0.1268, 0.0594, 0.0747,
         0.0558, 0.0744, 0.0451, 0.0384, 0.0218, 0.0486, 0.0474, 0.0256, 0.0744,
         0.0510],
        [0.0390, 0.0325, 0.0511, 0.0520, 0.0725, 0.0377, 0.1166, 0.0724, 0.0957,
         0.0444, 0.0547, 0.0380, 0.0554, 0.0246, 0.0601, 0.0421, 0.0179, 0.0547,
         0.0385],
        [0.0227, 0.0251, 0.0437, 0.0433, 0.0733, 0.0324, 0.1642, 0.0618, 0.1442,
         0.0390, 0.0604, 0.0268, 0.0397, 0.0157, 0.0555, 0.0428, 0.0163, 0.0604,
         0.0327],
        [0.0383, 0.0318, 0.0352, 0.0494, 0.0787, 0.0375, 0.1571, 0.0689, 0.0876,
         0.0452, 0.0622, 0.0338, 0.0441, 0.0216, 0.0452, 0.0354, 0.0241, 0.0622,
         0.0416],
        [0.0410, 0.0318, 0.0343, 0.0566, 0.0702, 0.0388, 0.1524, 0.0638, 0.0849,
         0.0371, 0.0683, 0.0364, 0.0477, 0.0204, 0.0460, 0.0378, 0.0260, 0.0683,
         0.0381],
        [0.0332, 0.0256, 0.0374, 0.0494, 0.0766, 0.0389, 0.1480, 0.0621, 0.0770,
         0.0454, 0.0642, 0.0356, 0.0484, 0.0190, 0.0513, 0.0622, 0.0223, 0.0642,
         0.0391],
        [0.0474, 0.0330, 0.0429, 0.0574, 0.0745, 0.0363, 0.1349, 0.0652, 0.0844,
         0.0468, 0.0524, 0.0443, 0.0425, 0.0229, 0.0484, 0.0470, 0.0209, 0.0524,
         0.0463]])