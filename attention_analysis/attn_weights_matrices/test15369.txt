15369
Test: public void test210() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test210"); org.apache.commons.cli.GnuParser gnuParser0 = new org.apache.commons.cli.GnuParser(); org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options(); java.lang.String[] strArray2 = new java.lang.String[] {}; java.util.Properties properties3 = null; org.apache.commons.cli.CommandLine commandLine5 = gnuParser0.parse(options1, strArray2, properties3, true); java.util.Properties properties6 = null; gnuParser0.processProperties(properties6); java.util.List list8 = gnuParser0.getRequiredOptions(); org.apache.commons.cli.CommandLine commandLine9 = gnuParser0.cmd; org.apache.commons.cli.GnuParser gnuParser10 = new org.apache.commons.cli.GnuParser(); org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options(); java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "" }; java.lang.String[] strArray16 = gnuParser10.flatten(options11, strArray14, true); java.lang.String str17 = options11.toString(); org.apache.commons.cli.GnuParser gnuParser18 = new org.apache.commons.cli.GnuParser(); org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options(); java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "" }; java.lang.String[] strArray24 = gnuParser18.flatten(options19, strArray22, true); java.util.Properties properties25 = null; org.apache.commons.cli.CommandLine commandLine26 = gnuParser0.parse(options11, strArray22, properties25); org.apache.commons.cli.Options options27 = gnuParser0.getOptions(); org.apache.commons.cli.GnuParser gnuParser28 = new org.apache.commons.cli.GnuParser(); org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options(); java.lang.String[] strArray30 = new java.lang.String[] {}; java.util.Properties properties31 = null; org.apache.commons.cli.CommandLine commandLine33 = gnuParser28.parse(options29, strArray30, properties31, true); java.util.Properties properties34 = null; gnuParser28.processProperties(properties34); java.util.List list36 = gnuParser28.getRequiredOptions(); org.apache.commons.cli.CommandLine commandLine37 = gnuParser28.cmd; org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options(); boolean boolean40 = options38.hasOption(""); boolean boolean42 = options38.hasOption(""); org.apache.commons.cli.Options options47 = options38.addOption("", "", true, "hi!"); org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", ""); java.lang.String str51 = option50.getDescription(); java.lang.String str52 = option50.getDescription(); org.apache.commons.cli.OptionGroup optionGroup53 = options47.getOptionGroup(option50); java.lang.String[] strArray54 = new java.lang.String[] {}; org.apache.commons.cli.CommandLine commandLine56 = gnuParser28.parse(options47, strArray54, false); commandLine56.addArg("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.MissingArgumentException: "); java.lang.Object obj60 = commandLine56.getOptionObject('4'); gnuParser0.cmd = commandLine56; java.util.Properties properties62 = null; gnuParser0.processProperties(properties62); } ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]"); }
Code: protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) { List tokens = new ArrayList(); boolean eatTheRest = false; for (int i = 0; i < arguments.length; i++) { String arg = arguments[i]; if ("--".equals(arg)) { eatTheRest = true; tokens.add("--"); } else if ("-".equals(arg)) { tokens.add("-"); } else if (arg.startsWith("-")) { String opt = Util.stripLeadingHyphens(arg); if (options.hasOption(opt)) { tokens.add(arg); } else { if (opt.indexOf('=') != -1 && options.hasOption(opt.substring(0, opt.indexOf('=')))) { tokens.add(arg.substring(0, arg.indexOf('='))); tokens.add(arg.substring(arg.indexOf('=') + 1)); } else if (options.hasOption(arg.substring(0, 2))) { tokens.add(arg.substring(0, 2)); tokens.add(arg.substring(2)); } else { eatTheRest = stopAtNonOption; tokens.add(arg); } } } else { tokens.add(arg); } if (eatTheRest) { for (i++; i < arguments.length; i++) { tokens.add(arguments[i]); } } } return (String[]) tokens.toArray(new String[tokens.size()]); }
tensor([[0.0097, 0.0024, 0.0102,  ..., 0.0095, 0.0063, 0.0021],
        [0.0091, 0.0023, 0.0101,  ..., 0.0086, 0.0070, 0.0023],
        [0.0082, 0.0036, 0.0109,  ..., 0.0098, 0.0064, 0.0028],
        ...,
        [0.0100, 0.0034, 0.0114,  ..., 0.0096, 0.0067, 0.0025],
        [0.0089, 0.0018, 0.0125,  ..., 0.0111, 0.0078, 0.0018],
        [0.0095, 0.0023, 0.0098,  ..., 0.0125, 0.0074, 0.0024]])