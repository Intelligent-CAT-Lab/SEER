101251
Test: public void test272() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test272"); org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance(); org.joda.time.DateTimeField dateTimeField1 = gJChronology0.yearOfEra(); int int3 = dateTimeField1.getMinimumValue(0L); org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyearOfCentury(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField6 = new org.joda.time.field.OffsetDateTimeField(dateTimeField1, dateTimeFieldType4, (int) (short) 10); org.joda.time.DurationField durationField7 = offsetDateTimeField6.getRangeDurationField(); java.lang.String str8 = offsetDateTimeField6.toString(); long long11 = offsetDateTimeField6.add(0L, (-1)); org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance(); java.lang.String str13 = iSOChronology12.toString(); org.joda.time.Chronology chronology14 = iSOChronology12.withUTC(); org.joda.time.DateTimeField dateTimeField15 = iSOChronology12.millisOfDay(); org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(); org.joda.time.DateTime dateTime17 = localDate16.toDateTimeAtCurrentTime(); int[] intArray18 = localDate16.getValues(); org.joda.time.LocalDate localDate20 = localDate16.minusWeeks((int) (byte) 1); int[] intArray22 = iSOChronology12.get((org.joda.time.ReadablePartial) localDate16, (long) (short) -1); org.joda.time.DurationField durationField23 = iSOChronology12.eras(); org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfWeek(); org.joda.time.field.RemainderDateTimeField remainderDateTimeField26 = new org.joda.time.field.RemainderDateTimeField((org.joda.time.DateTimeField) offsetDateTimeField6, durationField23, dateTimeFieldType24, (int) (short) 100); int int27 = remainderDateTimeField26.getMinimumValue(); long long29 = remainderDateTimeField26.roundCeiling((long) 9700); org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance(); java.lang.String str31 = iSOChronology30.toString(); org.joda.time.Chronology chronology32 = iSOChronology30.withUTC(); org.joda.time.DateTimeField dateTimeField33 = iSOChronology30.millisOfDay(); org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(); org.joda.time.DateTime dateTime35 = localDate34.toDateTimeAtCurrentTime(); int[] intArray36 = localDate34.getValues(); org.joda.time.LocalDate localDate38 = localDate34.minusWeeks((int) (byte) 1); int[] intArray40 = iSOChronology30.get((org.joda.time.ReadablePartial) localDate34, (long) (short) -1); java.lang.String str41 = localDate34.toString(); org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(); org.joda.time.DateTime dateTime43 = localDate42.toDateTimeAtCurrentTime(); org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(); org.joda.time.DateTimeField dateTimeField45 = gJChronology44.yearOfEra(); org.joda.time.DateTime dateTime46 = dateTime43.toDateTime((org.joda.time.Chronology) gJChronology44); org.joda.time.DateTime dateTime47 = localDate34.toDateTime((org.joda.time.ReadableInstant) dateTime43); org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(); org.joda.time.DateTimeField dateTimeField50 = gJChronology49.yearOfEra(); int int52 = dateTimeField50.getMinimumValue(0L); org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(); boolean boolean54 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localDate53); int[] intArray56 = new int[] {}; int[] intArray58 = dateTimeField50.add((org.joda.time.ReadablePartial) localDate53, (int) (byte) -1, intArray56, 0); try { int[] intArray60 = remainderDateTimeField26.addWrapPartial((org.joda.time.ReadablePartial) localDate34, (-577), intArray58, 27); } catch (java.lang.ArrayIndexOutOfBoundsException e) { } }
Code: public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) { super(); chronology = DateTimeUtils.getChronology(chronology).withUTC(); iChronology = chronology; if (types == null) { throw new IllegalArgumentException("Types array must not be null"); } if (values == null) { throw new IllegalArgumentException("Values array must not be null"); } if (values.length != types.length) { throw new IllegalArgumentException("Values array must be the same length as the types array"); } if (types.length == 0) { iTypes = types; iValues = values; return; } for (int i = 0; i < types.length; i++) { if (types[i] == null) { throw new IllegalArgumentException("Types array must not contain null: index " + i); } } DurationField lastUnitField = null; for (int i = 0; i < types.length; i++) { DateTimeFieldType loopType = types[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (i > 0) { int compare = lastUnitField.compareTo(loopUnitField); if (compare < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } else if (compare == 0) { if (types[i - 1].getRangeDurationType() == null) { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } else { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (lastRangeField.compareTo(loopRangeField) < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } if (lastRangeField.compareTo(loopRangeField) == 0) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } } } lastUnitField = loopUnitField; } iTypes = (DateTimeFieldType[]) types.clone(); chronology.validate(this, values); iValues = (int[]) values.clone(); }
tensor([[0.0024, 0.0017, 0.0024,  ..., 0.0011, 0.0015, 0.0011],
        [0.0019, 0.0016, 0.0023,  ..., 0.0010, 0.0014, 0.0008],
        [0.0016, 0.0015, 0.0024,  ..., 0.0011, 0.0010, 0.0007],
        ...,
        [0.0019, 0.0018, 0.0023,  ..., 0.0012, 0.0012, 0.0011],
        [0.0018, 0.0013, 0.0024,  ..., 0.0015, 0.0013, 0.0010],
        [0.0017, 0.0015, 0.0022,  ..., 0.0013, 0.0014, 0.0009]])