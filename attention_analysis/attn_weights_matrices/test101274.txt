101274
Test: public void test011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test011"); org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay(); org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = new org.joda.time.DateTimeFieldType[] { dateTimeFieldType0 }; org.joda.time.ReadableInterval readableInterval2 = null; org.joda.time.ReadableInterval readableInterval3 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval2); org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval2); org.joda.time.DateTimeField dateTimeField5 = chronology4.yearOfCentury(); org.joda.time.DurationField durationField6 = chronology4.millis(); org.joda.time.DurationField durationField7 = chronology4.centuries(); org.joda.time.ReadableInterval readableInterval8 = null; org.joda.time.ReadableInterval readableInterval9 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval8); org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval8); org.joda.time.DateTimeField dateTimeField11 = chronology10.yearOfCentury(); org.joda.time.DurationField durationField12 = chronology10.millis(); org.joda.time.DateTimeField dateTimeField13 = chronology10.dayOfWeek(); org.joda.time.ReadableInterval readableInterval14 = null; org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval14); org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval14); org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfCentury(); org.joda.time.DateTimeField dateTimeField18 = chronology16.minuteOfDay(); org.joda.time.ReadableInterval readableInterval19 = null; org.joda.time.ReadableInterval readableInterval20 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval19); org.joda.time.ReadableInterval readableInterval21 = null; boolean boolean22 = readableInterval20.contains(readableInterval21); org.joda.time.PeriodType periodType23 = null; org.joda.time.Period period24 = readableInterval20.toPeriod(periodType23); int[] intArray26 = chronology16.get((org.joda.time.ReadablePeriod) period24, (-210866846400000L)); int[] intArray29 = chronology10.get((org.joda.time.ReadablePeriod) period24, 2173795348453L, (long) 1439); int[] intArray32 = chronology4.get((org.joda.time.ReadablePeriod) period24, (-210861660779418L), 1625877280312L); try { org.joda.time.Partial partial33 = new org.joda.time.Partial(dateTimeFieldTypeArray1, intArray32); } catch (java.lang.IllegalArgumentException e) { } }
Code: public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) { super(); chronology = DateTimeUtils.getChronology(chronology).withUTC(); iChronology = chronology; if (types == null) { throw new IllegalArgumentException("Types array must not be null"); } if (values == null) { throw new IllegalArgumentException("Values array must not be null"); } if (values.length != types.length) { throw new IllegalArgumentException("Values array must be the same length as the types array"); } if (types.length == 0) { iTypes = types; iValues = values; return; } for (int i = 0; i < types.length; i++) { if (types[i] == null) { throw new IllegalArgumentException("Types array must not contain null: index " + i); } } DurationField lastUnitField = null; for (int i = 0; i < types.length; i++) { DateTimeFieldType loopType = types[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (i > 0) { int compare = lastUnitField.compareTo(loopUnitField); if (compare < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } else if (compare == 0) { if (types[i - 1].getRangeDurationType() == null) { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } else { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (lastRangeField.compareTo(loopRangeField) < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } if (lastRangeField.compareTo(loopRangeField) == 0) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } } } lastUnitField = loopUnitField; } iTypes = (DateTimeFieldType[]) types.clone(); chronology.validate(this, values); iValues = (int[]) values.clone(); }
tensor([[0.0024, 0.0017, 0.0024,  ..., 0.0011, 0.0015, 0.0011],
        [0.0019, 0.0016, 0.0023,  ..., 0.0010, 0.0014, 0.0008],
        [0.0016, 0.0015, 0.0024,  ..., 0.0011, 0.0010, 0.0007],
        ...,
        [0.0019, 0.0018, 0.0023,  ..., 0.0012, 0.0012, 0.0011],
        [0.0018, 0.0013, 0.0024,  ..., 0.0015, 0.0013, 0.0010],
        [0.0017, 0.0015, 0.0022,  ..., 0.0013, 0.0014, 0.0009]])