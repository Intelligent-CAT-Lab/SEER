131355
Test: public void test1() throws Throwable { boolean boolean0 = true; Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer()); doReturn(true, false).when(enumeration0).hasMoreElements(); doReturn((Object) null).when(enumeration0).nextElement(); EnumerationUtils.toList((Enumeration<? extends String>) enumeration0); Enumeration<String> enumeration1 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer()); doReturn(boolean0, false).when(enumeration1).hasMoreElements(); doReturn((Object) null).when(enumeration1).nextElement(); EnumerationUtils.toList((Enumeration<?>) enumeration1); boolean boolean1 = false; Enumeration<String> enumeration2 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer()); doReturn(boolean1).when(enumeration2).hasMoreElements(); EnumerationUtils.toList((Enumeration<? extends String>) enumeration2); String string0 = "Dt:el(f; 4b,B"; String string1 = "2' *PJI:|"; StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string1); String string2 = "add() not supported for empty Iterator"; stringTokenizer0.nextToken(string2); stringTokenizer0.nextElement(); stringTokenizer0.hasMoreElements(); EnumerationUtils.toList(stringTokenizer0); Enumeration<Integer> enumeration3 = (Enumeration<Integer>) mock(Enumeration.class, new ViolatedAssumptionAnswer()); // Undeclared exception!  stringTokenizer0.nextToken();   }
Code: public static <E> List<E> toList(final Enumeration<? extends E> enumeration) { return IteratorUtils.toList(new EnumerationIterator<>(enumeration)); }
[[0.0504458  0.14722617 0.05901998 0.06997946 0.06997946 0.06997946
 0.03379925 0.14809793 0.06997946 0.06522199 0.05526541 0.06997946
 0.06997947 0.02104674]
[0.05190135 0.1425018  0.05643674 0.06942685 0.06942685 0.06942685
 0.03515773 0.12500021 0.06942685 0.09696579 0.0494914  0.06942685
 0.06942686 0.02598382]
[0.03944015 0.1379661  0.05421633 0.07036391 0.07036391 0.07036391
 0.04096939 0.14020884 0.07036389 0.08302305 0.06579282 0.07036389
 0.07036391 0.01619985]
[0.04244119 0.15016025 0.05504281 0.07039946 0.07039946 0.07039946
 0.04616779 0.13900587 0.07039946 0.06969673 0.0515755  0.07039946
 0.07039948 0.02351307]
[0.04244119 0.15016025 0.05504281 0.07039946 0.07039946 0.07039946
 0.04616779 0.13900587 0.07039946 0.06969673 0.0515755  0.07039946
 0.07039948 0.02351307]
[0.04244119 0.15016025 0.05504281 0.07039946 0.07039946 0.07039946
 0.04616779 0.13900587 0.07039946 0.06969673 0.0515755  0.07039946
 0.07039948 0.02351307]
[0.04662958 0.11737739 0.05635957 0.07577731 0.07577731 0.07577731
 0.0362417  0.11891121 0.0757773  0.08528706 0.06036083 0.0757773
 0.07577731 0.02416882]
[0.04011343 0.12557802 0.05251348 0.07876565 0.07876565 0.07876565
 0.04032454 0.12326419 0.07876565 0.07628588 0.04840823 0.07876565
 0.07876568 0.02091831]
[0.04244119 0.15016025 0.05504281 0.07039946 0.07039946 0.07039946
 0.04616779 0.13900587 0.07039946 0.06969673 0.0515755  0.07039946
 0.07039948 0.02351307]
[0.05475219 0.13107294 0.04779404 0.07041943 0.07041943 0.07041943
 0.04823931 0.11042675 0.07041944 0.09096381 0.06262898 0.07041944
 0.07041945 0.03160539]
[0.03370706 0.15586181 0.05149684 0.06728649 0.06728649 0.06728649
 0.04593648 0.17658031 0.0672865  0.06571141 0.04896946 0.0672865
 0.06728651 0.01801763]
[0.04244119 0.15016025 0.05504281 0.07039946 0.07039946 0.07039946
 0.04616779 0.13900587 0.07039946 0.06969673 0.0515755  0.07039946
 0.07039948 0.02351307]
[0.04244119 0.15016025 0.0550428  0.07039946 0.07039946 0.07039946
 0.04616779 0.13900584 0.07039946 0.06969673 0.0515755  0.07039946
 0.07039946 0.02351307]
[0.03572031 0.1563676  0.0491426  0.06593418 0.06593418 0.06593418
 0.04473548 0.12156961 0.06593418 0.09680662 0.07946183 0.06593418
 0.06593419 0.02059093]]