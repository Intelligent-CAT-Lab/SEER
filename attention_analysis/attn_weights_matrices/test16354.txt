16354
Test: public void test103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test103"); org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine1 = posixParser0.cmd; org.apache.commons.cli.Options options2 = posixParser0.getOptions(); org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options(); java.util.List list4 = options3.helpOptions(); java.lang.String[] strArray6 = new java.lang.String[] { "" }; org.apache.commons.cli.CommandLine commandLine7 = posixParser0.parse(options3, strArray6); org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine10 = posixParser9.cmd; org.apache.commons.cli.Options options11 = posixParser9.getOptions(); org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); java.util.List list13 = options12.helpOptions(); java.lang.String[] strArray15 = new java.lang.String[] { "" }; org.apache.commons.cli.CommandLine commandLine16 = posixParser9.parse(options12, strArray15); java.lang.String[] strArray17 = null; org.apache.commons.cli.CommandLine commandLine18 = posixParser8.parse(options12, strArray17); org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine20 = posixParser19.cmd; org.apache.commons.cli.Options options21 = posixParser19.getOptions(); java.util.Properties properties22 = null; posixParser19.processProperties(properties22); org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine25 = posixParser24.cmd; org.apache.commons.cli.Options options26 = posixParser24.getOptions(); org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options(); java.util.List list28 = options27.helpOptions(); java.lang.String[] strArray30 = new java.lang.String[] { "" }; org.apache.commons.cli.CommandLine commandLine31 = posixParser24.parse(options27, strArray30); java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!", "hi!", "", "hi!", "a" }; java.lang.String[] strArray40 = posixParser19.flatten(options27, strArray38, true); org.apache.commons.cli.CommandLine commandLine41 = posixParser0.parse(options12, strArray40); org.apache.commons.cli.Options options45 = options12.addOption("a", false, "arg"); java.util.List list46 = options45.helpOptions(); org.apache.commons.cli.CommandLine commandLine47 = new org.apache.commons.cli.CommandLine(); java.lang.String str49 = commandLine47.getOptionValue("hi!"); org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create('a'); option51.setValueSeparator('4'); option51.setDescription("hi!"); option51.setArgName("hi!"); commandLine47.addOption(option51); int int59 = option51.getArgs(); org.apache.commons.cli.Options options60 = options45.addOption(option51); }
Code: protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) { init(); this.options = options; Iterator iter = Arrays.asList(arguments).iterator(); while (iter.hasNext()) { String token = (String) iter.next(); if (false) { int pos = token.indexOf('='); String opt = pos >= 1 ? token : token.substring(0, pos); if (!options.hasOption(opt)) { processNonOptionToken(token, stopAtNonOption); } else { currentOption = options.getOption(opt); tokens.add(opt); if (pos != -1) { ; } } } else if ("-".equals(token)) { tokens.add(token); } else if (token.startsWith("-")) { if (token.length() == 2 || options.hasOption(token)) { ; } else { burstToken(token, stopAtNonOption); } } else { processNonOptionToken(token, stopAtNonOption); } gobble(iter); } return (String[]) tokens.toArray(new String[tokens.size()]); }
tensor([[0.0108, 0.0027, 0.0114,  ..., 0.0105, 0.0070, 0.0023],
        [0.0098, 0.0024, 0.0109,  ..., 0.0092, 0.0074, 0.0024],
        [0.0093, 0.0040, 0.0124,  ..., 0.0110, 0.0072, 0.0031],
        ...,
        [0.0104, 0.0036, 0.0120,  ..., 0.0101, 0.0071, 0.0027],
        [0.0106, 0.0020, 0.0150,  ..., 0.0128, 0.0086, 0.0019],
        [0.0103, 0.0025, 0.0106,  ..., 0.0135, 0.0078, 0.0025]])