17979
Test: public void test9() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test9"); com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.IR.name("[singleton]"); node1.setVarArgs(false); com.google.javascript.jscomp.Compiler compiler4 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.rhino.Node node6 = compiler4.parseTestCode("NUMBER 2.0"); boolean boolean7 = compiler4.isTypeCheckingEnabled(); boolean boolean8 = com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(node1, (com.google.javascript.jscomp.AbstractCompiler) compiler4); com.google.javascript.jscomp.FlowSensitiveInlineVariables flowSensitiveInlineVariables9 = new com.google.javascript.jscomp.FlowSensitiveInlineVariables((com.google.javascript.jscomp.AbstractCompiler) compiler4); com.google.javascript.jscomp.PassFactory passFactory11 = com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass(""); com.google.javascript.jscomp.Compiler compiler12 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.jscomp.CompilerPass compilerPass13 = passFactory11.create((com.google.javascript.jscomp.AbstractCompiler) compiler12); com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(15); compiler12.externAndJsRoot = node15; com.google.javascript.jscomp.PassFactory passFactory18 = com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass(""); com.google.javascript.jscomp.Compiler compiler19 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.jscomp.CompilerPass compilerPass20 = passFactory18.create((com.google.javascript.jscomp.AbstractCompiler) compiler19); com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(15); compiler19.externAndJsRoot = node22; com.google.javascript.jscomp.CheckRegExp checkRegExp24 = new com.google.javascript.jscomp.CheckRegExp((com.google.javascript.jscomp.AbstractCompiler) compiler19); com.google.javascript.jscomp.NodeTraversal nodeTraversal25 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler) compiler12, (com.google.javascript.jscomp.NodeTraversal.Callback) checkRegExp24); boolean boolean26 = nodeTraversal25.inGlobalScope(); com.google.javascript.rhino.InputId inputId27 = nodeTraversal25.getInputId(); flowSensitiveInlineVariables9.exitScope(nodeTraversal25); com.google.javascript.jscomp.PassFactory passFactory30 = com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass(""); com.google.javascript.jscomp.Compiler compiler31 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.jscomp.CompilerPass compilerPass32 = passFactory30.create((com.google.javascript.jscomp.AbstractCompiler) compiler31); com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(15); compiler31.externAndJsRoot = node34; compiler31.addToDebugLog("overriding prototype with non-object"); com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.IR.number((double) 2); com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.IR.pos(node39); compiler31.jsRoot = node40; com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.IR.number((double) 2); java.lang.String str44 = node43.toString(); boolean boolean45 = node43.hasOneChild(); com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.IR.getelem(node40, node43); com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(113, "[singleton]"); boolean boolean50 = com.google.javascript.jscomp.ControlFlowAnalysis.mayThrowException(node49); boolean boolean51 = node49.isContinue(); boolean boolean52 = com.google.javascript.jscomp.NodeUtil.isFunctionExpression(node49); boolean boolean53 = node49.isWhile(); boolean boolean54 = node49.isVar(); com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate mayBeStringResultPredicate55 = new com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate(); com.google.javascript.rhino.ErrorReporter errorReporter56 = null; com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56, true); com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {}; com.google.javascript.rhino.Node node60 = jSTypeRegistry58.createOptionalParameters(jSTypeArray59); int int61 = node60.getChildCount(); boolean boolean62 = mayBeStringResultPredicate55.apply(node60); boolean boolean64 = com.google.javascript.jscomp.ControlFlowAnalysis.isBreakTarget(node60, "goog.exportSymbol"); com.google.javascript.rhino.Node node65 = node49.useSourceInfoIfMissingFromForTree(node60); boolean boolean66 = node60.isParamList(); try { flowSensitiveInlineVariables9.process(node43, node60); } catch (java.lang.RuntimeException e) { } }
Code: public void process(Node externs, Node root) { (new NodeTraversal(compiler, this)).traverseRoots(externs, root); }
tensor([[0.0818, 0.0640, 0.0750, 0.0305, 0.1374, 0.1689, 0.0917, 0.0658, 0.0486,
         0.1649, 0.0405, 0.0311],
        [0.0804, 0.0600, 0.0804, 0.0242, 0.1682, 0.1857, 0.0936, 0.0609, 0.0487,
         0.1350, 0.0328, 0.0304],
        [0.0710, 0.0600, 0.0857, 0.0295, 0.1420, 0.1952, 0.0807, 0.0582, 0.0371,
         0.1819, 0.0378, 0.0207],
        [0.0752, 0.0731, 0.0985, 0.0328, 0.1429, 0.1438, 0.0951, 0.0676, 0.0532,
         0.1334, 0.0493, 0.0351],
        [0.0724, 0.0595, 0.0875, 0.0289, 0.1684, 0.1538, 0.1017, 0.0643, 0.0480,
         0.1621, 0.0305, 0.0229],
        [0.0781, 0.0520, 0.0811, 0.0374, 0.1560, 0.1541, 0.1060, 0.0512, 0.0534,
         0.1502, 0.0433, 0.0372],
        [0.0836, 0.0704, 0.0881, 0.0464, 0.1286, 0.1170, 0.1055, 0.0735, 0.0486,
         0.1498, 0.0465, 0.0418],
        [0.0686, 0.0548, 0.1017, 0.0282, 0.1376, 0.1590, 0.1006, 0.0688, 0.0449,
         0.1674, 0.0413, 0.0271],
        [0.0729, 0.0695, 0.0797, 0.0326, 0.1701, 0.1544, 0.1066, 0.0572, 0.0425,
         0.1511, 0.0376, 0.0256],
        [0.0779, 0.0572, 0.0806, 0.0314, 0.1468, 0.1486, 0.1035, 0.0595, 0.0430,
         0.1754, 0.0455, 0.0306],
        [0.0697, 0.0556, 0.0814, 0.0254, 0.1730, 0.1689, 0.1160, 0.0644, 0.0469,
         0.1395, 0.0373, 0.0220],
        [0.0635, 0.0537, 0.0984, 0.0328, 0.1979, 0.1285, 0.1114, 0.0595, 0.0535,
         0.1372, 0.0372, 0.0265]])