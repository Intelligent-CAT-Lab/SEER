101142
Test: public void test0212() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0212"); org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfEra(); org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now((org.joda.time.Chronology) iSOChronology0); org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.minuteOfHour(); org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField5 = gJChronology4.yearOfCentury(); org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology4); int int7 = dateTime6.getEra(); int int8 = dateTime6.getMillisOfSecond(); org.joda.time.DateTime.Property property9 = dateTime6.year(); org.joda.time.ReadableDuration readableDuration10 = null; org.joda.time.DateTime dateTime11 = dateTime6.plus(readableDuration10); int int12 = dateTime11.getMillisOfDay(); org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfDay(); int int14 = dateTime11.get(dateTimeFieldType13); org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField15 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField3, dateTimeFieldType13); java.util.Locale locale16 = null; int int17 = delegatedDateTimeField15.getMaximumShortTextLength(locale16); long long20 = delegatedDateTimeField15.getDifferenceAsLong((long) (byte) 1, (long) (-25200000)); long long23 = delegatedDateTimeField15.getDifferenceAsLong((long) 12, (long) 2760021); org.joda.time.DateTimeField dateTimeField24 = delegatedDateTimeField15.getWrappedField(); java.lang.String str25 = delegatedDateTimeField15.toString(); org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (short) -1); org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField29 = gJChronology28.yearOfCentury(); org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology28); int int31 = dateTime30.getEra(); int int32 = dateTime30.getYear(); boolean boolean33 = instant27.isBefore((org.joda.time.ReadableInstant) dateTime30); org.joda.time.LocalDate localDate34 = dateTime30.toLocalDate(); org.joda.time.LocalDate localDate36 = localDate34.plusDays(2757764); int int37 = localDate36.getDayOfMonth(); org.joda.time.LocalDate.Property property38 = localDate36.dayOfMonth(); org.joda.time.Interval interval39 = localDate36.toInterval(); org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField42 = gJChronology41.yearOfCentury(); org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology41); org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField45 = gJChronology44.yearOfCentury(); org.joda.time.DateTime dateTime46 = dateTime43.withChronology((org.joda.time.Chronology) gJChronology44); org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField49 = gJChronology48.yearOfCentury(); org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology48); org.joda.time.DurationField durationField51 = gJChronology48.eras(); org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology48); org.joda.time.ReadablePeriod readablePeriod53 = null; org.joda.time.LocalDate localDate55 = localDate52.withPeriodAdded(readablePeriod53, (-28800000)); org.joda.time.Interval interval56 = localDate52.toInterval(); org.joda.time.chrono.BasicChronology basicChronology57 = null; org.joda.time.chrono.GJEraDateTimeField gJEraDateTimeField58 = new org.joda.time.chrono.GJEraDateTimeField(basicChronology57); java.util.Locale locale59 = null; int int60 = gJEraDateTimeField58.getMaximumTextLength(locale59); org.joda.time.Instant instant62 = new org.joda.time.Instant((long) (short) -1); org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField64 = gJChronology63.yearOfCentury(); org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology63); int int66 = dateTime65.getEra(); int int67 = dateTime65.getYear(); boolean boolean68 = instant62.isBefore((org.joda.time.ReadableInstant) dateTime65); org.joda.time.LocalDate localDate69 = dateTime65.toLocalDate(); org.joda.time.LocalDate localDate71 = localDate69.plusDays(2757764); int int72 = localDate71.getDayOfMonth(); org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField76 = gJChronology75.yearOfCentury(); org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology75); org.joda.time.DurationField durationField78 = gJChronology75.eras(); org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology75); org.joda.time.ReadablePeriod readablePeriod80 = null; org.joda.time.LocalDate localDate82 = localDate79.withPeriodAdded(readablePeriod80, (-28800000)); org.joda.time.LocalDate.Property property83 = localDate79.dayOfMonth(); int[] intArray84 = localDate79.getValues(); int[] intArray86 = gJEraDateTimeField58.addWrapField((org.joda.time.ReadablePartial) localDate71, 0, intArray84, 899); gJChronology44.validate((org.joda.time.ReadablePartial) localDate52, intArray86); java.util.Locale locale89 = null; try { int[] intArray90 = delegatedDateTimeField15.set((org.joda.time.ReadablePartial) localDate36, 27, intArray86, "2021-07-09T17:45:56.507-07:00", locale89); } catch (org.joda.time.IllegalFieldValueException e) { } }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0056, 0.0185, 0.0105,  ..., 0.0063, 0.0325, 0.0026],
        [0.0060, 0.0168, 0.0117,  ..., 0.0058, 0.0212, 0.0031],
        [0.0051, 0.0218, 0.0112,  ..., 0.0067, 0.0283, 0.0021],
        ...,
        [0.0036, 0.0181, 0.0115,  ..., 0.0050, 0.0325, 0.0021],
        [0.0049, 0.0181, 0.0114,  ..., 0.0058, 0.0284, 0.0024],
        [0.0041, 0.0173, 0.0128,  ..., 0.0090, 0.0216, 0.0023]])