,method,test
0,"    public int update(Connection conn, String sql) throws SQLException {
        return this.update(conn, false, sql, (Object[]) null);
    }","  public void test0()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(13).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      try { 
        queryRunner0.update(connection1, "", javaType="");
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Wrong number of parameters: expected 13, was given 0 Query: , javaType= Parameters: []
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
1,"    public <T> T query(Connection conn, String sql, Object param, ResultSetHandler<T> rsh) throws SQLException {
        return this.<T>query(conn, false, sql, rsh, new Object[]{param});
    }","  public void test1()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null).when(preparedStatement0).executeQuery();
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      Integer integer0 = new Integer(0);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, integer0, (Integer) null);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, statementConfiguration0);
      Class<String> class0 = String.class;
      BeanHandler<String> beanHandler0 = new BeanHandler<String>(class0);
      // Undeclared exception!
      try { 
        queryRunner0.query(""org.apache.commons.dbutils.QueryRunner"", (Object) statementConfiguration0, (ResultSetHandler<String>) beanHandler0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.BeanHandler"", e);
      }
  }"
2,"    public <T> T query(Connection conn, String sql, Object param, ResultSetHandler<T> rsh) throws SQLException {
        return this.<T>query(conn, false, sql, rsh, new Object[]{param});
    }","  public void test2()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, (StatementConfiguration) null);
      ScalarHandler<String> scalarHandler0 = new ScalarHandler<String>((-1468));
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        queryRunner0.query("""", (ResultSetHandler<String>) scalarHandler0, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
3,"    public <T> T insertBatch(String sql, ResultSetHandler<T> rsh, Object[][] params) throws SQLException {
        return insertBatch(this.prepareConnection(), true, sql, rsh, params);
    }","  public void test3()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false);
      Class<Integer> class0 = Integer.class;
      BeanHandler<Object> beanHandler0 = new BeanHandler<Object>(class0);
      Object[][] objectArray0 = new Object[1][3];
      try { 
        queryRunner0.insertBatch(""mPet&P>lVteo(b&NQ"", (ResultSetHandler<Object>) beanHandler0, objectArray0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Wrong number of parameters: expected 0, was given 3 Query: mPet&P>lVteo(b&NQ Parameters: [[null, null, null]]
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
4,"    public <T> T insert(String sql, ResultSetHandler<T> rsh) throws SQLException {
        return insert(this.prepareConnection(), true, sql, rsh, (Object[]) null);
    }","  public void test4()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      ScalarHandler<Object> scalarHandler0 = new ScalarHandler<Object>();
      Object[] objectArray0 = new Object[9];
      try { 
        queryRunner0.insert(""`\""6G{ZgI["", (ResultSetHandler<Object>) scalarHandler0, objectArray0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Wrong number of parameters: expected 0, was given 9 Query: `\""6G{ZgI[ Parameters: [null, null, null, null, null, null, null, null, null]
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
5,"    public int execute(Connection conn, String sql, Object... params) throws SQLException {
        return this.execute(conn, false, sql, params);
    }","  public void test5()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner();
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(parameterMetaData0).when(callableStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      Integer integer0 = new Integer(0);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, (Integer) null, integer0, integer0);
      QueryRunner queryRunner1 = new QueryRunner(dataSource0, false, statementConfiguration0);
      Connection connection1 = queryRunner1.prepareConnection();
      Object[] objectArray0 = new Object[8];
      try { 
        queryRunner0.execute(connection1, ""k`c"", objectArray0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Wrong number of parameters: expected 0, was given 8 Query: k`c Parameters: [null, null, null, null, null, null, null, null]
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
6,"    public int execute(Connection conn, String sql, Object... params) throws SQLException {
        return this.execute(conn, false, sql, params);
    }","  public void test6()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-4617)).when(parameterMetaData0).getParameterCount();
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(parameterMetaData0).when(callableStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Object[] objectArray0 = new Object[0];
      Connection connection1 = queryRunner0.prepareConnection();
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>(""["");
      try { 
        queryRunner0.execute(connection1, ""["", (ResultSetHandler<Integer>) scalarHandler0, objectArray0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Wrong number of parameters: expected -4617, was given 0 Query: [ Parameters: []
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
7,"    public int update(Connection conn, String sql) throws SQLException {
        return this.update(conn, false, sql, (Object[]) null);
    }","  public void test7()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner();
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(callableStatement0).executeUpdate();
      doReturn((ParameterMetaData) null).when(callableStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0);
      Object[] objectArray0 = new Object[0];
      Connection connection1 = queryRunner1.prepareConnection();
      int int0 = queryRunner0.update(connection1, """", objectArray0);
}"
8,"    public int update(Connection conn, String sql) throws SQLException {
        return this.update(conn, false, sql, (Object[]) null);
    }","  public void test8()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      QueryRunner queryRunner0 = new QueryRunner();
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(3355).when(callableStatement0).executeUpdate();
      doReturn(parameterMetaData0).when(callableStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0);
      Object[] objectArray0 = new Object[0];
      Connection connection1 = queryRunner1.prepareConnection();
      int int0 = queryRunner0.update(connection1, """", objectArray0);
}"
9,"    public int update(Connection conn, String sql) throws SQLException {
        return this.update(conn, false, sql, (Object[]) null);
    }","  public void test9()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((-481)).when(preparedStatement0).executeUpdate();
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource1 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource1).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource1);
      Connection connection1 = queryRunner1.prepareConnection();
      Object[] objectArray0 = new Object[4];
      int int0 = queryRunner0.update(connection1, ""]d:?`[YsbKGGaAz"", objectArray0);
}"
10,"    public int update(Connection conn, String sql) throws SQLException {
        return this.update(conn, false, sql, (Object[]) null);
    }","  public void test10()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(preparedStatement0).executeUpdate();
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      int int0 = queryRunner0.update(connection1, ""OutParameter{sqlType="", (Object) queryRunner0);
}"
11,"    public int update(Connection conn, String sql) throws SQLException {
        return this.update(conn, false, sql, (Object[]) null);
    }","  public void test11()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((-845)).when(preparedStatement0).executeUpdate();
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      int int0 = queryRunner0.update(connection1, ""OutParameter{sqlType="", (Object) queryRunner0);
}"
12,"    public int update(Connection conn, String sql) throws SQLException {
        return this.update(conn, false, sql, (Object[]) null);
    }","  public void test12()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(preparedStatement0).executeUpdate();
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      int int0 = queryRunner0.update(connection1, "", javaType="");
}"
13,"    public int update(Connection conn, String sql) throws SQLException {
        return this.update(conn, false, sql, (Object[]) null);
    }","  public void test13()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((-53)).when(preparedStatement0).executeUpdate();
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      int int0 = queryRunner0.update(connection1, "", javaType="");
}"
14,"    public int update(Connection conn, String sql) throws SQLException {
        return this.update(conn, false, sql, (Object[]) null);
    }","  public void test14()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(preparedStatement0).executeUpdate();
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      int int0 = queryRunner0.update("""", (Object[]) null);
}"
15,"    public int update(Connection conn, String sql) throws SQLException {
        return this.update(conn, false, sql, (Object[]) null);
    }","  public void test15()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(preparedStatement0).executeUpdate();
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      int int0 = queryRunner0.update("""", (Object[]) null);
}"
16,"    public int update(Connection conn, String sql) throws SQLException {
        return this.update(conn, false, sql, (Object[]) null);
    }","  public void test16()  throws Throwable  {
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(callableStatement0).executeUpdate();
      doReturn((ParameterMetaData) null).when(callableStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection1).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0, connection1).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      queryRunner0.prepareConnection();
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>(""{"");
      int int0 = queryRunner0.update(""{"", (Object) scalarHandler0);
}"
17,"    public int update(Connection conn, String sql) throws SQLException {
        return this.update(conn, false, sql, (Object[]) null);
    }","  public void test17()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(callableStatement0).executeUpdate();
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection1).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0, connection1).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, (StatementConfiguration) null);
      queryRunner0.prepareConnection();
      int int0 = queryRunner0.update("""");
}"
18,"    public <T> T insert(String sql, ResultSetHandler<T> rsh) throws SQLException {
        return insert(this.prepareConnection(), true, sql, rsh, (Object[]) null);
    }","  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(2640);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(statementConfiguration0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      ResultSet resultSet1 = queryRunner0.wrap(resultSet0);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(preparedStatement0).executeUpdate();
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      doReturn(resultSet1).when(preparedStatement0).getGeneratedKeys();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0, false);
      Connection connection1 = queryRunner1.prepareConnection();
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>();
      Integer integer1 = queryRunner0.insert(connection1, ""Null ResultSetHandler"", (ResultSetHandler<Integer>) scalarHandler0);
}"
19,"    public <T> T insert(String sql, ResultSetHandler<T> rsh) throws SQLException {
        return insert(this.prepareConnection(), true, sql, rsh, (Object[]) null);
    }","  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(2640);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(statementConfiguration0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      ResultSet resultSet1 = queryRunner0.wrap(resultSet0);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(preparedStatement0).executeUpdate();
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      doReturn(resultSet1).when(preparedStatement0).getGeneratedKeys();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0, false);
      ScalarHandler<Annotation> scalarHandler0 = new ScalarHandler<Annotation>();
      Annotation annotation0 = queryRunner1.insert(""4Oh-ya"", (ResultSetHandler<Annotation>) scalarHandler0);
}"
20,"    public int execute(Connection conn, String sql, Object... params) throws SQLException {
        return this.execute(conn, false, sql, params);
    }","  public void test20()  throws Throwable  {
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(callableStatement0).execute();
      doReturn(1658).when(callableStatement0).getUpdateCount();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, (StatementConfiguration) null);
      Object[] objectArray0 = new Object[0];
      Connection connection1 = queryRunner0.prepareConnection();
      int int0 = queryRunner0.execute(connection1, """", objectArray0);
}"
21,"    public int execute(Connection conn, String sql, Object... params) throws SQLException {
        return this.execute(conn, false, sql, params);
    }","  public void test21()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(callableStatement0).execute();
      doReturn(parameterMetaData0).when(callableStatement0).getParameterMetaData();
      doReturn((-1144)).when(callableStatement0).getUpdateCount();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false);
      Connection connection1 = queryRunner0.prepareConnection();
      int int0 = queryRunner0.execute(connection1, """", (Object[]) null);
}"
22,"    public int execute(Connection conn, String sql, Object... params) throws SQLException {
        return this.execute(conn, false, sql, params);
    }","  public void test22()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      QueryRunner queryRunner0 = new QueryRunner();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      ResultSet resultSet1 = queryRunner0.wrap(resultSet0);
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(callableStatement0).execute();
      doReturn(parameterMetaData0).when(callableStatement0).getParameterMetaData();
      doReturn(false).when(callableStatement0).getMoreResults();
      doReturn(resultSet1).when(callableStatement0).getResultSet();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0);
      Object[] objectArray0 = new Object[0];
      Connection connection1 = queryRunner1.prepareConnection();
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>(""{"");
      List<Integer> list0 = queryRunner1.execute(connection1, """", (ResultSetHandler<Integer>) scalarHandler0, objectArray0);
}"
23,"    public int execute(Connection conn, String sql, Object... params) throws SQLException {
        return this.execute(conn, false, sql, params);
    }","  public void test23()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner(false);
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(callableStatement0).execute();
      doReturn(1).when(callableStatement0).getUpdateCount();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      CallableStatement callableStatement1 = queryRunner0.prepareCall(connection0, """");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement1).when(connection1).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection1).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0, true);
      Object[] objectArray0 = new Object[6];
      int int0 = queryRunner1.execute("""", objectArray0);
}"
24,"    public int execute(Connection conn, String sql, Object... params) throws SQLException {
        return this.execute(conn, false, sql, params);
    }","  public void test24()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner(false);
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(callableStatement0).execute();
      doReturn((-2897)).when(callableStatement0).getUpdateCount();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      CallableStatement callableStatement1 = queryRunner0.prepareCall(connection0, """");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement1).when(connection1).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection1).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0, true);
      Object[] objectArray0 = new Object[6];
      int int0 = queryRunner1.execute("""", objectArray0);
}"
25,"    public int[] batch(Connection conn, String sql, Object[][] params) throws SQLException {
        return this.batch(conn, false, sql, params);
    }","  public void test25()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner((DataSource) null);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      doReturn((int[]) null).when(preparedStatement0).executeBatch();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      PreparedStatement preparedStatement1 = queryRunner0.prepareStatement(connection0, ""g.2"", 439);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement1).when(connection1).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection1).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0);
      Connection connection2 = queryRunner1.prepareConnection();
      Object[][] objectArray0 = new Object[3][6];
      queryRunner1.batch(connection2, "">#Y$)X`jJ[n"", objectArray0);
}"
26,"    public int[] batch(Connection conn, String sql, Object[][] params) throws SQLException {
        return this.batch(conn, false, sql, params);
    }","  public void test26()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner((DataSource) null);
      int[] intArray0 = new int[0];
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      doReturn(intArray0).when(preparedStatement0).executeBatch();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      PreparedStatement preparedStatement1 = queryRunner0.prepareStatement(connection0, ""g.2"", 439);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement1).when(connection1).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection1).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0);
      Connection connection2 = queryRunner1.prepareConnection();
      Object[][] objectArray0 = new Object[3][6];
      queryRunner1.batch(connection2, "">#Y$)X`jJ[n"", objectArray0);
}"
27,"    public int[] batch(Connection conn, String sql, Object[][] params) throws SQLException {
        return this.batch(conn, false, sql, params);
    }","  public void test27()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner((DataSource) null);
      int[] intArray0 = new int[4];
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      doReturn(intArray0).when(preparedStatement0).executeBatch();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      PreparedStatement preparedStatement1 = queryRunner0.prepareStatement(connection0, ""g.2"", 439);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement1).when(connection1).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection1).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0);
      Object[][] objectArray0 = new Object[3][6];
      queryRunner1.batch("">o"", objectArray0);
}"
28,"    public int update(Connection conn, String sql) throws SQLException {
        return this.update(conn, false, sql, (Object[]) null);
    }","  public void test28()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false, (StatementConfiguration) null);
      Connection connection1 = queryRunner0.prepareConnection();
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        queryRunner0.update(connection1, ""s^JD{GZ\bAZuqkYgmG!"", objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
29,"    public int update(Connection conn, String sql) throws SQLException {
        return this.update(conn, false, sql, (Object[]) null);
    }","  public void test29()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-3087));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false, statementConfiguration0);
      try { 
        queryRunner0.update((Connection) null, ""A9&0}uFuT.xb"", (Object) integer0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null connection
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
30,"    public int update(Connection conn, String sql) throws SQLException {
        return this.update(conn, false, sql, (Object[]) null);
    }","  public void test30()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false);
      Connection connection1 = queryRunner0.prepareConnection();
      // Undeclared exception!
      try { 
        queryRunner0.update(connection1, ""gJw0':e.s6FWgm_M?xg"", (Object) ""gJw0':e.s6FWgm_M?xg"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
31,"    public int update(Connection conn, String sql) throws SQLException {
        return this.update(conn, false, sql, (Object[]) null);
    }","  public void test31()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      // Undeclared exception!
      try { 
        queryRunner0.update("""", (Object[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
32,"    public int update(Connection conn, String sql) throws SQLException {
        return this.update(conn, false, sql, (Object[]) null);
    }","  public void test32()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      ScalarHandler<Object> scalarHandler0 = new ScalarHandler<Object>(""Null SQL statement"");
      // Undeclared exception!
      try { 
        queryRunner0.update("""", (Object) scalarHandler0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
33,"    public <T> T query(Connection conn, String sql, Object param, ResultSetHandler<T> rsh) throws SQLException {
        return this.<T>query(conn, false, sql, rsh, new Object[]{param});
    }","  public void test33()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, (Integer) null, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, statementConfiguration0);
      Object[] objectArray0 = new Object[0];
      ScalarHandler<Object> scalarHandler0 = new ScalarHandler<Object>();
      try { 
        queryRunner0.query((Connection) null, ""<YeLD;Q>rOWmNIr|"", objectArray0, (ResultSetHandler<Object>) scalarHandler0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null connection
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
34,"    public <T> T query(Connection conn, String sql, Object param, ResultSetHandler<T> rsh) throws SQLException {
        return this.<T>query(conn, false, sql, rsh, new Object[]{param});
    }","  public void test34()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      Integer integer0 = new Integer(315);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, (Integer) null, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, statementConfiguration0);
      Connection connection1 = queryRunner0.prepareConnection();
      ScalarHandler<OutParameter<Object>> scalarHandler0 = new ScalarHandler<OutParameter<Object>>();
      // Undeclared exception!
      try { 
        queryRunner0.query(connection1, ""org.apache.commons.dbutils.BasicRowProcessor"", (ResultSetHandler<OutParameter<Object>>) scalarHandler0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
35,"    public <T> T query(Connection conn, String sql, Object param, ResultSetHandler<T> rsh) throws SQLException {
        return this.<T>query(conn, false, sql, rsh, new Object[]{param});
    }","  public void test35()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      Connection connection1 = queryRunner0.prepareConnection();
      ScalarHandler<Object> scalarHandler0 = new ScalarHandler<Object>();
      // Undeclared exception!
      try { 
        queryRunner0.query(connection1, "", javaType="", (Object) ""+EZK"", (ResultSetHandler<Object>) scalarHandler0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
36,"    public <T> T query(Connection conn, String sql, Object param, ResultSetHandler<T> rsh) throws SQLException {
        return this.<T>query(conn, false, sql, rsh, new Object[]{param});
    }","  public void test36()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Object[] objectArray0 = new Object[4];
      Class<Integer> class0 = Integer.class;
      BeanProcessor beanProcessor0 = new BeanProcessor();
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor(beanProcessor0);
      BeanHandler<Integer> beanHandler0 = new BeanHandler<Integer>(class0, basicRowProcessor0);
      // Undeclared exception!
      try { 
        queryRunner0.query(""ukE\""J-yOrMPOyrm$"", objectArray0, (ResultSetHandler<Integer>) beanHandler0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
37,"    public <T> T query(Connection conn, String sql, Object param, ResultSetHandler<T> rsh) throws SQLException {
        return this.<T>query(conn, false, sql, rsh, new Object[]{param});
    }","  public void test37()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      Object[] objectArray0 = new Object[3];
      try { 
        queryRunner0.query("""", (ResultSetHandler<Integer>) null, objectArray0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null ResultSetHandler
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
38,"    public <T> T query(Connection conn, String sql, Object param, ResultSetHandler<T> rsh) throws SQLException {
        return this.<T>query(conn, false, sql, rsh, new Object[]{param});
    }","  public void test38()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      Integer integer0 = new Integer(1);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, statementConfiguration0);
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>(""S5`dgc4>~d0%83oo}Mp"");
      // Undeclared exception!
      try { 
        queryRunner0.query(""[7T,-@}B~X?b"", (ResultSetHandler<Integer>) scalarHandler0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
39,"    public <T> T insert(String sql, ResultSetHandler<T> rsh) throws SQLException {
        return insert(this.prepareConnection(), true, sql, rsh, (Object[]) null);
    }","  public void test39()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, statementConfiguration0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource1 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource1).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource1, statementConfiguration0);
      Connection connection1 = queryRunner1.prepareConnection();
      ScalarHandler<String> scalarHandler0 = new ScalarHandler<String>(""Null ResultSetHandler"");
      // Undeclared exception!
      try { 
        queryRunner0.insert(connection1, "" "", (ResultSetHandler<String>) scalarHandler0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
40,"    public <T> T insert(String sql, ResultSetHandler<T> rsh) throws SQLException {
        return insert(this.prepareConnection(), true, sql, rsh, (Object[]) null);
    }","  public void test40()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Object[] objectArray0 = new Object[6];
      ScalarHandler<Object> scalarHandler0 = new ScalarHandler<Object>("""");
      // Undeclared exception!
      try { 
        queryRunner0.insert("""", (ResultSetHandler<Object>) scalarHandler0, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
41,"    public int execute(Connection conn, String sql, Object... params) throws SQLException {
        return this.execute(conn, false, sql, params);
    }","  public void test41()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      QueryRunner queryRunner0 = new QueryRunner();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      ResultSet resultSet1 = queryRunner0.wrap(resultSet0);
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(callableStatement0).execute();
      doReturn(parameterMetaData0).when(callableStatement0).getParameterMetaData();
      doReturn(true).when(callableStatement0).getMoreResults();
      doReturn(resultSet1, (ResultSet) null).when(callableStatement0).getResultSet();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0);
      String string0 = """";
      Object[] objectArray0 = new Object[0];
      Class<String> class0 = String.class;
      BeanProcessor beanProcessor0 = new BeanProcessor();
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor(beanProcessor0);
      BeanHandler<String> beanHandler0 = new BeanHandler<String>(class0, basicRowProcessor0);
      Connection connection1 = queryRunner1.prepareConnection();
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>(""{"");
      // Undeclared exception!
      try { 
        queryRunner1.execute(connection1, """", (ResultSetHandler<Integer>) scalarHandler0, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.ScalarHandler"", e);
      }
  }"
42,"    public int execute(Connection conn, String sql, Object... params) throws SQLException {
        return this.execute(conn, false, sql, params);
    }","  public void test42()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true).when(resultSet0).next();
      ResultSet resultSet1 = queryRunner0.wrap(resultSet0);
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(callableStatement0).execute();
      doReturn(true).when(callableStatement0).getMoreResults();
      doReturn(resultSet1, (ResultSet) null).when(callableStatement0).getResultSet();
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection1).prepareCall(anyString());
      DataSource dataSource1 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection1).when(dataSource1).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource1, true, (StatementConfiguration) null);
      int int0 = (-1468);
      Object[] objectArray0 = new Object[0];
      String string0 = """";
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>();
      // Undeclared exception!
      try { 
        queryRunner1.execute("""", (ResultSetHandler<Integer>) scalarHandler0, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.ScalarHandler"", e);
      }
  }"
43,"    public int[] batch(Connection conn, String sql, Object[][] params) throws SQLException {
        return this.batch(conn, false, sql, params);
    }","  public void test43()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      Object[][] objectArray0 = new Object[3][6];
      // Undeclared exception!
      try { 
        queryRunner0.batch(connection1, "">#Y$)X`jJ[n"", objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
44,"    public int execute(Connection conn, String sql, Object... params) throws SQLException {
        return this.execute(conn, false, sql, params);
    }","  public void test44()  throws Throwable  {
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(callableStatement0).execute();
      doReturn(0).when(callableStatement0).getUpdateCount();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, (StatementConfiguration) null);
      Connection connection1 = queryRunner0.prepareConnection();
      int int0 = queryRunner0.execute(connection1, """", (Object[]) null);
}"
45,"    public int execute(Connection conn, String sql, Object... params) throws SQLException {
        return this.execute(conn, false, sql, params);
    }","  public void test45()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      ResultSet resultSet1 = queryRunner0.wrap(resultSet0);
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(callableStatement0).execute();
      doReturn(false).when(callableStatement0).getMoreResults();
      doReturn(resultSet1).when(callableStatement0).getResultSet();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      DataSource dataSource1 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource1).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource1, true, (StatementConfiguration) null);
      Object[] objectArray0 = new Object[0];
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>();
      List<Integer> list0 = queryRunner1.execute("""", (ResultSetHandler<Integer>) scalarHandler0, objectArray0);
}"
46,"    public int execute(Connection conn, String sql, Object... params) throws SQLException {
        return this.execute(conn, false, sql, params);
    }","  public void test46()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Object[] objectArray0 = new Object[2];
      try { 
        queryRunner0.execute(""g,52hi]T]&69"", (ResultSetHandler<OutParameter<String>>) null, objectArray0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null ResultSetHandler
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
47,"    public int execute(Connection conn, String sql, Object... params) throws SQLException {
        return this.execute(conn, false, sql, params);
    }","  public void test47()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false);
      Connection connection1 = queryRunner0.prepareConnection();
      try { 
        queryRunner0.execute(connection1, """", (ResultSetHandler<Object>) null, (Object[]) null);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null ResultSetHandler
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
48,"    public int execute(Connection conn, String sql, Object... params) throws SQLException {
        return this.execute(conn, false, sql, params);
    }","  public void test48()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[7];
      QueryRunner queryRunner0 = new QueryRunner((DataSource) null);
      ScalarHandler<Object> scalarHandler0 = new ScalarHandler<Object>();
      try { 
        queryRunner0.execute(connection0, (String) null, (ResultSetHandler<Object>) scalarHandler0, objectArray0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
49,"    public int execute(Connection conn, String sql, Object... params) throws SQLException {
        return this.execute(conn, false, sql, params);
    }","  public void test49()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false);
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>(1392);
      try { 
        queryRunner0.execute((String) null, (ResultSetHandler<Integer>) scalarHandler0, (Object[]) null);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
50,"    public int execute(Connection conn, String sql, Object... params) throws SQLException {
        return this.execute(conn, false, sql, params);
    }","  public void test50()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = Integer.valueOf(444);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, statementConfiguration0);
      Class<Object> class0 = Object.class;
      BeanHandler<Object> beanHandler0 = new BeanHandler<Object>(class0);
      Object[] objectArray0 = new Object[5];
      try { 
        queryRunner0.execute((Connection) null, ""ng0U|<n=@<'7-LZ{"", (ResultSetHandler<Object>) beanHandler0, objectArray0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null connection
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
51,"    public int execute(Connection conn, String sql, Object... params) throws SQLException {
        return this.execute(conn, false, sql, params);
    }","  public void test51()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((CallableStatement) null).when(connection0).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        queryRunner0.execute("""", objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
52,"    public int execute(Connection conn, String sql, Object... params) throws SQLException {
        return this.execute(conn, false, sql, params);
    }","  public void test52()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((CallableStatement) null).when(connection0).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      Connection connection1 = queryRunner0.prepareConnection();
      // Undeclared exception!
      try { 
        queryRunner0.execute(connection1, """", (Object[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
53,"    public int execute(Connection conn, String sql, Object... params) throws SQLException {
        return this.execute(conn, false, sql, params);
    }","  public void test53()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner(false);
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(callableStatement0).execute();
      doReturn(0).when(callableStatement0).getUpdateCount();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      CallableStatement callableStatement1 = queryRunner0.prepareCall(connection0, """");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement1).when(connection1).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection1).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0, true);
      Object[] objectArray0 = new Object[6];
      int int0 = queryRunner1.execute("""", objectArray0);
}"
54,"    public int execute(Connection conn, String sql, Object... params) throws SQLException {
        return this.execute(conn, false, sql, params);
    }","  public void test54()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, (StatementConfiguration) null);
      Connection connection1 = queryRunner0.prepareConnection();
      try { 
        queryRunner0.execute(connection1, (String) null, (Object[]) null);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
55,"    public int execute(Connection conn, String sql, Object... params) throws SQLException {
        return this.execute(conn, false, sql, params);
    }","  public void test55()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      try { 
        queryRunner0.execute((String) null, (Object[]) null);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
56,"    public int execute(Connection conn, String sql, Object... params) throws SQLException {
        return this.execute(conn, false, sql, params);
    }","  public void test56()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(1);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, (Integer) null, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false, statementConfiguration0);
      Object[] objectArray0 = new Object[6];
      try { 
        queryRunner0.execute((Connection) null, ""-l&|K"", objectArray0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null connection
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
57,"    public <T> T insertBatch(String sql, ResultSetHandler<T> rsh, Object[][] params) throws SQLException {
        return insertBatch(this.prepareConnection(), true, sql, rsh, params);
    }","  public void test57()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((CallableStatement) null).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Object[][] objectArray0 = new Object[1][6];
      // Undeclared exception!
      try { 
        queryRunner0.insertBatch("""", (ResultSetHandler<String>) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
58,"    public <T> T insertBatch(String sql, ResultSetHandler<T> rsh, Object[][] params) throws SQLException {
        return insertBatch(this.prepareConnection(), true, sql, rsh, params);
    }","  public void test58()  throws Throwable  {
      Integer integer0 = new Integer(2640);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(statementConfiguration0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      ResultSet resultSet1 = queryRunner0.wrap(resultSet0);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      doReturn((int[]) null).when(preparedStatement0).executeBatch();
      doReturn(resultSet1).when(preparedStatement0).getGeneratedKeys();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0, false);
      Class<Integer> class0 = Integer.class;
      BeanHandler<Object> beanHandler0 = new BeanHandler<Object>(class0);
      Object[][] objectArray0 = new Object[1][3];
      Connection connection1 = queryRunner1.prepareConnection();
      queryRunner1.insertBatch(connection1, ""mPet&P>lVteo(b&NQ"", (ResultSetHandler<Object>) beanHandler0, objectArray0);
}"
59,"    public <T> T insertBatch(String sql, ResultSetHandler<T> rsh, Object[][] params) throws SQLException {
        return insertBatch(this.prepareConnection(), true, sql, rsh, params);
    }","  public void test59()  throws Throwable  {
      Integer integer0 = new Integer(2640);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(statementConfiguration0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      ResultSet resultSet1 = queryRunner0.wrap(resultSet0);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      doReturn((int[]) null).when(preparedStatement0).executeBatch();
      doReturn(resultSet1).when(preparedStatement0).getGeneratedKeys();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0, false);
      Class<Integer> class0 = Integer.class;
      BeanHandler<Object> beanHandler0 = new BeanHandler<Object>(class0);
      Object[][] objectArray0 = new Object[1][3];
      queryRunner1.insertBatch(""mPet&P>lVteo(b&NQ"", (ResultSetHandler<Object>) beanHandler0, objectArray0);
}"
60,"    public <T> T insertBatch(String sql, ResultSetHandler<T> rsh, Object[][] params) throws SQLException {
        return insertBatch(this.prepareConnection(), true, sql, rsh, params);
    }","  public void test60()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      ScalarHandler<String> scalarHandler0 = new ScalarHandler<String>();
      try { 
        queryRunner0.insertBatch(""Null parameters. If parameters aren't need, pass an empty array."", (ResultSetHandler<String>) scalarHandler0, (Object[][]) null);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null parameters. If parameters aren't need, pass an empty array.
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
61,"    public <T> T insertBatch(String sql, ResultSetHandler<T> rsh, Object[][] params) throws SQLException {
        return insertBatch(this.prepareConnection(), true, sql, rsh, params);
    }","  public void test61()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      ScalarHandler<Object> scalarHandler0 = new ScalarHandler<Object>("""");
      try { 
        queryRunner0.insertBatch(connection1, """", (ResultSetHandler<Object>) scalarHandler0, (Object[][]) null);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null parameters. If parameters aren't need, pass an empty array.
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
62,"    public <T> T insertBatch(String sql, ResultSetHandler<T> rsh, Object[][] params) throws SQLException {
        return insertBatch(this.prepareConnection(), true, sql, rsh, params);
    }","  public void test62()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Class<String> class0 = String.class;
      BeanProcessor beanProcessor0 = new BeanProcessor();
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor(beanProcessor0);
      BeanHandler<String> beanHandler0 = new BeanHandler<String>(class0, basicRowProcessor0);
      Connection connection1 = queryRunner0.prepareConnection();
      Object[][] objectArray0 = new Object[3][7];
      try { 
        queryRunner0.insertBatch(connection1, (String) null, (ResultSetHandler<String>) beanHandler0, objectArray0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
63,"    public <T> T insertBatch(String sql, ResultSetHandler<T> rsh, Object[][] params) throws SQLException {
        return insertBatch(this.prepareConnection(), true, sql, rsh, params);
    }","  public void test63()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      Integer integer0 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false, statementConfiguration0);
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>();
      try { 
        queryRunner0.insertBatch((String) null, (ResultSetHandler<Integer>) scalarHandler0, (Object[][]) null);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
64,"    public <T> T insertBatch(String sql, ResultSetHandler<T> rsh, Object[][] params) throws SQLException {
        return insertBatch(this.prepareConnection(), true, sql, rsh, params);
    }","  public void test64()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-740));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, statementConfiguration0);
      try { 
        queryRunner0.insertBatch((Connection) null, ""c}2"", (ResultSetHandler<OutParameter<Object>>) null, (Object[][]) null);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null connection
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
65,"    public <T> T insert(String sql, ResultSetHandler<T> rsh) throws SQLException {
        return insert(this.prepareConnection(), true, sql, rsh, (Object[]) null);
    }","  public void test65()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      ResultSet resultSet1 = queryRunner0.wrap(resultSet0);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(preparedStatement0).executeUpdate();
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      doReturn(resultSet1).when(preparedStatement0).getGeneratedKeys();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0);
      ScalarHandler<Object> scalarHandler0 = new ScalarHandler<Object>();
      Object[] objectArray0 = new Object[9];
      Object object0 = queryRunner1.insert(""`\""6G{ZgI["", (ResultSetHandler<Object>) scalarHandler0, objectArray0);
}"
66,"    public <T> T insert(String sql, ResultSetHandler<T> rsh) throws SQLException {
        return insert(this.prepareConnection(), true, sql, rsh, (Object[]) null);
    }","  public void test66()  throws Throwable  {
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, (Integer) null, (Integer) null, (Integer) null);
      QueryRunner queryRunner0 = new QueryRunner(statementConfiguration0);
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      ResultSet resultSet1 = queryRunner0.wrap(resultSet0);
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(callableStatement0).executeUpdate();
      doReturn(parameterMetaData0).when(callableStatement0).getParameterMetaData();
      doReturn(resultSet1).when(callableStatement0).getGeneratedKeys();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      CallableStatement callableStatement1 = queryRunner0.prepareCall(connection0, ""'zyR&cmYX"");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement1).when(connection1).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection1).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0, false);
      Connection connection2 = queryRunner1.prepareConnection();
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>();
      Integer integer0 = queryRunner1.insert(connection2, ""N2}nFrw@wlQlOmk6~3+"", (ResultSetHandler<Integer>) scalarHandler0, (Object[]) null);
}"
67,"    public <T> T insert(String sql, ResultSetHandler<T> rsh) throws SQLException {
        return insert(this.prepareConnection(), true, sql, rsh, (Object[]) null);
    }","  public void test67()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      try { 
        queryRunner0.insert(connection1, "": incompatible types, cannot convert "", (ResultSetHandler<Object>) null, (Object[]) null);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null ResultSetHandler
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
68,"    public <T> T insert(String sql, ResultSetHandler<T> rsh) throws SQLException {
        return insert(this.prepareConnection(), true, sql, rsh, (Object[]) null);
    }","  public void test68()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Class<String> class0 = String.class;
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      BeanHandler<Object> beanHandler0 = new BeanHandler<Object>(class0, basicRowProcessor0);
      try { 
        queryRunner0.insert((String) null, (ResultSetHandler<Object>) beanHandler0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
69,"    public <T> T insert(String sql, ResultSetHandler<T> rsh) throws SQLException {
        return insert(this.prepareConnection(), true, sql, rsh, (Object[]) null);
    }","  public void test69()  throws Throwable  {
      Integer integer0 = new Integer(1172);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, (Integer) null, (Integer) null, (Integer) null, integer0);
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, statementConfiguration0);
      ScalarHandler<Object> scalarHandler0 = new ScalarHandler<Object>();
      try { 
        queryRunner0.insert(""org.apache.commons.dbutils.QueryRunner"", (ResultSetHandler<Object>) scalarHandler0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null connection
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
70,"    public int update(Connection conn, String sql) throws SQLException {
        return this.update(conn, false, sql, (Object[]) null);
    }","  public void test70()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(125).when(preparedStatement0).executeUpdate();
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection1).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0, connection1).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      queryRunner0.update("""", (Object[]) null);
      Connection connection2 = queryRunner0.prepareConnection();
      // Undeclared exception!
      try { 
        queryRunner0.update(connection2, "", javaType="");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
71,"    public int update(Connection conn, String sql) throws SQLException {
        return this.update(conn, false, sql, (Object[]) null);
    }","  public void test71()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      try { 
        queryRunner0.update((String) null);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
72,"    public <T> T query(Connection conn, String sql, Object param, ResultSetHandler<T> rsh) throws SQLException {
        return this.<T>query(conn, false, sql, rsh, new Object[]{param});
    }","  public void test72()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      Object[] objectArray0 = new Object[9];
      try { 
        queryRunner0.query(connection1, """", (ResultSetHandler<String>) null, objectArray0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null ResultSetHandler
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
73,"    public <T> T query(Connection conn, String sql, Object param, ResultSetHandler<T> rsh) throws SQLException {
        return this.<T>query(conn, false, sql, rsh, new Object[]{param});
    }","  public void test73()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      try { 
        queryRunner0.query(""6"", (Object) ""6"", (ResultSetHandler<Object>) null);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null ResultSetHandler
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
74,"    public <T> T query(Connection conn, String sql, Object param, ResultSetHandler<T> rsh) throws SQLException {
        return this.<T>query(conn, false, sql, rsh, new Object[]{param});
    }","  public void test74()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Object[] objectArray0 = new Object[3];
      ScalarHandler<Object> scalarHandler0 = new ScalarHandler<Object>((String) null);
      try { 
        queryRunner0.query((String) null, objectArray0, (ResultSetHandler<Object>) scalarHandler0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
75,"    public int[] batch(Connection conn, String sql, Object[][] params) throws SQLException {
        return this.batch(conn, false, sql, params);
    }","  public void test75()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Object[][] objectArray0 = new Object[1][6];
      // Undeclared exception!
      try { 
        queryRunner0.batch(""OutParameter{sqlType="", objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
76,"    public int[] batch(Connection conn, String sql, Object[][] params) throws SQLException {
        return this.batch(conn, false, sql, params);
    }","  public void test76()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner((DataSource) null);
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(parameterMetaData0).getParameterCount();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(parameterMetaData0).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      PreparedStatement preparedStatement1 = queryRunner0.prepareStatement(connection0, ""g.2"", 4469);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement1).when(connection1).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection1).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0);
      Connection connection2 = queryRunner1.prepareConnection();
      Object[][] objectArray0 = new Object[3][6];
      try { 
        queryRunner1.batch(connection2, """", objectArray0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Wrong number of parameters: expected -1, was given 6 Query:  Parameters: [[null, null, null, null, null, null], [null, null, null, null, null, null], [null, null, null, null, null, null]]
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
77,"    public int[] batch(Connection conn, String sql, Object[][] params) throws SQLException {
        return this.batch(conn, false, sql, params);
    }","  public void test77()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner((DataSource) null);
      int[] intArray0 = new int[3];
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      doReturn(intArray0).when(preparedStatement0).executeBatch();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      PreparedStatement preparedStatement1 = queryRunner0.prepareStatement(connection0, ""g.2"", 439);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement1).when(connection1).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection1).when(dataSource0).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource0);
      Connection connection2 = queryRunner1.prepareConnection();
      Object[][] objectArray0 = new Object[3][6];
      queryRunner1.batch(connection2, "">#Y$)X`jJ[n"", objectArray0);
}"
78,"    public int[] batch(Connection conn, String sql, Object[][] params) throws SQLException {
        return this.batch(conn, false, sql, params);
    }","  public void test78()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      try { 
        queryRunner0.batch("""", (Object[][]) null);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null parameters. If parameters aren't need, pass an empty array.
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
79,"    public int[] batch(Connection conn, String sql, Object[][] params) throws SQLException {
        return this.batch(conn, false, sql, params);
    }","  public void test79()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      doReturn((int[]) null).when(preparedStatement0).executeBatch();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Object[][] objectArray0 = new Object[1][6];
      queryRunner0.batch(""OutParameter{sqlType="", objectArray0);
}"
80,"    public int[] batch(Connection conn, String sql, Object[][] params) throws SQLException {
        return this.batch(conn, false, sql, params);
    }","  public void test80()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      Connection connection1 = queryRunner0.prepareConnection();
      Object[][] objectArray0 = new Object[6][2];
      try { 
        queryRunner0.batch(connection1, (String) null, objectArray0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
81,"    public int[] batch(Connection conn, String sql, Object[][] params) throws SQLException {
        return this.batch(conn, false, sql, params);
    }","  public void test81()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Object[][] objectArray0 = new Object[6][6];
      try { 
        queryRunner0.batch((Connection) null, (String) null, objectArray0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null connection
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
82,"    public <T> T insert(String sql, ResultSetHandler<T> rsh) throws SQLException {
        return insert(this.prepareConnection(), true, sql, rsh, (Object[]) null);
    }","  public void test82()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Class<Object> class0 = Object.class;
      BeanHandler<Object> beanHandler0 = new BeanHandler<Object>(class0);
      // Undeclared exception!
      try { 
        queryRunner0.insert(""OutParameter{sqlType="", (ResultSetHandler<Object>) beanHandler0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
83,"    public int update(Connection conn, String sql) throws SQLException {
        return this.update(conn, false, sql, (Object[]) null);
    }","  public void test83()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      // Undeclared exception!
      try { 
        queryRunner0.update(connection1, ""OutParameter{sqlType="", (Object) queryRunner0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
84,"    public int update(Connection conn, String sql) throws SQLException {
        return this.update(conn, false, sql, (Object[]) null);
    }","  public void test84()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner();
      try { 
        queryRunner0.update("""", (Object[]) null);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // QueryRunner requires a DataSource to be invoked in this way, or a Connection should be passed in
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
85,"    public <T> T query(Connection conn, String sql, Object param, ResultSetHandler<T> rsh) throws SQLException {
        return this.<T>query(conn, false, sql, rsh, new Object[]{param});
    }","  public void test85()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      ScalarHandler<Object> scalarHandler0 = new ScalarHandler<Object>();
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        queryRunner0.query(connection1, """", (ResultSetHandler<Object>) scalarHandler0, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
86,"    public <T> T query(Connection conn, String sql, Object param, ResultSetHandler<T> rsh) throws SQLException {
        return this.<T>query(conn, false, sql, rsh, new Object[]{param});
    }","  public void test86()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false);
      Object[] objectArray0 = new Object[8];
      Class<Integer> class0 = Integer.class;
      Connection connection1 = queryRunner0.prepareConnection();
      BeanHandler<Integer> beanHandler0 = new BeanHandler<Integer>(class0);
      // Undeclared exception!
      try { 
        queryRunner0.query(connection1, ""mPet&P>lVteo(b&NQ"", objectArray0, (ResultSetHandler<Integer>) beanHandler0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
87,"    public <T> T insert(String sql, ResultSetHandler<T> rsh) throws SQLException {
        return insert(this.prepareConnection(), true, sql, rsh, (Object[]) null);
    }","  public void test87()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      Integer integer0 = new Integer(1194);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false, statementConfiguration0);
      Connection connection1 = queryRunner0.prepareConnection();
      ScalarHandler<Object> scalarHandler0 = new ScalarHandler<Object>();
      try { 
        queryRunner0.insert(connection1, (String) null, (ResultSetHandler<Object>) scalarHandler0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
88,"    public int update(Connection conn, String sql) throws SQLException {
        return this.update(conn, false, sql, (Object[]) null);
    }","  public void test88()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner();
      try { 
        queryRunner0.update(""$DU>"", (Object) ""$DU>"");
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // QueryRunner requires a DataSource to be invoked in this way, or a Connection should be passed in
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
89,"    public int execute(Connection conn, String sql, Object... params) throws SQLException {
        return this.execute(conn, false, sql, params);
    }","  public void test89()  throws Throwable  {
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(callableStatement0).execute();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, (StatementConfiguration) null);
      Object[] objectArray0 = new Object[0];
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>();
      List<Integer> list0 = queryRunner0.execute("""", (ResultSetHandler<Integer>) scalarHandler0, objectArray0);
}"
90,"    public <T> T insert(String sql, ResultSetHandler<T> rsh) throws SQLException {
        return insert(this.prepareConnection(), true, sql, rsh, (Object[]) null);
    }","  public void test90()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      Object[] objectArray0 = new Object[6];
      Connection connection1 = queryRunner0.prepareConnection();
      Class<Integer> class0 = Integer.class;
      BeanHandler<Integer> beanHandler0 = new BeanHandler<Integer>(class0);
      // Undeclared exception!
      try { 
        queryRunner0.insert(connection1, ""i"", (ResultSetHandler<Integer>) beanHandler0, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
91,"    public int execute(Connection conn, String sql, Object... params) throws SQLException {
        return this.execute(conn, false, sql, params);
    }","  public void test91()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(callableStatement0).execute();
      doReturn(parameterMetaData0).when(callableStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Object[] objectArray0 = new Object[0];
      Connection connection1 = queryRunner0.prepareConnection();
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>(""{"");
      List<Integer> list0 = queryRunner0.execute(connection1, """", (ResultSetHandler<Integer>) scalarHandler0, objectArray0);
}"
92,"    public int update(Connection conn, String sql) throws SQLException {
        return this.update(conn, false, sql, (Object[]) null);
    }","  public void test92()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[8];
      QueryRunner queryRunner0 = new QueryRunner();
      try { 
        queryRunner0.update(connection0, (String) null, objectArray0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
93,"    public int update(Connection conn, String sql) throws SQLException {
        return this.update(conn, false, sql, (Object[]) null);
    }","  public void test93()  throws Throwable  {
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      // Undeclared exception!
      try { 
        queryRunner0.update(connection1, "", javaType="");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
94,"    public int[] batch(Connection conn, String sql, Object[][] params) throws SQLException {
        return this.batch(conn, false, sql, params);
    }","  public void test94()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Object[][] objectArray0 = new Object[9][4];
      try { 
        queryRunner0.batch((String) null, objectArray0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
95,"    public <T> T query(Connection conn, String sql, Object param, ResultSetHandler<T> rsh) throws SQLException {
        return this.<T>query(conn, false, sql, rsh, new Object[]{param});
    }","  public void test95()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner();
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>(1117);
      try { 
        queryRunner0.query(""FN\"""", (ResultSetHandler<Integer>) scalarHandler0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // QueryRunner requires a DataSource to be invoked in this way, or a Connection should be passed in
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
96,"    public <T> T insert(String sql, ResultSetHandler<T> rsh) throws SQLException {
        return insert(this.prepareConnection(), true, sql, rsh, (Object[]) null);
    }","  public void test96()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      try { 
        queryRunner0.insert(""connection_type"", (ResultSetHandler<Object>) null, (Object[]) null);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null ResultSetHandler
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
97,"    public <T> T insertBatch(String sql, ResultSetHandler<T> rsh, Object[][] params) throws SQLException {
        return insertBatch(this.prepareConnection(), true, sql, rsh, params);
    }","  public void test97()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString() , anyInt());
      Object[][] objectArray0 = new Object[1][6];
      Class<String> class0 = String.class;
      BeanHandler<String> beanHandler0 = new BeanHandler<String>(class0);
      // Undeclared exception!
      try { 
        queryRunner0.insertBatch(connection0, ""OutParameter{sqlType="", (ResultSetHandler<String>) beanHandler0, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
98,"    public int update(Connection conn, String sql) throws SQLException {
        return this.update(conn, false, sql, (Object[]) null);
    }","  public void test98()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, (StatementConfiguration) null);
      // Undeclared exception!
      try { 
        queryRunner0.update("""");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
99,"    public <T> T query(Connection conn, String sql, Object param, ResultSetHandler<T> rsh) throws SQLException {
        return this.<T>query(conn, false, sql, rsh, new Object[]{param});
    }","  public void test99()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1));
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false, statementConfiguration0);
      try { 
        queryRunner0.query(connection0, (String) null, (ResultSetHandler<String>) null);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null SQL statement
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
100,"    public int[] batch(Connection conn, String sql, Object[][] params) throws SQLException {
        return this.batch(conn, false, sql, params);
    }","  public void test100()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      try { 
        queryRunner0.batch(connection1, """", (Object[][]) null);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Null parameters. If parameters aren't need, pass an empty array.
         //
         verifyException(""org.apache.commons.dbutils.QueryRunner"", e);
      }
  }"
101,"    public Object[] next() {
        try {
            rs.next();
            return this.convert.toArray(rs);
        } catch (SQLException e) {
            rethrow(e);
            return null;
        }
    }","  public void test0()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(471).when(resultSetMetaData0).getColumnCount();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0, rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(resultSet0).getObject(anyInt());
      doReturn(false, false).when(resultSet0).next();
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSet0);
      Object[] objectArray0 = resultSetIterator0.next();
      Object[] objectArray1 = resultSetIterator0.next();
}"
102,"    protected void rethrow(SQLException e) {
        throw new RuntimeException(e.getMessage());
    }","  public void test1()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSet) null, basicRowProcessor0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLException sQLException0 = new SQLException(mockThrowable0);
      // Undeclared exception!
      try { 
        resultSetIterator0.rethrow(sQLException0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException(""org.apache.commons.dbutils.ResultSetIterator"", e);
      }
  }"
103,"    public void remove() {
        try {
            this.rs.deleteRow();
        } catch (SQLException e) {
            rethrow(e);
        }
    }","  public void test2()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSet) null);
      // Undeclared exception!
      try { 
        resultSetIterator0.remove();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.ResultSetIterator"", e);
      }
  }"
104,"    public Object[] next() {
        try {
            rs.next();
            return this.convert.toArray(rs);
        } catch (SQLException e) {
            rethrow(e);
            return null;
        }
    }","  public void test3()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(5551).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0, (ResultSetMetaData) null).when(resultSet0).getMetaData();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true).when(resultSet0).isLast();
      doReturn(false, false).when(resultSet0).next();
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSet0);
      resultSetIterator0.next();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      ResultSetIterator.iterable(resultSet1);
      resultSetIterator0.hasNext();
      // Undeclared exception!
      try { 
        resultSetIterator0.next();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.BasicRowProcessor"", e);
      }
  }"
105,"    public Object[] next() {
        try {
            rs.next();
            return this.convert.toArray(rs);
        } catch (SQLException e) {
            rethrow(e);
            return null;
        }
    }","  public void test4()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1749)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSet0, basicRowProcessor0);
      // Undeclared exception!
      try { 
        resultSetIterator0.next();
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.BasicRowProcessor"", e);
      }
  }"
106,"    public boolean hasNext() {
        try {
            return !rs.isLast();
        } catch (SQLException e) {
            rethrow(e);
            return false;
        }
    }","  public void test5()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BeanProcessor beanProcessor0 = new BeanProcessor(hashMap0);
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor(beanProcessor0);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSet) null, basicRowProcessor0);
      // Undeclared exception!
      try { 
        resultSetIterator0.hasNext();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.ResultSetIterator"", e);
      }
  }"
107,"    public boolean hasNext() {
        try {
            return !rs.isLast();
        } catch (SQLException e) {
            rethrow(e);
            return false;
        }
    }","  public void test6()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(resultSet0).isLast();
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSet0, basicRowProcessor0);
      boolean boolean0 = resultSetIterator0.hasNext();
}"
108,"    public boolean hasNext() {
        try {
            return !rs.isLast();
        } catch (SQLException e) {
            rethrow(e);
            return false;
        }
    }","  public void test7()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(resultSet0).isLast();
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSet0, basicRowProcessor0);
      boolean boolean0 = resultSetIterator0.hasNext();
      boolean boolean1 = resultSetIterator0.hasNext();
}"
109,"    protected void rethrow(SQLException e) {
        throw new RuntimeException(e.getMessage());
    }","  public void test8()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSet0);
      // Undeclared exception!
      try { 
        resultSetIterator0.rethrow((SQLException) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.ResultSetIterator"", e);
      }
  }"
110,"    public void remove() {
        try {
            this.rs.deleteRow();
        } catch (SQLException e) {
            rethrow(e);
        }
    }","  public void test9()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSet0);
      resultSetIterator0.remove();
  }"
111,"    public ResultSet createResultSet(InvocationHandler handler) {
        return newProxyInstance(ResultSet.class, handler);
    }","  public void test0()  throws Throwable  {
      ProxyFactory proxyFactory0 = ProxyFactory.instance();
      EventHandler eventHandler0 = new EventHandler(proxyFactory0, ""77WRJ{sf>lN"", ""77WRJ{sf>lN"", ""77WRJ{sf>lN"");
      Proxy proxy0 = (Proxy)proxyFactory0.createResultSet(eventHandler0);
}"
112,"    public <T> T newProxyInstance(Class<T> type, InvocationHandler handler) {
        return type.cast(Proxy.newProxyInstance(handler.getClass().getClassLoader(), new Class<?>[] {type}, handler));
    }","  public void test1()  throws Throwable  {
      ProxyFactory proxyFactory0 = new ProxyFactory();
      Class<Integer> class0 = Integer.class;
      InvocationHandler invocationHandler0 = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        proxyFactory0.newProxyInstance(class0, invocationHandler0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // java.lang.Integer is not an interface
         //
         verifyException(""java.lang.reflect.Proxy$ProxyClassFactory"", e);
      }
  }"
113,"    public Statement createStatement(InvocationHandler handler) {
        return newProxyInstance(Statement.class, handler);
    }","  public void test2()  throws Throwable  {
      ProxyFactory proxyFactory0 = ProxyFactory.instance();
      // Undeclared exception!
      try { 
        proxyFactory0.createStatement((InvocationHandler) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.ProxyFactory"", e);
      }
  }"
114,"    public ResultSetMetaData createResultSetMetaData(InvocationHandler handler) {
        return newProxyInstance(ResultSetMetaData.class, handler);
    }","  public void test3()  throws Throwable  {
      ProxyFactory proxyFactory0 = ProxyFactory.instance();
      // Undeclared exception!
      try { 
        proxyFactory0.createResultSetMetaData((InvocationHandler) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.ProxyFactory"", e);
      }
  }"
115,"    public PreparedStatement createPreparedStatement(InvocationHandler handler) {
        return newProxyInstance(PreparedStatement.class, handler);
    }","  public void test4()  throws Throwable  {
      ProxyFactory proxyFactory0 = ProxyFactory.instance();
      // Undeclared exception!
      try { 
        proxyFactory0.createPreparedStatement((InvocationHandler) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.ProxyFactory"", e);
      }
  }"
116,"    public Driver createDriver(InvocationHandler handler) {
        return newProxyInstance(Driver.class, handler);
    }","  public void test5()  throws Throwable  {
      ProxyFactory proxyFactory0 = ProxyFactory.instance();
      // Undeclared exception!
      try { 
        proxyFactory0.createDriver((InvocationHandler) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.ProxyFactory"", e);
      }
  }"
117,"    public Connection createConnection(InvocationHandler handler) {
        return newProxyInstance(Connection.class, handler);
    }","  public void test6()  throws Throwable  {
      ProxyFactory proxyFactory0 = new ProxyFactory();
      // Undeclared exception!
      try { 
        proxyFactory0.createConnection((InvocationHandler) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.ProxyFactory"", e);
      }
  }"
118,"    public CallableStatement createCallableStatement(InvocationHandler handler) {
        return newProxyInstance(CallableStatement.class, handler);
    }","  public void test7()  throws Throwable  {
      ProxyFactory proxyFactory0 = new ProxyFactory();
      // Undeclared exception!
      try { 
        proxyFactory0.createCallableStatement((InvocationHandler) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.ProxyFactory"", e);
      }
  }"
119,"    public CallableStatement createCallableStatement(InvocationHandler handler) {
        return newProxyInstance(CallableStatement.class, handler);
    }","  public void test8()  throws Throwable  {
      ProxyFactory proxyFactory0 = ProxyFactory.instance();
      EventHandler eventHandler0 = new EventHandler(proxyFactory0, ""77WRJ{sf>lN"", ""77WRJ{sf>lN"", ""77WRJ{sf>lN"");
      Proxy proxy0 = (Proxy)proxyFactory0.createCallableStatement(eventHandler0);
}"
120,"    public ResultSetMetaData createResultSetMetaData(InvocationHandler handler) {
        return newProxyInstance(ResultSetMetaData.class, handler);
    }","  public void test9()  throws Throwable  {
      ProxyFactory proxyFactory0 = ProxyFactory.instance();
      EventHandler eventHandler0 = new EventHandler(proxyFactory0, ""77WRJ{sf>lN"", ""77WRJ{sf>lN"", ""77WRJ{sf>lN"");
      Proxy proxy0 = (Proxy)proxyFactory0.createResultSetMetaData(eventHandler0);
}"
121,"    public Driver createDriver(InvocationHandler handler) {
        return newProxyInstance(Driver.class, handler);
    }","  public void test10()  throws Throwable  {
      ProxyFactory proxyFactory0 = ProxyFactory.instance();
      EventHandler eventHandler0 = new EventHandler(proxyFactory0, ""77WRJ{sf>lN"", ""77WRJ{sf>lN"", ""77WRJ{sf>lN"");
      Proxy proxy0 = (Proxy)proxyFactory0.createDriver(eventHandler0);
}"
122,"    public Statement createStatement(InvocationHandler handler) {
        return newProxyInstance(Statement.class, handler);
    }","  public void test11()  throws Throwable  {
      ProxyFactory proxyFactory0 = ProxyFactory.instance();
      EventHandler eventHandler0 = new EventHandler(proxyFactory0, ""77WRJ{sf>lN"", ""77WRJ{sf>lN"", ""77WRJ{sf>lN"");
      Proxy proxy0 = (Proxy)proxyFactory0.createStatement(eventHandler0);
}"
123,"    public Connection createConnection(InvocationHandler handler) {
        return newProxyInstance(Connection.class, handler);
    }","  public void test12()  throws Throwable  {
      ProxyFactory proxyFactory0 = ProxyFactory.instance();
      EventHandler eventHandler0 = new EventHandler(proxyFactory0, ""77WRJ{sf>lN"", ""77WRJ{sf>lN"", ""77WRJ{sf>lN"");
      Proxy proxy0 = (Proxy)proxyFactory0.createConnection(eventHandler0);
}"
124,"    public PreparedStatement createPreparedStatement(InvocationHandler handler) {
        return newProxyInstance(PreparedStatement.class, handler);
    }","  public void test13()  throws Throwable  {
      ProxyFactory proxyFactory0 = ProxyFactory.instance();
      EventHandler eventHandler0 = new EventHandler(proxyFactory0, ""77WRJ{sf>lN"", ""77WRJ{sf>lN"", ""77WRJ{sf>lN"");
      Proxy proxy0 = (Proxy)proxyFactory0.createPreparedStatement(eventHandler0);
}"
125,"    public <T> T newProxyInstance(Class<T> type, InvocationHandler handler) {
        return type.cast(Proxy.newProxyInstance(handler.getClass().getClassLoader(), new Class<?>[] {type}, handler));
    }","  public void test14()  throws Throwable  {
      ProxyFactory proxyFactory0 = new ProxyFactory();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        proxyFactory0.newProxyInstance(class0, (InvocationHandler) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.ProxyFactory"", e);
      }
  }"
126,"    public ResultSet createResultSet(InvocationHandler handler) {
        return newProxyInstance(ResultSet.class, handler);
    }","  public void test15()  throws Throwable  {
      ProxyFactory proxyFactory0 = ProxyFactory.instance();
      // Undeclared exception!
      try { 
        proxyFactory0.createResultSet((InvocationHandler) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.ProxyFactory"", e);
      }
  }"
127,"    public <T> T toBean(ResultSet rs, Class<? extends T> type) throws SQLException {
        T bean = this.newInstance(type);
        return this.populateBean(rs, bean);
    }","  public void test0()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BeanProcessor beanProcessor0 = new BeanProcessor(hashMap0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      Class<SQLXMLColumnHandler> class0 = SQLXMLColumnHandler.class;
      SQLXMLColumnHandler sQLXMLColumnHandler0 = beanProcessor0.toBean(resultSet0, (Class<? extends SQLXMLColumnHandler>) class0);
}"
128,"    protected Object processColumn(ResultSet rs, int index, Class<?> propType)
        throws SQLException {

        Object retval = rs.getObject(index);

        if ( !propType.isPrimitive() && retval == null ) {
            return null;
        }

        for (ColumnHandler handler : columnHandlers) {
            if (handler.match(propType)) {
                retval = handler.apply(rs, index);
                break;
            }
        }

        return retval;

    }","  public void test1()  throws Throwable  {
      BeanProcessor beanProcessor0 = new BeanProcessor();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(resultSet0).getObject(anyInt());
      Class<DoubleColumnHandler> class0 = DoubleColumnHandler.class;
      Object object0 = beanProcessor0.processColumn(resultSet0, 0, class0);
}"
129,"    protected int[] mapColumnsToProperties(ResultSetMetaData rsmd,
            PropertyDescriptor[] props) throws SQLException {

        int cols = rsmd.getColumnCount();
        int[] columnToProperty = new int[cols + 1];
        Arrays.fill(columnToProperty, PROPERTY_NOT_FOUND);

        for (int col = 1; col <= cols; col++) {
            String columnName = rsmd.getColumnLabel(col);
            if (null == columnName || 0 == columnName.length()) {
              columnName = rsmd.getColumnName(col);
            }
            String propertyName = columnToPropertyOverrides.get(columnName);
            if (propertyName == null) {
                propertyName = columnName;
            }
            for (int i = 0; i < props.length; i++) {

                if (propertyName.equalsIgnoreCase(props[i].getName())) {
                    columnToProperty[col] = i;
                    break;
                }
            }
        }

        return columnToProperty;
    }","  public void test2()  throws Throwable  {
      BeanProcessor beanProcessor0 = new BeanProcessor();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      int[] intArray0 = beanProcessor0.mapColumnsToProperties(rowSetMetaDataImpl0, (PropertyDescriptor[]) null);
}"
130,"    protected Method getWriteMethod(Object target, PropertyDescriptor prop, Object value) {
        Method method = prop.getWriteMethod();
        return method;
    }","  public void test3()  throws Throwable  {
      BeanProcessor beanProcessor0 = new BeanProcessor();
      Integer integer0 = new Integer((-3190));
      Class<String> class0 = String.class;
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(""XwO)f,\""k\rj} "", class0, (String) null, (String) null);
      LongColumnHandler longColumnHandler0 = new LongColumnHandler();
      Method method0 = beanProcessor0.getWriteMethod(integer0, propertyDescriptor0, longColumnHandler0);
}"
131,"    public <T> List<T> toBeanList(ResultSet rs, Class<? extends T> type) throws SQLException {
        List<T> results = new ArrayList<T>();

        if (!rs.next()) {
            return results;
        }

        PropertyDescriptor[] props = this.propertyDescriptors(type);
        ResultSetMetaData rsmd = rs.getMetaData();
        int[] columnToProperty = this.mapColumnsToProperties(rsmd, props);

        do {
            results.add(this.createBean(rs, type, props, columnToProperty));
        } while (rs.next());

        return results;
    }","  public void test4()  throws Throwable  {
      BeanProcessor beanProcessor0 = new BeanProcessor();
      Class<DoubleColumnHandler> class0 = DoubleColumnHandler.class;
      beanProcessor0.newInstance(class0);
      Class<FloatColumnHandler> class1 = FloatColumnHandler.class;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      Class<SQLXMLColumnHandler> class2 = SQLXMLColumnHandler.class;
      List<SQLXMLColumnHandler> list0 = beanProcessor0.toBeanList(resultSet0, (Class<? extends SQLXMLColumnHandler>) class2);
}"
132,"    public <T> T toBean(ResultSet rs, Class<? extends T> type) throws SQLException {
        T bean = this.newInstance(type);
        return this.populateBean(rs, bean);
    }","  public void test5()  throws Throwable  {
      BeanProcessor beanProcessor0 = new BeanProcessor();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Class<Annotation> class0 = Annotation.class;
      try { 
        beanProcessor0.toBean(resultSet0, (Class<? extends Annotation>) class0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Cannot create java.lang.annotation.Annotation: java.lang.annotation.Annotation
         //
         verifyException(""org.apache.commons.dbutils.BeanProcessor"", e);
      }
  }"
133,"    public <T> T toBean(ResultSet rs, Class<? extends T> type) throws SQLException {
        T bean = this.newInstance(type);
        return this.populateBean(rs, bean);
    }","  public void test6()  throws Throwable  {
      BeanProcessor beanProcessor0 = new BeanProcessor();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        beanProcessor0.toBean(resultSet0, (Class<? extends String>) class0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
134,"    public <T> T toBean(ResultSet rs, Class<? extends T> type) throws SQLException {
        T bean = this.newInstance(type);
        return this.populateBean(rs, bean);
    }","  public void test7()  throws Throwable  {
      BeanProcessor beanProcessor0 = new BeanProcessor();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-658)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        beanProcessor0.toBean(resultSet0, (Class<? extends String>) class0);
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.BeanProcessor"", e);
      }
  }"
135,"    protected Object processColumn(ResultSet rs, int index, Class<?> propType)
        throws SQLException {

        Object retval = rs.getObject(index);

        if ( !propType.isPrimitive() && retval == null ) {
            return null;
        }

        for (ColumnHandler handler : columnHandlers) {
            if (handler.match(propType)) {
                retval = handler.apply(rs, index);
                break;
            }
        }

        return retval;

    }","  public void test8()  throws Throwable  {
      BeanProcessor beanProcessor0 = new BeanProcessor();
      Class<LongColumnHandler> class0 = LongColumnHandler.class;
      // Undeclared exception!
      try { 
        beanProcessor0.processColumn((ResultSet) null, 0, class0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
136,"    public <T> T populateBean(ResultSet rs, T bean) throws SQLException {
        PropertyDescriptor[] props = this.propertyDescriptors(bean.getClass());
        ResultSetMetaData rsmd = rs.getMetaData();
        int[] columnToProperty = this.mapColumnsToProperties(rsmd, props);

        return populateBean(rs, bean, props, columnToProperty);
    }","  public void test9()  throws Throwable  {
      BeanProcessor beanProcessor0 = new BeanProcessor();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(6378).when(resultSetMetaData0).getColumnCount();
      doReturn("""", ""ifexists"", """", """", ""M|eyud"").when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn("""", ""class"", ""06Xhi:k*?Zrj"").when(resultSetMetaData0).getColumnName(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      BooleanColumnHandler booleanColumnHandler0 = new BooleanColumnHandler();
      // Undeclared exception!
      beanProcessor0.populateBean(resultSet0, booleanColumnHandler0);
  }"
137,"    public <T> T populateBean(ResultSet rs, T bean) throws SQLException {
        PropertyDescriptor[] props = this.propertyDescriptors(bean.getClass());
        ResultSetMetaData rsmd = rs.getMetaData();
        int[] columnToProperty = this.mapColumnsToProperties(rsmd, props);

        return populateBean(rs, bean, props, columnToProperty);
    }","  public void test10()  throws Throwable  {
      BeanProcessor beanProcessor0 = new BeanProcessor();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        beanProcessor0.populateBean(resultSet0, object0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
138,"    public <T> T populateBean(ResultSet rs, T bean) throws SQLException {
        PropertyDescriptor[] props = this.propertyDescriptors(bean.getClass());
        ResultSetMetaData rsmd = rs.getMetaData();
        int[] columnToProperty = this.mapColumnsToProperties(rsmd, props);

        return populateBean(rs, bean, props, columnToProperty);
    }","  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BeanProcessor beanProcessor0 = new BeanProcessor(hashMap0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-2564)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      StringColumnHandler stringColumnHandler0 = new StringColumnHandler();
      // Undeclared exception!
      try { 
        beanProcessor0.populateBean(resultSet0, (Object) stringColumnHandler0);
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.BeanProcessor"", e);
      }
  }"
139,"    protected <T> T newInstance(Class<T> c) throws SQLException {
        try {
            return c.newInstance();

        } catch (InstantiationException e) {
            throw new SQLException(
                ""Cannot create "" + c.getName() + "": "" + e.getMessage());

        } catch (IllegalAccessException e) {
            throw new SQLException(
                ""Cannot create "" + c.getName() + "": "" + e.getMessage());
        }
    }","  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BeanProcessor beanProcessor0 = new BeanProcessor(hashMap0);
      Class<Annotation> class0 = Annotation.class;
      try { 
        beanProcessor0.newInstance(class0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Cannot create java.lang.annotation.Annotation: java.lang.annotation.Annotation
         //
         verifyException(""org.apache.commons.dbutils.BeanProcessor"", e);
      }
  }"
140,"    protected <T> T newInstance(Class<T> c) throws SQLException {
        try {
            return c.newInstance();

        } catch (InstantiationException e) {
            throw new SQLException(
                ""Cannot create "" + c.getName() + "": "" + e.getMessage());

        } catch (IllegalAccessException e) {
            throw new SQLException(
                ""Cannot create "" + c.getName() + "": "" + e.getMessage());
        }
    }","  public void test13()  throws Throwable  {
      BeanProcessor beanProcessor0 = new BeanProcessor();
      // Undeclared exception!
      try { 
        beanProcessor0.newInstance((Class<ShortColumnHandler>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
141,"    protected int[] mapColumnsToProperties(ResultSetMetaData rsmd,
            PropertyDescriptor[] props) throws SQLException {

        int cols = rsmd.getColumnCount();
        int[] columnToProperty = new int[cols + 1];
        Arrays.fill(columnToProperty, PROPERTY_NOT_FOUND);

        for (int col = 1; col <= cols; col++) {
            String columnName = rsmd.getColumnLabel(col);
            if (null == columnName || 0 == columnName.length()) {
              columnName = rsmd.getColumnName(col);
            }
            String propertyName = columnToPropertyOverrides.get(columnName);
            if (propertyName == null) {
                propertyName = columnName;
            }
            for (int i = 0; i < props.length; i++) {

                if (propertyName.equalsIgnoreCase(props[i].getName())) {
                    columnToProperty[col] = i;
                    break;
                }
            }
        }

        return columnToProperty;
    }","  public void test14()  throws Throwable  {
      BeanProcessor beanProcessor0 = new BeanProcessor();
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[1];
      // Undeclared exception!
      try { 
        beanProcessor0.mapColumnsToProperties((ResultSetMetaData) null, propertyDescriptorArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
142,"    protected Method getWriteMethod(Object target, PropertyDescriptor prop, Object value) {
        Method method = prop.getWriteMethod();
        return method;
    }","  public void test15()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BeanProcessor beanProcessor0 = new BeanProcessor(hashMap0);
      // Undeclared exception!
      try { 
        beanProcessor0.getWriteMethod((Object) null, (PropertyDescriptor) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
143,"    protected Object processColumn(ResultSet rs, int index, Class<?> propType)
        throws SQLException {

        Object retval = rs.getObject(index);

        if ( !propType.isPrimitive() && retval == null ) {
            return null;
        }

        for (ColumnHandler handler : columnHandlers) {
            if (handler.match(propType)) {
                retval = handler.apply(rs, index);
                break;
            }
        }

        return retval;

    }","  public void test16()  throws Throwable  {
      BeanProcessor beanProcessor0 = new BeanProcessor();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(beanProcessor0).when(resultSet0).getObject(anyInt());
      Class<LongColumnHandler> class0 = LongColumnHandler.class;
      Object object0 = beanProcessor0.processColumn(resultSet0, 2121, class0);
}"
144,"    public <T> List<T> toBeanList(ResultSet rs, Class<? extends T> type) throws SQLException {
        List<T> results = new ArrayList<T>();

        if (!rs.next()) {
            return results;
        }

        PropertyDescriptor[] props = this.propertyDescriptors(type);
        ResultSetMetaData rsmd = rs.getMetaData();
        int[] columnToProperty = this.mapColumnsToProperties(rsmd, props);

        do {
            results.add(this.createBean(rs, type, props, columnToProperty));
        } while (rs.next());

        return results;
    }","  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>(967, 1.0F);
      BeanProcessor beanProcessor0 = new BeanProcessor(hashMap0);
      hashMap0.put((String) null, ""NCjz~4j)O ivw#Bc"");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      rowSetMetaDataImpl0.setColumnCount(967);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, true, false).when(resultSet0).next();
      Class<StringEnumPropertyHandler> class0 = StringEnumPropertyHandler.class;
      List<StringEnumPropertyHandler> list0 = beanProcessor0.toBeanList(resultSet0, (Class<? extends StringEnumPropertyHandler>) class0);
}"
145,"    public <T> T populateBean(ResultSet rs, T bean) throws SQLException {
        PropertyDescriptor[] props = this.propertyDescriptors(bean.getClass());
        ResultSetMetaData rsmd = rs.getMetaData();
        int[] columnToProperty = this.mapColumnsToProperties(rsmd, props);

        return populateBean(rs, bean, props, columnToProperty);
    }","  public void test18()  throws Throwable  {
      BeanProcessor beanProcessor0 = new BeanProcessor();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1304).when(resultSetMetaData0).getColumnCount();
      doReturn("""", ""ifexists"", """", """", ""M|eyud"").when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn("""", ""class"", ""06Xhi:k*?Zrj"").when(resultSetMetaData0).getColumnName(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((Object) null).when(resultSet0).getObject(anyInt());
      BooleanColumnHandler booleanColumnHandler0 = new BooleanColumnHandler();
      BooleanColumnHandler booleanColumnHandler1 = beanProcessor0.populateBean(resultSet0, booleanColumnHandler0);
}"
146,"    public <T> List<T> toBeanList(ResultSet rs, Class<? extends T> type) throws SQLException {
        List<T> results = new ArrayList<T>();

        if (!rs.next()) {
            return results;
        }

        PropertyDescriptor[] props = this.propertyDescriptors(type);
        ResultSetMetaData rsmd = rs.getMetaData();
        int[] columnToProperty = this.mapColumnsToProperties(rsmd, props);

        do {
            results.add(this.createBean(rs, type, props, columnToProperty));
        } while (rs.next());

        return results;
    }","  public void test19()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>(967, 1.0F);
      BeanProcessor beanProcessor0 = new BeanProcessor(hashMap0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      rowSetMetaDataImpl0.setColumnCount(967);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      Class<StringEnumPropertyHandler> class0 = StringEnumPropertyHandler.class;
      // Undeclared exception!
      try { 
        beanProcessor0.toBeanList(resultSet0, (Class<? extends StringEnumPropertyHandler>) class0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
147,"    public <T> List<T> toBeanList(ResultSet rs, Class<? extends T> type) throws SQLException {
        List<T> results = new ArrayList<T>();

        if (!rs.next()) {
            return results;
        }

        PropertyDescriptor[] props = this.propertyDescriptors(type);
        ResultSetMetaData rsmd = rs.getMetaData();
        int[] columnToProperty = this.mapColumnsToProperties(rsmd, props);

        do {
            results.add(this.createBean(rs, type, props, columnToProperty));
        } while (rs.next());

        return results;
    }","  public void test20()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>(967, 1.0F);
      BeanProcessor beanProcessor0 = new BeanProcessor(hashMap0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = beanProcessor0.toBeanList(resultSet0, (Class<? extends Integer>) class0);
}"
148,"    public BeanProcessor() {
        this(new HashMap<String, String>());
    }","  public void test21()  throws Throwable  {
      BeanProcessor beanProcessor0 = null;
      try {
        beanProcessor0 = new BeanProcessor((Map<String, String>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // columnToPropertyOverrides map cannot be null
         //
         verifyException(""org.apache.commons.dbutils.BeanProcessor"", e);
      }
  }"
149,"    public <T> List<T> toBeanList(ResultSet rs, Class<? extends T> type) throws SQLException {
        List<T> results = new ArrayList<T>();

        if (!rs.next()) {
            return results;
        }

        PropertyDescriptor[] props = this.propertyDescriptors(type);
        ResultSetMetaData rsmd = rs.getMetaData();
        int[] columnToProperty = this.mapColumnsToProperties(rsmd, props);

        do {
            results.add(this.createBean(rs, type, props, columnToProperty));
        } while (rs.next());

        return results;
    }","  public void test22()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>(967, 1.0F);
      BeanProcessor beanProcessor0 = new BeanProcessor(hashMap0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      Class<Integer> class0 = Integer.class;
      try { 
        beanProcessor0.toBeanList(resultSet0, (Class<? extends Integer>) class0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Cannot create java.lang.Integer: java.lang.Integer
         //
         verifyException(""org.apache.commons.dbutils.BeanProcessor"", e);
      }
  }"
150,"    public <T> T toBean(ResultSet rs, Class<? extends T> type) throws SQLException {
        T bean = this.newInstance(type);
        return this.populateBean(rs, bean);
    }","  public void test23()  throws Throwable  {
      BeanProcessor beanProcessor0 = new BeanProcessor();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(2121).when(resultSetMetaData0).getColumnCount();
      doReturn(""CZ')E\""|jk({1%Cv"", ""class"", ""org.hsqldb.jdbc.jdbcdriver"", ""empty"", ""empty"").when(resultSetMetaData0).getColumnLabel(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(resultSet0).getBoolean(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(resultSet0).getObject(anyInt());
      Class<String> class0 = String.class;
      String string0 = beanProcessor0.toBean(resultSet0, (Class<? extends String>) class0);
}"
151,"    public Class<T> getJavaType()
    {
        return javaType;
    }","  public void test0()  throws Throwable  {
      Class<String> class0 = String.class;
      OutParameter<String> outParameter0 = new OutParameter<String>(0, class0);
      outParameter0.toString();
      outParameter0.toString();
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      outParameter0.toString();
      outParameter0.register(callableStatement0, 0);
      outParameter0.getSqlType();
      Class<Object> class1 = Object.class;
      OutParameter<Object> outParameter1 = new OutParameter<Object>(0, class1);
      Object object0 = new Object();
      OutParameter<Object> outParameter2 = new OutParameter<Object>(0, class1, object0);
      CallableStatement callableStatement1 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      outParameter2.register(callableStatement1, 0);
      CallableStatement callableStatement2 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      outParameter1.register(callableStatement2, 0);
      Object object1 = new Object();
      CallableStatement callableStatement3 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(object1).when(callableStatement3).getObject(anyInt());
      outParameter2.setValue(""OutParameter{sqlType=0, javaType=class java.lang.String, value=null}"");
      CallableStatement callableStatement4 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      CallableStatement callableStatement5 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(callableStatement5).getObject(anyInt());
      outParameter2.setValue(callableStatement5, 4057);
      outParameter2.register(callableStatement4, 0);
      outParameter2.setValue(callableStatement3, 125);
      Integer integer0 = new Integer((-1082));
      OutParameter<Integer> outParameter3 = new OutParameter<Integer>(125, (Class<Integer>) null, integer0);
      outParameter3.getJavaType();
  }"
152,"    public void setValue(T value) {
        this.value = value;
    }","  public void test1()  throws Throwable  {
      int int0 = 1;
      Class<String> class0 = String.class;
      OutParameter<String> outParameter0 = new OutParameter<String>(1, class0, ""_xiDP-BU=r_s`p!Y`4["");
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      CallableStatement callableStatement1 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(callableStatement1).getObject(anyInt());
      outParameter0.toString();
      outParameter0.setValue(callableStatement1, 0);
      outParameter0.toString();
      outParameter0.register(callableStatement0, 0);
      outParameter0.getSqlType();
      Class<Object> class1 = Object.class;
      OutParameter<Object> outParameter1 = new OutParameter<Object>(0, class1);
      CallableStatement callableStatement2 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(callableStatement2).getObject(anyInt());
      outParameter1.setValue(callableStatement2, 0);
      outParameter0.toString();
      outParameter0.toString();
      outParameter0.getSqlType();
      int int1 = (-1);
      Class<Integer> class2 = Integer.class;
      OutParameter<Integer> outParameter2 = new OutParameter<Integer>((-1), class2);
      CallableStatement callableStatement3 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(callableStatement3).getObject(anyInt());
      // Undeclared exception!
      try { 
        outParameter2.setValue(callableStatement3, (-1));
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
      }
  }"
153,"    public int getSqlType() {
        return sqlType;
    }","  public void test2()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OutParameter<Object> outParameter0 = new OutParameter<Object>((-4136), class0);
      outParameter0.setValue(class0);
      outParameter0.setValue(class0);
      int int0 = outParameter0.getSqlType();
}"
154,"    public int getSqlType() {
        return sqlType;
    }","  public void test3()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OutParameter<Object> outParameter0 = new OutParameter<Object>((-4136), class0);
      outParameter0.setValue(class0);
      outParameter0.setValue(class0);
      int int0 = outParameter0.getSqlType();
      Class<String> class1 = String.class;
      OutParameter<String> outParameter1 = new OutParameter<String>(0, class1);
      outParameter1.setValue("",x{e#\""BU"");
}"
155,"    public void setValue(T value) {
        this.value = value;
    }","  public void test4()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      OutParameter<Integer> outParameter0 = new OutParameter<Integer>(967, class0);
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      outParameter0.register(callableStatement0, 0);
      outParameter0.getSqlType();
      int int0 = 0;
      Class<Object> class1 = Object.class;
      OutParameter<Object> outParameter1 = new OutParameter<Object>(0, class1, (Object) null);
      outParameter1.setValue(class1);
      Class<String> class2 = String.class;
      CallableStatement callableStatement1 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callableStatement1).getObject(anyInt());
      outParameter1.setValue(callableStatement1, 0);
      OutParameter<String> outParameter2 = new OutParameter<String>(0, class2);
      outParameter2.setValue(""[ULY3>CpEH"");
      outParameter2.getJavaType();
      outParameter1.getValue();
      outParameter1.toString();
      CallableStatement callableStatement2 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        outParameter2.setValue((CallableStatement) null, 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.OutParameter"", e);
      }
  }"
156,"    public int getSqlType() {
        return sqlType;
    }","  public void test5()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Integer integer0 = new Integer(0);
      OutParameter<Object> outParameter0 = new OutParameter<Object>(0, class0, integer0);
      Class<Integer> class1 = Integer.class;
      OutParameter<Integer> outParameter1 = new OutParameter<Integer>(0, class1, integer0);
      Object object0 = outParameter1.getValue();
      outParameter0.setValue(object0);
      int int0 = outParameter0.getSqlType();
}"
157,"    public String toString()
    {
        return ""OutParameter{"" + ""sqlType="" + sqlType + "", javaType=""
            + javaType + "", value="" + value + '}';
    }","  public void test6()  throws Throwable  {
      Class<String> class0 = String.class;
      OutParameter<String> outParameter0 = new OutParameter<String>(0, class0);
      String string0 = outParameter0.toString();
}"
158,"    public int getSqlType() {
        return sqlType;
    }","  public void test7()  throws Throwable  {
      Class<String> class0 = String.class;
      OutParameter<String> outParameter0 = new OutParameter<String>(0, class0);
      String string0 = outParameter0.toString();
      outParameter0.getValue();
      Class<Object> class1 = Object.class;
      OutParameter<Object> outParameter1 = new OutParameter<Object>(0, class1);
      outParameter1.getValue();
}"
159,"    public int getSqlType() {
        return sqlType;
    }","  public void test8()  throws Throwable  {
      Class<String> class0 = String.class;
      OutParameter<String> outParameter0 = new OutParameter<String>(0, class0, """");
}"
160,"    public String toString()
    {
        return ""OutParameter{"" + ""sqlType="" + sqlType + "", javaType=""
            + javaType + "", value="" + value + '}';
    }","  public void test9()  throws Throwable  {
      Class<String> class0 = String.class;
      OutParameter<String> outParameter0 = new OutParameter<String>(0, class0, """");
      Class<Object> class1 = Object.class;
      OutParameter<Object> outParameter1 = new OutParameter<Object>((-1726), class1);
      String string0 = outParameter1.toString();
}"
161,"    public int getSqlType() {
        return sqlType;
    }","  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OutParameter<Object> outParameter0 = new OutParameter<Object>(0, class0);
      Integer integer0 = new Integer(0);
      outParameter0.setValue(integer0);
      outParameter0.getJavaType();
      Class<String> class1 = String.class;
      OutParameter<String> outParameter1 = new OutParameter<String>(0, class1);
      outParameter1.getJavaType();
}"
162,"    public int getSqlType() {
        return sqlType;
    }","  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OutParameter<Object> outParameter0 = new OutParameter<Object>(4051, class0);
      outParameter0.setValue(class0);
      Class<Integer> class1 = Integer.class;
      OutParameter<Integer> outParameter1 = new OutParameter<Integer>(0, class1);
      Integer integer0 = new Integer((-45));
      outParameter1.setValue(integer0);
      outParameter1.toString();
      int int0 = outParameter0.getSqlType();
}"
163,"    public String toString()
    {
        return ""OutParameter{"" + ""sqlType="" + sqlType + "", javaType=""
            + javaType + "", value="" + value + '}';
    }","  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OutParameter<Object> outParameter0 = new OutParameter<Object>(4051, class0);
      outParameter0.setValue(class0);
      Class<Integer> class1 = Integer.class;
      OutParameter<Integer> outParameter1 = new OutParameter<Integer>(0, class1);
      Integer integer0 = new Integer((-45));
      outParameter1.setValue(integer0);
      outParameter1.toString();
      int int0 = outParameter0.getSqlType();
      outParameter1.toString();
      Class<String> class2 = String.class;
      OutParameter<String> outParameter2 = new OutParameter<String>(4051, class2);
      String string0 = outParameter2.toString();
}"
164,"    void register(CallableStatement stmt, int index) throws SQLException {
        stmt.registerOutParameter(index, sqlType);
        if (value != null) {
            stmt.setObject(index, value);
        }
    }","  public void test13()  throws Throwable  {
      Class<String> class0 = String.class;
      OutParameter<String> outParameter0 = new OutParameter<String>(0, class0);
      outParameter0.getSqlType();
      CallableStatement callableStatement0 = null;
      // Undeclared exception!
      try { 
        outParameter0.register((CallableStatement) null, 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.OutParameter"", e);
      }
  }"
165,"    public int getSqlType() {
        return sqlType;
    }","  public void test14()  throws Throwable  {
      Class<String> class0 = String.class;
      OutParameter<String> outParameter0 = new OutParameter<String>(676, class0, ""`N!v  y.O-&ASK"");
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      outParameter0.register(callableStatement0, 676);
}"
166,"    public int getSqlType() {
        return sqlType;
    }","  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OutParameter<Object> outParameter0 = new OutParameter<Object>(0, class0, class0);
      outParameter0.setValue(class0);
}"
167,"    public String toString()
    {
        return ""OutParameter{"" + ""sqlType="" + sqlType + "", javaType=""
            + javaType + "", value="" + value + '}';
    }","  public void test16()  throws Throwable  {
      Class<String> class0 = String.class;
      OutParameter<String> outParameter0 = new OutParameter<String>(2334, class0);
      String string0 = outParameter0.toString();
}"
168,"    public int getSqlType() {
        return sqlType;
    }","  public void test17()  throws Throwable  {
      Class<String> class0 = String.class;
      OutParameter<String> outParameter0 = new OutParameter<String>((-1), class0);
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      outParameter0.register(callableStatement0, (-1));
}"
169,"    void register(CallableStatement stmt, int index) throws SQLException {
        stmt.registerOutParameter(index, sqlType);
        if (value != null) {
            stmt.setObject(index, value);
        }
    }","  public void test18()  throws Throwable  {
      int int0 = 0;
      Class<String> class0 = String.class;
      OutParameter<String> outParameter0 = new OutParameter<String>(0, class0, ""B(BcN}WM_p eVA65"");
      CallableStatement callableStatement0 = null;
      // Undeclared exception!
      try { 
        outParameter0.register((CallableStatement) null, 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.OutParameter"", e);
      }
  }"
170,"    public int getSqlType() {
        return sqlType;
    }","  public void test19()  throws Throwable  {
      Class<String> class0 = String.class;
      OutParameter<String> outParameter0 = new OutParameter<String>(1115, class0);
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callableStatement0).getObject(anyInt());
      outParameter0.setValue(callableStatement0, 1115);
}"
171,"    public void setValue(T value) {
        this.value = value;
    }","  public void test20()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OutParameter<Object> outParameter0 = new OutParameter<Object>(5816, class0);
      // Undeclared exception!
      try { 
        outParameter0.setValue((CallableStatement) null, 5816);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.OutParameter"", e);
      }
  }"
172,"    public int getSqlType() {
        return sqlType;
    }","  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OutParameter<Object> outParameter0 = new OutParameter<Object>(125, class0);
      outParameter0.getValue();
}"
173,"    public int getSqlType() {
        return sqlType;
    }","  public void test22()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OutParameter<Object> outParameter0 = new OutParameter<Object>((-911), class0, class0);
      outParameter0.getJavaType();
}"
174,"    public int getSqlType() {
        return sqlType;
    }","  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OutParameter<Object> outParameter0 = new OutParameter<Object>(3673, class0);
      int int0 = outParameter0.getSqlType();
}"
175,"    public int getSqlType() {
        return sqlType;
    }","  public void test24()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OutParameter<Object> outParameter0 = new OutParameter<Object>(472, class0);
}"
176,"    public String toString()
    {
        return ""OutParameter{"" + ""sqlType="" + sqlType + "", javaType=""
            + javaType + "", value="" + value + '}';
    }","  public void test25()  throws Throwable  {
      Class<String> class0 = String.class;
      OutParameter<String> outParameter0 = new OutParameter<String>((-3564), class0);
      String string0 = outParameter0.toString();
}"
177,"    public int getSqlType() {
        return sqlType;
    }","  public void test26()  throws Throwable  {
      Class<String> class0 = String.class;
      OutParameter<String> outParameter0 = new OutParameter<String>((-3564), class0);
      String string0 = outParameter0.toString();
      outParameter0.getSqlType();
      Class<Object> class1 = Object.class;
      OutParameter<Object> outParameter1 = new OutParameter<Object>((-3564), class1);
      outParameter1.getValue();
      OutParameter<Object> outParameter2 = new OutParameter<Object>((-3564), class1, (Object) null);
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      outParameter2.register(callableStatement0, (-3564));
      outParameter2.setValue(""OutParameter{sqlType=-3564, javaType=class java.lang.String, value=null}"");
      CallableStatement callableStatement1 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(callableStatement1).getObject(anyInt());
      CallableStatement callableStatement2 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      outParameter2.register(callableStatement2, (-3564));
      outParameter2.setValue(callableStatement1, (-3564));
      outParameter2.getJavaType();
}"
178,"    protected Map<String, String> loadQueries(String path) throws IOException {
        // Findbugs flags getClass().getResource as a bad practice; maybe we should change the API?
        InputStream in = getClass().getResourceAsStream(path);

        if (in == null) {
            throw new IllegalArgumentException(path + "" not found."");
        }

        Properties props = new Properties();
        try {
            if (dotXml.matcher(path).matches()) {
                props.loadFromXML(in);
            } else {
                props.load(in);
            }
        } finally {
            in.close();
        }

        // Copy to HashMap for better performance

        @SuppressWarnings({ ""rawtypes"", ""unchecked"" }) // load() always creates <String,String> entries
        HashMap<String, String> hashMap = new HashMap(props);
        return hashMap;
    }","  public void test0()  throws Throwable  {
      QueryLoader queryLoader0 = new QueryLoader();
      Map<String, String> map0 = queryLoader0.loadQueries("""");
}"
179,"    protected Map<String, String> loadQueries(String path) throws IOException {
        // Findbugs flags getClass().getResource as a bad practice; maybe we should change the API?
        InputStream in = getClass().getResourceAsStream(path);

        if (in == null) {
            throw new IllegalArgumentException(path + "" not found."");
        }

        Properties props = new Properties();
        try {
            if (dotXml.matcher(path).matches()) {
                props.loadFromXML(in);
            } else {
                props.load(in);
            }
        } finally {
            in.close();
        }

        // Copy to HashMap for better performance

        @SuppressWarnings({ ""rawtypes"", ""unchecked"" }) // load() always creates <String,String> entries
        HashMap<String, String> hashMap = new HashMap(props);
        return hashMap;
    }","  public void test1()  throws Throwable  {
      QueryLoader queryLoader0 = QueryLoader.instance();
      // Undeclared exception!
      try { 
        queryLoader0.loadQueries((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
180,"    protected Map<String, String> loadQueries(String path) throws IOException {
        // Findbugs flags getClass().getResource as a bad practice; maybe we should change the API?
        InputStream in = getClass().getResourceAsStream(path);

        if (in == null) {
            throw new IllegalArgumentException(path + "" not found."");
        }

        Properties props = new Properties();
        try {
            if (dotXml.matcher(path).matches()) {
                props.loadFromXML(in);
            } else {
                props.load(in);
            }
        } finally {
            in.close();
        }

        // Copy to HashMap for better performance

        @SuppressWarnings({ ""rawtypes"", ""unchecked"" }) // load() always creates <String,String> entries
        HashMap<String, String> hashMap = new HashMap(props);
        return hashMap;
    }","  public void test2()  throws Throwable  {
      QueryLoader queryLoader0 = QueryLoader.instance();
      // Undeclared exception!
      try { 
        queryLoader0.loadQueries(""\u0000.XML"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // \u0000.XML not found.
         //
         verifyException(""org.apache.commons.dbutils.QueryLoader"", e);
      }
  }"
181,"    public synchronized Map<String, String> load(String path) throws IOException {

        Map<String, String> queryMap = this.queries.get(path);

        if (queryMap == null) {
            queryMap = this.loadQueries(path);
            this.queries.put(path, queryMap);
        }

        return queryMap;
    }","  public void test3()  throws Throwable  {
      QueryLoader queryLoader0 = QueryLoader.instance();
      // Undeclared exception!
      try { 
        queryLoader0.load((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
182,"    public synchronized Map<String, String> load(String path) throws IOException {

        Map<String, String> queryMap = this.queries.get(path);

        if (queryMap == null) {
            queryMap = this.loadQueries(path);
            this.queries.put(path, queryMap);
        }

        return queryMap;
    }","  public void test4()  throws Throwable  {
      QueryLoader queryLoader0 = new QueryLoader();
      // Undeclared exception!
      try { 
        queryLoader0.load(""+! l11A'0"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // +! l11A'0 not found.
         //
         verifyException(""org.apache.commons.dbutils.QueryLoader"", e);
      }
  }"
183,"    public synchronized void unload(String path) {
        this.queries.remove(path);
    }","  public void test5()  throws Throwable  {
      QueryLoader queryLoader0 = QueryLoader.instance();
      queryLoader0.unload(""[;7b-;D.Q8fw"");
  }"
184,"    public static void printStackTrace(SQLException e) {
        printStackTrace(e, new PrintWriter(System.err));
    }","  public void test0()  throws Throwable  {
      SQLException sQLException0 = new SQLException(""8\""mQ)S$E"");
      SQLException sQLException1 = new SQLException(sQLException0);
      sQLException0.setNextException(sQLException1);
      DbUtils.printStackTrace(sQLException0);
}"
185,"    public static void printWarnings(Connection conn) {
        printWarnings(conn, new PrintWriter(System.err));
    }","  public void test1()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((SQLWarning) null).when(connection0).getWarnings();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""}g}"");
      DbUtils.printWarnings(connection0, (PrintWriter) mockPrintWriter0);
  }"
186,"    public static boolean loadDriver(String driverClassName) {
        return loadDriver(DbUtils.class.getClassLoader(), driverClassName);
    }","  public void test2()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      boolean boolean0 = DbUtils.loadDriver(classLoader0, ""N|0h|"");
}"
187,"    public static boolean loadDriver(String driverClassName) {
        return loadDriver(DbUtils.class.getClassLoader(), driverClassName);
    }","  public void test3()  throws Throwable  {
      boolean boolean0 = DbUtils.loadDriver((ClassLoader) null, """");
}"
188,"    public static boolean loadDriver(String driverClassName) {
        return loadDriver(DbUtils.class.getClassLoader(), driverClassName);
    }","  public void test4()  throws Throwable  {
      boolean boolean0 = DbUtils.loadDriver(""org.apache.commons.dbutils.DbUtils"");
}"
189,"    public static void printStackTrace(SQLException e) {
        printStackTrace(e, new PrintWriter(System.err));
    }","  public void test5()  throws Throwable  {
      SQLException sQLException0 = new SQLException(""jey `Us!cND~d"");
      // Undeclared exception!
      try { 
        DbUtils.printStackTrace(sQLException0, (PrintWriter) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
190,"    public static void printStackTrace(SQLException e) {
        printStackTrace(e, new PrintWriter(System.err));
    }","  public void test6()  throws Throwable  {
      SQLException sQLException0 = new SQLException(""8\""mQ)S$E"");
      sQLException0.setNextException(sQLException0);
      // Undeclared exception!
      DbUtils.printStackTrace(sQLException0);
  }"
191,"    public static void rollbackAndClose(Connection conn) throws SQLException {
        if (conn != null) {
            try {
                conn.rollback();
            } finally {
                conn.close();
            }
        }
    }","  public void test7()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DbUtils.rollbackAndClose(connection0);
  }"
192,"    public static void rollbackAndClose(Connection conn) throws SQLException {
        if (conn != null) {
            try {
                conn.rollback();
            } finally {
                conn.close();
            }
        }
    }","  public void test8()  throws Throwable  {
      DbUtils.rollbackAndClose((Connection) null);
  }"
193,"    public static void printWarnings(Connection conn) {
        printWarnings(conn, new PrintWriter(System.err));
    }","  public void test9()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""9CTMFt?i-9<TPW="");
      DbUtils.printWarnings((Connection) null, (PrintWriter) mockPrintWriter0);
  }"
194,"    public static void printStackTrace(SQLException e) {
        printStackTrace(e, new PrintWriter(System.err));
    }","  public void test10()  throws Throwable  {
      SQLException sQLException0 = new SQLException(""8\""mQ)S$E"");
      sQLException0.setNextException(sQLException0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""8\""mQ)S$E"");
      // Undeclared exception!
      DbUtils.printStackTrace(sQLException0, (PrintWriter) mockPrintWriter0);
  }"
195,"    public static void printStackTrace(SQLException e) {
        printStackTrace(e, new PrintWriter(System.err));
    }","  public void test11()  throws Throwable  {
      SQLException sQLException0 = new SQLException(""8\""mQ)S$E"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""8\""mQ)S$E"");
      DbUtils.printStackTrace(sQLException0, (PrintWriter) mockPrintWriter0);
}"
196,"    public static void commitAndClose(Connection conn) throws SQLException {
        if (conn != null) {
            try {
                conn.commit();
            } finally {
                conn.close();
            }
        }
    }","  public void test12()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DbUtils.commitAndClose(connection0);
  }"
197,"    public static void close(Connection conn) throws SQLException {
        if (conn != null) {
            conn.close();
        }
    }","  public void test13()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      DbUtils.close(statement0);
  }"
198,"    public static void close(Connection conn) throws SQLException {
        if (conn != null) {
            conn.close();
        }
    }","  public void test14()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      DbUtils.close(resultSet0);
  }"
199,"    public static void close(Connection conn) throws SQLException {
        if (conn != null) {
            conn.close();
        }
    }","  public void test15()  throws Throwable  {
      DbUtils.close((ResultSet) null);
  }"
200,"    public static void close(Connection conn) throws SQLException {
        if (conn != null) {
            conn.close();
        }
    }","  public void test16()  throws Throwable  {
      DbUtils.close((Connection) null);
  }"
201,"    public static void closeQuietly(Connection conn) {
        try {
            close(conn);
        } catch (SQLException e) { // NOPMD
            // quiet
        }
    }","  public void test17()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      DbUtils.closeQuietly(resultSet0);
  }"
202,"    public static void closeQuietly(Connection conn) {
        try {
            close(conn);
        } catch (SQLException e) { // NOPMD
            // quiet
        }
    }","  public void test18()  throws Throwable  {
      DbUtils.closeQuietly((Statement) null);
  }"
203,"    public static void closeQuietly(Connection conn) {
        try {
            close(conn);
        } catch (SQLException e) { // NOPMD
            // quiet
        }
    }","  public void test19()  throws Throwable  {
      DbUtils.closeQuietly((Connection) null);
  }"
204,"    public static void rollbackAndCloseQuietly(Connection conn) {
        try {
            rollbackAndClose(conn);
        } catch (SQLException e) { // NOPMD
            // quiet
        }
    }","  public void test20()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DbUtils.rollbackAndCloseQuietly(connection0);
  }"
205,"    public static void rollback(Connection conn) throws SQLException {
        if (conn != null) {
            conn.rollback();
        }
    }","  public void test21()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DbUtils.rollback(connection0);
  }"
206,"    public static void rollback(Connection conn) throws SQLException {
        if (conn != null) {
            conn.rollback();
        }
    }","  public void test22()  throws Throwable  {
      DbUtils.rollback((Connection) null);
  }"
207,"    public static void printWarnings(Connection conn) {
        printWarnings(conn, new PrintWriter(System.err));
    }","  public void test23()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLWarning sQLWarning0 = mock(SQLWarning.class, new ViolatedAssumptionAnswer());
      doReturn(sQLException0).when(sQLWarning0).getNextException();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(sQLWarning0).when(connection0).getWarnings();
      // Undeclared exception!
      try { 
        DbUtils.printWarnings(connection0, (PrintWriter) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
208,"    public static boolean loadDriver(String driverClassName) {
        return loadDriver(DbUtils.class.getClassLoader(), driverClassName);
    }","  public void test24()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      boolean boolean0 = DbUtils.loadDriver(classLoader0, ""org.apache.commons.dbutils.DbUtils"");
}"
209,"    public static void commitAndClose(Connection conn) throws SQLException {
        if (conn != null) {
            try {
                conn.commit();
            } finally {
                conn.close();
            }
        }
    }","  public void test25()  throws Throwable  {
      DbUtils.commitAndClose((Connection) null);
  }"
210,"    public static void close(Connection conn) throws SQLException {
        if (conn != null) {
            conn.close();
        }
    }","  public void test26()  throws Throwable  {
      DbUtils.close((Statement) null);
  }"
211,"    public static void closeQuietly(Connection conn) {
        try {
            close(conn);
        } catch (SQLException e) { // NOPMD
            // quiet
        }
    }","  public void test27()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      DbUtils.closeQuietly((Connection) null, statement0, (ResultSet) null);
  }"
212,"    public static void close(Connection conn) throws SQLException {
        if (conn != null) {
            conn.close();
        }
    }","  public void test28()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DbUtils.close(connection0);
  }"
213,"    public DbUtils() {
        // do nothing
    }","  public void test29()  throws Throwable  {
      DbUtils dbUtils0 = new DbUtils();
  }"
214,"    public static void printWarnings(Connection conn) {
        printWarnings(conn, new PrintWriter(System.err));
    }","  public void test30()  throws Throwable  {
      DbUtils.printWarnings((Connection) null);
  }"
215,"    public static void commitAndCloseQuietly(Connection conn) {
        try {
            commitAndClose(conn);
        } catch (SQLException e) { // NOPMD
            // quiet
        }
    }","  public void test31()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DbUtils.commitAndCloseQuietly(connection0);
  }"
216,"    public GenerousBeanProcessor() {
        super();
    }","  public void test0()  throws Throwable  {
      GenerousBeanProcessor generousBeanProcessor0 = new GenerousBeanProcessor();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(593).when(resultSetMetaData0).getColumnCount();
      doReturn(""lf'*|7=a}il-&"", ""lf'*|7=a}il-&"", ""_"", ""_"", ""Gh`"").when(resultSetMetaData0).getColumnLabel(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      Class<Object> class0 = Object.class;
      Object object0 = generousBeanProcessor0.toBean(resultSet0, (Class<?>) class0);
}"
217,"    protected int[] mapColumnsToProperties(final ResultSetMetaData rsmd,
            final PropertyDescriptor[] props) throws SQLException {

        final int cols = rsmd.getColumnCount();
        final int[] columnToProperty = new int[cols + 1];
        Arrays.fill(columnToProperty, PROPERTY_NOT_FOUND);

        for (int col = 1; col <= cols; col++) {
            String columnName = rsmd.getColumnLabel(col);

            if (null == columnName || 0 == columnName.length()) {
                columnName = rsmd.getColumnName(col);
            }

            final String generousColumnName = columnName.replace(""_"", """");

            for (int i = 0; i < props.length; i++) {
                final String propName = props[i].getName();

                // see if either the column name, or the generous one matches
                if (columnName.equalsIgnoreCase(propName) ||
                        generousColumnName.equalsIgnoreCase(propName)) {
                    columnToProperty[col] = i;
                    break;
                }
            }
        }

        return columnToProperty;
    }","  public void test1()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(resultSetMetaData0).getColumnCount();
      doReturn(""I24MD"").when(resultSetMetaData0).getColumnLabel(anyInt());
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[7];
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(""K53OG"", (Method) null, (Method) null);
      propertyDescriptorArray0[0] = propertyDescriptor0;
      PropertyDescriptor propertyDescriptor1 = new PropertyDescriptor(""I24MD"", (Method) null, (Method) null);
      propertyDescriptorArray0[1] = propertyDescriptor1;
      GenerousBeanProcessor generousBeanProcessor0 = new GenerousBeanProcessor();
      int[] intArray0 = generousBeanProcessor0.mapColumnsToProperties(resultSetMetaData0, propertyDescriptorArray0);
}"
218,"    protected int[] mapColumnsToProperties(final ResultSetMetaData rsmd,
            final PropertyDescriptor[] props) throws SQLException {

        final int cols = rsmd.getColumnCount();
        final int[] columnToProperty = new int[cols + 1];
        Arrays.fill(columnToProperty, PROPERTY_NOT_FOUND);

        for (int col = 1; col <= cols; col++) {
            String columnName = rsmd.getColumnLabel(col);

            if (null == columnName || 0 == columnName.length()) {
                columnName = rsmd.getColumnName(col);
            }

            final String generousColumnName = columnName.replace(""_"", """");

            for (int i = 0; i < props.length; i++) {
                final String propName = props[i].getName();

                // see if either the column name, or the generous one matches
                if (columnName.equalsIgnoreCase(propName) ||
                        generousColumnName.equalsIgnoreCase(propName)) {
                    columnToProperty[col] = i;
                    break;
                }
            }
        }

        return columnToProperty;
    }","  public void test2()  throws Throwable  {
      GenerousBeanProcessor generousBeanProcessor0 = new GenerousBeanProcessor();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(resultSetMetaData0).getColumnCount();
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[8];
      int[] intArray0 = generousBeanProcessor0.mapColumnsToProperties(resultSetMetaData0, propertyDescriptorArray0);
}"
219,"    protected int[] mapColumnsToProperties(final ResultSetMetaData rsmd,
            final PropertyDescriptor[] props) throws SQLException {

        final int cols = rsmd.getColumnCount();
        final int[] columnToProperty = new int[cols + 1];
        Arrays.fill(columnToProperty, PROPERTY_NOT_FOUND);

        for (int col = 1; col <= cols; col++) {
            String columnName = rsmd.getColumnLabel(col);

            if (null == columnName || 0 == columnName.length()) {
                columnName = rsmd.getColumnName(col);
            }

            final String generousColumnName = columnName.replace(""_"", """");

            for (int i = 0; i < props.length; i++) {
                final String propName = props[i].getName();

                // see if either the column name, or the generous one matches
                if (columnName.equalsIgnoreCase(propName) ||
                        generousColumnName.equalsIgnoreCase(propName)) {
                    columnToProperty[col] = i;
                    break;
                }
            }
        }

        return columnToProperty;
    }","  public void test3()  throws Throwable  {
      GenerousBeanProcessor generousBeanProcessor0 = new GenerousBeanProcessor();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-11)).when(resultSetMetaData0).getColumnCount();
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[2];
      // Undeclared exception!
      try { 
        generousBeanProcessor0.mapColumnsToProperties(resultSetMetaData0, propertyDescriptorArray0);
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.GenerousBeanProcessor"", e);
      }
  }"
220,"    protected int[] mapColumnsToProperties(final ResultSetMetaData rsmd,
            final PropertyDescriptor[] props) throws SQLException {

        final int cols = rsmd.getColumnCount();
        final int[] columnToProperty = new int[cols + 1];
        Arrays.fill(columnToProperty, PROPERTY_NOT_FOUND);

        for (int col = 1; col <= cols; col++) {
            String columnName = rsmd.getColumnLabel(col);

            if (null == columnName || 0 == columnName.length()) {
                columnName = rsmd.getColumnName(col);
            }

            final String generousColumnName = columnName.replace(""_"", """");

            for (int i = 0; i < props.length; i++) {
                final String propName = props[i].getName();

                // see if either the column name, or the generous one matches
                if (columnName.equalsIgnoreCase(propName) ||
                        generousColumnName.equalsIgnoreCase(propName)) {
                    columnToProperty[col] = i;
                    break;
                }
            }
        }

        return columnToProperty;
    }","  public void test4()  throws Throwable  {
      GenerousBeanProcessor generousBeanProcessor0 = new GenerousBeanProcessor();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(29).when(resultSetMetaData0).getColumnCount();
      doReturn(""e%l$i"", (String) null).when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn((String) null).when(resultSetMetaData0).getColumnName(anyInt());
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[8];
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(""cH*!LR]#B"", (Method) null, (Method) null);
      propertyDescriptorArray0[0] = propertyDescriptor0;
      PropertyDescriptor propertyDescriptor1 = new PropertyDescriptor(""e%l$i"", (Method) null, (Method) null);
      propertyDescriptorArray0[1] = propertyDescriptor1;
      // Undeclared exception!
      try { 
        generousBeanProcessor0.mapColumnsToProperties(resultSetMetaData0, propertyDescriptorArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.GenerousBeanProcessor"", e);
      }
  }"
221,"    public GenerousBeanProcessor() {
        super();
    }","  public void test5()  throws Throwable  {
      GenerousBeanProcessor generousBeanProcessor0 = new GenerousBeanProcessor();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(resultSetMetaData0).getColumnCount();
      doReturn("""").when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn("""").when(resultSetMetaData0).getColumnName(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      Class<Object> class0 = Object.class;
      Object object0 = generousBeanProcessor0.toBean(resultSet0, (Class<?>) class0);
}"
222,"    public Integer getQueryTimeout() {
        return queryTimeout;
    }","  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(3189);
      Integer integer1 = new Integer((-3430));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer1, (Integer) null, (Integer) null, integer1);
      Integer integer2 = statementConfiguration0.getQueryTimeout();
}"
223,"    public boolean isMaxFieldSizeSet() {
        return maxFieldSize != null;
    }","  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(3189);
      Integer integer1 = new Integer((-3430));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer1, (Integer) null, (Integer) null, integer1);
      Integer integer2 = statementConfiguration0.getQueryTimeout();
}"
224,"    public boolean isFetchSizeSet() {
        return fetchSize != null;
    }","  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(3189);
      Integer integer1 = new Integer((-3430));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer1, (Integer) null, (Integer) null, integer1);
      Integer integer2 = statementConfiguration0.getQueryTimeout();
}"
225,"    public boolean isFetchDirectionSet() {
        return fetchDirection != null;
    }","  public void test3()  throws Throwable  {
      Integer integer0 = new Integer(3189);
      Integer integer1 = new Integer((-3430));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer1, (Integer) null, (Integer) null, integer1);
      Integer integer2 = statementConfiguration0.getQueryTimeout();
}"
226,"    public Integer getQueryTimeout() {
        return queryTimeout;
    }","  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(3189);
      Integer integer1 = new Integer((-3430));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer1, (Integer) null, (Integer) null, integer1);
      Integer integer2 = statementConfiguration0.getQueryTimeout();
}"
227,"    public Integer getFetchDirection() {
        return fetchDirection;
    }","  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(3189);
      Integer integer1 = new Integer((-3430));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer1, (Integer) null, (Integer) null, integer1);
      Integer integer2 = statementConfiguration0.getQueryTimeout();
}"
228,"    public boolean isMaxRowsSet() {
        return maxRows != null;
    }","  public void test6()  throws Throwable  {
      Integer integer0 = new Integer(3189);
      Integer integer1 = new Integer((-3430));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer1, (Integer) null, (Integer) null, integer1);
      Integer integer2 = statementConfiguration0.getQueryTimeout();
}"
229,"    public Integer getFetchSize() {
        return fetchSize;
    }","  public void test7()  throws Throwable  {
      Integer integer0 = new Integer(3189);
      Integer integer1 = new Integer((-3430));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer1, (Integer) null, (Integer) null, integer1);
      Integer integer2 = statementConfiguration0.getQueryTimeout();
}"
230,"    public boolean isFetchSizeSet() {
        return fetchSize != null;
    }","  public void test8()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer(0);
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.queryTimeout(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder1.build();
      Integer integer1 = statementConfiguration0.getQueryTimeout();
}"
231,"    public boolean isFetchDirectionSet() {
        return fetchDirection != null;
    }","  public void test9()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer(0);
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.queryTimeout(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder1.build();
      Integer integer1 = statementConfiguration0.getQueryTimeout();
}"
232,"    public boolean isMaxRowsSet() {
        return maxRows != null;
    }","  public void test10()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer(0);
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.queryTimeout(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder1.build();
      Integer integer1 = statementConfiguration0.getQueryTimeout();
}"
233,"    public boolean isMaxFieldSizeSet() {
        return maxFieldSize != null;
    }","  public void test11()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer(0);
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.queryTimeout(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder1.build();
      Integer integer1 = statementConfiguration0.getQueryTimeout();
}"
234,"    public Integer getQueryTimeout() {
        return queryTimeout;
    }","  public void test12()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer(0);
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.queryTimeout(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder1.build();
      Integer integer1 = statementConfiguration0.getQueryTimeout();
}"
235,"    public boolean isMaxFieldSizeSet() {
        return maxFieldSize != null;
    }","  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(3189);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, (Integer) null, (Integer) null, integer0);
      Integer integer1 = statementConfiguration0.getQueryTimeout();
}"
236,"    public Integer getQueryTimeout() {
        return queryTimeout;
    }","  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(3189);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, (Integer) null, (Integer) null, integer0);
      Integer integer1 = statementConfiguration0.getQueryTimeout();
}"
237,"    public boolean isMaxRowsSet() {
        return maxRows != null;
    }","  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(3189);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, (Integer) null, (Integer) null, integer0);
      Integer integer1 = statementConfiguration0.getQueryTimeout();
}"
238,"    public boolean isFetchDirectionSet() {
        return fetchDirection != null;
    }","  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(3189);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, (Integer) null, (Integer) null, integer0);
      Integer integer1 = statementConfiguration0.getQueryTimeout();
}"
239,"    public boolean isFetchSizeSet() {
        return fetchSize != null;
    }","  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(3189);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, (Integer) null, (Integer) null, integer0);
      Integer integer1 = statementConfiguration0.getQueryTimeout();
}"
240,"    public Integer getMaxRows() {
        return maxRows;
    }","  public void test18()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder0.build();
      Integer integer0 = statementConfiguration0.getMaxRows();
}"
241,"    public boolean isFetchSizeSet() {
        return fetchSize != null;
    }","  public void test19()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer(0);
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.maxRows(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder1.build();
      Integer integer1 = statementConfiguration0.getMaxRows();
}"
242,"    public boolean isQueryTimeoutSet() {
        return queryTimeout != null;
    }","  public void test20()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer(0);
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.maxRows(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder1.build();
      Integer integer1 = statementConfiguration0.getMaxRows();
}"
243,"    public Integer getMaxRows() {
        return maxRows;
    }","  public void test21()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer(0);
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.maxRows(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder1.build();
      Integer integer1 = statementConfiguration0.getMaxRows();
}"
244,"    public boolean isFetchDirectionSet() {
        return fetchDirection != null;
    }","  public void test22()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer(0);
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.maxRows(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder1.build();
      Integer integer1 = statementConfiguration0.getMaxRows();
}"
245,"    public boolean isMaxFieldSizeSet() {
        return maxFieldSize != null;
    }","  public void test23()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer(0);
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.maxRows(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder1.build();
      Integer integer1 = statementConfiguration0.getMaxRows();
}"
246,"    public boolean isFetchSizeSet() {
        return fetchSize != null;
    }","  public void test24()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer(1);
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.maxRows(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder1.build();
      Integer integer1 = statementConfiguration0.getMaxRows();
}"
247,"    public boolean isQueryTimeoutSet() {
        return queryTimeout != null;
    }","  public void test25()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer(1);
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.maxRows(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder1.build();
      Integer integer1 = statementConfiguration0.getMaxRows();
}"
248,"    public Integer getMaxRows() {
        return maxRows;
    }","  public void test26()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer(1);
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.maxRows(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder1.build();
      Integer integer1 = statementConfiguration0.getMaxRows();
}"
249,"    public boolean isFetchDirectionSet() {
        return fetchDirection != null;
    }","  public void test27()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer(1);
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.maxRows(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder1.build();
      Integer integer1 = statementConfiguration0.getMaxRows();
}"
250,"    public boolean isMaxFieldSizeSet() {
        return maxFieldSize != null;
    }","  public void test28()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer(1);
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.maxRows(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder1.build();
      Integer integer1 = statementConfiguration0.getMaxRows();
}"
251,"    public Integer getMaxFieldSize() {
        return maxFieldSize;
    }","  public void test29()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder0.build();
      Integer integer0 = statementConfiguration0.getMaxFieldSize();
}"
252,"    public Integer getMaxFieldSize() {
        return maxFieldSize;
    }","  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(0);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      Integer integer1 = statementConfiguration0.getMaxFieldSize();
}"
253,"    public Integer getMaxFieldSize() {
        return maxFieldSize;
    }","  public void test31()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer(1);
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.maxFieldSize(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder1.build();
      Integer integer1 = statementConfiguration0.getMaxFieldSize();
}"
254,"    public boolean isMaxRowsSet() {
        return maxRows != null;
    }","  public void test32()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer(1);
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.maxFieldSize(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder1.build();
      Integer integer1 = statementConfiguration0.getMaxFieldSize();
}"
255,"    public boolean isQueryTimeoutSet() {
        return queryTimeout != null;
    }","  public void test33()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer(1);
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.maxFieldSize(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder1.build();
      Integer integer1 = statementConfiguration0.getMaxFieldSize();
}"
256,"    public boolean isFetchSizeSet() {
        return fetchSize != null;
    }","  public void test34()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer(1);
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.maxFieldSize(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder1.build();
      Integer integer1 = statementConfiguration0.getMaxFieldSize();
}"
257,"    public boolean isFetchDirectionSet() {
        return fetchDirection != null;
    }","  public void test35()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer(1);
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.maxFieldSize(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder1.build();
      Integer integer1 = statementConfiguration0.getMaxFieldSize();
}"
258,"    public boolean isMaxRowsSet() {
        return maxRows != null;
    }","  public void test36()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, integer0, integer0);
      Integer integer1 = statementConfiguration0.getFetchSize();
}"
259,"    public Integer getFetchSize() {
        return fetchSize;
    }","  public void test37()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, integer0, integer0);
      Integer integer1 = statementConfiguration0.getFetchSize();
}"
260,"    public boolean isQueryTimeoutSet() {
        return queryTimeout != null;
    }","  public void test38()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, integer0, integer0);
      Integer integer1 = statementConfiguration0.getFetchSize();
}"
261,"    public boolean isFetchDirectionSet() {
        return fetchDirection != null;
    }","  public void test39()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, integer0, integer0);
      Integer integer1 = statementConfiguration0.getFetchSize();
}"
262,"    public boolean isMaxFieldSizeSet() {
        return maxFieldSize != null;
    }","  public void test40()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, integer0, integer0);
      Integer integer1 = statementConfiguration0.getFetchSize();
}"
263,"    public Integer getFetchSize() {
        return fetchSize;
    }","  public void test41()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-466));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, integer0, (Integer) null, integer0, (Integer) null);
      Integer integer1 = statementConfiguration0.getFetchSize();
}"
264,"    public boolean isMaxRowsSet() {
        return maxRows != null;
    }","  public void test42()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-466));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, integer0, (Integer) null, integer0, (Integer) null);
      Integer integer1 = statementConfiguration0.getFetchSize();
}"
265,"    public boolean isQueryTimeoutSet() {
        return queryTimeout != null;
    }","  public void test43()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-466));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, integer0, (Integer) null, integer0, (Integer) null);
      Integer integer1 = statementConfiguration0.getFetchSize();
}"
266,"    public boolean isFetchDirectionSet() {
        return fetchDirection != null;
    }","  public void test44()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-466));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, integer0, (Integer) null, integer0, (Integer) null);
      Integer integer1 = statementConfiguration0.getFetchSize();
}"
267,"    public boolean isMaxFieldSizeSet() {
        return maxFieldSize != null;
    }","  public void test45()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-466));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, integer0, (Integer) null, integer0, (Integer) null);
      Integer integer1 = statementConfiguration0.getFetchSize();
}"
268,"    public boolean isMaxRowsSet() {
        return maxRows != null;
    }","  public void test46()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer(901);
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.fetchSize(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder1.build();
      Integer integer1 = statementConfiguration0.getFetchSize();
}"
269,"    public boolean isFetchDirectionSet() {
        return fetchDirection != null;
    }","  public void test47()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer(901);
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.fetchSize(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder1.build();
      Integer integer1 = statementConfiguration0.getFetchSize();
}"
270,"    public Integer getFetchSize() {
        return fetchSize;
    }","  public void test48()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer(901);
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.fetchSize(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder1.build();
      Integer integer1 = statementConfiguration0.getFetchSize();
}"
271,"    public boolean isQueryTimeoutSet() {
        return queryTimeout != null;
    }","  public void test49()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer(901);
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.fetchSize(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder1.build();
      Integer integer1 = statementConfiguration0.getFetchSize();
}"
272,"    public boolean isMaxFieldSizeSet() {
        return maxFieldSize != null;
    }","  public void test50()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer(901);
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.fetchSize(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder1.build();
      Integer integer1 = statementConfiguration0.getFetchSize();
}"
273,"    public Integer getFetchDirection() {
        return fetchDirection;
    }","  public void test51()  throws Throwable  {
      Integer integer0 = new Integer(0);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      Integer integer1 = statementConfiguration0.getFetchDirection();
}"
274,"    public boolean isQueryTimeoutSet() {
        return queryTimeout != null;
    }","  public void test52()  throws Throwable  {
      Integer integer0 = new Integer(1104);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, (Integer) null);
      Integer integer1 = statementConfiguration0.getFetchDirection();
}"
275,"    public Integer getFetchDirection() {
        return fetchDirection;
    }","  public void test53()  throws Throwable  {
      Integer integer0 = new Integer(1104);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, (Integer) null);
      Integer integer1 = statementConfiguration0.getFetchDirection();
}"
276,"    public boolean isMaxFieldSizeSet() {
        return maxFieldSize != null;
    }","  public void test54()  throws Throwable  {
      Integer integer0 = new Integer(1104);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, (Integer) null);
      Integer integer1 = statementConfiguration0.getFetchDirection();
}"
277,"    public boolean isFetchSizeSet() {
        return fetchSize != null;
    }","  public void test55()  throws Throwable  {
      Integer integer0 = new Integer(1104);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, (Integer) null);
      Integer integer1 = statementConfiguration0.getFetchDirection();
}"
278,"    public boolean isMaxRowsSet() {
        return maxRows != null;
    }","  public void test56()  throws Throwable  {
      Integer integer0 = new Integer(1104);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, (Integer) null);
      Integer integer1 = statementConfiguration0.getFetchDirection();
}"
279,"    public boolean isMaxFieldSizeSet() {
        return maxFieldSize != null;
    }","  public void test57()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer((-587));
      statementConfiguration_Builder0.fetchDirection(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder0.build();
      Integer integer1 = statementConfiguration0.getFetchDirection();
}"
280,"    public Integer getFetchDirection() {
        return fetchDirection;
    }","  public void test58()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer((-587));
      statementConfiguration_Builder0.fetchDirection(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder0.build();
      Integer integer1 = statementConfiguration0.getFetchDirection();
}"
281,"    public boolean isMaxRowsSet() {
        return maxRows != null;
    }","  public void test59()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer((-587));
      statementConfiguration_Builder0.fetchDirection(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder0.build();
      Integer integer1 = statementConfiguration0.getFetchDirection();
}"
282,"    public boolean isQueryTimeoutSet() {
        return queryTimeout != null;
    }","  public void test60()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer((-587));
      statementConfiguration_Builder0.fetchDirection(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder0.build();
      Integer integer1 = statementConfiguration0.getFetchDirection();
}"
283,"    public boolean isFetchSizeSet() {
        return fetchSize != null;
    }","  public void test61()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer((-587));
      statementConfiguration_Builder0.fetchDirection(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder0.build();
      Integer integer1 = statementConfiguration0.getFetchDirection();
}"
284,"    public boolean isFetchSizeSet() {
        return fetchSize != null;
    }","  public void test62()  throws Throwable  {
      Integer integer0 = new Integer(0);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, (Integer) null, integer0, integer0, integer0);
      boolean boolean0 = statementConfiguration0.isQueryTimeoutSet();
}"
285,"    public boolean isMaxFieldSizeSet() {
        return maxFieldSize != null;
    }","  public void test63()  throws Throwable  {
      Integer integer0 = new Integer(0);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, (Integer) null, integer0, integer0, integer0);
      boolean boolean0 = statementConfiguration0.isQueryTimeoutSet();
}"
286,"    public boolean isFetchDirectionSet() {
        return fetchDirection != null;
    }","  public void test64()  throws Throwable  {
      Integer integer0 = new Integer(0);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, (Integer) null, integer0, integer0, integer0);
      boolean boolean0 = statementConfiguration0.isQueryTimeoutSet();
}"
287,"    public boolean isMaxRowsSet() {
        return maxRows != null;
    }","  public void test65()  throws Throwable  {
      Integer integer0 = new Integer(0);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, (Integer) null, integer0, integer0, integer0);
      boolean boolean0 = statementConfiguration0.isQueryTimeoutSet();
}"
288,"    public boolean isQueryTimeoutSet() {
        return queryTimeout != null;
    }","  public void test66()  throws Throwable  {
      Integer integer0 = new Integer(0);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, (Integer) null, integer0, integer0, integer0);
      boolean boolean0 = statementConfiguration0.isQueryTimeoutSet();
}"
289,"    public boolean isQueryTimeoutSet() {
        return queryTimeout != null;
    }","  public void test67()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder0.build();
      boolean boolean0 = statementConfiguration0.isQueryTimeoutSet();
}"
290,"    public boolean isMaxRowsSet() {
        return maxRows != null;
    }","  public void test68()  throws Throwable  {
      Integer integer0 = new Integer(0);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      boolean boolean0 = statementConfiguration0.isMaxRowsSet();
}"
291,"    public boolean isMaxRowsSet() {
        return maxRows != null;
    }","  public void test69()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder0.build();
      boolean boolean0 = statementConfiguration0.isMaxRowsSet();
}"
292,"    public boolean isMaxRowsSet() {
        return maxRows != null;
    }","  public void test70()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, integer0, integer0);
      boolean boolean0 = statementConfiguration0.isMaxFieldSizeSet();
}"
293,"    public boolean isMaxFieldSizeSet() {
        return maxFieldSize != null;
    }","  public void test71()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, integer0, integer0);
      boolean boolean0 = statementConfiguration0.isMaxFieldSizeSet();
}"
294,"    public boolean isFetchSizeSet() {
        return fetchSize != null;
    }","  public void test72()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, integer0, integer0);
      boolean boolean0 = statementConfiguration0.isMaxFieldSizeSet();
}"
295,"    public boolean isFetchDirectionSet() {
        return fetchDirection != null;
    }","  public void test73()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, integer0, integer0);
      boolean boolean0 = statementConfiguration0.isMaxFieldSizeSet();
}"
296,"    public boolean isQueryTimeoutSet() {
        return queryTimeout != null;
    }","  public void test74()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, integer0, integer0);
      boolean boolean0 = statementConfiguration0.isMaxFieldSizeSet();
}"
297,"    public boolean isMaxFieldSizeSet() {
        return maxFieldSize != null;
    }","  public void test75()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder0.build();
      boolean boolean0 = statementConfiguration0.isMaxFieldSizeSet();
}"
298,"    public boolean isFetchSizeSet() {
        return fetchSize != null;
    }","  public void test76()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder0.build();
      boolean boolean0 = statementConfiguration0.isFetchSizeSet();
}"
299,"    public boolean isFetchDirectionSet() {
        return fetchDirection != null;
    }","  public void test77()  throws Throwable  {
      Integer integer0 = new Integer(0);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      boolean boolean0 = statementConfiguration0.isFetchDirectionSet();
}"
300,"    public boolean isFetchDirectionSet() {
        return fetchDirection != null;
    }","  public void test78()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder0.build();
      boolean boolean0 = statementConfiguration0.isFetchDirectionSet();
}"
301,"    public Integer getFetchDirection() {
        return fetchDirection;
    }","  public void test79()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder0.build();
      Integer integer0 = statementConfiguration0.getFetchDirection();
      StatementConfiguration.Builder statementConfiguration_Builder1 = statementConfiguration_Builder0.queryTimeout(integer0);
}"
302,"    public boolean isFetchSizeSet() {
        return fetchSize != null;
    }","  public void test80()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer((-1));
      statementConfiguration_Builder0.fetchSize(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder0.build();
      boolean boolean0 = statementConfiguration0.isFetchSizeSet();
}"
303,"    public boolean isMaxRowsSet() {
        return maxRows != null;
    }","  public void test81()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer((-1));
      statementConfiguration_Builder0.fetchSize(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder0.build();
      boolean boolean0 = statementConfiguration0.isFetchSizeSet();
}"
304,"    public boolean isFetchDirectionSet() {
        return fetchDirection != null;
    }","  public void test82()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer((-1));
      statementConfiguration_Builder0.fetchSize(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder0.build();
      boolean boolean0 = statementConfiguration0.isFetchSizeSet();
}"
305,"    public boolean isMaxFieldSizeSet() {
        return maxFieldSize != null;
    }","  public void test83()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer((-1));
      statementConfiguration_Builder0.fetchSize(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder0.build();
      boolean boolean0 = statementConfiguration0.isFetchSizeSet();
}"
306,"    public boolean isQueryTimeoutSet() {
        return queryTimeout != null;
    }","  public void test84()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      Integer integer0 = new Integer((-1));
      statementConfiguration_Builder0.fetchSize(integer0);
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder0.build();
      boolean boolean0 = statementConfiguration0.isFetchSizeSet();
}"
307,"    public boolean isFetchSizeSet() {
        return fetchSize != null;
    }","  public void test85()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, integer0, integer0);
      Integer integer1 = statementConfiguration0.getMaxFieldSize();
}"
308,"    public Integer getMaxFieldSize() {
        return maxFieldSize;
    }","  public void test86()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, integer0, integer0);
      Integer integer1 = statementConfiguration0.getMaxFieldSize();
}"
309,"    public boolean isQueryTimeoutSet() {
        return queryTimeout != null;
    }","  public void test87()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, integer0, integer0);
      Integer integer1 = statementConfiguration0.getMaxFieldSize();
}"
310,"    public boolean isFetchDirectionSet() {
        return fetchDirection != null;
    }","  public void test88()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, integer0, integer0);
      Integer integer1 = statementConfiguration0.getMaxFieldSize();
}"
311,"    public boolean isMaxRowsSet() {
        return maxRows != null;
    }","  public void test89()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, integer0, integer0);
      Integer integer1 = statementConfiguration0.getMaxFieldSize();
}"
312,"    public Integer getQueryTimeout() {
        return queryTimeout;
    }","  public void test90()  throws Throwable  {
      StatementConfiguration.Builder statementConfiguration_Builder0 = new StatementConfiguration.Builder();
      StatementConfiguration statementConfiguration0 = statementConfiguration_Builder0.build();
      Integer integer0 = statementConfiguration0.getQueryTimeout();
}"
313,"    public boolean isFetchSizeSet() {
        return fetchSize != null;
    }","  public void test91()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, integer0, integer0);
      Integer integer1 = statementConfiguration0.getMaxRows();
}"
314,"    public boolean isMaxFieldSizeSet() {
        return maxFieldSize != null;
    }","  public void test92()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, integer0, integer0);
      Integer integer1 = statementConfiguration0.getMaxRows();
}"
315,"    public boolean isFetchDirectionSet() {
        return fetchDirection != null;
    }","  public void test93()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, integer0, integer0);
      Integer integer1 = statementConfiguration0.getMaxRows();
}"
316,"    public boolean isQueryTimeoutSet() {
        return queryTimeout != null;
    }","  public void test94()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, integer0, integer0);
      Integer integer1 = statementConfiguration0.getMaxRows();
}"
317,"    public Integer getMaxRows() {
        return maxRows;
    }","  public void test95()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, integer0, integer0);
      Integer integer1 = statementConfiguration0.getMaxRows();
}"
318,"    public Integer getFetchSize() {
        return fetchSize;
    }","  public void test96()  throws Throwable  {
      Integer integer0 = new Integer(0);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      Integer integer1 = statementConfiguration0.getFetchSize();
}"
319,"    public <T> List<T> toBeanList(ResultSet rs, Class<? extends T> type) throws SQLException {
        return this.convert.toBeanList(rs, type);
    }","  public void test0()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      Class<Object> class0 = Object.class;
      List<Object> list0 = basicRowProcessor0.toBeanList(resultSet0, (Class<?>) class0);
}"
320,"    public <T> List<T> toBeanList(ResultSet rs, Class<? extends T> type) throws SQLException {
        return this.convert.toBeanList(rs, type);
    }","  public void test1()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      Class<String> class0 = String.class;
      List<String> list0 = basicRowProcessor0.toBeanList(resultSet0, (Class<? extends String>) class0);
}"
321,"    public Object[] toArray(ResultSet rs) throws SQLException {
        ResultSetMetaData meta = rs.getMetaData();
        int cols = meta.getColumnCount();
        Object[] result = new Object[cols];

        for (int i = 0; i < cols; i++) {
            result[i] = rs.getObject(i + 1);
        }

        return result;
    }","  public void test2()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      Object[] objectArray0 = basicRowProcessor0.toArray(resultSet0);
}"
322,"    public Map<String, Object> toMap(ResultSet rs) throws SQLException {
        Map<String, Object> result = new CaseInsensitiveHashMap();
        ResultSetMetaData rsmd = rs.getMetaData();
        int cols = rsmd.getColumnCount();

        for (int i = 1; i <= cols; i++) {
            String columnName = rsmd.getColumnLabel(i);
            if (null == columnName || 0 == columnName.length()) {
              columnName = rsmd.getColumnName(i);
            }
            result.put(columnName, rs.getObject(i));
        }

        return result;
    }","  public void test3()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = BasicRowProcessor.instance();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        basicRowProcessor0.toMap(resultSet0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.BasicRowProcessor"", e);
      }
  }"
323,"    public <T> List<T> toBeanList(ResultSet rs, Class<? extends T> type) throws SQLException {
        return this.convert.toBeanList(rs, type);
    }","  public void test4()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      Class<String> class0 = String.class;
      basicRowProcessor0.toBeanList(resultSet0, (Class<?>) class0);
      ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
  }"
324,"    public <T> List<T> toBeanList(ResultSet rs, Class<? extends T> type) throws SQLException {
        return this.convert.toBeanList(rs, type);
    }","  public void test5()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-908)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        basicRowProcessor0.toBeanList(resultSet0, (Class<?>) class0);
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.BeanProcessor"", e);
      }
  }"
325,"    public <T> T toBean(ResultSet rs, Class<? extends T> type) throws SQLException {
        return this.convert.toBean(rs, type);
    }","  public void test6()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = BasicRowProcessor.instance();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Class<Integer> class0 = Integer.class;
      try { 
        basicRowProcessor0.toBean(resultSet0, (Class<? extends Integer>) class0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Cannot create java.lang.Integer: java.lang.Integer
         //
         verifyException(""org.apache.commons.dbutils.BeanProcessor"", e);
      }
  }"
326,"    public <T> T toBean(ResultSet rs, Class<? extends T> type) throws SQLException {
        return this.convert.toBean(rs, type);
    }","  public void test7()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = BasicRowProcessor.instance();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        basicRowProcessor0.toBean((ResultSet) null, (Class<? extends String>) class0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.BeanProcessor"", e);
      }
  }"
327,"    public <T> T toBean(ResultSet rs, Class<? extends T> type) throws SQLException {
        return this.convert.toBean(rs, type);
    }","  public void test8()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-2021)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        basicRowProcessor0.toBean(resultSet0, (Class<?>) class0);
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.BeanProcessor"", e);
      }
  }"
328,"    public Object[] toArray(ResultSet rs) throws SQLException {
        ResultSetMetaData meta = rs.getMetaData();
        int cols = meta.getColumnCount();
        Object[] result = new Object[cols];

        for (int i = 0; i < cols; i++) {
            result[i] = rs.getObject(i + 1);
        }

        return result;
    }","  public void test9()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = BasicRowProcessor.instance();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        basicRowProcessor0.toArray(resultSet0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.BasicRowProcessor"", e);
      }
  }"
329,"    public Object[] toArray(ResultSet rs) throws SQLException {
        ResultSetMetaData meta = rs.getMetaData();
        int cols = meta.getColumnCount();
        Object[] result = new Object[cols];

        for (int i = 0; i < cols; i++) {
            result[i] = rs.getObject(i + 1);
        }

        return result;
    }","  public void test10()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = BasicRowProcessor.instance();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1166)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        basicRowProcessor0.toArray(resultSet0);
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.BasicRowProcessor"", e);
      }
  }"
330,"    public <T> List<T> toBeanList(ResultSet rs, Class<? extends T> type) throws SQLException {
        return this.convert.toBeanList(rs, type);
    }","  public void test11()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor((BeanProcessor) null);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        basicRowProcessor0.toBeanList((ResultSet) null, (Class<? extends String>) class0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.BasicRowProcessor"", e);
      }
  }"
331,"    public Object[] toArray(ResultSet rs) throws SQLException {
        ResultSetMetaData meta = rs.getMetaData();
        int cols = meta.getColumnCount();
        Object[] result = new Object[cols];

        for (int i = 0; i < cols; i++) {
            result[i] = rs.getObject(i + 1);
        }

        return result;
    }","  public void test12()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = BasicRowProcessor.instance();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(28).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(basicRowProcessor0, basicRowProcessor0, basicRowProcessor0, basicRowProcessor0, basicRowProcessor0).when(resultSet0).getObject(anyInt());
      Object[] objectArray0 = basicRowProcessor0.toArray(resultSet0);
}"
332,"    public <T> T toBean(ResultSet rs, Class<? extends T> type) throws SQLException {
        return this.convert.toBean(rs, type);
    }","  public void test13()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      Class<Object> class0 = Object.class;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      Object object0 = basicRowProcessor0.toBean(resultSet0, (Class<?>) class0);
}"
333,"    public <T> List<T> toBeanList(ResultSet rs, Class<? extends T> type) throws SQLException {
        return this.convert.toBeanList(rs, type);
    }","  public void test14()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = BasicRowProcessor.instance();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      Class<Integer> class0 = Integer.class;
      try { 
        basicRowProcessor0.toBeanList(resultSet0, (Class<? extends Integer>) class0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Cannot create java.lang.Integer: java.lang.Integer
         //
         verifyException(""org.apache.commons.dbutils.BeanProcessor"", e);
      }
  }"
334,"    public Map<String, Object> toMap(ResultSet rs) throws SQLException {
        Map<String, Object> result = new CaseInsensitiveHashMap();
        ResultSetMetaData rsmd = rs.getMetaData();
        int cols = rsmd.getColumnCount();

        for (int i = 1; i <= cols; i++) {
            String columnName = rsmd.getColumnLabel(i);
            if (null == columnName || 0 == columnName.length()) {
              columnName = rsmd.getColumnName(i);
            }
            result.put(columnName, rs.getObject(i));
        }

        return result;
    }","  public void test15()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(resultSetMetaData0).getColumnCount();
      doReturn((String) null, """", """", "".4xrgNHf?4O1T"").when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn("""", "".4xrgNHf?4O1T"", """").when(resultSetMetaData0).getColumnName(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, "".4xrgNHf?4O1T"").when(resultSet0).getObject(anyInt());
      Map<String, Object> map0 = basicRowProcessor0.toMap(resultSet0);
}"
335,"    protected Connection prepareConnection() throws SQLException {
        if (this.getDataSource() == null) {
            throw new SQLException(
                    ""QueryRunner requires a DataSource to be ""
                            + ""invoked in this way, or a Connection should be passed in"");
        }
        return this.getDataSource().getConnection();
    }","  public void test0()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      queryRunner0.wrap(resultSet0);
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(313).when(parameterMetaData0).getParameterCount();
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn(""class"", ""class"", """", """").when(callableStatement0).toString();
      doReturn(0).when(callableStatement0).executeUpdate();
      doReturn(parameterMetaData0).when(callableStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      CallableStatement callableStatement1 = queryRunner0.prepareCall(connection0, ""ekjf 1"");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement1).when(connection1).prepareStatement(anyString());
      PreparedStatement preparedStatement0 = queryRunner0.prepareStatement(connection1, ""org.apache.commons.dbutils.AbstractQueryRunner"");
      Connection connection2 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(connection2).toString();
      doReturn(preparedStatement0, preparedStatement0).when(connection2).prepareStatement(anyString());
      DataSource dataSource1 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(""class"", ""class"").when(dataSource1).toString();
      doReturn(connection2).when(dataSource1).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource1, false);
      Connection connection3 = queryRunner1.prepareConnection();
      Integer integer0 = new Integer((-1461000438));
      queryRunner0.update(connection3, ""We*MOw$<*PVkWdn "", (Object) integer0);
      Class<String> class0 = String.class;
      BeanHandler<String> beanHandler0 = new BeanHandler<String>(class0);
      try { 
        queryRunner1.query(connection3, ""3,S}9"", (ResultSetHandler<String>) beanHandler0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Wrong number of parameters: expected 313, was given 0 Query: 3,S}9 Parameters: []
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
336,"    public boolean isPmdKnownBroken() {
        return pmdKnownBroken;
    }","  public void test1()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      Integer integer0 = new Integer((-1461000438));
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[0];
      queryRunner0.fillStatementWithBean((PreparedStatement) null, (Object) integer0, propertyDescriptorArray0);
}"
337,"    public boolean isPmdKnownBroken() {
        return pmdKnownBroken;
    }","  public void test2()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner();
      queryRunner0.close((Statement) null);
}"
338,"    public boolean isPmdKnownBroken() {
        return pmdKnownBroken;
    }","  public void test3()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      ResultSet resultSet1 = queryRunner0.wrap(resultSet0);
      queryRunner0.close(resultSet1);
}"
339,"    public void fillStatementWithBean(PreparedStatement stmt, Object bean,
            PropertyDescriptor[] properties) throws SQLException {
        Object[] params = new Object[properties.length];
        for (int i = 0; i < properties.length; i++) {
            PropertyDescriptor property = properties[i];
            Object value = null;
            Method method = property.getReadMethod();
            if (method == null) {
                throw new RuntimeException(""No read method for bean property ""
                        + bean.getClass() + "" "" + property.getName());
            }
            try {
                value = method.invoke(bean, new Object[0]);
            } catch (InvocationTargetException e) {
                throw new RuntimeException(""Couldn't invoke method: "" + method,
                        e);
            } catch (IllegalArgumentException e) {
                throw new RuntimeException(
                        ""Couldn't invoke method with 0 arguments: "" + method, e);
            } catch (IllegalAccessException e) {
                throw new RuntimeException(""Couldn't invoke method: "" + method,
                        e);
            }
            params[i] = value;
        }
        fillStatement(stmt, params);
    }","  public void test4()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      int int0 = (-114);
      Integer integer0 = new Integer((-114));
      Integer integer1 = new Integer(108);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer1);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, statementConfiguration0);
      PreparedStatement preparedStatement0 = null;
      String[] stringArray0 = new String[0];
      queryRunner0.fillStatementWithBean((PreparedStatement) null, (Object) ""6"", stringArray0);
      boolean boolean0 = true;
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
  }"
340,,"  public void test5()  throws Throwable  {
      Integer integer0 = new Integer((-2700));
      Integer integer1 = new Integer(13);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer1);
      QueryRunner queryRunner0 = new QueryRunner(statementConfiguration0);
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
  }"
341,"    protected void close(Connection conn) throws SQLException {
        DbUtils.close(conn);
    }","  public void test6()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer1, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, statementConfiguration0);
      queryRunner0.close((Connection) null);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      AsyncQueryRunner asyncQueryRunner0 = new AsyncQueryRunner(scheduledThreadPoolExecutor0, queryRunner0);
      String string0 = ""QueryRunner requires a DataSource to be invoked in this way, or a Connection should be passed in"";
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>(""QueryRunner requires a DataSource to be invoked in this way, or a Connection should be passed in"");
  }"
342,"    protected ResultSet wrap(ResultSet rs) {
        return rs;
    }","  public void test7()  throws Throwable  {
      AsyncQueryRunner asyncQueryRunner0 = new AsyncQueryRunner((ExecutorService) null);
      ResultSet resultSet0 = asyncQueryRunner0.wrap((ResultSet) null);
}"
343,"    public boolean isPmdKnownBroken() {
        return pmdKnownBroken;
    }","  public void test8()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).toString();
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dataSource0).toString();
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      queryRunner0.prepareStatement(connection1, """");
}"
344,"    protected Connection prepareConnection() throws SQLException {
        if (this.getDataSource() == null) {
            throw new SQLException(
                    ""QueryRunner requires a DataSource to be ""
                            + ""invoked in this way, or a Connection should be passed in"");
        }
        return this.getDataSource().getConnection();
    }","  public void test9()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dataSource0).toString();
      doReturn((Connection) null).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false);
      Connection connection0 = queryRunner0.prepareConnection();
}"
345,"    public boolean isPmdKnownBroken() {
        return pmdKnownBroken;
    }","  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-2700));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(statementConfiguration0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((CallableStatement) null).when(connection0).prepareCall(anyString());
      queryRunner0.prepareCall(connection0, ""warnings"");
}"
346,"    public boolean isPmdKnownBroken() {
        return pmdKnownBroken;
    }","  public void test11()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(4);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, integer0, integer0, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, statementConfiguration0);
      boolean boolean0 = queryRunner0.isPmdKnownBroken();
}"
347,"    public boolean isPmdKnownBroken() {
        return pmdKnownBroken;
    }","  public void test12()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner();
      queryRunner0.getDataSource();
}"
348,"    protected void rethrow(SQLException cause, String sql, Object... params)
            throws SQLException {

        String causeMessage = cause.getMessage();
        if (causeMessage == null) {
            causeMessage = """";
        }
        StringBuffer msg = new StringBuffer(causeMessage);

        msg.append("" Query: "");
        msg.append(sql);
        msg.append("" Parameters: "");

        if (params == null) {
            msg.append(""[]"");
        } else {
            msg.append(Arrays.deepToString(params));
        }

        SQLException e = new SQLException(msg.toString(), cause.getSQLState(),
                cause.getErrorCode());
        e.setNextException(cause);

        throw e;
    }","  public void test13()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        queryRunner0.rethrow((SQLException) null, ""3Q31}O"", objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
349,"    protected PreparedStatement prepareStatement(Connection conn, String sql)
            throws SQLException {

        PreparedStatement ps = conn.prepareStatement(sql);
        try {
            configureStatement(ps);
        } catch (SQLException e) {
            ps.close();
            throw e;
        }
        return ps;
    }","  public void test14()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      // Undeclared exception!
      try { 
        queryRunner0.prepareStatement((Connection) null, ""org.apache.commons.dbutils.handlers.BeanHandler"", 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
350,"    protected Connection prepareConnection() throws SQLException {
        if (this.getDataSource() == null) {
            throw new SQLException(
                    ""QueryRunner requires a DataSource to be ""
                            + ""invoked in this way, or a Connection should be passed in"");
        }
        return this.getDataSource().getConnection();
    }","  public void test15()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(5, threadFactory0);
      AsyncQueryRunner asyncQueryRunner0 = new AsyncQueryRunner(scheduledThreadPoolExecutor0);
      try { 
        asyncQueryRunner0.prepareConnection();
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // QueryRunner requires a DataSource to be invoked in this way, or a Connection should be passed in
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
351,"    public void fillStatementWithBean(PreparedStatement stmt, Object bean,
            PropertyDescriptor[] properties) throws SQLException {
        Object[] params = new Object[properties.length];
        for (int i = 0; i < properties.length; i++) {
            PropertyDescriptor property = properties[i];
            Object value = null;
            Method method = property.getReadMethod();
            if (method == null) {
                throw new RuntimeException(""No read method for bean property ""
                        + bean.getClass() + "" "" + property.getName());
            }
            try {
                value = method.invoke(bean, new Object[0]);
            } catch (InvocationTargetException e) {
                throw new RuntimeException(""Couldn't invoke method: "" + method,
                        e);
            } catch (IllegalArgumentException e) {
                throw new RuntimeException(
                        ""Couldn't invoke method with 0 arguments: "" + method, e);
            } catch (IllegalAccessException e) {
                throw new RuntimeException(""Couldn't invoke method: "" + method,
                        e);
            }
            params[i] = value;
        }
        fillStatement(stmt, params);
    }","  public void test16()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).toString();
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dataSource0).toString();
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""8L{sZo"";
      // Undeclared exception!
      try { 
        queryRunner0.fillStatementWithBean((PreparedStatement) null, (Object) connection1, stringArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Couldn't find bean property: class codegen.java.sql.Connection$MockitoMock$1690925045 8L{sZo
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
352,"    public void fillStatementWithBean(PreparedStatement stmt, Object bean,
            PropertyDescriptor[] properties) throws SQLException {
        Object[] params = new Object[properties.length];
        for (int i = 0; i < properties.length; i++) {
            PropertyDescriptor property = properties[i];
            Object value = null;
            Method method = property.getReadMethod();
            if (method == null) {
                throw new RuntimeException(""No read method for bean property ""
                        + bean.getClass() + "" "" + property.getName());
            }
            try {
                value = method.invoke(bean, new Object[0]);
            } catch (InvocationTargetException e) {
                throw new RuntimeException(""Couldn't invoke method: "" + method,
                        e);
            } catch (IllegalArgumentException e) {
                throw new RuntimeException(
                        ""Couldn't invoke method with 0 arguments: "" + method, e);
            } catch (IllegalAccessException e) {
                throw new RuntimeException(""Couldn't invoke method: "" + method,
                        e);
            }
            params[i] = value;
        }
        fillStatement(stmt, params);
    }","  public void test17()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false, (StatementConfiguration) null);
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[0];
      // Undeclared exception!
      try { 
        queryRunner0.fillStatementWithBean((PreparedStatement) null, (Object) ""*w{2>e:~?]{'B]"", propertyDescriptorArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
353,"    public void fillStatement(PreparedStatement stmt, Object... params)
            throws SQLException {

        // check the parameter count, if we can
        ParameterMetaData pmd = null;
        if (!pmdKnownBroken) {
            try {
                pmd = stmt.getParameterMetaData();
                if (pmd == null) { // can be returned by implementations that don't support the method
                    pmdKnownBroken = true;
                } else {
                    int stmtCount = pmd.getParameterCount();
                    int paramsCount = params == null ? 0 : params.length;
        
                    if (stmtCount != paramsCount) {
                        throw new SQLException(""Wrong number of parameters: expected ""
                                + stmtCount + "", was given "" + paramsCount);
                    }
                }
            } catch (SQLFeatureNotSupportedException ex) {
                pmdKnownBroken = true;                
            }
            // TODO see DBUTILS-117: would it make sense to catch any other SQLEx types here?
        }

        // nothing to do here
        if (params == null) {
            return;
        }

        CallableStatement call = null;
        if (stmt instanceof CallableStatement) {
            call = (CallableStatement) stmt;
        }

        for (int i = 0; i < params.length; i++) {
            if (params[i] != null) {
                if (call != null && params[i] instanceof OutParameter) {
                    ((OutParameter)params[i]).register(call, i + 1);
                } else {
                    stmt.setObject(i + 1, params[i]);
                }
            } else {
                // VARCHAR works with many drivers regardless
                // of the actual column type. Oddly, NULL and
                // OTHER don't work with Oracle's drivers.
                int sqlType = Types.VARCHAR;
                if (!pmdKnownBroken) {
                    // TODO see DBUTILS-117: does it make sense to catch SQLEx here?
                    try {
                        /*
                         * It's not possible for pmdKnownBroken to change from
                         * true to false, (once true, always true) so pmd cannot
                         * be null here.
                         */
                        sqlType = pmd.getParameterType(i + 1);
                    } catch (SQLException e) {
                        pmdKnownBroken = true;
                    }
                }
                stmt.setNull(i + 1, sqlType);
            }
        }
    }","  public void test18()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(callableStatement0).toString();
      doReturn(parameterMetaData0).when(callableStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      CallableStatement callableStatement1 = queryRunner0.prepareCall(connection0, ""ekjf 1"");
      DataSource dataSource1 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner1 = new QueryRunner(dataSource1, false);
      Object[] objectArray0 = new Object[4];
      try { 
        queryRunner1.fillStatement(callableStatement1, objectArray0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Wrong number of parameters: expected 0, was given 4
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
354,"    protected void rethrow(SQLException cause, String sql, Object... params)
            throws SQLException {

        String causeMessage = cause.getMessage();
        if (causeMessage == null) {
            causeMessage = """";
        }
        StringBuffer msg = new StringBuffer(causeMessage);

        msg.append("" Query: "");
        msg.append(sql);
        msg.append("" Parameters: "");

        if (params == null) {
            msg.append(""[]"");
        } else {
            msg.append(Arrays.deepToString(params));
        }

        SQLException e = new SQLException(msg.toString(), cause.getSQLState(),
                cause.getErrorCode());
        e.setNextException(cause);

        throw e;
    }","  public void test19()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-767));
      Integer integer1 = new Integer(2353);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer0, integer0, (Integer) null, (Integer) null, integer1);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true, statementConfiguration0);
      MockThrowable mockThrowable0 = new MockThrowable(""U,`1!F$#g"");
      SQLException sQLException0 = new SQLException(""U,`1!F$#g"", mockThrowable0);
      Object[] objectArray0 = new Object[4];
      objectArray0[3] = (Object) ""U,`1!F$#g"";
      try { 
        queryRunner0.rethrow(sQLException0, ""Couldn't invoke method with 0 arguments: "", objectArray0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // U,`1!F$#g Query: Couldn't invoke method with 0 arguments:  Parameters: [null, null, null, U,`1!F$#g]
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
355,"    public void fillStatement(PreparedStatement stmt, Object... params)
            throws SQLException {

        // check the parameter count, if we can
        ParameterMetaData pmd = null;
        if (!pmdKnownBroken) {
            try {
                pmd = stmt.getParameterMetaData();
                if (pmd == null) { // can be returned by implementations that don't support the method
                    pmdKnownBroken = true;
                } else {
                    int stmtCount = pmd.getParameterCount();
                    int paramsCount = params == null ? 0 : params.length;
        
                    if (stmtCount != paramsCount) {
                        throw new SQLException(""Wrong number of parameters: expected ""
                                + stmtCount + "", was given "" + paramsCount);
                    }
                }
            } catch (SQLFeatureNotSupportedException ex) {
                pmdKnownBroken = true;                
            }
            // TODO see DBUTILS-117: would it make sense to catch any other SQLEx types here?
        }

        // nothing to do here
        if (params == null) {
            return;
        }

        CallableStatement call = null;
        if (stmt instanceof CallableStatement) {
            call = (CallableStatement) stmt;
        }

        for (int i = 0; i < params.length; i++) {
            if (params[i] != null) {
                if (call != null && params[i] instanceof OutParameter) {
                    ((OutParameter)params[i]).register(call, i + 1);
                } else {
                    stmt.setObject(i + 1, params[i]);
                }
            } else {
                // VARCHAR works with many drivers regardless
                // of the actual column type. Oddly, NULL and
                // OTHER don't work with Oracle's drivers.
                int sqlType = Types.VARCHAR;
                if (!pmdKnownBroken) {
                    // TODO see DBUTILS-117: does it make sense to catch SQLEx here?
                    try {
                        /*
                         * It's not possible for pmdKnownBroken to change from
                         * true to false, (once true, always true) so pmd cannot
                         * be null here.
                         */
                        sqlType = pmd.getParameterType(i + 1);
                    } catch (SQLException e) {
                        pmdKnownBroken = true;
                    }
                }
                stmt.setNull(i + 1, sqlType);
            }
        }
    }","  public void test20()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection1).toString();
      DataSource dataSource1 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dataSource1).toString();
      doReturn(connection1).when(dataSource1).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource1, true);
      Connection connection2 = queryRunner0.prepareConnection();
      String string0 = ""i=+a%RZ4Zb`+}"";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) connection2;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) queryRunner0;
      // Undeclared exception!
      try { 
        queryRunner0.fillStatement((PreparedStatement) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
356,"    public void fillStatement(PreparedStatement stmt, Object... params)
            throws SQLException {

        // check the parameter count, if we can
        ParameterMetaData pmd = null;
        if (!pmdKnownBroken) {
            try {
                pmd = stmt.getParameterMetaData();
                if (pmd == null) { // can be returned by implementations that don't support the method
                    pmdKnownBroken = true;
                } else {
                    int stmtCount = pmd.getParameterCount();
                    int paramsCount = params == null ? 0 : params.length;
        
                    if (stmtCount != paramsCount) {
                        throw new SQLException(""Wrong number of parameters: expected ""
                                + stmtCount + "", was given "" + paramsCount);
                    }
                }
            } catch (SQLFeatureNotSupportedException ex) {
                pmdKnownBroken = true;                
            }
            // TODO see DBUTILS-117: would it make sense to catch any other SQLEx types here?
        }

        // nothing to do here
        if (params == null) {
            return;
        }

        CallableStatement call = null;
        if (stmt instanceof CallableStatement) {
            call = (CallableStatement) stmt;
        }

        for (int i = 0; i < params.length; i++) {
            if (params[i] != null) {
                if (call != null && params[i] instanceof OutParameter) {
                    ((OutParameter)params[i]).register(call, i + 1);
                } else {
                    stmt.setObject(i + 1, params[i]);
                }
            } else {
                // VARCHAR works with many drivers regardless
                // of the actual column type. Oddly, NULL and
                // OTHER don't work with Oracle's drivers.
                int sqlType = Types.VARCHAR;
                if (!pmdKnownBroken) {
                    // TODO see DBUTILS-117: does it make sense to catch SQLEx here?
                    try {
                        /*
                         * It's not possible for pmdKnownBroken to change from
                         * true to false, (once true, always true) so pmd cannot
                         * be null here.
                         */
                        sqlType = pmd.getParameterType(i + 1);
                    } catch (SQLException e) {
                        pmdKnownBroken = true;
                    }
                }
                stmt.setNull(i + 1, sqlType);
            }
        }
    }","  public void test21()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      queryRunner0.wrap(resultSet0);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(preparedStatement0).toString();
      doReturn((ParameterMetaData) null).when(preparedStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      PreparedStatement preparedStatement1 = queryRunner0.prepareStatement(connection0, """");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement1).when(connection1).prepareStatement(anyString());
      PreparedStatement preparedStatement2 = queryRunner0.prepareStatement(connection1, ""org.apache.commons.dbutils.AbstractQueryRunner"");
      Connection connection2 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection2).toString();
      DataSource dataSource1 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dataSource1).toString();
      doReturn(connection2).when(dataSource1).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource1, false);
      queryRunner1.prepareConnection();
      Object[] objectArray0 = new Object[4];
      queryRunner1.fillStatement(preparedStatement2, objectArray0);
      Class<String> class0 = String.class;
  }"
357,"    public void fillStatement(PreparedStatement stmt, Object... params)
            throws SQLException {

        // check the parameter count, if we can
        ParameterMetaData pmd = null;
        if (!pmdKnownBroken) {
            try {
                pmd = stmt.getParameterMetaData();
                if (pmd == null) { // can be returned by implementations that don't support the method
                    pmdKnownBroken = true;
                } else {
                    int stmtCount = pmd.getParameterCount();
                    int paramsCount = params == null ? 0 : params.length;
        
                    if (stmtCount != paramsCount) {
                        throw new SQLException(""Wrong number of parameters: expected ""
                                + stmtCount + "", was given "" + paramsCount);
                    }
                }
            } catch (SQLFeatureNotSupportedException ex) {
                pmdKnownBroken = true;                
            }
            // TODO see DBUTILS-117: would it make sense to catch any other SQLEx types here?
        }

        // nothing to do here
        if (params == null) {
            return;
        }

        CallableStatement call = null;
        if (stmt instanceof CallableStatement) {
            call = (CallableStatement) stmt;
        }

        for (int i = 0; i < params.length; i++) {
            if (params[i] != null) {
                if (call != null && params[i] instanceof OutParameter) {
                    ((OutParameter)params[i]).register(call, i + 1);
                } else {
                    stmt.setObject(i + 1, params[i]);
                }
            } else {
                // VARCHAR works with many drivers regardless
                // of the actual column type. Oddly, NULL and
                // OTHER don't work with Oracle's drivers.
                int sqlType = Types.VARCHAR;
                if (!pmdKnownBroken) {
                    // TODO see DBUTILS-117: does it make sense to catch SQLEx here?
                    try {
                        /*
                         * It's not possible for pmdKnownBroken to change from
                         * true to false, (once true, always true) so pmd cannot
                         * be null here.
                         */
                        sqlType = pmd.getParameterType(i + 1);
                    } catch (SQLException e) {
                        pmdKnownBroken = true;
                    }
                }
                stmt.setNull(i + 1, sqlType);
            }
        }
    }","  public void test22()  throws Throwable  {
      QueryRunner queryRunner0 = new QueryRunner(false);
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        queryRunner0.fillStatement((PreparedStatement) null, (Object[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
358,"    public DataSource getDataSource() {
        return this.ds;
    }","  public void test23()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dataSource0).toString();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      queryRunner0.getDataSource();
      Object[] objectArray0 = new Object[0];
  }"
359,"    protected void rethrow(SQLException cause, String sql, Object... params)
            throws SQLException {

        String causeMessage = cause.getMessage();
        if (causeMessage == null) {
            causeMessage = """";
        }
        StringBuffer msg = new StringBuffer(causeMessage);

        msg.append("" Query: "");
        msg.append(sql);
        msg.append("" Parameters: "");

        if (params == null) {
            msg.append(""[]"");
        } else {
            msg.append(Arrays.deepToString(params));
        }

        SQLException e = new SQLException(msg.toString(), cause.getSQLState(),
                cause.getErrorCode());
        e.setNextException(cause);

        throw e;
    }","  public void test24()  throws Throwable  {
      AsyncQueryRunner asyncQueryRunner0 = new AsyncQueryRunner((ExecutorService) null);
      SQLException sQLException0 = new SQLException();
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) null;
      try { 
        asyncQueryRunner0.rethrow(sQLException0, ""$Ax>\""EDT}QG=+5"", objectArray0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         //  Query: $Ax>\""EDT}QG=+5 Parameters: [null, null, null, null, null]
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
360,"    public void fillStatementWithBean(PreparedStatement stmt, Object bean,
            PropertyDescriptor[] properties) throws SQLException {
        Object[] params = new Object[properties.length];
        for (int i = 0; i < properties.length; i++) {
            PropertyDescriptor property = properties[i];
            Object value = null;
            Method method = property.getReadMethod();
            if (method == null) {
                throw new RuntimeException(""No read method for bean property ""
                        + bean.getClass() + "" "" + property.getName());
            }
            try {
                value = method.invoke(bean, new Object[0]);
            } catch (InvocationTargetException e) {
                throw new RuntimeException(""Couldn't invoke method: "" + method,
                        e);
            } catch (IllegalArgumentException e) {
                throw new RuntimeException(
                        ""Couldn't invoke method with 0 arguments: "" + method, e);
            } catch (IllegalAccessException e) {
                throw new RuntimeException(""Couldn't invoke method: "" + method,
                        e);
            }
            params[i] = value;
        }
        fillStatement(stmt, params);
    }","  public void test25()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).toString();
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dataSource0).toString();
      doReturn(connection0).when(dataSource0).getConnection();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      Connection connection1 = queryRunner0.prepareConnection();
      PreparedStatement preparedStatement0 = null;
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""8L{Z"";
      stringArray0[0] = ""closed"";
      // Undeclared exception!
      try { 
        queryRunner0.fillStatementWithBean((PreparedStatement) null, (Object) connection1, stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // propertyName can't be null: 1
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
361,"    public void fillStatementWithBean(PreparedStatement stmt, Object bean,
            PropertyDescriptor[] properties) throws SQLException {
        Object[] params = new Object[properties.length];
        for (int i = 0; i < properties.length; i++) {
            PropertyDescriptor property = properties[i];
            Object value = null;
            Method method = property.getReadMethod();
            if (method == null) {
                throw new RuntimeException(""No read method for bean property ""
                        + bean.getClass() + "" "" + property.getName());
            }
            try {
                value = method.invoke(bean, new Object[0]);
            } catch (InvocationTargetException e) {
                throw new RuntimeException(""Couldn't invoke method: "" + method,
                        e);
            } catch (IllegalArgumentException e) {
                throw new RuntimeException(
                        ""Couldn't invoke method with 0 arguments: "" + method, e);
            } catch (IllegalAccessException e) {
                throw new RuntimeException(""Couldn't invoke method: "" + method,
                        e);
            }
            params[i] = value;
        }
        fillStatement(stmt, params);
    }","  public void test26()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1796932778)).when(parameterMetaData0).getParameterCount();
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(callableStatement0).toString();
      doReturn(0).when(callableStatement0).executeUpdate();
      doReturn(parameterMetaData0).when(callableStatement0).getParameterMetaData();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      CallableStatement callableStatement1 = queryRunner0.prepareCall(connection0, ""ekjf 1"");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement1).when(connection1).prepareStatement(anyString());
      PreparedStatement preparedStatement0 = queryRunner0.prepareStatement(connection1, """");
      Connection connection2 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection2).prepareStatement(anyString());
      PreparedStatement preparedStatement1 = queryRunner0.prepareStatement(connection2, ""org.apache.commons.dbutils.AbstractQueryRunner"");
      Connection connection3 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection3).toString();
      doReturn(preparedStatement1).when(connection3).prepareStatement(anyString());
      DataSource dataSource1 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dataSource1).toString();
      doReturn(connection3).when(dataSource1).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource1, false);
      Connection connection4 = queryRunner1.prepareConnection();
      Integer integer0 = new Integer((-1461000438));
      queryRunner0.update(connection4, ""We*MOw$<*PVkWdn "", (Object) integer0);
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[0];
      try { 
        queryRunner1.fillStatementWithBean((PreparedStatement) callableStatement1, (Object) integer0, propertyDescriptorArray0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Wrong number of parameters: expected -1796932778, was given 0
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
362,"    public boolean isPmdKnownBroken() {
        return pmdKnownBroken;
    }","  public void test27()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(resultSet0).toString();
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      ResultSet resultSet1 = queryRunner0.wrap(resultSet0);
      ParameterMetaData parameterMetaData0 = mock(ParameterMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameterMetaData0).getParameterCount();
      CallableStatement callableStatement0 = mock(CallableStatement.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(callableStatement0).toString();
      doReturn(resultSet1).when(callableStatement0).executeQuery();
      doReturn(0).when(callableStatement0).executeUpdate();
      doReturn(parameterMetaData0).when(callableStatement0).getParameterMetaData();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(callableStatement0).when(connection0).prepareCall(anyString());
      CallableStatement callableStatement1 = queryRunner0.prepareCall(connection0, ""ekjf 1"");
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection1).toString();
      doReturn(callableStatement1, callableStatement1).when(connection1).prepareStatement(anyString());
      DataSource dataSource1 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dataSource1).toString();
      doReturn(connection1).when(dataSource1).getConnection();
      QueryRunner queryRunner1 = new QueryRunner(dataSource1, false);
      Connection connection2 = queryRunner1.prepareConnection();
      Class<String> class0 = String.class;
      BeanHandler<String> beanHandler0 = new BeanHandler<String>(class0);
      queryRunner0.update(connection2, ""org.apache.commons.dbutils.AbstractQueryRunner"", (Object) null);
      queryRunner1.query(connection2, ""3,S}9"", (ResultSetHandler<String>) beanHandler0);
}"
363,"    protected PreparedStatement prepareStatement(Connection conn, String sql)
            throws SQLException {

        PreparedStatement ps = conn.prepareStatement(sql);
        try {
            configureStatement(ps);
        } catch (SQLException e) {
            ps.close();
            throw e;
        }
        return ps;
    }","  public void test28()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = mock(StatementConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(statementConfiguration0).isFetchDirectionSet();
      doReturn(false).when(statementConfiguration0).isFetchSizeSet();
      doReturn(false).when(statementConfiguration0).isMaxFieldSizeSet();
      doReturn(false).when(statementConfiguration0).isMaxRowsSet();
      doReturn(false).when(statementConfiguration0).isQueryTimeoutSet();
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, statementConfiguration0);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.dbutils.AsyncQueryRunner$16"").when(preparedStatement0).toString();
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection1).prepareStatement(anyString() , anyInt());
      queryRunner0.prepareStatement(connection1, ""4kxSMxHal6|;RM6fh."", (-1));
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""4kxSMxHal6|;RM6fh."";
  }"
364,"    protected PreparedStatement prepareStatement(Connection conn, String sql)
            throws SQLException {

        PreparedStatement ps = conn.prepareStatement(sql);
        try {
            configureStatement(ps);
        } catch (SQLException e) {
            ps.close();
            throw e;
        }
        return ps;
    }","  public void test29()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      StatementConfiguration statementConfiguration0 = new StatementConfiguration(integer1, integer0, integer0, integer1, integer0);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, statementConfiguration0);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.dbutils.AsyncQueryRunner$16"").when(preparedStatement0).toString();
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection1).prepareStatement(anyString() , anyInt());
      queryRunner0.prepareStatement(connection1, ""4kxSMxHal6|;RM6fh."", 7);
      Connection connection2 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Object[][] objectArray0 = new Object[8][2];
  }"
365,"    protected PreparedStatement prepareStatement(Connection conn, String sql)
            throws SQLException {

        PreparedStatement ps = conn.prepareStatement(sql);
        try {
            configureStatement(ps);
        } catch (SQLException e) {
            ps.close();
            throw e;
        }
        return ps;
    }","  public void test30()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      StatementConfiguration statementConfiguration0 = new StatementConfiguration((Integer) null, (Integer) null, integer0, integer0, integer1);
      QueryRunner queryRunner0 = new QueryRunner(dataSource0, false, statementConfiguration0);
      queryRunner0.close((Connection) null);
      // Undeclared exception!
      try { 
        queryRunner0.prepareStatement((Connection) null, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
366,"    protected PreparedStatement prepareStatement(Connection conn, String sql)
            throws SQLException {

        PreparedStatement ps = conn.prepareStatement(sql);
        try {
            configureStatement(ps);
        } catch (SQLException e) {
            ps.close();
            throw e;
        }
        return ps;
    }","  public void test31()  throws Throwable  {
      String string0 = ""org.apache.commons.dbutils.AbstractQueryRunner"";
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString() , anyInt());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      String string1 = ""org.apache.commons.dbutils.handlers.BeanHandler"";
      queryRunner0.isPmdKnownBroken();
      queryRunner0.prepareStatement(connection0, ""Null connection"", 21);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
  }"
367,"    protected CallableStatement prepareCall(Connection conn, String sql)
            throws SQLException {

        return conn.prepareCall(sql);
    }","  public void test32()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      QueryRunner queryRunner0 = new QueryRunner(dataSource0);
      String string0 = """";
      Connection connection0 = null;
      // Undeclared exception!
      try { 
        queryRunner0.prepareCall((Connection) null, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.AbstractQueryRunner"", e);
      }
  }"
368,"    public List<T> handle(ResultSet rs) throws SQLException {
        List<T> rows = new ArrayList<T>();
        while (rs.next()) {
            rows.add(this.handleRow(rs));
        }
        return rows;
    }","  public void test0()  throws Throwable  {
      ColumnListHandler<Integer> columnListHandler0 = new ColumnListHandler<Integer>(0);
      // Undeclared exception!
      try { 
        columnListHandler0.handle((ResultSet) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.AbstractListHandler"", e);
      }
  }"
369,"    public List<T> handle(ResultSet rs) throws SQLException {
        List<T> rows = new ArrayList<T>();
        while (rs.next()) {
            rows.add(this.handleRow(rs));
        }
        return rows;
    }","  public void test1()  throws Throwable  {
      ArrayListHandler arrayListHandler0 = new ArrayListHandler();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-2016)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      // Undeclared exception!
      try { 
        arrayListHandler0.handle(resultSet0);
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.BasicRowProcessor"", e);
      }
  }"
370,"    public List<T> handle(ResultSet rs) throws SQLException {
        List<T> rows = new ArrayList<T>();
        while (rs.next()) {
            rows.add(this.handleRow(rs));
        }
        return rows;
    }","  public void test2()  throws Throwable  {
      ColumnListHandler<LinkedList<Object>> columnListHandler0 = new ColumnListHandler<LinkedList<Object>>();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true, false).when(resultSet0).next();
      List<LinkedList<Object>> list0 = columnListHandler0.handle(resultSet0);
}"
371,"    public List<T> handle(ResultSet rs) throws SQLException {
        List<T> rows = new ArrayList<T>();
        while (rs.next()) {
            rows.add(this.handleRow(rs));
        }
        return rows;
    }","  public void test3()  throws Throwable  {
      ColumnListHandler<LinkedList<Object>> columnListHandler0 = new ColumnListHandler<LinkedList<Object>>("""");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      List<LinkedList<Object>> list0 = columnListHandler0.handle(resultSet0);
}"
372,"    protected Map<String, Object> createRow(ResultSet rs) throws SQLException {
        return this.convert.toMap(rs);
    }","  public void test0()  throws Throwable  {
      KeyedHandler<String> keyedHandler0 = new KeyedHandler<String>();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      Map<String, Object> map0 = keyedHandler0.createRow(resultSet0);
}"
373,"    protected K createKey(ResultSet rs) throws SQLException {
        return (columnName == null) ?
               (K) rs.getObject(columnIndex) :
               (K) rs.getObject(columnName);
    }","  public void test1()  throws Throwable  {
      KeyedHandler<String> keyedHandler0 = new KeyedHandler<String>((-5577));
      // Undeclared exception!
      try { 
        keyedHandler0.createKey((ResultSet) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.KeyedHandler"", e);
      }
  }"
374,"    public KeyedHandler() {
        this(ArrayHandler.ROW_PROCESSOR, 1, null);
    }","  public void test2()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      KeyedHandler<HashMap<Object, Object>> keyedHandler0 = new KeyedHandler<HashMap<Object, Object>>(basicRowProcessor0);
  }"
375,"    protected K createKey(ResultSet rs) throws SQLException {
        return (columnName == null) ?
               (K) rs.getObject(columnIndex) :
               (K) rs.getObject(columnName);
    }","  public void test3()  throws Throwable  {
      KeyedHandler<String> keyedHandler0 = new KeyedHandler<String>();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(resultSet0).getObject(anyInt());
      String string0 = keyedHandler0.createKey(resultSet0);
}"
376,"    protected Map<String, Object> createRow(ResultSet rs) throws SQLException {
        return this.convert.toMap(rs);
    }","  public void test4()  throws Throwable  {
      KeyedHandler<Object> keyedHandler0 = new KeyedHandler<Object>(0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        keyedHandler0.createRow(resultSet0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.BasicRowProcessor"", e);
      }
  }"
377,"    protected V createRow(ResultSet rs) throws SQLException {
        return this.convert.toBean(rs, type);
    }","  public void test0()  throws Throwable  {
      Class<Object> class0 = Object.class;
      BeanMapHandler<Object, Object> beanMapHandler0 = new BeanMapHandler<Object, Object>(class0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      Object object0 = beanMapHandler0.createRow(resultSet0);
}"
378,"    protected K createKey(ResultSet rs) throws SQLException {
        return (columnName == null) ?
               (K) rs.getObject(columnIndex) :
               (K) rs.getObject(columnName);
    }","  public void test1()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      BeanMapHandler<String, Integer> beanMapHandler0 = new BeanMapHandler<String, Integer>(class0, ""/[.uYkUG8=,5"");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(resultSet0).getObject(anyString());
      String string0 = beanMapHandler0.createKey(resultSet0);
}"
379,"    protected V createRow(ResultSet rs) throws SQLException {
        return this.convert.toBean(rs, type);
    }","  public void test2()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(3181).when(resultSetMetaData0).getColumnCount();
      doReturn("""", (String) null).when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn("""", (String) null).when(resultSetMetaData0).getColumnName(anyInt());
      Class<String> class0 = String.class;
      BeanMapHandler<String, String> beanMapHandler0 = new BeanMapHandler<String, String>(class0, 3181);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        beanMapHandler0.createRow(resultSet0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.BeanProcessor"", e);
      }
  }"
380,"    protected V createRow(ResultSet rs) throws SQLException {
        return this.convert.toBean(rs, type);
    }","  public void test3()  throws Throwable  {
      Class<Object> class0 = Object.class;
      BeanMapHandler<String, Object> beanMapHandler0 = new BeanMapHandler<String, Object>(class0, """");
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-997)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        beanMapHandler0.createRow(resultSet0);
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.BeanProcessor"", e);
      }
  }"
381,"    protected K createKey(ResultSet rs) throws SQLException {
        return (columnName == null) ?
               (K) rs.getObject(columnIndex) :
               (K) rs.getObject(columnName);
    }","  public void test4()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      BeanMapHandler<String, Integer> beanMapHandler0 = new BeanMapHandler<String, Integer>(class0, ""/[.uYkUG8=,5"");
      // Undeclared exception!
      try { 
        beanMapHandler0.createKey((ResultSet) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.BeanMapHandler"", e);
      }
  }"
382,"    protected K createKey(ResultSet rs) throws SQLException {
        return (columnName == null) ?
               (K) rs.getObject(columnIndex) :
               (K) rs.getObject(columnName);
    }","  public void test5()  throws Throwable  {
      Class<Object> class0 = Object.class;
      BeanMapHandler<Object, Object> beanMapHandler0 = new BeanMapHandler<Object, Object>(class0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(beanMapHandler0).when(resultSet0).getObject(anyInt());
      Object object0 = beanMapHandler0.createKey(resultSet0);
}"
383,"    protected V createRow(ResultSet rs) throws SQLException {
        return this.convert.toBean(rs, type);
    }","  public void test6()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      BeanMapHandler<Object, Integer> beanMapHandler0 = new BeanMapHandler<Object, Integer>(class0, basicRowProcessor0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      try { 
        beanMapHandler0.createRow(resultSet0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Cannot create java.lang.Integer: java.lang.Integer
         //
         verifyException(""org.apache.commons.dbutils.BeanProcessor"", e);
      }
  }"
384,"    public Object[] handle(ResultSet rs) throws SQLException {
        return rs.next() ? this.convert.toArray(rs) : EMPTY_ARRAY;
    }","  public void test0()  throws Throwable  {
      ArrayHandler arrayHandler0 = new ArrayHandler();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(2170).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true).when(resultSet0).next();
      Object[] objectArray0 = arrayHandler0.handle(resultSet0);
}"
385,"    public Object[] handle(ResultSet rs) throws SQLException {
        return rs.next() ? this.convert.toArray(rs) : EMPTY_ARRAY;
    }","  public void test1()  throws Throwable  {
      ArrayHandler arrayHandler0 = new ArrayHandler();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1834)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      // Undeclared exception!
      try { 
        arrayHandler0.handle(resultSet0);
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.BasicRowProcessor"", e);
      }
  }"
386,"    public Object[] handle(ResultSet rs) throws SQLException {
        return rs.next() ? this.convert.toArray(rs) : EMPTY_ARRAY;
    }","  public void test2()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      ArrayHandler arrayHandler0 = new ArrayHandler(basicRowProcessor0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      // Undeclared exception!
      try { 
        arrayHandler0.handle(resultSet0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.BasicRowProcessor"", e);
      }
  }"
387,"    public Object[] handle(ResultSet rs) throws SQLException {
        return rs.next() ? this.convert.toArray(rs) : EMPTY_ARRAY;
    }","  public void test3()  throws Throwable  {
      ArrayHandler arrayHandler0 = new ArrayHandler();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      Object[] objectArray0 = arrayHandler0.handle(resultSet0);
}"
388,"    public MapHandler() {
        this(ArrayHandler.ROW_PROCESSOR);
    }","  public void test0()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      MapHandler mapHandler0 = new MapHandler(basicRowProcessor0);
  }"
389,"    public Map<String, Object> handle(ResultSet rs) throws SQLException {
        return rs.next() ? this.convert.toMap(rs) : null;
    }","  public void test1()  throws Throwable  {
      MapHandler mapHandler0 = new MapHandler();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      // Undeclared exception!
      try { 
        mapHandler0.handle(resultSet0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.BasicRowProcessor"", e);
      }
  }"
390,"    public Map<String, Object> handle(ResultSet rs) throws SQLException {
        return rs.next() ? this.convert.toMap(rs) : null;
    }","  public void test2()  throws Throwable  {
      MapHandler mapHandler0 = new MapHandler();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      Map<String, Object> map0 = mapHandler0.handle(resultSet0);
}"
391,"    protected Map<String, Object> handleRow(ResultSet rs) throws SQLException {
        return this.convert.toMap(rs);
    }","  public void test0()  throws Throwable  {
      MapListHandler mapListHandler0 = new MapListHandler();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      Map<String, Object> map0 = mapListHandler0.handleRow(resultSet0);
}"
392,"    public MapListHandler() {
        this(ArrayHandler.ROW_PROCESSOR);
    }","  public void test1()  throws Throwable  {
      BeanProcessor beanProcessor0 = new BeanProcessor();
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor(beanProcessor0);
      MapListHandler mapListHandler0 = new MapListHandler(basicRowProcessor0);
  }"
393,"    protected Map<String, Object> handleRow(ResultSet rs) throws SQLException {
        return this.convert.toMap(rs);
    }","  public void test2()  throws Throwable  {
      MapListHandler mapListHandler0 = new MapListHandler();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        mapListHandler0.handleRow(resultSet0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.BasicRowProcessor"", e);
      }
  }"
394,"    public Map<K, V> handle(ResultSet rs) throws SQLException {
        Map<K, V> result = createMap();
        while (rs.next()) {
            result.put(createKey(rs), createRow(rs));
        }
        return result;
    }","  public void test0()  throws Throwable  {
      Class<Object> class0 = Object.class;
      BeanProcessor beanProcessor0 = new BeanProcessor();
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor(beanProcessor0);
      BeanMapHandler<Object, Object> beanMapHandler0 = new BeanMapHandler<Object, Object>(class0, basicRowProcessor0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true, false).when(resultSet0).next();
      Map<Object, Object> map0 = beanMapHandler0.handle(resultSet0);
}"
395,"    protected Map<K, V> createMap() {
        return new HashMap<K, V>();
    }","  public void test1()  throws Throwable  {
      Class<Object> class0 = Object.class;
      BeanMapHandler<HashMap<Object, Integer>, Object> beanMapHandler0 = new BeanMapHandler<HashMap<Object, Integer>, Object>(class0, ""F#@gHp"");
      Map<HashMap<Object, Integer>, Object> map0 = beanMapHandler0.createMap();
}"
396,"    public Map<K, V> handle(ResultSet rs) throws SQLException {
        Map<K, V> result = createMap();
        while (rs.next()) {
            result.put(createKey(rs), createRow(rs));
        }
        return result;
    }","  public void test2()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      BeanMapHandler<HashMap<Object, Integer>, Integer> beanMapHandler0 = new BeanMapHandler<HashMap<Object, Integer>, Integer>(class0);
      // Undeclared exception!
      try { 
        beanMapHandler0.handle((ResultSet) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.AbstractKeyedHandler"", e);
      }
  }"
397,"    public Map<K, V> handle(ResultSet rs) throws SQLException {
        Map<K, V> result = createMap();
        while (rs.next()) {
            result.put(createKey(rs), createRow(rs));
        }
        return result;
    }","  public void test3()  throws Throwable  {
      Class<Object> class0 = Object.class;
      BeanMapHandler<String, Object> beanMapHandler0 = new BeanMapHandler<String, Object>(class0, 0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-4104)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(""0Zo>\""`F"").when(resultSet0).getObject(anyInt());
      doReturn(true).when(resultSet0).next();
      // Undeclared exception!
      try { 
        beanMapHandler0.handle(resultSet0);
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.BeanProcessor"", e);
      }
  }"
398,"    public Map<K, V> handle(ResultSet rs) throws SQLException {
        Map<K, V> result = createMap();
        while (rs.next()) {
            result.put(createKey(rs), createRow(rs));
        }
        return result;
    }","  public void test4()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      BeanMapHandler<String, Integer> beanMapHandler0 = new BeanMapHandler<String, Integer>(class0, ""org.apache.commons.dbutils.handlers.AbstractKeyedHandler"");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(resultSet0).getObject(anyString());
      doReturn(true).when(resultSet0).next();
      try { 
        beanMapHandler0.handle(resultSet0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Cannot create java.lang.Integer: java.lang.Integer
         //
         verifyException(""org.apache.commons.dbutils.BeanProcessor"", e);
      }
  }"
399,"    public Map<K, V> handle(ResultSet rs) throws SQLException {
        Map<K, V> result = createMap();
        while (rs.next()) {
            result.put(createKey(rs), createRow(rs));
        }
        return result;
    }","  public void test5()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      BeanMapHandler<String, Integer> beanMapHandler0 = new BeanMapHandler<String, Integer>(class0, ""org.apache.commons.dbutils.handlers.AbstractKeyedHandler"");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      Map<String, Integer> map0 = beanMapHandler0.handle(resultSet0);
}"
400,"    public List<T> handle(ResultSet rs) throws SQLException {
        return this.convert.toBeanList(rs, type);
    }","  public void test0()  throws Throwable  {
      Class<String> class0 = String.class;
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      BeanListHandler<Object> beanListHandler0 = new BeanListHandler<Object>(class0, basicRowProcessor0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      List<Object> list0 = beanListHandler0.handle(resultSet0);
}"
401,"    public List<T> handle(ResultSet rs) throws SQLException {
        return this.convert.toBeanList(rs, type);
    }","  public void test1()  throws Throwable  {
      Class<String> class0 = String.class;
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      BeanListHandler<Object> beanListHandler0 = new BeanListHandler<Object>(class0, basicRowProcessor0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1254)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      // Undeclared exception!
      try { 
        beanListHandler0.handle(resultSet0);
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.BeanProcessor"", e);
      }
  }"
402,"    protected T handleRow(ResultSet rs) throws SQLException {
        if (this.columnName == null) {
            return (T) rs.getObject(this.columnIndex);
        }
        return (T) rs.getObject(this.columnName);
   }","  public void test0()  throws Throwable  {
      ColumnListHandler<Object> columnListHandler0 = new ColumnListHandler<Object>();
      // Undeclared exception!
      try { 
        columnListHandler0.handleRow((ResultSet) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.ColumnListHandler"", e);
      }
  }"
403,"    protected T handleRow(ResultSet rs) throws SQLException {
        if (this.columnName == null) {
            return (T) rs.getObject(this.columnIndex);
        }
        return (T) rs.getObject(this.columnName);
   }","  public void test1()  throws Throwable  {
      ColumnListHandler<String> columnListHandler0 = new ColumnListHandler<String>(0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(resultSet0).getObject(anyInt());
      String string0 = columnListHandler0.handleRow(resultSet0);
}"
404,"    public T handle(ResultSet rs) throws SQLException {

        if (rs.next()) {
            if (this.columnName == null) {
                return (T) rs.getObject(this.columnIndex);
            }
            return (T) rs.getObject(this.columnName);
        }
        return null;
    }","  public void test0()  throws Throwable  {
      ScalarHandler<String> scalarHandler0 = new ScalarHandler<String>((String) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      String string0 = scalarHandler0.handle(resultSet0);
}"
405,"    public T handle(ResultSet rs) throws SQLException {

        if (rs.next()) {
            if (this.columnName == null) {
                return (T) rs.getObject(this.columnIndex);
            }
            return (T) rs.getObject(this.columnName);
        }
        return null;
    }","  public void test1()  throws Throwable  {
      ScalarHandler<Integer> scalarHandler0 = new ScalarHandler<Integer>("""");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(resultSet0).getObject(anyString());
      doReturn(true).when(resultSet0).next();
      Integer integer0 = scalarHandler0.handle(resultSet0);
}"
406,"    public T handle(ResultSet rs) throws SQLException {

        if (rs.next()) {
            if (this.columnName == null) {
                return (T) rs.getObject(this.columnIndex);
            }
            return (T) rs.getObject(this.columnName);
        }
        return null;
    }","  public void test2()  throws Throwable  {
      ScalarHandler<String> scalarHandler0 = new ScalarHandler<String>();
      // Undeclared exception!
      try { 
        scalarHandler0.handle((ResultSet) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.ScalarHandler"", e);
      }
  }"
407,"    public T handle(ResultSet rs) throws SQLException {

        if (rs.next()) {
            if (this.columnName == null) {
                return (T) rs.getObject(this.columnIndex);
            }
            return (T) rs.getObject(this.columnName);
        }
        return null;
    }","  public void test3()  throws Throwable  {
      ScalarHandler<Object> scalarHandler0 = new ScalarHandler<Object>((-1653));
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true).when(resultSet0).next();
      Object object0 = scalarHandler0.handle(resultSet0);
}"
408,"    public T handle(ResultSet rs) throws SQLException {
        return rs.next() ? this.convert.toBean(rs, this.type) : null;
    }","  public void test0()  throws Throwable  {
      Class<String> class0 = String.class;
      BeanHandler<String> beanHandler0 = new BeanHandler<String>(class0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      String string0 = beanHandler0.handle(resultSet0);
}"
409,"    public T handle(ResultSet rs) throws SQLException {
        return rs.next() ? this.convert.toBean(rs, this.type) : null;
    }","  public void test1()  throws Throwable  {
      Class<String> class0 = String.class;
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      BeanHandler<Object> beanHandler0 = new BeanHandler<Object>(class0, basicRowProcessor0);
      // Undeclared exception!
      try { 
        beanHandler0.handle((ResultSet) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.BeanHandler"", e);
      }
  }"
410,"    public T handle(ResultSet rs) throws SQLException {
        return rs.next() ? this.convert.toBean(rs, this.type) : null;
    }","  public void test2()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      BeanHandler<Object> beanHandler0 = new BeanHandler<Object>(class0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(resultSet0).next();
      try { 
        beanHandler0.handle(resultSet0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Cannot create java.lang.Integer: java.lang.Integer
         //
         verifyException(""org.apache.commons.dbutils.BeanProcessor"", e);
      }
  }"
411,"    public T handle(ResultSet rs) throws SQLException {
        return rs.next() ? this.convert.toBean(rs, this.type) : null;
    }","  public void test3()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      BeanHandler<Object> beanHandler0 = new BeanHandler<Object>(class0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      Object object0 = beanHandler0.handle(resultSet0);
}"
412,"    protected Object[] handleRow(ResultSet rs) throws SQLException {
        return this.convert.toArray(rs);
    }","  public void test0()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      ArrayListHandler arrayListHandler0 = new ArrayListHandler(basicRowProcessor0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1535).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(resultSet0).getObject(anyInt());
      Object[] objectArray0 = arrayListHandler0.handleRow(resultSet0);
}"
413,"    protected Object[] handleRow(ResultSet rs) throws SQLException {
        return this.convert.toArray(rs);
    }","  public void test1()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      ArrayListHandler arrayListHandler0 = new ArrayListHandler(basicRowProcessor0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      Object[] objectArray0 = arrayListHandler0.handleRow(resultSet0);
}"
414,"    protected Object[] handleRow(ResultSet rs) throws SQLException {
        return this.convert.toArray(rs);
    }","  public void test2()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      ArrayListHandler arrayListHandler0 = new ArrayListHandler(basicRowProcessor0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-2405)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        arrayListHandler0.handleRow(resultSet0);
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.BasicRowProcessor"", e);
      }
  }"
415,"    protected Object[] handleRow(ResultSet rs) throws SQLException {
        return this.convert.toArray(rs);
    }","  public void test3()  throws Throwable  {
      ArrayListHandler arrayListHandler0 = new ArrayListHandler();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        arrayListHandler0.handleRow(resultSet0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.BasicRowProcessor"", e);
      }
  }"
416,"    public Object apply(Class<?> parameter, Object value) {
        return Enum.valueOf(parameter.asSubclass(Enum.class), (String) value);
    }","  public void test0()  throws Throwable  {
      StringEnumPropertyHandler stringEnumPropertyHandler0 = new StringEnumPropertyHandler();
      Class<Answers> class0 = Answers.class;
      Object object0 = stringEnumPropertyHandler0.apply(class0, ""RETURNS_SMART_NULLS"");
}"
417,"    public boolean match(Class<?> parameter, Object value) {
        return value instanceof String && parameter.isEnum();
    }","  public void test1()  throws Throwable  {
      StringEnumPropertyHandler stringEnumPropertyHandler0 = new StringEnumPropertyHandler();
      // Undeclared exception!
      try { 
        stringEnumPropertyHandler0.match((Class<?>) null, ""RETURNS_MOCKS"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.properties.StringEnumPropertyHandler"", e);
      }
  }"
418,"    public Object apply(Class<?> parameter, Object value) {
        return Enum.valueOf(parameter.asSubclass(Enum.class), (String) value);
    }","  public void test2()  throws Throwable  {
      StringEnumPropertyHandler stringEnumPropertyHandler0 = new StringEnumPropertyHandler();
      // Undeclared exception!
      try { 
        stringEnumPropertyHandler0.apply((Class<?>) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.properties.StringEnumPropertyHandler"", e);
      }
  }"
419,"    public boolean match(Class<?> parameter, Object value) {
        return value instanceof String && parameter.isEnum();
    }","  public void test3()  throws Throwable  {
      StringEnumPropertyHandler stringEnumPropertyHandler0 = new StringEnumPropertyHandler();
      Class<String> class0 = String.class;
      boolean boolean0 = stringEnumPropertyHandler0.match(class0, "":o-x8fpC)f"");
}"
420,"    public boolean match(Class<?> parameter, Object value) {
        return value instanceof String && parameter.isEnum();
    }","  public void test4()  throws Throwable  {
      StringEnumPropertyHandler stringEnumPropertyHandler0 = new StringEnumPropertyHandler();
      Class<Answers> class0 = Answers.class;
      boolean boolean0 = stringEnumPropertyHandler0.match(class0, ""$"");
}"
421,"    public boolean match(Class<?> parameter, Object value) {
        return value instanceof String && parameter.isEnum();
    }","  public void test5()  throws Throwable  {
      StringEnumPropertyHandler stringEnumPropertyHandler0 = new StringEnumPropertyHandler();
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = stringEnumPropertyHandler0.match(class0, stringEnumPropertyHandler0);
}"
422,"    public Object apply(Class<?> parameter, Object value) {
        return Enum.valueOf(parameter.asSubclass(Enum.class), (String) value);
    }","  public void test6()  throws Throwable  {
      StringEnumPropertyHandler stringEnumPropertyHandler0 = new StringEnumPropertyHandler();
      Class<Answers> class0 = Answers.class;
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        stringEnumPropertyHandler0.apply(class1, class0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
      }
  }"
423,"    public Object apply(Class<?> parameter, Object value) {
        final String targetType = parameter.getName();
        if (""java.sql.Date"".equals(targetType)) {
            value = new java.sql.Date(((java.util.Date) value).getTime());
        } else
        if (""java.sql.Time"".equals(targetType)) {
            value = new java.sql.Time(((java.util.Date) value).getTime());
        } else
        if (""java.sql.Timestamp"".equals(targetType)) {
            Timestamp tsValue = (Timestamp) value;
            int nanos = tsValue.getNanos();
            value = new java.sql.Timestamp(tsValue.getTime());
            ((Timestamp) value).setNanos(nanos);
        }

        return value;
    }","  public void test0()  throws Throwable  {
      DatePropertyHandler datePropertyHandler0 = new DatePropertyHandler();
      Class<Object> class0 = Object.class;
      Object object0 = datePropertyHandler0.apply(class0, (Object) null);
}"
424,"    public boolean match(Class<?> parameter, Object value) {
        if (value instanceof java.util.Date) {
            final String targetType = parameter.getName();
            if (""java.sql.Date"".equals(targetType)) {
                return true;
            } else
            if (""java.sql.Time"".equals(targetType)) {
                return true;
            } else
            if (""java.sql.Timestamp"".equals(targetType)) {
                return true;
            }
        }

        return false;
    }","  public void test1()  throws Throwable  {
      DatePropertyHandler datePropertyHandler0 = new DatePropertyHandler();
      Timestamp timestamp0 = new Timestamp((-893L));
      // Undeclared exception!
      try { 
        datePropertyHandler0.match((Class<?>) null, timestamp0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.properties.DatePropertyHandler"", e);
      }
  }"
425,"    public Object apply(Class<?> parameter, Object value) {
        final String targetType = parameter.getName();
        if (""java.sql.Date"".equals(targetType)) {
            value = new java.sql.Date(((java.util.Date) value).getTime());
        } else
        if (""java.sql.Time"".equals(targetType)) {
            value = new java.sql.Time(((java.util.Date) value).getTime());
        } else
        if (""java.sql.Timestamp"".equals(targetType)) {
            Timestamp tsValue = (Timestamp) value;
            int nanos = tsValue.getNanos();
            value = new java.sql.Timestamp(tsValue.getTime());
            ((Timestamp) value).setNanos(nanos);
        }

        return value;
    }","  public void test2()  throws Throwable  {
      DatePropertyHandler datePropertyHandler0 = new DatePropertyHandler();
      Class<Timestamp> class0 = Timestamp.class;
      // Undeclared exception!
      try { 
        datePropertyHandler0.apply(class0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.properties.DatePropertyHandler"", e);
      }
  }"
426,"    public Object apply(Class<?> parameter, Object value) {
        final String targetType = parameter.getName();
        if (""java.sql.Date"".equals(targetType)) {
            value = new java.sql.Date(((java.util.Date) value).getTime());
        } else
        if (""java.sql.Time"".equals(targetType)) {
            value = new java.sql.Time(((java.util.Date) value).getTime());
        } else
        if (""java.sql.Timestamp"".equals(targetType)) {
            Timestamp tsValue = (Timestamp) value;
            int nanos = tsValue.getNanos();
            value = new java.sql.Timestamp(tsValue.getTime());
            ((Timestamp) value).setNanos(nanos);
        }

        return value;
    }","  public void test3()  throws Throwable  {
      DatePropertyHandler datePropertyHandler0 = new DatePropertyHandler();
      Class<Timestamp> class0 = Timestamp.class;
      // Undeclared exception!
      try { 
        datePropertyHandler0.apply(class0, class0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.sql.Timestamp
         //
         verifyException(""org.apache.commons.dbutils.handlers.properties.DatePropertyHandler"", e);
      }
  }"
427,"    public Object apply(Class<?> parameter, Object value) {
        final String targetType = parameter.getName();
        if (""java.sql.Date"".equals(targetType)) {
            value = new java.sql.Date(((java.util.Date) value).getTime());
        } else
        if (""java.sql.Time"".equals(targetType)) {
            value = new java.sql.Time(((java.util.Date) value).getTime());
        } else
        if (""java.sql.Timestamp"".equals(targetType)) {
            Timestamp tsValue = (Timestamp) value;
            int nanos = tsValue.getNanos();
            value = new java.sql.Timestamp(tsValue.getTime());
            ((Timestamp) value).setNanos(nanos);
        }

        return value;
    }","  public void test4()  throws Throwable  {
      DatePropertyHandler datePropertyHandler0 = new DatePropertyHandler();
      Class<Timestamp> class0 = Timestamp.class;
      Timestamp timestamp0 = new Timestamp(16L);
      Timestamp timestamp1 = (Timestamp)datePropertyHandler0.apply(class0, timestamp0);
}"
428,"    public Object apply(Class<?> parameter, Object value) {
        final String targetType = parameter.getName();
        if (""java.sql.Date"".equals(targetType)) {
            value = new java.sql.Date(((java.util.Date) value).getTime());
        } else
        if (""java.sql.Time"".equals(targetType)) {
            value = new java.sql.Time(((java.util.Date) value).getTime());
        } else
        if (""java.sql.Timestamp"".equals(targetType)) {
            Timestamp tsValue = (Timestamp) value;
            int nanos = tsValue.getNanos();
            value = new java.sql.Timestamp(tsValue.getTime());
            ((Timestamp) value).setNanos(nanos);
        }

        return value;
    }","  public void test5()  throws Throwable  {
      DatePropertyHandler datePropertyHandler0 = new DatePropertyHandler();
      Class<Timestamp> class0 = Timestamp.class;
      Timestamp timestamp0 = new Timestamp(16L);
      Timestamp timestamp1 = (Timestamp)datePropertyHandler0.apply(class0, timestamp0);
}"
429,"    public boolean match(Class<?> parameter, Object value) {
        if (value instanceof java.util.Date) {
            final String targetType = parameter.getName();
            if (""java.sql.Date"".equals(targetType)) {
                return true;
            } else
            if (""java.sql.Time"".equals(targetType)) {
                return true;
            } else
            if (""java.sql.Timestamp"".equals(targetType)) {
                return true;
            }
        }

        return false;
    }","  public void test6()  throws Throwable  {
      DatePropertyHandler datePropertyHandler0 = new DatePropertyHandler();
      Class<Timestamp> class0 = Timestamp.class;
      Timestamp timestamp0 = new Timestamp(16L);
      boolean boolean0 = datePropertyHandler0.match(class0, timestamp0);
}"
430,"    public boolean match(Class<?> parameter, Object value) {
        if (value instanceof java.util.Date) {
            final String targetType = parameter.getName();
            if (""java.sql.Date"".equals(targetType)) {
                return true;
            } else
            if (""java.sql.Time"".equals(targetType)) {
                return true;
            } else
            if (""java.sql.Timestamp"".equals(targetType)) {
                return true;
            }
        }

        return false;
    }","  public void test7()  throws Throwable  {
      DatePropertyHandler datePropertyHandler0 = new DatePropertyHandler();
      Class<Integer> class0 = Integer.class;
      Timestamp timestamp0 = new Timestamp((-1819L));
      boolean boolean0 = datePropertyHandler0.match(class0, timestamp0);
}"
431,"    public boolean match(Class<?> parameter, Object value) {
        if (value instanceof java.util.Date) {
            final String targetType = parameter.getName();
            if (""java.sql.Date"".equals(targetType)) {
                return true;
            } else
            if (""java.sql.Time"".equals(targetType)) {
                return true;
            } else
            if (""java.sql.Timestamp"".equals(targetType)) {
                return true;
            }
        }

        return false;
    }","  public void test8()  throws Throwable  {
      DatePropertyHandler datePropertyHandler0 = new DatePropertyHandler();
      Class<Integer> class0 = Integer.class;
      Object object0 = datePropertyHandler0.apply(class0, class0);
      Class<String> class1 = String.class;
      boolean boolean0 = datePropertyHandler0.match(class1, object0);
}"
432,"    public boolean match(Class<?> propType) {
        return propType.equals(Integer.TYPE) || propType.equals(Integer.class);
    }","  public void test0()  throws Throwable  {
      IntegerColumnHandler integerColumnHandler0 = new IntegerColumnHandler();
      // Undeclared exception!
      try { 
        integerColumnHandler0.match((Class<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.columns.IntegerColumnHandler"", e);
      }
  }"
433,"    public Object apply(ResultSet rs, int columnIndex) throws SQLException {
        return Integer.valueOf(rs.getInt(columnIndex));
    }","  public void test1()  throws Throwable  {
      IntegerColumnHandler integerColumnHandler0 = new IntegerColumnHandler();
      // Undeclared exception!
      try { 
        integerColumnHandler0.apply((ResultSet) null, 2249);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.columns.IntegerColumnHandler"", e);
      }
  }"
434,"    public boolean match(Class<?> propType) {
        return propType.equals(Integer.TYPE) || propType.equals(Integer.class);
    }","  public void test2()  throws Throwable  {
      IntegerColumnHandler integerColumnHandler0 = new IntegerColumnHandler();
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = integerColumnHandler0.match(class0);
}"
435,"    public boolean match(Class<?> propType) {
        return propType.equals(Integer.TYPE) || propType.equals(Integer.class);
    }","  public void test3()  throws Throwable  {
      IntegerColumnHandler integerColumnHandler0 = new IntegerColumnHandler();
      Class<Object> class0 = Object.class;
      boolean boolean0 = integerColumnHandler0.match(class0);
}"
436,"    public boolean match(Class<?> propType) {
        return propType.equals(Integer.TYPE) || propType.equals(Integer.class);
    }","  public void test4()  throws Throwable  {
      IntegerColumnHandler integerColumnHandler0 = new IntegerColumnHandler();
      Class<Integer> class0 = Integer.TYPE;
      boolean boolean0 = integerColumnHandler0.match(class0);
}"
437,"    public Object apply(ResultSet rs, int columnIndex) throws SQLException {
        return Integer.valueOf(rs.getInt(columnIndex));
    }","  public void test5()  throws Throwable  {
      IntegerColumnHandler integerColumnHandler0 = new IntegerColumnHandler();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSet0).getInt(anyInt());
      Object object0 = integerColumnHandler0.apply(resultSet0, 1);
}"
438,"    public Object apply(ResultSet rs, int columnIndex) throws SQLException {
        return Boolean.valueOf(rs.getBoolean(columnIndex));
    }","  public void test0()  throws Throwable  {
      BooleanColumnHandler booleanColumnHandler0 = new BooleanColumnHandler();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).getBoolean(anyInt());
      Object object0 = booleanColumnHandler0.apply(resultSet0, (-1));
}"
439,"    public boolean match(Class<?> propType) {
        return propType.equals(Boolean.TYPE) || propType.equals(Boolean.class);
    }","  public void test1()  throws Throwable  {
      BooleanColumnHandler booleanColumnHandler0 = new BooleanColumnHandler();
      // Undeclared exception!
      try { 
        booleanColumnHandler0.match((Class<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.columns.BooleanColumnHandler"", e);
      }
  }"
440,"    public boolean match(Class<?> propType) {
        return propType.equals(Boolean.TYPE) || propType.equals(Boolean.class);
    }","  public void test2()  throws Throwable  {
      BooleanColumnHandler booleanColumnHandler0 = new BooleanColumnHandler();
      Class<String> class0 = String.class;
      boolean boolean0 = booleanColumnHandler0.match(class0);
}"
441,"    public boolean match(Class<?> propType) {
        return propType.equals(Boolean.TYPE) || propType.equals(Boolean.class);
    }","  public void test3()  throws Throwable  {
      BooleanColumnHandler booleanColumnHandler0 = new BooleanColumnHandler();
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = booleanColumnHandler0.match(class0);
}"
442,"    public boolean match(Class<?> propType) {
        return propType.equals(Boolean.TYPE) || propType.equals(Boolean.class);
    }","  public void test4()  throws Throwable  {
      BooleanColumnHandler booleanColumnHandler0 = new BooleanColumnHandler();
      Class<Boolean> class0 = Boolean.TYPE;
      boolean boolean0 = booleanColumnHandler0.match(class0);
}"
443,"    public Object apply(ResultSet rs, int columnIndex) throws SQLException {
        return Boolean.valueOf(rs.getBoolean(columnIndex));
    }","  public void test5()  throws Throwable  {
      BooleanColumnHandler booleanColumnHandler0 = new BooleanColumnHandler();
      // Undeclared exception!
      try { 
        booleanColumnHandler0.apply((ResultSet) null, (-1));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.columns.BooleanColumnHandler"", e);
      }
  }"
444,"    public boolean match(Class<?> propType) {
        return propType.equals(String.class);
    }","  public void test0()  throws Throwable  {
      StringColumnHandler stringColumnHandler0 = new StringColumnHandler();
      Class<String> class0 = String.class;
      boolean boolean0 = stringColumnHandler0.match(class0);
}"
445,"    public Object apply(ResultSet rs, int columnIndex) throws SQLException {
        return rs.getString(columnIndex);
    }","  public void test1()  throws Throwable  {
      StringColumnHandler stringColumnHandler0 = new StringColumnHandler();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""="").when(resultSet0).getString(anyInt());
      Object object0 = stringColumnHandler0.apply(resultSet0, (-12));
}"
446,"    public Object apply(ResultSet rs, int columnIndex) throws SQLException {
        return rs.getString(columnIndex);
    }","  public void test2()  throws Throwable  {
      StringColumnHandler stringColumnHandler0 = new StringColumnHandler();
      // Undeclared exception!
      try { 
        stringColumnHandler0.apply((ResultSet) null, 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.columns.StringColumnHandler"", e);
      }
  }"
447,"    public Object apply(ResultSet rs, int columnIndex) throws SQLException {
        return rs.getString(columnIndex);
    }","  public void test3()  throws Throwable  {
      StringColumnHandler stringColumnHandler0 = new StringColumnHandler();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).getString(anyInt());
      Object object0 = stringColumnHandler0.apply(resultSet0, 0);
}"
448,"    public boolean match(Class<?> propType) {
        return propType.equals(String.class);
    }","  public void test4()  throws Throwable  {
      StringColumnHandler stringColumnHandler0 = new StringColumnHandler();
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = stringColumnHandler0.match(class0);
}"
449,"    public boolean match(Class<?> propType) {
        return propType.equals(Short.TYPE) || propType.equals(Short.class);
    }","  public void test0()  throws Throwable  {
      ShortColumnHandler shortColumnHandler0 = new ShortColumnHandler();
      // Undeclared exception!
      try { 
        shortColumnHandler0.match((Class<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.columns.ShortColumnHandler"", e);
      }
  }"
450,"    public Object apply(ResultSet rs, int columnIndex) throws SQLException {
        return Short.valueOf(rs.getShort(columnIndex));
    }","  public void test1()  throws Throwable  {
      ShortColumnHandler shortColumnHandler0 = new ShortColumnHandler();
      // Undeclared exception!
      try { 
        shortColumnHandler0.apply((ResultSet) null, (-2650));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.columns.ShortColumnHandler"", e);
      }
  }"
451,"    public boolean match(Class<?> propType) {
        return propType.equals(Short.TYPE) || propType.equals(Short.class);
    }","  public void test2()  throws Throwable  {
      ShortColumnHandler shortColumnHandler0 = new ShortColumnHandler();
      Class<Short> class0 = Short.class;
      boolean boolean0 = shortColumnHandler0.match(class0);
}"
452,"    public boolean match(Class<?> propType) {
        return propType.equals(Short.TYPE) || propType.equals(Short.class);
    }","  public void test3()  throws Throwable  {
      ShortColumnHandler shortColumnHandler0 = new ShortColumnHandler();
      Class<Object> class0 = Object.class;
      boolean boolean0 = shortColumnHandler0.match(class0);
}"
453,"    public boolean match(Class<?> propType) {
        return propType.equals(Short.TYPE) || propType.equals(Short.class);
    }","  public void test4()  throws Throwable  {
      ShortColumnHandler shortColumnHandler0 = new ShortColumnHandler();
      Class<Short> class0 = Short.TYPE;
      boolean boolean0 = shortColumnHandler0.match(class0);
}"
454,"    public Object apply(ResultSet rs, int columnIndex) throws SQLException {
        return Short.valueOf(rs.getShort(columnIndex));
    }","  public void test5()  throws Throwable  {
      ShortColumnHandler shortColumnHandler0 = new ShortColumnHandler();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((short)0).when(resultSet0).getShort(anyInt());
      Object object0 = shortColumnHandler0.apply(resultSet0, (-711));
}"
455,"    public boolean match(Class<?> propType) {
        return propType.equals(Timestamp.class);
    }","  public void test0()  throws Throwable  {
      TimestampColumnHandler timestampColumnHandler0 = new TimestampColumnHandler();
      Class<Timestamp> class0 = Timestamp.class;
      boolean boolean0 = timestampColumnHandler0.match(class0);
}"
456,"    public Object apply(ResultSet rs, int columnIndex) throws SQLException {
        return rs.getTimestamp(columnIndex);
    }","  public void test1()  throws Throwable  {
      TimestampColumnHandler timestampColumnHandler0 = new TimestampColumnHandler();
      Timestamp timestamp0 = new Timestamp((-1L));
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(timestamp0).when(resultSet0).getTimestamp(anyInt());
      Object object0 = timestampColumnHandler0.apply(resultSet0, 0);
}"
457,"    public Object apply(ResultSet rs, int columnIndex) throws SQLException {
        return rs.getTimestamp(columnIndex);
    }","  public void test2()  throws Throwable  {
      TimestampColumnHandler timestampColumnHandler0 = new TimestampColumnHandler();
      // Undeclared exception!
      try { 
        timestampColumnHandler0.apply((ResultSet) null, 2253);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.columns.TimestampColumnHandler"", e);
      }
  }"
458,"    public Object apply(ResultSet rs, int columnIndex) throws SQLException {
        return rs.getTimestamp(columnIndex);
    }","  public void test3()  throws Throwable  {
      TimestampColumnHandler timestampColumnHandler0 = new TimestampColumnHandler();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((Timestamp) null).when(resultSet0).getTimestamp(anyInt());
      Object object0 = timestampColumnHandler0.apply(resultSet0, 0);
}"
459,"    public boolean match(Class<?> propType) {
        return propType.equals(Timestamp.class);
    }","  public void test4()  throws Throwable  {
      TimestampColumnHandler timestampColumnHandler0 = new TimestampColumnHandler();
      Class<Object> class0 = Object.class;
      boolean boolean0 = timestampColumnHandler0.match(class0);
}"
460,"    public Object apply(ResultSet rs, int columnIndex) throws SQLException {
        return rs.getSQLXML(columnIndex);
    }","  public void test0()  throws Throwable  {
      SQLXMLColumnHandler sQLXMLColumnHandler0 = new SQLXMLColumnHandler();
      SQLXML sQLXML0 = mock(SQLXML.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(sQLXML0).toString();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(sQLXML0).when(resultSet0).getSQLXML(anyInt());
      Object object0 = sQLXMLColumnHandler0.apply(resultSet0, 0);
}"
461,"    public boolean match(Class<?> propType) {
        return propType.equals(SQLXML.class);
    }","  public void test1()  throws Throwable  {
      SQLXMLColumnHandler sQLXMLColumnHandler0 = new SQLXMLColumnHandler();
      // Undeclared exception!
      try { 
        sQLXMLColumnHandler0.match((Class<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.columns.SQLXMLColumnHandler"", e);
      }
  }"
462,"    public Object apply(ResultSet rs, int columnIndex) throws SQLException {
        return rs.getSQLXML(columnIndex);
    }","  public void test2()  throws Throwable  {
      SQLXMLColumnHandler sQLXMLColumnHandler0 = new SQLXMLColumnHandler();
      // Undeclared exception!
      try { 
        sQLXMLColumnHandler0.apply((ResultSet) null, (-688));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.columns.SQLXMLColumnHandler"", e);
      }
  }"
463,"    public boolean match(Class<?> propType) {
        return propType.equals(SQLXML.class);
    }","  public void test3()  throws Throwable  {
      Class<String> class0 = String.class;
      SQLXMLColumnHandler sQLXMLColumnHandler0 = new SQLXMLColumnHandler();
      boolean boolean0 = sQLXMLColumnHandler0.match(class0);
}"
464,"    public Object apply(ResultSet rs, int columnIndex) throws SQLException {
        return rs.getSQLXML(columnIndex);
    }","  public void test4()  throws Throwable  {
      SQLXMLColumnHandler sQLXMLColumnHandler0 = new SQLXMLColumnHandler();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((SQLXML) null).when(resultSet0).getSQLXML(anyInt());
      Object object0 = sQLXMLColumnHandler0.apply(resultSet0, 0);
}"
465,"    public boolean match(Class<?> propType) {
        return propType.equals(Float.TYPE) || propType.equals(Float.class);
    }","  public void test0()  throws Throwable  {
      FloatColumnHandler floatColumnHandler0 = new FloatColumnHandler();
      // Undeclared exception!
      try { 
        floatColumnHandler0.match((Class<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.columns.FloatColumnHandler"", e);
      }
  }"
466,"    public Object apply(ResultSet rs, int columnIndex) throws SQLException {
        return Float.valueOf(rs.getFloat(columnIndex));
    }","  public void test1()  throws Throwable  {
      FloatColumnHandler floatColumnHandler0 = new FloatColumnHandler();
      // Undeclared exception!
      try { 
        floatColumnHandler0.apply((ResultSet) null, 4331);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.columns.FloatColumnHandler"", e);
      }
  }"
467,"    public boolean match(Class<?> propType) {
        return propType.equals(Float.TYPE) || propType.equals(Float.class);
    }","  public void test2()  throws Throwable  {
      FloatColumnHandler floatColumnHandler0 = new FloatColumnHandler();
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = floatColumnHandler0.match(class0);
}"
468,"    public boolean match(Class<?> propType) {
        return propType.equals(Float.TYPE) || propType.equals(Float.class);
    }","  public void test3()  throws Throwable  {
      FloatColumnHandler floatColumnHandler0 = new FloatColumnHandler();
      Class<Float> class0 = Float.class;
      boolean boolean0 = floatColumnHandler0.match(class0);
}"
469,"    public boolean match(Class<?> propType) {
        return propType.equals(Float.TYPE) || propType.equals(Float.class);
    }","  public void test4()  throws Throwable  {
      FloatColumnHandler floatColumnHandler0 = new FloatColumnHandler();
      Class<Float> class0 = Float.TYPE;
      boolean boolean0 = floatColumnHandler0.match(class0);
}"
470,"    public Object apply(ResultSet rs, int columnIndex) throws SQLException {
        return Float.valueOf(rs.getFloat(columnIndex));
    }","  public void test5()  throws Throwable  {
      FloatColumnHandler floatColumnHandler0 = new FloatColumnHandler();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(0.0F).when(resultSet0).getFloat(anyInt());
      Object object0 = floatColumnHandler0.apply(resultSet0, (-5500));
}"
471,"    public Object apply(ResultSet rs, int columnIndex) throws SQLException {
        return Byte.valueOf(rs.getByte(columnIndex));
    }","  public void test0()  throws Throwable  {
      ByteColumnHandler byteColumnHandler0 = new ByteColumnHandler();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((byte)0).when(resultSet0).getByte(anyInt());
      Object object0 = byteColumnHandler0.apply(resultSet0, 638);
}"
472,"    public boolean match(Class<?> propType) {
        return propType.equals(Byte.TYPE) || propType.equals(Byte.class);
    }","  public void test1()  throws Throwable  {
      ByteColumnHandler byteColumnHandler0 = new ByteColumnHandler();
      // Undeclared exception!
      try { 
        byteColumnHandler0.match((Class<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.columns.ByteColumnHandler"", e);
      }
  }"
473,"    public boolean match(Class<?> propType) {
        return propType.equals(Byte.TYPE) || propType.equals(Byte.class);
    }","  public void test2()  throws Throwable  {
      ByteColumnHandler byteColumnHandler0 = new ByteColumnHandler();
      Class<Byte> class0 = Byte.class;
      boolean boolean0 = byteColumnHandler0.match(class0);
}"
474,"    public boolean match(Class<?> propType) {
        return propType.equals(Byte.TYPE) || propType.equals(Byte.class);
    }","  public void test3()  throws Throwable  {
      ByteColumnHandler byteColumnHandler0 = new ByteColumnHandler();
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = byteColumnHandler0.match(class0);
}"
475,"    public boolean match(Class<?> propType) {
        return propType.equals(Byte.TYPE) || propType.equals(Byte.class);
    }","  public void test4()  throws Throwable  {
      ByteColumnHandler byteColumnHandler0 = new ByteColumnHandler();
      Class<Byte> class0 = Byte.TYPE;
      boolean boolean0 = byteColumnHandler0.match(class0);
}"
476,"    public Object apply(ResultSet rs, int columnIndex) throws SQLException {
        return Byte.valueOf(rs.getByte(columnIndex));
    }","  public void test5()  throws Throwable  {
      ByteColumnHandler byteColumnHandler0 = new ByteColumnHandler();
      // Undeclared exception!
      try { 
        byteColumnHandler0.apply((ResultSet) null, (-11));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.columns.ByteColumnHandler"", e);
      }
  }"
477,"    public boolean match(Class<?> propType) {
        return propType.equals(Double.TYPE) || propType.equals(Double.class);
    }","  public void test0()  throws Throwable  {
      DoubleColumnHandler doubleColumnHandler0 = new DoubleColumnHandler();
      // Undeclared exception!
      try { 
        doubleColumnHandler0.match((Class<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.columns.DoubleColumnHandler"", e);
      }
  }"
478,"    public Object apply(ResultSet rs, int columnIndex) throws SQLException {
        return Double.valueOf(rs.getDouble(columnIndex));
    }","  public void test1()  throws Throwable  {
      DoubleColumnHandler doubleColumnHandler0 = new DoubleColumnHandler();
      // Undeclared exception!
      try { 
        doubleColumnHandler0.apply((ResultSet) null, (-2038));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.columns.DoubleColumnHandler"", e);
      }
  }"
479,"    public boolean match(Class<?> propType) {
        return propType.equals(Double.TYPE) || propType.equals(Double.class);
    }","  public void test2()  throws Throwable  {
      DoubleColumnHandler doubleColumnHandler0 = new DoubleColumnHandler();
      Class<Double> class0 = Double.class;
      boolean boolean0 = doubleColumnHandler0.match(class0);
}"
480,"    public boolean match(Class<?> propType) {
        return propType.equals(Double.TYPE) || propType.equals(Double.class);
    }","  public void test3()  throws Throwable  {
      DoubleColumnHandler doubleColumnHandler0 = new DoubleColumnHandler();
      Class<Object> class0 = Object.class;
      boolean boolean0 = doubleColumnHandler0.match(class0);
}"
481,"    public boolean match(Class<?> propType) {
        return propType.equals(Double.TYPE) || propType.equals(Double.class);
    }","  public void test4()  throws Throwable  {
      DoubleColumnHandler doubleColumnHandler0 = new DoubleColumnHandler();
      Class<Double> class0 = Double.TYPE;
      boolean boolean0 = doubleColumnHandler0.match(class0);
}"
482,"    public Object apply(ResultSet rs, int columnIndex) throws SQLException {
        return Double.valueOf(rs.getDouble(columnIndex));
    }","  public void test5()  throws Throwable  {
      DoubleColumnHandler doubleColumnHandler0 = new DoubleColumnHandler();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((-1117.6)).when(resultSet0).getDouble(anyInt());
      Object object0 = doubleColumnHandler0.apply(resultSet0, 0);
}"
483,"    public boolean match(Class<?> propType) {
        return propType.equals(Long.TYPE) || propType.equals(Long.class);
    }","  public void test0()  throws Throwable  {
      LongColumnHandler longColumnHandler0 = new LongColumnHandler();
      // Undeclared exception!
      try { 
        longColumnHandler0.match((Class<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.columns.LongColumnHandler"", e);
      }
  }"
484,"    public Object apply(ResultSet rs, int columnIndex) throws SQLException {
        return Long.valueOf(rs.getLong(columnIndex));
    }","  public void test1()  throws Throwable  {
      LongColumnHandler longColumnHandler0 = new LongColumnHandler();
      // Undeclared exception!
      try { 
        longColumnHandler0.apply((ResultSet) null, 1357);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.handlers.columns.LongColumnHandler"", e);
      }
  }"
485,"    public boolean match(Class<?> propType) {
        return propType.equals(Long.TYPE) || propType.equals(Long.class);
    }","  public void test2()  throws Throwable  {
      LongColumnHandler longColumnHandler0 = new LongColumnHandler();
      Class<Long> class0 = Long.class;
      boolean boolean0 = longColumnHandler0.match(class0);
}"
486,"    public boolean match(Class<?> propType) {
        return propType.equals(Long.TYPE) || propType.equals(Long.class);
    }","  public void test3()  throws Throwable  {
      LongColumnHandler longColumnHandler0 = new LongColumnHandler();
      Class<Object> class0 = Object.class;
      boolean boolean0 = longColumnHandler0.match(class0);
}"
487,"    public boolean match(Class<?> propType) {
        return propType.equals(Long.TYPE) || propType.equals(Long.class);
    }","  public void test4()  throws Throwable  {
      LongColumnHandler longColumnHandler0 = new LongColumnHandler();
      Class<Long> class0 = Long.TYPE;
      boolean boolean0 = longColumnHandler0.match(class0);
}"
488,"    public Object apply(ResultSet rs, int columnIndex) throws SQLException {
        return Long.valueOf(rs.getLong(columnIndex));
    }","  public void test5()  throws Throwable  {
      LongColumnHandler longColumnHandler0 = new LongColumnHandler();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(resultSet0).getLong(anyInt());
      Object object0 = longColumnHandler0.apply(resultSet0, 1);
}"
489,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test0()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""?"", ""?"", 1285, ""?"", uRLStreamHandler0);
      sqlNullCheckedResultSet0.setNullURL(uRL0);
      sqlNullCheckedResultSet0.getNullURL();
}"
490,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test1()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""?"", ""?"", 1285, ""?"", uRLStreamHandler0);
      sqlNullCheckedResultSet0.setNullURL(uRL0);
      sqlNullCheckedResultSet0.getNullURL();
}"
491,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test2()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""?"", ""?"", 1285, ""?"", uRLStreamHandler0);
      sqlNullCheckedResultSet0.setNullURL(uRL0);
      sqlNullCheckedResultSet0.getNullURL();
}"
492,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test3()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""?"", ""?"", 1285, ""?"", uRLStreamHandler0);
      sqlNullCheckedResultSet0.setNullURL(uRL0);
      sqlNullCheckedResultSet0.getNullURL();
}"
493,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test4()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""?"", ""?"", 1285, ""?"", uRLStreamHandler0);
      sqlNullCheckedResultSet0.setNullURL(uRL0);
      sqlNullCheckedResultSet0.getNullURL();
}"
494,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test5()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""?"", ""?"", 1285, ""?"", uRLStreamHandler0);
      sqlNullCheckedResultSet0.setNullURL(uRL0);
      sqlNullCheckedResultSet0.getNullURL();
}"
495,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test6()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""?"", ""?"", 1285, ""?"", uRLStreamHandler0);
      sqlNullCheckedResultSet0.setNullURL(uRL0);
      sqlNullCheckedResultSet0.getNullURL();
}"
496,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test7()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Y!G"", ""shutdown"", 0, ""9:H#q0%Py8q.6_"", uRLStreamHandler0);
      sqlNullCheckedResultSet0.setNullURL(uRL0);
      sqlNullCheckedResultSet0.getNullURL();
}"
497,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test8()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Y!G"", ""shutdown"", 0, ""9:H#q0%Py8q.6_"", uRLStreamHandler0);
      sqlNullCheckedResultSet0.setNullURL(uRL0);
      sqlNullCheckedResultSet0.getNullURL();
}"
498,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test9()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Y!G"", ""shutdown"", 0, ""9:H#q0%Py8q.6_"", uRLStreamHandler0);
      sqlNullCheckedResultSet0.setNullURL(uRL0);
      sqlNullCheckedResultSet0.getNullURL();
}"
499,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test10()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Y!G"", ""shutdown"", 0, ""9:H#q0%Py8q.6_"", uRLStreamHandler0);
      sqlNullCheckedResultSet0.setNullURL(uRL0);
      sqlNullCheckedResultSet0.getNullURL();
}"
500,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test11()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Y!G"", ""shutdown"", 0, ""9:H#q0%Py8q.6_"", uRLStreamHandler0);
      sqlNullCheckedResultSet0.setNullURL(uRL0);
      sqlNullCheckedResultSet0.getNullURL();
}"
501,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test12()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Y!G"", ""shutdown"", 0, ""9:H#q0%Py8q.6_"", uRLStreamHandler0);
      sqlNullCheckedResultSet0.setNullURL(uRL0);
      sqlNullCheckedResultSet0.getNullURL();
}"
502,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test13()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Y!G"", ""shutdown"", 0, ""9:H#q0%Py8q.6_"", uRLStreamHandler0);
      sqlNullCheckedResultSet0.setNullURL(uRL0);
      sqlNullCheckedResultSet0.getNullURL();
}"
503,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test14()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      URL uRL0 = MockURL.getHttpExample();
      sqlNullCheckedResultSet0.setNullURL(uRL0);
      sqlNullCheckedResultSet0.getNullURL();
}"
504,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test15()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      URL uRL0 = MockURL.getHttpExample();
      sqlNullCheckedResultSet0.setNullURL(uRL0);
      sqlNullCheckedResultSet0.getNullURL();
}"
505,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test16()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      URL uRL0 = MockURL.getHttpExample();
      sqlNullCheckedResultSet0.setNullURL(uRL0);
      sqlNullCheckedResultSet0.getNullURL();
}"
506,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test17()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      URL uRL0 = MockURL.getHttpExample();
      sqlNullCheckedResultSet0.setNullURL(uRL0);
      sqlNullCheckedResultSet0.getNullURL();
}"
507,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test18()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      URL uRL0 = MockURL.getHttpExample();
      sqlNullCheckedResultSet0.setNullURL(uRL0);
      sqlNullCheckedResultSet0.getNullURL();
}"
508,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test19()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      URL uRL0 = MockURL.getHttpExample();
      sqlNullCheckedResultSet0.setNullURL(uRL0);
      sqlNullCheckedResultSet0.getNullURL();
}"
509,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test20()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      URL uRL0 = MockURL.getHttpExample();
      sqlNullCheckedResultSet0.setNullURL(uRL0);
      sqlNullCheckedResultSet0.getNullURL();
}"
510,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test21()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      Timestamp timestamp0 = new Timestamp(164L);
      sqlNullCheckedResultSet0.setNullTimestamp(timestamp0);
      sqlNullCheckedResultSet0.getNullTimestamp();
}"
511,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test22()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      Timestamp timestamp0 = new Timestamp(164L);
      sqlNullCheckedResultSet0.setNullTimestamp(timestamp0);
      sqlNullCheckedResultSet0.getNullTimestamp();
}"
512,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test23()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      Timestamp timestamp0 = new Timestamp(164L);
      sqlNullCheckedResultSet0.setNullTimestamp(timestamp0);
      sqlNullCheckedResultSet0.getNullTimestamp();
}"
513,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test24()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      Timestamp timestamp0 = new Timestamp(164L);
      sqlNullCheckedResultSet0.setNullTimestamp(timestamp0);
      sqlNullCheckedResultSet0.getNullTimestamp();
}"
514,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test25()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      Timestamp timestamp0 = new Timestamp(164L);
      sqlNullCheckedResultSet0.setNullTimestamp(timestamp0);
      sqlNullCheckedResultSet0.getNullTimestamp();
}"
515,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test26()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      Timestamp timestamp0 = new Timestamp(164L);
      sqlNullCheckedResultSet0.setNullTimestamp(timestamp0);
      sqlNullCheckedResultSet0.getNullTimestamp();
}"
516,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test27()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      Timestamp timestamp0 = new Timestamp(164L);
      sqlNullCheckedResultSet0.setNullTimestamp(timestamp0);
      sqlNullCheckedResultSet0.getNullTimestamp();
}"
517,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test28()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullString(""getNullgetNullDate"");
      sqlNullCheckedResultSet0.getNullString();
}"
518,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test29()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullString(""getNullgetNullDate"");
      sqlNullCheckedResultSet0.getNullString();
}"
519,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test30()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullString(""getNullgetNullDate"");
      sqlNullCheckedResultSet0.getNullString();
}"
520,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test31()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullString(""getNullgetNullDate"");
      sqlNullCheckedResultSet0.getNullString();
}"
521,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test32()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullString(""getNullgetNullDate"");
      sqlNullCheckedResultSet0.getNullString();
}"
522,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test33()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullString(""getNullgetNullDate"");
      sqlNullCheckedResultSet0.getNullString();
}"
523,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test34()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullString(""getNullgetNullDate"");
      sqlNullCheckedResultSet0.getNullString();
}"
524,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test35()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullString("""");
      sqlNullCheckedResultSet0.getNullString();
}"
525,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test36()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullString("""");
      sqlNullCheckedResultSet0.getNullString();
}"
526,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test37()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullString("""");
      sqlNullCheckedResultSet0.getNullString();
}"
527,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test38()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullString("""");
      sqlNullCheckedResultSet0.getNullString();
}"
528,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test39()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullString("""");
      sqlNullCheckedResultSet0.getNullString();
}"
529,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test40()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullString("""");
      sqlNullCheckedResultSet0.getNullString();
}"
530,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test41()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullString("""");
      sqlNullCheckedResultSet0.getNullString();
}"
531,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test42()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullShort((short)1248);
      short short0 = sqlNullCheckedResultSet0.getNullShort();
}"
532,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test43()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullShort((short) (-568));
      short short0 = sqlNullCheckedResultSet0.getNullShort();
}"
533,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test44()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullObject(proxy0);
      sqlNullCheckedResultSet0.getNullObject();
}"
534,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test45()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullObject(proxy0);
      sqlNullCheckedResultSet0.getNullObject();
}"
535,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test46()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullObject(proxy0);
      sqlNullCheckedResultSet0.getNullObject();
}"
536,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test47()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullObject(proxy0);
      sqlNullCheckedResultSet0.getNullObject();
}"
537,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test48()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullObject(proxy0);
      sqlNullCheckedResultSet0.getNullObject();
}"
538,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test49()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullObject(proxy0);
      sqlNullCheckedResultSet0.getNullObject();
}"
539,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test50()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullObject(proxy0);
      sqlNullCheckedResultSet0.getNullObject();
}"
540,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test51()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullLong(669L);
      long long0 = sqlNullCheckedResultSet0.getNullLong();
}"
541,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test52()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullLong((-1354L));
      long long0 = sqlNullCheckedResultSet0.getNullLong();
}"
542,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test53()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullInt(1027);
      int int0 = sqlNullCheckedResultSet0.getNullInt();
}"
543,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test54()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullInt((-337));
      int int0 = sqlNullCheckedResultSet0.getNullInt();
}"
544,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test55()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullFloat(146.0F);
      float float0 = sqlNullCheckedResultSet0.getNullFloat();
}"
545,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test56()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullFloat((-1131.085F));
      float float0 = sqlNullCheckedResultSet0.getNullFloat();
}"
546,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test57()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullDouble(1856.11469);
      double double0 = sqlNullCheckedResultSet0.getNullDouble();
}"
547,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test58()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""/Z|Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullDouble((-10.287749087018899));
      double double0 = sqlNullCheckedResultSet0.getNullDouble();
}"
548,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test59()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      char[] charArray0 = new char[3];
      SerialClob serialClob0 = new SerialClob(charArray0);
      sqlNullCheckedResultSet0.setNullClob(serialClob0);
      sqlNullCheckedResultSet0.getNullClob();
}"
549,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test60()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      char[] charArray0 = new char[3];
      SerialClob serialClob0 = new SerialClob(charArray0);
      sqlNullCheckedResultSet0.setNullClob(serialClob0);
      sqlNullCheckedResultSet0.getNullClob();
}"
550,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test61()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      char[] charArray0 = new char[3];
      SerialClob serialClob0 = new SerialClob(charArray0);
      sqlNullCheckedResultSet0.setNullClob(serialClob0);
      sqlNullCheckedResultSet0.getNullClob();
}"
551,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test62()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      char[] charArray0 = new char[3];
      SerialClob serialClob0 = new SerialClob(charArray0);
      sqlNullCheckedResultSet0.setNullClob(serialClob0);
      sqlNullCheckedResultSet0.getNullClob();
}"
552,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test63()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      char[] charArray0 = new char[3];
      SerialClob serialClob0 = new SerialClob(charArray0);
      sqlNullCheckedResultSet0.setNullClob(serialClob0);
      sqlNullCheckedResultSet0.getNullClob();
}"
553,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test64()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      char[] charArray0 = new char[3];
      SerialClob serialClob0 = new SerialClob(charArray0);
      sqlNullCheckedResultSet0.setNullClob(serialClob0);
      sqlNullCheckedResultSet0.getNullClob();
}"
554,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test65()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      char[] charArray0 = new char[3];
      SerialClob serialClob0 = new SerialClob(charArray0);
      sqlNullCheckedResultSet0.setNullClob(serialClob0);
      sqlNullCheckedResultSet0.getNullClob();
}"
555,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test66()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      StringReader stringReader0 = new StringReader(""getNullgetNullRef"");
      sqlNullCheckedResultSet0.setNullCharacterStream(stringReader0);
      sqlNullCheckedResultSet0.getNullCharacterStream();
}"
556,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test67()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      StringReader stringReader0 = new StringReader(""getNullgetNullRef"");
      sqlNullCheckedResultSet0.setNullCharacterStream(stringReader0);
      sqlNullCheckedResultSet0.getNullCharacterStream();
}"
557,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test68()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      StringReader stringReader0 = new StringReader(""getNullgetNullRef"");
      sqlNullCheckedResultSet0.setNullCharacterStream(stringReader0);
      sqlNullCheckedResultSet0.getNullCharacterStream();
}"
558,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test69()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      StringReader stringReader0 = new StringReader(""getNullgetNullRef"");
      sqlNullCheckedResultSet0.setNullCharacterStream(stringReader0);
      sqlNullCheckedResultSet0.getNullCharacterStream();
}"
559,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test70()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      StringReader stringReader0 = new StringReader(""getNullgetNullRef"");
      sqlNullCheckedResultSet0.setNullCharacterStream(stringReader0);
      sqlNullCheckedResultSet0.getNullCharacterStream();
}"
560,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test71()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      StringReader stringReader0 = new StringReader(""getNullgetNullRef"");
      sqlNullCheckedResultSet0.setNullCharacterStream(stringReader0);
      sqlNullCheckedResultSet0.getNullCharacterStream();
}"
561,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test72()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      StringReader stringReader0 = new StringReader(""getNullgetNullRef"");
      sqlNullCheckedResultSet0.setNullCharacterStream(stringReader0);
      sqlNullCheckedResultSet0.getNullCharacterStream();
}"
562,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test73()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte[] byteArray0 = new byte[0];
      sqlNullCheckedResultSet0.setNullBytes(byteArray0);
      sqlNullCheckedResultSet0.getNullBytes();
}"
563,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test74()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte[] byteArray0 = new byte[0];
      sqlNullCheckedResultSet0.setNullBytes(byteArray0);
      sqlNullCheckedResultSet0.getNullBytes();
}"
564,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test75()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte[] byteArray0 = new byte[0];
      sqlNullCheckedResultSet0.setNullBytes(byteArray0);
      sqlNullCheckedResultSet0.getNullBytes();
}"
565,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test76()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte[] byteArray0 = new byte[0];
      sqlNullCheckedResultSet0.setNullBytes(byteArray0);
      sqlNullCheckedResultSet0.getNullBytes();
}"
566,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test77()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte[] byteArray0 = new byte[0];
      sqlNullCheckedResultSet0.setNullBytes(byteArray0);
      sqlNullCheckedResultSet0.getNullBytes();
}"
567,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test78()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte[] byteArray0 = new byte[0];
      sqlNullCheckedResultSet0.setNullBytes(byteArray0);
      sqlNullCheckedResultSet0.getNullBytes();
}"
568,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test79()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte[] byteArray0 = new byte[0];
      sqlNullCheckedResultSet0.setNullBytes(byteArray0);
      sqlNullCheckedResultSet0.getNullBytes();
}"
569,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test80()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
}"
570,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test81()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullByte((byte)1);
      byte byte0 = sqlNullCheckedResultSet0.getNullByte();
}"
571,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test82()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""get_column_name"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullByte((byte) (-99));
      byte byte0 = sqlNullCheckedResultSet0.getNullByte();
}"
572,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test83()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""getNullinvoke"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
}"
573,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test84()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""getNullinvoke"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullBoolean(true);
      boolean boolean0 = sqlNullCheckedResultSet0.getNullBoolean();
}"
574,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test85()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Iq7nyOiJ<N"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte[] byteArray0 = new byte[7];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      sqlNullCheckedResultSet0.setNullBlob(serialBlob0);
      sqlNullCheckedResultSet0.getNullBlob();
}"
575,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test86()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Iq7nyOiJ<N"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte[] byteArray0 = new byte[7];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      sqlNullCheckedResultSet0.setNullBlob(serialBlob0);
      sqlNullCheckedResultSet0.getNullBlob();
}"
576,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test87()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Iq7nyOiJ<N"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte[] byteArray0 = new byte[7];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      sqlNullCheckedResultSet0.setNullBlob(serialBlob0);
      sqlNullCheckedResultSet0.getNullBlob();
}"
577,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test88()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Iq7nyOiJ<N"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte[] byteArray0 = new byte[7];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      sqlNullCheckedResultSet0.setNullBlob(serialBlob0);
      sqlNullCheckedResultSet0.getNullBlob();
}"
578,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test89()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Iq7nyOiJ<N"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte[] byteArray0 = new byte[7];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      sqlNullCheckedResultSet0.setNullBlob(serialBlob0);
      sqlNullCheckedResultSet0.getNullBlob();
}"
579,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test90()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Iq7nyOiJ<N"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte[] byteArray0 = new byte[7];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      sqlNullCheckedResultSet0.setNullBlob(serialBlob0);
      sqlNullCheckedResultSet0.getNullBlob();
}"
580,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test91()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Iq7nyOiJ<N"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte[] byteArray0 = new byte[7];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      sqlNullCheckedResultSet0.setNullBlob(serialBlob0);
      sqlNullCheckedResultSet0.getNullBlob();
}"
581,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test92()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""c}g^m6;o3/w"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      sqlNullCheckedResultSet0.setNullBinaryStream(pipedInputStream0);
      sqlNullCheckedResultSet0.getNullBinaryStream();
}"
582,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test93()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""c}g^m6;o3/w"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      sqlNullCheckedResultSet0.setNullBinaryStream(pipedInputStream0);
      sqlNullCheckedResultSet0.getNullBinaryStream();
}"
583,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test94()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""c}g^m6;o3/w"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      sqlNullCheckedResultSet0.setNullBinaryStream(pipedInputStream0);
      sqlNullCheckedResultSet0.getNullBinaryStream();
}"
584,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test95()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""c}g^m6;o3/w"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      sqlNullCheckedResultSet0.setNullBinaryStream(pipedInputStream0);
      sqlNullCheckedResultSet0.getNullBinaryStream();
}"
585,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test96()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""c}g^m6;o3/w"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      sqlNullCheckedResultSet0.setNullBinaryStream(pipedInputStream0);
      sqlNullCheckedResultSet0.getNullBinaryStream();
}"
586,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test97()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""c}g^m6;o3/w"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      sqlNullCheckedResultSet0.setNullBinaryStream(pipedInputStream0);
      sqlNullCheckedResultSet0.getNullBinaryStream();
}"
587,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test98()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""c}g^m6;o3/w"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      sqlNullCheckedResultSet0.setNullBinaryStream(pipedInputStream0);
      sqlNullCheckedResultSet0.getNullBinaryStream();
}"
588,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test99()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      sqlNullCheckedResultSet0.setNullBigDecimal(bigDecimal0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
589,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test100()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      sqlNullCheckedResultSet0.setNullBigDecimal(bigDecimal0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
590,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test101()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      sqlNullCheckedResultSet0.setNullBigDecimal(bigDecimal0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
591,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test102()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      sqlNullCheckedResultSet0.setNullBigDecimal(bigDecimal0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
592,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test103()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      sqlNullCheckedResultSet0.setNullBigDecimal(bigDecimal0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
593,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test104()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      sqlNullCheckedResultSet0.setNullBigDecimal(bigDecimal0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
594,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test105()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      sqlNullCheckedResultSet0.setNullBigDecimal(bigDecimal0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
595,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test106()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      sqlNullCheckedResultSet0.setNullBigDecimal(bigDecimal0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
596,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test107()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      sqlNullCheckedResultSet0.setNullBigDecimal(bigDecimal0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
597,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test108()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      sqlNullCheckedResultSet0.setNullBigDecimal(bigDecimal0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
598,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test109()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      sqlNullCheckedResultSet0.setNullBigDecimal(bigDecimal0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
599,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test110()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      sqlNullCheckedResultSet0.setNullBigDecimal(bigDecimal0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
600,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test111()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      sqlNullCheckedResultSet0.setNullBigDecimal(bigDecimal0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
601,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test112()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      sqlNullCheckedResultSet0.setNullBigDecimal(bigDecimal0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
602,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test113()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.dbutils.wrappers.SqlNullCheckedResultSet"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      BigDecimal bigDecimal0 = new BigDecimal((-1340L));
      sqlNullCheckedResultSet0.setNullBigDecimal(bigDecimal0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
603,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test114()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.dbutils.wrappers.SqlNullCheckedResultSet"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      BigDecimal bigDecimal0 = new BigDecimal((-1340L));
      sqlNullCheckedResultSet0.setNullBigDecimal(bigDecimal0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
604,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test115()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.dbutils.wrappers.SqlNullCheckedResultSet"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      BigDecimal bigDecimal0 = new BigDecimal((-1340L));
      sqlNullCheckedResultSet0.setNullBigDecimal(bigDecimal0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
605,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test116()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.dbutils.wrappers.SqlNullCheckedResultSet"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      BigDecimal bigDecimal0 = new BigDecimal((-1340L));
      sqlNullCheckedResultSet0.setNullBigDecimal(bigDecimal0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
606,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test117()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.dbutils.wrappers.SqlNullCheckedResultSet"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      BigDecimal bigDecimal0 = new BigDecimal((-1340L));
      sqlNullCheckedResultSet0.setNullBigDecimal(bigDecimal0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
607,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test118()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.dbutils.wrappers.SqlNullCheckedResultSet"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      BigDecimal bigDecimal0 = new BigDecimal((-1340L));
      sqlNullCheckedResultSet0.setNullBigDecimal(bigDecimal0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
608,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test119()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.dbutils.wrappers.SqlNullCheckedResultSet"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      BigDecimal bigDecimal0 = new BigDecimal((-1340L));
      sqlNullCheckedResultSet0.setNullBigDecimal(bigDecimal0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
609,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test120()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      sqlNullCheckedResultSet0.setNullAsciiStream(pipedInputStream0);
      sqlNullCheckedResultSet0.getNullAsciiStream();
}"
610,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test121()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      sqlNullCheckedResultSet0.setNullAsciiStream(pipedInputStream0);
      sqlNullCheckedResultSet0.getNullAsciiStream();
}"
611,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test122()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      sqlNullCheckedResultSet0.setNullAsciiStream(pipedInputStream0);
      sqlNullCheckedResultSet0.getNullAsciiStream();
}"
612,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test123()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      sqlNullCheckedResultSet0.setNullAsciiStream(pipedInputStream0);
      sqlNullCheckedResultSet0.getNullAsciiStream();
}"
613,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test124()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      sqlNullCheckedResultSet0.setNullAsciiStream(pipedInputStream0);
      sqlNullCheckedResultSet0.getNullAsciiStream();
}"
614,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test125()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      sqlNullCheckedResultSet0.setNullAsciiStream(pipedInputStream0);
      sqlNullCheckedResultSet0.getNullAsciiStream();
}"
615,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test126()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      sqlNullCheckedResultSet0.setNullAsciiStream(pipedInputStream0);
      sqlNullCheckedResultSet0.getNullAsciiStream();
}"
616,"    public void setNullBytes(byte[] nullBytes) {
        byte[] copy = new byte[nullBytes.length];
        System.arraycopy(nullBytes, 0, copy, 0, nullBytes.length);
        this.nullBytes = copy;
    }","  public void test127()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      // Undeclared exception!
      try { 
        sqlNullCheckedResultSet0.setNullBytes((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.wrappers.SqlNullCheckedResultSet"", e);
      }
  }"
617,"    public Object invoke(Object proxy, Method method, Object[] args)
        throws Throwable {

        Object result = method.invoke(this.rs, args);

        Method nullMethod = nullMethods.get(method.getName());

        // Check nullMethod != null first so that we don't call wasNull()
        // before a true getter method was invoked on the ResultSet.
        return (nullMethod != null && this.rs.wasNull())
            ? nullMethod.invoke(this, (Object[]) null)
            : result;
    }","  public void test128()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""getNuwrap"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      Object[] objectArray0 = new Object[1];
      try { 
        sqlNullCheckedResultSet0.invoke((Object) null, (Method) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.wrappers.SqlNullCheckedResultSet"", e);
      }
  }"
618,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test129()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""y8Q^Q?z)`4?s&_"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullTimestamp((Timestamp) null);
}"
619,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test130()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""y8Q^Q?z)`4?s&_"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullTimestamp((Timestamp) null);
}"
620,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test131()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""y8Q^Q?z)`4?s&_"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullTimestamp((Timestamp) null);
}"
621,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test132()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""y8Q^Q?z)`4?s&_"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullTimestamp((Timestamp) null);
}"
622,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test133()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""y8Q^Q?z)`4?s&_"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullTimestamp((Timestamp) null);
}"
623,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test134()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""y8Q^Q?z)`4?s&_"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullTimestamp((Timestamp) null);
}"
624,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test135()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""y8Q^Q?z)`4?s&_"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullTimestamp((Timestamp) null);
}"
625,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test136()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Q],Y-Y*`"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullDate((Date) null);
}"
626,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test137()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Q],Y-Y*`"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullDate((Date) null);
}"
627,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test138()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Q],Y-Y*`"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullDate((Date) null);
}"
628,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test139()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Q],Y-Y*`"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullDate((Date) null);
}"
629,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test140()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Q],Y-Y*`"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullDate((Date) null);
}"
630,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test141()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Q],Y-Y*`"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullDate((Date) null);
}"
631,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test142()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Q],Y-Y*`"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullDate((Date) null);
}"
632,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test143()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      Timestamp timestamp0 = new Timestamp(0);
      sqlNullCheckedResultSet0.setNullTimestamp(timestamp0);
      Timestamp timestamp1 = sqlNullCheckedResultSet0.getNullTimestamp();
}"
633,"    public Timestamp getNullTimestamp() {
        return this.nullTimestamp != null ? new Timestamp(this.nullTimestamp.getTime()) : null;
    }","  public void test144()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      Timestamp timestamp0 = new Timestamp(0);
      sqlNullCheckedResultSet0.setNullTimestamp(timestamp0);
      Timestamp timestamp1 = sqlNullCheckedResultSet0.getNullTimestamp();
}"
634,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test145()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      Timestamp timestamp0 = new Timestamp(0);
      sqlNullCheckedResultSet0.setNullTimestamp(timestamp0);
      Timestamp timestamp1 = sqlNullCheckedResultSet0.getNullTimestamp();
}"
635,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test146()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      Timestamp timestamp0 = new Timestamp(0);
      sqlNullCheckedResultSet0.setNullTimestamp(timestamp0);
      Timestamp timestamp1 = sqlNullCheckedResultSet0.getNullTimestamp();
}"
636,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test147()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      Timestamp timestamp0 = new Timestamp(0);
      sqlNullCheckedResultSet0.setNullTimestamp(timestamp0);
      Timestamp timestamp1 = sqlNullCheckedResultSet0.getNullTimestamp();
}"
637,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test148()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      Timestamp timestamp0 = new Timestamp(0);
      sqlNullCheckedResultSet0.setNullTimestamp(timestamp0);
      Timestamp timestamp1 = sqlNullCheckedResultSet0.getNullTimestamp();
}"
638,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test149()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      Timestamp timestamp0 = new Timestamp(0);
      sqlNullCheckedResultSet0.setNullTimestamp(timestamp0);
      Timestamp timestamp1 = sqlNullCheckedResultSet0.getNullTimestamp();
}"
639,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test150()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      Timestamp timestamp0 = new Timestamp(0);
      sqlNullCheckedResultSet0.setNullTimestamp(timestamp0);
      Timestamp timestamp1 = sqlNullCheckedResultSet0.getNullTimestamp();
}"
640,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test151()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""y8Q^Q?z)`4?s&_"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullTimestamp();
}"
641,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test152()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""y8Q^Q?z)`4?s&_"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullTimestamp();
}"
642,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test153()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""y8Q^Q?z)`4?s&_"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullTimestamp();
}"
643,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test154()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""y8Q^Q?z)`4?s&_"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullTimestamp();
}"
644,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test155()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""y8Q^Q?z)`4?s&_"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullTimestamp();
}"
645,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test156()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""y8Q^Q?z)`4?s&_"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullTimestamp();
}"
646,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test157()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""y8Q^Q?z)`4?s&_"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullTimestamp();
}"
647,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test158()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      Date date0 = new Date((-34L));
      sqlNullCheckedResultSet0.setNullDate(date0);
      Date date1 = sqlNullCheckedResultSet0.getNullDate();
}"
648,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test159()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      Date date0 = new Date((-34L));
      sqlNullCheckedResultSet0.setNullDate(date0);
      Date date1 = sqlNullCheckedResultSet0.getNullDate();
}"
649,"    public Date getNullDate() {
        return this.nullDate != null ? new Date(this.nullDate.getTime()) : null;
    }","  public void test160()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      Date date0 = new Date((-34L));
      sqlNullCheckedResultSet0.setNullDate(date0);
      Date date1 = sqlNullCheckedResultSet0.getNullDate();
}"
650,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test161()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      Date date0 = new Date((-34L));
      sqlNullCheckedResultSet0.setNullDate(date0);
      Date date1 = sqlNullCheckedResultSet0.getNullDate();
}"
651,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test162()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      Date date0 = new Date((-34L));
      sqlNullCheckedResultSet0.setNullDate(date0);
      Date date1 = sqlNullCheckedResultSet0.getNullDate();
}"
652,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test163()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      Date date0 = new Date((-34L));
      sqlNullCheckedResultSet0.setNullDate(date0);
      Date date1 = sqlNullCheckedResultSet0.getNullDate();
}"
653,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test164()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      Date date0 = new Date((-34L));
      sqlNullCheckedResultSet0.setNullDate(date0);
      Date date1 = sqlNullCheckedResultSet0.getNullDate();
}"
654,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test165()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      Date date0 = new Date((-34L));
      sqlNullCheckedResultSet0.setNullDate(date0);
      Date date1 = sqlNullCheckedResultSet0.getNullDate();
}"
655,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test166()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Q],Y-Y*`"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullDate();
}"
656,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test167()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Q],Y-Y*`"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullDate();
}"
657,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test168()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Q],Y-Y*`"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullDate();
}"
658,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test169()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Q],Y-Y*`"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullDate();
}"
659,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test170()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Q],Y-Y*`"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullDate();
}"
660,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test171()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Q],Y-Y*`"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullDate();
}"
661,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test172()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Q],Y-Y*`"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullDate();
}"
662,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test173()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.dbutils.ProxyFactory"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBytes();
}"
663,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test174()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.dbutils.ProxyFactory"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBytes();
}"
664,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test175()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.dbutils.ProxyFactory"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBytes();
}"
665,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test176()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.dbutils.ProxyFactory"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBytes();
}"
666,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test177()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.dbutils.ProxyFactory"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBytes();
}"
667,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test178()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.dbutils.ProxyFactory"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBytes();
}"
668,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test179()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.dbutils.ProxyFactory"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBytes();
}"
669,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test180()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""getNuwrap"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullString();
}"
670,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test181()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""getNuwrap"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullString();
}"
671,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test182()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""getNuwrap"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullString();
}"
672,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test183()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""getNuwrap"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullString();
}"
673,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test184()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""getNuwrap"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullString();
}"
674,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test185()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""getNuwrap"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullString();
}"
675,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test186()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""getNuwrap"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullString();
}"
676,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test187()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullRef();
}"
677,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test188()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullRef();
}"
678,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test189()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullRef();
}"
679,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test190()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullRef();
}"
680,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test191()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullRef();
}"
681,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test192()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullRef();
}"
682,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test193()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullRef();
}"
683,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test194()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.dbutils.ProxyFactory"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      float float0 = sqlNullCheckedResultSet0.getNullFloat();
}"
684,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test195()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.dbutils.ProxyFactory"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      float float0 = sqlNullCheckedResultSet0.getNullFloat();
}"
685,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test196()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.dbutils.ProxyFactory"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      float float0 = sqlNullCheckedResultSet0.getNullFloat();
}"
686,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test197()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.dbutils.ProxyFactory"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      float float0 = sqlNullCheckedResultSet0.getNullFloat();
}"
687,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test198()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.dbutils.ProxyFactory"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      float float0 = sqlNullCheckedResultSet0.getNullFloat();
}"
688,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test199()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.dbutils.ProxyFactory"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      float float0 = sqlNullCheckedResultSet0.getNullFloat();
}"
689,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test200()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.dbutils.ProxyFactory"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      float float0 = sqlNullCheckedResultSet0.getNullFloat();
}"
690,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test201()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBinaryStream();
}"
691,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test202()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBinaryStream();
}"
692,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test203()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBinaryStream();
}"
693,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test204()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBinaryStream();
}"
694,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test205()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBinaryStream();
}"
695,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test206()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBinaryStream();
}"
696,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test207()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBinaryStream();
}"
697,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test208()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Q],Y-Y*`"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte byte0 = sqlNullCheckedResultSet0.getNullByte();
}"
698,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test209()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Q],Y-Y*`"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte byte0 = sqlNullCheckedResultSet0.getNullByte();
}"
699,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test210()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Q],Y-Y*`"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte byte0 = sqlNullCheckedResultSet0.getNullByte();
}"
700,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test211()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Q],Y-Y*`"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte byte0 = sqlNullCheckedResultSet0.getNullByte();
}"
701,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test212()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Q],Y-Y*`"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte byte0 = sqlNullCheckedResultSet0.getNullByte();
}"
702,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test213()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Q],Y-Y*`"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte byte0 = sqlNullCheckedResultSet0.getNullByte();
}"
703,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test214()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""Q],Y-Y*`"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte byte0 = sqlNullCheckedResultSet0.getNullByte();
}"
704,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test215()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullAsciiStream();
}"
705,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test216()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullAsciiStream();
}"
706,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test217()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullAsciiStream();
}"
707,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test218()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullAsciiStream();
}"
708,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test219()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullAsciiStream();
}"
709,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test220()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullAsciiStream();
}"
710,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test221()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullAsciiStream();
}"
711,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test222()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      short short0 = sqlNullCheckedResultSet0.getNullShort();
}"
712,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test223()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      short short0 = sqlNullCheckedResultSet0.getNullShort();
}"
713,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test224()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      short short0 = sqlNullCheckedResultSet0.getNullShort();
}"
714,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test225()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      short short0 = sqlNullCheckedResultSet0.getNullShort();
}"
715,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test226()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      short short0 = sqlNullCheckedResultSet0.getNullShort();
}"
716,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test227()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      short short0 = sqlNullCheckedResultSet0.getNullShort();
}"
717,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test228()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      short short0 = sqlNullCheckedResultSet0.getNullShort();
}"
718,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test229()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullRef((Ref) null);
}"
719,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test230()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullRef((Ref) null);
}"
720,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test231()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullRef((Ref) null);
}"
721,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test232()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullRef((Ref) null);
}"
722,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test233()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullRef((Ref) null);
}"
723,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test234()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullRef((Ref) null);
}"
724,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test235()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullRef((Ref) null);
}"
725,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test236()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullURL();
}"
726,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test237()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullURL();
}"
727,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test238()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullURL();
}"
728,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test239()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullURL();
}"
729,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test240()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullURL();
}"
730,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test241()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullURL();
}"
731,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test242()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullURL();
}"
732,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test243()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      double double0 = sqlNullCheckedResultSet0.getNullDouble();
}"
733,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test244()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      double double0 = sqlNullCheckedResultSet0.getNullDouble();
}"
734,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test245()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      double double0 = sqlNullCheckedResultSet0.getNullDouble();
}"
735,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test246()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      double double0 = sqlNullCheckedResultSet0.getNullDouble();
}"
736,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test247()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      double double0 = sqlNullCheckedResultSet0.getNullDouble();
}"
737,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test248()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      double double0 = sqlNullCheckedResultSet0.getNullDouble();
}"
738,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test249()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      double double0 = sqlNullCheckedResultSet0.getNullDouble();
}"
739,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test250()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBlob();
}"
740,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test251()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBlob();
}"
741,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test252()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBlob();
}"
742,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test253()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBlob();
}"
743,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test254()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBlob();
}"
744,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test255()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBlob();
}"
745,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test256()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBlob();
}"
746,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test257()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullTime();
}"
747,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test258()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullTime();
}"
748,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test259()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullTime();
}"
749,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test260()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullTime();
}"
750,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test261()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullTime();
}"
751,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test262()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullTime();
}"
752,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test263()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullTime();
}"
753,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test264()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      long long0 = sqlNullCheckedResultSet0.getNullLong();
}"
754,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test265()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      long long0 = sqlNullCheckedResultSet0.getNullLong();
}"
755,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test266()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      long long0 = sqlNullCheckedResultSet0.getNullLong();
}"
756,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test267()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      long long0 = sqlNullCheckedResultSet0.getNullLong();
}"
757,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test268()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      long long0 = sqlNullCheckedResultSet0.getNullLong();
}"
758,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test269()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      long long0 = sqlNullCheckedResultSet0.getNullLong();
}"
759,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test270()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      long long0 = sqlNullCheckedResultSet0.getNullLong();
}"
760,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test271()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullObject();
}"
761,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test272()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullObject();
}"
762,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test273()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullObject();
}"
763,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test274()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullObject();
}"
764,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test275()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullObject();
}"
765,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test276()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullObject();
}"
766,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test277()  throws Throwable  {
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap((ResultSet) null);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullObject();
}"
767,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test278()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""getNuwrap"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      boolean boolean0 = sqlNullCheckedResultSet0.getNullBoolean();
}"
768,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test279()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""getNuwrap"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      boolean boolean0 = sqlNullCheckedResultSet0.getNullBoolean();
}"
769,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test280()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""getNuwrap"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      boolean boolean0 = sqlNullCheckedResultSet0.getNullBoolean();
}"
770,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test281()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""getNuwrap"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      boolean boolean0 = sqlNullCheckedResultSet0.getNullBoolean();
}"
771,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test282()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""getNuwrap"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      boolean boolean0 = sqlNullCheckedResultSet0.getNullBoolean();
}"
772,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test283()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""getNuwrap"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      boolean boolean0 = sqlNullCheckedResultSet0.getNullBoolean();
}"
773,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test284()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""getNuwrap"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      boolean boolean0 = sqlNullCheckedResultSet0.getNullBoolean();
}"
774,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test285()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
775,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test286()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
776,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test287()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
777,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test288()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
778,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test289()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
779,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test290()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
780,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test291()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullBigDecimal();
}"
781,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test292()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullClob();
}"
782,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test293()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullClob();
}"
783,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test294()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullClob();
}"
784,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test295()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullClob();
}"
785,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test296()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullClob();
}"
786,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test297()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullClob();
}"
787,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test298()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullClob();
}"
788,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test299()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte[] byteArray0 = new byte[1];
      sqlNullCheckedResultSet0.setNullBytes(byteArray0);
      byte[] byteArray1 = sqlNullCheckedResultSet0.getNullBytes();
}"
789,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test300()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte[] byteArray0 = new byte[1];
      sqlNullCheckedResultSet0.setNullBytes(byteArray0);
      byte[] byteArray1 = sqlNullCheckedResultSet0.getNullBytes();
}"
790,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test301()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte[] byteArray0 = new byte[1];
      sqlNullCheckedResultSet0.setNullBytes(byteArray0);
      byte[] byteArray1 = sqlNullCheckedResultSet0.getNullBytes();
}"
791,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test302()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte[] byteArray0 = new byte[1];
      sqlNullCheckedResultSet0.setNullBytes(byteArray0);
      byte[] byteArray1 = sqlNullCheckedResultSet0.getNullBytes();
}"
792,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test303()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte[] byteArray0 = new byte[1];
      sqlNullCheckedResultSet0.setNullBytes(byteArray0);
      byte[] byteArray1 = sqlNullCheckedResultSet0.getNullBytes();
}"
793,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test304()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte[] byteArray0 = new byte[1];
      sqlNullCheckedResultSet0.setNullBytes(byteArray0);
      byte[] byteArray1 = sqlNullCheckedResultSet0.getNullBytes();
}"
794,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test305()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte[] byteArray0 = new byte[1];
      sqlNullCheckedResultSet0.setNullBytes(byteArray0);
      byte[] byteArray1 = sqlNullCheckedResultSet0.getNullBytes();
}"
795,"    public byte[] getNullBytes() {
        if (this.nullBytes == null) {
            return null;
        }
        byte[] copy = new byte[this.nullBytes.length];
        System.arraycopy(this.nullBytes, 0, copy, 0, this.nullBytes.length);
        return copy;
    }","  public void test306()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      byte[] byteArray0 = new byte[1];
      sqlNullCheckedResultSet0.setNullBytes(byteArray0);
      byte[] byteArray1 = sqlNullCheckedResultSet0.getNullBytes();
}"
796,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test307()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullCharacterStream();
}"
797,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test308()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullCharacterStream();
}"
798,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test309()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullCharacterStream();
}"
799,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test310()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullCharacterStream();
}"
800,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test311()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullCharacterStream();
}"
801,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test312()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullCharacterStream();
}"
802,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test313()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("">F1k>;zLoh+As.Q"").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.getNullCharacterStream();
}"
803,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test314()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      int int0 = sqlNullCheckedResultSet0.getNullInt();
}"
804,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test315()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      int int0 = sqlNullCheckedResultSet0.getNullInt();
}"
805,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test316()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      int int0 = sqlNullCheckedResultSet0.getNullInt();
}"
806,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test317()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      int int0 = sqlNullCheckedResultSet0.getNullInt();
}"
807,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test318()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      int int0 = sqlNullCheckedResultSet0.getNullInt();
}"
808,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test319()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      int int0 = sqlNullCheckedResultSet0.getNullInt();
}"
809,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test320()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      int int0 = sqlNullCheckedResultSet0.getNullInt();
}"
810,"    public boolean getNullBoolean() {
        return this.nullBoolean;
    }","  public void test321()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullTime((Time) null);
}"
811,"    public long getNullLong() {
        return this.nullLong;
    }","  public void test322()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullTime((Time) null);
}"
812,"    public byte getNullByte() {
        return this.nullByte;
    }","  public void test323()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullTime((Time) null);
}"
813,"    public float getNullFloat() {
        return this.nullFloat;
    }","  public void test324()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullTime((Time) null);
}"
814,"    public double getNullDouble() {
        return this.nullDouble;
    }","  public void test325()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullTime((Time) null);
}"
815,"    public short getNullShort() {
        return this.nullShort;
    }","  public void test326()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullTime((Time) null);
}"
816,"    public int getNullInt() {
        return this.nullInt;
    }","  public void test327()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      Proxy proxy0 = (Proxy)SqlNullCheckedResultSet.wrap(resultSet0);
      SqlNullCheckedResultSet sqlNullCheckedResultSet0 = new SqlNullCheckedResultSet((ResultSet) proxy0);
      sqlNullCheckedResultSet0.setNullTime((Time) null);
}"
817,"    public Object invoke(Object proxy, Method method, Object[] args)
        throws Throwable {

        Object result = method.invoke(this.rs, args);

        if ((method.getName().equals(""getObject"")
            || method.getName().equals(""getString""))
                && result instanceof String) {
            result = ((String) result).trim();
        }

        return result;
    }","  public void test0()  throws Throwable  {
      Proxy proxy0 = (Proxy)StringTrimmedResultSet.wrap((ResultSet) null);
      StringTrimmedResultSet stringTrimmedResultSet0 = new StringTrimmedResultSet((ResultSet) proxy0);
      try { 
        stringTrimmedResultSet0.invoke((Object) null, (Method) null, (Object[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.dbutils.wrappers.StringTrimmedResultSet"", e);
      }
  }"
