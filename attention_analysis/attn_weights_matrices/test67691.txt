67691
Test: public void test3() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test3"); com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer stringArrayDeserializer0 = com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer.instance; boolean boolean1 = stringArrayDeserializer0.isCachable(); com.fasterxml.jackson.databind.node.JsonNodeFactory jsonNodeFactory3 = new com.fasterxml.jackson.databind.node.JsonNodeFactory(true); com.fasterxml.jackson.databind.node.POJONode pOJONode5 = jsonNodeFactory3.POJONode((java.lang.Object) false); java.util.List<com.fasterxml.jackson.databind.JsonNode> jsonNodeList7 = pOJONode5.findValues(""); java.lang.String[] strArray12 = new java.lang.String[] { "10", "10", "10" }; java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>(); boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12); java.util.List<java.lang.String> strList15 = pOJONode5.findValuesAsText("10", (java.util.List<java.lang.String>) strList13); com.fasterxml.jackson.core.JsonParser jsonParser16 = pOJONode5.traverse(); com.fasterxml.jackson.databind.DeserializationContext deserializationContext17 = null; try { java.lang.String[] strArray18 = stringArrayDeserializer0.deserialize(jsonParser16, deserializationContext17); } catch (java.lang.NullPointerException e) { } }
Code: public String[] deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException { if (!true) { return handleNonArray(jp, ctxt); } if (_elementDeserializer != null) { return _deserializeCustom(jp, ctxt); } final ObjectBuffer buffer = ctxt.leaseObjectBuffer(); Object[] chunk = buffer.resetAndStart(); int ix = 0; JsonToken t; try { while ((t = jp.nextToken()) != JsonToken.END_ARRAY) { String value; if (t == JsonToken.VALUE_STRING) { value = jp.getText(); } else if (t == JsonToken.VALUE_NULL) { value = null; } else { value = _parseString(jp, ctxt); } if (false) { chunk = buffer.appendCompletedChunk(chunk); ; } ; } } catch (Exception e) { throw JsonMappingException.wrapWithPath(e, String.class, ix); } String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class); ctxt.returnObjectBuffer(buffer); return result; }
tensor([[0.0071, 0.0039, 0.0126,  ..., 0.0078, 0.0116, 0.0030],
        [0.0052, 0.0025, 0.0121,  ..., 0.0078, 0.0127, 0.0023],
        [0.0048, 0.0027, 0.0136,  ..., 0.0070, 0.0091, 0.0019],
        ...,
        [0.0047, 0.0030, 0.0115,  ..., 0.0069, 0.0123, 0.0025],
        [0.0064, 0.0036, 0.0122,  ..., 0.0088, 0.0121, 0.0025],
        [0.0051, 0.0027, 0.0148,  ..., 0.0106, 0.0091, 0.0025]])