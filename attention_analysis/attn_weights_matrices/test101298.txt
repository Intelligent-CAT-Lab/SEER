101298
Test: public void test051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test051"); org.joda.time.ReadableInterval readableInterval0 = null; org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0); org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0); org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury(); org.joda.time.ReadablePartial readablePartial4 = null; int int5 = dateTimeField3.getMinimumValue(readablePartial4); java.util.Locale locale7 = null; java.lang.String str8 = dateTimeField3.getAsShortText(0L, locale7); org.joda.time.ReadableInterval readableInterval9 = null; org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9); org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9); org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury(); org.joda.time.DurationField durationField13 = chronology11.millis(); org.joda.time.DurationField durationField14 = chronology11.centuries(); org.joda.time.Chronology chronology15 = chronology11.withUTC(); org.joda.time.DurationField durationField16 = chronology15.halfdays(); org.joda.time.DateTimeField dateTimeField17 = chronology15.yearOfEra(); org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.centuryOfEra(); org.joda.time.field.DividedDateTimeField dividedDateTimeField20 = new org.joda.time.field.DividedDateTimeField(dateTimeField17, dateTimeFieldType18, 10); long long23 = dividedDateTimeField20.set(0L, 100); org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfYear(); org.joda.time.ReadableInterval readableInterval25 = null; org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25); org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval25); org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury(); org.joda.time.DurationField durationField29 = chronology27.millis(); org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType24, durationField29); org.joda.time.field.RemainderDateTimeField remainderDateTimeField31 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField20, dateTimeFieldType24); org.joda.time.ReadablePartial readablePartial32 = null; java.util.Locale locale34 = null; java.lang.String str35 = dividedDateTimeField20.getAsShortText(readablePartial32, 29227899, locale34); org.joda.time.field.OffsetDateTimeField offsetDateTimeField37 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField20, 29227899); org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.hourOfDay(); java.lang.String str39 = dateTimeFieldType38.getName(); org.joda.time.ReadableInterval readableInterval41 = null; org.joda.time.ReadableInterval readableInterval42 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval41); org.joda.time.Chronology chronology43 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval41); org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfCentury(); org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldType38, (int) (short) 0, chronology43); org.joda.time.ReadableInterval readableInterval46 = null; org.joda.time.ReadableInterval readableInterval47 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval46); org.joda.time.Chronology chronology48 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval46); org.joda.time.DateTimeField dateTimeField49 = chronology48.yearOfCentury(); org.joda.time.DurationField durationField50 = chronology48.millis(); org.joda.time.DateTimeField dateTimeField51 = chronology48.centuryOfEra(); org.joda.time.DateTimeField dateTimeField52 = chronology48.clockhourOfDay(); org.joda.time.ReadablePartial readablePartial53 = null; int[] intArray60 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 }; int int61 = dateTimeField52.getMaximumValue(readablePartial53, intArray60); int int62 = dividedDateTimeField20.getMinimumValue((org.joda.time.ReadablePartial) partial45, intArray60); boolean boolean64 = partial45.equals((java.lang.Object) "29227899"); org.joda.time.ReadableInterval readableInterval65 = null; org.joda.time.ReadableInterval readableInterval66 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval65); org.joda.time.ReadableInterval readableInterval67 = null; boolean boolean68 = readableInterval66.contains(readableInterval67); org.joda.time.PeriodType periodType69 = null; org.joda.time.Period period70 = readableInterval66.toPeriod(periodType69); org.joda.time.DateTime dateTime71 = readableInterval66.getEnd(); boolean boolean72 = partial45.equals((java.lang.Object) readableInterval66); int[] intArray80 = new int[] { (short) 100, (short) 0, (byte) 10, 3, 27097894, 3 }; java.util.Locale locale82 = null; try { int[] intArray83 = dateTimeField3.set((org.joda.time.ReadablePartial) partial45, (int) '#', intArray80, "org.joda.time.IllegalFieldValueException: Value 10 for dayOfYear is not supported: hourOfDay", locale82); } catch (org.joda.time.IllegalFieldValueException e) { } }
Code: public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) { super(); chronology = DateTimeUtils.getChronology(chronology).withUTC(); iChronology = chronology; if (types == null) { throw new IllegalArgumentException("Types array must not be null"); } if (values == null) { throw new IllegalArgumentException("Values array must not be null"); } if (values.length != types.length) { throw new IllegalArgumentException("Values array must be the same length as the types array"); } if (types.length == 0) { iTypes = types; iValues = values; return; } for (int i = 0; i < types.length; i++) { if (types[i] == null) { throw new IllegalArgumentException("Types array must not contain null: index " + i); } } DurationField lastUnitField = null; for (int i = 0; i < types.length; i++) { DateTimeFieldType loopType = types[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (i > 0) { if (loopUnitField.isSupported() == false) { if (lastUnitField.isSupported()) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } else { throw new IllegalArgumentException("Types array must not contain duplicate unsupported: " + types[i - 1].getName() + " and " + loopType.getName()); } } int compare = lastUnitField.compareTo(loopUnitField); if (compare < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } else if (compare == 0 && lastUnitField.equals(loopUnitField)) { if (types[i - 1].getRangeDurationType() == null) { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } else { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (lastRangeField.compareTo(loopRangeField) < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } if (lastRangeField.compareTo(loopRangeField) == 0) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } } } lastUnitField = loopUnitField; } iTypes = (DateTimeFieldType[]) types.clone(); chronology.validate(this, values); iValues = (int[]) values.clone(); }
tensor([[0.0020, 0.0014, 0.0020,  ..., 0.0010, 0.0013, 0.0009],
        [0.0016, 0.0013, 0.0019,  ..., 0.0008, 0.0011, 0.0007],
        [0.0014, 0.0012, 0.0020,  ..., 0.0009, 0.0009, 0.0006],
        ...,
        [0.0016, 0.0015, 0.0019,  ..., 0.0010, 0.0010, 0.0010],
        [0.0015, 0.0011, 0.0020,  ..., 0.0012, 0.0011, 0.0008],
        [0.0014, 0.0013, 0.0018,  ..., 0.0011, 0.0011, 0.0008]])