69575
Test: public void test540() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test540"); org.jsoup.select.NodeVisitor nodeVisitor0 = null; org.jsoup.select.NodeTraversor nodeTraversor1 = new org.jsoup.select.NodeTraversor(nodeVisitor0); org.jsoup.nodes.Node node2 = null; nodeTraversor1.traverse(node2); org.jsoup.nodes.Element[] elementArray4 = new org.jsoup.nodes.Element[] {}; org.jsoup.select.Elements elements5 = new org.jsoup.select.Elements(elementArray4); org.jsoup.select.Elements elements6 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements5); java.lang.String str7 = elements6.html(); org.jsoup.select.Elements elements9 = elements6.removeClass(":lt(0)"); elements6.clear(); org.jsoup.nodes.Document document12 = new org.jsoup.nodes.Document(""); org.jsoup.nodes.Document document14 = new org.jsoup.nodes.Document(""); document12.reparentChild((org.jsoup.nodes.Node) document14); org.jsoup.nodes.Document document17 = new org.jsoup.nodes.Document(""); org.jsoup.nodes.Document document19 = new org.jsoup.nodes.Document(""); document17.reparentChild((org.jsoup.nodes.Node) document19); org.jsoup.nodes.Node node21 = document12.doClone((org.jsoup.nodes.Node) document19); org.jsoup.nodes.Document document23 = new org.jsoup.nodes.Document(""); org.jsoup.nodes.Document document25 = new org.jsoup.nodes.Document(""); document23.reparentChild((org.jsoup.nodes.Node) document25); org.jsoup.nodes.Element element28 = document25.before(""); org.jsoup.nodes.Node node29 = document19.doClone((org.jsoup.nodes.Node) element28); boolean boolean30 = elements6.add(element28); boolean boolean32 = element28.hasAttr("[]=\"\""); try { nodeTraversor1.traverse((org.jsoup.nodes.Node) element28); } catch (java.lang.NullPointerException e) { } }
Code: protected Element doClone(Node parent){Element clone = (Element) super.doClone(parent);;clone.baseUri = baseUri;clone.childNodes = new NodeList(childNodes.size());;return clone;}
tensor([[0.0751, 0.0207, 0.0313, 0.0648, 0.0611, 0.0398, 0.1158, 0.0382, 0.0398,
         0.0346, 0.0398, 0.0244, 0.0463, 0.3683],
        [0.0598, 0.0232, 0.0308, 0.0637, 0.0541, 0.0372, 0.1313, 0.0426, 0.0372,
         0.0440, 0.0372, 0.0289, 0.0426, 0.3675],
        [0.0755, 0.0147, 0.0376, 0.0568, 0.0578, 0.0363, 0.1166, 0.0410, 0.0363,
         0.0368, 0.0363, 0.0245, 0.0395, 0.3903],
        [0.0846, 0.0202, 0.0346, 0.0688, 0.0557, 0.0438, 0.1365, 0.0391, 0.0438,
         0.0426, 0.0438, 0.0229, 0.0437, 0.3199],
        [0.0768, 0.0127, 0.0302, 0.0624, 0.0534, 0.0320, 0.1381, 0.0344, 0.0320,
         0.0340, 0.0320, 0.0280, 0.0383, 0.3957],
        [0.0985, 0.0387, 0.0339, 0.0550, 0.0688, 0.0587, 0.1194, 0.0788, 0.0587,
         0.0487, 0.0587, 0.0325, 0.0442, 0.2052],
        [0.0900, 0.0250, 0.0452, 0.0561, 0.0827, 0.0364, 0.1077, 0.0545, 0.0364,
         0.0442, 0.0364, 0.0284, 0.0443, 0.3127],
        [0.0790, 0.0320, 0.0250, 0.0815, 0.0578, 0.0396, 0.1415, 0.0581, 0.0396,
         0.0475, 0.0396, 0.0367, 0.0451, 0.2768],
        [0.0985, 0.0387, 0.0339, 0.0550, 0.0688, 0.0587, 0.1194, 0.0788, 0.0587,
         0.0487, 0.0587, 0.0325, 0.0442, 0.2052],
        [0.0799, 0.0156, 0.0348, 0.0542, 0.0668, 0.0366, 0.1284, 0.0433, 0.0366,
         0.0371, 0.0366, 0.0236, 0.0362, 0.3703],
        [0.0985, 0.0387, 0.0339, 0.0550, 0.0688, 0.0587, 0.1194, 0.0788, 0.0587,
         0.0487, 0.0587, 0.0325, 0.0442, 0.2052],
        [0.0853, 0.0236, 0.0281, 0.0632, 0.0533, 0.0423, 0.1328, 0.0616, 0.0423,
         0.0356, 0.0423, 0.0333, 0.0406, 0.3157],
        [0.0767, 0.0229, 0.0527, 0.0635, 0.0618, 0.0394, 0.1482, 0.0546, 0.0394,
         0.0559, 0.0394, 0.0278, 0.0435, 0.2742],
        [0.0834, 0.0273, 0.0452, 0.0614, 0.0725, 0.0426, 0.1443, 0.0509, 0.0426,
         0.0424, 0.0426, 0.0346, 0.0448, 0.2655]])