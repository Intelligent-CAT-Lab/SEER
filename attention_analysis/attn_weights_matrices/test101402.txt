101402
Test: public void test327() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test327"); org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral characterLiteral1 = new org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral('#'); org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.secondOfDay(); java.util.Locale locale5 = null; org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 9, (org.joda.time.Chronology) iSOChronology3, locale5); int int9 = characterLiteral1.parseInto(dateTimeParserBucket6, "weekyearOfCentury", (int) '#'); java.io.Writer writer10 = null; org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstanceUTC(); org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.secondOfDay(); long long17 = dateTimeField14.getDifferenceAsLong((long) (-1), (long) 1); org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfMonth(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField20 = new org.joda.time.field.OffsetDateTimeField(dateTimeField14, dateTimeFieldType18, 10919); org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(); int int22 = mutableDateTime21.getDayOfMonth(); org.joda.time.MutableDateTime.Property property23 = mutableDateTime21.weekOfWeekyear(); org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(); org.joda.time.DateTime dateTime25 = mutableDateTime24.toDateTime(); org.joda.time.DateTime dateTime27 = dateTime25.withMinuteOfHour((int) (short) 1); org.joda.time.DateTime dateTime29 = dateTime27.plusHours(10); int int30 = dateTime29.getSecondOfDay(); org.joda.time.LocalDateTime localDateTime31 = dateTime29.toLocalDateTime(); int int33 = localDateTime31.getValue(3); int int34 = property23.compareTo((org.joda.time.ReadablePartial) localDateTime31); java.util.Locale locale35 = null; java.lang.String str36 = offsetDateTimeField20.getAsText((org.joda.time.ReadablePartial) localDateTime31, locale35); java.util.Locale locale38 = null; java.lang.String str39 = offsetDateTimeField20.getAsText((long) 10911, locale38); boolean boolean40 = iSOChronology12.equals((java.lang.Object) locale38); org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' '); long long47 = dateTimeZone44.adjustOffset((long) 1, false); org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 10904, dateTimeZone44); java.lang.String str50 = dateTimeZone44.getNameKey((long) 1068); org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.now(); org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, (org.joda.time.ReadableInstant) mutableDateTime51); org.joda.time.Chronology chronology53 = null; org.joda.time.ReadableInterval readableInterval54 = null; org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval54); org.joda.time.DateTimeField dateTimeField56 = chronology55.weekyearOfCentury(); org.joda.time.DateTimeField dateTimeField57 = chronology55.secondOfDay(); java.lang.String str59 = dateTimeField57.getAsShortText(0L); org.joda.time.field.SkipDateTimeField skipDateTimeField60 = new org.joda.time.field.SkipDateTimeField(chronology53, dateTimeField57); long long63 = skipDateTimeField60.getDifferenceAsLong((long) 9, 0L); org.joda.time.DurationField durationField64 = skipDateTimeField60.getRangeDurationField(); org.joda.time.chrono.ISOChronology iSOChronology65 = org.joda.time.chrono.ISOChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField66 = iSOChronology65.secondOfDay(); long long69 = dateTimeField66.getDifferenceAsLong((long) (-1), (long) 1); org.joda.time.MutableDateTime mutableDateTime70 = org.joda.time.MutableDateTime.now(); org.joda.time.DateTime dateTime71 = mutableDateTime70.toDateTime(); org.joda.time.DateTime dateTime73 = dateTime71.withMinuteOfHour((int) (short) 1); org.joda.time.DateTime dateTime75 = dateTime73.plusHours(10); int int76 = dateTime75.getSecondOfDay(); org.joda.time.LocalDateTime localDateTime77 = dateTime75.toLocalDateTime(); java.util.Locale locale78 = null; java.lang.String str79 = dateTimeField66.getAsShortText((org.joda.time.ReadablePartial) localDateTime77, locale78); org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.centuryOfEra(); org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber unpaddedNumber84 = new org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType81, (int) (short) 100, true); org.joda.time.Chronology chronology86 = null; java.util.Locale locale87 = null; org.joda.time.format.DateTimeParserBucket dateTimeParserBucket88 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology86, locale87); int int91 = unpaddedNumber84.parseInto(dateTimeParserBucket88, "2021-07-09T17:49:08.298-07:00", 10862); java.util.Locale locale92 = dateTimeParserBucket88.getLocale(); java.lang.String str93 = skipDateTimeField60.getAsShortText((org.joda.time.ReadablePartial) localDateTime77, 837, locale92); try { characterLiteral1.printTo(writer10, 7L, (org.joda.time.Chronology) iSOChronology12, 10904, dateTimeZone44, locale92); } catch (java.lang.NullPointerException e) { } }
Code: public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException("Instant must not be null"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); int defaultYear = chrono.year().get(instantLocal); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, defaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone != null) { instant.setZone(iZone); } return newPos; }
tensor([[0.0073, 0.0044, 0.0100,  ..., 0.0082, 0.0265, 0.0034],
        [0.0049, 0.0034, 0.0085,  ..., 0.0079, 0.0263, 0.0025],
        [0.0062, 0.0037, 0.0086,  ..., 0.0088, 0.0302, 0.0028],
        ...,
        [0.0048, 0.0027, 0.0092,  ..., 0.0068, 0.0312, 0.0028],
        [0.0056, 0.0029, 0.0073,  ..., 0.0071, 0.0302, 0.0018],
        [0.0053, 0.0040, 0.0100,  ..., 0.0118, 0.0199, 0.0030]])