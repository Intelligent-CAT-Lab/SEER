67933
Test: public void test067() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test067"); com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null; javax.xml.stream.XMLInputFactory xMLInputFactory1 = null; javax.xml.stream.XMLOutputFactory xMLOutputFactory2 = null; com.fasterxml.jackson.dataformat.xml.XmlFactory xmlFactory3 = new com.fasterxml.jackson.dataformat.xml.XmlFactory(objectCodec0, xMLInputFactory1, xMLOutputFactory2); com.fasterxml.jackson.core.JsonFactory jsonFactory5 = xmlFactory3.setRootValueSeparator(""); com.fasterxml.jackson.core.FormatSchema formatSchema6 = null; boolean boolean7 = xmlFactory3.canUseSchema(formatSchema6); java.io.DataOutput dataOutput8 = null; com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = null; com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = xmlFactory3.createGenerator(dataOutput8, jsonEncoding9); int[] intArray17 = new int[] { (short) 100, (-1), (byte) 10, (byte) 1, 0, '#' }; jsonGenerator10.writeArray(intArray17, 0, 0); jsonGenerator10.writeOmittedField(""); boolean boolean23 = jsonGenerator10.canWriteObjectId(); jsonGenerator10.writeStartArray((int) (short) -1); javax.xml.stream.XMLInputFactory xMLInputFactory26 = null; com.fasterxml.jackson.dataformat.xml.XmlMapper xmlMapper27 = new com.fasterxml.jackson.dataformat.xml.XmlMapper(xMLInputFactory26); com.fasterxml.jackson.core.Version version28 = xmlMapper27.version(); com.fasterxml.jackson.core.ObjectCodec objectCodec29 = null; javax.xml.stream.XMLInputFactory xMLInputFactory30 = null; javax.xml.stream.XMLOutputFactory xMLOutputFactory31 = null; com.fasterxml.jackson.dataformat.xml.XmlFactory xmlFactory32 = new com.fasterxml.jackson.dataformat.xml.XmlFactory(objectCodec29, xMLInputFactory30, xMLOutputFactory31); com.fasterxml.jackson.core.JsonFactory jsonFactory34 = xmlFactory32.setRootValueSeparator(""); com.fasterxml.jackson.core.FormatSchema formatSchema35 = null; boolean boolean36 = xmlFactory32.canUseSchema(formatSchema35); java.lang.Class<com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.Feature> featureClass37 = xmlFactory32.getFormatWriteFeatureType(); java.lang.Class<?> wildcardClass38 = xmlMapper27.findMixInClassFor(featureClass37); com.fasterxml.jackson.dataformat.xml.XmlMapper xmlMapper39 = xmlMapper27.copy(); com.fasterxml.jackson.dataformat.xml.XmlFactory xmlFactory40 = new com.fasterxml.jackson.dataformat.xml.XmlFactory((com.fasterxml.jackson.core.ObjectCodec) xmlMapper39); com.fasterxml.jackson.core.ObjectCodec objectCodec41 = null; javax.xml.stream.XMLInputFactory xMLInputFactory42 = null; javax.xml.stream.XMLOutputFactory xMLOutputFactory43 = null; com.fasterxml.jackson.dataformat.xml.XmlFactory xmlFactory44 = new com.fasterxml.jackson.dataformat.xml.XmlFactory(objectCodec41, xMLInputFactory42, xMLOutputFactory43); com.fasterxml.jackson.core.JsonFactory jsonFactory46 = xmlFactory44.setRootValueSeparator(""); com.fasterxml.jackson.core.FormatSchema formatSchema47 = null; boolean boolean48 = xmlFactory44.canUseSchema(formatSchema47); javax.xml.stream.XMLInputFactory xMLInputFactory49 = xmlFactory44.getXMLInputFactory(); com.fasterxml.jackson.dataformat.xml.XmlMapper xmlMapper50 = new com.fasterxml.jackson.dataformat.xml.XmlMapper(xMLInputFactory49); com.fasterxml.jackson.annotation.JsonInclude.Include include51 = null; com.fasterxml.jackson.databind.ObjectMapper objectMapper52 = xmlMapper50.setSerializationInclusion(include51); com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping defaultTyping53 = null; com.fasterxml.jackson.databind.ObjectMapper objectMapper54 = xmlMapper50.enableDefaultTyping(defaultTyping53); com.fasterxml.jackson.dataformat.xml.XmlFactory xmlFactory55 = xmlMapper50.getFactory(); com.fasterxml.jackson.databind.PropertyNamingStrategy propertyNamingStrategy56 = null; com.fasterxml.jackson.databind.ObjectMapper objectMapper57 = xmlMapper50.setPropertyNamingStrategy(propertyNamingStrategy56); com.fasterxml.jackson.databind.SerializerProvider serializerProvider58 = objectMapper57.getSerializerProvider(); com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> objJsonSerializer59 = serializerProvider58.getDefaultNullKeySerializer(); byte[] byteArray60 = xmlMapper39.writeValueAsBytes((java.lang.Object) objJsonSerializer59); try { jsonGenerator10.writeBinary(byteArray60); } catch (java.lang.IllegalStateException e) { } }
Code: public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException { if (data == null) { writeNull(); return; } _verifyValueWrite("write Binary value"); if (_nextName == null) { handleMissingName(); } try { if (true) { byte[] fullBuffer = toFullBuffer(data, offset, len); _xmlWriter.writeBinaryAttribute("", _nextName.getNamespaceURI(), _nextName.getLocalPart(), fullBuffer); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeBinary(data, offset, len); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), data, offset, len); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeBinary(data, offset, len); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } }
tensor([[0.0077, 0.0063, 0.0030,  ..., 0.0231, 0.0034, 0.0034],
        [0.0060, 0.0054, 0.0021,  ..., 0.0270, 0.0034, 0.0034],
        [0.0058, 0.0052, 0.0020,  ..., 0.0245, 0.0030, 0.0030],
        ...,
        [0.0068, 0.0042, 0.0037,  ..., 0.0237, 0.0028, 0.0028],
        [0.0053, 0.0049, 0.0036,  ..., 0.0239, 0.0029, 0.0029],
        [0.0053, 0.0049, 0.0036,  ..., 0.0239, 0.0029, 0.0029]])