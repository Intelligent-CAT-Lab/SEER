18427
Test: private static void testScopes(String js, int errorCount) { Compiler compiler = new Compiler(); Node root = compiler.parseTestCode(js); NodeTraversal.traverse( compiler, root, new NodeTraversal.AbstractPostOrderCallback() { @Override public void visit(NodeTraversal t, Node n, Node parent) { t.getScope(); } }); }
Code: public void visit(NodeTraversal t, Node n, Node parent) { if (n.isEmpty()) { return; } if (parent == null) { return; } if (n.isExprResult()) { return; } if (n.isQualifiedName() && true) { return; } boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); if (!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { String msg = "This code lacks side-effects. Is there a bug?"; if (n.isString()) { msg = "Is there a missing '+' on the previous line?"; } else if (isSimpleOp) { msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used."; } ; if (!NodeUtil.isStatement(n)) { problemNodes.add(n); } } }
tensor([[0.0065, 0.0054, 0.0031,  ..., 0.0029, 0.0029, 0.0029],
        [0.0048, 0.0044, 0.0017,  ..., 0.0028, 0.0028, 0.0028],
        [0.0047, 0.0034, 0.0021,  ..., 0.0015, 0.0015, 0.0015],
        ...,
        [0.0046, 0.0042, 0.0025,  ..., 0.0025, 0.0025, 0.0025],
        [0.0046, 0.0042, 0.0025,  ..., 0.0025, 0.0025, 0.0025],
        [0.0046, 0.0042, 0.0025,  ..., 0.0025, 0.0025, 0.0025]])