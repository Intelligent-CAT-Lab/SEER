101053
Test: public void test0869() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0869"); org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean2 = iSOChronology0.equals((java.lang.Object) iSOChronology1); org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField5 = gJChronology4.yearOfCentury(); org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology4); org.joda.time.DurationField durationField7 = gJChronology4.eras(); org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology4); int[] intArray10 = iSOChronology1.get((org.joda.time.ReadablePartial) localDate8, (-1123200000L)); org.joda.time.LocalDate localDate12 = localDate8.minusDays(100); org.joda.time.LocalDate localDate14 = localDate12.withYearOfCentury(9); int int15 = localDate12.getDayOfMonth(); org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (short) -1); boolean boolean18 = instant17.isEqualNow(); org.joda.time.DateTime dateTime19 = localDate12.toDateTime((org.joda.time.ReadableInstant) instant17); org.joda.time.Instant instant20 = org.joda.time.Instant.now(); org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField23 = gJChronology22.yearOfCentury(); org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology22); org.joda.time.DurationField durationField25 = gJChronology22.eras(); org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology22); org.joda.time.ReadablePeriod readablePeriod27 = null; org.joda.time.LocalDate localDate29 = localDate26.withPeriodAdded(readablePeriod27, (-28800000)); org.joda.time.Interval interval30 = localDate26.toInterval(); org.joda.time.ReadableInstant readableInstant31 = null; boolean boolean32 = interval30.isBefore(readableInstant31); long long33 = interval30.getStartMillis(); org.joda.time.DateTime dateTime34 = interval30.getStart(); int int35 = dateTime34.getDayOfMonth(); boolean boolean36 = instant20.isEqual((org.joda.time.ReadableInstant) dateTime34); org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(1969); org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone39 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone38); int int41 = cachedDateTimeZone39.getStandardOffset(0L); org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance((org.joda.time.DateTimeZone) cachedDateTimeZone39); org.joda.time.DateTimeField dateTimeField43 = iSOChronology42.centuryOfEra(); org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField46 = gJChronology45.yearOfCentury(); org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology45); org.joda.time.DurationField durationField48 = gJChronology45.eras(); org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology45); org.joda.time.ReadablePeriod readablePeriod50 = null; org.joda.time.LocalDate localDate52 = localDate49.withPeriodAdded(readablePeriod50, (-28800000)); org.joda.time.Interval interval53 = localDate49.toInterval(); org.joda.time.Instant instant55 = new org.joda.time.Instant((long) (short) -1); org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField57 = gJChronology56.yearOfCentury(); org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology56); int int59 = dateTime58.getEra(); int int60 = dateTime58.getYear(); boolean boolean61 = instant55.isBefore((org.joda.time.ReadableInstant) dateTime58); org.joda.time.LocalDate localDate62 = dateTime58.toLocalDate(); org.joda.time.LocalDate localDate64 = localDate62.plusDays(2757764); int int65 = localDate64.getDayOfMonth(); org.joda.time.LocalDate.Property property66 = localDate64.dayOfMonth(); org.joda.time.Interval interval67 = localDate64.toInterval(); boolean boolean68 = interval53.overlaps((org.joda.time.ReadableInterval) interval67); org.joda.time.PeriodType periodType69 = null; org.joda.time.Period period70 = interval53.toPeriod(periodType69); int[] intArray72 = iSOChronology42.get((org.joda.time.ReadablePeriod) period70, (long) 1970); org.joda.time.DateTime dateTime73 = dateTime34.minus((org.joda.time.ReadablePeriod) period70); org.joda.time.LocalDate localDate74 = localDate12.plus((org.joda.time.ReadablePeriod) period70); }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone)); if (cutoverDate.getYear() <= 0) { throw new IllegalArgumentException("Cutover too early. Must be on or after 0001-01-01."); } } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0047, 0.0152, 0.0087,  ..., 0.0052, 0.0273, 0.0021],
        [0.0049, 0.0137, 0.0096,  ..., 0.0047, 0.0174, 0.0025],
        [0.0042, 0.0178, 0.0092,  ..., 0.0055, 0.0235, 0.0017],
        ...,
        [0.0030, 0.0148, 0.0096,  ..., 0.0042, 0.0273, 0.0017],
        [0.0040, 0.0147, 0.0094,  ..., 0.0047, 0.0236, 0.0020],
        [0.0034, 0.0141, 0.0105,  ..., 0.0073, 0.0177, 0.0018]])