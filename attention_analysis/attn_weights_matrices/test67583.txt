67583
Test: public void test03() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test03"); com.fasterxml.jackson.databind.JavaType javaType0 = null; com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSerializer2 = null; com.fasterxml.jackson.core.JsonParser jsonParser3 = null; com.fasterxml.jackson.core.JsonLocation jsonLocation5 = null; com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer inetSocketAddressSerializer6 = new com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer(); java.lang.Class<java.net.InetSocketAddress> inetSocketAddressClass7 = inetSocketAddressSerializer6.handledType(); com.fasterxml.jackson.databind.SerializationFeature serializationFeature9 = com.fasterxml.jackson.databind.SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID; com.fasterxml.jackson.databind.node.ShortNode shortNode14 = new com.fasterxml.jackson.databind.node.ShortNode((short) 100); java.util.List<com.fasterxml.jackson.databind.JsonNode> jsonNodeList16 = shortNode14.findValues("hi!"); com.fasterxml.jackson.databind.node.JsonNodeType jsonNodeType17 = shortNode14.getNodeType(); java.text.DateFormat dateFormat18 = java.text.DateFormat.getDateTimeInstance(); java.lang.String str20 = dateFormat18.format((java.lang.Object) (byte) 10); byte[] byteArray25 = new byte[] { (byte) 1, (byte) 0, (byte) 100, (byte) -1 }; com.fasterxml.jackson.databind.node.BinaryNode binaryNode26 = new com.fasterxml.jackson.databind.node.BinaryNode(byteArray25); java.lang.String str28 = binaryNode26.asText(""); com.fasterxml.jackson.databind.node.ShortNode shortNode32 = new com.fasterxml.jackson.databind.node.ShortNode((short) 100); java.util.List<com.fasterxml.jackson.databind.JsonNode> jsonNodeList34 = shortNode32.findValues("hi!"); java.text.DateFormat dateFormat35 = java.text.DateFormat.getDateTimeInstance(); com.fasterxml.jackson.databind.PropertyMetadata propertyMetadata36 = com.fasterxml.jackson.databind.PropertyMetadata.STD_REQUIRED_OR_OPTIONAL; com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer inetSocketAddressSerializer41 = new com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer(); java.lang.Class<java.net.InetSocketAddress> inetSocketAddressClass42 = inetSocketAddressSerializer41.handledType(); com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer43 = inetSocketAddressSerializer41.getDelegatee(); com.fasterxml.jackson.databind.node.TextNode textNode45 = com.fasterxml.jackson.databind.node.TextNode.valueOf("Dec 31, 1969 4:00:00 PM"); com.fasterxml.jackson.databind.node.ShortNode shortNode47 = new com.fasterxml.jackson.databind.node.ShortNode((short) 100); com.fasterxml.jackson.core.JsonParser jsonParser48 = null; com.fasterxml.jackson.databind.JavaType javaType50 = null; com.fasterxml.jackson.databind.exc.InvalidTypeIdException invalidTypeIdException52 = com.fasterxml.jackson.databind.exc.InvalidTypeIdException.from(jsonParser48, "", javaType50, "hi!"); com.fasterxml.jackson.databind.JavaType javaType53 = invalidTypeIdException52.getBaseType(); com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer inetSocketAddressSerializer54 = new com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer(); com.fasterxml.jackson.databind.node.BooleanNode booleanNode55 = com.fasterxml.jackson.databind.node.BooleanNode.getTrue(); com.fasterxml.jackson.databind.SerializerProvider serializerProvider56 = null; boolean boolean57 = booleanNode55.isEmpty(serializerProvider56); com.fasterxml.jackson.databind.SerializationFeature serializationFeature59 = com.fasterxml.jackson.databind.SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID; com.fasterxml.jackson.databind.SerializationFeature serializationFeature60 = com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS; java.text.DateFormat dateFormat61 = java.text.DateFormat.getDateTimeInstance(); java.lang.String str63 = dateFormat61.format((java.lang.Object) (byte) 10); java.text.DateFormat dateFormat64 = java.text.DateFormat.getDateTimeInstance(); java.lang.String str66 = dateFormat64.format((java.lang.Object) (byte) 10); byte[] byteArray72 = new byte[] { (byte) 1, (byte) 0, (byte) 100, (byte) -1 }; com.fasterxml.jackson.databind.node.BinaryNode binaryNode73 = new com.fasterxml.jackson.databind.node.BinaryNode(byteArray72); byte[] byteArray74 = binaryNode73.binaryValue(); com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer inetSocketAddressSerializer76 = new com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer(); java.lang.Class<java.net.InetSocketAddress> inetSocketAddressClass77 = inetSocketAddressSerializer76.handledType(); com.fasterxml.jackson.core.JsonParser jsonParser79 = null; com.fasterxml.jackson.core.JsonLocation jsonLocation81 = null; com.fasterxml.jackson.databind.deser.impl.ReadableObjectId readableObjectId82 = null; com.fasterxml.jackson.databind.deser.UnresolvedForwardReference unresolvedForwardReference83 = new com.fasterxml.jackson.databind.deser.UnresolvedForwardReference(jsonParser79, "hi!", jsonLocation81, readableObjectId82); com.fasterxml.jackson.databind.node.ShortNode shortNode86 = new com.fasterxml.jackson.databind.node.ShortNode((short) 100); java.util.List<com.fasterxml.jackson.databind.JsonNode> jsonNodeList88 = shortNode86.findValues("hi!"); java.lang.Object[] objArray89 = new java.lang.Object[] { serializationFeature9, '#', 10.0d, 1, shortNode14, (byte) 10, binaryNode26, (short) 0, '#', jsonNodeList34, dateFormat35, propertyMetadata36, 1L, (-1L), (short) 1, "AQBk/w==", wildcardJsonSerializer43, textNode45, shortNode47, invalidTypeIdException52, inetSocketAddressSerializer54, boolean57, (byte) 0, serializationFeature59, serializationFeature60, (byte) 10, dateFormat64, 10.0d, byteArray74, (-1L), inetSocketAddressClass77, 0.0d, readableObjectId82, 0L, shortNode86 }; java.util.ArrayList<java.lang.Object> objList90 = new java.util.ArrayList<java.lang.Object>(); boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objList90, objArray89); com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException unrecognizedPropertyException92 = new com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException(jsonParser3, "AQBk/w==", jsonLocation5, inetSocketAddressClass7, "AQBk/w==", (java.util.Collection<java.lang.Object>) objList90); com.fasterxml.jackson.databind.ser.std.JsonValueSerializer.TypeSerializerRerouter typeSerializerRerouter93 = new com.fasterxml.jackson.databind.ser.std.JsonValueSerializer.TypeSerializerRerouter(typeSerializer2, (java.lang.Object) objList90); com.fasterxml.jackson.databind.ser.std.SqlDateSerializer sqlDateSerializer95 = new com.fasterxml.jackson.databind.ser.std.SqlDateSerializer((java.lang.Boolean) false); com.fasterxml.jackson.databind.SerializerProvider serializerProvider96 = null; com.fasterxml.jackson.databind.BeanProperty beanProperty97 = null; com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer98 = sqlDateSerializer95.createContextual(serializerProvider96, beanProperty97); com.fasterxml.jackson.databind.ser.std.CollectionSerializer collectionSerializer99 = new com.fasterxml.jackson.databind.ser.std.CollectionSerializer(javaType0, true, (com.fasterxml.jackson.databind.jsontype.TypeSerializer) typeSerializerRerouter93, (com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>) wildcardJsonSerializer98); }
Code: public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException { if (false) { return this; } JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (false) { return this; } JsonFormat.Shape shape = format.getShape(); if (true) { return withFormat(Boolean.TRUE, null); } if (format.hasPattern()) { final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc); TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone(); df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } final boolean hasLocale = format.hasLocale(); final boolean hasTZ = format.hasTimeZone(); final boolean asString = (shape == JsonFormat.Shape.STRING); if (!hasLocale && !asString) { return this; } DateFormat df0 = serializers.getConfig().getDateFormat(); if (df0 instanceof StdDateFormat) { StdDateFormat std = (StdDateFormat) df0; if (format.hasLocale()) { std = std.withLocale(format.getLocale()); } if (format.hasTimeZone()) { std = std.withTimeZone(format.getTimeZone()); } return withFormat(Boolean.FALSE, std); } if (!(df0 instanceof SimpleDateFormat)) { serializers.reportMappingProblem("Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`",df0.getClass().getName()); } SimpleDateFormat df = (SimpleDateFormat) df0; if (hasLocale) { df = new SimpleDateFormat(df.toPattern(), format.getLocale()); } else { ; } TimeZone newTz = format.getTimeZone(); boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone()); if (changeTZ) { df.setTimeZone(newTz); } return withFormat(Boolean.FALSE, df); }
tensor([[0.0039, 0.0169, 0.0023,  ..., 0.0058, 0.0074, 0.0018],
        [0.0038, 0.0175, 0.0024,  ..., 0.0046, 0.0060, 0.0021],
        [0.0032, 0.0251, 0.0024,  ..., 0.0049, 0.0061, 0.0016],
        ...,
        [0.0041, 0.0170, 0.0031,  ..., 0.0052, 0.0071, 0.0020],
        [0.0048, 0.0137, 0.0033,  ..., 0.0062, 0.0064, 0.0022],
        [0.0028, 0.0185, 0.0027,  ..., 0.0055, 0.0079, 0.0016]])