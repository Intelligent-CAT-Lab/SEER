67937
Test: public void test161() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test161"); com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter(); com.fasterxml.jackson.core.ObjectCodec objectCodec1 = null; javax.xml.stream.XMLInputFactory xMLInputFactory2 = null; javax.xml.stream.XMLOutputFactory xMLOutputFactory3 = null; com.fasterxml.jackson.dataformat.xml.XmlFactory xmlFactory4 = new com.fasterxml.jackson.dataformat.xml.XmlFactory(objectCodec1, xMLInputFactory2, xMLOutputFactory3); com.fasterxml.jackson.core.JsonFactory jsonFactory6 = xmlFactory4.setRootValueSeparator(""); com.fasterxml.jackson.core.FormatSchema formatSchema7 = null; boolean boolean8 = xmlFactory4.canUseSchema(formatSchema7); java.io.DataOutput dataOutput9 = null; com.fasterxml.jackson.core.JsonEncoding jsonEncoding10 = null; com.fasterxml.jackson.core.JsonGenerator jsonGenerator11 = xmlFactory4.createGenerator(dataOutput9, jsonEncoding10); int[] intArray18 = new int[] { (short) 100, (-1), (byte) 10, (byte) 1, 0, '#' }; jsonGenerator11.writeArray(intArray18, 0, 0); jsonGenerator11.writeOmittedField(""); boolean boolean24 = jsonGenerator11.canWriteObjectId(); com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes25 = null; com.fasterxml.jackson.core.JsonGenerator jsonGenerator26 = jsonGenerator11.setCharacterEscapes(characterEscapes25); defaultXmlPrettyPrinter0.writeObjectEntrySeparator(jsonGenerator26); javax.xml.stream.XMLInputFactory xMLInputFactory28 = null; com.fasterxml.jackson.dataformat.xml.XmlMapper xmlMapper29 = new com.fasterxml.jackson.dataformat.xml.XmlMapper(xMLInputFactory28); com.fasterxml.jackson.core.JsonGenerator.Feature[] featureArray30 = new com.fasterxml.jackson.core.JsonGenerator.Feature[] {}; com.fasterxml.jackson.databind.ObjectMapper objectMapper31 = xmlMapper29.enable(featureArray30); com.fasterxml.jackson.databind.jsontype.SubtypeResolver subtypeResolver32 = null; com.fasterxml.jackson.databind.ObjectMapper objectMapper33 = xmlMapper29.setSubtypeResolver(subtypeResolver32); com.fasterxml.jackson.dataformat.xml.XmlFactory xmlFactory34 = new com.fasterxml.jackson.dataformat.xml.XmlFactory((com.fasterxml.jackson.core.ObjectCodec) objectMapper33); java.io.DataOutput dataOutput35 = null; com.fasterxml.jackson.core.JsonEncoding jsonEncoding36 = null; com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = xmlFactory34.createGenerator(dataOutput35, jsonEncoding36); boolean boolean38 = jsonGenerator37.canOmitFields(); defaultXmlPrettyPrinter0.writeRootValueSeparator(jsonGenerator37); javax.xml.stream.XMLInputFactory xMLInputFactory40 = null; com.fasterxml.jackson.core.ObjectCodec objectCodec41 = null; javax.xml.stream.XMLInputFactory xMLInputFactory42 = null; javax.xml.stream.XMLOutputFactory xMLOutputFactory43 = null; com.fasterxml.jackson.dataformat.xml.XmlFactory xmlFactory44 = new com.fasterxml.jackson.dataformat.xml.XmlFactory(objectCodec41, xMLInputFactory42, xMLOutputFactory43); javax.xml.stream.XMLInputFactory xMLInputFactory45 = null; com.fasterxml.jackson.dataformat.xml.XmlMapper xmlMapper46 = new com.fasterxml.jackson.dataformat.xml.XmlMapper(xMLInputFactory45); com.fasterxml.jackson.core.JsonFactory jsonFactory47 = xmlFactory44.setCodec((com.fasterxml.jackson.core.ObjectCodec) xmlMapper46); com.fasterxml.jackson.core.io.OutputDecorator outputDecorator48 = xmlFactory44.getOutputDecorator(); com.fasterxml.jackson.core.ObjectCodec objectCodec49 = xmlFactory44.getCodec(); boolean boolean50 = xmlFactory44.canUseCharArrays(); javax.xml.stream.XMLOutputFactory xMLOutputFactory51 = xmlFactory44.getXMLOutputFactory(); com.fasterxml.jackson.dataformat.xml.XmlMapper xmlMapper52 = new com.fasterxml.jackson.dataformat.xml.XmlMapper(xMLInputFactory40, xMLOutputFactory51); com.fasterxml.jackson.dataformat.xml.XmlMapper xmlMapper53 = xmlMapper52.copy(); com.fasterxml.jackson.core.ObjectCodec objectCodec54 = null; javax.xml.stream.XMLInputFactory xMLInputFactory55 = null; javax.xml.stream.XMLOutputFactory xMLOutputFactory56 = null; com.fasterxml.jackson.dataformat.xml.XmlFactory xmlFactory57 = new com.fasterxml.jackson.dataformat.xml.XmlFactory(objectCodec54, xMLInputFactory55, xMLOutputFactory56); com.fasterxml.jackson.core.JsonFactory jsonFactory59 = xmlFactory57.setRootValueSeparator(""); com.fasterxml.jackson.core.FormatSchema formatSchema60 = null; boolean boolean61 = xmlFactory57.canUseSchema(formatSchema60); java.io.DataOutput dataOutput62 = null; com.fasterxml.jackson.core.JsonEncoding jsonEncoding63 = null; com.fasterxml.jackson.core.JsonGenerator jsonGenerator64 = xmlFactory57.createGenerator(dataOutput62, jsonEncoding63); int[] intArray71 = new int[] { (short) 100, (-1), (byte) 10, (byte) 1, 0, '#' }; jsonGenerator64.writeArray(intArray71, 0, 0); javax.xml.stream.XMLInputFactory xMLInputFactory75 = null; com.fasterxml.jackson.dataformat.xml.XmlMapper xmlMapper76 = new com.fasterxml.jackson.dataformat.xml.XmlMapper(xMLInputFactory75); com.fasterxml.jackson.core.JsonGenerator.Feature[] featureArray77 = new com.fasterxml.jackson.core.JsonGenerator.Feature[] {}; com.fasterxml.jackson.databind.ObjectMapper objectMapper78 = xmlMapper76.enable(featureArray77); com.fasterxml.jackson.databind.jsontype.SubtypeResolver subtypeResolver79 = null; com.fasterxml.jackson.databind.ObjectMapper objectMapper80 = xmlMapper76.setSubtypeResolver(subtypeResolver79); com.fasterxml.jackson.databind.node.ArrayNode arrayNode81 = xmlMapper76.createArrayNode(); xmlMapper52.writeTree(jsonGenerator64, (com.fasterxml.jackson.databind.JsonNode) arrayNode81); defaultXmlPrettyPrinter0.beforeArrayValues(jsonGenerator64); java.io.InputStream inputStream84 = null; int int86 = jsonGenerator64.writeBinary(inputStream84, 100); }
Code: public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException { if (data == null) { writeNull(); return; } _verifyValueWrite("write Binary value"); if (_nextName == null) { handleMissingName(); } try { if (false) { byte[] fullBuffer = toFullBuffer(data, offset, len); _xmlWriter.writeBinaryAttribute("", _nextName.getNamespaceURI(), _nextName.getLocalPart(), fullBuffer); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeBinary(data, offset, len); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), data, offset, len); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeBinary(data, offset, len); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } }
tensor([[0.0078, 0.0064, 0.0031,  ..., 0.0235, 0.0035, 0.0035],
        [0.0061, 0.0055, 0.0021,  ..., 0.0278, 0.0035, 0.0035],
        [0.0059, 0.0053, 0.0020,  ..., 0.0251, 0.0030, 0.0030],
        ...,
        [0.0069, 0.0042, 0.0037,  ..., 0.0241, 0.0029, 0.0029],
        [0.0054, 0.0050, 0.0037,  ..., 0.0244, 0.0030, 0.0030],
        [0.0054, 0.0050, 0.0037,  ..., 0.0244, 0.0030, 0.0030]])