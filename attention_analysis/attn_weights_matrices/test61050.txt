61050
Test: public void test252() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test252"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL; org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("\u2028", cSVFormat3); java.util.Map<java.lang.String, java.lang.Integer> strMap5 = cSVParser4.getHeaderMap(); cSVParser4.close(); java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser4.getHeaderMap(); java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser4.spliterator(); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser4.iterator(); java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser4.getHeaderMap(); boolean boolean11 = cSVParser4.isClosed(); long long12 = cSVParser4.getCurrentLineNumber(); }
Code: public Map<String, Integer> getHeaderMap() { return this.headerMap == null ? null : new LinkedHashMap<String, Integer>(this.headerMap); }
tensor([[0.0520, 0.0949, 0.1240, 0.0654, 0.0805, 0.0586, 0.0309, 0.0788, 0.0564,
         0.0821, 0.0564, 0.0527, 0.0254, 0.0734, 0.0440, 0.0246],
        [0.0357, 0.0888, 0.1950, 0.0793, 0.0819, 0.0525, 0.0239, 0.0774, 0.0409,
         0.0864, 0.0409, 0.0412, 0.0176, 0.0817, 0.0364, 0.0202],
        [0.0390, 0.1030, 0.1404, 0.0908, 0.0922, 0.0593, 0.0263, 0.0723, 0.0498,
         0.0860, 0.0498, 0.0377, 0.0224, 0.0724, 0.0362, 0.0225],
        [0.0444, 0.0993, 0.1324, 0.0883, 0.0947, 0.0694, 0.0239, 0.0692, 0.0534,
         0.0777, 0.0534, 0.0393, 0.0214, 0.0730, 0.0383, 0.0220],
        [0.0581, 0.1053, 0.0980, 0.0816, 0.0934, 0.0669, 0.0372, 0.0622, 0.0474,
         0.0755, 0.0474, 0.0477, 0.0324, 0.0657, 0.0483, 0.0329],
        [0.0403, 0.0925, 0.1572, 0.0859, 0.0869, 0.0571, 0.0254, 0.0728, 0.0474,
         0.1002, 0.0474, 0.0392, 0.0236, 0.0626, 0.0381, 0.0234],
        [0.0384, 0.1078, 0.1372, 0.0912, 0.0904, 0.0573, 0.0258, 0.0644, 0.0471,
         0.1073, 0.0471, 0.0322, 0.0247, 0.0714, 0.0383, 0.0195],
        [0.0338, 0.1034, 0.1457, 0.0915, 0.0939, 0.0561, 0.0237, 0.0824, 0.0404,
         0.0950, 0.0404, 0.0471, 0.0227, 0.0653, 0.0397, 0.0189],
        [0.0446, 0.1154, 0.1052, 0.0753, 0.1109, 0.0730, 0.0301, 0.0697, 0.0406,
         0.0954, 0.0406, 0.0381, 0.0316, 0.0707, 0.0422, 0.0167],
        [0.0441, 0.1033, 0.1470, 0.0873, 0.1154, 0.0617, 0.0219, 0.0539, 0.0415,
         0.0930, 0.0415, 0.0481, 0.0202, 0.0587, 0.0408, 0.0215],
        [0.0446, 0.1154, 0.1052, 0.0753, 0.1109, 0.0730, 0.0301, 0.0697, 0.0406,
         0.0954, 0.0406, 0.0381, 0.0316, 0.0707, 0.0422, 0.0167],
        [0.0523, 0.0977, 0.0899, 0.0965, 0.0851, 0.0657, 0.0327, 0.0630, 0.0519,
         0.1112, 0.0519, 0.0371, 0.0270, 0.0615, 0.0478, 0.0289],
        [0.0457, 0.0752, 0.1380, 0.0816, 0.0894, 0.0645, 0.0300, 0.0790, 0.0523,
         0.0840, 0.0523, 0.0554, 0.0290, 0.0573, 0.0409, 0.0255],
        [0.0448, 0.0951, 0.1251, 0.0873, 0.1089, 0.0719, 0.0295, 0.0646, 0.0476,
         0.0914, 0.0476, 0.0359, 0.0228, 0.0740, 0.0375, 0.0161],
        [0.0366, 0.0987, 0.1280, 0.0951, 0.0845, 0.0591, 0.0292, 0.0710, 0.0440,
         0.1033, 0.0440, 0.0331, 0.0241, 0.0831, 0.0405, 0.0260],
        [0.0391, 0.1107, 0.1003, 0.0892, 0.1053, 0.0868, 0.0259, 0.0682, 0.0440,
         0.0959, 0.0440, 0.0378, 0.0219, 0.0632, 0.0452, 0.0224]])