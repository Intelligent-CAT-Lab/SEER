101534
Test: public void test637() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test637"); org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateTime(); boolean boolean1 = dateTimeFormatter0.isPrinter(); org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone6 = new org.joda.time.tz.FixedDateTimeZone("", "", 0, (int) (byte) 0); int int8 = fixedDateTimeZone6.getStandardOffset((long) (-5)); int int10 = fixedDateTimeZone6.getOffsetFromLocal((long) 7); org.joda.time.chrono.GregorianChronology gregorianChronology12 = org.joda.time.chrono.GregorianChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField13 = gregorianChronology12.centuryOfEra(); org.joda.time.DurationField durationField14 = gregorianChronology12.millis(); org.joda.time.DateTimeField dateTimeField15 = gregorianChronology12.clockhourOfDay(); org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(0L, (org.joda.time.Chronology) gregorianChronology12); org.joda.time.DateTimeField dateTimeField17 = gregorianChronology12.weekyear(); org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour(); org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.MONTHS_TYPE; org.joda.time.field.PreciseDurationField preciseDurationField21 = new org.joda.time.field.PreciseDurationField(durationFieldType19, (long) (-10)); long long24 = preciseDurationField21.subtract((long) 10, (long) 10); org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField25 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType18, (org.joda.time.DurationField) preciseDurationField21); org.joda.time.IllegalFieldValueException illegalFieldValueException29 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType18, (java.lang.Number) (byte) 14, (java.lang.Number) (byte) 11, (java.lang.Number) 1L); org.joda.time.DateTimeFieldType dateTimeFieldType30 = illegalFieldValueException29.getDateTimeFieldType(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField32 = new org.joda.time.field.OffsetDateTimeField(dateTimeField17, dateTimeFieldType30, (int) (short) 10); java.lang.String str33 = offsetDateTimeField32.getName(); org.joda.time.DateTimeFieldType dateTimeFieldType34 = offsetDateTimeField32.getType(); org.joda.time.chrono.GregorianChronology gregorianChronology36 = org.joda.time.chrono.GregorianChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField37 = gregorianChronology36.centuryOfEra(); org.joda.time.DurationField durationField38 = gregorianChronology36.millis(); org.joda.time.DateTimeField dateTimeField39 = gregorianChronology36.clockhourOfDay(); org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(0L, (org.joda.time.Chronology) gregorianChronology36); org.joda.time.DateTimeField dateTimeField41 = gregorianChronology36.weekyear(); org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfHour(); org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.MONTHS_TYPE; org.joda.time.field.PreciseDurationField preciseDurationField45 = new org.joda.time.field.PreciseDurationField(durationFieldType43, (long) (-10)); long long48 = preciseDurationField45.subtract((long) 10, (long) 10); org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField49 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType42, (org.joda.time.DurationField) preciseDurationField45); org.joda.time.IllegalFieldValueException illegalFieldValueException53 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType42, (java.lang.Number) (byte) 14, (java.lang.Number) (byte) 11, (java.lang.Number) 1L); org.joda.time.DateTimeFieldType dateTimeFieldType54 = illegalFieldValueException53.getDateTimeFieldType(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField56 = new org.joda.time.field.OffsetDateTimeField(dateTimeField41, dateTimeFieldType54, (int) (short) 10); long long58 = offsetDateTimeField56.roundHalfEven(1625879802741L); org.joda.time.DateTimeZone dateTimeZone59 = null; org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeUtils.getZone(dateTimeZone59); java.util.Locale locale62 = null; java.lang.String str63 = dateTimeZone60.getName((long) (byte) 14, locale62); java.lang.Object obj64 = dateTimeZone60.writeReplace(); org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(dateTimeZone60); int int66 = dateTime65.getWeekyear(); int int67 = dateTime65.getYear(); org.joda.time.DateTime.Property property68 = dateTime65.era(); org.joda.time.DateTime.Property property69 = dateTime65.yearOfCentury(); org.joda.time.DateTime dateTime71 = dateTime65.minusYears(0); org.joda.time.TimeOfDay timeOfDay72 = dateTime65.toTimeOfDay(); int[] intArray79 = new int[] { (-1), '4', (short) 1, 2, (byte) 7, 1980 }; int int80 = offsetDateTimeField56.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay72, intArray79); java.util.Locale locale81 = null; java.lang.String str82 = offsetDateTimeField32.getAsText((org.joda.time.ReadablePartial) timeOfDay72, locale81); boolean boolean83 = fixedDateTimeZone6.equals((java.lang.Object) timeOfDay72); java.lang.String str84 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) timeOfDay72); java.util.Locale locale85 = dateTimeFormatter0.getLocale(); org.joda.time.format.DateTimePrinter dateTimePrinter86 = dateTimeFormatter0.getPrinter(); }
Code: public int getOffsetFromLocal(long instantLocal) { final int offsetLocal = getOffset(instantLocal); final long instantAdjusted = instantLocal - offsetLocal; final int offsetAdjusted = getOffset(instantAdjusted); if (offsetLocal != offsetAdjusted) { if ((offsetLocal + offsetAdjusted) < 1) { long nextLocal = nextTransition(instantAdjusted); long nextAdjusted = nextTransition(instantLocal - offsetAdjusted); if (nextLocal != nextAdjusted) { return offsetLocal; } } } else if (offsetLocal == 0) { long prev = previousTransition(instantAdjusted); if (prev < instantAdjusted) { int offsetPrev = getOffset(prev); int diff = offsetPrev - offsetLocal; if (instantAdjusted * prev < diff) { return offsetPrev; } } } return offsetAdjusted; }
tensor([[0.0079, 0.0046, 0.0162,  ..., 0.0089, 0.0051, 0.0038],
        [0.0053, 0.0037, 0.0139,  ..., 0.0086, 0.0049, 0.0027],
        [0.0084, 0.0034, 0.0181,  ..., 0.0092, 0.0047, 0.0029],
        ...,
        [0.0053, 0.0029, 0.0173,  ..., 0.0075, 0.0040, 0.0032],
        [0.0072, 0.0033, 0.0151,  ..., 0.0082, 0.0048, 0.0037],
        [0.0057, 0.0043, 0.0130,  ..., 0.0128, 0.0045, 0.0033]])