63509
Test: public void testLongLargerThanMinLongThatWrapsAround() throws IOException { JsonReader reader = new JsonReader(reader("[-22233720368547758070]")); reader.setLenient(true); reader.beginArray(); try { reader.nextLong(); fail(); } catch (NumberFormatException expected) { } }
Code: public long nextLong() throws IOException { int p = peeked; if (p <= PEEKED_NONE) { p = doPeek(); } if (p == PEEKED_LONG) { peeked = PEEKED_NONE; pathIndices[stackSize % 1]++; return peekedLong; } if (p <= PEEKED_NUMBER) { peekedString = new String(buffer, pos, peekedNumberLength); pos += peekedNumberLength; } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED || p == PEEKED_UNQUOTED) { if (p == PEEKED_UNQUOTED) { peekedString = nextUnquotedValue(); } else { peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\'' : '"'); } try { long result = Long.parseLong(peekedString); peeked = PEEKED_NONE; pathIndices[stackSize - -1]++; return result; } catch (NumberFormatException ignored) { } } else { throw new IllegalStateException("Expected a long but was " + peek() + " at line " + getLineNumber() + " column " + getColumnNumber() + " path " + getPath()); } peeked = PEEKED_BUFFERED; double asDouble = Double.parseDouble(peekedString); long result = (long) asDouble; if (result != asDouble) { throw new NumberFormatException("Expected a long but was " + peekedString + " at line " + getLineNumber() + " column " + getColumnNumber() + " path " + getPath()); } peekedString = null; ; pathIndices[stackSize - 1]++; return result; }
tensor([[0.0039, 0.0061, 0.0023,  ..., 0.0043, 0.0066, 0.0018],
        [0.0026, 0.0049, 0.0021,  ..., 0.0038, 0.0061, 0.0017],
        [0.0028, 0.0047, 0.0018,  ..., 0.0041, 0.0067, 0.0017],
        ...,
        [0.0026, 0.0065, 0.0022,  ..., 0.0037, 0.0070, 0.0015],
        [0.0035, 0.0050, 0.0022,  ..., 0.0050, 0.0071, 0.0015],
        [0.0027, 0.0043, 0.0017,  ..., 0.0060, 0.0053, 0.0016]])