101089
Test: public void test0141() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0141"); org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField1 = gJChronology0.yearOfCentury(); org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology0); int int3 = dateTime2.getEra(); int int4 = dateTime2.getMillisOfSecond(); org.joda.time.DateTime.Property property5 = dateTime2.year(); org.joda.time.ReadableDuration readableDuration6 = null; org.joda.time.DateTime dateTime7 = dateTime2.plus(readableDuration6); int int8 = dateTime7.getMillisOfDay(); org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay(); int int10 = dateTime7.get(dateTimeFieldType9); org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.eras(); org.joda.time.field.UnsupportedDurationField unsupportedDurationField12 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType11); org.joda.time.field.PreciseDurationField preciseDurationField14 = new org.joda.time.field.PreciseDurationField(durationFieldType11, 0L); long long15 = preciseDurationField14.getUnitMillis(); org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField16 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType9, (org.joda.time.DurationField) preciseDurationField14); org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean19 = iSOChronology17.equals((java.lang.Object) iSOChronology18); org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField22 = gJChronology21.yearOfCentury(); org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology21); org.joda.time.DurationField durationField24 = gJChronology21.eras(); org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology21); int[] intArray27 = iSOChronology18.get((org.joda.time.ReadablePartial) localDate25, (-1123200000L)); org.joda.time.LocalDate localDate29 = localDate25.minusDays(100); org.joda.time.LocalDate localDate31 = localDate29.withYearOfCentury(9); int int32 = localDate29.getDayOfMonth(); org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField36 = gJChronology35.yearOfCentury(); org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology35); org.joda.time.DurationField durationField38 = gJChronology35.eras(); org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology35); org.joda.time.ReadablePeriod readablePeriod40 = null; org.joda.time.LocalDate localDate42 = localDate39.withPeriodAdded(readablePeriod40, (-28800000)); org.joda.time.LocalDate.Property property43 = localDate39.dayOfMonth(); int[] intArray44 = localDate39.getValues(); java.util.Locale locale46 = null; try { int[] intArray47 = unsupportedDateTimeField16.set((org.joda.time.ReadablePartial) localDate29, 51, intArray44, "PST", locale46); } catch (java.lang.UnsupportedOperationException e) { } }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone)); if (cutoverDate.getYear() <= 0) { throw new IllegalArgumentException("Cutover too early. Must be on or after 0001-01-01."); } } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0047, 0.0152, 0.0087,  ..., 0.0052, 0.0273, 0.0021],
        [0.0049, 0.0137, 0.0096,  ..., 0.0047, 0.0174, 0.0025],
        [0.0042, 0.0178, 0.0092,  ..., 0.0055, 0.0235, 0.0017],
        ...,
        [0.0030, 0.0148, 0.0096,  ..., 0.0042, 0.0273, 0.0017],
        [0.0040, 0.0147, 0.0094,  ..., 0.0047, 0.0236, 0.0020],
        [0.0034, 0.0141, 0.0105,  ..., 0.0073, 0.0177, 0.0018]])