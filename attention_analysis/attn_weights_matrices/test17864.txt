17864
Test: public void testMayBeString() { }
Code: static boolean mayBeString(Node n, boolean recurse) { if (recurse) { return allResultsMatch(n, MAY_BE_STRING_PREDICATE); } else { return mayBeStringHelper(n); } }
tensor([[0.0923, 0.1061, 0.0313, 0.0702, 0.1061, 0.0146, 0.0613, 0.0943, 0.0384,
         0.0613, 0.0329, 0.0084, 0.0169, 0.0166, 0.0472, 0.0613, 0.0329, 0.0747,
         0.0166, 0.0166],
        [0.0886, 0.1261, 0.0254, 0.0649, 0.1261, 0.0120, 0.0578, 0.0876, 0.0361,
         0.0578, 0.0387, 0.0043, 0.0111, 0.0109, 0.0521, 0.0578, 0.0387, 0.0823,
         0.0109, 0.0109],
        [0.0913, 0.1008, 0.0293, 0.0605, 0.1008, 0.0185, 0.0547, 0.1041, 0.0470,
         0.0547, 0.0489, 0.0067, 0.0134, 0.0085, 0.0563, 0.0547, 0.0489, 0.0838,
         0.0085, 0.0085],
        [0.0964, 0.1024, 0.0270, 0.0962, 0.1024, 0.0141, 0.0589, 0.0839, 0.0374,
         0.0589, 0.0381, 0.0065, 0.0137, 0.0128, 0.0477, 0.0589, 0.0381, 0.0810,
         0.0128, 0.0128],
        [0.0886, 0.1261, 0.0254, 0.0649, 0.1261, 0.0120, 0.0578, 0.0876, 0.0361,
         0.0578, 0.0387, 0.0043, 0.0111, 0.0109, 0.0521, 0.0578, 0.0387, 0.0823,
         0.0109, 0.0109],
        [0.0962, 0.1203, 0.0237, 0.0560, 0.1203, 0.0126, 0.0586, 0.0864, 0.0391,
         0.0586, 0.0363, 0.0047, 0.0131, 0.0095, 0.0604, 0.0586, 0.0363, 0.0903,
         0.0095, 0.0095],
        [0.0863, 0.0844, 0.0374, 0.0798, 0.0844, 0.0216, 0.0580, 0.0644, 0.0494,
         0.0580, 0.0431, 0.0153, 0.0208, 0.0208, 0.0625, 0.0580, 0.0431, 0.0710,
         0.0208, 0.0208],
        [0.1275, 0.1091, 0.0245, 0.0801, 0.1091, 0.0080, 0.0452, 0.1091, 0.0298,
         0.0452, 0.0254, 0.0026, 0.0092, 0.0067, 0.0678, 0.0452, 0.0254, 0.1165,
         0.0067, 0.0067],
        [0.0915, 0.1016, 0.0354, 0.0675, 0.1016, 0.0226, 0.0549, 0.0693, 0.0471,
         0.0549, 0.0422, 0.0110, 0.0215, 0.0192, 0.0474, 0.0549, 0.0422, 0.0767,
         0.0192, 0.0192],
        [0.0863, 0.0844, 0.0374, 0.0798, 0.0844, 0.0216, 0.0580, 0.0644, 0.0494,
         0.0580, 0.0431, 0.0153, 0.0208, 0.0208, 0.0625, 0.0580, 0.0431, 0.0710,
         0.0208, 0.0208],
        [0.1086, 0.1065, 0.0271, 0.0799, 0.1065, 0.0116, 0.0469, 0.0903, 0.0406,
         0.0469, 0.0319, 0.0053, 0.0128, 0.0127, 0.0638, 0.0469, 0.0319, 0.1045,
         0.0127, 0.0127],
        [0.1208, 0.0929, 0.0320, 0.0725, 0.0929, 0.0122, 0.0553, 0.0825, 0.0383,
         0.0553, 0.0354, 0.0071, 0.0141, 0.0135, 0.0629, 0.0553, 0.0354, 0.0946,
         0.0135, 0.0135],
        [0.1030, 0.0889, 0.0309, 0.0734, 0.0889, 0.0119, 0.0609, 0.1071, 0.0360,
         0.0609, 0.0405, 0.0071, 0.0137, 0.0121, 0.0514, 0.0609, 0.0405, 0.0874,
         0.0121, 0.0121],
        [0.0994, 0.0892, 0.0294, 0.0701, 0.0892, 0.0152, 0.0593, 0.0948, 0.0446,
         0.0593, 0.0529, 0.0080, 0.0130, 0.0130, 0.0616, 0.0593, 0.0529, 0.0629,
         0.0130, 0.0130],
        [0.0898, 0.1062, 0.0360, 0.0825, 0.1062, 0.0114, 0.0524, 0.0857, 0.0400,
         0.0524, 0.0366, 0.0066, 0.0152, 0.0109, 0.0549, 0.0524, 0.0366, 0.1025,
         0.0109, 0.0109],
        [0.0863, 0.0844, 0.0374, 0.0798, 0.0844, 0.0216, 0.0580, 0.0644, 0.0494,
         0.0580, 0.0431, 0.0153, 0.0208, 0.0208, 0.0625, 0.0580, 0.0431, 0.0710,
         0.0208, 0.0208],
        [0.1086, 0.1065, 0.0271, 0.0799, 0.1065, 0.0116, 0.0469, 0.0903, 0.0406,
         0.0469, 0.0319, 0.0053, 0.0128, 0.0127, 0.0638, 0.0469, 0.0319, 0.1045,
         0.0127, 0.0127],
        [0.1230, 0.1094, 0.0283, 0.0901, 0.1094, 0.0126, 0.0537, 0.1106, 0.0321,
         0.0537, 0.0313, 0.0059, 0.0113, 0.0089, 0.0331, 0.0537, 0.0313, 0.0841,
         0.0089, 0.0089],
        [0.0994, 0.0892, 0.0294, 0.0701, 0.0892, 0.0152, 0.0593, 0.0948, 0.0446,
         0.0593, 0.0529, 0.0080, 0.0130, 0.0130, 0.0616, 0.0593, 0.0529, 0.0629,
         0.0130, 0.0130],
        [0.0994, 0.0892, 0.0294, 0.0701, 0.0892, 0.0152, 0.0593, 0.0948, 0.0446,
         0.0593, 0.0529, 0.0080, 0.0130, 0.0130, 0.0616, 0.0593, 0.0529, 0.0629,
         0.0130, 0.0130]])