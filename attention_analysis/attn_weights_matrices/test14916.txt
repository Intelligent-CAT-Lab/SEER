14916
Test: public void testLs() { CommandLineParser parser = new PosixParser(); Options options = new Options(); options.addOption( "a", "all", false, "do not hide entries starting with ." ); options.addOption( "A", "almost-all", false, "do not list implied . and .." ); options.addOption( "b", "escape", false, "print octal escapes for nongraphic characters" ); options.addOption( OptionBuilder.withLongOpt( "block-size" ) .withDescription( "use SIZE-byte blocks" ) .withValueSeparator( '=' ) .hasArg() .create() ); options.addOption( "B", "ignore-backups", false, "do not list implied entried ending with ~"); options.addOption( "c", false, "with -lt: sort by, and show, ctime (time of last modification of file status information) with -l:show ctime and sort by name otherwise: sort by ctime" ); options.addOption( "C", false, "list entries by columns" ); String[] args = new String[]{ "--block-size=10" }; try { CommandLine line = parser.parse( options, args ); } catch( ParseException exp ) { fail( "Unexpected exception:" + exp.getMessage() ); } }
Code: public boolean hasOption(String opt) { return options.containsKey(opt); }
[[0.09772299 0.25547987 0.2393252  0.06327522 0.1184388  0.10608274
 0.08063398 0.03904117]
[0.06355085 0.38388523 0.23391248 0.03031702 0.12517138 0.09414276
 0.04411858 0.02490161]
[0.08653647 0.30284053 0.22361985 0.04750511 0.12716684 0.10663909
 0.06132951 0.04436259]
[0.08554891 0.31428218 0.19794044 0.04781106 0.12243345 0.11759306
 0.07873946 0.03565144]
[0.10480779 0.2536438  0.17375545 0.05144835 0.14964607 0.12308465
 0.08783992 0.05577397]
[0.06306262 0.37232313 0.23386201 0.03534891 0.11024827 0.09379498
 0.0604848  0.0308752 ]
[0.09656935 0.28337482 0.22306122 0.04410374 0.14308646 0.10248393
 0.07243773 0.03488278]
[0.07188375 0.27625504 0.22263415 0.03876271 0.14190997 0.14461662
 0.07133517 0.0326025 ]]