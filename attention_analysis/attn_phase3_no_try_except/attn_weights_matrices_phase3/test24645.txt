24645
Test: public void test114() throws Throwable { Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer()); doReturn(false, false, false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble()); doReturn(6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586).when(precision_DoubleEquivalence0).signum(anyDouble()); AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0); CutAngle cutAngle0 = angularInterval0.getMinBoundary(); angularInterval0.split(cutAngle0); }
Code: public Split<RegionBSPTree1S> split(final Hyperplane<Point1S> splitter) { return toTree().split(splitter); }
[[0.09340772 0.12957475 0.12957475 0.12957475 0.12957475 0.11827043
 0.10202347 0.12957475 0.03842464]
[0.07873975 0.13079739 0.13079739 0.13079739 0.13079739 0.12826915
 0.09565898 0.13079739 0.04334518]
[0.07873975 0.13079739 0.13079739 0.13079739 0.13079739 0.12826915
 0.09565898 0.13079739 0.04334518]
[0.07873975 0.13079739 0.13079739 0.13079739 0.13079739 0.12826915
 0.09565898 0.13079739 0.04334518]
[0.07873975 0.13079739 0.13079739 0.13079739 0.13079739 0.12826915
 0.09565898 0.13079739 0.04334518]
[0.09264312 0.1184765  0.1184765  0.1184765  0.1184765  0.15543112
 0.10577285 0.1184765  0.05377046]
[0.06665799 0.13503163 0.13503163 0.13503163 0.13503163 0.1259206
 0.09753168 0.13503163 0.03473158]
[0.07873975 0.13079739 0.13079739 0.13079739 0.13079739 0.12826915
 0.09565898 0.13079739 0.04334518]
[0.06337097 0.11623432 0.11623432 0.11623432 0.11623432 0.17600949
 0.14220542 0.11623432 0.03724254]]