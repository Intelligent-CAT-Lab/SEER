69152
Test: public void test580() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test580"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("*"); boolean boolean2 = tag1.isKnownTag(); boolean boolean3 = tag1.isData(); boolean boolean4 = tag1.isFormListed(); boolean boolean5 = tag1.isFormListed(); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parseBodyFragment(""); org.jsoup.nodes.Element element10 = document8.html("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode11 = null; org.jsoup.nodes.Document document12 = document8.quirksMode(quirksMode11); org.jsoup.nodes.Document document13 = document8.normalise(); org.jsoup.select.Elements elements15 = document13.getElementsMatchingOwnText(""); java.lang.String str17 = document13.absUrl("#root"); org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parseBodyFragment(""); org.jsoup.nodes.Element element21 = document19.html("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode22 = null; org.jsoup.nodes.Document document23 = document19.quirksMode(quirksMode22); org.jsoup.nodes.Document document24 = document19.normalise(); org.jsoup.nodes.Element element26 = document19.prependText("#root"); org.jsoup.nodes.Node node27 = document13.doClone((org.jsoup.nodes.Node) element26); org.jsoup.nodes.Attributes attributes28 = document13.attributes(); java.lang.StringBuilder stringBuilder29 = null; org.jsoup.nodes.Comment comment33 = new org.jsoup.nodes.Comment("#root", ""); comment33.setSiblingIndex((int) (short) 0); java.lang.StringBuilder stringBuilder36 = null; org.jsoup.nodes.Document document40 = org.jsoup.Jsoup.parseBodyFragment(""); org.jsoup.nodes.Element element42 = document40.html("hi!"); org.jsoup.nodes.Document.QuirksMode quirksMode43 = null; org.jsoup.nodes.Document document44 = document40.quirksMode(quirksMode43); org.jsoup.nodes.Document document45 = document40.normalise(); org.jsoup.select.Elements elements47 = document45.getElementsMatchingOwnText(""); org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings(); org.jsoup.nodes.Document document49 = document45.outputSettings(outputSettings48); java.lang.String str50 = org.jsoup.nodes.Entities.escape("data-", outputSettings48); comment33.outerHtmlTail(stringBuilder36, (int) (short) -1, outputSettings48); org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings48.prettyPrint(false); java.lang.String str54 = org.jsoup.nodes.Entities.escape(".", outputSettings48); attributes28.html(stringBuilder29, outputSettings48); org.jsoup.nodes.FormElement formElement56 = new org.jsoup.nodes.FormElement(tag1, " :last-of-type", attributes28); org.jsoup.nodes.Node node58 = formElement56.removeAttr("[#document=hi!]"); }
Code: static void escape(StringBuilder accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) { boolean lastWasWhite = false; boolean reachedNonWhite = false; final EscapeMode escapeMode = out.escapeMode(); final CharsetEncoder encoder = out.encoder(); final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name()); final Map<Character, String> map = escapeMode.getMap(); final int length = string.length(); int codePoint; for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) { codePoint = string.codePointAt(offset); if (normaliseWhite) { if (StringUtil.isWhitespace(codePoint)) { if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite) continue; accum.append(' '); lastWasWhite = true; continue; } else { lastWasWhite = false; reachedNonWhite = true; } } if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { final char c = (char) codePoint; switch (c) { case '&': accum.append("&amp;"); break; case 0xA0: if (escapeMode != EscapeMode.xhtml) accum.append("&nbsp;"); else accum.append(c); break; case '<': if (!inAttribute) accum.append("&lt;"); else accum.append(c); break; case '>': if (!inAttribute) accum.append("&gt;"); else accum.append(c); break; case '"': if (inAttribute) accum.append("&quot;"); else accum.append(c); break; default: if (canEncode(coreCharset, c, encoder)) accum.append(c); else if (map.containsKey(c)) accum.append('&').append(map.get(c)).append(';'); else accum.append("&#x").append(Integer.toHexString(codePoint)).append(';'); } } else { final String c = new String(Character.toChars(codePoint)); if (encoder.canEncode(c)) accum.append(c); else accum.append("&#x").append(Integer.toHexString(codePoint)).append(';'); } } }
tensor([[0.0115, 0.0028, 0.0061,  ..., 0.0021, 0.0021, 0.0021],
        [0.0122, 0.0029, 0.0055,  ..., 0.0018, 0.0018, 0.0018],
        [0.0145, 0.0021, 0.0082,  ..., 0.0011, 0.0011, 0.0011],
        ...,
        [0.0124, 0.0027, 0.0066,  ..., 0.0016, 0.0016, 0.0016],
        [0.0124, 0.0027, 0.0066,  ..., 0.0016, 0.0016, 0.0016],
        [0.0124, 0.0027, 0.0066,  ..., 0.0016, 0.0016, 0.0016]])