67608
Test: public void test65() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test65"); com.fasterxml.jackson.databind.ser.std.SqlTimeSerializer sqlTimeSerializer0 = new com.fasterxml.jackson.databind.ser.std.SqlTimeSerializer(); java.text.DateFormat dateFormat2 = null; com.fasterxml.jackson.databind.ser.std.DateSerializer dateSerializer3 = new com.fasterxml.jackson.databind.ser.std.DateSerializer((java.lang.Boolean) true, dateFormat2); java.lang.Class<java.util.Date> dateClass4 = dateSerializer3.handledType(); java.util.Date date5 = null; long long6 = dateSerializer3._timestamp(date5); com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer7 = sqlTimeSerializer0.withFilterId((java.lang.Object) date5); com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper8 = null; com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder stdTypeResolverBuilder9 = com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.noTypeInfoBuilder(); com.fasterxml.jackson.databind.DeserializationConfig deserializationConfig10 = null; com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer inetSocketAddressSerializer11 = new com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer(); java.lang.Class<java.net.InetSocketAddress> inetSocketAddressClass12 = inetSocketAddressSerializer11.handledType(); boolean boolean13 = com.fasterxml.jackson.databind.util.ClassUtil.isNonStaticInnerClass(inetSocketAddressClass12); com.fasterxml.jackson.databind.type.SimpleType simpleType14 = com.fasterxml.jackson.databind.type.SimpleType.construct(inetSocketAddressClass12); com.fasterxml.jackson.databind.jsontype.NamedType[] namedTypeArray15 = new com.fasterxml.jackson.databind.jsontype.NamedType[] {}; java.util.ArrayList<com.fasterxml.jackson.databind.jsontype.NamedType> namedTypeList16 = new java.util.ArrayList<com.fasterxml.jackson.databind.jsontype.NamedType>(); boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>) namedTypeList16, namedTypeArray15); com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer18 = stdTypeResolverBuilder9.buildTypeDeserializer(deserializationConfig10, (com.fasterxml.jackson.databind.JavaType) simpleType14, (java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>) namedTypeList16); sqlTimeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper8, (com.fasterxml.jackson.databind.JavaType) simpleType14); com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer20 = null; com.fasterxml.jackson.databind.JavaType javaType21 = null; com.fasterxml.jackson.databind.JavaType javaType22 = null; com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer untypedObjectDeserializer23 = new com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer(javaType21, javaType22); java.lang.Object obj24 = untypedObjectDeserializer23.getNullValue(); java.lang.Object obj25 = untypedObjectDeserializer23.getEmptyValue(); com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer atomicReferenceDeserializer26 = new com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer((com.fasterxml.jackson.databind.JavaType) simpleType14, typeDeserializer20, (com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>) untypedObjectDeserializer23); com.fasterxml.jackson.databind.ObjectMapper objectMapper27 = null; com.fasterxml.jackson.databind.MappingJsonFactory mappingJsonFactory28 = new com.fasterxml.jackson.databind.MappingJsonFactory(objectMapper27); com.fasterxml.jackson.databind.ser.DefaultSerializerProvider defaultSerializerProvider29 = null; com.fasterxml.jackson.databind.deser.DefaultDeserializationContext defaultDeserializationContext30 = null; com.fasterxml.jackson.databind.ObjectMapper objectMapper31 = new com.fasterxml.jackson.databind.ObjectMapper((com.fasterxml.jackson.core.JsonFactory) mappingJsonFactory28, defaultSerializerProvider29, defaultDeserializationContext30); com.fasterxml.jackson.databind.MapperFeature[] mapperFeatureArray32 = new com.fasterxml.jackson.databind.MapperFeature[] {}; com.fasterxml.jackson.databind.ObjectMapper objectMapper33 = objectMapper31.enable(mapperFeatureArray32); com.fasterxml.jackson.databind.node.JsonNodeFactory jsonNodeFactory35 = new com.fasterxml.jackson.databind.node.JsonNodeFactory(true); com.fasterxml.jackson.databind.ObjectMapper objectMapper36 = objectMapper33.setNodeFactory(jsonNodeFactory35); com.fasterxml.jackson.databind.DeserializationContext deserializationContext37 = objectMapper36.getDeserializationContext(); com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer inetSocketAddressSerializer38 = new com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer(); java.lang.Class<java.net.InetSocketAddress> inetSocketAddressClass39 = inetSocketAddressSerializer38.handledType(); com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer stdKeyDeserializer40 = com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer.forType(inetSocketAddressClass39); boolean boolean41 = com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(inetSocketAddressClass39); java.lang.Class<?> wildcardClass42 = com.fasterxml.jackson.databind.util.ClassUtil.getEnclosingClass(inetSocketAddressClass39); java.lang.Class<?> wildcardClass43 = com.fasterxml.jackson.databind.util.ClassUtil.getOuterClass(inetSocketAddressClass39); java.lang.String str44 = com.fasterxml.jackson.databind.util.ClassUtil.getPackageName(inetSocketAddressClass39); com.fasterxml.jackson.databind.JsonMappingException jsonMappingException46 = deserializationContext37.instantiationException(inetSocketAddressClass39, "hi!"); com.fasterxml.jackson.databind.BeanProperty beanProperty47 = null; com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer48 = atomicReferenceDeserializer26.createContextual(deserializationContext37, beanProperty47); com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig deserializerFactoryConfig49 = null; com.fasterxml.jackson.databind.deser.BeanDeserializerFactory beanDeserializerFactory50 = new com.fasterxml.jackson.databind.deser.BeanDeserializerFactory(deserializerFactoryConfig49); com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.Impl impl51 = new com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.Impl((com.fasterxml.jackson.databind.deser.DeserializerFactory) beanDeserializerFactory50); com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig deserializerFactoryConfig52 = null; com.fasterxml.jackson.databind.deser.BeanDeserializerFactory beanDeserializerFactory53 = new com.fasterxml.jackson.databind.deser.BeanDeserializerFactory(deserializerFactoryConfig52); com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.Impl impl54 = new com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.Impl((com.fasterxml.jackson.databind.deser.DeserializerFactory) beanDeserializerFactory53); com.fasterxml.jackson.databind.deser.DefaultDeserializationContext defaultDeserializationContext55 = impl51.with((com.fasterxml.jackson.databind.deser.DeserializerFactory) beanDeserializerFactory53); com.fasterxml.jackson.databind.cfg.MapperConfig<?> wildcardMapperConfig56 = defaultDeserializationContext55.getConfig(); com.fasterxml.jackson.databind.JsonMappingException jsonMappingException58 = defaultDeserializationContext55.mappingException("java.net.InetSocketAddress"); com.fasterxml.jackson.databind.BeanProperty beanProperty59 = null; com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer60 = atomicReferenceDeserializer26.createContextual((com.fasterxml.jackson.databind.DeserializationContext) defaultDeserializationContext55, beanProperty59); com.fasterxml.jackson.databind.cfg.MapperConfig<?> wildcardMapperConfig61 = defaultDeserializationContext55.getConfig(); java.util.Date date62 = null; try { java.util.Calendar calendar63 = defaultDeserializationContext55.constructCalendar(date62); } catch (java.lang.NullPointerException e) { } }
Code: public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException { if (false) { return this; } JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (false) { return this; } JsonFormat.Shape shape = format.getShape(); if (true) { return withFormat(Boolean.TRUE, null); } if (format.hasPattern()) { final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc); TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone(); df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } final boolean hasLocale = format.hasLocale(); final boolean hasTZ = format.hasTimeZone(); final boolean asString = (shape == JsonFormat.Shape.STRING); if (!hasLocale && !asString) { return this; } DateFormat df0 = serializers.getConfig().getDateFormat(); if (df0 instanceof StdDateFormat) { StdDateFormat std = (StdDateFormat) df0; if (format.hasLocale()) { std = std.withLocale(format.getLocale()); } if (format.hasTimeZone()) { std = std.withTimeZone(format.getTimeZone()); } return withFormat(Boolean.FALSE, std); } if (!(df0 instanceof SimpleDateFormat)) { serializers.reportMappingProblem("Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`",df0.getClass().getName()); } SimpleDateFormat df = (SimpleDateFormat) df0; if (hasLocale) { df = new SimpleDateFormat(df.toPattern(), format.getLocale()); } else { ; } TimeZone newTz = format.getTimeZone(); boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone()); if (changeTZ) { df.setTimeZone(newTz); } return withFormat(Boolean.FALSE, df); }
tensor([[0.0039, 0.0169, 0.0023,  ..., 0.0058, 0.0074, 0.0018],
        [0.0038, 0.0175, 0.0024,  ..., 0.0046, 0.0060, 0.0021],
        [0.0032, 0.0251, 0.0024,  ..., 0.0049, 0.0061, 0.0016],
        ...,
        [0.0041, 0.0170, 0.0031,  ..., 0.0052, 0.0071, 0.0020],
        [0.0048, 0.0137, 0.0033,  ..., 0.0062, 0.0064, 0.0022],
        [0.0028, 0.0185, 0.0027,  ..., 0.0055, 0.0079, 0.0016]])