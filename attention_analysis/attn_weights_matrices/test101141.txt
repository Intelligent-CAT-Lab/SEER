101141
Test: public void test0378() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0378"); org.joda.time.chrono.BasicChronology basicChronology0 = null; org.joda.time.chrono.GJChronology gJChronology1 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField2 = gJChronology1.yearOfCentury(); org.joda.time.DateTimeField dateTimeField3 = gJChronology1.yearOfEra(); org.joda.time.DurationField durationField4 = gJChronology1.hours(); long long7 = durationField4.getMillis((long) (byte) 100, (long) 100); org.joda.time.chrono.BasicDayOfYearDateTimeField basicDayOfYearDateTimeField8 = new org.joda.time.chrono.BasicDayOfYearDateTimeField(basicChronology0, durationField4); long long10 = basicDayOfYearDateTimeField8.roundFloor((long) (-28800000)); org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean13 = iSOChronology11.equals((java.lang.Object) iSOChronology12); org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField16 = gJChronology15.yearOfCentury(); org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology15); org.joda.time.DurationField durationField18 = gJChronology15.eras(); org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology15); int[] intArray21 = iSOChronology12.get((org.joda.time.ReadablePartial) localDate19, (-1123200000L)); org.joda.time.LocalDate localDate23 = localDate19.minusDays(100); org.joda.time.DateTimeZone dateTimeZone24 = null; org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeUtils.getZone(dateTimeZone24); org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (short) -1); org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField29 = gJChronology28.yearOfCentury(); org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology28); int int31 = dateTime30.getEra(); int int32 = dateTime30.getYear(); boolean boolean33 = instant27.isBefore((org.joda.time.ReadableInstant) dateTime30); org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, (org.joda.time.ReadableInstant) instant27); java.lang.Object obj35 = null; boolean boolean36 = dateTimeZone25.equals(obj35); org.joda.time.DateTime dateTime37 = localDate19.toDateTimeAtCurrentTime(dateTimeZone25); try { int int38 = basicDayOfYearDateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localDate19); } catch (java.lang.NullPointerException e) { } }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone)); if (cutoverDate.getYear() <= 0) { throw new IllegalArgumentException("Cutover too early. Must be on or after 0001-01-01."); } } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0047, 0.0152, 0.0087,  ..., 0.0052, 0.0273, 0.0021],
        [0.0049, 0.0137, 0.0096,  ..., 0.0047, 0.0174, 0.0025],
        [0.0042, 0.0178, 0.0092,  ..., 0.0055, 0.0235, 0.0017],
        ...,
        [0.0030, 0.0148, 0.0096,  ..., 0.0042, 0.0273, 0.0017],
        [0.0040, 0.0147, 0.0094,  ..., 0.0047, 0.0236, 0.0020],
        [0.0034, 0.0141, 0.0105,  ..., 0.0073, 0.0177, 0.0018]])