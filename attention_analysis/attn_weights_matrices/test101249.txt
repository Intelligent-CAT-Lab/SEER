101249
Test: public void test121() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test121"); org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance(); org.joda.time.DateTimeField dateTimeField1 = gJChronology0.minuteOfHour(); org.joda.time.DateTimeField dateTimeField2 = gJChronology0.hourOfDay(); org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) gJChronology0); org.joda.time.DateTimeField dateTimeField4 = gJChronology0.hourOfHalfday(); org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.dayOfMonth(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField7 = new org.joda.time.field.OffsetDateTimeField(dateTimeField4, dateTimeFieldType5, 100); org.joda.time.Partial partial9 = new org.joda.time.Partial(dateTimeFieldType5, 23); org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(); org.joda.time.DateTimeField dateTimeField11 = gJChronology10.yearOfEra(); int int13 = dateTimeField11.getMinimumValue(0L); org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyearOfCentury(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField16 = new org.joda.time.field.OffsetDateTimeField(dateTimeField11, dateTimeFieldType14, (int) (short) 10); long long18 = offsetDateTimeField16.roundCeiling(1L); org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(); org.joda.time.DateTimeField dateTimeField20 = gJChronology19.minuteOfHour(); org.joda.time.DateTimeField dateTimeField21 = gJChronology19.hourOfDay(); org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) gJChronology19); org.joda.time.DateTimeField dateTimeField23 = gJChronology19.weekyearOfCentury(); org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) long18, (org.joda.time.Chronology) gJChronology19); org.joda.time.DateTimeField dateTimeField25 = gJChronology19.yearOfCentury(); org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(); org.joda.time.DateTimeField dateTimeField27 = gJChronology26.minuteOfHour(); org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(); org.joda.time.DateTimeField dateTimeField29 = gJChronology28.yearOfEra(); int int31 = dateTimeField29.getMinimumValue(0L); org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekyearOfCentury(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField34 = new org.joda.time.field.OffsetDateTimeField(dateTimeField29, dateTimeFieldType32, (int) (short) 10); org.joda.time.DurationField durationField35 = offsetDateTimeField34.getRangeDurationField(); long long38 = offsetDateTimeField34.add((-31535999990L), (long) (byte) 0); org.joda.time.field.SkipDateTimeField skipDateTimeField39 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) gJChronology26, (org.joda.time.DateTimeField) offsetDateTimeField34); org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(); org.joda.time.DateTime dateTime41 = localDate40.toDateTimeAtCurrentTime(); int[] intArray42 = localDate40.getValues(); long long44 = gJChronology26.set((org.joda.time.ReadablePartial) localDate40, (long) 2021); org.joda.time.DateTimeFieldType dateTimeFieldType46 = localDate40.getFieldType(0); org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField47 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField25, dateTimeFieldType46); try { org.joda.time.Partial partial49 = partial9.withField(dateTimeFieldType46, 0); } catch (java.lang.IllegalArgumentException e) { } }
Code: public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) { super(); chronology = DateTimeUtils.getChronology(chronology).withUTC(); iChronology = chronology; if (types == null) { throw new IllegalArgumentException("Types array must not be null"); } if (values == null) { throw new IllegalArgumentException("Values array must not be null"); } if (values.length != types.length) { throw new IllegalArgumentException("Values array must be the same length as the types array"); } if (types.length == 0) { iTypes = types; iValues = values; return; } for (int i = 0; i < types.length; i++) { if (types[i] == null) { throw new IllegalArgumentException("Types array must not contain null: index " + i); } } DurationField lastUnitField = null; for (int i = 0; i < types.length; i++) { DateTimeFieldType loopType = types[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (i > 0) { int compare = lastUnitField.compareTo(loopUnitField); if (compare < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } else if (compare == 0) { if (types[i - 1].getRangeDurationType() == null) { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } else { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (lastRangeField.compareTo(loopRangeField) < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } if (lastRangeField.compareTo(loopRangeField) == 0) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } } } lastUnitField = loopUnitField; } iTypes = (DateTimeFieldType[]) types.clone(); chronology.validate(this, values); iValues = (int[]) values.clone(); }
tensor([[0.0024, 0.0017, 0.0024,  ..., 0.0011, 0.0015, 0.0011],
        [0.0019, 0.0016, 0.0023,  ..., 0.0010, 0.0014, 0.0008],
        [0.0016, 0.0015, 0.0024,  ..., 0.0011, 0.0010, 0.0007],
        ...,
        [0.0019, 0.0018, 0.0023,  ..., 0.0012, 0.0012, 0.0011],
        [0.0018, 0.0013, 0.0024,  ..., 0.0015, 0.0013, 0.0010],
        [0.0017, 0.0015, 0.0022,  ..., 0.0013, 0.0014, 0.0009]])