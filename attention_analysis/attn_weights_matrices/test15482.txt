15482
Test: public void test126() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test126"); org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser(); posixParser0.burstToken("", true); org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "hi!", true, ""); org.apache.commons.cli.MissingArgumentException missingArgumentException10 = new org.apache.commons.cli.MissingArgumentException(option9); org.apache.commons.cli.Option option11 = missingArgumentException10.getOption(); org.apache.commons.cli.Option option12 = missingArgumentException10.getOption(); org.apache.commons.cli.PosixParser posixParser13 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine14 = null; posixParser13.cmd = commandLine14; org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Options options21 = options16.addOption("", "hi!", false, "org.apache.commons.cli.MissingArgumentException: Missing argument for option: "); java.util.List list22 = options16.getRequiredOptions(); java.util.Collection collection23 = options16.getOptionGroups(); org.apache.commons.cli.Option option26 = new org.apache.commons.cli.Option("", ""); java.lang.String[] strArray27 = option26.getValues(); org.apache.commons.cli.OptionGroup optionGroup28 = options16.getOptionGroup(option26); boolean boolean30 = options16.hasShortOption("[ Options: [ short {=[ option: hi! :: org.apache.commons.cli.MissingArgumentException: Missing argument for option: ]} ] [ long {hi!=[ option: hi! :: org.apache.commons.cli.MissingArgumentException: Missing argument for option: ]} ]"); java.lang.String[] strArray35 = new java.lang.String[] { "org.apache.commons.cli.ParseException: ", "arg", "arg", "" }; org.apache.commons.cli.CommandLine commandLine37 = posixParser13.parse(options16, strArray35, false); org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options(); java.lang.String[] strArray40 = new java.lang.String[] { "" }; org.apache.commons.cli.CommandLine commandLine41 = posixParser13.parse(options38, strArray40); boolean boolean42 = option12.equals((java.lang.Object) strArray40); java.util.Properties properties43 = null; org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options4, strArray40, properties43, false); java.util.Properties properties46 = null; posixParser0.processProperties(properties46); org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Options options53 = options48.addOption("", "hi!", false, "org.apache.commons.cli.MissingArgumentException: Missing argument for option: "); java.util.List list54 = options48.getRequiredOptions(); java.util.List list56 = options48.getMatchingOptions("[ option: hi! [ARG] :: ]"); org.apache.commons.cli.PosixParser posixParser57 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine58 = null; posixParser57.cmd = commandLine58; org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options(); java.util.List list61 = options60.getRequiredOptions(); java.lang.String[] strArray63 = new java.lang.String[] { "[ Options: [ short {=[ option: hi! :: org.apache.commons.cli.MissingArgumentException: Missing argument for option: ]} ] [ long {hi!=[ option: hi! :: org.apache.commons.cli.MissingArgumentException: Missing argument for option: ]} ]" }; java.lang.String[] strArray65 = posixParser57.flatten(options60, strArray63, true); org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Options options71 = options66.addOption("", "hi!", false, "org.apache.commons.cli.MissingArgumentException: Missing argument for option: "); org.apache.commons.cli.PosixParser posixParser72 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine73 = null; posixParser72.cmd = commandLine73; org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options(); java.util.List list76 = options75.getRequiredOptions(); java.lang.String[] strArray78 = new java.lang.String[] { "[ Options: [ short {=[ option: hi! :: org.apache.commons.cli.MissingArgumentException: Missing argument for option: ]} ] [ long {hi!=[ option: hi! :: org.apache.commons.cli.MissingArgumentException: Missing argument for option: ]} ]" }; java.lang.String[] strArray80 = posixParser72.flatten(options75, strArray78, true); java.lang.String[] strArray82 = posixParser57.flatten(options71, strArray80, false); org.apache.commons.cli.CommandLine commandLine83 = posixParser0.parse(options48, strArray82); org.apache.commons.cli.OptionGroup optionGroup84 = null; try { org.apache.commons.cli.Options options85 = options48.addOptionGroup(optionGroup84); } catch (java.lang.NullPointerException e) { } }
Code: protected void processProperties(Properties properties) { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option); String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) { } } } else if (!("yes".equalsIgnoreCase(value) || "true".equalsIgnoreCase(value) || "1".equalsIgnoreCase(value))) { break; } cmd.addOption(opt); } } }
tensor([[0.0188, 0.0071, 0.0323,  ..., 0.0031, 0.0031, 0.0031],
        [0.0224, 0.0068, 0.0350,  ..., 0.0039, 0.0039, 0.0039],
        [0.0184, 0.0066, 0.0292,  ..., 0.0038, 0.0038, 0.0038],
        ...,
        [0.0178, 0.0065, 0.0373,  ..., 0.0035, 0.0035, 0.0035],
        [0.0178, 0.0065, 0.0373,  ..., 0.0035, 0.0035, 0.0035],
        [0.0178, 0.0065, 0.0373,  ..., 0.0035, 0.0035, 0.0035]])