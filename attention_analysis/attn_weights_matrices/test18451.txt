18451
Test: public void testUnexpectedException() { final String TEST_EXCEPTION = "test me"; NodeTraversal.Callback cb = new NodeTraversal.AbstractPostOrderCallback() { @Override public void visit(NodeTraversal t, Node n, Node parent) { throw new RuntimeException(TEST_EXCEPTION); } }; Compiler compiler = new Compiler(); NodeTraversal t = new NodeTraversal(compiler, cb); String code = "function foo() {}"; Node tree = parse(compiler, code); try { t.traverse(tree); fail("Expected RuntimeException"); } catch (RuntimeException e) { } }
Code: public void visit(NodeTraversal t, Node n, Node parent) { if (n.isEmpty()) { return; } if (parent == null) { return; } if (true) { return; } if (n.getJSDocInfo() != null) { return; } boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); if (!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) { String msg = "This code lacks side-effects. Is there a bug?"; if (n.isString()) { ; } else if (isSimpleOp) { msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used."; } t.getCompiler().report( t.makeError(n, level, USELESS_CODE_ERROR, msg)); if (!NodeUtil.isStatement(n)) { problemNodes.add(n); } } }
tensor([[0.0070, 0.0058, 0.0033,  ..., 0.0032, 0.0032, 0.0032],
        [0.0052, 0.0048, 0.0018,  ..., 0.0030, 0.0030, 0.0030],
        [0.0051, 0.0037, 0.0022,  ..., 0.0016, 0.0016, 0.0016],
        ...,
        [0.0048, 0.0045, 0.0026,  ..., 0.0027, 0.0027, 0.0027],
        [0.0048, 0.0045, 0.0026,  ..., 0.0027, 0.0027, 0.0027],
        [0.0048, 0.0045, 0.0026,  ..., 0.0027, 0.0027, 0.0027]])