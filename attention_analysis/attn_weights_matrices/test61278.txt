61278
Test: public void test0677() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0677"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withNullString("hi!"); cSVFormat2.validate(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withCommentStart('\037'); boolean boolean8 = cSVFormat7.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat7.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat10.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat10.withQuoteChar('4'); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat10.withSkipHeaderRecord(true); java.lang.String str19 = cSVFormat10.toString(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat10.withDelimiter('\t'); org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat22.validate(); org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat24.validate(); org.apache.commons.csv.Quote quote26 = null; org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat24.withQuotePolicy(quote26); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withEscape((java.lang.Character) 'a'); java.lang.Object[] objArray31 = new java.lang.Object[] { 'a', (byte) 0 }; java.lang.String str32 = cSVFormat22.format(objArray31); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat22.withNullString("\r\n"); java.lang.Character char35 = cSVFormat22.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat36.validate(); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat36.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat40.validate(); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat40.withIgnoreEmptyLines(true); java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat40.withHeader(strArray46); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat36.withHeader(strArray46); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat22.withHeader(strArray46); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat21.withHeader(strArray46); }
Code: public String toString(){final StringBuilder sb = new StringBuilder();sb.append("Delimiter=<").append(delimiter).append('>');if (isEscaping()) {sb.append(' ');sb.append("Escape=<").append(escape).append('>');}if (isQuoting()) {sb.append(' ');;}if (isCommentingEnabled()) {sb.append(' ');sb.append("CommentStart=<").append(commentStart).append('>');}if (isNullHandling()) {sb.append(' ');;}if(recordSeparator != null) {sb.append(' ');sb.append("RecordSeparator=<").append(recordSeparator).append('>');}if (getIgnoreEmptyLines()) {sb.append(" EmptyLines:ignored");}if (false) {sb.append(" SurroundingSpaces:ignored");}sb.append(" SkipHeaderRecord:").append(skipHeaderRecord);if (header != null) {sb.append(' ');sb.append("Header:").append(Arrays.toString(header));}return sb.toString();}
tensor([[0.0231, 0.0293, 0.0153,  ..., 0.0487, 0.0389, 0.0259],
        [0.0243, 0.0285, 0.0155,  ..., 0.0477, 0.0404, 0.0262],
        [0.0192, 0.0362, 0.0145,  ..., 0.0437, 0.0326, 0.0267],
        ...,
        [0.0234, 0.0366, 0.0186,  ..., 0.0426, 0.0360, 0.0251],
        [0.0179, 0.0319, 0.0141,  ..., 0.0455, 0.0258, 0.0184],
        [0.0238, 0.0338, 0.0157,  ..., 0.0468, 0.0290, 0.0262]])