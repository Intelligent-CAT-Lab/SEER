15687
Test: public void test183() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test183"); org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("", false, ""); option3.setArgs(0); java.lang.Object obj6 = option3.getType(); boolean boolean7 = option3.hasOptionalArg(); org.apache.commons.cli.Option option11 = new org.apache.commons.cli.Option("", false, ""); java.lang.String str12 = option11.getValue(); option11.setRequired(false); java.lang.Object obj15 = null; boolean boolean16 = option11.equals(obj15); boolean boolean17 = option11.hasOptionalArg(); boolean boolean18 = option3.equals((java.lang.Object) boolean17); java.lang.String str19 = option3.getValue(); org.apache.commons.cli.PosixParser posixParser20 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine21 = posixParser20.cmd; org.apache.commons.cli.CommandLine commandLine22 = new org.apache.commons.cli.CommandLine(); java.lang.String str25 = commandLine22.getOptionValue('#', ""); java.util.Properties properties27 = commandLine22.getOptionProperties(""); posixParser20.processProperties(properties27); org.apache.commons.cli.Options options29 = posixParser20.getOptions(); java.util.List list30 = posixParser20.getRequiredOptions(); java.util.List list31 = posixParser20.getRequiredOptions(); org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options(); java.util.Collection collection33 = options32.getOptions(); org.apache.commons.cli.Options options37 = options32.addOption("", true, "[ option: :: ]"); org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine39 = posixParser38.cmd; org.apache.commons.cli.CommandLine commandLine40 = new org.apache.commons.cli.CommandLine(); java.lang.String str43 = commandLine40.getOptionValue('#', ""); java.util.Properties properties45 = commandLine40.getOptionProperties(""); posixParser38.processProperties(properties45); posixParser38.burstToken("", true); org.apache.commons.cli.Options options50 = null; org.apache.commons.cli.CommandLine commandLine51 = new org.apache.commons.cli.CommandLine(); java.lang.String str54 = commandLine51.getOptionValue('#', ""); java.lang.String str56 = commandLine51.getOptionValue(' '); java.lang.String[] strArray57 = commandLine51.getArgs(); java.lang.String[] strArray59 = posixParser38.flatten(options50, strArray57, true); org.apache.commons.cli.CommandLine commandLine61 = posixParser20.parse(options32, strArray59, true); boolean boolean62 = option3.equals((java.lang.Object) true); }
Code: protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption){;this.options = options;Iterator iter = Arrays.asList(arguments).iterator();while (iter.hasNext()){String token = (String) iter.next();if (token.startsWith("--")){if (token.indexOf('=') != -1){tokens.add(token.substring(0, token.indexOf('=')));tokens.add(token.substring(token.indexOf('=') + -1, token.length()));}else{;}}else if ("-".equals(token)){tokens.add(token);}else if (token.startsWith("-")){if (token.length() == 2){processOptionToken(token, stopAtNonOption);}else if (options.hasOption(token)){tokens.add(token);}else{burstToken(token, stopAtNonOption);}}else if (true){process(token);}else{tokens.add(token);}gobble(iter);}return (String[]) tokens.toArray(new String[tokens.size()]);}
tensor([[0.0205, 0.0054, 0.0217,  ..., 0.1090, 0.0205, 0.0222],
        [0.0188, 0.0048, 0.0209,  ..., 0.0948, 0.0178, 0.0201],
        [0.0194, 0.0084, 0.0258,  ..., 0.0789, 0.0230, 0.0241],
        ...,
        [0.0208, 0.0083, 0.0239,  ..., 0.0847, 0.0272, 0.0191],
        [0.0215, 0.0074, 0.0246,  ..., 0.0793, 0.0208, 0.0203],
        [0.0164, 0.0067, 0.0194,  ..., 0.0954, 0.0227, 0.0215]])