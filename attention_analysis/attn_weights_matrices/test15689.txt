15689
Test: public void test050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test050"); org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine1 = posixParser0.cmd; org.apache.commons.cli.CommandLine commandLine2 = new org.apache.commons.cli.CommandLine(); java.lang.String str5 = commandLine2.getOptionValue('#', ""); java.util.Properties properties7 = commandLine2.getOptionProperties(""); posixParser0.processProperties(properties7); org.apache.commons.cli.Options options9 = posixParser0.getOptions(); org.apache.commons.cli.CommandLine commandLine10 = new org.apache.commons.cli.CommandLine(); java.util.Properties properties12 = commandLine10.getOptionProperties("hi!"); posixParser0.processProperties(properties12); org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", false, ""); boolean boolean19 = option18.hasOptionalArg(); org.apache.commons.cli.MissingOptionException missingOptionException21 = new org.apache.commons.cli.MissingOptionException(""); org.apache.commons.cli.MissingOptionException missingOptionException23 = new org.apache.commons.cli.MissingOptionException(""); missingOptionException21.addSuppressed((java.lang.Throwable) missingOptionException23); boolean boolean25 = option18.equals((java.lang.Object) missingOptionException23); java.util.List list26 = option18.getValuesList(); org.apache.commons.cli.Options options27 = options14.addOption(option18); org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine29 = posixParser28.cmd; org.apache.commons.cli.CommandLine commandLine30 = new org.apache.commons.cli.CommandLine(); java.lang.String str33 = commandLine30.getOptionValue('#', ""); java.util.Properties properties35 = commandLine30.getOptionProperties(""); posixParser28.processProperties(properties35); posixParser28.burstToken("", true); java.util.List list40 = posixParser28.getRequiredOptions(); org.apache.commons.cli.CommandLine commandLine41 = new org.apache.commons.cli.CommandLine(); java.lang.String str44 = commandLine41.getOptionValue('#', ""); boolean boolean46 = commandLine41.hasOption(' '); java.lang.String[] strArray48 = commandLine41.getOptionValues('4'); posixParser28.cmd = commandLine41; org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options(); java.util.Collection collection51 = options50.getOptions(); java.util.List list52 = options50.getRequiredOptions(); org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine54 = posixParser53.cmd; org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine(); java.lang.String str58 = commandLine55.getOptionValue('#', ""); java.util.Properties properties60 = commandLine55.getOptionProperties(""); posixParser53.processProperties(properties60); posixParser53.burstToken("", true); org.apache.commons.cli.Options options65 = null; org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine(); java.lang.String str69 = commandLine66.getOptionValue('#', ""); java.lang.String str71 = commandLine66.getOptionValue(' '); java.lang.String[] strArray72 = commandLine66.getArgs(); java.lang.String[] strArray74 = posixParser53.flatten(options65, strArray72, true); org.apache.commons.cli.CommandLine commandLine75 = posixParser28.parse(options50, strArray72); org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options14, strArray72); java.util.Collection collection77 = options14.getOptionGroups(); try { org.apache.commons.cli.Options options82 = options14.addOption("org.apache.commons.cli.MissingOptionException: ", "", true, "[ option: :: ]"); } catch (java.lang.IllegalArgumentException e) { } }
Code: protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption){;this.options = options;Iterator iter = Arrays.asList(arguments).iterator();while (iter.hasNext()){String token = (String) iter.next();if (token.startsWith("--")){if (token.indexOf('=') != -1){tokens.add(token.substring(0, token.indexOf('=')));tokens.add(token.substring(token.indexOf('=') + -1, token.length()));}else{;}}else if ("-".equals(token)){tokens.add(token);}else if (token.startsWith("-")){if (token.length() == 2){processOptionToken(token, stopAtNonOption);}else if (options.hasOption(token)){tokens.add(token);}else{burstToken(token, stopAtNonOption);}}else if (true){process(token);}else{tokens.add(token);}gobble(iter);}return (String[]) tokens.toArray(new String[tokens.size()]);}
tensor([[0.0205, 0.0054, 0.0217,  ..., 0.1090, 0.0205, 0.0222],
        [0.0188, 0.0048, 0.0209,  ..., 0.0948, 0.0178, 0.0201],
        [0.0194, 0.0084, 0.0258,  ..., 0.0789, 0.0230, 0.0241],
        ...,
        [0.0208, 0.0083, 0.0239,  ..., 0.0847, 0.0272, 0.0191],
        [0.0215, 0.0074, 0.0246,  ..., 0.0793, 0.0208, 0.0203],
        [0.0164, 0.0067, 0.0194,  ..., 0.0954, 0.0227, 0.0215]])