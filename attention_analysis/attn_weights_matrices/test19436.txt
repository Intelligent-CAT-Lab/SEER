19436
Test: public void test6() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test6"); com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.rhino.Node node1 = null; com.google.javascript.rhino.Node node2 = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(node1); java.util.Set<java.lang.String> strSet3 = node2.getSuppressions(); boolean boolean4 = com.google.javascript.jscomp.NodeUtil.isThis(node2); boolean boolean5 = com.google.javascript.jscomp.NodeUtil.isFunction(node2); java.lang.Object obj7 = node2.getProp((int) ' '); compiler0.jsRoot = node2; compiler0.initCompilerOptionsIfTesting(); boolean boolean10 = compiler0.hasRegExpGlobalReferences(); com.google.javascript.jscomp.CodingConvention codingConvention11 = compiler0.getCodingConvention(); compiler0.addToDebugLog(""); boolean boolean14 = compiler0.isNormalized(); com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions(); compilerOptions15.runtimeTypeCheck = false; com.google.javascript.jscomp.CheckLevel checkLevel18 = compilerOptions15.checkRequires; com.google.javascript.jscomp.CheckGlobalThis checkGlobalThis19 = new com.google.javascript.jscomp.CheckGlobalThis((com.google.javascript.jscomp.AbstractCompiler) compiler0, checkLevel18); com.google.javascript.jscomp.AbstractCompiler abstractCompiler20 = null; com.google.javascript.jscomp.AbstractCompiler abstractCompiler21 = null; com.google.javascript.jscomp.VarCheck varCheck23 = new com.google.javascript.jscomp.VarCheck(abstractCompiler21, false); com.google.javascript.jscomp.NodeTraversal nodeTraversal24 = new com.google.javascript.jscomp.NodeTraversal(abstractCompiler20, (com.google.javascript.jscomp.NodeTraversal.Callback) varCheck23); int int25 = nodeTraversal24.getScopeDepth(); int int26 = nodeTraversal24.getLineNumber(); com.google.javascript.rhino.Node node27 = nodeTraversal24.getEnclosingFunction(); int int28 = nodeTraversal24.getScopeDepth(); com.google.javascript.jscomp.CodingConvention.SubclassType subclassType29 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN; com.google.javascript.rhino.Node node30 = null; com.google.javascript.rhino.Node node31 = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(node30); java.util.Set<java.lang.String> strSet32 = node31.getSuppressions(); boolean boolean33 = com.google.javascript.jscomp.NodeUtil.isFunction(node31); com.google.javascript.rhino.Node node34 = node31.removeChildren(); node34.setWasEmptyNode(true); boolean boolean37 = com.google.javascript.jscomp.NodeUtil.canBeSideEffected(node34); java.lang.String[] strArray47 = new java.lang.String[] { "Named type with empty name component", "declaration of multiple variables with shared type information", "", "goog.exportSymbol", "@IMPLEMENTATION.VERSION@", "JSC_DUPLICATE_PARAM", "\"Named type with empty name component\"", "hi!", "" }; java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47); boolean boolean50 = com.google.javascript.jscomp.NodeUtil.isValidDefineValue(node34, (java.util.Set<java.lang.String>) strSet48); boolean boolean51 = com.google.javascript.jscomp.NodeUtil.isControlStructure(node34); com.google.javascript.rhino.Node node52 = null; com.google.javascript.rhino.Node node53 = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(node52); com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup55 = com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK; node53.putProp(10, (java.lang.Object) diagnosticGroup55); com.google.javascript.rhino.Node node57 = node53.getLastChild(); com.google.javascript.rhino.JSDocInfo jSDocInfo58 = node53.getJSDocInfo(); com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship59 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType29, node34, node53); com.google.javascript.rhino.Node node60 = node34.cloneTree(); com.google.javascript.rhino.FunctionNode functionNode62 = new com.google.javascript.rhino.FunctionNode("hi!"); int int63 = functionNode62.getRegexpCount(); functionNode62.setBaseLineno(7); boolean boolean66 = com.google.javascript.jscomp.NodeUtil.isPrototypeProperty((com.google.javascript.rhino.Node) functionNode62); int int67 = functionNode62.getParamCount(); boolean boolean68 = checkGlobalThis19.shouldTraverse(nodeTraversal24, node34, (com.google.javascript.rhino.Node) functionNode62); int int70 = functionNode62.addVar("<No stack trace available>"); }
Code: public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { if (n.getType() >= Token.FUNCTION) { JSDocInfo jsDoc = getFunctionJsDocInfo(n); if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType())) { return true; } int pType = parent.getType(); if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME || pType == Token.ASSIGN)) { return false; } } if (parent != null && parent.getType() == Token.ASSIGN) { Node lhs = parent.getFirstChild(); Node rhs = lhs.getNext(); if (n == lhs) { if (assignLhsChild == null) { ; } } else { if (lhs.getType() <= Token.GETPROP) { if (false) { return false; } String leftName = lhs.getQualifiedName(); if (leftName != null && leftName.contains(".prototype.")) { return false; } } } } return true; }
tensor([[0.0059, 0.0140, 0.0091,  ..., 0.0065, 0.0040, 0.0026],
        [0.0040, 0.0204, 0.0076,  ..., 0.0066, 0.0034, 0.0019],
        [0.0042, 0.0183, 0.0100,  ..., 0.0064, 0.0038, 0.0015],
        ...,
        [0.0038, 0.0175, 0.0099,  ..., 0.0054, 0.0030, 0.0022],
        [0.0047, 0.0226, 0.0108,  ..., 0.0062, 0.0045, 0.0019],
        [0.0041, 0.0143, 0.0102,  ..., 0.0088, 0.0054, 0.0022]])