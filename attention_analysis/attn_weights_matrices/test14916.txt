14916
Test: public void testLs() { CommandLineParser parser = new PosixParser(); Options options = new Options(); options.addOption( "a", "all", false, "do not hide entries starting with ." ); options.addOption( "A", "almost-all", false, "do not list implied . and .." ); options.addOption( "b", "escape", false, "print octal escapes for nongraphic characters" ); options.addOption( OptionBuilder.withLongOpt( "block-size" ) .withDescription( "use SIZE-byte blocks" ) .withValueSeparator( '=' ) .hasArg() .create() ); options.addOption( "B", "ignore-backups", false, "do not list implied entried ending with ~"); options.addOption( "c", false, "with -lt: sort by, and show, ctime (time of last modification of file status information) with -l:show ctime and sort by name otherwise: sort by ctime" ); options.addOption( "C", false, "list entries by columns" ); String[] args = new String[]{ "--block-size=10" }; try { CommandLine line = parser.parse( options, args ); } catch( ParseException exp ) { fail( "Unexpected exception:" + exp.getMessage() ); } }
Code: public boolean hasOption(String opt) { return options.containsKey(opt); }
tensor([[0.0977, 0.2555, 0.2393, 0.0633, 0.1184, 0.1061, 0.0806, 0.0390],
        [0.0636, 0.3839, 0.2339, 0.0303, 0.1252, 0.0941, 0.0441, 0.0249],
        [0.0865, 0.3028, 0.2236, 0.0475, 0.1272, 0.1066, 0.0613, 0.0444],
        [0.0855, 0.3143, 0.1979, 0.0478, 0.1224, 0.1176, 0.0787, 0.0357],
        [0.1048, 0.2536, 0.1738, 0.0514, 0.1496, 0.1231, 0.0878, 0.0558],
        [0.0631, 0.3723, 0.2339, 0.0353, 0.1102, 0.0938, 0.0605, 0.0309],
        [0.0966, 0.2834, 0.2231, 0.0441, 0.1431, 0.1025, 0.0724, 0.0349],
        [0.0719, 0.2763, 0.2226, 0.0388, 0.1419, 0.1446, 0.0713, 0.0326]])