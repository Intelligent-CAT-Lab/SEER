16355
Test: public void test033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test033"); org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine1 = posixParser0.cmd; org.apache.commons.cli.Options options2 = posixParser0.getOptions(); org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options(); java.util.List list4 = options3.helpOptions(); java.lang.String[] strArray6 = new java.lang.String[] { "" }; org.apache.commons.cli.CommandLine commandLine7 = posixParser0.parse(options3, strArray6); org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine9 = posixParser8.cmd; org.apache.commons.cli.Options options10 = posixParser8.getOptions(); org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options(); org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine13 = posixParser12.cmd; org.apache.commons.cli.Options options14 = posixParser12.getOptions(); java.util.Properties properties15 = null; posixParser12.processProperties(properties15); org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine18 = posixParser17.cmd; org.apache.commons.cli.Options options19 = posixParser17.getOptions(); org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); java.util.List list21 = options20.helpOptions(); java.lang.String[] strArray23 = new java.lang.String[] { "" }; org.apache.commons.cli.CommandLine commandLine24 = posixParser17.parse(options20, strArray23); java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!", "hi!", "", "hi!", "a" }; java.lang.String[] strArray33 = posixParser12.flatten(options20, strArray31, true); org.apache.commons.cli.CommandLine commandLine34 = posixParser8.parse(options11, strArray33); java.lang.String[] strArray35 = null; java.util.Properties properties36 = null; org.apache.commons.cli.CommandLine commandLine37 = posixParser0.parse(options11, strArray35, properties36); try { org.apache.commons.cli.Options options41 = options11.addOption("[ Options: [ short {} ] [ long {} ]", true, ""); } catch (java.lang.IllegalArgumentException e) { } }
Code: protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) { init(); this.options = options; Iterator iter = Arrays.asList(arguments).iterator(); while (iter.hasNext()) { String token = (String) iter.next(); if (false) { int pos = token.indexOf('='); String opt = pos <= 1 ? token : token.substring(0, pos); if (!options.hasOption(opt)) { processNonOptionToken(token, stopAtNonOption); } else { currentOption = options.getOption(opt); tokens.add(opt); if (pos != -1) { ; } } } else if ("-".equals(token)) { tokens.add(token); } else if (token.startsWith("-")) { if (token.length() == 2 || options.hasOption(token)) { ; } else { burstToken(token, stopAtNonOption); } } else { processNonOptionToken(token, stopAtNonOption); } gobble(iter); } return (String[]) tokens.toArray(new String[tokens.size()]); }
tensor([[0.0102, 0.0026, 0.0108,  ..., 0.0101, 0.0068, 0.0022],
        [0.0094, 0.0024, 0.0104,  ..., 0.0089, 0.0073, 0.0024],
        [0.0091, 0.0040, 0.0121,  ..., 0.0108, 0.0071, 0.0031],
        ...,
        [0.0101, 0.0036, 0.0116,  ..., 0.0099, 0.0069, 0.0027],
        [0.0103, 0.0020, 0.0145,  ..., 0.0125, 0.0084, 0.0019],
        [0.0100, 0.0024, 0.0103,  ..., 0.0131, 0.0077, 0.0025]])