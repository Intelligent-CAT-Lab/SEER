69329
Test: public void test511() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test511"); org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder(); htmlTreeBuilder0.generateImpliedEndTags(); org.jsoup.parser.ParseErrorList parseErrorList2 = htmlTreeBuilder0.errors; java.util.ArrayList<org.jsoup.nodes.Element> elementList3 = htmlTreeBuilder0.getStack(); org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder4 = new org.jsoup.parser.HtmlTreeBuilder(); java.util.List<java.lang.String> strList5 = htmlTreeBuilder4.getPendingTableCharacters(); org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState6 = org.jsoup.parser.HtmlTreeBuilderState.InTableBody; htmlTreeBuilder4.transition(htmlTreeBuilderState6); org.jsoup.parser.Parser parser8 = new org.jsoup.parser.Parser((org.jsoup.parser.TreeBuilder) htmlTreeBuilder4); org.jsoup.nodes.Element element9 = null; htmlTreeBuilder4.removeFromActiveFormattingElements(element9); htmlTreeBuilder4.newPendingTableCharacters(); java.util.ArrayList<org.jsoup.nodes.Element> elementList12 = htmlTreeBuilder4.stack; org.jsoup.select.Evaluator.ContainsOwnText containsOwnText15 = new org.jsoup.select.Evaluator.ContainsOwnText("[]"); org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("SYSTEM", ":last-of-type"); org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parseBodyFragment("#text", "#text"); boolean boolean23 = document21.hasClass("hi!"); org.jsoup.nodes.Document document24 = document21.clone(); org.jsoup.nodes.Element element26 = document21.tagName(":root"); boolean boolean27 = containsOwnText15.matches((org.jsoup.nodes.Element) document18, (org.jsoup.nodes.Element) document21); org.jsoup.nodes.Element element28 = document21.clone(); org.jsoup.parser.ParseErrorList parseErrorList31 = org.jsoup.parser.ParseErrorList.tracking((int) (byte) 100); org.jsoup.parser.ParseSettings parseSettings34 = new org.jsoup.parser.ParseSettings(false, false); java.util.List<org.jsoup.nodes.Node> nodeList35 = htmlTreeBuilder4.parseFragment("", (org.jsoup.nodes.Element) document21, "hi!", parseErrorList31, parseSettings34); htmlTreeBuilder0.settings = parseSettings34; org.jsoup.nodes.Document document37 = htmlTreeBuilder0.getDocument(); org.jsoup.parser.Token.Comment comment38 = new org.jsoup.parser.Token.Comment(); java.lang.StringBuilder stringBuilder39 = comment38.data; java.lang.String str40 = comment38.toString(); java.lang.StringBuilder stringBuilder41 = comment38.data; org.jsoup.parser.Token token42 = comment38.reset(); boolean boolean43 = comment38.isStartTag(); try { htmlTreeBuilder0.insert(comment38); } catch (java.lang.IllegalArgumentException e) { } }
Code: static void reset(StringBuilder sb) { if (sb != null) { sb.delete(0, sb.length()); } }
tensor([[0.1450, 0.0364, 0.1187, 0.0386, 0.0820, 0.1771, 0.0423, 0.0357, 0.0339,
         0.0820, 0.1088, 0.0506, 0.0244, 0.0244],
        [0.1464, 0.0414, 0.1754, 0.0522, 0.0633, 0.1811, 0.0311, 0.0277, 0.0284,
         0.0633, 0.0938, 0.0546, 0.0207, 0.0207],
        [0.1227, 0.0319, 0.1319, 0.0427, 0.0788, 0.2367, 0.0402, 0.0214, 0.0270,
         0.0788, 0.1108, 0.0510, 0.0131, 0.0131],
        [0.1847, 0.0346, 0.1621, 0.0457, 0.0540, 0.1621, 0.0459, 0.0273, 0.0304,
         0.0540, 0.0966, 0.0603, 0.0211, 0.0211],
        [0.1320, 0.0531, 0.1409, 0.0602, 0.0795, 0.1114, 0.0412, 0.0408, 0.0450,
         0.0795, 0.0976, 0.0556, 0.0315, 0.0315],
        [0.1842, 0.0284, 0.1689, 0.0384, 0.0551, 0.2327, 0.0308, 0.0129, 0.0174,
         0.0551, 0.1124, 0.0438, 0.0099, 0.0099],
        [0.1569, 0.0466, 0.1186, 0.0363, 0.0725, 0.1979, 0.0478, 0.0281, 0.0321,
         0.0725, 0.0987, 0.0611, 0.0154, 0.0154],
        [0.1919, 0.0304, 0.1556, 0.0332, 0.0644, 0.1655, 0.0364, 0.0174, 0.0273,
         0.0644, 0.1308, 0.0530, 0.0148, 0.0148],
        [0.1567, 0.0341, 0.1238, 0.0379, 0.0720, 0.2160, 0.0455, 0.0232, 0.0319,
         0.0720, 0.1123, 0.0487, 0.0130, 0.0130],
        [0.1320, 0.0531, 0.1409, 0.0602, 0.0795, 0.1114, 0.0412, 0.0408, 0.0450,
         0.0795, 0.0976, 0.0556, 0.0315, 0.0315],
        [0.1751, 0.0365, 0.1501, 0.0443, 0.0617, 0.1920, 0.0401, 0.0214, 0.0268,
         0.0617, 0.1090, 0.0479, 0.0167, 0.0167],
        [0.1547, 0.0432, 0.1379, 0.0469, 0.0589, 0.1665, 0.0418, 0.0429, 0.0368,
         0.0589, 0.1095, 0.0580, 0.0220, 0.0220],
        [0.1499, 0.0391, 0.1370, 0.0418, 0.0800, 0.1702, 0.0467, 0.0295, 0.0303,
         0.0800, 0.1011, 0.0562, 0.0191, 0.0191],
        [0.1499, 0.0391, 0.1370, 0.0418, 0.0800, 0.1702, 0.0467, 0.0295, 0.0303,
         0.0800, 0.1011, 0.0562, 0.0191, 0.0191]])