69031
Test: public void test530() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test530"); org.jsoup.select.Evaluator.IndexEquals indexEquals1 = new org.jsoup.select.Evaluator.IndexEquals(0); org.jsoup.nodes.Element element2 = null; org.jsoup.nodes.Element element3 = org.jsoup.select.Collector.findFirst((org.jsoup.select.Evaluator) indexEquals1, element2); org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parse(":nth-child(100)"); java.util.List<org.jsoup.nodes.Node> nodeList6 = document5.ensureChildNodes(); org.jsoup.nodes.Element element8 = document5.prependElement("hi!"); java.lang.String[] strArray13 = new java.lang.String[] { ":nth-child(100)", ":nth-child(100)", "", "#document" }; java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13); org.jsoup.nodes.Element element16 = element8.classNames((java.util.Set<java.lang.String>) strSet14); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse(":nth-child(100)"); java.util.List<org.jsoup.nodes.Node> nodeList19 = document18.ensureChildNodes(); boolean boolean20 = indexEquals1.matches(element16, (org.jsoup.nodes.Element) document18); org.jsoup.select.Elements elements22 = element16.getElementsByTag("#doctype"); }
Code: protected List<Node> ensureChildNodes() { throw new UnsupportedOperationException("Leaf Nodes do not have child nodes."); }
[[0.06413386 0.10926352 0.16015543 0.10270838 0.04545763 0.02117488
 0.05220019 0.09667155 0.08498642 0.04264745 0.09929313 0.03558268
 0.06592135 0.01980347]
[0.06690113 0.09494337 0.14524877 0.08103763 0.04240136 0.02270925
 0.05895291 0.11337076 0.09755488 0.03911952 0.102056   0.04314386
 0.06847767 0.02408291]
[0.05727746 0.08689062 0.15985163 0.09791117 0.05078819 0.02683666
 0.05863353 0.10415976 0.08268943 0.04707063 0.08473942 0.0432225
 0.07355548 0.02637353]
[0.09249972 0.0745151  0.12588367 0.09612928 0.0490833  0.02812415
 0.05377968 0.10715699 0.08114677 0.05270876 0.09620447 0.0390531
 0.07151823 0.03219685]
[0.07188211 0.08459091 0.15844029 0.11945537 0.04497704 0.0190293
 0.05162931 0.1014967  0.08195871 0.03785192 0.10158853 0.0307681
 0.07862797 0.01770369]
[0.0731838  0.09768266 0.15940917 0.09950431 0.04700265 0.02760286
 0.04874599 0.10268413 0.08765724 0.03885502 0.09131565 0.03814607
 0.06053309 0.02767734]
[0.07104351 0.08995529 0.13748589 0.10530446 0.04555156 0.02989697
 0.05686659 0.11350589 0.07883748 0.0406565  0.08087078 0.03961646
 0.08778583 0.02262279]
[0.06519816 0.0793086  0.17321867 0.09270996 0.04170858 0.02263374
 0.0470548  0.11359031 0.09271578 0.05102072 0.09205019 0.03628552
 0.07205051 0.02045448]
[0.06501153 0.08063988 0.18469976 0.09046389 0.043333   0.01967295
 0.05588611 0.09166501 0.07814719 0.04795671 0.10009485 0.03971709
 0.08942198 0.01329003]
[0.08981957 0.08007719 0.14311257 0.09307808 0.04951361 0.02447664
 0.05388741 0.11268126 0.0835923  0.03979572 0.09455837 0.03933185
 0.07210609 0.02396938]
[0.07465538 0.08932593 0.16406807 0.08981259 0.04469104 0.02441961
 0.04462402 0.10890026 0.08148868 0.04016848 0.0993019  0.03433883
 0.07653554 0.02766952]
[0.06254059 0.08188991 0.20818214 0.0960613  0.04239926 0.02105906
 0.05060406 0.07876298 0.08823318 0.04133053 0.11114832 0.03284611
 0.06682674 0.01811577]
[0.08185156 0.07994166 0.1636746  0.08354551 0.04458949 0.02637227
 0.05552962 0.09834964 0.08026332 0.04882641 0.09161602 0.04189182
 0.07994414 0.02360394]
[0.07100347 0.07893728 0.14112572 0.11630494 0.05477522 0.0206858
 0.04761281 0.0986871  0.08444163 0.04497168 0.11342515 0.04106878
 0.06299219 0.02396823]]