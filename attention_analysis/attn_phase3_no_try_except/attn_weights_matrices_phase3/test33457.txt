33457
Test: public void test397() throws Throwable { JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false); FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".. error"); HashMap<String, Object> hashMap0 = new HashMap<String, Object>(); FileSystemHandling.shouldAllThrowIOExceptions(); MapContext mapContext0 = new MapContext(hashMap0); mapContext0.clear(); hashMap0.put(".. error", ".. error"); JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0); Object object0 = jexlArithmetic1.not("W\"Pza"); JexlOptions jexlOptions0 = new JexlOptions(); JexlEngine.getThreadEngine(); jexlOptions0.set((JexlEngine) null); JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0); Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN; CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ".. error"); Boolean boolean0 = jexlArithmetic1.contains(pattern0, charBuffer0); ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>((JexlEngine) null, boolean0); jexlArithmetic2.options((JexlContext) objectContext0); jexlArithmetic2.getMathScale(); Random.setNextRandom((-1928)); BigInteger bigInteger0 = BigInteger.ONE; Object object1 = jexlArithmetic0.divide(object0, bigInteger0); Boolean boolean1 = new Boolean(".. error"); jexlArithmetic0.isEmpty(object1, boolean1); // Undeclared exception!  jexlArithmetic1.bitwiseXor("W\"Pza", (Object) null);   }
Code: public final Object bitwiseXor(final Object lhs, final Object rhs) { return xor(lhs, rhs); }
[[0.06102119 0.04900593 0.04710461 0.08465239 0.04710461 0.11187487
 0.04900593 0.04710461 0.15608358 0.081566   0.06718105 0.0846524
 0.08759947 0.02604334]
[0.05881499 0.03909352 0.04314587 0.09169028 0.04314587 0.11870389
 0.03909352 0.04314587 0.14967158 0.0981185  0.08548938 0.09169027
 0.07877152 0.01942491]
[0.06067933 0.04339677 0.04270826 0.08034833 0.04270826 0.12068617
 0.04339677 0.04270826 0.13495693 0.12010891 0.07433186 0.08034834
 0.09099673 0.02262504]
[0.0546331  0.05056434 0.04147037 0.09250264 0.04147037 0.13113517
 0.05056434 0.04147037 0.13255705 0.07932577 0.06611714 0.09250265
 0.0982039  0.02748276]
[0.06067933 0.04339677 0.04270826 0.08034833 0.04270826 0.12068617
 0.04339677 0.04270826 0.13495693 0.12010891 0.07433186 0.08034834
 0.09099673 0.02262504]
[0.05891947 0.03826215 0.03967851 0.10081831 0.03967851 0.13615932
 0.03826215 0.03967851 0.131783   0.10274995 0.06318023 0.10081832
 0.08206471 0.02794689]
[0.05881499 0.03909352 0.04314587 0.09169028 0.04314587 0.11870389
 0.03909352 0.04314587 0.14967158 0.0981185  0.08548938 0.09169027
 0.07877152 0.01942491]
[0.06067933 0.04339677 0.04270826 0.08034833 0.04270826 0.12068617
 0.04339677 0.04270826 0.13495693 0.12010891 0.07433186 0.08034834
 0.09099673 0.02262504]
[0.06204395 0.05609909 0.04335339 0.08792351 0.04335339 0.13288142
 0.05609909 0.04335339 0.14234072 0.07154953 0.07333863 0.08792351
 0.07557744 0.02416294]
[0.0657673  0.06443566 0.0391647  0.08772149 0.0391647  0.10111412
 0.06443566 0.0391647  0.10951521 0.10223499 0.07614733 0.0877215
 0.08680582 0.03660681]
[0.04524686 0.04083256 0.04244602 0.09292938 0.04244602 0.1325799
 0.04083256 0.04244602 0.16822366 0.08287211 0.06665012 0.09292938
 0.08657097 0.02299453]
[0.0546331  0.05056434 0.04147037 0.09250264 0.04147037 0.13113517
 0.05056434 0.04147037 0.13255705 0.07932577 0.06611714 0.09250265
 0.0982039  0.02748276]
[0.05567781 0.04886275 0.04439124 0.07551017 0.04439124 0.13486947
 0.04886275 0.04439124 0.15887406 0.10018805 0.06508588 0.07551017
 0.07810647 0.02527875]
[0.04432856 0.03970665 0.04462809 0.08370198 0.04462809 0.13719511
 0.03970665 0.04462809 0.14011985 0.10928802 0.09547555 0.08370198
 0.06914981 0.02374157]]