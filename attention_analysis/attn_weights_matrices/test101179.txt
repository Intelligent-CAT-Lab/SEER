101179
Test: public void test0344() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0344"); org.joda.time.chrono.BasicChronology basicChronology0 = null; org.joda.time.chrono.GJEraDateTimeField gJEraDateTimeField1 = new org.joda.time.chrono.GJEraDateTimeField(basicChronology0); java.util.Locale locale2 = null; int int3 = gJEraDateTimeField1.getMaximumTextLength(locale2); org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1); org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField7 = gJChronology6.yearOfCentury(); org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology6); int int9 = dateTime8.getEra(); int int10 = dateTime8.getYear(); boolean boolean11 = instant5.isBefore((org.joda.time.ReadableInstant) dateTime8); org.joda.time.LocalDate localDate12 = dateTime8.toLocalDate(); org.joda.time.LocalDate localDate14 = localDate12.plusDays(2757764); int int15 = localDate14.getDayOfMonth(); org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField19 = gJChronology18.yearOfCentury(); org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology18); org.joda.time.DurationField durationField21 = gJChronology18.eras(); org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology18); org.joda.time.ReadablePeriod readablePeriod23 = null; org.joda.time.LocalDate localDate25 = localDate22.withPeriodAdded(readablePeriod23, (-28800000)); org.joda.time.LocalDate.Property property26 = localDate22.dayOfMonth(); int[] intArray27 = localDate22.getValues(); int[] intArray29 = gJEraDateTimeField1.addWrapField((org.joda.time.ReadablePartial) localDate14, 0, intArray27, 899); int int30 = gJEraDateTimeField1.getMaximumValue(); int int32 = gJEraDateTimeField1.getLeapAmount((long) 969); org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean35 = iSOChronology33.equals((java.lang.Object) iSOChronology34); org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField38 = gJChronology37.yearOfCentury(); org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology37); org.joda.time.DurationField durationField40 = gJChronology37.eras(); org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology37); int[] intArray43 = iSOChronology34.get((org.joda.time.ReadablePartial) localDate41, (-1123200000L)); org.joda.time.LocalDate localDate45 = localDate41.minusDays(100); org.joda.time.LocalDate localDate47 = localDate45.withYearOfCentury(9); java.util.Locale locale49 = null; try { java.lang.String str50 = gJEraDateTimeField1.getAsShortText((org.joda.time.ReadablePartial) localDate45, 2787852, locale49); } catch (java.lang.ArrayIndexOutOfBoundsException e) { } }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone)); if (cutoverDate.getYear() <= 0) { throw new IllegalArgumentException("Cutover too early. Must be on or after 0001-01-01."); } } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0047, 0.0152, 0.0087,  ..., 0.0052, 0.0273, 0.0021],
        [0.0049, 0.0137, 0.0096,  ..., 0.0047, 0.0174, 0.0025],
        [0.0042, 0.0178, 0.0092,  ..., 0.0055, 0.0235, 0.0017],
        ...,
        [0.0030, 0.0148, 0.0096,  ..., 0.0042, 0.0273, 0.0017],
        [0.0040, 0.0147, 0.0094,  ..., 0.0047, 0.0236, 0.0020],
        [0.0034, 0.0141, 0.0105,  ..., 0.0073, 0.0177, 0.0018]])