101367
Test: public void test30() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test30"); java.lang.String[] strArray7 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" }; org.joda.time.format.PeriodFormatter periodFormatter8 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks(); java.util.Locale locale9 = null; org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9); boolean boolean11 = periodFormatter8.isParser(); java.util.Locale locale12 = null; org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter8.withLocale(locale12); org.joda.time.format.PeriodPrinter periodPrinter14 = periodFormatter13.getPrinter(); org.joda.time.format.PeriodFormatterBuilder.Literal literal15 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY; org.joda.time.Chronology chronology18 = null; org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology18); java.lang.String str20 = period19.toString(); org.joda.time.Period period22 = period19.minusDays((int) (byte) 100); java.util.Locale locale24 = null; int int25 = literal15.countFieldsToPrint((org.joda.time.ReadablePeriod) period22, 999, locale24); org.joda.time.format.PeriodFormatterBuilder.Separator separator28 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray7, periodPrinter14, (org.joda.time.format.PeriodParser) literal15, false, false); java.lang.String[] strArray36 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" }; org.joda.time.format.PeriodFormatter periodFormatter37 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks(); java.util.Locale locale38 = null; org.joda.time.format.PeriodFormatter periodFormatter39 = periodFormatter37.withLocale(locale38); boolean boolean40 = periodFormatter37.isParser(); java.util.Locale locale41 = null; org.joda.time.format.PeriodFormatter periodFormatter42 = periodFormatter37.withLocale(locale41); org.joda.time.format.PeriodPrinter periodPrinter43 = periodFormatter42.getPrinter(); org.joda.time.format.PeriodFormatterBuilder.Literal literal44 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY; org.joda.time.Chronology chronology47 = null; org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology47); java.lang.String str49 = period48.toString(); org.joda.time.Period period51 = period48.minusDays((int) (byte) 100); java.util.Locale locale53 = null; int int54 = literal44.countFieldsToPrint((org.joda.time.ReadablePeriod) period51, 999, locale53); org.joda.time.format.PeriodFormatterBuilder.Separator separator57 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray36, periodPrinter43, (org.joda.time.format.PeriodParser) literal44, false, false); org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder58 = new org.joda.time.format.PeriodFormatterBuilder(); org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder60 = periodFormatterBuilder58.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]"); org.joda.time.format.PeriodPrinter periodPrinter61 = periodFormatterBuilder60.toPrinter(); org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder63 = periodFormatterBuilder60.rejectSignedValues(false); org.joda.time.format.PeriodFormatter periodFormatter64 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks(); java.util.Locale locale65 = null; org.joda.time.format.PeriodFormatter periodFormatter66 = periodFormatter64.withLocale(locale65); boolean boolean67 = periodFormatter66.isParser(); java.util.Locale locale68 = null; org.joda.time.format.PeriodFormatter periodFormatter69 = periodFormatter66.withLocale(locale68); org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.yearDayTime(); org.joda.time.chrono.GregorianChronology gregorianChronology73 = org.joda.time.chrono.GregorianChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField74 = gregorianChronology73.minuteOfHour(); org.joda.time.DateTimeZone dateTimeZone75 = gregorianChronology73.getZone(); org.joda.time.DateTimeField dateTimeField76 = gregorianChronology73.yearOfCentury(); org.joda.time.Period period77 = new org.joda.time.Period((long) '4', 100L, periodType72, (org.joda.time.Chronology) gregorianChronology73); org.joda.time.format.PeriodFormatter periodFormatter78 = periodFormatter66.withParseType(periodType72); org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder79 = periodFormatterBuilder60.append(periodFormatter78); org.joda.time.format.PeriodParser periodParser80 = periodFormatter78.getParser(); org.joda.time.format.PeriodFormatterBuilder.Separator separator81 = separator28.finish((org.joda.time.format.PeriodPrinter) literal44, periodParser80); java.io.Writer writer82 = null; org.joda.time.Period period84 = new org.joda.time.Period((long) ' '); int[] intArray85 = period84.getValues(); org.joda.time.Period period87 = period84.plusMillis((int) (byte) 1); int int88 = period87.getDays(); java.util.Locale locale89 = null; try { separator81.printTo(writer82, (org.joda.time.ReadablePeriod) period87, locale89); } catch (java.lang.NullPointerException e) { } }
Code: public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) { long valueLong = getFieldValue(period); if (valueLong == Long.MAX_VALUE) { return; } int value = (int) valueLong; if (iFieldType >= SECONDS_MILLIS) { value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND); } if (iPrefix != null) { iPrefix.printTo(buf, value); } int bufLen = buf.length(); int minDigits = iMinPrintedDigits; if (minDigits <= 1) { FormatUtils.appendUnpaddedInteger(buf, value); } else { FormatUtils.appendPaddedInteger(buf, value, minDigits); } if (iFieldType >= SECONDS_MILLIS) { int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND); if (iFieldType == SECONDS_MILLIS || dp > 0) { if (valueLong < 0 && valueLong > -DateTimeConstants.MILLIS_PER_SECOND) { buf.insert(bufLen, '-'); } buf.append('.'); FormatUtils.appendPaddedInteger(buf, dp, 3); } } if (iSuffix != null) { iSuffix.printTo(buf, value); } }
tensor([[0.0060, 0.0049, 0.0104,  ..., 0.0150, 0.0027, 0.0027],
        [0.0044, 0.0040, 0.0098,  ..., 0.0124, 0.0026, 0.0026],
        [0.0054, 0.0042, 0.0098,  ..., 0.0125, 0.0032, 0.0032],
        ...,
        [0.0053, 0.0057, 0.0113,  ..., 0.0130, 0.0022, 0.0022],
        [0.0043, 0.0039, 0.0104,  ..., 0.0094, 0.0023, 0.0023],
        [0.0043, 0.0039, 0.0104,  ..., 0.0094, 0.0023, 0.0023]])