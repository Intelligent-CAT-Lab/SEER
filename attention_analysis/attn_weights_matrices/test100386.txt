100386
Test: public void testSafeMultiplyLongLong() { try { FieldUtils.safeMultiply(Long.MIN_VALUE, -1L); fail(); } catch (ArithmeticException e) { } try { FieldUtils.safeMultiply(-1L, Long.MIN_VALUE); fail(); } catch (ArithmeticException e) { } try { FieldUtils.safeMultiply(Long.MIN_VALUE, 100L); fail(); } catch (ArithmeticException e) { } try { FieldUtils.safeMultiply(Long.MIN_VALUE, Long.MAX_VALUE); fail(); } catch (ArithmeticException e) { } try { FieldUtils.safeMultiply(Long.MAX_VALUE, Long.MIN_VALUE); fail(); } catch (ArithmeticException e) { } }
Code: public static long safeMultiply(long val1, int val2) { switch (val2) { case -1: if (val1 == Long.MIN_VALUE) { throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2); } return -val1; case 0: return 0L; case 1: return val1; } long total = val1 * val2; if (total / val2 != val1) { throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2); } return total; }
tensor([[0.0092, 0.0287, 0.0150,  ..., 0.0102, 0.0168, 0.0041],
        [0.0097, 0.0258, 0.0123,  ..., 0.0092, 0.0167, 0.0047],
        [0.0056, 0.0295, 0.0113,  ..., 0.0083, 0.0147, 0.0033],
        ...,
        [0.0057, 0.0271, 0.0152,  ..., 0.0082, 0.0174, 0.0031],
        [0.0064, 0.0299, 0.0100,  ..., 0.0092, 0.0161, 0.0025],
        [0.0066, 0.0270, 0.0107,  ..., 0.0142, 0.0155, 0.0035]])