15753
Test: public void test164() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test164"); org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine1 = posixParser0.cmd; org.apache.commons.cli.CommandLine commandLine2 = new org.apache.commons.cli.CommandLine(); java.lang.String str5 = commandLine2.getOptionValue('#', ""); java.util.Properties properties7 = commandLine2.getOptionProperties(""); posixParser0.processProperties(properties7); org.apache.commons.cli.Options options9 = posixParser0.getOptions(); org.apache.commons.cli.CommandLine commandLine10 = new org.apache.commons.cli.CommandLine(); java.util.Properties properties12 = commandLine10.getOptionProperties("hi!"); posixParser0.processProperties(properties12); org.apache.commons.cli.PosixParser posixParser14 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine15 = posixParser14.cmd; org.apache.commons.cli.CommandLine commandLine16 = new org.apache.commons.cli.CommandLine(); java.lang.String str19 = commandLine16.getOptionValue('#', ""); java.util.Properties properties21 = commandLine16.getOptionProperties(""); posixParser14.processProperties(properties21); posixParser14.burstToken("", true); java.util.List list26 = posixParser14.getRequiredOptions(); org.apache.commons.cli.CommandLine commandLine27 = new org.apache.commons.cli.CommandLine(); java.lang.String str30 = commandLine27.getOptionValue('#', ""); boolean boolean32 = commandLine27.hasOption(' '); java.lang.String[] strArray34 = commandLine27.getOptionValues('4'); posixParser14.cmd = commandLine27; org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options(); java.util.Collection collection37 = options36.getOptions(); java.util.List list38 = options36.getRequiredOptions(); org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine40 = posixParser39.cmd; org.apache.commons.cli.CommandLine commandLine41 = new org.apache.commons.cli.CommandLine(); java.lang.String str44 = commandLine41.getOptionValue('#', ""); java.util.Properties properties46 = commandLine41.getOptionProperties(""); posixParser39.processProperties(properties46); posixParser39.burstToken("", true); org.apache.commons.cli.Options options51 = null; org.apache.commons.cli.CommandLine commandLine52 = new org.apache.commons.cli.CommandLine(); java.lang.String str55 = commandLine52.getOptionValue('#', ""); java.lang.String str57 = commandLine52.getOptionValue(' '); java.lang.String[] strArray58 = commandLine52.getArgs(); java.lang.String[] strArray60 = posixParser39.flatten(options51, strArray58, true); org.apache.commons.cli.CommandLine commandLine61 = posixParser14.parse(options36, strArray58); java.lang.String str62 = options36.toString(); java.util.List list63 = options36.helpOptions(); org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine65 = posixParser64.cmd; org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine(); java.lang.String str69 = commandLine66.getOptionValue('#', ""); java.util.Properties properties71 = commandLine66.getOptionProperties(""); posixParser64.processProperties(properties71); posixParser64.burstToken("", true); org.apache.commons.cli.Options options76 = null; org.apache.commons.cli.CommandLine commandLine77 = new org.apache.commons.cli.CommandLine(); java.lang.String str80 = commandLine77.getOptionValue('#', ""); java.lang.String str82 = commandLine77.getOptionValue(' '); java.lang.String[] strArray83 = commandLine77.getArgs(); java.lang.String[] strArray85 = posixParser64.flatten(options76, strArray83, true); java.lang.String[] strArray87 = posixParser0.flatten(options36, strArray83, false); org.apache.commons.cli.Options options88 = posixParser0.getOptions(); } ] [ long {} ]" + "'", str62, "[ Options: [ short {} ] [ long {} ]"); }
Code: protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption){;this.options = options;Iterator iter = Arrays.asList(arguments).iterator();while (iter.hasNext()){String token = (String) iter.next();if (token.startsWith("--")){if (token.indexOf('=') != -1){tokens.add(token.substring(-1, token.indexOf('=')));tokens.add(token.substring(token.indexOf('=') + 1, token.length()));}else{;}}else if ("-".equals(token)){tokens.add(token);}else if (token.startsWith("-")){if (token.length() == 2){processOptionToken(token, stopAtNonOption);}else if (options.hasOption(token)){tokens.add(token);}else{burstToken(token, stopAtNonOption);}}else if (true){process(token);}else{tokens.add(token);}gobble(iter);}return (String[]) tokens.toArray(new String[tokens.size()]);}
tensor([[0.0200, 0.0055, 0.0212,  ..., 0.1064, 0.0204, 0.0220],
        [0.0184, 0.0050, 0.0204,  ..., 0.0931, 0.0179, 0.0202],
        [0.0188, 0.0085, 0.0250,  ..., 0.0770, 0.0227, 0.0236],
        ...,
        [0.0205, 0.0084, 0.0236,  ..., 0.0841, 0.0272, 0.0192],
        [0.0211, 0.0076, 0.0242,  ..., 0.0788, 0.0208, 0.0202],
        [0.0160, 0.0068, 0.0191,  ..., 0.0941, 0.0227, 0.0213]])