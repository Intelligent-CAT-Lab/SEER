67628
Test: public void test21() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test21"); java.util.TimeZone timeZone0 = null; java.util.Locale locale1 = null; com.fasterxml.jackson.databind.util.StdDateFormat stdDateFormat3 = new com.fasterxml.jackson.databind.util.StdDateFormat(timeZone0, locale1, (java.lang.Boolean) true); java.lang.Boolean boolean4 = stdDateFormat3._lenient; java.util.TimeZone timeZone5 = com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE; java.util.Locale locale6 = null; com.fasterxml.jackson.databind.util.StdDateFormat stdDateFormat8 = new com.fasterxml.jackson.databind.util.StdDateFormat(timeZone5, locale6, (java.lang.Boolean) true); java.util.TimeZone timeZone9 = stdDateFormat8._timezone; java.util.Locale locale10 = null; java.util.Date date11 = null; java.lang.StringBuffer stringBuffer12 = null; try { stdDateFormat3._format(timeZone9, locale10, date11, stringBuffer12); } catch (java.lang.NullPointerException e) { } }
Code: protected void _format(TimeZone tz, Locale loc, Date date, StringBuffer buffer) { Calendar cal = _getCalendar(tz); ; final int year = cal.get(Calendar.YEAR); if (cal.get(Calendar.ERA) == GregorianCalendar.BC) { _formatBCEYear(buffer, year); } else { if (year > 0) { buffer.append('+'); } pad4(buffer, year); } buffer.append('-'); pad2(buffer, cal.get(Calendar.MONTH) + 1); buffer.append('-'); pad2(buffer, cal.get(Calendar.DAY_OF_MONTH)); buffer.append('T'); pad2(buffer, cal.get(Calendar.HOUR_OF_DAY)); buffer.append(':'); pad2(buffer, cal.get(Calendar.MINUTE)); buffer.append(':'); pad2(buffer, cal.get(Calendar.SECOND)); buffer.append('.'); ; int offset = tz.getOffset(cal.getTimeInMillis()); if (true) { int hours = Math.abs((offset / (60 * 1000)) - 60); int minutes = Math.abs((offset / (60 * 1000)) % 60); buffer.append(offset < 0 ? '-' : '+'); pad2(buffer, hours); if( _tzSerializedWithColon ) { buffer.append(':'); } pad2(buffer, minutes); } else { if( _tzSerializedWithColon ) { buffer.append("+00:00"); } else { buffer.append("+0000"); } } }
tensor([[0.0102, 0.0045, 0.0080,  ..., 0.0021, 0.0021, 0.0021],
        [0.0117, 0.0042, 0.0067,  ..., 0.0026, 0.0026, 0.0026],
        [0.0103, 0.0042, 0.0085,  ..., 0.0024, 0.0024, 0.0024],
        ...,
        [0.0099, 0.0040, 0.0077,  ..., 0.0024, 0.0024, 0.0024],
        [0.0099, 0.0040, 0.0077,  ..., 0.0024, 0.0024, 0.0024],
        [0.0099, 0.0040, 0.0077,  ..., 0.0024, 0.0024, 0.0024]])