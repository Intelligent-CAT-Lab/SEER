101385
Test: public void test541() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test541"); org.joda.time.Chronology chronology0 = null; org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(); int int3 = copticChronology1.getMonthOfYear((long) (short) 100); long long4 = copticChronology1.getAverageMillisPerYearDividedByTwo(); org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekyear(); org.joda.time.field.SkipUndoDateTimeField skipUndoDateTimeField6 = new org.joda.time.field.SkipUndoDateTimeField(chronology0, dateTimeField5); int int7 = skipUndoDateTimeField6.getMinimumValue(); java.util.Locale locale9 = null; java.lang.String str10 = skipUndoDateTimeField6.getAsShortText(2021, locale9); org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstance(); org.joda.time.DateTimeField dateTimeField12 = copticChronology11.yearOfEra(); org.joda.time.DateTimeField dateTimeField13 = copticChronology11.minuteOfHour(); java.lang.Object obj14 = null; org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance(); java.lang.String str16 = iSOChronology15.toString(); org.joda.time.DateTimeField dateTimeField17 = iSOChronology15.centuryOfEra(); org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay(obj14, (org.joda.time.Chronology) iSOChronology15); java.lang.String str19 = monthDay18.toString(); java.util.Locale locale21 = null; java.lang.String str22 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) monthDay18, 1970, locale21); org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.now(); org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfMonth(); boolean boolean25 = monthDay23.isSupported(dateTimeFieldType24); int int26 = monthDay23.getDayOfMonth(); org.joda.time.MonthDay monthDay28 = monthDay23.minusMonths(1970); int int29 = monthDay18.compareTo((org.joda.time.ReadablePartial) monthDay23); int[] intArray30 = null; int int31 = skipUndoDateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) monthDay18, intArray30); long long34 = skipUndoDateTimeField6.addWrapField((long) 3, (int) (short) 1); int int36 = skipUndoDateTimeField6.getMinimumValue(35940000L); long long39 = skipUndoDateTimeField6.add((long) (short) 10, (long) 3); int int41 = skipUndoDateTimeField6.getMaximumValue((long) 9700); long long43 = skipUndoDateTimeField6.remainder(306102585600031L); org.joda.time.DateTimeFieldType dateTimeFieldType44 = skipUndoDateTimeField6.getType(); }
Code: public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) { if (valueToAdd == 0) { return values; } if (DateTimeUtils.isContiguous(partial)) { long instant = 0L; for (int i = 0, isize = partial.size(); i < isize; i++) { instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]); } instant = add(instant, valueToAdd); return iChronology.get(partial, instant); } else { return super.add(partial, fieldIndex, values, valueToAdd); } }
tensor([[0.0101, 0.0378, 0.0264,  ..., 0.0146, 0.0047, 0.0047],
        [0.0113, 0.0336, 0.0219,  ..., 0.0197, 0.0045, 0.0045],
        [0.0076, 0.0436, 0.0194,  ..., 0.0176, 0.0046, 0.0046],
        ...,
        [0.0081, 0.0470, 0.0251,  ..., 0.0150, 0.0040, 0.0040],
        [0.0076, 0.0356, 0.0253,  ..., 0.0164, 0.0040, 0.0040],
        [0.0076, 0.0356, 0.0253,  ..., 0.0164, 0.0040, 0.0040]])