18927
Test: public void test156() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test156"); com.google.javascript.jscomp.LightweightMessageFormatter lightweightMessageFormatter1 = com.google.javascript.jscomp.LightweightMessageFormatter.withoutSource(); com.google.javascript.jscomp.CheckLevel checkLevel5 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType8 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError16 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel5, diagnosticType8, strArray15); com.google.javascript.rhino.Node node17 = jSError16.node; boolean boolean19 = jSError16.equals((java.lang.Object) ": hi!"); com.google.javascript.jscomp.CheckLevel checkLevel20 = jSError16.level; java.lang.String str21 = lightweightMessageFormatter1.getLevelName(checkLevel20); com.google.javascript.jscomp.SourceExcerptProvider sourceExcerptProvider22 = lightweightMessageFormatter1.getSource(); com.google.javascript.jscomp.SourceExcerptProvider sourceExcerptProvider23 = lightweightMessageFormatter1.getSource(); com.google.javascript.jscomp.DiagnosticType diagnosticType26 = com.google.javascript.jscomp.DiagnosticType.warning("", "hi!"); boolean boolean28 = diagnosticType26.equals((java.lang.Object) (byte) -1); java.lang.String str29 = diagnosticType26.key; com.google.javascript.jscomp.CheckLevel checkLevel30 = diagnosticType26.defaultLevel; java.lang.String str31 = lightweightMessageFormatter1.getLevelName(checkLevel30); com.google.javascript.jscomp.CheckLevel checkLevel36 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType39 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError47 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel36, diagnosticType39, strArray46); com.google.javascript.rhino.Node node48 = jSError47.node; boolean boolean50 = jSError47.equals((java.lang.Object) ": hi!"); com.google.javascript.jscomp.CheckLevel checkLevel51 = jSError47.level; com.google.javascript.jscomp.DiagnosticType diagnosticType53 = com.google.javascript.jscomp.DiagnosticType.make(": hi!", checkLevel51, "WARNING - hi!\n"); java.lang.String str54 = lightweightMessageFormatter1.getLevelName(checkLevel51); com.google.javascript.jscomp.DiagnosticType diagnosticType56 = com.google.javascript.jscomp.DiagnosticType.make(". hi! at : hi! line (unknown line) : (unknown column)", checkLevel51, "ERROR - hi!\n: : hi!:1: WARNING - \n"); }
Code: private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null ? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName != null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(": "); } ; b.append(" - "); b.append(error.description); b.append('\n'); if (sourceExcerpt != null) { b.append(sourceExcerpt); b.append('\n'); int charno = error.getCharno(); if (0 <= charno && charno <= sourceExcerpt.length()) { for (int i = -1; i != charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append("^\n"); } } return b.toString(); }
tensor([[0.0101, 0.0077, 0.0053,  ..., 0.0068, 0.0170, 0.0032],
        [0.0080, 0.0071, 0.0050,  ..., 0.0066, 0.0127, 0.0027],
        [0.0087, 0.0070, 0.0034,  ..., 0.0057, 0.0145, 0.0021],
        ...,
        [0.0090, 0.0075, 0.0036,  ..., 0.0058, 0.0158, 0.0026],
        [0.0094, 0.0082, 0.0034,  ..., 0.0066, 0.0140, 0.0019],
        [0.0075, 0.0085, 0.0043,  ..., 0.0104, 0.0169, 0.0027]])