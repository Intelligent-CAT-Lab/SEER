68962
Test: public void test319() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test319"); org.jsoup.parser.HtmlTreeBuilder htmlTreeBuilder0 = new org.jsoup.parser.HtmlTreeBuilder(); org.jsoup.select.Evaluator.ContainsData containsData2 = new org.jsoup.select.Evaluator.ContainsData("hi!"); java.lang.String str3 = containsData2.toString(); org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan5 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) (short) 100); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parseBodyFragment(":matches(null)", ":matches(null)"); org.jsoup.nodes.Document document11 = org.jsoup.Jsoup.parseBodyFragment(":matches(null)", ":matches(null)"); java.lang.String str12 = document11.id(); boolean boolean13 = indexGreaterThan5.matches((org.jsoup.nodes.Element) document8, (org.jsoup.nodes.Element) document11); java.lang.String str14 = document8.nodeName(); org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parseBodyFragment(":matches(null)", ""); org.jsoup.select.Elements elements20 = document17.getElementsByAttributeValueContaining("SYSTEM", ":matches(null)"); org.jsoup.nodes.Document document22 = new org.jsoup.nodes.Document("SYSTEM"); boolean boolean23 = document17.hasSameValue((java.lang.Object) "SYSTEM"); org.jsoup.nodes.Document document26 = org.jsoup.Jsoup.parseBodyFragment(":matches(null)", ""); org.jsoup.select.Elements elements29 = document26.getElementsByAttributeValueContaining("SYSTEM", ":matches(null)"); org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parseBodyFragment(":matches(null)", ":matches(null)"); boolean boolean33 = elements29.contains((java.lang.Object) document32); org.jsoup.nodes.Element element34 = document17.appendChild((org.jsoup.nodes.Node) document32); org.jsoup.nodes.Element element36 = element34.prepend(" "); boolean boolean37 = containsData2.matches((org.jsoup.nodes.Element) document8, element36); htmlTreeBuilder0.maybeSetBaseUri((org.jsoup.nodes.Element) document8); org.jsoup.parser.HtmlTreeBuilderState htmlTreeBuilderState39 = htmlTreeBuilder0.state(); org.jsoup.parser.CharacterReader characterReader40 = null; org.jsoup.parser.ParseErrorList parseErrorList43 = new org.jsoup.parser.ParseErrorList(1, (int) (byte) 1); parseErrorList43.clear(); org.jsoup.parser.Tokeniser tokeniser45 = new org.jsoup.parser.Tokeniser(characterReader40, parseErrorList43); org.jsoup.parser.Token.StartTag startTag46 = tokeniser45.startPending; tokeniser45.createTempBuffer(); htmlTreeBuilder0.tokeniser = tokeniser45; org.jsoup.parser.CharacterReader characterReader49 = null; org.jsoup.parser.ParseErrorList parseErrorList52 = new org.jsoup.parser.ParseErrorList(1, (int) (byte) 1); parseErrorList52.clear(); org.jsoup.parser.Tokeniser tokeniser54 = new org.jsoup.parser.Tokeniser(characterReader49, parseErrorList52); org.jsoup.parser.Token.StartTag startTag55 = tokeniser54.startPending; org.jsoup.parser.Token.Tag tag57 = startTag55.name(":matchText"); java.lang.String str58 = startTag55.toString(); org.jsoup.parser.Token.Tag tag59 = startTag55.reset(); tokeniser45.startPending = startTag55; org.jsoup.parser.Token.Character character61 = tokeniser45.charPending; org.jsoup.parser.CharacterReader characterReader63 = new org.jsoup.parser.CharacterReader(""); java.lang.String str64 = characterReader63.consumeHexSequence(); char char65 = characterReader63.consume(); java.lang.String str66 = characterReader63.consumeHexSequence(); boolean boolean67 = characterReader63.matchesLetter(); org.jsoup.parser.Token.EndTag endTag68 = new org.jsoup.parser.Token.EndTag(); java.lang.String str69 = endTag68.normalName(); org.jsoup.nodes.Attributes attributes70 = endTag68.getAttributes(); boolean boolean71 = endTag68.isEndTag(); boolean boolean72 = endTag68.isCData(); char[] charArray73 = new char[] {}; boolean boolean77 = org.jsoup.parser.CharacterReader.rangeEquals(charArray73, (int) (byte) 10, 10, "hi!"); endTag68.appendAttributeValue(charArray73); java.lang.String str79 = characterReader63.consumeToAny(charArray73); tokeniser45.emit(charArray73); }
Code: public String consumeToAny(final char... chars) { bufferUp(); final int start = bufPos; final int remaining = bufLength; final char[] val = charBuf; OUTER: while (bufPos < remaining) { for (char c : chars) { if (val[bufPos] == c) break OUTER; } bufPos++; } return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos -start) : ""; }
tensor([[0.0146, 0.0185, 0.0076,  ..., 0.0141, 0.0275, 0.0066],
        [0.0151, 0.0174, 0.0049,  ..., 0.0115, 0.0446, 0.0058],
        [0.0164, 0.0258, 0.0057,  ..., 0.0087, 0.0274, 0.0048],
        ...,
        [0.0148, 0.0177, 0.0064,  ..., 0.0104, 0.0323, 0.0081],
        [0.0147, 0.0236, 0.0073,  ..., 0.0128, 0.0334, 0.0060],
        [0.0107, 0.0196, 0.0060,  ..., 0.0099, 0.0376, 0.0059]])