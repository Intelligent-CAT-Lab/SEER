101584
Test: public void test35() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test35"); org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra(); org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber paddedNumber4 = new org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 35, true, 458); int int5 = paddedNumber4.estimatePrintedLength(); int int6 = paddedNumber4.estimateParsedLength(); java.io.Writer writer7 = null; org.joda.time.DateTimeZone dateTimeZone8 = null; org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8); org.joda.time.Instant instant10 = dateTime9.toInstant(); int int11 = dateTime9.getYear(); boolean boolean12 = dateTime9.isBeforeNow(); org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstanceUTC(); org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((org.joda.time.Chronology) iSOChronology13); org.joda.time.DateTimeZone dateTimeZone15 = null; org.joda.time.Chronology chronology16 = iSOChronology13.withZone(dateTimeZone15); org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.weekyear(); org.joda.time.DurationField durationField18 = iSOChronology13.centuries(); boolean boolean19 = dateTime9.equals((java.lang.Object) durationField18); org.joda.time.DateTime dateTime21 = dateTime9.withWeekyear(9); org.joda.time.TimeOfDay timeOfDay22 = dateTime9.toTimeOfDay(); org.joda.time.format.DateTimeParser[] dateTimeParserArray23 = new org.joda.time.format.DateTimeParser[] {}; org.joda.time.format.DateTimeFormatterBuilder.MatchingParser matchingParser24 = new org.joda.time.format.DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray23); org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstanceUTC(); org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((org.joda.time.Chronology) iSOChronology26); org.joda.time.DateTimeZone dateTimeZone28 = null; org.joda.time.Chronology chronology29 = iSOChronology26.withZone(dateTimeZone28); org.joda.time.DateTimeField dateTimeField30 = iSOChronology26.weekyear(); java.util.Locale locale31 = null; org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 100, (org.joda.time.Chronology) iSOChronology26, locale31); int int35 = matchingParser24.parseInto(dateTimeParserBucket32, "713", 1439); org.joda.time.format.DateTimeParserBucket.SavedState savedState36 = dateTimeParserBucket32.new SavedState(); org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstanceUTC(); org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((org.joda.time.Chronology) iSOChronology38); org.joda.time.DateTimeZone dateTimeZone40 = null; org.joda.time.Chronology chronology41 = iSOChronology38.withZone(dateTimeZone40); org.joda.time.DateTimeField dateTimeField42 = iSOChronology38.weekyear(); java.util.Locale locale43 = null; org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) 100, (org.joda.time.Chronology) iSOChronology38, locale43); java.lang.Integer int45 = dateTimeParserBucket44.getPivotYear(); boolean boolean46 = savedState36.restoreState(dateTimeParserBucket44); org.joda.time.Chronology chronology47 = dateTimeParserBucket44.getChronology(); org.joda.time.chrono.ISOChronology iSOChronology48 = org.joda.time.chrono.ISOChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField49 = iSOChronology48.millisOfSecond(); org.joda.time.DurationField durationField50 = iSOChronology48.hours(); boolean boolean51 = dateTimeParserBucket44.restoreState((java.lang.Object) iSOChronology48); java.util.Locale locale52 = dateTimeParserBucket44.getLocale(); try { paddedNumber4.printTo(writer7, (org.joda.time.ReadablePartial) timeOfDay22, locale52); } catch (java.lang.NullPointerException e) { } }
Code: public int parseInto(DateTimeParserBucket bucket, String text, int position) { if (position >= text.length()) { return ~position; } char a = text.charAt(position); char b = iValue; if (a != b) { a = Character.toUpperCase(a); b = Character.toUpperCase(b); if (a != b) { a = Character.toLowerCase(a); b = Character.toLowerCase(b); if (a != b) { return ~position; } } } return position + 1; }
tensor([[0.0127, 0.0077, 0.0198,  ..., 0.0104, 0.0071, 0.0058],
        [0.0075, 0.0052, 0.0189,  ..., 0.0088, 0.0040, 0.0038],
        [0.0093, 0.0052, 0.0210,  ..., 0.0116, 0.0043, 0.0047],
        ...,
        [0.0117, 0.0063, 0.0255,  ..., 0.0099, 0.0053, 0.0057],
        [0.0101, 0.0063, 0.0204,  ..., 0.0115, 0.0051, 0.0049],
        [0.0088, 0.0066, 0.0225,  ..., 0.0096, 0.0053, 0.0049]])