18059
Test: public void test1() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test1"); com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.jscomp.JSError[] jSErrorArray1 = compiler0.getErrors(); com.google.javascript.jscomp.CompilerOptions compilerOptions2 = compiler0.options_; com.google.javascript.jscomp.Normalize normalize4 = new com.google.javascript.jscomp.Normalize((com.google.javascript.jscomp.AbstractCompiler) compiler0, true); com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(0); com.google.javascript.jscomp.Compiler compiler7 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.jscomp.JSError[] jSErrorArray8 = compiler7.getErrors(); com.google.javascript.jscomp.ErrorManager errorManager9 = compiler7.getErrorManager(); com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = compiler7.getTypeRegistry(); com.google.javascript.jscomp.parsing.Config config12 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(jSTypeRegistry10, true); com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {}; java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList14 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>(); boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList14, jSTypeArray13); com.google.javascript.rhino.Node node16 = jSTypeRegistry10.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList14); boolean boolean17 = com.google.javascript.jscomp.NodeUtil.isLiteralValue(node16); try { normalize4.process(node6, node16); } catch (java.lang.RuntimeException e) { } }
Code: public void process(Node externs, Node root) { NodeTraversal.traverse(compiler, root, this); if (MAKE_LOCAL_NAMES_UNIQUE) { MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); NodeTraversal t = new NodeTraversal(compiler, renamer); t.traverseRoots(externs, root); } removeDuplicateDeclarations(root); new PropogateConstantAnnotations(compiler, assertOnChange) .process(externs, root); }
tensor([[0.0268, 0.0217, 0.0226,  ..., 0.0399, 0.0146, 0.0115],
        [0.0220, 0.0188, 0.0193,  ..., 0.0449, 0.0120, 0.0112],
        [0.0210, 0.0197, 0.0209,  ..., 0.0489, 0.0138, 0.0074],
        ...,
        [0.0209, 0.0161, 0.0235,  ..., 0.0413, 0.0109, 0.0067],
        [0.0185, 0.0163, 0.0188,  ..., 0.0453, 0.0135, 0.0077],
        [0.0188, 0.0171, 0.0261,  ..., 0.0371, 0.0133, 0.0099]])