101070
Test: public void test0466() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0466"); org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfEra(); org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now((org.joda.time.Chronology) iSOChronology0); org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.minuteOfHour(); org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField5 = gJChronology4.yearOfCentury(); org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology4); int int7 = dateTime6.getEra(); int int8 = dateTime6.getMillisOfSecond(); org.joda.time.DateTime.Property property9 = dateTime6.year(); org.joda.time.ReadableDuration readableDuration10 = null; org.joda.time.DateTime dateTime11 = dateTime6.plus(readableDuration10); int int12 = dateTime11.getMillisOfDay(); org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfDay(); int int14 = dateTime11.get(dateTimeFieldType13); org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField15 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField3, dateTimeFieldType13); java.util.Locale locale16 = null; int int17 = delegatedDateTimeField15.getMaximumShortTextLength(locale16); long long20 = delegatedDateTimeField15.getDifferenceAsLong((long) (byte) 1, (long) (-25200000)); long long23 = delegatedDateTimeField15.getDifferenceAsLong((long) 12, (long) 2760021); org.joda.time.DateTimeField dateTimeField24 = delegatedDateTimeField15.getWrappedField(); java.lang.String str25 = delegatedDateTimeField15.toString(); long long27 = delegatedDateTimeField15.remainder((long) 151); org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField30 = gJChronology29.yearOfCentury(); org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology29); org.joda.time.DurationField durationField32 = gJChronology29.eras(); org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology29); org.joda.time.ReadablePeriod readablePeriod34 = null; org.joda.time.LocalDate localDate36 = localDate33.withPeriodAdded(readablePeriod34, (-28800000)); org.joda.time.LocalDate.Property property37 = localDate33.dayOfMonth(); org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (short) -1); org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField41 = gJChronology40.yearOfCentury(); org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology40); int int43 = dateTime42.getEra(); int int44 = dateTime42.getYear(); boolean boolean45 = instant39.isBefore((org.joda.time.ReadableInstant) dateTime42); org.joda.time.DateTime dateTime47 = dateTime42.withMillis((long) (-25200000)); org.joda.time.ReadablePeriod readablePeriod48 = null; org.joda.time.DateTime dateTime49 = dateTime47.plus(readablePeriod48); int int50 = dateTime47.getYear(); int int51 = property37.compareTo((org.joda.time.ReadableInstant) dateTime47); org.joda.time.LocalDate localDate52 = property37.roundHalfCeilingCopy(); org.joda.time.DateTimeFieldType dateTimeFieldType54 = localDate52.getFieldType(0); org.joda.time.LocalDate.Property property55 = localDate52.dayOfWeek(); org.joda.time.chrono.JulianChronology julianChronology57 = org.joda.time.chrono.JulianChronology.getInstanceUTC(); int int59 = julianChronology57.getMillisOfDay((long) 682); org.joda.time.LocalDate localDate60 = org.joda.time.LocalDate.now((org.joda.time.Chronology) julianChronology57); int int61 = julianChronology57.getMaxYear(); org.joda.time.DateTimeField dateTimeField62 = julianChronology57.centuryOfEra(); org.joda.time.chrono.BasicYearDateTimeField basicYearDateTimeField63 = new org.joda.time.chrono.BasicYearDateTimeField((org.joda.time.chrono.BasicChronology) julianChronology57); long long66 = basicYearDateTimeField63.addWrapField((long) 2759289, 182); org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField69 = gJChronology68.yearOfCentury(); org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology68); org.joda.time.DurationField durationField71 = gJChronology68.eras(); org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology68); org.joda.time.ReadablePeriod readablePeriod73 = null; org.joda.time.LocalDate localDate75 = localDate72.withPeriodAdded(readablePeriod73, (-28800000)); org.joda.time.chrono.ISOChronology iSOChronology76 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology77 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean78 = iSOChronology76.equals((java.lang.Object) iSOChronology77); org.joda.time.chrono.GJChronology gJChronology80 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField81 = gJChronology80.yearOfCentury(); org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology80); org.joda.time.DurationField durationField83 = gJChronology80.eras(); org.joda.time.LocalDate localDate84 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology80); int[] intArray86 = iSOChronology77.get((org.joda.time.ReadablePartial) localDate84, (-1123200000L)); int int87 = basicYearDateTimeField63.getMaximumValue((org.joda.time.ReadablePartial) localDate75, intArray86); java.util.Locale locale89 = null; try { int[] intArray90 = delegatedDateTimeField15.set((org.joda.time.ReadablePartial) localDate52, 804, intArray86, "+00:00:00.010", locale89); } catch (org.joda.time.IllegalFieldValueException e) { } }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0056, 0.0185, 0.0105,  ..., 0.0063, 0.0325, 0.0026],
        [0.0060, 0.0168, 0.0117,  ..., 0.0058, 0.0212, 0.0031],
        [0.0051, 0.0218, 0.0112,  ..., 0.0067, 0.0283, 0.0021],
        ...,
        [0.0036, 0.0181, 0.0115,  ..., 0.0050, 0.0325, 0.0021],
        [0.0049, 0.0181, 0.0114,  ..., 0.0058, 0.0284, 0.0024],
        [0.0041, 0.0173, 0.0128,  ..., 0.0090, 0.0216, 0.0023]])