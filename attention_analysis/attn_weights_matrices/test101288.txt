101288
Test: public void test180() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test180"); org.joda.time.ReadableInterval readableInterval0 = null; org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0); org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0); org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury(); org.joda.time.DurationField durationField4 = chronology2.millis(); org.joda.time.DurationField durationField5 = chronology2.centuries(); org.joda.time.Chronology chronology6 = chronology2.withUTC(); org.joda.time.DurationField durationField7 = chronology6.halfdays(); org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra(); org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra(); org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10); long long14 = dividedDateTimeField11.set(0L, 100); org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear(); org.joda.time.ReadableInterval readableInterval16 = null; org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16); org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16); org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury(); org.joda.time.DurationField durationField20 = chronology18.millis(); org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20); org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15); org.joda.time.ReadablePartial readablePartial23 = null; java.util.Locale locale25 = null; java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, 29227899, locale25); org.joda.time.field.OffsetDateTimeField offsetDateTimeField28 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, 29227899); org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.hourOfDay(); java.lang.String str30 = dateTimeFieldType29.getName(); org.joda.time.ReadableInterval readableInterval32 = null; org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32); org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval32); org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury(); org.joda.time.Partial partial36 = new org.joda.time.Partial(dateTimeFieldType29, (int) (short) 0, chronology34); org.joda.time.ReadableInterval readableInterval37 = null; org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37); org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval37); org.joda.time.DateTimeField dateTimeField40 = chronology39.yearOfCentury(); org.joda.time.DurationField durationField41 = chronology39.millis(); org.joda.time.DateTimeField dateTimeField42 = chronology39.centuryOfEra(); org.joda.time.DateTimeField dateTimeField43 = chronology39.clockhourOfDay(); org.joda.time.ReadablePartial readablePartial44 = null; int[] intArray51 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 }; int int52 = dateTimeField43.getMaximumValue(readablePartial44, intArray51); int int53 = dividedDateTimeField11.getMinimumValue((org.joda.time.ReadablePartial) partial36, intArray51); boolean boolean55 = partial36.equals((java.lang.Object) "29227899"); org.joda.time.ReadableInterval readableInterval56 = null; org.joda.time.ReadableInterval readableInterval57 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval56); org.joda.time.ReadableInterval readableInterval58 = null; boolean boolean59 = readableInterval57.contains(readableInterval58); org.joda.time.PeriodType periodType60 = null; org.joda.time.Period period61 = readableInterval57.toPeriod(periodType60); org.joda.time.DateTime dateTime62 = readableInterval57.getEnd(); boolean boolean63 = partial36.equals((java.lang.Object) readableInterval57); org.joda.time.PeriodType periodType64 = null; org.joda.time.PeriodType periodType65 = org.joda.time.DateTimeUtils.getPeriodType(periodType64); org.joda.time.PeriodType periodType66 = org.joda.time.DateTimeUtils.getPeriodType(periodType64); org.joda.time.Period period67 = readableInterval57.toPeriod(periodType66); org.joda.time.PeriodType periodType68 = org.joda.time.DateTimeUtils.getPeriodType(periodType66); org.joda.time.PeriodType periodType69 = org.joda.time.DateTimeUtils.getPeriodType(periodType68); }
Code: public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) { super(); chronology = DateTimeUtils.getChronology(chronology).withUTC(); iChronology = chronology; if (types == null) { throw new IllegalArgumentException("Types array must not be null"); } if (values == null) { throw new IllegalArgumentException("Values array must not be null"); } if (values.length != types.length) { throw new IllegalArgumentException("Values array must be the same length as the types array"); } if (types.length == 0) { iTypes = types; iValues = values; return; } for (int i = 0; i < types.length; i++) { if (types[i] == null) { throw new IllegalArgumentException("Types array must not contain null: index " + i); } } DurationField lastUnitField = null; for (int i = 0; i < types.length; i++) { DateTimeFieldType loopType = types[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (i > 0) { if (loopUnitField.isSupported() == false) { if (lastUnitField.isSupported()) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } else { throw new IllegalArgumentException("Types array must not contain duplicate unsupported: " + types[i - 1].getName() + " and " + loopType.getName()); } } int compare = lastUnitField.compareTo(loopUnitField); if (compare < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } else if (compare == 0 && lastUnitField.equals(loopUnitField)) { if (types[i - 1].getRangeDurationType() == null) { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } else { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (lastRangeField.compareTo(loopRangeField) < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } if (lastRangeField.compareTo(loopRangeField) == 0) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } } } lastUnitField = loopUnitField; } iTypes = (DateTimeFieldType[]) types.clone(); chronology.validate(this, values); iValues = (int[]) values.clone(); }
tensor([[0.0020, 0.0014, 0.0020,  ..., 0.0010, 0.0013, 0.0009],
        [0.0016, 0.0013, 0.0019,  ..., 0.0008, 0.0011, 0.0007],
        [0.0014, 0.0012, 0.0020,  ..., 0.0009, 0.0009, 0.0006],
        ...,
        [0.0016, 0.0015, 0.0019,  ..., 0.0010, 0.0010, 0.0010],
        [0.0015, 0.0011, 0.0020,  ..., 0.0012, 0.0011, 0.0008],
        [0.0014, 0.0013, 0.0018,  ..., 0.0011, 0.0011, 0.0008]])