101058
Test: public void test0249() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0249"); org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField1 = gJChronology0.yearOfCentury(); org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology0); int int3 = dateTime2.getEra(); int int4 = dateTime2.getMillisOfSecond(); org.joda.time.DateTime.Property property5 = dateTime2.year(); org.joda.time.ReadableDuration readableDuration6 = null; org.joda.time.DateTime dateTime7 = dateTime2.plus(readableDuration6); int int8 = dateTime7.getMillisOfDay(); org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay(); int int10 = dateTime7.get(dateTimeFieldType9); org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.eras(); org.joda.time.field.UnsupportedDurationField unsupportedDurationField12 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType11); org.joda.time.field.PreciseDurationField preciseDurationField14 = new org.joda.time.field.PreciseDurationField(durationFieldType11, 0L); long long15 = preciseDurationField14.getUnitMillis(); org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField16 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType9, (org.joda.time.DurationField) preciseDurationField14); org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean19 = iSOChronology17.equals((java.lang.Object) iSOChronology18); org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField22 = gJChronology21.yearOfCentury(); org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology21); org.joda.time.DurationField durationField24 = gJChronology21.eras(); org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology21); int[] intArray27 = iSOChronology18.get((org.joda.time.ReadablePartial) localDate25, (-1123200000L)); org.joda.time.LocalDate localDate29 = localDate25.minusDays(100); org.joda.time.LocalDate localDate31 = localDate29.withYearOfCentury(9); int int32 = localDate31.getMonthOfYear(); java.util.Locale locale34 = null; try { java.lang.String str35 = unsupportedDateTimeField16.getAsText((org.joda.time.ReadablePartial) localDate31, 2778785, locale34); } catch (java.lang.UnsupportedOperationException e) { } }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0056, 0.0185, 0.0105,  ..., 0.0063, 0.0325, 0.0026],
        [0.0060, 0.0168, 0.0117,  ..., 0.0058, 0.0212, 0.0031],
        [0.0051, 0.0218, 0.0112,  ..., 0.0067, 0.0283, 0.0021],
        ...,
        [0.0036, 0.0181, 0.0115,  ..., 0.0050, 0.0325, 0.0021],
        [0.0049, 0.0181, 0.0114,  ..., 0.0058, 0.0284, 0.0024],
        [0.0041, 0.0173, 0.0128,  ..., 0.0090, 0.0216, 0.0023]])