101192
Test: public void test0234() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0234"); org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean2 = iSOChronology0.equals((java.lang.Object) iSOChronology1); org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.hourOfDay(); long long6 = dateTimeField3.add((long) 197, (long) 870); org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay(); org.joda.time.Chronology chronology8 = null; boolean boolean9 = dateTimeFieldType7.isSupported(chronology8); org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField3, dateTimeFieldType7, 197); org.joda.time.field.RemainderDateTimeField remainderDateTimeField12 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11); org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean15 = iSOChronology13.equals((java.lang.Object) iSOChronology14); org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField18 = gJChronology17.yearOfCentury(); org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology17); org.joda.time.DurationField durationField20 = gJChronology17.eras(); org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology17); int[] intArray23 = iSOChronology14.get((org.joda.time.ReadablePartial) localDate21, (-1123200000L)); org.joda.time.LocalDate localDate25 = localDate21.minusDays(100); org.joda.time.LocalDate localDate27 = localDate25.withYearOfCentury(9); org.joda.time.LocalDate localDate29 = localDate27.withWeekyear(707); org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean33 = iSOChronology31.equals((java.lang.Object) iSOChronology32); org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField36 = gJChronology35.yearOfCentury(); org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology35); org.joda.time.DurationField durationField38 = gJChronology35.eras(); org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology35); int[] intArray41 = iSOChronology32.get((org.joda.time.ReadablePartial) localDate39, (-1123200000L)); try { int[] intArray43 = remainderDateTimeField12.addWrapField((org.joda.time.ReadablePartial) localDate27, 694, intArray41, 1); } catch (java.lang.ArrayIndexOutOfBoundsException e) { } }
Code: public long add(long instant, int value) { if (instant >= iCutover) { instant = iGregorianField.add(instant, value); if (instant < iCutover) { if (instant + iGapDuration < iCutover) { instant = gregorianToJulian(instant); } } } else { instant = iJulianField.add(instant, value); if (instant >= iCutover) { if (instant - iGapDuration >= iCutover) { instant = julianToGregorian(instant); } } } return instant; }
tensor([[0.0123, 0.0201, 0.0151,  ..., 0.0137, 0.0126, 0.0055],
        [0.0082, 0.0163, 0.0198,  ..., 0.0120, 0.0118, 0.0049],
        [0.0095, 0.0154, 0.0148,  ..., 0.0158, 0.0115, 0.0037],
        ...,
        [0.0082, 0.0217, 0.0175,  ..., 0.0117, 0.0139, 0.0045],
        [0.0101, 0.0171, 0.0141,  ..., 0.0148, 0.0134, 0.0036],
        [0.0091, 0.0148, 0.0133,  ..., 0.0197, 0.0141, 0.0049]])