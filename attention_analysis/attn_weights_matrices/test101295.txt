101295
Test: public void test206() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test206"); org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault(); long long3 = dateTimeZone0.convertLocalToUTC((long) (byte) 1, false); org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstanceUTC(); org.joda.time.DateTimeZone dateTimeZone5 = gregorianChronology4.getZone(); long long7 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 479); org.joda.time.ReadableInterval readableInterval8 = null; org.joda.time.ReadableInterval readableInterval9 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval8); org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval8); org.joda.time.DateTimeField dateTimeField11 = chronology10.yearOfCentury(); org.joda.time.DurationField durationField12 = chronology10.millis(); org.joda.time.DurationField durationField13 = chronology10.centuries(); org.joda.time.Chronology chronology14 = chronology10.withUTC(); org.joda.time.DurationField durationField15 = chronology14.halfdays(); org.joda.time.DateTimeField dateTimeField16 = chronology14.yearOfEra(); org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.centuryOfEra(); org.joda.time.field.DividedDateTimeField dividedDateTimeField19 = new org.joda.time.field.DividedDateTimeField(dateTimeField16, dateTimeFieldType17, 10); long long22 = dividedDateTimeField19.set(0L, 100); org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.dayOfYear(); org.joda.time.ReadableInterval readableInterval24 = null; org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24); org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24); org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury(); org.joda.time.DurationField durationField28 = chronology26.millis(); org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField29 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType23, durationField28); org.joda.time.field.RemainderDateTimeField remainderDateTimeField30 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField19, dateTimeFieldType23); org.joda.time.ReadablePartial readablePartial31 = null; java.util.Locale locale33 = null; java.lang.String str34 = dividedDateTimeField19.getAsShortText(readablePartial31, 29227899, locale33); org.joda.time.field.OffsetDateTimeField offsetDateTimeField36 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField19, 29227899); org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.hourOfDay(); java.lang.String str38 = dateTimeFieldType37.getName(); org.joda.time.ReadableInterval readableInterval40 = null; org.joda.time.ReadableInterval readableInterval41 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval40); org.joda.time.Chronology chronology42 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval40); org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfCentury(); org.joda.time.Partial partial44 = new org.joda.time.Partial(dateTimeFieldType37, (int) (short) 0, chronology42); org.joda.time.ReadableInterval readableInterval45 = null; org.joda.time.ReadableInterval readableInterval46 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval45); org.joda.time.Chronology chronology47 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval45); org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfCentury(); org.joda.time.DurationField durationField49 = chronology47.millis(); org.joda.time.DateTimeField dateTimeField50 = chronology47.centuryOfEra(); org.joda.time.DateTimeField dateTimeField51 = chronology47.clockhourOfDay(); org.joda.time.ReadablePartial readablePartial52 = null; int[] intArray59 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 }; int int60 = dateTimeField51.getMaximumValue(readablePartial52, intArray59); int int61 = dividedDateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) partial44, intArray59); boolean boolean63 = partial44.equals((java.lang.Object) "29227899"); org.joda.time.ReadableInterval readableInterval64 = null; org.joda.time.ReadableInterval readableInterval65 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval64); org.joda.time.ReadableInterval readableInterval66 = null; boolean boolean67 = readableInterval65.contains(readableInterval66); org.joda.time.PeriodType periodType68 = null; org.joda.time.Period period69 = readableInterval65.toPeriod(periodType68); org.joda.time.DateTime dateTime70 = readableInterval65.getEnd(); boolean boolean71 = partial44.equals((java.lang.Object) readableInterval65); org.joda.time.ReadableInterval readableInterval72 = null; org.joda.time.ReadableInterval readableInterval73 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval72); org.joda.time.ReadableInterval readableInterval74 = null; boolean boolean75 = readableInterval73.contains(readableInterval74); org.joda.time.Duration duration76 = readableInterval73.toDuration(); org.joda.time.DateTime dateTime77 = readableInterval73.getEnd(); boolean boolean78 = partial44.isMatch((org.joda.time.ReadableInstant) dateTime77); int int79 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime77); }
Code: public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) { super(); chronology = DateTimeUtils.getChronology(chronology).withUTC(); iChronology = chronology; if (types == null) { throw new IllegalArgumentException("Types array must not be null"); } if (values == null) { throw new IllegalArgumentException("Values array must not be null"); } if (values.length != types.length) { throw new IllegalArgumentException("Values array must be the same length as the types array"); } if (types.length == 0) { iTypes = types; iValues = values; return; } for (int i = 0; i < types.length; i++) { if (types[i] == null) { throw new IllegalArgumentException("Types array must not contain null: index " + i); } } DurationField lastUnitField = null; for (int i = 0; i < types.length; i++) { DateTimeFieldType loopType = types[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (i > 0) { if (loopUnitField.isSupported() == false) { if (lastUnitField.isSupported()) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } else { throw new IllegalArgumentException("Types array must not contain duplicate unsupported: " + types[i - 1].getName() + " and " + loopType.getName()); } } int compare = lastUnitField.compareTo(loopUnitField); if (compare < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } else if (compare == 0 && lastUnitField.equals(loopUnitField)) { if (types[i - 1].getRangeDurationType() == null) { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } else { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (lastRangeField.compareTo(loopRangeField) < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } if (lastRangeField.compareTo(loopRangeField) == 0) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } } } lastUnitField = loopUnitField; } iTypes = (DateTimeFieldType[]) types.clone(); chronology.validate(this, values); iValues = (int[]) values.clone(); }
tensor([[0.0020, 0.0014, 0.0020,  ..., 0.0010, 0.0013, 0.0009],
        [0.0016, 0.0013, 0.0019,  ..., 0.0008, 0.0011, 0.0007],
        [0.0014, 0.0012, 0.0020,  ..., 0.0009, 0.0009, 0.0006],
        ...,
        [0.0016, 0.0015, 0.0019,  ..., 0.0010, 0.0010, 0.0010],
        [0.0015, 0.0011, 0.0020,  ..., 0.0012, 0.0011, 0.0008],
        [0.0014, 0.0013, 0.0018,  ..., 0.0011, 0.0011, 0.0008]])