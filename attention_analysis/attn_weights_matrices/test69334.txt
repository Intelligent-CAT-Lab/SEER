69334
Test: public void test555() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test555"); org.jsoup.select.Evaluator.ContainsText containsText1 = new org.jsoup.select.Evaluator.ContainsText("#document"); java.io.InputStream inputStream2 = null; org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parse(inputStream2, "hi!", "hi!"); boolean boolean6 = document5.isBlock(); java.lang.String str7 = document5.toString(); org.jsoup.nodes.Node node8 = document5.parentNode(); org.jsoup.nodes.Document document9 = document5.clone(); org.jsoup.nodes.Document document10 = document9.normalise(); java.io.InputStream inputStream11 = null; java.io.InputStream inputStream14 = null; org.jsoup.parser.Parser parser17 = org.jsoup.parser.Parser.xmlParser(); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse(inputStream14, "#text", "org.jsoup.SerializationException", parser17); org.jsoup.nodes.Document document19 = org.jsoup.helper.DataUtil.parseInputStream(inputStream11, "#root", ":lt(-1)", parser17); java.io.InputStream inputStream20 = null; org.jsoup.parser.Parser parser23 = org.jsoup.parser.Parser.xmlParser(); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse(inputStream20, ":last-child", "", parser23); java.io.InputStream inputStream26 = null; org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parse(inputStream26, "hi!", "hi!"); boolean boolean30 = document29.isBlock(); org.jsoup.nodes.Node node31 = document29.root(); java.util.List<org.jsoup.nodes.Node> nodeList33 = parser23.parseFragmentInput(":matchText", (org.jsoup.nodes.Element) document29, "#text"); org.jsoup.parser.Parser parser35 = parser23.setTrackErrors((int) (byte) 0); org.jsoup.parser.Parser parser37 = parser35.setTrackErrors((int) (byte) -1); org.jsoup.nodes.Document document38 = document19.parser(parser37); org.jsoup.nodes.Document document39 = document10.parser(parser37); java.io.InputStream inputStream40 = null; org.jsoup.nodes.Document document43 = org.jsoup.Jsoup.parse(inputStream40, "hi!", "hi!"); int int44 = document43.elementSiblingIndex(); org.jsoup.nodes.Attributes attributes45 = document43.attributes(); org.jsoup.nodes.Element element47 = document43.appendText(""); org.jsoup.nodes.Document document48 = document43.clone(); java.lang.String[] strArray52 = new java.lang.String[] { ":last-child", ":matchText", "#text" }; java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52); org.jsoup.nodes.Element element55 = document48.classNames((java.util.Set<java.lang.String>) strSet53); org.jsoup.nodes.Node node58 = document48.attr("UTF-8", "#text #text #text #text #text #text #text #text #text #text #text #text #text #text #text #text #text #text #text #text "); boolean boolean59 = containsText1.matches((org.jsoup.nodes.Element) document10, (org.jsoup.nodes.Element) document48); boolean boolean60 = document10.hasParent(); org.jsoup.nodes.Node node61 = document10.parentNode(); }
Code: static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException { if (input == null) return new Document(baseUri); input = ConstrainableInputStream.wrap(input, bufferSize, 0); Document doc = null; boolean fullyRead = false; input.mark(bufferSize); ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1); fullyRead = input.read() == -1; input.reset(); BomCharset bomCharset = detectCharsetFromBom(firstBytes); if (bomCharset != null) charsetName = bomCharset.charset; if (charsetName == null) { String docData = Charset.forName(defaultCharset).decode(firstBytes).toString(); doc = parser.parseInput(docData, baseUri); Elements metaElements = doc.select("meta[http-equiv=content-type], meta[charset]"); String foundCharset = null; for (Element meta : metaElements) { if (meta.hasAttr("http-equiv")) foundCharset = getCharsetFromContentType(meta.attr("content")); if (foundCharset == null && meta.hasAttr("charset")) foundCharset = meta.attr("charset"); if (foundCharset != null) break; } if (foundCharset == null && doc.childNodeSize() > 0) { Node first = doc.childNode(0); XmlDeclaration decl = null; if (first instanceof XmlDeclaration) decl = (XmlDeclaration) first; else if (first instanceof Comment) { Comment comment = (Comment) first; if (comment.isXmlDeclaration()) decl = comment.asXmlDeclaration(); } if (decl != null) { if (decl.name().equalsIgnoreCase("xml")) foundCharset = decl.attr("encoding"); } } foundCharset = validateCharset(foundCharset); if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { foundCharset = foundCharset.trim().replaceAll("[\"']", ""); charsetName = foundCharset; doc = null; } else if (!fullyRead) { doc = null; } } else { Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML"); } if (doc == null) { if (charsetName == null) charsetName = defaultCharset; BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize); if (bomCharset != null && bomCharset.offset) reader.skip(1); try { doc = parser.parseInput(reader, baseUri); } catch (UncheckedIOException e) { throw e.ioException(); } Charset charset = Charset.forName(charsetName); doc.outputSettings().charset(charset); } input.close(); return doc; }
tensor([[0.0080, 0.0107, 0.0042,  ..., 0.0027, 0.0024, 0.0015],
        [0.0074, 0.0104, 0.0050,  ..., 0.0030, 0.0020, 0.0009],
        [0.0081, 0.0115, 0.0050,  ..., 0.0033, 0.0019, 0.0010],
        ...,
        [0.0091, 0.0105, 0.0060,  ..., 0.0027, 0.0020, 0.0011],
        [0.0092, 0.0115, 0.0047,  ..., 0.0036, 0.0023, 0.0009],
        [0.0085, 0.0090, 0.0042,  ..., 0.0044, 0.0026, 0.0011]])