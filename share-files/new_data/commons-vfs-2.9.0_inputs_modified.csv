,method,test
0,"    public static void fatal(final Log vfsLog, final Log commonsLog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.fatal(message, t);
        } else if (commonsLog != null) {
            commonsLog.fatal(message, t);
        }
    }","  public void test0()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("")qyTvK-YWNFB(HIz|"");
      Log4JLogger log4JLogger0 = new Log4JLogger();
      VfsLog.fatal((Log) jdk14Logger0, (Log) log4JLogger0, ""dirFilter"");
  }"
1,"    public static void fatal(final Log vfsLog, final Log commonsLog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.fatal(message, t);
        } else if (commonsLog != null) {
            commonsLog.fatal(message, t);
        }
    }","  public void test1()  throws Throwable  {
      Log4JLogger log4JLogger0 = new Log4JLogger("""");
      MockThrowable mockThrowable0 = new MockThrowable();
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("""");
      VfsLog.fatal((Log) log4JLogger0, (Log) jdk14Logger0, """", (Throwable) mockThrowable0);
}"
2,"    public static void error(final Log vfsLog, final Log commonsLog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.error(message, t);
        } else if (commonsLog != null) {
            commonsLog.error(message, t);
        }
    }","  public void test2()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      Log4JLogger log4JLogger0 = new Log4JLogger("""");
      VfsLog.error((Log) log4JLogger0, (Log) noOpLog0, """");
}"
3,"    public static void info(final Log vfsLog, final Log commonsLog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.info(message, t);
        } else if (commonsLog != null) {
            commonsLog.info(message, t);
        }
    }","  public void test3()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""MLFDS^Qr1{"");
      VfsLog.info((Log) jdk14Logger0, (Log) null, ""tb"");
  }"
4,"    public static void info(final Log vfsLog, final Log commonsLog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.info(message, t);
        } else if (commonsLog != null) {
            commonsLog.info(message, t);
        }
    }","  public void test4()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("""");
      NoOpLog noOpLog1 = new NoOpLog("""");
      VfsLog.info((Log) noOpLog1, (Log) noOpLog0, """", (Throwable) null);
}"
5,"    public static void debug(final Log vfsLog, final Log commonslog, final String message) {
        if (vfsLog != null) {
            vfsLog.debug(message);
        } else if (commonslog != null) {
            commonslog.debug(message);
        }
    }","  public void test5()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("""");
      NoOpLog noOpLog1 = new NoOpLog("""");
      VfsLog.debug((Log) noOpLog1, (Log) noOpLog0, ""_*;H+@`HqA3=~IH"", (Throwable) null);
}"
6,"    public static void debug(final Log vfsLog, final Log commonslog, final String message) {
        if (vfsLog != null) {
            vfsLog.debug(message);
        } else if (commonslog != null) {
            commonslog.debug(message);
        }
    }","  public void test6()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""rg.apache.commonsNvfs2.VfsLog"");
      VfsLog.debug((Log) jdk13LumberjackLogger0, (Log) null, (String) null);
  }"
7,"    public static void warn(final Log vfsLog, final Log commonslog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.warn(message, t);
        } else if (commonslog != null) {
            commonslog.warn(message, t);
        }
    }","  public void test7()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog((String) null);
      SQLDataException sQLDataException0 = new SQLDataException(""[3eMD"", (String) null, 5);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLDataException0);
      // Undeclared exception!
      try { 
        VfsLog.warn((Log) simpleLog0, (Log) simpleLog0, (String) null, (Throwable) sQLNonTransientConnectionException0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.logging.impl.SimpleLog"", e);
      }
  }"
8,"    public static void warn(final Log vfsLog, final Log commonslog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.warn(message, t);
        } else if (commonslog != null) {
            commonslog.warn(message, t);
        }
    }","  public void test8()  throws Throwable  {
      Log4JLogger log4JLogger0 = new Log4JLogger();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        VfsLog.warn((Log) log4JLogger0, (Log) log4JLogger0, """", (Throwable) sQLNonTransientConnectionException0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.log4j.CategoryKey"", e);
      }
  }"
9,"    public static void warn(final Log vfsLog, final Log commonslog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.warn(message, t);
        } else if (commonslog != null) {
            commonslog.warn(message, t);
        }
    }","  public void test9()  throws Throwable  {
      Log4JLogger log4JLogger0 = new Log4JLogger();
      // Undeclared exception!
      try { 
        VfsLog.warn((Log) log4JLogger0, (Log) log4JLogger0, "")qyTvK-YWNFB(HIz|"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.log4j.CategoryKey"", e);
      }
  }"
10,"    public static void info(final Log vfsLog, final Log commonsLog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.info(message, t);
        } else if (commonsLog != null) {
            commonsLog.info(message, t);
        }
    }","  public void test10()  throws Throwable  {
      Log4JLogger log4JLogger0 = new Log4JLogger();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("""", "".v<xuN:dz"", (Throwable) null);
      // Undeclared exception!
      try { 
        VfsLog.info((Log) log4JLogger0, (Log) log4JLogger0, """", (Throwable) sQLNonTransientException0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.log4j.CategoryKey"", e);
      }
  }"
11,"    public static void info(final Log vfsLog, final Log commonsLog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.info(message, t);
        } else if (commonsLog != null) {
            commonsLog.info(message, t);
        }
    }","  public void test11()  throws Throwable  {
      Log4JLogger log4JLogger0 = new Log4JLogger();
      // Undeclared exception!
      try { 
        VfsLog.info((Log) log4JLogger0, (Log) log4JLogger0, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.log4j.CategoryKey"", e);
      }
  }"
12,"    public static void fatal(final Log vfsLog, final Log commonsLog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.fatal(message, t);
        } else if (commonsLog != null) {
            commonsLog.fatal(message, t);
        }
    }","  public void test12()  throws Throwable  {
      Log4JLogger log4JLogger0 = new Log4JLogger();
      // Undeclared exception!
      try { 
        VfsLog.fatal((Log) null, (Log) log4JLogger0, ""oLzwbI;71)ch"", (Throwable) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.log4j.CategoryKey"", e);
      }
  }"
13,"    public static void error(final Log vfsLog, final Log commonsLog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.error(message, t);
        } else if (commonsLog != null) {
            commonsLog.error(message, t);
        }
    }","  public void test13()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog((String) null);
      NoOpLog noOpLog0 = new NoOpLog("""");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("":an attempt to override final parameter: "", """");
      // Undeclared exception!
      try { 
        VfsLog.error((Log) simpleLog0, (Log) noOpLog0, (String) null, (Throwable) sQLTransactionRollbackException0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.logging.impl.SimpleLog"", e);
      }
  }"
14,"    public static void error(final Log vfsLog, final Log commonsLog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.error(message, t);
        } else if (commonsLog != null) {
            commonsLog.error(message, t);
        }
    }","  public void test14()  throws Throwable  {
      Log4JLogger log4JLogger0 = new Log4JLogger();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null);
      // Undeclared exception!
      try { 
        VfsLog.error((Log) log4JLogger0, (Log) log4JLogger0, (String) null, (Throwable) sQLNonTransientException0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.log4j.CategoryKey"", e);
      }
  }"
15,"    public static void error(final Log vfsLog, final Log commonsLog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.error(message, t);
        } else if (commonsLog != null) {
            commonsLog.error(message, t);
        }
    }","  public void test15()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog((String) null);
      // Undeclared exception!
      try { 
        VfsLog.error((Log) null, (Log) simpleLog0, ""REQUIRE"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.logging.impl.SimpleLog"", e);
      }
  }"
16,"    public static void error(final Log vfsLog, final Log commonsLog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.error(message, t);
        } else if (commonsLog != null) {
            commonsLog.error(message, t);
        }
    }","  public void test16()  throws Throwable  {
      Log4JLogger log4JLogger0 = new Log4JLogger();
      // Undeclared exception!
      try { 
        VfsLog.error((Log) log4JLogger0, (Log) log4JLogger0, ""org.apache.commons.vfs2.VfsLog"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.log4j.CategoryKey"", e);
      }
  }"
17,"    public static void debug(final Log vfsLog, final Log commonslog, final String message) {
        if (vfsLog != null) {
            vfsLog.debug(message);
        } else if (commonslog != null) {
            commonslog.debug(message);
        }
    }","  public void test17()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""Hm4Q^n=S\""`4"");
      SimpleLog simpleLog0 = new SimpleLog((String) null);
      simpleLog0.setLevel((-514));
      // Undeclared exception!
      try { 
        VfsLog.debug((Log) null, (Log) simpleLog0, ""Hm4Q^n=S\""`4"", (Throwable) sQLFeatureNotSupportedException0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.logging.impl.SimpleLog"", e);
      }
  }"
18,"    public static void debug(final Log vfsLog, final Log commonslog, final String message) {
        if (vfsLog != null) {
            vfsLog.debug(message);
        } else if (commonslog != null) {
            commonslog.debug(message);
        }
    }","  public void test18()  throws Throwable  {
      Log4JLogger log4JLogger0 = new Log4JLogger();
      SQLException sQLException0 = new SQLException("""", """");
      // Undeclared exception!
      try { 
        VfsLog.debug((Log) log4JLogger0, (Log) log4JLogger0, """", (Throwable) sQLException0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.log4j.CategoryKey"", e);
      }
  }"
19,"    public static void debug(final Log vfsLog, final Log commonslog, final String message) {
        if (vfsLog != null) {
            vfsLog.debug(message);
        } else if (commonslog != null) {
            commonslog.debug(message);
        }
    }","  public void test19()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog((String) null);
      simpleLog0.setLevel(0);
      // Undeclared exception!
      try { 
        VfsLog.debug((Log) null, (Log) simpleLog0, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.logging.impl.SimpleLog"", e);
      }
  }"
20,"    public static void debug(final Log vfsLog, final Log commonslog, final String message) {
        if (vfsLog != null) {
            vfsLog.debug(message);
        } else if (commonslog != null) {
            commonslog.debug(message);
        }
    }","  public void test20()  throws Throwable  {
      Log4JLogger log4JLogger0 = new Log4JLogger();
      // Undeclared exception!
      try { 
        VfsLog.debug((Log) log4JLogger0, (Log) log4JLogger0, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.log4j.CategoryKey"", e);
      }
  }"
21,"    public static void fatal(final Log vfsLog, final Log commonsLog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.fatal(message, t);
        } else if (commonsLog != null) {
            commonsLog.fatal(message, t);
        }
    }","  public void test21()  throws Throwable  {
      VfsLog.fatal((Log) null, (Log) null, ""sR+4bq/;T%0i54"");
  }"
22,"    public static void fatal(final Log vfsLog, final Log commonsLog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.fatal(message, t);
        } else if (commonsLog != null) {
            commonsLog.fatal(message, t);
        }
    }","  public void test22()  throws Throwable  {
      Log4JLogger log4JLogger0 = new Log4JLogger();
      // Undeclared exception!
      try { 
        VfsLog.fatal((Log) null, (Log) log4JLogger0, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.log4j.CategoryKey"", e);
      }
  }"
23,"    public static void fatal(final Log vfsLog, final Log commonsLog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.fatal(message, t);
        } else if (commonsLog != null) {
            commonsLog.fatal(message, t);
        }
    }","  public void test23()  throws Throwable  {
      VfsLog.fatal((Log) null, (Log) null, """", (Throwable) null);
  }"
24,"    public static void error(final Log vfsLog, final Log commonsLog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.error(message, t);
        } else if (commonsLog != null) {
            commonsLog.error(message, t);
        }
    }","  public void test24()  throws Throwable  {
      VfsLog.error((Log) null, (Log) null, ""MLFDS^Qr1{"");
  }"
25,"    public static void error(final Log vfsLog, final Log commonsLog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.error(message, t);
        } else if (commonsLog != null) {
            commonsLog.error(message, t);
        }
    }","  public void test25()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      MockException mockException0 = new MockException((String) null, sQLFeatureNotSupportedException0);
      VfsLog.error((Log) null, (Log) null, ""REQUIRE"", (Throwable) mockException0);
  }"
26,"    public static void error(final Log vfsLog, final Log commonsLog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.error(message, t);
        } else if (commonsLog != null) {
            commonsLog.error(message, t);
        }
    }","  public void test26()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""rg.apache.commonsNvfs2.VfsLog"");
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      VfsLog.error((Log) null, (Log) jdk13LumberjackLogger0, (String) null, (Throwable) mockIOException0);
  }"
27,"    public static void info(final Log vfsLog, final Log commonsLog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.info(message, t);
        } else if (commonsLog != null) {
            commonsLog.info(message, t);
        }
    }","  public void test27()  throws Throwable  {
      Log4JLogger log4JLogger0 = new Log4JLogger("">l|'+'`1*A58V?"");
      VfsLog.info((Log) null, (Log) log4JLogger0, "">l|'+'`1*A58V?"");
  }"
28,"    public static void info(final Log vfsLog, final Log commonsLog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.info(message, t);
        } else if (commonsLog != null) {
            commonsLog.info(message, t);
        }
    }","  public void test28()  throws Throwable  {
      VfsLog.info((Log) null, (Log) null, """");
  }"
29,"    public static void info(final Log vfsLog, final Log commonsLog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.info(message, t);
        } else if (commonsLog != null) {
            commonsLog.info(message, t);
        }
    }","  public void test29()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      NoOpLog noOpLog0 = new NoOpLog(""sR+4bq/;T%0i54"");
      VfsLog.info((Log) null, (Log) noOpLog0, ""sR+4bq/;T%0i54"", (Throwable) sQLTransactionRollbackException0);
}"
30,"    public static void info(final Log vfsLog, final Log commonsLog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.info(message, t);
        } else if (commonsLog != null) {
            commonsLog.info(message, t);
        }
    }","  public void test30()  throws Throwable  {
      VfsLog.info((Log) null, (Log) null, ""qIX7}"", (Throwable) null);
  }"
31,"    public static void debug(final Log vfsLog, final Log commonslog, final String message) {
        if (vfsLog != null) {
            vfsLog.debug(message);
        } else if (commonslog != null) {
            commonslog.debug(message);
        }
    }","  public void test31()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      VfsLog.debug((Log) null, (Log) null, ""MFR68XP"", (Throwable) sQLNonTransientConnectionException0);
}"
32,"    public static void debug(final Log vfsLog, final Log commonslog, final String message) {
        if (vfsLog != null) {
            vfsLog.debug(message);
        } else if (commonslog != null) {
            commonslog.debug(message);
        }
    }","  public void test32()  throws Throwable  {
      VfsLog.debug((Log) null, (Log) null, """");
  }"
33,"    public static void warn(final Log vfsLog, final Log commonslog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.warn(message, t);
        } else if (commonslog != null) {
            commonslog.warn(message, t);
        }
    }","  public void test33()  throws Throwable  {
      VfsLog.warn((Log) null, (Log) null, ""org.eclipse.jetty.util.Uptime"");
  }"
34,"    public static void warn(final Log vfsLog, final Log commonslog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.warn(message, t);
        } else if (commonslog != null) {
            commonslog.warn(message, t);
        }
    }","  public void test34()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""MLFDS^Qr1{"");
      VfsLog.warn((Log) jdk14Logger0, (Log) null, (String) null);
  }"
35,"    public static void warn(final Log vfsLog, final Log commonslog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.warn(message, t);
        } else if (commonslog != null) {
            commonslog.warn(message, t);
        }
    }","  public void test35()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog(""9t5,L"");
      VfsLog.warn((Log) null, (Log) noOpLog0, ""9t5,L"");
}"
36,"    public static void warn(final Log vfsLog, final Log commonslog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.warn(message, t);
        } else if (commonslog != null) {
            commonslog.warn(message, t);
        }
    }","  public void test36()  throws Throwable  {
      VfsLog.warn((Log) null, (Log) null, ""qIX7}"", (Throwable) null);
  }"
37,"    public static void warn(final Log vfsLog, final Log commonslog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.warn(message, t);
        } else if (commonslog != null) {
            commonslog.warn(message, t);
        }
    }","  public void test37()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""SgO:LK{<%Gp6?@;"");
      MockException mockException0 = new MockException();
      VfsLog.warn((Log) jdk14Logger0, (Log) null, (String) null, (Throwable) mockException0);
  }"
38,"    public static void warn(final Log vfsLog, final Log commonslog, final String message, final Throwable t) {
        if (vfsLog != null) {
            vfsLog.warn(message, t);
        } else if (commonslog != null) {
            commonslog.warn(message, t);
        }
    }","  public void test38()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""SgO:LK{<%Gp6?@;"");
      MockException mockException0 = new MockException();
      VfsLog.warn((Log) null, (Log) jdk14Logger0, ""SgO:LK{<%Gp6?@;"", (Throwable) mockException0);
  }"
39,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final FileSystemOptions other = (FileSystemOptions) obj;
        return compareTo(other) == 0;
    }","  public void test0()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FileSystemOptions fileSystemOptions1 = new FileSystemOptions();
}"
40,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final FileSystemOptions other = (FileSystemOptions) obj;
        return compareTo(other) == 0;
    }","  public void test1()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FileSystemOptions fileSystemOptions1 = new FileSystemOptions();
      Class<VirtualFileSystem> class0 = VirtualFileSystem.class;
      fileSystemOptions1.setOption(class0, ""com.google.common.collect.FluentIterable$FromIterableFunction"", (Object) null);
      boolean boolean0 = fileSystemOptions0.equals(fileSystemOptions1);
}"
41,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final FileSystemOptions other = (FileSystemOptions) obj;
        return compareTo(other) == 0;
    }","  public void test2()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FileSystemOptions fileSystemOptions1 = new FileSystemOptions();
      Class<VirtualFileSystem> class0 = VirtualFileSystem.class;
      fileSystemOptions1.setOption(class0, ""com.google.common.collect.FluentIterable$FromIterableFunction"", (Object) null);
      boolean boolean0 = fileSystemOptions0.equals(fileSystemOptions1);
}"
42,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final FileSystemOptions other = (FileSystemOptions) obj;
        return compareTo(other) == 0;
    }","  public void test3()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      boolean boolean0 = fileSystemOptions0.equals(fileSystemOptions0);
}"
43,"    <T> T getOption(final Class<? extends FileSystem> fileSystemClass, final String name) {
        final FileSystemOptionKey key = new FileSystemOptionKey(fileSystemClass, name);
        return (T) options.get(key);
    }","  public void test4()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<VirtualFileSystem> class0 = VirtualFileSystem.class;
      Integer integer0 = fileSystemOptions0.getOption((Class<? extends FileSystem>) class0, ""`Ol(j`,`v\""'l^bGT"");
}"
44,"    <T> T getOption(final Class<? extends FileSystem> fileSystemClass, final String name) {
        final FileSystemOptionKey key = new FileSystemOptionKey(fileSystemClass, name);
        return (T) options.get(key);
    }","  public void test5()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<VirtualFileSystem> class0 = VirtualFileSystem.class;
      fileSystemOptions0.setOption(class0, """", ""`Ol(j`,`v\""'l^bGT"");
      String string0 = fileSystemOptions0.getOption((Class<? extends FileSystem>) class0, """");
}"
45,"    void setOption(final Class<? extends FileSystem> fileSystemClass, final String name, final Object value) {
        options.put(new FileSystemOptionKey(fileSystemClass, name), value);
    }","  public void test6()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<VirtualFileSystem> class0 = VirtualFileSystem.class;
      // Undeclared exception!
      try { 
        fileSystemOptions0.setOption(class0, (String) null, fileSystemOptions0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.FileSystemOptions$FileSystemOptionKey"", e);
      }
  }"
46,"    <T> T getOption(final Class<? extends FileSystem> fileSystemClass, final String name) {
        final FileSystemOptionKey key = new FileSystemOptionKey(fileSystemClass, name);
        return (T) options.get(key);
    }","  public void test7()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<VirtualFileSystem> class0 = VirtualFileSystem.class;
      fileSystemOptions0.setOption(class0, ""{e4t++&OunY/?m=`"", class0);
      // Undeclared exception!
      try { 
        fileSystemOptions0.getOption((Class<? extends FileSystem>) class0, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.FileSystemOptions$FileSystemOptionKey"", e);
      }
  }"
47,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final FileSystemOptions other = (FileSystemOptions) obj;
        return compareTo(other) == 0;
    }","  public void test8()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FileSystemOptions fileSystemOptions1 = new FileSystemOptions();
      Class<VirtualFileSystem> class0 = VirtualFileSystem.class;
      fileSystemOptions0.setOption(class0, ""J9=D{"", fileSystemOptions0);
      fileSystemOptions1.setOption(class0, ""J9=D{"", (Object) null);
      // Undeclared exception!
      try { 
        fileSystemOptions0.equals(fileSystemOptions1);
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
48,"    public int compareTo(final FileSystemOptions other) {
        if (this == other) {
            // the same instance
            return 0;
        }

        final int propsSz = options == null ? 0 : options.size();
        final int propsFkSz = other.options == null ? 0 : other.options.size();
        if (propsSz < propsFkSz) {
            return -1;
        }
        if (propsSz > propsFkSz) {
            return 1;
        }
        if (propsSz == 0) {
            // props empty
            return 0;
        }

        // ensure proper sequence of options
        final SortedMap<FileSystemOptionKey, Object> myOptions = options instanceof SortedMap
                ? (SortedMap<FileSystemOptionKey, Object>) options
                : new TreeMap<>(options);
        final SortedMap<FileSystemOptionKey, Object> theirOptions = other.options instanceof SortedMap
                ? (SortedMap<FileSystemOptionKey, Object>) other.options
                : new TreeMap<>(other.options);
        final Iterator<FileSystemOptionKey> optKeysIter = myOptions.keySet().iterator();
        final Iterator<FileSystemOptionKey> otherKeysIter = theirOptions.keySet().iterator();
        while (optKeysIter.hasNext()) {
            final int comp = optKeysIter.next().compareTo(otherKeysIter.next());
            if (comp != 0) {
                return comp;
            }
        }

        final int hash = Arrays.deepHashCode(myOptions.values().toArray());
        final int hashFk = Arrays.deepHashCode(theirOptions.values().toArray());
        return Integer.compare(hash, hashFk);

        // TODO: compare Entry by Entry ??
    }","  public void test9()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FileSystemOptions fileSystemOptions1 = new FileSystemOptions();
      Class<VirtualFileSystem> class0 = VirtualFileSystem.class;
      fileSystemOptions1.setOption(class0, ""org.apache.commons.vfs2.FileSystemOptions"", fileSystemOptions1);
      fileSystemOptions0.setOption(class0, ""org.apache.commons.vfs2.FileSystemOptions"", fileSystemOptions1);
      // Undeclared exception!
      try { 
        fileSystemOptions0.compareTo(fileSystemOptions1);
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
49,"    public int compareTo(final FileSystemOptions other) {
        if (this == other) {
            // the same instance
            return 0;
        }

        final int propsSz = options == null ? 0 : options.size();
        final int propsFkSz = other.options == null ? 0 : other.options.size();
        if (propsSz < propsFkSz) {
            return -1;
        }
        if (propsSz > propsFkSz) {
            return 1;
        }
        if (propsSz == 0) {
            // props empty
            return 0;
        }

        // ensure proper sequence of options
        final SortedMap<FileSystemOptionKey, Object> myOptions = options instanceof SortedMap
                ? (SortedMap<FileSystemOptionKey, Object>) options
                : new TreeMap<>(options);
        final SortedMap<FileSystemOptionKey, Object> theirOptions = other.options instanceof SortedMap
                ? (SortedMap<FileSystemOptionKey, Object>) other.options
                : new TreeMap<>(other.options);
        final Iterator<FileSystemOptionKey> optKeysIter = myOptions.keySet().iterator();
        final Iterator<FileSystemOptionKey> otherKeysIter = theirOptions.keySet().iterator();
        while (optKeysIter.hasNext()) {
            final int comp = optKeysIter.next().compareTo(otherKeysIter.next());
            if (comp != 0) {
                return comp;
            }
        }

        final int hash = Arrays.deepHashCode(myOptions.values().toArray());
        final int hashFk = Arrays.deepHashCode(theirOptions.values().toArray());
        return Integer.compare(hash, hashFk);

        // TODO: compare Entry by Entry ??
    }","  public void test10()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      // Undeclared exception!
      try { 
        fileSystemOptions0.compareTo((FileSystemOptions) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.FileSystemOptions"", e);
      }
  }"
50,"    public int compareTo(final FileSystemOptions other) {
        if (this == other) {
            // the same instance
            return 0;
        }

        final int propsSz = options == null ? 0 : options.size();
        final int propsFkSz = other.options == null ? 0 : other.options.size();
        if (propsSz < propsFkSz) {
            return -1;
        }
        if (propsSz > propsFkSz) {
            return 1;
        }
        if (propsSz == 0) {
            // props empty
            return 0;
        }

        // ensure proper sequence of options
        final SortedMap<FileSystemOptionKey, Object> myOptions = options instanceof SortedMap
                ? (SortedMap<FileSystemOptionKey, Object>) options
                : new TreeMap<>(options);
        final SortedMap<FileSystemOptionKey, Object> theirOptions = other.options instanceof SortedMap
                ? (SortedMap<FileSystemOptionKey, Object>) other.options
                : new TreeMap<>(other.options);
        final Iterator<FileSystemOptionKey> optKeysIter = myOptions.keySet().iterator();
        final Iterator<FileSystemOptionKey> otherKeysIter = theirOptions.keySet().iterator();
        while (optKeysIter.hasNext()) {
            final int comp = optKeysIter.next().compareTo(otherKeysIter.next());
            if (comp != 0) {
                return comp;
            }
        }

        final int hash = Arrays.deepHashCode(myOptions.values().toArray());
        final int hashFk = Arrays.deepHashCode(theirOptions.values().toArray());
        return Integer.compare(hash, hashFk);

        // TODO: compare Entry by Entry ??
    }","  public void test11()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FileSystemOptions fileSystemOptions1 = new FileSystemOptions();
      int int0 = fileSystemOptions1.compareTo(fileSystemOptions0);
}"
51,"    public int compareTo(final FileSystemOptions other) {
        if (this == other) {
            // the same instance
            return 0;
        }

        final int propsSz = options == null ? 0 : options.size();
        final int propsFkSz = other.options == null ? 0 : other.options.size();
        if (propsSz < propsFkSz) {
            return -1;
        }
        if (propsSz > propsFkSz) {
            return 1;
        }
        if (propsSz == 0) {
            // props empty
            return 0;
        }

        // ensure proper sequence of options
        final SortedMap<FileSystemOptionKey, Object> myOptions = options instanceof SortedMap
                ? (SortedMap<FileSystemOptionKey, Object>) options
                : new TreeMap<>(options);
        final SortedMap<FileSystemOptionKey, Object> theirOptions = other.options instanceof SortedMap
                ? (SortedMap<FileSystemOptionKey, Object>) other.options
                : new TreeMap<>(other.options);
        final Iterator<FileSystemOptionKey> optKeysIter = myOptions.keySet().iterator();
        final Iterator<FileSystemOptionKey> otherKeysIter = theirOptions.keySet().iterator();
        while (optKeysIter.hasNext()) {
            final int comp = optKeysIter.next().compareTo(otherKeysIter.next());
            if (comp != 0) {
                return comp;
            }
        }

        final int hash = Arrays.deepHashCode(myOptions.values().toArray());
        final int hashFk = Arrays.deepHashCode(theirOptions.values().toArray());
        return Integer.compare(hash, hashFk);

        // TODO: compare Entry by Entry ??
    }","  public void test12()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      int int0 = fileSystemOptions0.compareTo(fileSystemOptions0);
}"
52,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final FileSystemOptions other = (FileSystemOptions) obj;
        return compareTo(other) == 0;
    }","  public void test13()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FileSystemOptions fileSystemOptions1 = new FileSystemOptions();
}"
53,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final FileSystemOptions other = (FileSystemOptions) obj;
        return compareTo(other) == 0;
    }","  public void test14()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FileSystemOptions fileSystemOptions1 = new FileSystemOptions();
      Class<VirtualFileSystem> class0 = VirtualFileSystem.class;
      fileSystemOptions1.setOption(class0, """", class0);
      boolean boolean0 = fileSystemOptions1.equals(fileSystemOptions0);
}"
54,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final FileSystemOptions other = (FileSystemOptions) obj;
        return compareTo(other) == 0;
    }","  public void test15()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FileSystemOptions fileSystemOptions1 = new FileSystemOptions();
      Class<VirtualFileSystem> class0 = VirtualFileSystem.class;
      fileSystemOptions1.setOption(class0, """", class0);
      boolean boolean0 = fileSystemOptions1.equals(fileSystemOptions0);
}"
55,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final FileSystemOptions other = (FileSystemOptions) obj;
        return compareTo(other) == 0;
    }","  public void test16()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      boolean boolean0 = fileSystemOptions0.equals((Object) null);
}"
56,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final FileSystemOptions other = (FileSystemOptions) obj;
        return compareTo(other) == 0;
    }","  public void test17()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      boolean boolean0 = fileSystemOptions0.equals("""");
}"
57,"    public int compareTo(final FileSystemOptions other) {
        if (this == other) {
            // the same instance
            return 0;
        }

        final int propsSz = options == null ? 0 : options.size();
        final int propsFkSz = other.options == null ? 0 : other.options.size();
        if (propsSz < propsFkSz) {
            return -1;
        }
        if (propsSz > propsFkSz) {
            return 1;
        }
        if (propsSz == 0) {
            // props empty
            return 0;
        }

        // ensure proper sequence of options
        final SortedMap<FileSystemOptionKey, Object> myOptions = options instanceof SortedMap
                ? (SortedMap<FileSystemOptionKey, Object>) options
                : new TreeMap<>(options);
        final SortedMap<FileSystemOptionKey, Object> theirOptions = other.options instanceof SortedMap
                ? (SortedMap<FileSystemOptionKey, Object>) other.options
                : new TreeMap<>(other.options);
        final Iterator<FileSystemOptionKey> optKeysIter = myOptions.keySet().iterator();
        final Iterator<FileSystemOptionKey> otherKeysIter = theirOptions.keySet().iterator();
        while (optKeysIter.hasNext()) {
            final int comp = optKeysIter.next().compareTo(otherKeysIter.next());
            if (comp != 0) {
                return comp;
            }
        }

        final int hash = Arrays.deepHashCode(myOptions.values().toArray());
        final int hashFk = Arrays.deepHashCode(theirOptions.values().toArray());
        return Integer.compare(hash, hashFk);

        // TODO: compare Entry by Entry ??
    }","  public void test18()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FileSystemOptions fileSystemOptions1 = new FileSystemOptions();
      Class<VirtualFileSystem> class0 = VirtualFileSystem.class;
      fileSystemOptions0.setOption(class0, ""nl"", class0);
      fileSystemOptions1.setOption(class0, """", class0);
      int int0 = fileSystemOptions1.compareTo(fileSystemOptions0);
}"
58,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final FileSystemOptions other = (FileSystemOptions) obj;
        return compareTo(other) == 0;
    }","  public void test19()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FileSystemOptions fileSystemOptions1 = new FileSystemOptions();
      Class<VirtualFileSystem> class0 = VirtualFileSystem.class;
      fileSystemOptions0.setOption(class0, ""nl"", class0);
      fileSystemOptions1.setOption(class0, """", class0);
      int int0 = fileSystemOptions1.compareTo(fileSystemOptions0);
}"
59,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final FileSystemOptions other = (FileSystemOptions) obj;
        return compareTo(other) == 0;
    }","  public void test20()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<VirtualFileSystem> class0 = VirtualFileSystem.class;
      FileSystemOptions fileSystemOptions1 = new FileSystemOptions();
}"
60,"    public int compareTo(final FileSystemOptions other) {
        if (this == other) {
            // the same instance
            return 0;
        }

        final int propsSz = options == null ? 0 : options.size();
        final int propsFkSz = other.options == null ? 0 : other.options.size();
        if (propsSz < propsFkSz) {
            return -1;
        }
        if (propsSz > propsFkSz) {
            return 1;
        }
        if (propsSz == 0) {
            // props empty
            return 0;
        }

        // ensure proper sequence of options
        final SortedMap<FileSystemOptionKey, Object> myOptions = options instanceof SortedMap
                ? (SortedMap<FileSystemOptionKey, Object>) options
                : new TreeMap<>(options);
        final SortedMap<FileSystemOptionKey, Object> theirOptions = other.options instanceof SortedMap
                ? (SortedMap<FileSystemOptionKey, Object>) other.options
                : new TreeMap<>(other.options);
        final Iterator<FileSystemOptionKey> optKeysIter = myOptions.keySet().iterator();
        final Iterator<FileSystemOptionKey> otherKeysIter = theirOptions.keySet().iterator();
        while (optKeysIter.hasNext()) {
            final int comp = optKeysIter.next().compareTo(otherKeysIter.next());
            if (comp != 0) {
                return comp;
            }
        }

        final int hash = Arrays.deepHashCode(myOptions.values().toArray());
        final int hashFk = Arrays.deepHashCode(theirOptions.values().toArray());
        return Integer.compare(hash, hashFk);

        // TODO: compare Entry by Entry ??
    }","  public void test21()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<VirtualFileSystem> class0 = VirtualFileSystem.class;
      FileSystemOptions fileSystemOptions1 = new FileSystemOptions();
      fileSystemOptions1.setOption(class0, """", """");
      fileSystemOptions0.setOption(class0, """", fileSystemOptions1);
      int int0 = fileSystemOptions0.compareTo(fileSystemOptions1);
}"
61,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final FileSystemOptions other = (FileSystemOptions) obj;
        return compareTo(other) == 0;
    }","  public void test22()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<VirtualFileSystem> class0 = VirtualFileSystem.class;
      FileSystemOptions fileSystemOptions1 = (FileSystemOptions)fileSystemOptions0.clone();
}"
62,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final FileSystemOptions other = (FileSystemOptions) obj;
        return compareTo(other) == 0;
    }","  public void test23()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<VirtualFileSystem> class0 = VirtualFileSystem.class;
      FileSystemOptions fileSystemOptions1 = (FileSystemOptions)fileSystemOptions0.clone();
      fileSystemOptions0.setOption(class0, """", fileSystemOptions1);
      int int0 = fileSystemOptions0.compareTo(fileSystemOptions1);
}"
63,"    public int compareTo(final FileSystemOptions other) {
        if (this == other) {
            // the same instance
            return 0;
        }

        final int propsSz = options == null ? 0 : options.size();
        final int propsFkSz = other.options == null ? 0 : other.options.size();
        if (propsSz < propsFkSz) {
            return -1;
        }
        if (propsSz > propsFkSz) {
            return 1;
        }
        if (propsSz == 0) {
            // props empty
            return 0;
        }

        // ensure proper sequence of options
        final SortedMap<FileSystemOptionKey, Object> myOptions = options instanceof SortedMap
                ? (SortedMap<FileSystemOptionKey, Object>) options
                : new TreeMap<>(options);
        final SortedMap<FileSystemOptionKey, Object> theirOptions = other.options instanceof SortedMap
                ? (SortedMap<FileSystemOptionKey, Object>) other.options
                : new TreeMap<>(other.options);
        final Iterator<FileSystemOptionKey> optKeysIter = myOptions.keySet().iterator();
        final Iterator<FileSystemOptionKey> otherKeysIter = theirOptions.keySet().iterator();
        while (optKeysIter.hasNext()) {
            final int comp = optKeysIter.next().compareTo(otherKeysIter.next());
            if (comp != 0) {
                return comp;
            }
        }

        final int hash = Arrays.deepHashCode(myOptions.values().toArray());
        final int hashFk = Arrays.deepHashCode(theirOptions.values().toArray());
        return Integer.compare(hash, hashFk);

        // TODO: compare Entry by Entry ??
    }","  public void test24()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<VirtualFileSystem> class0 = VirtualFileSystem.class;
      FileSystemOptions fileSystemOptions1 = (FileSystemOptions)fileSystemOptions0.clone();
      fileSystemOptions0.setOption(class0, """", fileSystemOptions1);
      int int0 = fileSystemOptions0.compareTo(fileSystemOptions1);
}"
64,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final FileSystemOptions other = (FileSystemOptions) obj;
        return compareTo(other) == 0;
    }","  public void test25()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<VirtualFileSystem> class0 = VirtualFileSystem.class;
      FileSystemOptions fileSystemOptions1 = new FileSystemOptions();
}"
65,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final FileSystemOptions other = (FileSystemOptions) obj;
        return compareTo(other) == 0;
    }","  public void test26()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<VirtualFileSystem> class0 = VirtualFileSystem.class;
      FileSystemOptions fileSystemOptions1 = new FileSystemOptions();
      fileSystemOptions1.setOption(class0, """", """");
      int int0 = fileSystemOptions0.compareTo(fileSystemOptions1);
}"
66,"    public int compareTo(final FileSystemOptions other) {
        if (this == other) {
            // the same instance
            return 0;
        }

        final int propsSz = options == null ? 0 : options.size();
        final int propsFkSz = other.options == null ? 0 : other.options.size();
        if (propsSz < propsFkSz) {
            return -1;
        }
        if (propsSz > propsFkSz) {
            return 1;
        }
        if (propsSz == 0) {
            // props empty
            return 0;
        }

        // ensure proper sequence of options
        final SortedMap<FileSystemOptionKey, Object> myOptions = options instanceof SortedMap
                ? (SortedMap<FileSystemOptionKey, Object>) options
                : new TreeMap<>(options);
        final SortedMap<FileSystemOptionKey, Object> theirOptions = other.options instanceof SortedMap
                ? (SortedMap<FileSystemOptionKey, Object>) other.options
                : new TreeMap<>(other.options);
        final Iterator<FileSystemOptionKey> optKeysIter = myOptions.keySet().iterator();
        final Iterator<FileSystemOptionKey> otherKeysIter = theirOptions.keySet().iterator();
        while (optKeysIter.hasNext()) {
            final int comp = optKeysIter.next().compareTo(otherKeysIter.next());
            if (comp != 0) {
                return comp;
            }
        }

        final int hash = Arrays.deepHashCode(myOptions.values().toArray());
        final int hashFk = Arrays.deepHashCode(theirOptions.values().toArray());
        return Integer.compare(hash, hashFk);

        // TODO: compare Entry by Entry ??
    }","  public void test27()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<VirtualFileSystem> class0 = VirtualFileSystem.class;
      FileSystemOptions fileSystemOptions1 = new FileSystemOptions();
      fileSystemOptions1.setOption(class0, """", """");
      int int0 = fileSystemOptions0.compareTo(fileSystemOptions1);
}"
67,"    boolean hasOption(final Class<? extends FileSystem> fileSystemClass, final String name) {
        final FileSystemOptionKey key = new FileSystemOptionKey(fileSystemClass, name);
        return options.containsKey(key);
    }","  public void test28()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<VirtualFileSystem> class0 = VirtualFileSystem.class;
      fileSystemOptions0.setOption(class0, ""sYe%l"", ""sYe%l"");
      boolean boolean0 = fileSystemOptions0.hasOption(class0, ""sYe%l"");
}"
68,"    void setOption(final Class<? extends FileSystem> fileSystemClass, final String name, final Object value) {
        options.put(new FileSystemOptionKey(fileSystemClass, name), value);
    }","  public void test29()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<VirtualFileSystem> class0 = VirtualFileSystem.class;
      fileSystemOptions0.setOption(class0, ""sYe%l"", ""sYe%l"");
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""sYe%l"", ""sYe%l"", (-9), (-9), ""sYe%l"", ""sYe%l"", ""sYe%l"", fileType0, ""sYe%l"");
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, fileSystemOptions0);
}"
69,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final FileSystemOptions other = (FileSystemOptions) obj;
        return compareTo(other) == 0;
    }","  public void test30()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Object object0 = fileSystemOptions0.clone();
      boolean boolean0 = fileSystemOptions0.equals(object0);
}"
70,"    public String toString() {
        return options.toString();
    }","  public void test31()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      String string0 = fileSystemOptions0.toString();
}"
71,"    public int hashCode() {
        final int prime = 31;
        int result = 1;
        if (options == null) {
            result = prime * result;
        } else {
            final SortedMap<FileSystemOptionKey, Object> myOptions = options instanceof SortedMap
                    ? (SortedMap<FileSystemOptionKey, Object>) options
                    : new TreeMap<>(options);
            result = prime * result + myOptions.keySet().hashCode();
            result = prime * result + Arrays.deepHashCode(myOptions.values().toArray());
        }
        return result;
    }","  public void test32()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<VirtualFileSystem> class0 = VirtualFileSystem.class;
      fileSystemOptions0.setOption(class0, ""sYe%l"", ""sYe%l"");
      fileSystemOptions0.hashCode();
  }"
72,"    public boolean traverseDescendents(final FileSelectInfo fileInfo) throws Exception {
        return delegateFileSelector.traverseDescendents(fileInfo);
    }","  public void test0()  throws Throwable  {
      FileSelector fileSelector0 = mock(FileSelector.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fileSelector0).traverseDescendents(any(org.apache.commons.vfs2.FileSelectInfo.class));
      InvertIncludeFileSelector invertIncludeFileSelector0 = new InvertIncludeFileSelector(fileSelector0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = invertIncludeFileSelector0.traverseDescendents(fileSelectInfo0);
}"
73,"    public InvertIncludeFileSelector(final FileSelector delegateFileSelector) {
        this.delegateFileSelector = Objects.requireNonNull(delegateFileSelector, ""delegateFileSelector"");
    }","  public void test1()  throws Throwable  {
      InvertIncludeFileSelector invertIncludeFileSelector0 = null;
      try {
        invertIncludeFileSelector0 = new InvertIncludeFileSelector((FileSelector) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // delegateFileSelector
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
74,"    public boolean includeFile(final FileSelectInfo fileInfo) throws Exception {
        return !delegateFileSelector.includeFile(fileInfo);
    }","  public void test2()  throws Throwable  {
      FileSelector fileSelector0 = mock(FileSelector.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(fileSelector0).includeFile(any(org.apache.commons.vfs2.FileSelectInfo.class));
      InvertIncludeFileSelector invertIncludeFileSelector0 = new InvertIncludeFileSelector(fileSelector0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = invertIncludeFileSelector0.includeFile(fileSelectInfo0);
}"
75,"    public boolean includeFile(final FileSelectInfo fileInfo) throws Exception {
        return !delegateFileSelector.includeFile(fileInfo);
    }","  public void test3()  throws Throwable  {
      FileSelector fileSelector0 = mock(FileSelector.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(fileSelector0).includeFile(any(org.apache.commons.vfs2.FileSelectInfo.class));
      InvertIncludeFileSelector invertIncludeFileSelector0 = new InvertIncludeFileSelector(fileSelector0);
      InvertIncludeFileSelector invertIncludeFileSelector1 = new InvertIncludeFileSelector(invertIncludeFileSelector0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = invertIncludeFileSelector1.includeFile(fileSelectInfo0);
}"
76,"    public boolean traverseDescendents(final FileSelectInfo fileInfo) throws Exception {
        return delegateFileSelector.traverseDescendents(fileInfo);
    }","  public void test4()  throws Throwable  {
      FileSelector fileSelector0 = mock(FileSelector.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(fileSelector0).traverseDescendents(any(org.apache.commons.vfs2.FileSelectInfo.class));
      InvertIncludeFileSelector invertIncludeFileSelector0 = new InvertIncludeFileSelector(fileSelector0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = invertIncludeFileSelector0.traverseDescendents(fileSelectInfo0);
}"
77,,"  public void test0()  throws Throwable  {
      FileType[] fileTypeArray0 = FileType.values();
}"
78,,"  public void test1()  throws Throwable  {
      FileType fileType0 = FileType.valueOf(""FILE_OR_FOLDER"");
}"
79,"    public boolean hasAttributes() {
        return hasAttrs;
    }","  public void test2()  throws Throwable  {
      FileType fileType0 = FileType.valueOf(""IMAGINARY"");
}"
80,"    public boolean hasContent() {
        return hasContent;
    }","  public void test3()  throws Throwable  {
      FileType fileType0 = FileType.FOLDER;
      boolean boolean0 = fileType0.hasContent();
}"
81,"    public boolean hasChildren() {
        return hasChildren;
    }","  public void test4()  throws Throwable  {
      FileType fileType0 = FileType.FOLDER;
      boolean boolean0 = fileType0.hasChildren();
}"
82,"    public boolean hasAttributes() {
        return hasAttrs;
    }","  public void test5()  throws Throwable  {
      FileType fileType0 = FileType.IMAGINARY;
      boolean boolean0 = fileType0.hasAttributes();
}"
83,"    public boolean hasChildren() {
        return hasChildren;
    }","  public void test6()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      boolean boolean0 = fileType0.hasChildren();
}"
84,"    public String getName() {
        return name;
    }","  public void test7()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      String string0 = fileType0.getName();
}"
85,"    public String toString() {
        return name;
    }","  public void test8()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      String string0 = fileType0.toString();
}"
86,"    public boolean hasContent() {
        return hasContent;
    }","  public void test9()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      boolean boolean0 = fileType0.hasContent();
}"
87,"    public boolean hasAttributes() {
        return hasAttrs;
    }","  public void test10()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      boolean boolean0 = fileType0.hasAttributes();
}"
88,"    public boolean includeFile(final FileSelectInfo fileInfo) throws Exception {
        return fileInfo.getFile().getType() == type;
    }","  public void test0()  throws Throwable  {
      FileType fileType0 = FileType.FOLDER;
      FileTypeSelector fileTypeSelector0 = new FileTypeSelector(fileType0);
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileType0).when(fileObject0).getType();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = fileTypeSelector0.includeFile(fileSelectInfo0);
}"
89,"    public boolean includeFile(final FileSelectInfo fileInfo) throws Exception {
        return fileInfo.getFile().getType() == type;
    }","  public void test1()  throws Throwable  {
      FileType fileType0 = FileType.FOLDER;
      FileTypeSelector fileTypeSelector0 = new FileTypeSelector(fileType0);
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileType) null).when(fileObject0).getType();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = fileTypeSelector0.includeFile(fileSelectInfo0);
}"
90,"    public boolean traverseDescendents(final FileSelectInfo fileInfo) throws Exception {
        return true;
    }","  public void test2()  throws Throwable  {
      FileType fileType0 = FileType.FOLDER;
      FileTypeSelector fileTypeSelector0 = new FileTypeSelector(fileType0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = fileTypeSelector0.traverseDescendents(fileSelectInfo0);
}"
91,"    public boolean includeFile(final FileSelectInfo fileInfo) throws Exception {
        return fileInfo.getFile().getType() == type;
    }","  public void test3()  throws Throwable  {
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      FileTypeSelector fileTypeSelector0 = new FileTypeSelector(fileType0);
      try { 
        fileTypeSelector0.includeFile((FileSelectInfo) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.FileTypeSelector"", e);
      }
  }"
92,"    public FileNotFoundException(final Object info0) {
        super(""vfs.provider/read-not-file.error"", info0);
    }","  public void test0()  throws Throwable  {
      FileNotFoundException fileNotFoundException0 = new FileNotFoundException((Object) null);
      FileNotFoundException fileNotFoundException1 = new FileNotFoundException(fileNotFoundException0, fileNotFoundException0);
}"
93,"    public FileObject getFile() {
        return fileObject;
    }","  public void test0()  throws Throwable  {
      FileChangeEvent fileChangeEvent0 = new FileChangeEvent((FileObject) null);
      FileObject fileObject0 = fileChangeEvent0.getFile();
}"
94,"    public FileObject getFileObject() {
        return fileObject;
    }","  public void test1()  throws Throwable  {
      FileChangeEvent fileChangeEvent0 = new FileChangeEvent((FileObject) null);
      FileObject fileObject0 = fileChangeEvent0.getFileObject();
}"
95,"    public static void writeContent(final FileObject file, final OutputStream output) throws IOException {
        FileObjectUtils.writeContent(file, output);
    }","  public void test0()  throws Throwable  {
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(fileContent0).write(any(java.io.OutputStream.class));
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      FileUtil.writeContent(fileObject0, outputStream0);
  }"
96,"    public static byte[] getContent(final FileObject file) throws IOException {
        return FileObjectUtils.getContentAsByteArray(file);
    }","  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)3;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)41;
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(fileContent0).getByteArray();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      FileUtil.getContent(fileObject0);
  }"
97,,"  public void test2()  throws Throwable  {
  }"
98,"    public static byte[] getContent(final FileObject file) throws IOException {
        return FileObjectUtils.getContentAsByteArray(file);
    }","  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(fileContent0).getByteArray();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      byte[] byteArray1 = FileUtil.getContent(fileObject0);
}"
99,"    public static void writeContent(final FileObject file, final OutputStream output) throws IOException {
        FileObjectUtils.writeContent(file, output);
    }","  public void test4()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        FileUtil.writeContent((FileObject) null, outputStream0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.FileObjectUtils"", e);
      }
  }"
100,"    public static byte[] getContent(final FileObject file) throws IOException {
        return FileObjectUtils.getContentAsByteArray(file);
    }","  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.getContent((FileObject) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.FileObjectUtils"", e);
      }
  }"
101,"    public static void copyContent(final FileObject srcFile, final FileObject destFile) throws IOException {
        FileObjectUtils.writeContent(srcFile, destFile);
    }","  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.copyContent((FileObject) null, (FileObject) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.FileObjectUtils"", e);
      }
  }"
102,"    public static byte[] getContent(final FileObject file) throws IOException {
        return FileObjectUtils.getContentAsByteArray(file);
    }","  public void test7()  throws Throwable  {
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileContent) null).when(fileObject0).getContent();
      // Undeclared exception!
      try { 
        FileUtil.getContent(fileObject0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.FileObjectUtils"", e);
      }
  }"
103,"    public static void writeContent(final FileObject file, final OutputStream output) throws IOException {
        FileObjectUtils.writeContent(file, output);
    }","  public void test8()  throws Throwable  {
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileContent) null).when(fileObject0).getContent();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        FileUtil.writeContent(fileObject0, outputStream0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.FileObjectUtils"", e);
      }
  }"
104,"    public static void copyContent(final FileObject srcFile, final FileObject destFile) throws IOException {
        FileObjectUtils.writeContent(srcFile, destFile);
    }","  public void test9()  throws Throwable  {
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileContent) null).when(fileObject0).getContent();
      // Undeclared exception!
      try { 
        FileUtil.copyContent(fileObject0, (FileObject) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.FileObjectUtils"", e);
      }
  }"
105,"    public String toString() {
        return this.pattern.toString();
    }","  public void test0()  throws Throwable  {
      PatternFileSelector patternFileSelector0 = new PatternFileSelector("""");
      String string0 = patternFileSelector0.toString();
}"
106,"    public boolean includeFile(final FileSelectInfo fileInfo) throws Exception {
        return this.pattern.matcher(fileInfo.getFile().getName().getPath()).matches();
    }","  public void test1()  throws Throwable  {
      PatternFileSelector patternFileSelector0 = new PatternFileSelector(""org.apache.commons.vfs2.PatternFileSelector"");
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.vfs2.PatternFileSelector"").when(fileName0).getPath();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = patternFileSelector0.includeFile(fileSelectInfo0);
}"
107,"    public boolean includeFile(final FileSelectInfo fileInfo) throws Exception {
        return this.pattern.matcher(fileInfo.getFile().getName().getPath()).matches();
    }","  public void test2()  throws Throwable  {
      PatternFileSelector patternFileSelector0 = new PatternFileSelector(""org.apache.commons.vfs2.PatternFileSelector"");
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn(""x@M*g"").when(fileName0).getPath();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = patternFileSelector0.includeFile(fileSelectInfo0);
}"
108,"    public PatternFileSelector(final Pattern pattern) {
        this.pattern = pattern;
    }","  public void test3()  throws Throwable  {
      PatternFileSelector patternFileSelector0 = null;
      try {
        patternFileSelector0 = new PatternFileSelector(""k,]6r_[\""UX*JhcW{_"", 1);
        fail(""Expecting exception: PatternSyntaxException"");
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 16
         // k,]6r_[\""UX*JhcW{_
         //                 ^
         //
         verifyException(""java.util.regex.Pattern"", e);
      }
  }"
109,"    public PatternFileSelector(final Pattern pattern) {
        this.pattern = pattern;
    }","  public void test4()  throws Throwable  {
      PatternFileSelector patternFileSelector0 = null;
      try {
        patternFileSelector0 = new PatternFileSelector((String) null, 2060);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
110,"    public PatternFileSelector(final Pattern pattern) {
        this.pattern = pattern;
    }","  public void test5()  throws Throwable  {
      PatternFileSelector patternFileSelector0 = null;
      try {
        patternFileSelector0 = new PatternFileSelector((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
111,"    public String toString() {
        return this.pattern.toString();
    }","  public void test6()  throws Throwable  {
      PatternFileSelector patternFileSelector0 = new PatternFileSelector((Pattern) null);
      // Undeclared exception!
      try { 
        patternFileSelector0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.PatternFileSelector"", e);
      }
  }"
112,"    public boolean traverseDescendents(final FileSelectInfo fileInfo) throws Exception {
        return true;
    }","  public void test7()  throws Throwable  {
      PatternFileSelector patternFileSelector0 = new PatternFileSelector(""z$"", 21);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = patternFileSelector0.traverseDescendents(fileSelectInfo0);
}"
113,"    public boolean includeFile(final FileSelectInfo fileInfo) throws Exception {
        return this.pattern.matcher(fileInfo.getFile().getName().getPath()).matches();
    }","  public void test8()  throws Throwable  {
      PatternFileSelector patternFileSelector0 = new PatternFileSelector("""");
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSelectInfo0).getFile();
      try { 
        patternFileSelector0.includeFile(fileSelectInfo0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.PatternFileSelector"", e);
      }
  }"
114,"    public String toString() {
        return this.pattern.toString();
    }","  public void test9()  throws Throwable  {
      PatternFileSelector patternFileSelector0 = new PatternFileSelector(""z$"", 21);
      String string0 = patternFileSelector0.toString();
}"
115,"    public boolean accept(final FileSelectInfo fileInfo) throws Exception {
        if (fileFilter != null) {
            return fileFilter.accept(fileInfo);
        }

        throw new IllegalArgumentException(Messages.getString(""vfs.selectors/filefilter.missing.error""));
    }","  public void test0()  throws Throwable  {
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.TRUE;
      FileFilterSelector fileFilterSelector0 = new FileFilterSelector(trueFileFilter0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = fileFilterSelector0.accept(fileSelectInfo0);
}"
116,"    public boolean includeFile(final FileSelectInfo fileInfo) throws Exception {
        return super.includeFile(fileInfo) && accept(fileInfo);
    }","  public void test1()  throws Throwable  {
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.FALSE;
      FileFilterSelector fileFilterSelector0 = new FileFilterSelector(falseFileFilter0);
      try { 
        fileFilterSelector0.includeFile((FileSelectInfo) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.FileDepthSelector"", e);
      }
  }"
117,"    public boolean accept(final FileSelectInfo fileInfo) throws Exception {
        if (fileFilter != null) {
            return fileFilter.accept(fileInfo);
        }

        throw new IllegalArgumentException(Messages.getString(""vfs.selectors/filefilter.missing.error""));
    }","  public void test2()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      FileFilterSelector fileFilterSelector0 = new FileFilterSelector(orFileFilter0);
      FileFilter[] fileFilterArray0 = new FileFilter[4];
      fileFilterArray0[0] = (FileFilter) orFileFilter0;
      fileFilterArray0[1] = (FileFilter) orFileFilter0;
      fileFilterArray0[2] = (FileFilter) orFileFilter0;
      fileFilterArray0[3] = (FileFilter) orFileFilter0;
      AndFileFilter andFileFilter0 = new AndFileFilter(fileFilterArray0);
      orFileFilter0.addFileFilter(andFileFilter0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        fileFilterSelector0.accept(fileSelectInfo0);
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
118,"    public boolean accept(final FileSelectInfo fileInfo) throws Exception {
        if (fileFilter != null) {
            return fileFilter.accept(fileInfo);
        }

        throw new IllegalArgumentException(Messages.getString(""vfs.selectors/filefilter.missing.error""));
    }","  public void test3()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      String[] stringArray0 = new String[4];
      NameFileFilter nameFileFilter0 = new NameFileFilter(iOCase0, stringArray0);
      FileFilterSelector fileFilterSelector0 = new FileFilterSelector(nameFileFilter0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSelectInfo0).getFile();
      try { 
        fileFilterSelector0.accept(fileSelectInfo0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.NameFileFilter"", e);
      }
  }"
119,"    public boolean accept(final FileSelectInfo fileInfo) throws Exception {
        if (fileFilter != null) {
            return fileFilter.accept(fileInfo);
        }

        throw new IllegalArgumentException(Messages.getString(""vfs.selectors/filefilter.missing.error""));
    }","  public void test4()  throws Throwable  {
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.FALSE;
      FileFilterSelector fileFilterSelector0 = new FileFilterSelector(falseFileFilter0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = fileFilterSelector0.accept(fileSelectInfo0);
}"
120,"    public boolean accept(final FileSelectInfo fileInfo) throws Exception {
        if (fileFilter != null) {
            return fileFilter.accept(fileInfo);
        }

        throw new IllegalArgumentException(Messages.getString(""vfs.selectors/filefilter.missing.error""));
    }","  public void test5()  throws Throwable  {
      FileFilterSelector fileFilterSelector0 = new FileFilterSelector();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      try { 
        fileFilterSelector0.accept(fileSelectInfo0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Configure a fileFilter or override accept().
         //
         verifyException(""org.apache.commons.vfs2.FileFilterSelector"", e);
      }
  }"
121,"    public boolean includeFile(final FileSelectInfo fileInfo) throws Exception {
        return super.includeFile(fileInfo) && accept(fileInfo);
    }","  public void test6()  throws Throwable  {
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.TRUE;
      FileFilterSelector fileFilterSelector0 = new FileFilterSelector(trueFileFilter0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(fileSelectInfo0).getDepth();
      boolean boolean0 = fileFilterSelector0.includeFile(fileSelectInfo0);
}"
122,"    public boolean includeFile(final FileSelectInfo fileInfo) throws Exception {
        return super.includeFile(fileInfo) && accept(fileInfo);
    }","  public void test7()  throws Throwable  {
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.FALSE;
      FileFilterSelector fileFilterSelector0 = new FileFilterSelector(falseFileFilter0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(fileSelectInfo0).getDepth();
      boolean boolean0 = fileFilterSelector0.includeFile(fileSelectInfo0);
}"
123,"    public boolean includeFile(final FileSelectInfo fileInfo) throws Exception {
        return super.includeFile(fileInfo) && accept(fileInfo);
    }","  public void test8()  throws Throwable  {
      FileFilterSelector fileFilterSelector0 = new FileFilterSelector();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(fileSelectInfo0).getDepth();
      try { 
        fileFilterSelector0.includeFile(fileSelectInfo0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Configure a fileFilter or override accept().
         //
         verifyException(""org.apache.commons.vfs2.FileFilterSelector"", e);
      }
  }"
124,"    public boolean includeFile(final FileSelectInfo fileInfo) throws Exception {
        return super.includeFile(fileInfo) && accept(fileInfo);
    }","  public void test9()  throws Throwable  {
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.FALSE;
      FileFilterSelector fileFilterSelector0 = new FileFilterSelector(falseFileFilter0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fileSelectInfo0).getDepth();
      boolean boolean0 = fileFilterSelector0.includeFile(fileSelectInfo0);
}"
125,,"  public void test0()  throws Throwable  {
      CacheStrategy[] cacheStrategyArray0 = CacheStrategy.values();
}"
126,"    public String toString() {
        return realName;
    }","  public void test1()  throws Throwable  {
      CacheStrategy cacheStrategy0 = CacheStrategy.valueOf(""ON_RESOLVE"");
}"
127,"    public String getName() {
        return realName;
    }","  public void test2()  throws Throwable  {
      CacheStrategy cacheStrategy0 = CacheStrategy.ON_RESOLVE;
      String string0 = cacheStrategy0.getName();
}"
128,"    public String toString() {
        return realName;
    }","  public void test3()  throws Throwable  {
      CacheStrategy cacheStrategy0 = CacheStrategy.ON_RESOLVE;
      String string0 = cacheStrategy0.toString();
}"
129,"    public UserAuthenticationData() {
        // do nothing
    }","  public void test0()  throws Throwable  {
      UserAuthenticationData userAuthenticationData0 = new UserAuthenticationData();
      int int0 = userAuthenticationData0.USERNAME.compareTo(userAuthenticationData0.DOMAIN);
}"
130,"    public char[] getData(final Type type) {
        return authenticationData.get(type);
    }","  public void test1()  throws Throwable  {
      UserAuthenticationData userAuthenticationData0 = new UserAuthenticationData();
      char[] charArray0 = userAuthenticationData0.getData(userAuthenticationData0.PASSWORD);
}"
131,"    public char[] getData(final Type type) {
        return authenticationData.get(type);
    }","  public void test2()  throws Throwable  {
      UserAuthenticationData.Type userAuthenticationData_Type0 = UserAuthenticationData.USERNAME;
      UserAuthenticationData userAuthenticationData0 = new UserAuthenticationData();
      char[] charArray0 = new char[2];
      userAuthenticationData0.setData(userAuthenticationData_Type0, charArray0);
      char[] charArray1 = userAuthenticationData0.getData(userAuthenticationData_Type0);
}"
132,"    public char[] getData(final Type type) {
        return authenticationData.get(type);
    }","  public void test3()  throws Throwable  {
      UserAuthenticationData.Type userAuthenticationData_Type0 = new UserAuthenticationData.Type(""~P"");
      UserAuthenticationData userAuthenticationData0 = new UserAuthenticationData();
      char[] charArray0 = new char[0];
      userAuthenticationData0.setData(userAuthenticationData_Type0, charArray0);
      char[] charArray1 = userAuthenticationData0.getData(userAuthenticationData_Type0);
}"
133,"    public void setData(final Type type, final char[] data) {
        authenticationData.put(type, data);
    }","  public void test4()  throws Throwable  {
      UserAuthenticationData userAuthenticationData0 = new UserAuthenticationData();
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        userAuthenticationData0.setData((UserAuthenticationData.Type) null, charArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
134,"    public void cleanup() {
        // step 1: nullify character buffers
        for (final char[] data : authenticationData.values()) {
            if (data == null) {
                continue;
            }

            Arrays.fill(data, (char) 0);
        }
        // step 2: allow data itself to gc
        authenticationData.clear();
    }","  public void test5()  throws Throwable  {
      UserAuthenticationData.Type userAuthenticationData_Type0 = new UserAuthenticationData.Type("""");
      UserAuthenticationData userAuthenticationData0 = new UserAuthenticationData();
      char[] charArray0 = new char[5];
      userAuthenticationData0.setData(userAuthenticationData_Type0, charArray0);
      userAuthenticationData0.cleanup();
  }"
135,"    public void cleanup() {
        // step 1: nullify character buffers
        for (final char[] data : authenticationData.values()) {
            if (data == null) {
                continue;
            }

            Arrays.fill(data, (char) 0);
        }
        // step 2: allow data itself to gc
        authenticationData.clear();
    }","  public void test6()  throws Throwable  {
      UserAuthenticationData userAuthenticationData0 = new UserAuthenticationData();
      userAuthenticationData0.setData(userAuthenticationData0.DOMAIN, (char[]) null);
      userAuthenticationData0.cleanup();
  }"
136,"    public UserAuthenticationData() {
        // do nothing
    }","  public void test7()  throws Throwable  {
      UserAuthenticationData.Type userAuthenticationData_Type0 = new UserAuthenticationData.Type(""H"");
      UserAuthenticationData userAuthenticationData0 = new UserAuthenticationData();
      boolean boolean0 = userAuthenticationData0.DOMAIN.equals(userAuthenticationData_Type0);
}"
137,"    public UserAuthenticationData() {
        // do nothing
    }","  public void test8()  throws Throwable  {
      UserAuthenticationData.Type userAuthenticationData_Type0 = new UserAuthenticationData.Type("""");
      boolean boolean0 = userAuthenticationData_Type0.equals((Object) null);
}"
138,,"  public void test9()  throws Throwable  {
      UserAuthenticationData.Type userAuthenticationData_Type0 = UserAuthenticationData.DOMAIN;
      boolean boolean0 = userAuthenticationData_Type0.equals(userAuthenticationData_Type0);
}"
139,"    public UserAuthenticationData() {
        // do nothing
    }","  public void test10()  throws Throwable  {
      UserAuthenticationData.Type userAuthenticationData_Type0 = new UserAuthenticationData.Type(""H"");
      boolean boolean0 = userAuthenticationData_Type0.equals(""H"");
}"
140,"    public UserAuthenticationData() {
        // do nothing
    }","  public void test11()  throws Throwable  {
      UserAuthenticationData.Type userAuthenticationData_Type0 = new UserAuthenticationData.Type(""H"");
      String string0 = userAuthenticationData_Type0.toString();
}"
141,"    public char[] getData(final Type type) {
        return authenticationData.get(type);
    }","  public void test12()  throws Throwable  {
      UserAuthenticationData userAuthenticationData0 = new UserAuthenticationData();
      // Undeclared exception!
      try { 
        userAuthenticationData0.getData((UserAuthenticationData.Type) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
142,"    public static boolean isUriStyle() {
        if (uriStyle == null) {
            uriStyle = Boolean.FALSE;
        }
        return uriStyle.booleanValue();
    }","  public void test0()  throws Throwable  {
      VFS.setUriStyle(true);
      boolean boolean0 = VFS.isUriStyle();
}"
143,"    public static synchronized void close() {
        if (instance != null) {
            instance.close();
            instance = null;
        }
    }","  public void test1()  throws Throwable  {
      VFS.close();
  }"
144,"    public static void setUriStyle(final boolean uriStyle) {
        if (VFS.uriStyle != null && VFS.uriStyle.booleanValue() != uriStyle) {
            throw new IllegalStateException(""VFS.uriStyle was already set differently."");
        }
        VFS.uriStyle = Boolean.valueOf(uriStyle);
    }","  public void test2()  throws Throwable  {
      VFS.setUriStyle(false);
      VFS.setUriStyle(false);
  }"
145,"    public static void setUriStyle(final boolean uriStyle) {
        if (VFS.uriStyle != null && VFS.uriStyle.booleanValue() != uriStyle) {
            throw new IllegalStateException(""VFS.uriStyle was already set differently."");
        }
        VFS.uriStyle = Boolean.valueOf(uriStyle);
    }","  public void test3()  throws Throwable  {
      VFS.isUriStyle();
      // Undeclared exception!
      try { 
        VFS.setUriStyle(true);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // VFS.uriStyle was already set differently.
         //
         verifyException(""org.apache.commons.vfs2.VFS"", e);
      }
  }"
146,"    public static synchronized FileSystemManager getManager() throws FileSystemException {
        if (instance == null) {
            instance = reset();
        }
        return instance;
    }","  public void test4()  throws Throwable  {
      FileSystemManager fileSystemManager0 = VFS.reset();
      FileSystemManager fileSystemManager1 = VFS.getManager();
}"
147,"    public static synchronized void close() {
        if (instance != null) {
            instance.close();
            instance = null;
        }
    }","  public void test5()  throws Throwable  {
      VFS.getManager();
      VFS.close();
  }"
148,"    public static synchronized void setManager(final FileSystemManager manager) {
        VFS.instance = manager;
    }","  public void test6()  throws Throwable  {
      FileSystemManager fileSystemManager0 = VFS.getManager();
      VFS.setManager(fileSystemManager0);
}"
149,"    public boolean includeFile(final FileSelectInfo fileInfo) throws Exception {
        return true;
    }","  public void test0()  throws Throwable  {
      AllFileSelector allFileSelector0 = new AllFileSelector();
      boolean boolean0 = allFileSelector0.includeFile((FileSelectInfo) null);
}"
150,"    public boolean traverseDescendents(final FileSelectInfo fileInfo) throws Exception {
        return true;
    }","  public void test1()  throws Throwable  {
      AllFileSelector allFileSelector0 = new AllFileSelector();
      boolean boolean0 = allFileSelector0.traverseDescendents((FileSelectInfo) null);
}"
151,"    public boolean traverseDescendents(final FileSelectInfo fileInfo) throws Exception {
        return fileInfo.getDepth() < range.getMaximum();
    }","  public void test0()  throws Throwable  {
      FileDepthSelector fileDepthSelector0 = new FileDepthSelector((-2333), (-953));
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fileSelectInfo0).getDepth();
      boolean boolean0 = fileDepthSelector0.traverseDescendents(fileSelectInfo0);
}"
152,"    public boolean includeFile(final FileSelectInfo fileInfo) throws Exception {
        return range.contains(fileInfo.getDepth());
    }","  public void test1()  throws Throwable  {
      FileDepthSelector fileDepthSelector0 = new FileDepthSelector(2, 736);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fileSelectInfo0).getDepth();
      boolean boolean0 = fileDepthSelector0.includeFile(fileSelectInfo0);
}"
153,"    public boolean traverseDescendents(final FileSelectInfo fileInfo) throws Exception {
        return fileInfo.getDepth() < range.getMaximum();
    }","  public void test2()  throws Throwable  {
      FileDepthSelector fileDepthSelector0 = new FileDepthSelector(2, 736);
      try { 
        fileDepthSelector0.traverseDescendents((FileSelectInfo) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.FileDepthSelector"", e);
      }
  }"
154,"    public boolean includeFile(final FileSelectInfo fileInfo) throws Exception {
        return range.contains(fileInfo.getDepth());
    }","  public void test3()  throws Throwable  {
      FileDepthSelector fileDepthSelector0 = new FileDepthSelector();
      try { 
        fileDepthSelector0.includeFile((FileSelectInfo) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.FileDepthSelector"", e);
      }
  }"
155,"    public boolean traverseDescendents(final FileSelectInfo fileInfo) throws Exception {
        return fileInfo.getDepth() < range.getMaximum();
    }","  public void test4()  throws Throwable  {
      FileDepthSelector fileDepthSelector0 = new FileDepthSelector(2, 736);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fileSelectInfo0).getDepth();
      boolean boolean0 = fileDepthSelector0.traverseDescendents(fileSelectInfo0);
}"
156,"    public boolean traverseDescendents(final FileSelectInfo fileInfo) throws Exception {
        return fileInfo.getDepth() < range.getMaximum();
    }","  public void test5()  throws Throwable  {
      FileDepthSelector fileDepthSelector0 = new FileDepthSelector();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fileSelectInfo0).getDepth();
      boolean boolean0 = fileDepthSelector0.traverseDescendents(fileSelectInfo0);
}"
157,"    public FileDepthSelector(final int minDepth, final int maxDepth) {
        this.range = Range.between(minDepth, maxDepth);
    }","  public void test6()  throws Throwable  {
      FileDepthSelector fileDepthSelector0 = new FileDepthSelector(764);
  }"
158,"    public boolean includeFile(final FileSelectInfo fileInfo) throws Exception {
        return range.contains(fileInfo.getDepth());
    }","  public void test7()  throws Throwable  {
      FileDepthSelector fileDepthSelector0 = new FileDepthSelector();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fileSelectInfo0).getDepth();
      boolean boolean0 = fileDepthSelector0.includeFile(fileSelectInfo0);
}"
159,"    public FileNotFolderException(final Object info0) {
        super(""vfs.provider/list-children-not-folder.error"", info0);
    }","  public void test0()  throws Throwable  {
      FileNotFolderException fileNotFolderException0 = new FileNotFolderException(""NZ"");
      FileNotFolderException fileNotFolderException1 = new FileNotFolderException(fileNotFolderException0, fileNotFolderException0);
}"
160,"    public String getRootURI(final FileSystemOptions fileSystemOptions) {
        return getString(fileSystemOptions, ROOTURI);
    }","  public void test0()  throws Throwable  {
      DefaultFileSystemConfigBuilder defaultFileSystemConfigBuilder0 = DefaultFileSystemConfigBuilder.getInstance();
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      defaultFileSystemConfigBuilder0.setRootURI(fileSystemOptions0, """");
      String string0 = defaultFileSystemConfigBuilder0.getRootURI(fileSystemOptions0);
}"
161,"    public void setRootURI(final FileSystemOptions fileSystemOptions, final String rootURI) {
        setParam(fileSystemOptions, ROOTURI, rootURI);
    }","  public void test1()  throws Throwable  {
      DefaultFileSystemConfigBuilder defaultFileSystemConfigBuilder0 = new DefaultFileSystemConfigBuilder();
      // Undeclared exception!
      try { 
        defaultFileSystemConfigBuilder0.setRootURI((FileSystemOptions) null, ""V*osAa.L;21rH;tX+"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // fileSystemOptions
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
162,"    public String getRootURI(final FileSystemOptions fileSystemOptions) {
        return getString(fileSystemOptions, ROOTURI);
    }","  public void test2()  throws Throwable  {
      DefaultFileSystemConfigBuilder defaultFileSystemConfigBuilder0 = new DefaultFileSystemConfigBuilder();
      String string0 = defaultFileSystemConfigBuilder0.getRootURI((FileSystemOptions) null);
}"
163,"    public String getRootURI(final FileSystemOptions fileSystemOptions) {
        return getString(fileSystemOptions, ROOTURI);
    }","  public void test3()  throws Throwable  {
      DefaultFileSystemConfigBuilder defaultFileSystemConfigBuilder0 = new DefaultFileSystemConfigBuilder();
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      defaultFileSystemConfigBuilder0.setRootURI(fileSystemOptions0, ""PxM#iCDZTs>"");
      String string0 = defaultFileSystemConfigBuilder0.getRootURI(fileSystemOptions0);
}"
164,"    public boolean includeFile(final FileSelectInfo fileInfo) throws Exception {
        for (final String extension : this.extensions) {
            if (fileInfo.getFile().getName().getExtension().equalsIgnoreCase(extension)) {
                return true;
            }
        }
        return false;
    }","  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[2];
      FileExtensionSelector fileExtensionSelector0 = new FileExtensionSelector(stringArray0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSelectInfo0).getFile();
      try { 
        fileExtensionSelector0.includeFile(fileSelectInfo0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.FileExtensionSelector"", e);
      }
  }"
165,"    public boolean includeFile(final FileSelectInfo fileInfo) throws Exception {
        for (final String extension : this.extensions) {
            if (fileInfo.getFile().getName().getExtension().equalsIgnoreCase(extension)) {
                return true;
            }
        }
        return false;
    }","  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = """";
      FileExtensionSelector fileExtensionSelector0 = new FileExtensionSelector(stringArray0);
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(fileName0).getExtension();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0, (FileObject) null).when(fileSelectInfo0).getFile();
      try { 
        fileExtensionSelector0.includeFile(fileSelectInfo0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.FileExtensionSelector"", e);
      }
  }"
166,"    public boolean includeFile(final FileSelectInfo fileInfo) throws Exception {
        for (final String extension : this.extensions) {
            if (fileInfo.getFile().getName().getExtension().equalsIgnoreCase(extension)) {
                return true;
            }
        }
        return false;
    }","  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[2];
      FileExtensionSelector fileExtensionSelector0 = new FileExtensionSelector(stringArray0);
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(fileName0).getExtension();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = fileExtensionSelector0.includeFile(fileSelectInfo0);
}"
167,"    public FileExtensionSelector(final Collection<String> extensions) {
        if (extensions != null) {
            this.extensions.addAll(extensions);
        }
    }","  public void test3()  throws Throwable  {
      FileExtensionSelector fileExtensionSelector0 = new FileExtensionSelector((String[]) null);
  }"
168,"    public FileExtensionSelector(final Collection<String> extensions) {
        if (extensions != null) {
            this.extensions.addAll(extensions);
        }
    }","  public void test4()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      FileExtensionSelector fileExtensionSelector0 = new FileExtensionSelector(arrayDeque0);
  }"
169,"    public boolean includeFile(final FileSelectInfo fileInfo) throws Exception {
        for (final String extension : this.extensions) {
            if (fileInfo.getFile().getName().getExtension().equalsIgnoreCase(extension)) {
                return true;
            }
        }
        return false;
    }","  public void test5()  throws Throwable  {
      FileExtensionSelector fileExtensionSelector0 = new FileExtensionSelector((Collection<String>) null);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = fileExtensionSelector0.includeFile(fileSelectInfo0);
}"
170,"    public boolean traverseDescendents(final FileSelectInfo fileInfo) throws Exception {
        return true;
    }","  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[2];
      FileExtensionSelector fileExtensionSelector0 = new FileExtensionSelector(stringArray0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = fileExtensionSelector0.traverseDescendents(fileSelectInfo0);
}"
171,"    public FileTypeHasNoContentException(final Object info0) {
        super(""vfs.provider/read-not-file.error"", info0);
    }","  public void test0()  throws Throwable  {
      FileTypeHasNoContentException fileTypeHasNoContentException0 = new FileTypeHasNoContentException(""iZKXE,Jw1zVaT#)}\"""");
      FileTypeHasNoContentException fileTypeHasNoContentException1 = new FileTypeHasNoContentException(""iZKXE,Jw1zVaT#)}\"""", fileTypeHasNoContentException0);
}"
172,,"  public void test0()  throws Throwable  {
      NameScope[] nameScopeArray0 = NameScope.values();
}"
173,"    public String getName() {
        return realName;
    }","  public void test1()  throws Throwable  {
      NameScope nameScope0 = NameScope.valueOf(""CHILD"");
}"
174,"    public String toString() {
        return realName;
    }","  public void test2()  throws Throwable  {
      NameScope nameScope0 = NameScope.CHILD;
      String string0 = nameScope0.toString();
}"
175,"    public String getName() {
        return realName;
    }","  public void test3()  throws Throwable  {
      NameScope nameScope0 = NameScope.DESCENDENT_OR_SELF;
      String string0 = nameScope0.getName();
}"
176,"    public DefaultFileOperations(final FileObject file) {
        fileObject = file;

        fsmanager = file.getFileSystem().getFileSystemManager();
    }","  public void test0()  throws Throwable  {
      DefaultFileOperations defaultFileOperations0 = null;
      try {
        defaultFileOperations0 = new DefaultFileOperations((FileObject) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.operations.DefaultFileOperations"", e);
      }
  }"
177,,"  public void test0()  throws Throwable  {
      VcsStatus[] vcsStatusArray0 = VcsStatus.values();
}"
178,,"  public void test1()  throws Throwable  {
      VcsStatus vcsStatus0 = VcsStatus.valueOf(""ADDED"");
}"
179,,"  public void test2()  throws Throwable  {
      VcsStatus vcsStatus0 = VcsStatus.valueOf(""UNKNOWN"");
}"
180,"    public int getStatus() {
        return status;
    }","  public void test3()  throws Throwable  {
      VcsStatus vcsStatus0 = VcsStatus.valueOf(""NOT_MODIFIED"");
      int int0 = vcsStatus0.getStatus();
}"
181,"    public int getStatus() {
        return status;
    }","  public void test4()  throws Throwable  {
      VcsStatus vcsStatus0 = VcsStatus.UNKNOWN;
      int int0 = vcsStatus0.getStatus();
}"
182,"    public int getStatus() {
        return status;
    }","  public void test5()  throws Throwable  {
      VcsStatus vcsStatus0 = VcsStatus.ADDED;
      int int0 = vcsStatus0.getStatus();
}"
183,"    public String getPath() {
        return path;
    }","  public void test0()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry(""/gF,l?B9&S:sQ"", 0L, """", (Calendar) null, ""/gF,l?B9&S:sQ"");
      vcsLogEntry0.getRevision();
}"
184,"    public String getAuthor() {
        return author;
    }","  public void test1()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry(""/gF,l?B9&S:sQ"", 0L, """", (Calendar) null, ""/gF,l?B9&S:sQ"");
      vcsLogEntry0.getRevision();
}"
185,"    public String getMessage() {
        return message;
    }","  public void test2()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry(""/gF,l?B9&S:sQ"", 0L, """", (Calendar) null, ""/gF,l?B9&S:sQ"");
      vcsLogEntry0.getRevision();
}"
186,"    public long getRevision() {
        return revision;
    }","  public void test3()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry(""org.apache.log4j.RollingCalendar"", (-1523L), ""zqJDT]%KGWf1S"", (Calendar) null, ""zqJDT]%KGWf1S"");
      long long0 = vcsLogEntry0.getRevision();
}"
187,"    public String getPath() {
        return path;
    }","  public void test4()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry(""org.apache.log4j.RollingCalendar"", (-1523L), ""zqJDT]%KGWf1S"", (Calendar) null, ""zqJDT]%KGWf1S"");
      long long0 = vcsLogEntry0.getRevision();
}"
188,"    public String getMessage() {
        return message;
    }","  public void test5()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry(""org.apache.log4j.RollingCalendar"", (-1523L), ""zqJDT]%KGWf1S"", (Calendar) null, ""zqJDT]%KGWf1S"");
      long long0 = vcsLogEntry0.getRevision();
}"
189,"    public String getAuthor() {
        return author;
    }","  public void test6()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry(""org.apache.log4j.RollingCalendar"", (-1523L), ""zqJDT]%KGWf1S"", (Calendar) null, ""zqJDT]%KGWf1S"");
      long long0 = vcsLogEntry0.getRevision();
}"
190,"    public String getPath() {
        return path;
    }","  public void test7()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry((String) null, 0L, (String) null, (Calendar) null, (String) null);
      String string0 = vcsLogEntry0.getPath();
}"
191,"    public long getRevision() {
        return revision;
    }","  public void test8()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("""", 1L, """", (Calendar) null, """");
      vcsLogEntry0.getPath();
}"
192,"    public String getMessage() {
        return message;
    }","  public void test9()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry((String) null, 0L, (String) null, (Calendar) null, (String) null);
      String string0 = vcsLogEntry0.getMessage();
}"
193,"    public String getMessage() {
        return message;
    }","  public void test10()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry(""/gF,l?B9&S:sQ"", 0L, """", (Calendar) null, ""/gF,l?B9&S:sQ"");
      String string0 = vcsLogEntry0.getMessage();
}"
194,"    public String getAuthor() {
        return author;
    }","  public void test11()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry(""/gF,l?B9&S:sQ"", 0L, """", (Calendar) null, ""/gF,l?B9&S:sQ"");
      String string0 = vcsLogEntry0.getMessage();
}"
195,"    public String getPath() {
        return path;
    }","  public void test12()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry(""/gF,l?B9&S:sQ"", 0L, """", (Calendar) null, ""/gF,l?B9&S:sQ"");
      String string0 = vcsLogEntry0.getMessage();
}"
196,"    public long getRevision() {
        return revision;
    }","  public void test13()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry(""org.apache.log4j.RollingCalendar"", (-1523L), ""zqJDT]%KGWf1S"", (Calendar) null, ""zqJDT]%KGWf1S"");
      vcsLogEntry0.getDate();
}"
197,"    public String getAuthor() {
        return author;
    }","  public void test14()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry(""org.apache.log4j.RollingCalendar"", (-1523L), ""zqJDT]%KGWf1S"", (Calendar) null, ""zqJDT]%KGWf1S"");
      vcsLogEntry0.getDate();
}"
198,"    public String getMessage() {
        return message;
    }","  public void test15()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry(""org.apache.log4j.RollingCalendar"", (-1523L), ""zqJDT]%KGWf1S"", (Calendar) null, ""zqJDT]%KGWf1S"");
      vcsLogEntry0.getDate();
}"
199,"    public String getPath() {
        return path;
    }","  public void test16()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry(""org.apache.log4j.RollingCalendar"", (-1523L), ""zqJDT]%KGWf1S"", (Calendar) null, ""zqJDT]%KGWf1S"");
      vcsLogEntry0.getDate();
}"
200,"    public String getAuthor() {
        return author;
    }","  public void test17()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry((String) null, 0L, (String) null, (Calendar) null, (String) null);
      String string0 = vcsLogEntry0.getAuthor();
}"
201,"    public long getRevision() {
        return revision;
    }","  public void test18()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("""", 1L, """", (Calendar) null, """");
      vcsLogEntry0.getAuthor();
}"
202,"    public long getRevision() {
        return revision;
    }","  public void test19()  throws Throwable  {
      Calendar calendar0 = mock(Calendar.class, new ViolatedAssumptionAnswer());
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry(""Unknown periodicity type."", 42L, ""Unknown periodicity type."", calendar0, ""Unknown periodicity type."");
      vcsLogEntry0.getAuthor();
}"
203,"    public long getRevision() {
        return revision;
    }","  public void test20()  throws Throwable  {
      Calendar calendar0 = mock(Calendar.class, new ViolatedAssumptionAnswer());
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry(""Unknown periodicity type."", 42L, ""Unknown periodicity type."", calendar0, ""Unknown periodicity type."");
      long long0 = vcsLogEntry0.getRevision();
}"
204,"    public long getRevision() {
        return revision;
    }","  public void test21()  throws Throwable  {
      Calendar calendar0 = mock(Calendar.class, new ViolatedAssumptionAnswer());
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry(""Unknown periodicity type."", 42L, ""Unknown periodicity type."", calendar0, ""Unknown periodicity type."");
      vcsLogEntry0.getPath();
}"
205,"    public long getRevision() {
        return revision;
    }","  public void test22()  throws Throwable  {
      Calendar calendar0 = mock(Calendar.class, new ViolatedAssumptionAnswer());
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry(""Unknown periodicity type."", 42L, ""Unknown periodicity type."", calendar0, ""Unknown periodicity type."");
      vcsLogEntry0.getMessage();
}"
206,"    public String getScheme() {
        return scheme;
    }","  public void test0()  throws Throwable  {
      FileType fileType0 = FileType.FOLDER;
      VirtualFileName virtualFileName0 = new VirtualFileName(""zMt}r["", ""zMt}r["", fileType0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) ""zMt}r["");
      virtualFileName0.appendRootUri(stringBuilder0, false);
}"
207,"    protected void appendRootUri(final StringBuilder buffer, final boolean addPassword) {
        buffer.append(getScheme());
    }","  public void test1()  throws Throwable  {
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      VirtualFileName virtualFileName0 = new VirtualFileName(""MxKc"", ""MxKc"", fileType0);
      // Undeclared exception!
      try { 
        virtualFileName0.appendRootUri((StringBuilder) null, true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.VirtualFileName"", e);
      }
  }"
208,"    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        final AbstractFileName that = (AbstractFileName) o;

        return getKey().equals(that.getKey());
    }","  public void test2()  throws Throwable  {
      FileType fileType0 = FileType.IMAGINARY;
      VirtualFileName virtualFileName0 = new VirtualFileName(""org.^pache.log4j.helpers.Loader"", ""org.^pache.log4j.helpers.Loader"", fileType0);
      FileName fileName0 = virtualFileName0.createName(""org.^pache.log4j.helpers.Loader"", fileType0);
}"
209,"    public FileContentInfo create(final FileContent fileContent) {
        String contentType = null;

        final String name = fileContent.getFile().getName().getBaseName();
        if (name != null) {
            contentType = URLConnection.getFileNameMap().getContentTypeFor(name);
        }

        // optimize object creation for common case
        if (contentType == null) {
            return NULL_INSTANCE;
        }
        return new DefaultFileContentInfo(contentType, null);
    }","  public void test0()  throws Throwable  {
      FileContentInfoFilenameFactory fileContentInfoFilenameFactory0 = new FileContentInfoFilenameFactory();
      // Undeclared exception!
      try { 
        fileContentInfoFilenameFactory0.create((FileContent) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.FileContentInfoFilenameFactory"", e);
      }
  }"
210,"    public FileObject createFileSystem(final FileObject rootFile) throws FileSystemException {
        final AbstractFileName rootName = (AbstractFileName) getContext().getFileSystemManager()
                .resolveName(rootFile.getName(), FileName.ROOT_PATH);
        final VirtualFileSystem fs = new VirtualFileSystem(rootName, rootFile.getFileSystem().getFileSystemOptions());
        addComponent(fs);
        fs.addJunction(FileName.ROOT_PATH, rootFile);
        return fs.getRoot();
    }","  public void test0()  throws Throwable  {
      VirtualFileProvider virtualFileProvider0 = new VirtualFileProvider();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn((FileSystemManager) null).when(vfsComponentContext0).getFileSystemManager();
      virtualFileProvider0.setContext(vfsComponentContext0);
      // Undeclared exception!
      try { 
        virtualFileProvider0.createFileSystem((FileObject) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.VirtualFileProvider"", e);
      }
  }"
211,"    public FileObject createFileSystem(final FileObject rootFile) throws FileSystemException {
        final AbstractFileName rootName = (AbstractFileName) getContext().getFileSystemManager()
                .resolveName(rootFile.getName(), FileName.ROOT_PATH);
        final VirtualFileSystem fs = new VirtualFileSystem(rootName, rootFile.getFileSystem().getFileSystemOptions());
        addComponent(fs);
        fs.addJunction(FileName.ROOT_PATH, rootFile);
        return fs.getRoot();
    }","  public void test1()  throws Throwable  {
      VirtualFileProvider virtualFileProvider0 = new VirtualFileProvider();
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((FilesCache) null).when(fileSystemManager0).getFilesCache();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileSystemManager0).when(vfsComponentContext0).getFileSystemManager();
      virtualFileProvider0.setContext(vfsComponentContext0);
      // Undeclared exception!
      try { 
        virtualFileProvider0.createFileSystem(""/"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No files-cache implementation set.
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileSystem"", e);
      }
  }"
212,"    void closeFileSystem(final FileSystem fileSystem) {
        final AbstractFileSystem fs = (AbstractFileSystem) fileSystem;

        removeComponent(fs);
        fs.close();
    }","  public void test2()  throws Throwable  {
      VirtualFileProvider virtualFileProvider0 = new VirtualFileProvider();
      // Undeclared exception!
      try { 
        virtualFileProvider0.closeFileSystem((FileSystem) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.VirtualFileProvider"", e);
      }
  }"
213,"    public FileObject createFileSystem(final FileObject rootFile) throws FileSystemException {
        final AbstractFileName rootName = (AbstractFileName) getContext().getFileSystemManager()
                .resolveName(rootFile.getName(), FileName.ROOT_PATH);
        final VirtualFileSystem fs = new VirtualFileSystem(rootName, rootFile.getFileSystem().getFileSystemOptions());
        addComponent(fs);
        fs.addJunction(FileName.ROOT_PATH, rootFile);
        return fs.getRoot();
    }","  public void test3()  throws Throwable  {
      VirtualFileProvider virtualFileProvider0 = new VirtualFileProvider();
      // Undeclared exception!
      try { 
        virtualFileProvider0.createFileSystem(""/"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileSystem"", e);
      }
  }"
214,"    void closeFileSystem(final FileSystem fileSystem) {
        final AbstractFileSystem fs = (AbstractFileSystem) fileSystem;

        removeComponent(fs);
        fs.close();
    }","  public void test4()  throws Throwable  {
      FileSystem fileSystem0 = mock(FileSystem.class, new ViolatedAssumptionAnswer());
      VirtualFileProvider virtualFileProvider0 = new VirtualFileProvider();
      // Undeclared exception!
      try { 
        virtualFileProvider0.closeFileSystem(fileSystem0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.vfs2.FileSystem$MockitoMock$804152912 cannot be cast to org.apache.commons.vfs2.provider.AbstractFileSystem
         //
         verifyException(""org.apache.commons.vfs2.impl.VirtualFileProvider"", e);
      }
  }"
215,"    public String getContentType() {
        return contentType;
    }","  public void test0()  throws Throwable  {
      DefaultFileContentInfo defaultFileContentInfo0 = new DefaultFileContentInfo((String) null, (String) null);
      String string0 = defaultFileContentInfo0.getContentType();
}"
216,"    public String getContentType() {
        return contentType;
    }","  public void test1()  throws Throwable  {
      DefaultFileContentInfo defaultFileContentInfo0 = new DefaultFileContentInfo(""org.apache.commons.vfs2.impl.DefaultFileContentInfo"", """");
      String string0 = defaultFileContentInfo0.getContentType();
}"
217,"    public String getContentEncoding() {
        return contentEncoding;
    }","  public void test2()  throws Throwable  {
      DefaultFileContentInfo defaultFileContentInfo0 = new DefaultFileContentInfo(""org.apache.commons.vfs2.impl.DefaultFileContentInfo"", """");
      String string0 = defaultFileContentInfo0.getContentType();
}"
218,"    public String getContentEncoding() {
        return contentEncoding;
    }","  public void test3()  throws Throwable  {
      DefaultFileContentInfo defaultFileContentInfo0 = new DefaultFileContentInfo((String) null, (String) null);
      String string0 = defaultFileContentInfo0.getContentEncoding();
}"
219,"    public String getContentType() {
        return contentType;
    }","  public void test4()  throws Throwable  {
      DefaultFileContentInfo defaultFileContentInfo0 = new DefaultFileContentInfo(""org.apache.commons.vfs2.impl.DefaultFileContentInfo"", """");
      String string0 = defaultFileContentInfo0.getContentEncoding();
}"
220,"    public String getContentEncoding() {
        return contentEncoding;
    }","  public void test5()  throws Throwable  {
      DefaultFileContentInfo defaultFileContentInfo0 = new DefaultFileContentInfo(""org.apache.commons.vfs2.impl.DefaultFileContentInfo"", """");
      String string0 = defaultFileContentInfo0.getContentEncoding();
}"
221,"    public String getContentEncoding() {
        return contentEncoding;
    }","  public void test6()  throws Throwable  {
      DefaultFileContentInfo defaultFileContentInfo0 = new DefaultFileContentInfo("""", "";F-w"");
      String string0 = defaultFileContentInfo0.getContentType();
}"
222,"    public String getContentType() {
        return contentType;
    }","  public void test7()  throws Throwable  {
      DefaultFileContentInfo defaultFileContentInfo0 = new DefaultFileContentInfo("""", "";F-w"");
      String string0 = defaultFileContentInfo0.getContentType();
}"
223,"    public String getContentType() {
        return contentType;
    }","  public void test8()  throws Throwable  {
      DefaultFileContentInfo defaultFileContentInfo0 = new DefaultFileContentInfo("""", "";F-w"");
      String string0 = defaultFileContentInfo0.getContentEncoding();
}"
224,"    public String getContentEncoding() {
        return contentEncoding;
    }","  public void test9()  throws Throwable  {
      DefaultFileContentInfo defaultFileContentInfo0 = new DefaultFileContentInfo("""", "";F-w"");
      String string0 = defaultFileContentInfo0.getContentEncoding();
}"
225,"    protected void parseURL(final URL u, final String spec, final int start, final int limit) {
        try {
            final URL url = new URL(u, spec);
            setURL(u, url.getProtocol(), url.getHost(), url.getPort(), url.getAuthority(), url.getUserInfo(),
                    url.getFile(), url.getQuery(), url.getRef());
        } catch (final MalformedURLException mue) {
            // We retrow this as a simple runtime exception.
            // It is retrown in URL as a MalformedURLException anyway.
            throw new RuntimeException(mue.getMessage());
        }
    }","  public void test0()  throws Throwable  {
      URLStreamHandlerProxy uRLStreamHandlerProxy0 = new URLStreamHandlerProxy();
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        uRLStreamHandlerProxy0.parseURL(uRL0, (String) null, 0, 0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.URLStreamHandlerProxy"", e);
      }
  }"
226,"    protected URLConnection openConnection(final URL url) throws IOException {
        return new URL(url.toExternalForm()).openConnection();
    }","  public void test1()  throws Throwable  {
      URLStreamHandlerProxy uRLStreamHandlerProxy0 = new URLStreamHandlerProxy();
      URL uRL0 = MockURL.URL("""", "" &ck4#7z)k"", 0, """", (URLStreamHandler) uRLStreamHandlerProxy0);
      try { 
        uRLStreamHandlerProxy0.openConnection(uRL0);
        fail(""Expecting exception: MalformedURLException"");
      } catch(MalformedURLException e) {
         //
         // no protocol: :// &ck4#7z)k:0
         //
         verifyException(""java.net.URL"", e);
      }
  }"
227,"    protected URLConnection openConnection(final URL url) throws IOException {
        return new URL(url.toExternalForm()).openConnection();
    }","  public void test2()  throws Throwable  {
      URLStreamHandlerProxy uRLStreamHandlerProxy0 = new URLStreamHandlerProxy();
      // Undeclared exception!
      try { 
        uRLStreamHandlerProxy0.openConnection((URL) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.net.MockURL"", e);
      }
  }"
228,"    protected void parseURL(final URL u, final String spec, final int start, final int limit) {
        try {
            final URL url = new URL(u, spec);
            setURL(u, url.getProtocol(), url.getHost(), url.getPort(), url.getAuthority(), url.getUserInfo(),
                    url.getFile(), url.getQuery(), url.getRef());
        } catch (final MalformedURLException mue) {
            // We retrow this as a simple runtime exception.
            // It is retrown in URL as a MalformedURLException anyway.
            throw new RuntimeException(mue.getMessage());
        }
    }","  public void test3()  throws Throwable  {
      URLStreamHandlerProxy uRLStreamHandlerProxy0 = new URLStreamHandlerProxy();
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        uRLStreamHandlerProxy0.parseURL(uRL0, """", 264, 264);
        fail(""Expecting exception: SecurityException"");
      } catch(SecurityException e) {
         //
         // handler for url different from this handler
         //
         verifyException(""java.net.URLStreamHandler"", e);
      }
  }"
229,"    protected URLConnection openConnection(final URL url) throws IOException {
        return new URL(url.toExternalForm()).openConnection();
    }","  public void test4()  throws Throwable  {
      URLStreamHandlerProxy uRLStreamHandlerProxy0 = new URLStreamHandlerProxy();
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      URLConnection uRLConnection0 = uRLStreamHandlerProxy0.openConnection(uRL0);
}"
230,"    public void close() {
        if (replicatorComponent != null) {
            AccessController.doPrivileged(new CloseAction());
        }
    }","  public void test0()  throws Throwable  {
      File file0 = MockFile.createTempFile(""{]9Q>`="", ""{]9Q>`="");
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator(file0);
      PrivilegedFileReplicator privilegedFileReplicator0 = new PrivilegedFileReplicator(defaultFileReplicator0);
      defaultFileReplicator0.allocateFile(""{]9Q>`="");
      // Undeclared exception!
      try { 
        privilegedFileReplicator0.close();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileReplicator"", e);
      }
  }"
231,"    public void close() {
        if (replicatorComponent != null) {
            AccessController.doPrivileged(new CloseAction());
        }
    }","  public void test1()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      ResourceFileProvider resourceFileProvider0 = new ResourceFileProvider();
      defaultFileReplicator0.addFile(resourceFileProvider0);
      PrivilegedFileReplicator privilegedFileReplicator0 = new PrivilegedFileReplicator(defaultFileReplicator0);
      // Undeclared exception!
      try { 
        privilegedFileReplicator0.close();
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.vfs2.provider.res.ResourceFileProvider cannot be cast to java.io.File
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileReplicator"", e);
      }
  }"
232,"    public void close() {
        if (replicatorComponent != null) {
            AccessController.doPrivileged(new CloseAction());
        }
    }","  public void test2()  throws Throwable  {
      PrivilegedFileReplicator privilegedFileReplicator0 = new PrivilegedFileReplicator((FileReplicator) null);
      privilegedFileReplicator0.close();
  }"
233,"    public void init() throws FileSystemException {
        if (replicatorComponent != null) {
            try {
                AccessController.doPrivileged(new InitAction());
            } catch (final PrivilegedActionException e) {
                throw new FileSystemException(""vfs.impl/init-replicator.error"", e);
            }
        }
    }","  public void test3()  throws Throwable  {
      PrivilegedFileReplicator privilegedFileReplicator0 = new PrivilegedFileReplicator((FileReplicator) null);
      privilegedFileReplicator0.init();
  }"
234,"    public File replicateFile(final FileObject srcFile, final FileSelector selector) throws FileSystemException {
        try {
            final ReplicateAction action = new ReplicateAction(srcFile, selector);
            return AccessController.doPrivileged(action);
        } catch (final PrivilegedActionException e) {
            throw new FileSystemException(""vfs.impl/replicate-file.error"", e, srcFile.getName());
        }
    }","  public void test4()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      PrivilegedFileReplicator privilegedFileReplicator0 = new PrivilegedFileReplicator(defaultFileReplicator0);
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      privilegedFileReplicator0.setContext(defaultVfsComponentContext0);
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""com.!ogle.comm8n.hash.Hashing$ChecksumType"", ""com.!ogle.comm8n.hash.Hashing$ChecksumType"", 0, 0, ""com.!ogle.comm8n.hash.Hashing$ChecksumType"", ""com.!ogle.comm8n.hash.Hashing$ChecksumType"", ""com.!ogle.comm8n.hash.Hashing$ChecksumType"", fileType0, ""com.!ogle.comm8n.hash.Hashing$ChecksumType"");
      LayeredFileName layeredFileName0 = new LayeredFileName(""com.!ogle.comm8n.hash.Hashing$ChecksumType"", genericURLFileName0, ""com.!ogle.comm8n.hash.Hashing$ChecksumType"", fileType0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(layeredFileName0, fileSystemOptions0);
      FileObject fileObject0 = virtualFileSystem0.createFile(genericURLFileName0);
      FileTypeSelector fileTypeSelector0 = new FileTypeSelector(fileType0);
      try { 
        privilegedFileReplicator0.replicateFile(fileObject0, fileTypeSelector0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not replicate \""com.!ogle.comm8n.hash.Hashing$ChecksumType://com.!ogle.comm8n.hash.Hashing$ChecksumType:***@com.!ogle.comm8n.hash.Hashing$ChecksumTypecom.!ogle.comm8n.hash.Hashing$ChecksumType?com.!ogle.comm8n.hash.Hashing$ChecksumType\"".
         //
         verifyException(""org.apache.commons.vfs2.impl.PrivilegedFileReplicator"", e);
      }
  }"
235,"    public void setContext(final VfsComponentContext context) {
        if (replicatorComponent != null) {
            replicatorComponent.setContext(context);
        }
    }","  public void test5()  throws Throwable  {
      PrivilegedFileReplicator privilegedFileReplicator0 = new PrivilegedFileReplicator((FileReplicator) null);
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      privilegedFileReplicator0.setContext(defaultVfsComponentContext0);
  }"
236,"    public void init() throws FileSystemException {
        if (replicatorComponent != null) {
            try {
                AccessController.doPrivileged(new InitAction());
            } catch (final PrivilegedActionException e) {
                throw new FileSystemException(""vfs.impl/init-replicator.error"", e);
            }
        }
    }","  public void test6()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      PrivilegedFileReplicator privilegedFileReplicator0 = new PrivilegedFileReplicator(defaultFileReplicator0);
      Log4JLogger log4JLogger0 = new Log4JLogger();
      privilegedFileReplicator0.setLogger(log4JLogger0);
      // Undeclared exception!
      try { 
        privilegedFileReplicator0.init();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.log4j.CategoryKey"", e);
      }
  }"
237,"    public void setLogger(final Log logger) {
        if (replicatorComponent != null) {
            replicatorComponent.setLogger(logger);
        }
    }","  public void test7()  throws Throwable  {
      PrivilegedFileReplicator privilegedFileReplicator0 = new PrivilegedFileReplicator((FileReplicator) null);
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""T-.R^4{M9"");
      privilegedFileReplicator0.setLogger(jdk13LumberjackLogger0);
  }"
238,"    public void close() {
        if (replicatorComponent != null) {
            AccessController.doPrivileged(new CloseAction());
        }
    }","  public void test8()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      PrivilegedFileReplicator privilegedFileReplicator0 = new PrivilegedFileReplicator(defaultFileReplicator0);
      privilegedFileReplicator0.close();
  }"
239,"    public void init() throws FileSystemException {
        if (replicatorComponent != null) {
            try {
                AccessController.doPrivileged(new InitAction());
            } catch (final PrivilegedActionException e) {
                throw new FileSystemException(""vfs.impl/init-replicator.error"", e);
            }
        }
    }","  public void test9()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      PrivilegedFileReplicator privilegedFileReplicator0 = new PrivilegedFileReplicator(defaultFileReplicator0);
      privilegedFileReplicator0.init();
  }"
240,"    public File replicateFile(final FileObject srcFile, final FileSelector selector) throws FileSystemException {
        try {
            final ReplicateAction action = new ReplicateAction(srcFile, selector);
            return AccessController.doPrivileged(action);
        } catch (final PrivilegedActionException e) {
            throw new FileSystemException(""vfs.impl/replicate-file.error"", e, srcFile.getName());
        }
    }","  public void test10()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      PrivilegedFileReplicator privilegedFileReplicator0 = new PrivilegedFileReplicator(defaultFileReplicator0);
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""com.!ogle.comm8n.hash.Hashing$ChecksumType"", ""com.!ogle.comm8n.hash.Hashing$ChecksumType"", 0, 0, ""com.!ogle.comm8n.hash.Hashing$ChecksumType"", ""com.!ogle.comm8n.hash.Hashing$ChecksumType"", ""com.!ogle.comm8n.hash.Hashing$ChecksumType"", fileType0, ""com.!ogle.comm8n.hash.Hashing$ChecksumType"");
      LayeredFileName layeredFileName0 = new LayeredFileName(""com.!ogle.comm8n.hash.Hashing$ChecksumType"", genericURLFileName0, ""com.!ogle.comm8n.hash.Hashing$ChecksumType"", fileType0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(layeredFileName0, fileSystemOptions0);
      FileObject fileObject0 = virtualFileSystem0.createFile(genericURLFileName0);
      FileTypeSelector fileTypeSelector0 = new FileTypeSelector(fileType0);
      // Undeclared exception!
      try { 
        privilegedFileReplicator0.replicateFile(fileObject0, fileTypeSelector0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileReplicator"", e);
      }
  }"
241,"    protected void deleteFile(final File file) {
        try {
            final FileObject fileObject = getContext().toFileObject(file);
            fileObject.deleteAll();
        } catch (final FileSystemException e) {
            final String message = Messages.getString(""vfs.impl/delete-temp.warn"", file.getName());
            VfsLog.warn(getLogger(), log, message, e);
        }
    }","  public void test0()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      File file0 = MockFile.createTempFile(""\"",K"", (String) null, (File) null);
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      defaultFileReplicator0.setContext(defaultVfsComponentContext0);
      defaultFileReplicator0.deleteFile(file0);
}"
242,"    public void close() {
        // Delete the temporary files
        synchronized (copies) {
            while (!copies.isEmpty()) {
                deleteFile((File) removeFile());
            }
        }

        // Clean up the temp directory, if it is empty
        if (tempDir != null && tempDir.exists()) {
            final String[] list = tempDir.list();
            if (list != null && list.length == 0) {
                tempDir.delete();
                tempDir = null;
            }
        }
    }","  public void test1()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      defaultFileReplicator0.setContext(defaultVfsComponentContext0);
      defaultFileReplicator0.createAndAddFile((File) null, ""\"",K"");
      defaultFileReplicator0.close();
  }"
243,"    protected Object removeFile() {
        synchronized (copies) {
            return copies.remove(0);
        }
    }","  public void test2()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      defaultFileReplicator0.addFile((Object) null);
      Object object0 = defaultFileReplicator0.removeFile();
}"
244,"    protected long getFilecount() {
        return filecount;
    }","  public void test3()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      defaultFileReplicator0.init();
      defaultFileReplicator0.init();
      long long0 = defaultFileReplicator0.getFilecount();
}"
245,"    protected String createFilename(final String baseName) {
        // BUG29007
        // return baseName + ""_"" + getFilecount() + "".tmp"";

        // imario@apache.org: BUG34976 get rid of maybe reserved and dangerous characters
        // e.g. to allow replication of http://hostname.org/fileservlet?file=abc.txt
        final String safeBasename = UriParser.encode(baseName, TMP_RESERVED_CHARS).replace('%', '_');
        return ""tmp_"" + getFilecount() + ""_"" + safeBasename;
    }","  public void test4()  throws Throwable  {
      File file0 = MockFile.createTempFile(""com.google.common.hash.Hashing$ConcatenatedHashFunction"", ""w@\""fi|/dx5N"");
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator(file0);
      String string0 = defaultFileReplicator0.createFilename(""w@\""fi|/dx5N"");
}"
246,"    protected File createFile(final File parent, final String name) throws FileSystemException {
        return new File(parent, UriParser.decode(name));
    }","  public void test5()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""_+vHuGq#XlCm|/_+vHuGq#XlCm|/_+vHuGq#XlCm|"");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, """");
      MockFile mockFile0 = new MockFile(""_+vHuGq#XlCm|"", ""_+vHuGq#XlCm|"");
      File file0 = defaultFileReplicator0.createFile(mockFile0, ""_+vHuGq#XlCm|"");
}"
247,"    protected File createFile(final File parent, final String name) throws FileSystemException {
        return new File(parent, UriParser.decode(name));
    }","  public void test6()  throws Throwable  {
      System.setCurrentTimeMillis((-1914L));
      File file0 = MockFile.createTempFile(""echo $$"", ""echo $$"");
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator(file0);
      File file1 = defaultFileReplicator0.createFile(file0, """");
}"
248,"    protected File createFile(final File parent, final String name) throws FileSystemException {
        return new File(parent, UriParser.decode(name));
    }","  public void test7()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      MockFile mockFile0 = new MockFile(""~C$"");
      File file0 = defaultFileReplicator0.createFile(mockFile0, "".7Aq]wh="");
}"
249,"    protected File createFile(final File parent, final String name) throws FileSystemException {
        return new File(parent, UriParser.decode(name));
    }","  public void test8()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator((File) null);
      File file0 = defaultFileReplicator0.createFile((File) null, """");
}"
250,"    protected File createAndAddFile(final File parent, final String basename) throws FileSystemException {
        final File file = createFile(tempDir, basename);

        // Keep track to delete later
        addFile(file);

        return file;
    }","  public void test9()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator((File) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Xk8H)rm:"");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, """");
      File file0 = defaultFileReplicator0.createAndAddFile((File) null, ""Xk8H)rm:/"");
}"
251,"    protected File createAndAddFile(final File parent, final String basename) throws FileSystemException {
        final File file = createFile(tempDir, basename);

        // Keep track to delete later
        addFile(file);

        return file;
    }","  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis((-3007L));
      File file0 = MockFile.createTempFile(""vfs.impl/temp-dir.debug"", ""vfs.impl/temp-dir.debug"");
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator(file0);
      File file1 = defaultFileReplicator0.createAndAddFile(file0, """");
}"
252,"    protected File createAndAddFile(final File parent, final String basename) throws FileSystemException {
        final File file = createFile(tempDir, basename);

        // Keep track to delete later
        addFile(file);

        return file;
    }","  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""tmp_"");
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator(mockFile0);
      File file0 = defaultFileReplicator0.createAndAddFile(mockFile0, "".a6P*F'6tp"");
}"
253,"    protected File createAndAddFile(final File parent, final String basename) throws FileSystemException {
        final File file = createFile(tempDir, basename);

        // Keep track to delete later
        addFile(file);

        return file;
    }","  public void test12()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      MockFile mockFile0 = new MockFile("""");
      File file0 = defaultFileReplicator0.createAndAddFile(mockFile0, """");
}"
254,"    public File allocateFile(final String baseName) throws FileSystemException {
        // Create a unique-ish file name
        final String basename = createFilename(baseName);
        synchronized (this) {
            filecount++;
        }

        return createAndAddFile(tempDir, basename);
    }","  public void test13()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/tmp/vfs_cache/tmp_0_hadoop.tokens"");
      FileSystemHandling.createFolder(evoSuiteFile0);
      defaultFileReplicator0.init();
      File file0 = defaultFileReplicator0.allocateFile(""hadoop.tokens"");
}"
255,"    public File allocateFile(final String baseName) throws FileSystemException {
        // Create a unique-ish file name
        final String basename = createFilename(baseName);
        synchronized (this) {
            filecount++;
        }

        return createAndAddFile(tempDir, basename);
    }","  public void test14()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/tmp/vfs_cache/tmp_0_hadoop.tokens"");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ""\"",K"");
      defaultFileReplicator0.init();
      File file0 = defaultFileReplicator0.allocateFile(""hadoop.tokens"");
}"
256,"    public File replicateFile(final FileObject srcFile, final FileSelector selector) throws FileSystemException {
        final String basename = srcFile.getName().getBaseName();
        final File file = allocateFile(basename);

        // Copy from the source file
        final FileObject destFile = getContext().toFileObject(file);
        destFile.copyFrom(srcFile, selector);

        return file;
    }","  public void test15()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      defaultFileReplicator0.setContext(defaultVfsComponentContext0);
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""_"", ""9lW"", (-4), (-4), ""\"",K"", ""hadoop.tokens"", "" $Nt]'/"", fileType0, "">fill {}"");
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, fileSystemOptions0);
      FileObject fileObject0 = virtualFileSystem0.createFile(genericURLFileName0);
      PatternFileSelector patternFileSelector0 = new PatternFileSelector("""", (-4));
      try { 
        defaultFileReplicator0.replicateFile(fileObject0, patternFileSelector0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not find a file provider which can handle local files.
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
257,"    protected Object removeFile() {
        synchronized (copies) {
            return copies.remove(0);
        }
    }","  public void test16()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      // Undeclared exception!
      try { 
        defaultFileReplicator0.removeFile();
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException(""java.util.ArrayList"", e);
      }
  }"
258,"    public void init() throws FileSystemException {
        if (tempDir == null) {
            final String baseTmpDir = System.getProperty(""java.io.tmpdir"");

            tempDir = new File(baseTmpDir, ""vfs_cache"").getAbsoluteFile();
        }

        filecount = random.nextInt() & MASK;

        if (!tempDirMessageLogged) {
            final String message = Messages.getString(""vfs.impl/temp-dir.debug"", tempDir);
            VfsLog.debug(getLogger(), log, message);

            tempDirMessageLogged = true;
        }
    }","  public void test17()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator((File) null);
      Log4JLogger log4JLogger0 = new Log4JLogger();
      defaultFileReplicator0.setLogger(log4JLogger0);
      // Undeclared exception!
      try { 
        defaultFileReplicator0.init();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.log4j.CategoryKey"", e);
      }
  }"
259,"    protected void deleteFile(final File file) {
        try {
            final FileObject fileObject = getContext().toFileObject(file);
            fileObject.deleteAll();
        } catch (final FileSystemException e) {
            final String message = Messages.getString(""vfs.impl/delete-temp.warn"", file.getName());
            VfsLog.warn(getLogger(), log, message, e);
        }
    }","  public void test18()  throws Throwable  {
      File file0 = MockFile.createTempFile(""com.google.common.hash.Hashing$ConcatenatedHashFunction"", ""w@\""fi|/dx5N"");
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator(file0);
      // Undeclared exception!
      try { 
        defaultFileReplicator0.deleteFile(file0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileReplicator"", e);
      }
  }"
260,"    protected void deleteFile(final File file) {
        try {
            final FileObject fileObject = getContext().toFileObject(file);
            fileObject.deleteAll();
        } catch (final FileSystemException e) {
            final String message = Messages.getString(""vfs.impl/delete-temp.warn"", file.getName());
            VfsLog.warn(getLogger(), log, message, e);
        }
    }","  public void test19()  throws Throwable  {
      File file0 = MockFile.createTempFile(""mi[O<  ]"", ""mi[O<  ]"");
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator(file0);
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      defaultFileReplicator0.setContext(defaultVfsComponentContext0);
      Log4JLogger log4JLogger0 = new Log4JLogger();
      defaultFileReplicator0.setLogger(log4JLogger0);
      // Undeclared exception!
      try { 
        defaultFileReplicator0.deleteFile(file0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.log4j.CategoryKey"", e);
      }
  }"
261,"    protected String createFilename(final String baseName) {
        // BUG29007
        // return baseName + ""_"" + getFilecount() + "".tmp"";

        // imario@apache.org: BUG34976 get rid of maybe reserved and dangerous characters
        // e.g. to allow replication of http://hostname.org/fileservlet?file=abc.txt
        final String safeBasename = UriParser.encode(baseName, TMP_RESERVED_CHARS).replace('%', '_');
        return ""tmp_"" + getFilecount() + ""_"" + safeBasename;
    }","  public void test20()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      // Undeclared exception!
      try { 
        defaultFileReplicator0.createFilename((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileReplicator"", e);
      }
  }"
262,"    protected File createFile(final File parent, final String name) throws FileSystemException {
        return new File(parent, UriParser.decode(name));
    }","  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("".c o\""&%hBxT"");
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator(mockFile0);
      try { 
        defaultFileReplicator0.createFile(mockFile0, "".c o\""&%hBxT"");
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Invalid URI escape sequence \""%hB\"".
         //
         verifyException(""org.apache.commons.vfs2.provider.UriParser"", e);
      }
  }"
263,"    protected File createFile(final File parent, final String name) throws FileSystemException {
        return new File(parent, UriParser.decode(name));
    }","  public void test22()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      // Undeclared exception!
      try { 
        defaultFileReplicator0.createFile((File) null, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFile"", e);
      }
  }"
264,"    protected File createAndAddFile(final File parent, final String basename) throws FileSystemException {
        final File file = createFile(tempDir, basename);

        // Keep track to delete later
        addFile(file);

        return file;
    }","  public void test23()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      try { 
        defaultFileReplicator0.createAndAddFile((File) null, ""\""XDU^f%LwK8Uo:W"");
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Invalid URI escape sequence \""%Lw\"".
         //
         verifyException(""org.apache.commons.vfs2.provider.UriParser"", e);
      }
  }"
265,"    protected File createAndAddFile(final File parent, final String basename) throws FileSystemException {
        final File file = createFile(tempDir, basename);

        // Keep track to delete later
        addFile(file);

        return file;
    }","  public void test24()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      File file0 = MockFile.createTempFile(""\"",K"", (String) null, (File) null);
      // Undeclared exception!
      try { 
        defaultFileReplicator0.createAndAddFile(file0, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFile"", e);
      }
  }"
266,"    public void close() {
        // Delete the temporary files
        synchronized (copies) {
            while (!copies.isEmpty()) {
                deleteFile((File) removeFile());
            }
        }

        // Clean up the temp directory, if it is empty
        if (tempDir != null && tempDir.exists()) {
            final String[] list = tempDir.list();
            if (list != null && list.length == 0) {
                tempDir.delete();
                tempDir = null;
            }
        }
    }","  public void test25()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      defaultFileReplicator0.addFile(defaultFileReplicator0);
      // Undeclared exception!
      try { 
        defaultFileReplicator0.close();
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.vfs2.impl.DefaultFileReplicator cannot be cast to java.io.File
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileReplicator"", e);
      }
  }"
267,"    public File allocateFile(final String baseName) throws FileSystemException {
        // Create a unique-ish file name
        final String basename = createFilename(baseName);
        synchronized (this) {
            filecount++;
        }

        return createAndAddFile(tempDir, basename);
    }","  public void test26()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      // Undeclared exception!
      try { 
        defaultFileReplicator0.allocateFile((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileReplicator"", e);
      }
  }"
268,"    public void close() {
        // Delete the temporary files
        synchronized (copies) {
            while (!copies.isEmpty()) {
                deleteFile((File) removeFile());
            }
        }

        // Clean up the temp directory, if it is empty
        if (tempDir != null && tempDir.exists()) {
            final String[] list = tempDir.list();
            if (list != null && list.length == 0) {
                tempDir.delete();
                tempDir = null;
            }
        }
    }","  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", """");
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator(mockFile0);
      defaultFileReplicator0.close();
  }"
269,"    public void close() {
        // Delete the temporary files
        synchronized (copies) {
            while (!copies.isEmpty()) {
                deleteFile((File) removeFile());
            }
        }

        // Clean up the temp directory, if it is empty
        if (tempDir != null && tempDir.exists()) {
            final String[] list = tempDir.list();
            if (list != null && list.length == 0) {
                tempDir.delete();
                tempDir = null;
            }
        }
    }","  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator(mockFile0);
      defaultFileReplicator0.close();
}"
270,"    public void close() {
        // Delete the temporary files
        synchronized (copies) {
            while (!copies.isEmpty()) {
                deleteFile((File) removeFile());
            }
        }

        // Clean up the temp directory, if it is empty
        if (tempDir != null && tempDir.exists()) {
            final String[] list = tempDir.list();
            if (list != null && list.length == 0) {
                tempDir.delete();
                tempDir = null;
            }
        }
    }","  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator(mockFile0);
      defaultFileReplicator0.close();
}"
271,"    public void close() {
        // Delete the temporary files
        synchronized (copies) {
            while (!copies.isEmpty()) {
                deleteFile((File) removeFile());
            }
        }

        // Clean up the temp directory, if it is empty
        if (tempDir != null && tempDir.exists()) {
            final String[] list = tempDir.list();
            if (list != null && list.length == 0) {
                tempDir.delete();
                tempDir = null;
            }
        }
    }","  public void test30()  throws Throwable  {
      File file0 = MockFile.createTempFile(""com.google.common.hash.Hashing$ConcatenatedHashFunction"", ""w@\""fi|/dx5N"");
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator(file0);
      defaultFileReplicator0.close();
  }"
272,"    public void close() {
        // Delete the temporary files
        synchronized (copies) {
            while (!copies.isEmpty()) {
                deleteFile((File) removeFile());
            }
        }

        // Clean up the temp directory, if it is empty
        if (tempDir != null && tempDir.exists()) {
            final String[] list = tempDir.list();
            if (list != null && list.length == 0) {
                tempDir.delete();
                tempDir = null;
            }
        }
    }","  public void test31()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      defaultFileReplicator0.init();
      defaultFileReplicator0.close();
  }"
273,"    public File replicateFile(final FileObject srcFile, final FileSelector selector) throws FileSystemException {
        final String basename = srcFile.getName().getBaseName();
        final File file = allocateFile(basename);

        // Copy from the source file
        final FileObject destFile = getContext().toFileObject(file);
        destFile.copyFrom(srcFile, selector);

        return file;
    }","  public void test32()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""_"", ""9lW"", (-4), (-4), ""\"",K"", ""hadoop.tokens"", "" $Nt]'/"", fileType0, "">fill {}"");
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, fileSystemOptions0);
      FileObject fileObject0 = virtualFileSystem0.createFile(genericURLFileName0);
      PatternFileSelector patternFileSelector0 = new PatternFileSelector("""", (-4));
      // Undeclared exception!
      try { 
        defaultFileReplicator0.replicateFile(fileObject0, patternFileSelector0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileReplicator"", e);
      }
  }"
274,"    public void close() {
        // Delete the temporary files
        synchronized (copies) {
            while (!copies.isEmpty()) {
                deleteFile((File) removeFile());
            }
        }

        // Clean up the temp directory, if it is empty
        if (tempDir != null && tempDir.exists()) {
            final String[] list = tempDir.list();
            if (list != null && list.length == 0) {
                tempDir.delete();
                tempDir = null;
            }
        }
    }","  public void test33()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator((File) null);
      defaultFileReplicator0.addFile((Object) null);
      // Undeclared exception!
      try { 
        defaultFileReplicator0.close();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileReplicator"", e);
      }
  }"
275,"    public File allocateFile(final String baseName) throws FileSystemException {
        // Create a unique-ish file name
        final String basename = createFilename(baseName);
        synchronized (this) {
            filecount++;
        }

        return createAndAddFile(tempDir, basename);
    }","  public void test34()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      File file0 = defaultFileReplicator0.allocateFile(""hadoop.tokens"");
}"
276,"    public File allocateFile(final String baseName) throws FileSystemException {
        // Create a unique-ish file name
        final String basename = createFilename(baseName);
        synchronized (this) {
            filecount++;
        }

        return createAndAddFile(tempDir, basename);
    }","  public void test35()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      File file0 = defaultFileReplicator0.allocateFile(""hadoop.tokens"");
}"
277,"    protected long getFilecount() {
        return filecount;
    }","  public void test36()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      long long0 = defaultFileReplicator0.getFilecount();
}"
278,"    protected Object removeFile() {
        synchronized (copies) {
            return copies.remove(0);
        }
    }","  public void test37()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      defaultFileReplicator0.createAndAddFile((File) null, ""\"",K"");
      MockFile mockFile0 = (MockFile)defaultFileReplicator0.removeFile();
}"
279,"    protected Object removeFile() {
        synchronized (copies) {
            return copies.remove(0);
        }
    }","  public void test38()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      defaultFileReplicator0.removeFile(""\"",K"");
  }"
280,"    public String getPackageName() {
        return packageName;
    }","  public void test0()  throws Throwable  {
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileObject0).getParent();
      Resource resource0 = new Resource(""vfs.provider/check-is-hidden.error"", fileObject0, fileObject0);
      String string0 = resource0.getPackageName();
}"
281,"    public String getPackageName() {
        return packageName;
    }","  public void test1()  throws Throwable  {
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileObject0).getParent();
      Resource resource0 = new Resource(""vfs.provider/check-is-hidden.error"", fileObject0, fileObject0);
      String string0 = resource0.getPackageName();
}"
282,"    public String getPackageName() {
        return packageName;
    }","  public void test2()  throws Throwable  {
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileObject0).getParent();
      Resource resource0 = new Resource(""/"", fileObject0, fileObject0);
      String string0 = resource0.getPackageName();
}"
283,"    public String getPackageName() {
        return packageName;
    }","  public void test3()  throws Throwable  {
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileObject0).getParent();
      Resource resource0 = new Resource(""/"", fileObject0, fileObject0);
      String string0 = resource0.getPackageName();
}"
284,"    public String getPackageAttribute(final Attributes.Name attrName) throws FileSystemException {
        return (String) packageFolder.getContent().getAttribute(attrName.toString());
    }","  public void test4()  throws Throwable  {
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(fileContent0).getAttribute(anyString());
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      FileObject fileObject1 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileObject1).getParent();
      Resource resource0 = new Resource(""w"", fileObject1, fileObject1);
      Attributes.Name attributes_Name0 = mock(Attributes.Name.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(attributes_Name0).toString();
      String string0 = resource0.getPackageAttribute(attributes_Name0);
}"
285,"    public String getPackageAttribute(final Attributes.Name attrName) throws FileSystemException {
        return (String) packageFolder.getContent().getAttribute(attrName.toString());
    }","  public void test5()  throws Throwable  {
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      doReturn(""w"").when(fileContent0).getAttribute(anyString());
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      FileObject fileObject1 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileObject1).getParent();
      Resource resource0 = new Resource(""w"", fileObject1, fileObject1);
      Attributes.Name attributes_Name0 = mock(Attributes.Name.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(attributes_Name0).toString();
      String string0 = resource0.getPackageAttribute(attributes_Name0);
}"
286,"    public String getPackageAttribute(final Attributes.Name attrName) throws FileSystemException {
        return (String) packageFolder.getContent().getAttribute(attrName.toString());
    }","  public void test6()  throws Throwable  {
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(fileContent0).getAttribute(anyString());
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      FileObject fileObject1 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileObject1).getParent();
      Resource resource0 = new Resource("""", fileObject1, fileObject1);
      Attributes.Name attributes_Name0 = mock(Attributes.Name.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(attributes_Name0).toString();
      String string0 = resource0.getPackageAttribute(attributes_Name0);
}"
287,"    public byte[] getBytes() throws IOException {
        return FileObjectUtils.getContentAsByteArray(resource);
    }","  public void test7()  throws Throwable  {
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      doReturn((byte[]) null).when(fileContent0).getByteArray();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      FileObject fileObject1 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject1).getContent();
      doReturn(fileObject0).when(fileObject1).getParent();
      Resource resource0 = new Resource(""w"", fileObject1, fileObject1);
      byte[] byteArray0 = resource0.getBytes();
}"
288,"    public byte[] getBytes() throws IOException {
        return FileObjectUtils.getContentAsByteArray(resource);
    }","  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(fileContent0).getByteArray();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      FileObject fileObject1 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject1).getContent();
      doReturn(fileObject0).when(fileObject1).getParent();
      Resource resource0 = new Resource("""", fileObject1, fileObject1);
      byte[] byteArray1 = resource0.getBytes();
}"
289,"    public byte[] getBytes() throws IOException {
        return FileObjectUtils.getContentAsByteArray(resource);
    }","  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(fileContent0).getByteArray();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      FileObject fileObject1 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject1).getContent();
      doReturn(fileObject0).when(fileObject1).getParent();
      Resource resource0 = new Resource(""w"", fileObject1, fileObject1);
      byte[] byteArray1 = resource0.getBytes();
}"
290,"    public URL getCodeSourceURL() throws FileSystemException {
        return root.getURL();
    }","  public void test10()  throws Throwable  {
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      FileObject fileObject1 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileObject1).getParent();
      Resource resource0 = new Resource("";i"", (FileObject) null, fileObject1);
      // Undeclared exception!
      try { 
        resource0.getCodeSourceURL();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.Resource"", e);
      }
  }"
291,"    public Resource(final String name, final FileObject root, final FileObject resource) throws FileSystemException {
        this.root = root;
        this.resource = resource;
        packageFolder = resource.getParent();
        final int pos = name.lastIndexOf('/');
        if (pos == -1) {
            packageName = null;
        } else {
            packageName = name.substring(0, pos).replace('/', '.');
        }
    }","  public void test11()  throws Throwable  {
      Resource resource0 = null;
      try {
        resource0 = new Resource(""J\""lL9o$Qou/U4uL):="", (FileObject) null, (FileObject) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.Resource"", e);
      }
  }"
292,"    public URL getURL() throws FileSystemException {
        return resource.getURL();
    }","  public void test12()  throws Throwable  {
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileObject0).getParent();
      doReturn((URL) null).when(fileObject0).getURL();
      Resource resource0 = new Resource("""", fileObject0, fileObject0);
      URL uRL0 = resource0.getURL();
}"
293,"    public String getPackageAttribute(final Attributes.Name attrName) throws FileSystemException {
        return (String) packageFolder.getContent().getAttribute(attrName.toString());
    }","  public void test13()  throws Throwable  {
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileObject0).getParent();
      Resource resource0 = new Resource("""", fileObject0, fileObject0);
      Attributes.Name attributes_Name0 = mock(Attributes.Name.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        resource0.getPackageAttribute(attributes_Name0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.Resource"", e);
      }
  }"
294,"    public byte[] getBytes() throws IOException {
        return FileObjectUtils.getContentAsByteArray(resource);
    }","  public void test14()  throws Throwable  {
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      FileObject fileObject1 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileContent) null).when(fileObject1).getContent();
      doReturn((FileObject) null).when(fileObject1).getParent();
      Resource resource0 = new Resource(""Y3(&~J."", fileObject0, fileObject1);
      // Undeclared exception!
      try { 
        resource0.getBytes();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.FileObjectUtils"", e);
      }
  }"
295,"    public URL getCodeSourceURL() throws FileSystemException {
        return root.getURL();
    }","  public void test15()  throws Throwable  {
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileObject0).getParent();
      doReturn((URL) null).when(fileObject0).getURL();
      Resource resource0 = new Resource("""", fileObject0, fileObject0);
      URL uRL0 = resource0.getCodeSourceURL();
}"
296,"    public String getPackageName() {
        return packageName;
    }","  public void test16()  throws Throwable  {
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileObject0).getParent();
      Resource resource0 = new Resource("""", fileObject0, fileObject0);
      String string0 = resource0.getPackageName();
}"
297,"    public FileObject getPackageFolder() {
        return packageFolder;
    }","  public void test17()  throws Throwable  {
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      FileObject fileObject1 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileObject1).getParent();
      Resource resource0 = new Resource(""Y3(&~J."", fileObject0, fileObject1);
      FileObject fileObject2 = resource0.getPackageFolder();
}"
298,"    public FileObject getFileObject() {
        return resource;
    }","  public void test18()  throws Throwable  {
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fileObject0).toString();
      doReturn((FileObject) null).when(fileObject0).getParent();
      Resource resource0 = new Resource("""", fileObject0, fileObject0);
      FileObject fileObject1 = resource0.getFileObject();
}"
299,"    public String getScheme(final FileObject fileObject) throws FileSystemException {
        // Check the file's mime type for a match
        final FileContent content = fileObject.getContent();
        final String mimeType = content.getContentInfo().getContentType();
        if (mimeType != null) {
            return mimeTypeMap.get(mimeType);
        }

        // no specific mime-type - if it is a file also check the extension
        if (!fileObject.isFile()) {
            return null; // VFS-490 folders don't use extensions for mime-type
        }
        return extensionMap.get(fileObject.getName().getExtension());
    }","  public void test0()  throws Throwable  {
      FileTypeMap fileTypeMap0 = new FileTypeMap();
      fileTypeMap0.addMimeType(""V0%!g*#^1L_G0:"", ""`1Nn/3"");
      FileContentInfo fileContentInfo0 = mock(FileContentInfo.class, new ViolatedAssumptionAnswer());
      doReturn(""V0%!g*#^1L_G0:"").when(fileContentInfo0).getContentType();
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      doReturn(fileContentInfo0).when(fileContent0).getContentInfo();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      String string0 = fileTypeMap0.getScheme(fileObject0);
}"
300,"    public String getScheme(final FileObject fileObject) throws FileSystemException {
        // Check the file's mime type for a match
        final FileContent content = fileObject.getContent();
        final String mimeType = content.getContentInfo().getContentType();
        if (mimeType != null) {
            return mimeTypeMap.get(mimeType);
        }

        // no specific mime-type - if it is a file also check the extension
        if (!fileObject.isFile()) {
            return null; // VFS-490 folders don't use extensions for mime-type
        }
        return extensionMap.get(fileObject.getName().getExtension());
    }","  public void test1()  throws Throwable  {
      FileTypeMap fileTypeMap0 = new FileTypeMap();
      fileTypeMap0.addMimeType(""V0%!g*#^1L_G0:"", ""`1Nn/3"");
      FileContentInfo fileContentInfo0 = mock(FileContentInfo.class, new ViolatedAssumptionAnswer());
      doReturn(""V0%!g*#^1L_G0:"").when(fileContentInfo0).getContentType();
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      doReturn(fileContentInfo0).when(fileContent0).getContentInfo();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      String string0 = fileTypeMap0.getScheme(fileObject0);
}"
301,"    public String getScheme(final FileObject fileObject) throws FileSystemException {
        // Check the file's mime type for a match
        final FileContent content = fileObject.getContent();
        final String mimeType = content.getContentInfo().getContentType();
        if (mimeType != null) {
            return mimeTypeMap.get(mimeType);
        }

        // no specific mime-type - if it is a file also check the extension
        if (!fileObject.isFile()) {
            return null; // VFS-490 folders don't use extensions for mime-type
        }
        return extensionMap.get(fileObject.getName().getExtension());
    }","  public void test2()  throws Throwable  {
      FileTypeMap fileTypeMap0 = new FileTypeMap();
      fileTypeMap0.addMimeType("""", """");
      FileContentInfo fileContentInfo0 = mock(FileContentInfo.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(fileContentInfo0).getContentType();
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      doReturn(fileContentInfo0).when(fileContent0).getContentInfo();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      String string0 = fileTypeMap0.getScheme(fileObject0);
}"
302,"    public String getScheme(final FileObject fileObject) throws FileSystemException {
        // Check the file's mime type for a match
        final FileContent content = fileObject.getContent();
        final String mimeType = content.getContentInfo().getContentType();
        if (mimeType != null) {
            return mimeTypeMap.get(mimeType);
        }

        // no specific mime-type - if it is a file also check the extension
        if (!fileObject.isFile()) {
            return null; // VFS-490 folders don't use extensions for mime-type
        }
        return extensionMap.get(fileObject.getName().getExtension());
    }","  public void test3()  throws Throwable  {
      FileTypeMap fileTypeMap0 = new FileTypeMap();
      FileContentInfo fileContentInfo0 = mock(FileContentInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fileContentInfo0).getContentType();
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      doReturn(fileContentInfo0).when(fileContent0).getContentInfo();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      doReturn(false).when(fileObject0).isFile();
      String string0 = fileTypeMap0.getScheme(fileObject0);
}"
303,"    public String getScheme(final FileObject fileObject) throws FileSystemException {
        // Check the file's mime type for a match
        final FileContent content = fileObject.getContent();
        final String mimeType = content.getContentInfo().getContentType();
        if (mimeType != null) {
            return mimeTypeMap.get(mimeType);
        }

        // no specific mime-type - if it is a file also check the extension
        if (!fileObject.isFile()) {
            return null; // VFS-490 folders don't use extensions for mime-type
        }
        return extensionMap.get(fileObject.getName().getExtension());
    }","  public void test4()  throws Throwable  {
      FileTypeMap fileTypeMap0 = new FileTypeMap();
      FileContentInfo fileContentInfo0 = mock(FileContentInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fileContentInfo0).getContentType();
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      doReturn(fileContentInfo0).when(fileContent0).getContentInfo();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      doReturn((FileName) null).when(fileObject0).getName();
      doReturn(true).when(fileObject0).isFile();
      // Undeclared exception!
      try { 
        fileTypeMap0.getScheme(fileObject0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.FileTypeMap"", e);
      }
  }"
304,"    public void clear() {
        mimeTypeMap.clear();
        extensionMap.clear();
    }","  public void test5()  throws Throwable  {
      FileTypeMap fileTypeMap0 = new FileTypeMap();
      fileTypeMap0.clear();
  }"
305,"    public void addExtension(final String extension, final String scheme) {
        extensionMap.put(extension, scheme);
    }","  public void test6()  throws Throwable  {
      FileTypeMap fileTypeMap0 = new FileTypeMap();
      fileTypeMap0.addExtension("":%+o*4"", "".S{Awiqxx"");
  }"
306,"    public FileObject toFileObject(final File file) throws FileSystemException {
        return manager.toFileObject(file);
    }","  public void test0()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = mock(DefaultFileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(defaultFileSystemManager0).toFileObject(any(java.io.File.class));
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      defaultVfsComponentContext0.toFileObject(file0);
  }"
307,,"  public void test1()  throws Throwable  {
  }"
308,,"  public void test2()  throws Throwable  {
  }"
309,"    public FileName parseURI(final String uri) throws FileSystemException {
        return manager.resolveURI(uri);
    }","  public void test3()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = mock(DefaultFileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((FileName) null).when(defaultFileSystemManager0).resolveURI(anyString());
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      FileName fileName0 = defaultVfsComponentContext0.parseURI("";*5g8Uan)wpI {"");
}"
310,"    public TemporaryFileStore getTemporaryFileStore() throws FileSystemException {
        return manager.getTemporaryFileStore();
    }","  public void test4()  throws Throwable  {
      TemporaryFileStore temporaryFileStore0 = mock(TemporaryFileStore.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(temporaryFileStore0).toString();
      DefaultFileSystemManager defaultFileSystemManager0 = mock(DefaultFileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(temporaryFileStore0).when(defaultFileSystemManager0).getTemporaryFileStore();
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      TemporaryFileStore temporaryFileStore1 = defaultVfsComponentContext0.getTemporaryFileStore();
}"
311,"    public FileReplicator getReplicator() throws FileSystemException {
        return manager.getReplicator();
    }","  public void test5()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = mock(DefaultFileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((FileReplicator) null).when(defaultFileSystemManager0).getReplicator();
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      FileReplicator fileReplicator0 = defaultVfsComponentContext0.getReplicator();
}"
312,"    public FileReplicator getReplicator() throws FileSystemException {
        return manager.getReplicator();
    }","  public void test6()  throws Throwable  {
      FileReplicator fileReplicator0 = mock(FileReplicator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fileReplicator0).toString();
      DefaultFileSystemManager defaultFileSystemManager0 = mock(DefaultFileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileReplicator0).when(defaultFileSystemManager0).getReplicator();
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      FileReplicator fileReplicator1 = defaultVfsComponentContext0.getReplicator();
}"
313,"    public FileSystemManager getFileSystemManager() {
        return manager;
    }","  public void test7()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = mock(DefaultFileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultFileSystemManager0).toString();
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      FileSystemManager fileSystemManager0 = defaultVfsComponentContext0.getFileSystemManager();
}"
314,"    public TemporaryFileStore getTemporaryFileStore() throws FileSystemException {
        return manager.getTemporaryFileStore();
    }","  public void test8()  throws Throwable  {
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext((DefaultFileSystemManager) null);
      // Undeclared exception!
      try { 
        defaultVfsComponentContext0.getTemporaryFileStore();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultVfsComponentContext"", e);
      }
  }"
315,"    public FileName parseURI(final String uri) throws FileSystemException {
        return manager.resolveURI(uri);
    }","  public void test9()  throws Throwable  {
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext((DefaultFileSystemManager) null);
      // Undeclared exception!
      try { 
        defaultVfsComponentContext0.parseURI(""5sh"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultVfsComponentContext"", e);
      }
  }"
316,"    public FileObject resolveFile(final FileObject baseFile, final String name,
            final FileSystemOptions fileSystemOptions) throws FileSystemException {
        return manager.resolveFile(baseFile, name, fileSystemOptions);
    }","  public void test10()  throws Throwable  {
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext((DefaultFileSystemManager) null);
      FileSystemOptions fileSystemOptions0 = mock(FileSystemOptions.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultVfsComponentContext0.resolveFile((FileObject) null, """", fileSystemOptions0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultVfsComponentContext"", e);
      }
  }"
317,"    public FileReplicator getReplicator() throws FileSystemException {
        return manager.getReplicator();
    }","  public void test11()  throws Throwable  {
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext((DefaultFileSystemManager) null);
      // Undeclared exception!
      try { 
        defaultVfsComponentContext0.getReplicator();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultVfsComponentContext"", e);
      }
  }"
318,"    public TemporaryFileStore getTemporaryFileStore() throws FileSystemException {
        return manager.getTemporaryFileStore();
    }","  public void test12()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = mock(DefaultFileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((TemporaryFileStore) null).when(defaultFileSystemManager0).getTemporaryFileStore();
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      TemporaryFileStore temporaryFileStore0 = defaultVfsComponentContext0.getTemporaryFileStore();
}"
319,"    public FileObject resolveFile(final FileObject baseFile, final String name,
            final FileSystemOptions fileSystemOptions) throws FileSystemException {
        return manager.resolveFile(baseFile, name, fileSystemOptions);
    }","  public void test13()  throws Throwable  {
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext((DefaultFileSystemManager) null);
      FileSystemOptions fileSystemOptions0 = mock(FileSystemOptions.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultVfsComponentContext0.resolveFile(""w"", fileSystemOptions0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultVfsComponentContext"", e);
      }
  }"
320,"    public FileObject toFileObject(final File file) throws FileSystemException {
        return manager.toFileObject(file);
    }","  public void test14()  throws Throwable  {
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext((DefaultFileSystemManager) null);
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultVfsComponentContext0.toFileObject(file0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultVfsComponentContext"", e);
      }
  }"
321,"    public FileSystemManager getFileSystemManager() {
        return manager;
    }","  public void test15()  throws Throwable  {
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext((DefaultFileSystemManager) null);
      FileSystemManager fileSystemManager0 = defaultVfsComponentContext0.getFileSystemManager();
}"
322,"    public FileName resolveURI(final String uri) throws FileSystemException {
        UriParser.checkUriEncoding(uri);

        if (uri == null) {
            throw new IllegalArgumentException();
        }

        // Extract the scheme
        final String scheme = UriParser.extractScheme(getSchemes(), uri);
        if (scheme != null) {
            // An absolute URI - locate the provider
            final FileProvider provider = providers.get(scheme);
            if (provider != null) {
                return provider.parseUri(null, uri);
            }

            // Otherwise, assume a local file
        }

        // Handle absolute file names
        if (localFileProvider != null && localFileProvider.isAbsoluteLocalName(uri)) {
            return localFileProvider.parseUri(null, uri);
        }

        if (scheme != null) {
            // An unknown scheme - hand it to the default provider
            FileSystemException.requireNonNull(defaultProvider, ""vfs.impl/unknown-scheme.error"", scheme, uri);
            return defaultProvider.parseUri(null, uri);
        }

        // Assume a relative name - use the supplied base file
        FileSystemException.requireNonNull(baseFile, ""vfs.impl/find-rel-file.error"", uri);

        return resolveName(baseFile.getName(), uri, NameScope.FILE_SYSTEM);
    }","  public void test0()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.addVirtualFileSystemScheme(""/aC:6EPo"");
      GzipFileProvider gzipFileProvider0 = new GzipFileProvider();
      defaultFileSystemManager0.setDefaultProvider(gzipFileProvider0);
      try { 
        defaultFileSystemManager0.resolveURI(""/aC:6EPo"");
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not find file with URI \""6EPo\"" because it is a relative path, and no base URI was provided.
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
323,"    public FileObject resolveFile(final File baseFile, final String uri) throws FileSystemException {
        return resolveFile(getLocalFileProvider().findLocalFile(baseFile), uri);
    }","  public void test1()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      try { 
        defaultFileSystemManager0.resolveFile((FileObject) null, "":\""eRWta|?3mwO9c"");
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not find file with URI \"":\""eRWta|?3mwO9c\"" because it is a relative path, and no base URI was provided.
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
324,"    public FileObject resolveFile(final File baseFile, final String uri) throws FileSystemException {
        return resolveFile(getLocalFileProvider().findLocalFile(baseFile), uri);
    }","  public void test2()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      MockFile mockFile0 = new MockFile(""9J.R!>bl4BPdSspq"");
      URL uRL0 = mockFile0.toURL();
      try { 
        defaultFileSystemManager0.resolveFile(uRL0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Unknown message with code \""Illegal character in path at index 111: file:/home/FSE_USER/Documents/toga-evaluation/toga-eval-FSE_USER-2023/artifacts/commons-vfs-2.9.0/commons-vfs2/9J.R!>bl4BPdSspq\"".
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
325,"    public FileObject createFileSystem(final FileObject file) throws FileSystemException {
        final String scheme = typeMap.getScheme(file);
        FileSystemException.requireNonNull(scheme, ""vfs.impl/no-provider-for-file.error"", file);
        return createFileSystem(scheme, file);
    }","  public void test3()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[7];
      stringArray0[5] = "":\""eRWta|?3mwO9c"";
      DefaultLocalFileProvider defaultLocalFileProvider0 = new DefaultLocalFileProvider();
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) defaultLocalFileProvider0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.createFileSystem("":\""eRWta|?3mwO9c"", (FileObject) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
326,"    public FileName resolveURI(final String uri) throws FileSystemException {
        UriParser.checkUriEncoding(uri);

        if (uri == null) {
            throw new IllegalArgumentException();
        }

        // Extract the scheme
        final String scheme = UriParser.extractScheme(getSchemes(), uri);
        if (scheme != null) {
            // An absolute URI - locate the provider
            final FileProvider provider = providers.get(scheme);
            if (provider != null) {
                return provider.parseUri(null, uri);
            }

            // Otherwise, assume a local file
        }

        // Handle absolute file names
        if (localFileProvider != null && localFileProvider.isAbsoluteLocalName(uri)) {
            return localFileProvider.parseUri(null, uri);
        }

        if (scheme != null) {
            // An unknown scheme - hand it to the default provider
            FileSystemException.requireNonNull(defaultProvider, ""vfs.impl/unknown-scheme.error"", scheme, uri);
            return defaultProvider.parseUri(null, uri);
        }

        // Assume a relative name - use the supplied base file
        FileSystemException.requireNonNull(baseFile, ""vfs.impl/find-rel-file.error"", uri);

        return resolveName(baseFile.getName(), uri, NameScope.FILE_SYSTEM);
    }","  public void test4()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      VirtualFileName virtualFileName0 = new VirtualFileName(""l"", ""l"", fileType0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(virtualFileName0, fileSystemOptions0);
      FileObject fileObject0 = virtualFileSystem0.createFile(virtualFileName0);
      defaultFileSystemManager0.setBaseFile(fileObject0);
      FileName fileName0 = defaultFileSystemManager0.resolveURI(""l"");
}"
327,"    public FileObject resolveFile(final File baseFile, final String uri) throws FileSystemException {
        return resolveFile(getLocalFileProvider().findLocalFile(baseFile), uri);
    }","  public void test5()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      FileObject fileObject0 = defaultFileSystemManager0.createVirtualFileSystem(""org.apache.hadoop.security.alias.CredentialProvider$CredentialEntry"");
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FileObject fileObject1 = defaultFileSystemManager0.resolveFile(fileObject0, ""il'etcA<!n,4"", fileSystemOptions0);
}"
328,"    public String[] getSchemes() {
        final List<String> schemes = new ArrayList<>(providers.size() + virtualFileSystemSchemes.size());
        schemes.addAll(providers.keySet());
        schemes.addAll(virtualFileSystemSchemes);
        return schemes.toArray(new String[]{});
    }","  public void test6()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[1];
      Tbz2FileProvider tbz2FileProvider0 = new Tbz2FileProvider();
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) tbz2FileProvider0);
      String[] stringArray1 = defaultFileSystemManager0.getSchemes();
}"
329,"    public FileReplicator getReplicator() throws FileSystemException {
        return FileSystemException.requireNonNull(fileReplicator, ""vfs.impl/no-replicator.error"");
    }","  public void test7()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator((File) null);
      defaultFileSystemManager0.setReplicator(defaultFileReplicator0);
      FileReplicator fileReplicator0 = defaultFileSystemManager0.getReplicator();
}"
330,"    public Collection<Capability> getProviderCapabilities(final String scheme) throws FileSystemException {
        final FileProvider provider = providers.get(scheme);
        FileSystemException.requireNonNull(provider, ""vfs.impl/unknown-scheme.error"", scheme);
        return provider.getCapabilities();
    }","  public void test8()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FtpFileProvider ftpFileProvider0 = new FtpFileProvider();
      defaultFileSystemManager0.addProvider(""M%}i4d].J&.)"", (FileProvider) ftpFileProvider0);
      Collection<Capability> collection0 = defaultFileSystemManager0.getProviderCapabilities(""M%}i4d].J&.)"");
}"
331,"    protected Log getLogger() {
        return log;
    }","  public void test9()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.setLogger((Log) null);
      Log log0 = defaultFileSystemManager0.getLogger();
}"
332,"    protected Log getLogger() {
        return log;
    }","  public void test10()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      Log log0 = defaultFileSystemManager0.getLogger();
}"
333,"    public FilesCache getFilesCache() {
        return filesCache;
    }","  public void test11()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      FilesCache filesCache0 = defaultFileSystemManager0.getFilesCache();
}"
334,"    public FileSystemConfigBuilder getFileSystemConfigBuilder(final String scheme) throws FileSystemException {
        final FileProvider provider = providers.get(scheme);
        FileSystemException.requireNonNull(provider, ""vfs.impl/unknown-scheme.error"", scheme);
        return provider.getConfigBuilder();
    }","  public void test12()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      TarFileProvider tarFileProvider0 = new TarFileProvider();
      defaultFileSystemManager0.addProvider(""^~-o`HcrON>Ce`Z"", (FileProvider) tarFileProvider0);
      FileSystemConfigBuilder fileSystemConfigBuilder0 = defaultFileSystemManager0.getFileSystemConfigBuilder(""^~-o`HcrON>Ce`Z"");
}"
335,"    public FileSystemConfigBuilder getFileSystemConfigBuilder(final String scheme) throws FileSystemException {
        final FileProvider provider = providers.get(scheme);
        FileSystemException.requireNonNull(provider, ""vfs.impl/unknown-scheme.error"", scheme);
        return provider.getConfigBuilder();
    }","  public void test13()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FtpsFileProvider ftpsFileProvider0 = new FtpsFileProvider();
      defaultFileSystemManager0.addProvider(""^~-o`HcrON>Ce`Z"", (FileProvider) ftpsFileProvider0);
      FileSystemConfigBuilder fileSystemConfigBuilder0 = defaultFileSystemManager0.getFileSystemConfigBuilder(""^~-o`HcrON>Ce`Z"");
}"
336,"    public Constructor<?> getFileObjectDecoratorConst() {
        return fileObjectDecoratorConst;
    }","  public void test14()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      Class<DecoratedFileObject> class0 = DecoratedFileObject.class;
      defaultFileSystemManager0.setFileObjectDecorator(class0);
      Constructor<?> constructor0 = defaultFileSystemManager0.getFileObjectDecoratorConst();
}"
337,"    public FileContentInfoFactory getFileContentInfoFactory() {
        return fileContentInfoFactory;
    }","  public void test15()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      FileContentInfoFactory fileContentInfoFactory0 = defaultFileSystemManager0.getFileContentInfoFactory();
}"
338,"    public CacheStrategy getCacheStrategy() {
        return fileCacheStrategy;
    }","  public void test16()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      CacheStrategy cacheStrategy0 = defaultFileSystemManager0.getCacheStrategy();
}"
339,"    public FileObject getBaseFile() throws FileSystemException {
        return baseFile;
    }","  public void test17()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      VirtualFileName virtualFileName0 = new VirtualFileName(""S"", ""vfs.provider/invalid-descendent-name.error"", fileType0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(virtualFileName0, fileSystemOptions0);
      FileObject fileObject0 = virtualFileSystem0.createFile(virtualFileName0);
      defaultFileSystemManager0.setBaseFile(fileObject0);
      FileObject fileObject1 = defaultFileSystemManager0.getBaseFile();
}"
340,"    public FileObject toFileObject(final File file) throws FileSystemException {
        return getLocalFileProvider().findLocalFile(file);
    }","  public void test18()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[7];
      DefaultLocalFileProvider defaultLocalFileProvider0 = new DefaultLocalFileProvider();
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) defaultLocalFileProvider0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.toFileObject((File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.local.DefaultLocalFileProvider"", e);
      }
  }"
341,"    public void setFileObjectDecorator(final Class<?> fileObjectDecorator) throws FileSystemException {
        if (init) {
            throw new FileSystemException(""vfs.impl/already-inited.error"");
        }
        if (!DecoratedFileObject.class.isAssignableFrom(fileObjectDecorator)) {
            throw new FileSystemException(""vfs.impl/invalid-decorator.error"", fileObjectDecorator.getName());
        }

        try {
            fileObjectDecoratorConst = fileObjectDecorator.getConstructor(FileObject.class);
        } catch (final NoSuchMethodException e) {
            throw new FileSystemException(""vfs.impl/invalid-decorator.error"", fileObjectDecorator.getName(), e);
        }

        this.fileObjectDecorator = fileObjectDecorator;
    }","  public void test19()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.setFileObjectDecorator((Class<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
342,"    public void setBaseFile(final File baseFile) throws FileSystemException {
        this.baseFile = getLocalFileProvider().findLocalFile(baseFile);
    }","  public void test20()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[7];
      DefaultLocalFileProvider defaultLocalFileProvider0 = new DefaultLocalFileProvider();
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) defaultLocalFileProvider0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.setBaseFile((File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.local.DefaultLocalFileProvider"", e);
      }
  }"
343,"    public FileName resolveName(final FileName root, final String path) throws FileSystemException {
        return resolveName(root, path, NameScope.FILE_SYSTEM);
    }","  public void test21()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, """", (-3309), (-3309), (String) null, (String) null, (String) null, fileType0, ""uu]=BD"");
      VFS.setUriStyle(true);
      NameScope nameScope0 = NameScope.DESCENDENT;
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveName((FileName) genericURLFileName0, ""uu]=BD"", nameScope0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
344,"    public FileName resolveName(final FileName root, final String path) throws FileSystemException {
        return resolveName(root, path, NameScope.FILE_SYSTEM);
    }","  public void test22()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, """", (-3299), (-3299), (String) null, (String) null, (String) null, fileType0, ""uu]=BD"");
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveName((FileName) genericURLFileName0, ""X<i"", (NameScope) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileName"", e);
      }
  }"
345,"    public FileName resolveName(final FileName root, final String path) throws FileSystemException {
        return resolveName(root, path, NameScope.FILE_SYSTEM);
    }","  public void test23()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FOLDER;
      LayeredFileName layeredFileName0 = new LayeredFileName(""vfs.impl/no-local-file-provider.error"", (FileName) null, ""vfs.impl/no-local-file-provider.error"", fileType0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveName((FileName) layeredFileName0, ""user.name"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.LayeredFileName"", e);
      }
  }"
346,"    public FileObject resolveFile(final File baseFile, final String uri) throws FileSystemException {
        return resolveFile(getLocalFileProvider().findLocalFile(baseFile), uri);
    }","  public void test24()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""org.apache.commons.net.ftp.FTPSClient"", (String) null, 1757, 1757, ""q]3y*>7z??zAn91"", (String) null, ""q]3y*>7z??zAn91"", fileType0, (String) null);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, fileSystemOptions0);
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      virtualFileSystem0.setContext(defaultVfsComponentContext0);
      FileObject fileObject0 = virtualFileSystem0.createFile(genericURLFileName0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile(fileObject0, ""q]3y*>7z??zAn91"", fileSystemOptions0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No files-cache implementation set.
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileSystem"", e);
      }
  }"
347,"    public FileObject resolveFile(final File baseFile, final String uri) throws FileSystemException {
        return resolveFile(getLocalFileProvider().findLocalFile(baseFile), uri);
    }","  public void test25()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject((FileObject) null);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile((FileObject) synchronizedFileObject0, """", fileSystemOptions0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DecoratedFileObject"", e);
      }
  }"
348,"    public FileObject resolveFile(final File baseFile, final String uri) throws FileSystemException {
        return resolveFile(getLocalFileProvider().findLocalFile(baseFile), uri);
    }","  public void test26()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject((FileObject) null);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile((FileObject) onCallRefreshFileObject0, ""vfs.impl/find-rel-file.error"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DecoratedFileObject"", e);
      }
  }"
349,"    public FileObject resolveFile(final File baseFile, final String uri) throws FileSystemException {
        return resolveFile(getLocalFileProvider().findLocalFile(baseFile), uri);
    }","  public void test27()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FOLDER;
      VirtualFileName virtualFileName0 = new VirtualFileName(""tbz2"", """", fileType0);
      LayeredFileName layeredFileName0 = new LayeredFileName(""vfs.operation/operation-provider-already-added.error"", virtualFileName0, ""_0).<;j"", fileType0);
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, """", 5, 5, (String) null, ""oI>IO(6/fi"", ""tbz2"", fileType0, ""oI>IO(6/fi"");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpsFileSystem> delegateFileObject0 = new DelegateFileObject<FtpsFileSystem>(layeredFileName0, ftpsFileSystem0, (FileObject) null);
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject(delegateFileObject0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile((FileObject) synchronizedFileObject0, ""FxbB<U@$bM"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileSystem"", e);
      }
  }"
350,"    public FileObject resolveFile(final File baseFile, final String uri) throws FileSystemException {
        return resolveFile(getLocalFileProvider().findLocalFile(baseFile), uri);
    }","  public void test28()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile((FileObject) null, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
351,"    public FileObject resolveFile(final File baseFile, final String uri) throws FileSystemException {
        return resolveFile(getLocalFileProvider().findLocalFile(baseFile), uri);
    }","  public void test29()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile((URL) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.net.MockURL"", e);
      }
  }"
352,"    public FileObject resolveFile(final File baseFile, final String uri) throws FileSystemException {
        return resolveFile(getLocalFileProvider().findLocalFile(baseFile), uri);
    }","  public void test30()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      VirtualFileName virtualFileName0 = new VirtualFileName(""S"", ""vfs.provider/invalid-descendent-name.error"", fileType0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(virtualFileName0, fileSystemOptions0);
      FileObject fileObject0 = virtualFileSystem0.createFile(virtualFileName0);
      defaultFileSystemManager0.setBaseFile(fileObject0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile(""S"", fileSystemOptions0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileSystem"", e);
      }
  }"
353,"    public FileObject resolveFile(final File baseFile, final String uri) throws FileSystemException {
        return resolveFile(getLocalFileProvider().findLocalFile(baseFile), uri);
    }","  public void test31()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile((String) null, fileSystemOptions0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
354,"    public FileObject resolveFile(final File baseFile, final String uri) throws FileSystemException {
        return resolveFile(getLocalFileProvider().findLocalFile(baseFile), uri);
    }","  public void test32()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[7];
      DefaultLocalFileProvider defaultLocalFileProvider0 = new DefaultLocalFileProvider();
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) defaultLocalFileProvider0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile((File) null, ""zQ3_z B"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.local.DefaultLocalFileProvider"", e);
      }
  }"
355,"    public FileObject createVirtualFileSystem(final FileObject rootFile) throws FileSystemException {
        final FileObject fileObject = vfsProvider.createFileSystem(rootFile);
        addVirtualFileSystemScheme(rootFile.getName().getScheme());
        return fileObject;
    }","  public void test33()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      FileObject fileObject0 = defaultFileSystemManager0.createVirtualFileSystem(""il'etcA<!n,4"");
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject(fileObject0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""il'etcA<!n,4"";
      HdfsFileProvider hdfsFileProvider0 = new HdfsFileProvider();
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) hdfsFileProvider0);
      try { 
        defaultFileSystemManager0.createVirtualFileSystem((FileObject) onCallRefreshFileObject0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Expecting // to follow the scheme in URI \""il'etcA<!n,4//\"".
         //
         verifyException(""org.apache.commons.vfs2.provider.HostFileNameParser"", e);
      }
  }"
356,"    public FileObject createVirtualFileSystem(final FileObject rootFile) throws FileSystemException {
        final FileObject fileObject = vfsProvider.createFileSystem(rootFile);
        addVirtualFileSystemScheme(rootFile.getName().getScheme());
        return fileObject;
    }","  public void test34()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.createVirtualFileSystem((FileObject) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
357,"    public FileObject createVirtualFileSystem(final FileObject rootFile) throws FileSystemException {
        final FileObject fileObject = vfsProvider.createFileSystem(rootFile);
        addVirtualFileSystemScheme(rootFile.getName().getScheme());
        return fileObject;
    }","  public void test35()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.createVirtualFileSystem("""");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
358,"    public FileObject createFileSystem(final FileObject file) throws FileSystemException {
        final String scheme = typeMap.getScheme(file);
        FileSystemException.requireNonNull(scheme, ""vfs.impl/no-provider-for-file.error"", file);
        return createFileSystem(scheme, file);
    }","  public void test36()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      FileObject fileObject0 = defaultFileSystemManager0.createVirtualFileSystem(""org.apache.hadoop.security.alias.CredentialProvider$CredentialEntry"");
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject(fileObject0);
      try { 
        defaultFileSystemManager0.createFileSystem((FileObject) onCallRefreshFileObject0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not find a file provider that can handle file \""org.apache.commons.vfs2.provider.DelegateFileObject@0000000011\"".
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
359,"    public FileObject createFileSystem(final FileObject file) throws FileSystemException {
        final String scheme = typeMap.getScheme(file);
        FileSystemException.requireNonNull(scheme, ""vfs.impl/no-provider-for-file.error"", file);
        return createFileSystem(scheme, file);
    }","  public void test37()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.createFileSystem((FileObject) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.FileTypeMap"", e);
      }
  }"
360,"    public FileObject createFileSystem(final FileObject file) throws FileSystemException {
        final String scheme = typeMap.getScheme(file);
        FileSystemException.requireNonNull(scheme, ""vfs.impl/no-provider-for-file.error"", file);
        return createFileSystem(scheme, file);
    }","  public void test38()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      try { 
        defaultFileSystemManager0.createFileSystem(""x*iW8(b{]"", (FileObject) null);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // No file provider is registered with URI scheme \""x*iW8(b{]\"" to handle file \""null\"".
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
361,"    public void closeFileSystem(final FileSystem fileSystem) {
        // inform the cache ...
        getFilesCache().clear(fileSystem);

        // just in case the cache didnt call _closeFileSystem
        _closeFileSystem(fileSystem);
    }","  public void test39()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", ""Gn"", 0, 0, ""Gn"", ""I4Y%"", """", fileType0, (String) null);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, (FtpClient) null, fileSystemOptions0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.closeFileSystem(ftpFileSystem0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
362,"    public void close() {
        if (!init) {
            return;
        }

        // make sure all discovered components in
        // org.apache.commons.vfs2.impl.StandardFileSystemManager.configure(Element)
        // are closed here

        // Close the file system providers.
        providers.values().forEach(this::closeComponent);

        // Close the other components
        closeComponent(vfsProvider);
        closeComponent(fileReplicator);
        closeComponent(tempFileStore);
        closeComponent(defaultProvider);

        // unregister all providers here, so if any components have local file references
        // they can still resolve against the supported schemes
        providers.clear();

        // FileOperations are components, too
        operationProviders.values().forEach(opProviders -> opProviders.forEach(this::closeComponent));

        // unregister all
        operationProviders.clear();

        // collections with add()
        typeMap.clear();

        // Close cache last.
        closeComponent(filesCache);

        // should not happen, but make debugging easier:
        if (!components.isEmpty()) {
            log.warn(""DefaultFilesystemManager.close: not all components are closed: "" + components.toString());
        }
        components.clear();

        // managed components
        vfsProvider = null;

        // virtual schemas
        virtualFileSystemSchemes.clear();

        // setters and derived state
        defaultProvider = null;
        baseFile = null;
        fileObjectDecorator = null;
        fileObjectDecoratorConst = null;
        localFileProvider = null;
        fileReplicator = null;
        tempFileStore = null;
        // setters with init() defaults
        filesCache = null;
        fileCacheStrategy = null;
        fileContentInfoFactory = null;

        init = false;
    }","  public void test40()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.setLogger((Log) null);
      defaultFileSystemManager0.init();
      defaultFileSystemManager0.init();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.close();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
363,"    public void close() {
        if (!init) {
            return;
        }

        // make sure all discovered components in
        // org.apache.commons.vfs2.impl.StandardFileSystemManager.configure(Element)
        // are closed here

        // Close the file system providers.
        providers.values().forEach(this::closeComponent);

        // Close the other components
        closeComponent(vfsProvider);
        closeComponent(fileReplicator);
        closeComponent(tempFileStore);
        closeComponent(defaultProvider);

        // unregister all providers here, so if any components have local file references
        // they can still resolve against the supported schemes
        providers.clear();

        // FileOperations are components, too
        operationProviders.values().forEach(opProviders -> opProviders.forEach(this::closeComponent));

        // unregister all
        operationProviders.clear();

        // collections with add()
        typeMap.clear();

        // Close cache last.
        closeComponent(filesCache);

        // should not happen, but make debugging easier:
        if (!components.isEmpty()) {
            log.warn(""DefaultFilesystemManager.close: not all components are closed: "" + components.toString());
        }
        components.clear();

        // managed components
        vfsProvider = null;

        // virtual schemas
        virtualFileSystemSchemes.clear();

        // setters and derived state
        defaultProvider = null;
        baseFile = null;
        fileObjectDecorator = null;
        fileObjectDecoratorConst = null;
        localFileProvider = null;
        fileReplicator = null;
        tempFileStore = null;
        // setters with init() defaults
        filesCache = null;
        fileCacheStrategy = null;
        fileContentInfoFactory = null;

        init = false;
    }","  public void test41()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      defaultFileSystemManager0.init();
      Log4JLogger log4JLogger0 = new Log4JLogger();
      defaultFileSystemManager0.setLogger(log4JLogger0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.close();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.log4j.CategoryKey"", e);
      }
  }"
364,"    public boolean canCreateFileSystem(final FileObject file) throws FileSystemException {
        return typeMap.getScheme(file) != null;
    }","  public void test42()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.canCreateFileSystem((FileObject) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.FileTypeMap"", e);
      }
  }"
365,"    public boolean canCreateFileSystem(final FileObject file) throws FileSystemException {
        return typeMap.getScheme(file) != null;
    }","  public void test43()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, (String) null, 57, (-1665), "":sbT?r87I2CJl`_P"", "":sbT?r87I2CJl`_P"", "":sbT?r87I2CJl`_P"", fileType0, ""8wxuUX#YsK3mv@~j"");
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, fileSystemOptions0);
      FileObject fileObject0 = virtualFileSystem0.createFile(genericURLFileName0);
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject(fileObject0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.canCreateFileSystem(onCallRefreshFileObject0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileSystem"", e);
      }
  }"
366,"    protected void addVirtualFileSystemScheme(String rootUri) {
        if (rootUri.indexOf(':') != -1) {
            rootUri = rootUri.substring(0, rootUri.indexOf(':'));
        }
        virtualFileSystemSchemes.add(rootUri);
    }","  public void test44()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.addVirtualFileSystemScheme((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
367,"    public void addProvider(final String urlScheme, final FileProvider provider) throws FileSystemException {
        addProvider(new String[] { urlScheme }, provider);
    }","  public void test45()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      ZipFileProvider zipFileProvider0 = new ZipFileProvider();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.addProvider((String[]) null, (FileProvider) zipFileProvider0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
368,"    public void addOperationProvider(final String scheme, final FileOperationProvider operationProvider)
            throws FileSystemException {
        addOperationProvider(new String[] { scheme }, operationProvider);
    }","  public void test46()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileOperationProvider fileOperationProvider0 = mock(FileOperationProvider.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.addOperationProvider((String[]) null, fileOperationProvider0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
369,"    public FileName resolveURI(final String uri) throws FileSystemException {
        UriParser.checkUriEncoding(uri);

        if (uri == null) {
            throw new IllegalArgumentException();
        }

        // Extract the scheme
        final String scheme = UriParser.extractScheme(getSchemes(), uri);
        if (scheme != null) {
            // An absolute URI - locate the provider
            final FileProvider provider = providers.get(scheme);
            if (provider != null) {
                return provider.parseUri(null, uri);
            }

            // Otherwise, assume a local file
        }

        // Handle absolute file names
        if (localFileProvider != null && localFileProvider.isAbsoluteLocalName(uri)) {
            return localFileProvider.parseUri(null, uri);
        }

        if (scheme != null) {
            // An unknown scheme - hand it to the default provider
            FileSystemException.requireNonNull(defaultProvider, ""vfs.impl/unknown-scheme.error"", scheme, uri);
            return defaultProvider.parseUri(null, uri);
        }

        // Assume a relative name - use the supplied base file
        FileSystemException.requireNonNull(baseFile, ""vfs.impl/find-rel-file.error"", uri);

        return resolveName(baseFile.getName(), uri, NameScope.FILE_SYSTEM);
    }","  public void test47()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[7];
      DefaultLocalFileProvider defaultLocalFileProvider0 = new DefaultLocalFileProvider();
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) defaultLocalFileProvider0);
      try { 
        defaultFileSystemManager0.resolveURI("":\""eRWta|?3mwO9c"");
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not find file with URI \"":\""eRWta|?3mwO9c\"" because it is a relative path, and no base URI was provided.
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
370,"    public FileName resolveName(final FileName root, final String path) throws FileSystemException {
        return resolveName(root, path, NameScope.FILE_SYSTEM);
    }","  public void test48()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      Http4sFileProvider http4sFileProvider0 = new Http4sFileProvider();
      defaultFileSystemManager0.setDefaultProvider(http4sFileProvider0);
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", ""g!h@D/"", (-316), 1567, ""g!h@D/"", ""g!h@D/"", ""ear"", fileType0, ""^ibI.z<G|e"");
      LayeredFileName layeredFileName0 = new LayeredFileName(""g!h@D/"", genericURLFileName0, ""g!h@D/"", fileType0);
      NameScope nameScope0 = NameScope.FILE_SYSTEM;
      try { 
        defaultFileSystemManager0.resolveName((FileName) layeredFileName0, ""^ibI.z<G|e"", nameScope0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Expecting // to follow the scheme in URI \""g!h@D/:://g!h%40D%2f:g!h%40D%2f@g!h@D/ear?^ibI.z<G|e!/g!h@D/^ibI.z<G|e\"".
         //
         verifyException(""org.apache.commons.vfs2.provider.HostFileNameParser"", e);
      }
  }"
371,"    public FileName resolveName(final FileName root, final String path) throws FileSystemException {
        return resolveName(root, path, NameScope.FILE_SYSTEM);
    }","  public void test49()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, (String) null, (-17), (-17), ""-.DA@N'=rU 'vI"", "",lP_|9YP7'2g"", ""P>'ZUWMX}#[r\""*J"", fileType0, "",lP_|9YP7'2g"");
      NameScope nameScope0 = NameScope.DESCENDENT;
      try { 
        defaultFileSystemManager0.resolveName((FileName) genericURLFileName0, ""/YR*\""kiW&3O;Oc"", nameScope0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Invalid descendent file name \""/YR*\""kiW&3O;Oc\"".
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
372,"    public FileObject resolveFile(final File baseFile, final String uri) throws FileSystemException {
        return resolveFile(getLocalFileProvider().findLocalFile(baseFile), uri);
    }","  public void test50()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[7];
      DefaultLocalFileProvider defaultLocalFileProvider0 = new DefaultLocalFileProvider();
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) defaultLocalFileProvider0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      try { 
        defaultFileSystemManager0.resolveFile((FileObject) null, "":\""eRWta|?3mwO9c"", fileSystemOptions0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not find file with URI \"":\""eRWta|?3mwO9c\"" because it is a relative path, and no base URI was provided.
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
373,"    public FileObject resolveFile(final File baseFile, final String uri) throws FileSystemException {
        return resolveFile(getLocalFileProvider().findLocalFile(baseFile), uri);
    }","  public void test51()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile((FileObject) null, (String) null, fileSystemOptions0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
374,"    public FileObject resolveFile(final File baseFile, final String uri) throws FileSystemException {
        return resolveFile(getLocalFileProvider().findLocalFile(baseFile), uri);
    }","  public void test52()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""org.apache.commons.net.ftp.FTPSClient"", (String) null, 1757, 1757, ""q]3y*>7z??zAn91"", (String) null, ""q]3y*>7z??zAn91"", fileType0, (String) null);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, fileSystemOptions0);
      FileObject fileObject0 = virtualFileSystem0.createFile(genericURLFileName0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile(fileObject0, ""q]3y*>7z??zAn91"", fileSystemOptions0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileSystem"", e);
      }
  }"
375,"    public boolean hasProvider(final String scheme) {
        return providers.containsKey(scheme);
    }","  public void test53()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      Bzip2FileProvider bzip2FileProvider0 = new Bzip2FileProvider();
      defaultFileSystemManager0.addProvider((String) null, (FileProvider) bzip2FileProvider0);
      boolean boolean0 = defaultFileSystemManager0.hasProvider((String) null);
}"
376,"    public void addProvider(final String urlScheme, final FileProvider provider) throws FileSystemException {
        addProvider(new String[] { urlScheme }, provider);
    }","  public void test54()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[8];
      stringArray0[2] = ""AT"";
      MockFile mockFile0 = new MockFile("""", """");
      FtpFileProvider ftpFileProvider0 = new FtpFileProvider();
      defaultFileSystemManager0.addProvider(""AT"", (FileProvider) ftpFileProvider0);
      TemporaryFileProvider temporaryFileProvider0 = new TemporaryFileProvider(mockFile0);
      try { 
        defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) temporaryFileProvider0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Multiple providers registered for URL scheme \""AT\"".
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
377,"    public void _closeFileSystem(final FileSystem fileSystem) {
        final FileProvider provider = providers.get(fileSystem.getRootName().getScheme());
        if (provider != null) {
            ((AbstractFileProvider) provider).closeFileSystem(fileSystem);
        } else if (fileSystem instanceof VirtualFileSystem) {
            // vfsProvider does not implement AbstractFileProvider
            vfsProvider.closeFileSystem(fileSystem);
        }
    }","  public void test55()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      VirtualFileName virtualFileName0 = new VirtualFileName(""!"", ""Hv7lmO>nu}v<"", fileType0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(virtualFileName0, fileSystemOptions0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0._closeFileSystem(virtualFileSystem0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
378,"    public void _closeFileSystem(final FileSystem fileSystem) {
        final FileProvider provider = providers.get(fileSystem.getRootName().getScheme());
        if (provider != null) {
            ((AbstractFileProvider) provider).closeFileSystem(fileSystem);
        } else if (fileSystem instanceof VirtualFileSystem) {
            // vfsProvider does not implement AbstractFileProvider
            vfsProvider.closeFileSystem(fileSystem);
        }
    }","  public void test56()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", ""-yi%"", 148, 148, """", ""-yi%"", ""vfs.impl/no-replicator.error"", fileType0, ""vfs.impl/no-replicator.error"");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      defaultFileSystemManager0._closeFileSystem(ftpFileSystem0);
}"
379,"    public void _closeFileSystem(final FileSystem fileSystem) {
        final FileProvider provider = providers.get(fileSystem.getRootName().getScheme());
        if (provider != null) {
            ((AbstractFileProvider) provider).closeFileSystem(fileSystem);
        } else if (fileSystem instanceof VirtualFileSystem) {
            // vfsProvider does not implement AbstractFileProvider
            vfsProvider.closeFileSystem(fileSystem);
        }
    }","  public void test57()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      Http5FileProvider http5FileProvider0 = new Http5FileProvider();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ""4GqT_,"";
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) http5FileProvider0);
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""4GqT_,"", ""4GqT_,"", 215, 215, ""4GqT_,"", ""4GqT_,"", ""4GqT_,"", fileType0, ""4GqT_,"");
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, fileSystemOptions0);
      defaultFileSystemManager0._closeFileSystem(virtualFileSystem0);
}"
380,"    public FilesCache getFilesCache() {
        return filesCache;
    }","  public void test58()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FilesCache filesCache0 = defaultFileSystemManager0.getFilesCache();
}"
381,"    public Constructor<?> getFileObjectDecoratorConst() {
        return fileObjectDecoratorConst;
    }","  public void test59()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      Constructor<?> constructor0 = defaultFileSystemManager0.getFileObjectDecoratorConst();
}"
382,"    public FileObject getBaseFile() throws FileSystemException {
        return baseFile;
    }","  public void test60()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileObject fileObject0 = defaultFileSystemManager0.getBaseFile();
}"
383,"    public FileContentInfoFactory getFileContentInfoFactory() {
        return fileContentInfoFactory;
    }","  public void test61()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileContentInfoFactory fileContentInfoFactory0 = defaultFileSystemManager0.getFileContentInfoFactory();
}"
384,"    public String[] getSchemes() {
        final List<String> schemes = new ArrayList<>(providers.size() + virtualFileSystemSchemes.size());
        schemes.addAll(providers.keySet());
        schemes.addAll(virtualFileSystemSchemes);
        return schemes.toArray(new String[]{});
    }","  public void test62()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = defaultFileSystemManager0.getSchemes();
}"
385,"    public TemporaryFileStore getTemporaryFileStore() throws FileSystemException {
        return FileSystemException.requireNonNull(tempFileStore, ""vfs.impl/no-temp-file-store.error"");
    }","  public void test63()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      defaultFileSystemManager0.setTemporaryFileStore(defaultFileReplicator0);
      TemporaryFileStore temporaryFileStore0 = defaultFileSystemManager0.getTemporaryFileStore();
}"
386,"    public CacheStrategy getCacheStrategy() {
        return fileCacheStrategy;
    }","  public void test64()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.getCacheStrategy();
  }"
387,"    public CacheStrategy getCacheStrategy() {
        return fileCacheStrategy;
    }","  public void test65()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.addMimeTypeMap(""vfs.provider/get-attribute-not-supported.error"", ""vfs.provider/get-attribute-not-supported.error"");
}"
388,"    public void setFilesCache(final FilesCache filesCache) throws FileSystemException {
        if (init) {
            throw new FileSystemException(""vfs.impl/already-inited.error"");
        }
        this.filesCache = filesCache;
    }","  public void test66()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      LRUFilesCache lRUFilesCache0 = new LRUFilesCache();
      try { 
        defaultFileSystemManager0.setFilesCache(lRUFilesCache0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Manager already inited, cant change the configuration now.
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
389,"    public CacheStrategy getCacheStrategy() {
        return fileCacheStrategy;
    }","  public void test67()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      NullFilesCache nullFilesCache0 = new NullFilesCache();
      defaultFileSystemManager0.setFilesCache(nullFilesCache0);
}"
390,"    public void setFileObjectDecorator(final Class<?> fileObjectDecorator) throws FileSystemException {
        if (init) {
            throw new FileSystemException(""vfs.impl/already-inited.error"");
        }
        if (!DecoratedFileObject.class.isAssignableFrom(fileObjectDecorator)) {
            throw new FileSystemException(""vfs.impl/invalid-decorator.error"", fileObjectDecorator.getName());
        }

        try {
            fileObjectDecoratorConst = fileObjectDecorator.getConstructor(FileObject.class);
        } catch (final NoSuchMethodException e) {
            throw new FileSystemException(""vfs.impl/invalid-decorator.error"", fileObjectDecorator.getName(), e);
        }

        this.fileObjectDecorator = fileObjectDecorator;
    }","  public void test68()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      Class<TarFileSystem> class0 = TarFileSystem.class;
      try { 
        defaultFileSystemManager0.setFileObjectDecorator(class0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // \""org.apache.commons.vfs2.provider.tar.TarFileSystem\"" is not a valid decorator. It has to extend \""DecoratedFileObject\"" and must provide a single argument constructor which takes a \""FileObject\""
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
391,"    public void setFileObjectDecorator(final Class<?> fileObjectDecorator) throws FileSystemException {
        if (init) {
            throw new FileSystemException(""vfs.impl/already-inited.error"");
        }
        if (!DecoratedFileObject.class.isAssignableFrom(fileObjectDecorator)) {
            throw new FileSystemException(""vfs.impl/invalid-decorator.error"", fileObjectDecorator.getName());
        }

        try {
            fileObjectDecoratorConst = fileObjectDecorator.getConstructor(FileObject.class);
        } catch (final NoSuchMethodException e) {
            throw new FileSystemException(""vfs.impl/invalid-decorator.error"", fileObjectDecorator.getName(), e);
        }

        this.fileObjectDecorator = fileObjectDecorator;
    }","  public void test69()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      Class<SynchronizedFileObject> class0 = SynchronizedFileObject.class;
      try { 
        defaultFileSystemManager0.setFileObjectDecorator(class0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Manager already inited, cant change the configuration now.
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
392,"    public Class<?> getFileObjectDecorator() {
        return fileObjectDecorator;
    }","  public void test70()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      Class<DecoratedFileObject> class0 = DecoratedFileObject.class;
      defaultFileSystemManager0.setFileObjectDecorator(class0);
      Class<?> class1 = defaultFileSystemManager0.getFileObjectDecorator();
}"
393,"    public void setFileContentInfoFactory(final FileContentInfoFactory fileContentInfoFactory)
            throws FileSystemException {
        if (init) {
            throw new FileSystemException(""vfs.impl/already-inited.error"");
        }

        this.fileContentInfoFactory = fileContentInfoFactory;
    }","  public void test71()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      FileContentInfoFilenameFactory fileContentInfoFilenameFactory0 = new FileContentInfoFilenameFactory();
      try { 
        defaultFileSystemManager0.setFileContentInfoFactory(fileContentInfoFilenameFactory0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Manager already inited, cant change the configuration now.
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
394,"    public CacheStrategy getCacheStrategy() {
        return fileCacheStrategy;
    }","  public void test72()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileContentInfoFilenameFactory fileContentInfoFilenameFactory0 = new FileContentInfoFilenameFactory();
      defaultFileSystemManager0.setFileContentInfoFactory(fileContentInfoFilenameFactory0);
}"
395,"    public void setCacheStrategy(final CacheStrategy fileCacheStrategy) throws FileSystemException {
        if (init) {
            throw new FileSystemException(""vfs.impl/already-inited.error"");
        }

        this.fileCacheStrategy = fileCacheStrategy;
    }","  public void test73()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      CacheStrategy cacheStrategy0 = CacheStrategy.ON_CALL;
      try { 
        defaultFileSystemManager0.setCacheStrategy(cacheStrategy0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Manager already inited, cant change the configuration now.
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
396,"    public CacheStrategy getCacheStrategy() {
        return fileCacheStrategy;
    }","  public void test74()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      CacheStrategy cacheStrategy0 = CacheStrategy.MANUAL;
      defaultFileSystemManager0.setCacheStrategy(cacheStrategy0);
}"
397,"    public FileName resolveName(final FileName root, final String path) throws FileSystemException {
        return resolveName(root, path, NameScope.FILE_SYSTEM);
    }","  public void test75()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, (String) null, (-3309), (-3309), (String) null, (String) null, (String) null, fileType0, ""uu]=BD"");
      TarFileProvider tarFileProvider0 = new TarFileProvider();
      defaultFileSystemManager0.addProvider((String) null, (FileProvider) tarFileProvider0);
      DefaultLocalFileProvider defaultLocalFileProvider0 = new DefaultLocalFileProvider();
      defaultFileSystemManager0.addProvider(""uu]=BD"", (FileProvider) defaultLocalFileProvider0);
      NameScope nameScope0 = NameScope.CHILD;
      FileName fileName0 = defaultFileSystemManager0.resolveName((FileName) genericURLFileName0, ""uu]=BD"", nameScope0);
}"
398,"    public FileName resolveName(final FileName root, final String path) throws FileSystemException {
        return resolveName(root, path, NameScope.FILE_SYSTEM);
    }","  public void test76()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[5];
      stringArray0[3] = ""ZpEPz"";
      Bzip2FileProvider bzip2FileProvider0 = new Bzip2FileProvider();
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) bzip2FileProvider0);
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""ZpEPz"", ""ZpEPz"", 5171, 5171, ""ZpEPz"", ""ZpEPz"", ""ZpEPz"", fileType0, stringArray0[0]);
      LayeredFileName layeredFileName0 = new LayeredFileName(stringArray0[2], genericURLFileName0, ""ZpEPz"", fileType0);
      try { 
        defaultFileSystemManager0.resolveName((FileName) layeredFileName0, ""ZpEPz"");
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not find file with URI \""//ZpEPz:ZpEPz@ZpEPzZpEPz\"" because it is a relative path, and no base URI was provided.
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
399,"    public FileName resolveURI(final String uri) throws FileSystemException {
        UriParser.checkUriEncoding(uri);

        if (uri == null) {
            throw new IllegalArgumentException();
        }

        // Extract the scheme
        final String scheme = UriParser.extractScheme(getSchemes(), uri);
        if (scheme != null) {
            // An absolute URI - locate the provider
            final FileProvider provider = providers.get(scheme);
            if (provider != null) {
                return provider.parseUri(null, uri);
            }

            // Otherwise, assume a local file
        }

        // Handle absolute file names
        if (localFileProvider != null && localFileProvider.isAbsoluteLocalName(uri)) {
            return localFileProvider.parseUri(null, uri);
        }

        if (scheme != null) {
            // An unknown scheme - hand it to the default provider
            FileSystemException.requireNonNull(defaultProvider, ""vfs.impl/unknown-scheme.error"", scheme, uri);
            return defaultProvider.parseUri(null, uri);
        }

        // Assume a relative name - use the supplied base file
        FileSystemException.requireNonNull(baseFile, ""vfs.impl/find-rel-file.error"", uri);

        return resolveName(baseFile.getName(), uri, NameScope.FILE_SYSTEM);
    }","  public void test77()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveURI((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
400,"    public FileName resolveName(final FileName root, final String path) throws FileSystemException {
        return resolveName(root, path, NameScope.FILE_SYSTEM);
    }","  public void test78()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, """", (-3309), (-3309), (String) null, (String) null, (String) null, fileType0, ""uu]=BD"");
      NameScope nameScope0 = NameScope.DESCENDENT;
      GenericURLFileName genericURLFileName1 = (GenericURLFileName)defaultFileSystemManager0.resolveName((FileName) genericURLFileName0, ""X<i"", nameScope0);
}"
401,"    public FileName resolveName(final FileName root, final String path) throws FileSystemException {
        return resolveName(root, path, NameScope.FILE_SYSTEM);
    }","  public void test79()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.addVirtualFileSystemScheme(""/aC:6EPo"");
      FileType fileType0 = FileType.IMAGINARY;
      VirtualFileName virtualFileName0 = new VirtualFileName(""/aC:6EPo"", ""/aC:6EPo"", fileType0);
      NameScope nameScope0 = NameScope.FILE_SYSTEM;
      FileName fileName0 = defaultFileSystemManager0.resolveName((FileName) virtualFileName0, ""/aC:6EPo"", nameScope0);
}"
402,"    public FileName resolveName(final FileName root, final String path) throws FileSystemException {
        return resolveName(root, path, NameScope.FILE_SYSTEM);
    }","  public void test80()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FOLDER;
      VirtualFileName virtualFileName0 = new VirtualFileName(""F3"", ""F3"", fileType0);
      NameScope nameScope0 = NameScope.DESCENDENT;
      try { 
        defaultFileSystemManager0.resolveName((FileName) virtualFileName0, """", nameScope0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Invalid descendent file name \""\"".
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
403,"    public FileName resolveName(final FileName root, final String path) throws FileSystemException {
        return resolveName(root, path, NameScope.FILE_SYSTEM);
    }","  public void test81()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FOLDER;
      VirtualFileName virtualFileName0 = new VirtualFileName(""F3"", ""F3"", fileType0);
      VFS.setUriStyle(true);
      NameScope nameScope0 = NameScope.DESCENDENT_OR_SELF;
      FileName fileName0 = defaultFileSystemManager0.resolveName((FileName) virtualFileName0, ""F3"", nameScope0);
      FileName fileName1 = defaultFileSystemManager0.resolveName(fileName0, ""F3"");
}"
404,"    public FileName resolveName(final FileName root, final String path) throws FileSystemException {
        return resolveName(root, path, NameScope.FILE_SYSTEM);
    }","  public void test82()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FOLDER;
      VirtualFileName virtualFileName0 = new VirtualFileName(""F3"", "" _h=$jO!b"", fileType0);
      VFS.setUriStyle(true);
      NameScope nameScope0 = NameScope.CHILD;
      FileName fileName0 = defaultFileSystemManager0.resolveName((FileName) virtualFileName0, ""-"", nameScope0);
      FileName fileName1 = defaultFileSystemManager0.resolveName(fileName0, ""Disconnecting from "", nameScope0);
}"
405,"    public FileObject resolveFile(final File baseFile, final String uri) throws FileSystemException {
        return resolveFile(getLocalFileProvider().findLocalFile(baseFile), uri);
    }","  public void test83()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ""v"";
      Bzip2FileProvider bzip2FileProvider0 = new Bzip2FileProvider();
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) bzip2FileProvider0);
      URI uRI0 = MockURI.URI(""v"", ""v"", stringArray0[1], stringArray0[1], stringArray0[4]);
      try { 
        defaultFileSystemManager0.resolveFile(uRI0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not find file with URI \""//v\"" because it is a relative path, and no base URI was provided.
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
406,"    public FileObject resolveFile(final File baseFile, final String uri) throws FileSystemException {
        return resolveFile(getLocalFileProvider().findLocalFile(baseFile), uri);
    }","  public void test84()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
407,"    public FileObject resolveFile(final File baseFile, final String uri) throws FileSystemException {
        return resolveFile(getLocalFileProvider().findLocalFile(baseFile), uri);
    }","  public void test85()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""org.apache.commons.net.ftp.FTPSClient"", ""org.apache.commons.net.ftp.FTPSClient"", 1757, 1757, ""org.apache.commons.net.ftp.FTPSClient"", ""org.apache.commons.net.ftp.FTPSClient"", ""org.apache.commons.net.ftp.FTPSClient"", fileType0, ""org.apache.commons.net.ftp.FTPSClient"");
      VFS.setUriStyle(true);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, fileSystemOptions0);
      FileObject fileObject0 = virtualFileSystem0.createFile(genericURLFileName0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile(fileObject0, ""org.apache.commons.net.ftp.FTPSClient"", fileSystemOptions0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileSystem"", e);
      }
  }"
408,"    public FileObject resolveFile(final File baseFile, final String uri) throws FileSystemException {
        return resolveFile(getLocalFileProvider().findLocalFile(baseFile), uri);
    }","  public void test86()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""or.apache.comons.et.ftp.FTPSClient"", ""or.apache.comons.et.ftp.FTPSClient"", 1757, 1757, ""or.apache.comons.et.ftp.FTPSClient"", ""or.apache.comons.et.ftp.FTPSClient"", ""or.apache.comons.et.ftp.FTPSClient"", fileType0, ""or.apache.comons.et.ftp.FTPSClient"");
      VFS.setUriStyle(true);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, fileSystemOptions0);
      FileObject fileObject0 = virtualFileSystem0.createFile(genericURLFileName0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile(fileObject0, ""or.apache.comons.et.ftp.FTPSClient"", fileSystemOptions0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileSystem"", e);
      }
  }"
409,"    public FileObject resolveFile(final File baseFile, final String uri) throws FileSystemException {
        return resolveFile(getLocalFileProvider().findLocalFile(baseFile), uri);
    }","  public void test87()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      FileObject fileObject0 = defaultFileSystemManager0.createVirtualFileSystem(""jxVj,;|%GS^dW2,"");
      FileObject fileObject1 = defaultFileSystemManager0.resolveFile(fileObject0, ""+~1=X?lbmei~5GTV"");
}"
410,"    public CacheStrategy getCacheStrategy() {
        return fileCacheStrategy;
    }","  public void test88()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[9];
      stringArray0[5] = ""v"";
      Bzip2FileProvider bzip2FileProvider0 = new Bzip2FileProvider();
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) bzip2FileProvider0);
      defaultFileSystemManager0.removeProvider(""v"");
}"
411,"    public CacheStrategy getCacheStrategy() {
        return fileCacheStrategy;
    }","  public void test89()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      Http5FileProvider http5FileProvider0 = new Http5FileProvider();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ""4GqT_,"";
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) http5FileProvider0);
      defaultFileSystemManager0.removeProvider(""4GqT_,"");
}"
412,"    public CacheStrategy getCacheStrategy() {
        return fileCacheStrategy;
    }","  public void test90()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.removeProvider(""qy%b7|N?>"");
}"
413,"    public boolean hasProvider(final String scheme) {
        return providers.containsKey(scheme);
    }","  public void test91()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      boolean boolean0 = defaultFileSystemManager0.hasProvider("""");
}"
414,"    public FileOperationProvider[] getOperationProviders(final String scheme) throws FileSystemException {

        final List<?> providers = operationProviders.get(scheme);
        if (providers == null || providers.isEmpty()) {
            return null;
        }
        return providers.toArray(FileOperationProvider.EMPTY_ARRAY);
    }","  public void test92()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[7];
      stringArray0[1] = ""sftp"";
      stringArray0[2] = ""!1$N[RC/Wt"";
      stringArray0[3] = ""http4s"";
      stringArray0[4] = ""g7|RA)Qi?]-)"";
      stringArray0[5] = ""N.3[D'"";
      stringArray0[6] = ""ZpE\""P2"";
      FileOperationProvider fileOperationProvider0 = mock(FileOperationProvider.class, new ViolatedAssumptionAnswer());
      defaultFileSystemManager0.addOperationProvider(stringArray0, fileOperationProvider0);
      FileOperationProvider[] fileOperationProviderArray0 = defaultFileSystemManager0.getOperationProviders(""g7|RA)Qi?]-)"");
}"
415,"    public FileOperationProvider[] getOperationProviders(final String scheme) throws FileSystemException {

        final List<?> providers = operationProviders.get(scheme);
        if (providers == null || providers.isEmpty()) {
            return null;
        }
        return providers.toArray(FileOperationProvider.EMPTY_ARRAY);
    }","  public void test93()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileOperationProvider[] fileOperationProviderArray0 = defaultFileSystemManager0.getOperationProviders("""");
}"
416,"    public CacheStrategy getCacheStrategy() {
        return fileCacheStrategy;
    }","  public void test94()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.addProvider(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", (FileProvider) null);
      defaultFileSystemManager0.init();
      defaultFileSystemManager0.freeUnusedResources();
}"
417,"    public CacheStrategy getCacheStrategy() {
        return fileCacheStrategy;
    }","  public void test95()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.freeUnusedResources();
}"
418,"    public CacheStrategy getCacheStrategy() {
        return fileCacheStrategy;
    }","  public void test96()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[7];
      stringArray0[1] = ""sftp"";
      stringArray0[2] = ""!1$N[RC/Wt"";
      stringArray0[3] = ""http4s"";
      stringArray0[4] = ""g7|RA)Qi?]-)"";
      stringArray0[5] = ""N.3[D'"";
      defaultFileSystemManager0.init();
      stringArray0[6] = ""ZpE\""P2"";
      FileOperationProvider fileOperationProvider0 = mock(FileOperationProvider.class, new ViolatedAssumptionAnswer());
      defaultFileSystemManager0.addOperationProvider(stringArray0, fileOperationProvider0);
      defaultFileSystemManager0.close();
}"
419,"    public CacheStrategy getCacheStrategy() {
        return fileCacheStrategy;
    }","  public void test97()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.close();
}"
420,"    public FileObject resolveFile(final File baseFile, final String uri) throws FileSystemException {
        return resolveFile(getLocalFileProvider().findLocalFile(baseFile), uri);
    }","  public void test98()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.addVirtualFileSystemScheme(""/aC:6EPo"");
      try { 
        defaultFileSystemManager0.resolveFile(""/aC:6EPo"");
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Unknown scheme \""/aC\"" in URI \""/aC:6EPo\"".
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
421,"    public CacheStrategy getCacheStrategy() {
        return fileCacheStrategy;
    }","  public void test99()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[7];
      DefaultLocalFileProvider defaultLocalFileProvider0 = new DefaultLocalFileProvider();
      defaultFileSystemManager0.addProvider(""cAO8Pk9ep?!6eA?v"", (FileProvider) defaultLocalFileProvider0);
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) defaultLocalFileProvider0);
}"
422,"    public void addProvider(final String urlScheme, final FileProvider provider) throws FileSystemException {
        addProvider(new String[] { urlScheme }, provider);
    }","  public void test100()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      Http4sFileProvider http4sFileProvider0 = new Http4sFileProvider();
      defaultFileSystemManager0.addProvider("""", (FileProvider) http4sFileProvider0);
      try { 
        defaultFileSystemManager0.addProvider("""", (FileProvider) http4sFileProvider0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Multiple providers registered for URL scheme \""\"".
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
423,"    public void addOperationProvider(final String scheme, final FileOperationProvider operationProvider)
            throws FileSystemException {
        addOperationProvider(new String[] { scheme }, operationProvider);
    }","  public void test101()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[8];
      FileOperationProvider fileOperationProvider0 = mock(FileOperationProvider.class, new ViolatedAssumptionAnswer());
      try { 
        defaultFileSystemManager0.addOperationProvider(stringArray0, fileOperationProvider0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Operation provider already added to scheme \""null\""
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
424,"    public void closeFileSystem(final FileSystem fileSystem) {
        // inform the cache ...
        getFilesCache().clear(fileSystem);

        // just in case the cache didnt call _closeFileSystem
        _closeFileSystem(fileSystem);
    }","  public void test102()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""Unable to parse configuration fs.permissions.umask-mode with value "", ""Unable to parse configuration fs.permissions.umask-mode with value "", (-1), (-1), ""Unable to parse configuration fs.permissions.umask-mode with value "", ""Unable to parse configuration fs.permissions.umask-mode with value "", ""Unable to parse configuration fs.permissions.umask-mode with value "", fileType0, ""Unable to parse configuration fs.permissions.umask-mode with value "");
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      LocalFileSystem localFileSystem0 = new LocalFileSystem(genericURLFileName0, ""Unable to parse configuration fs.permissions.umask-mode with value "", fileSystemOptions0);
      defaultFileSystemManager0.closeFileSystem(localFileSystem0);
}"
425,"    public void addProvider(final String urlScheme, final FileProvider provider) throws FileSystemException {
        addProvider(new String[] { urlScheme }, provider);
    }","  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[6];
      Bzip2FileProvider bzip2FileProvider0 = new Bzip2FileProvider();
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.addProvider(stringArray0[0], (FileProvider) bzip2FileProvider0);
      DefaultFileSystemManager.VfsStreamHandlerFactory defaultFileSystemManager_VfsStreamHandlerFactory0 = defaultFileSystemManager0.new VfsStreamHandlerFactory();
      URLStreamHandler uRLStreamHandler0 = defaultFileSystemManager_VfsStreamHandlerFactory0.createURLStreamHandler(stringArray0[0]);
}"
426,,"  public void test104()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DefaultFileSystemManager.VfsStreamHandlerFactory defaultFileSystemManager_VfsStreamHandlerFactory0 = defaultFileSystemManager0.new VfsStreamHandlerFactory();
      URLStreamHandler uRLStreamHandler0 = defaultFileSystemManager_VfsStreamHandlerFactory0.createURLStreamHandler(""ram"");
}"
427,"    public boolean canCreateFileSystem(final FileObject file) throws FileSystemException {
        return typeMap.getScheme(file) != null;
    }","  public void test105()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      FileObject fileObject0 = defaultFileSystemManager0.createVirtualFileSystem(""ram"");
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject(fileObject0);
      boolean boolean0 = defaultFileSystemManager0.canCreateFileSystem(onCallRefreshFileObject0);
}"
428,"    public FileObject toFileObject(final File file) throws FileSystemException {
        return getLocalFileProvider().findLocalFile(file);
    }","  public void test106()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      try { 
        defaultFileSystemManager0.toFileObject((File) null);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not find a file provider which can handle local files.
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
429,"    public FileSystemConfigBuilder getFileSystemConfigBuilder(final String scheme) throws FileSystemException {
        final FileProvider provider = providers.get(scheme);
        FileSystemException.requireNonNull(provider, ""vfs.impl/unknown-scheme.error"", scheme);
        return provider.getConfigBuilder();
    }","  public void test107()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      try { 
        defaultFileSystemManager0.getFileSystemConfigBuilder(""^~-o`HcrON>Ce`Z"");
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Unknown scheme \""^~-o`HcrON>Ce`Z\"" in URI \""{1}\"".
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
430,"    public FileObject createVirtualFileSystem(final FileObject rootFile) throws FileSystemException {
        final FileObject fileObject = vfsProvider.createFileSystem(rootFile);
        addVirtualFileSystemScheme(rootFile.getName().getScheme());
        return fileObject;
    }","  public void test108()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      FileObject fileObject0 = defaultFileSystemManager0.createVirtualFileSystem(""il'etcA<!n,4"");
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject(fileObject0);
      FileObject fileObject1 = defaultFileSystemManager0.createVirtualFileSystem((FileObject) onCallRefreshFileObject0);
}"
431,"    public CacheStrategy getCacheStrategy() {
        return fileCacheStrategy;
    }","  public void test109()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileOperationProvider fileOperationProvider0 = mock(FileOperationProvider.class, new ViolatedAssumptionAnswer());
      defaultFileSystemManager0.addOperationProvider(""ram"", fileOperationProvider0);
}"
432,"    public Class<?> getFileObjectDecorator() {
        return fileObjectDecorator;
    }","  public void test110()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      Class<?> class0 = defaultFileSystemManager0.getFileObjectDecorator();
}"
433,"    public void setBaseFile(final File baseFile) throws FileSystemException {
        this.baseFile = getLocalFileProvider().findLocalFile(baseFile);
    }","  public void test111()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      try { 
        defaultFileSystemManager0.setBaseFile((File) null);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not find a file provider which can handle local files.
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
434,"    public CacheStrategy getCacheStrategy() {
        return fileCacheStrategy;
    }","  public void test112()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FtpsFileProvider ftpsFileProvider0 = new FtpsFileProvider();
      defaultFileSystemManager0.addProvider(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", (FileProvider) ftpsFileProvider0);
      defaultFileSystemManager0.init();
      defaultFileSystemManager0.freeUnusedResources();
}"
435,"    public TemporaryFileStore getTemporaryFileStore() throws FileSystemException {
        return FileSystemException.requireNonNull(tempFileStore, ""vfs.impl/no-temp-file-store.error"");
    }","  public void test113()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      try { 
        defaultFileSystemManager0.getTemporaryFileStore();
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // No temporary file store configured.
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
436,,"  public void test114()  throws Throwable  {
      HttpsFileProvider httpsFileProvider0 = new HttpsFileProvider();
      try { 
        httpsFileProvider0.parseUri((FileName) null, ""org.apache.log4j.DailyRollingFileAppender"");
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Expecting // to follow the scheme in URI \""org.apache.log4j.DailyRollingFileAppender\"".
         //
         verifyException(""org.apache.commons.vfs2.provider.HostFileNameParser"", e);
      }
  }"
437,"    public FileObject resolveFile(final File baseFile, final String uri) throws FileSystemException {
        return resolveFile(getLocalFileProvider().findLocalFile(baseFile), uri);
    }","  public void test115()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      try { 
        defaultFileSystemManager0.resolveFile(""S"", fileSystemOptions0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not find file with URI \""S\"" because it is a relative path, and no base URI was provided.
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
438,"    public Collection<Capability> getProviderCapabilities(final String scheme) throws FileSystemException {
        final FileProvider provider = providers.get(scheme);
        FileSystemException.requireNonNull(provider, ""vfs.impl/unknown-scheme.error"", scheme);
        return provider.getCapabilities();
    }","  public void test116()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      try { 
        defaultFileSystemManager0.getProviderCapabilities(""Hv7lmO>nu}v<"");
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Unknown scheme \""Hv7lmO>nu}v<\"" in URI \""{1}\"".
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
439,"    public FileObject resolveFile(final File baseFile, final String uri) throws FileSystemException {
        return resolveFile(getLocalFileProvider().findLocalFile(baseFile), uri);
    }","  public void test117()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      VirtualFileName virtualFileName0 = new VirtualFileName(""S"", ""vfs.provider/invalid-descendent-name.error"", fileType0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(virtualFileName0, fileSystemOptions0);
      FileObject fileObject0 = virtualFileSystem0.createFile(virtualFileName0);
      defaultFileSystemManager0.setBaseFile(fileObject0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile(""http3"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileSystem"", e);
      }
  }"
440,"    public URLStreamHandlerFactory getURLStreamHandlerFactory() {
        return new VfsStreamHandlerFactory();
    }","  public void test118()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      URLStreamHandlerFactory uRLStreamHandlerFactory0 = defaultFileSystemManager0.getURLStreamHandlerFactory();
}"
441,"    public FileReplicator getReplicator() throws FileSystemException {
        return FileSystemException.requireNonNull(fileReplicator, ""vfs.impl/no-replicator.error"");
    }","  public void test119()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      try { 
        defaultFileSystemManager0.getReplicator();
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // No file replicator configured.
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
442,"    public FileObject createFileSystem(final FileObject file) throws FileSystemException {
        final String scheme = typeMap.getScheme(file);
        FileSystemException.requireNonNull(scheme, ""vfs.impl/no-provider-for-file.error"", file);
        return createFileSystem(scheme, file);
    }","  public void test120()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject((FileObject) null);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.createFileSystem((FileObject) synchronizedFileObject0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DecoratedFileObject"", e);
      }
  }"
443,"    public FileObject resolveFile(final File baseFile, final String uri) throws FileSystemException {
        return resolveFile(getLocalFileProvider().findLocalFile(baseFile), uri);
    }","  public void test121()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile((URI) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.net.MockURI"", e);
      }
  }"
444,"    public FileObject resolveFile(final File baseFile, final String uri) throws FileSystemException {
        return resolveFile(getLocalFileProvider().findLocalFile(baseFile), uri);
    }","  public void test122()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      try { 
        defaultFileSystemManager0.resolveFile((File) null, ""zQ3_z B"");
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not find a file provider which can handle local files.
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
445,"    public CacheStrategy getCacheStrategy() {
        return fileCacheStrategy;
    }","  public void test123()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.addExtensionMap(""rpYS8;3}(LR(Xpi&b"", ""hardlink@openssh.com is not supported"");
}"
446,"    protected PermissionCollection getPermissions(final CodeSource cs) {
        try {
            final String url = cs.getLocation().toString();
            final FileObject file = lookupFileObject(url);
            if (file == null) {
                return super.getPermissions(cs);
            }

            final FileObject parentLayer = file.getFileSystem().getParentLayer();
            if (parentLayer == null) {
                return super.getPermissions(cs);
            }

            final Permissions combi = new Permissions();
            PermissionCollection permCollect = super.getPermissions(cs);
            copyPermissions(permCollect, combi);

            for (FileObject parent = parentLayer; parent != null; parent = parent.getFileSystem().getParentLayer()) {
                final CodeSource parentcs = new CodeSource(parent.getURL(), parent.getContent().getCertificates());
                permCollect = super.getPermissions(parentcs);
                copyPermissions(permCollect, combi);
            }

            return combi;
        } catch (final FileSystemException fse) {
            throw new SecurityException(fse.getMessage());
        }
    }","  public void test0()  throws Throwable  {
      FileObject[] fileObjectArray0 = new FileObject[1];
      Daemon.DaemonFactory daemon_DaemonFactory0 = new Daemon.DaemonFactory();
      ClassLoader classLoader0 = daemon_DaemonFactory0.getContextClassLoader();
      VFSClassLoader vFSClassLoader0 = new VFSClassLoader(fileObjectArray0, (FileSystemManager) null, classLoader0);
      CodeSigner[] codeSignerArray0 = new CodeSigner[3];
      CodeSource codeSource0 = new CodeSource((URL) null, codeSignerArray0);
      // Undeclared exception!
      try { 
        vFSClassLoader0.getPermissions(codeSource0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
447,"    protected void copyPermissions(final PermissionCollection src, final PermissionCollection dest) {
        for (final Enumeration<Permission> elem = src.elements(); elem.hasMoreElements();) {
            final Permission permission = elem.nextElement();
            dest.add(permission);
        }
    }","  public void test1()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      VFSClassLoader vFSClassLoader0 = new VFSClassLoader((FileObject) null, standardFileSystemManager0);
      // Undeclared exception!
      try { 
        vFSClassLoader0.copyPermissions((PermissionCollection) null, (PermissionCollection) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.VFSClassLoader"", e);
      }
  }"
448,"    protected void copyPermissions(final PermissionCollection src, final PermissionCollection dest) {
        for (final Enumeration<Permission> elem = src.elements(); elem.hasMoreElements();) {
            final Permission permission = elem.nextElement();
            dest.add(permission);
        }
    }","  public void test2()  throws Throwable  {
      VFSClassLoader vFSClassLoader0 = new VFSClassLoader((FileObject) null, (FileSystemManager) null);
      URL uRL0 = MockURL.getHttpExample();
      CodeSource codeSource0 = new CodeSource(uRL0, (CodeSigner[]) null);
      PermissionCollection permissionCollection0 = vFSClassLoader0.getPermissions(codeSource0);
      SecurityPermission securityPermission0 = new SecurityPermission(""-0B:H-"", ""-0B:H-"");
      permissionCollection0.add(securityPermission0);
      AllPermission allPermission0 = new AllPermission(""&H;N}-GZJb4"", ""-0B:H-"");
      PermissionCollection permissionCollection1 = allPermission0.newPermissionCollection();
      // Undeclared exception!
      try { 
        vFSClassLoader0.copyPermissions(permissionCollection0, permissionCollection1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // invalid permission: (\""java.security.SecurityPermission\"" \""-0B:H-\"")
         //
         verifyException(""java.security.AllPermissionCollection"", e);
      }
  }"
449,"    public VFSClassLoader(final FileObject file, final FileSystemManager manager) throws FileSystemException {
        this(new FileObject[] { file }, manager, null);
    }","  public void test3()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      VFSClassLoader vFSClassLoader0 = null;
      try {
        vFSClassLoader0 = new VFSClassLoader((FileObject[]) null, standardFileSystemManager0, classLoader0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.VFSClassLoader"", e);
      }
  }"
450,"    public VFSClassLoader(final FileObject file, final FileSystemManager manager) throws FileSystemException {
        this(new FileObject[] { file }, manager, null);
    }","  public void test4()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileObject[] fileObjectArray0 = new FileObject[6];
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject((FileObject) null);
      fileObjectArray0[5] = (FileObject) synchronizedFileObject0;
      MockThread mockThread0 = new MockThread(""LEh^_*rJHUUppW2"");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      VFSClassLoader vFSClassLoader0 = null;
      try {
        vFSClassLoader0 = new VFSClassLoader(fileObjectArray0, defaultFileSystemManager0, classLoader0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DecoratedFileObject"", e);
      }
  }"
451,"    public VFSClassLoader(final FileObject file, final FileSystemManager manager) throws FileSystemException {
        this(new FileObject[] { file }, manager, null);
    }","  public void test5()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      VFSClassLoader vFSClassLoader0 = null;
      try {
        vFSClassLoader0 = new VFSClassLoader((FileObject[]) null, standardFileSystemManager0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.VFSClassLoader"", e);
      }
  }"
452,"    public VFSClassLoader(final FileObject file, final FileSystemManager manager) throws FileSystemException {
        this(new FileObject[] { file }, manager, null);
    }","  public void test6()  throws Throwable  {
      FileObject[] fileObjectArray0 = new FileObject[3];
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject((FileObject) null);
      fileObjectArray0[0] = (FileObject) synchronizedFileObject0;
      VFSClassLoader vFSClassLoader0 = null;
      try {
        vFSClassLoader0 = new VFSClassLoader(fileObjectArray0, (FileSystemManager) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DecoratedFileObject"", e);
      }
  }"
453,"    public VFSClassLoader(final FileObject file, final FileSystemManager manager) throws FileSystemException {
        this(new FileObject[] { file }, manager, null);
    }","  public void test7()  throws Throwable  {
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject((FileObject) null);
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      VFSClassLoader vFSClassLoader0 = null;
      try {
        vFSClassLoader0 = new VFSClassLoader(onCallRefreshFileObject0, defaultFileSystemManager0, classLoader0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DecoratedFileObject"", e);
      }
  }"
454,"    public VFSClassLoader(final FileObject file, final FileSystemManager manager) throws FileSystemException {
        this(new FileObject[] { file }, manager, null);
    }","  public void test8()  throws Throwable  {
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject((FileObject) null);
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, ""Unexpected xml 'standalone' pseudo-attribute value '"");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      VFSClassLoader vFSClassLoader0 = null;
      try {
        vFSClassLoader0 = new VFSClassLoader(synchronizedFileObject0, defaultFileSystemManager0, classLoader0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DecoratedFileObject"", e);
      }
  }"
455,"    public VFSClassLoader(final FileObject file, final FileSystemManager manager) throws FileSystemException {
        this(new FileObject[] { file }, manager, null);
    }","  public void test9()  throws Throwable  {
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject((FileObject) null);
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      VFSClassLoader vFSClassLoader0 = null;
      try {
        vFSClassLoader0 = new VFSClassLoader(synchronizedFileObject0, standardFileSystemManager0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DecoratedFileObject"", e);
      }
  }"
456,"    protected Enumeration<URL> findResources(final String name) throws IOException {
        final List<URL> result = new ArrayList<>(2);

        for (final FileObject baseFile : resources) {
            try (final FileObject file = baseFile.resolveFile(name, NameScope.DESCENDENT_OR_SELF)) {
                if (FileObjectUtils.exists(file)) {
                    result.add(new Resource(name, baseFile, file).getURL());
                }
            }
        }

        return Collections.enumeration(result);
    }","  public void test10()  throws Throwable  {
      VFSClassLoader vFSClassLoader0 = new VFSClassLoader((FileObject) null, (FileSystemManager) null);
      Enumeration<URL> enumeration0 = vFSClassLoader0.findResources(""auth"");
}"
457,"    protected URL findResource(final String name) {
        try {
            final Resource res = loadResource(name);
            if (res != null) {
                return res.getURL();
            }
            return null;
        } catch (final Exception ignored) {
            return null; // TODO: report?
        }
    }","  public void test11()  throws Throwable  {
      FileObject[] fileObjectArray0 = new FileObject[1];
      Daemon.DaemonFactory daemon_DaemonFactory0 = new Daemon.DaemonFactory();
      ClassLoader classLoader0 = daemon_DaemonFactory0.getContextClassLoader();
      VFSClassLoader vFSClassLoader0 = new VFSClassLoader(fileObjectArray0, (FileSystemManager) null, classLoader0);
      URL uRL0 = vFSClassLoader0.findResource(""p$L/g1*A)"");
}"
458,"    protected void copyPermissions(final PermissionCollection src, final PermissionCollection dest) {
        for (final Enumeration<Permission> elem = src.elements(); elem.hasMoreElements();) {
            final Permission permission = elem.nextElement();
            dest.add(permission);
        }
    }","  public void test12()  throws Throwable  {
      VFSClassLoader vFSClassLoader0 = new VFSClassLoader((FileObject) null, (FileSystemManager) null);
      URL uRL0 = MockURL.getFtpExample();
      CodeSource codeSource0 = new CodeSource(uRL0, (CodeSigner[]) null);
      PermissionCollection permissionCollection0 = vFSClassLoader0.getPermissions(codeSource0);
      SecurityPermission securityPermission0 = new SecurityPermission(""auth"", ""auth"");
      permissionCollection0.add(securityPermission0);
      vFSClassLoader0.copyPermissions(permissionCollection0, permissionCollection0);
}"
459,"    protected Class<?> findClass(final String name) throws ClassNotFoundException {
        try {
            final String path = name.replace('.', '/').concat("".class"");
            final Resource res = loadResource(path);
            if (res == null) {
                throw new ClassNotFoundException(name);
            }
            return defineClass(name, res);
        } catch (final IOException ioe) {
            throw new ClassNotFoundException(name, ioe);
        }
    }","  public void test13()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      VFSClassLoader vFSClassLoader0 = new VFSClassLoader((FileObject) null, defaultFileSystemManager0);
      try { 
        vFSClassLoader0.findClass(""g!Hm+iE+"");
        fail(""Expecting exception: ClassNotFoundException"");
      } catch(ClassNotFoundException e) {
         //
         // g!Hm+iE+
         //
         verifyException(""org.apache.commons.vfs2.impl.VFSClassLoader"", e);
      }
  }"
460,"    protected Class<?> findClass(final String name) throws ClassNotFoundException {
        try {
            final String path = name.replace('.', '/').concat("".class"");
            final Resource res = loadResource(path);
            if (res == null) {
                throw new ClassNotFoundException(name);
            }
            return defineClass(name, res);
        } catch (final IOException ioe) {
            throw new ClassNotFoundException(name, ioe);
        }
    }","  public void test14()  throws Throwable  {
      FileObject[] fileObjectArray0 = new FileObject[1];
      VFSClassLoader vFSClassLoader0 = new VFSClassLoader(fileObjectArray0, (FileSystemManager) null);
      // Undeclared exception!
      try { 
        vFSClassLoader0.findClass((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.VFSClassLoader"", e);
      }
  }"
461,"    public FileObject[] getFileObjects() {
        return resources.toArray(FileObject.EMPTY_ARRAY);
    }","  public void test15()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      VFSClassLoader vFSClassLoader0 = new VFSClassLoader((FileObject) null, standardFileSystemManager0, classLoader0);
      FileObject[] fileObjectArray0 = vFSClassLoader0.getFileObjects();
}"
462,"    public VFSClassLoader(final FileObject file, final FileSystemManager manager) throws FileSystemException {
        this(new FileObject[] { file }, manager, null);
    }","  public void test16()  throws Throwable  {
      DecoratedFileObject decoratedFileObject0 = new DecoratedFileObject((FileObject) null);
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      VFSClassLoader vFSClassLoader0 = null;
      try {
        vFSClassLoader0 = new VFSClassLoader(decoratedFileObject0, defaultFileSystemManager0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DecoratedFileObject"", e);
      }
  }"
463,"    public long getDelay() {
        return delay;
    }","  public void test0()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
464,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test1()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
465,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test2()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
466,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test3()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
467,"    public void run() {
        mainloop: while (!monitorThread.isInterrupted() && this.shouldRun) {
            // For each entry in the map
            final Object[] fileNames;
            synchronized (this.monitorMap) {
                fileNames = this.monitorMap.keySet().toArray();
            }
            for (int iterFileNames = 0; iterFileNames < fileNames.length; iterFileNames++) {
                final FileName fileName = (FileName) fileNames[iterFileNames];
                final FileMonitorAgent agent;
                synchronized (this.monitorMap) {
                    agent = this.monitorMap.get(fileName);
                }
                if (agent != null) {
                    agent.check();
                }

                if (getChecksPerRun() > 0 && (iterFileNames + 1) % getChecksPerRun() == 0) {
                    try {
                        Thread.sleep(getDelay());
                    } catch (final InterruptedException e) {
                        // Woke up.
                    }
                }

                if (monitorThread.isInterrupted() || !this.shouldRun) {
                    continue mainloop;
                }
            }

            while (!this.addStack.empty()) {
                this.addFile(this.addStack.pop());
            }

            while (!this.deleteStack.empty()) {
                this.removeFile(this.deleteStack.pop());
            }

            try {
                Thread.sleep(getDelay());
            } catch (final InterruptedException e) {
                continue;
            }
        }

        this.shouldRun = true;
    }","  public void test4()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      genericURLFileName0.getBaseName();
      FileObject fileObject0 = virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(fileObject0);
      defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.addFile(fileObject0);
      // Undeclared exception!
      try { 
        defaultFileMonitor0.run();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileMonitor"", e);
      }
  }"
468,"    public void stop() {
        this.shouldRun = false;
        if (this.monitorThread != null) {
            this.monitorThread.interrupt();
            try {
                this.monitorThread.join();
            } catch (final InterruptedException e) {
                // ignore
            }
            this.monitorThread = null;
        }
    }","  public void test5()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      genericURLFileName0.getBaseName();
      FileObject fileObject0 = virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(fileObject0);
      defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
  }"
469,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test6()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.start();
      defaultFileMonitor0.run();
      long long0 = defaultFileMonitor0.getDelay();
      long long1 = 1000L;
      defaultFileMonitor0.setDelay(long1);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      defaultFileMonitor0.setDelay(long0);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setRecursive(boolean0);
      defaultFileMonitor0.stop();
      int int0 = 1000;
      defaultFileMonitor0.setChecksPerRun(int0);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.getDelay();
      defaultFileMonitor0.getDelay();
      defaultFileMonitor0.isRecursive();
  }"
470,"    protected void queueAddFile(final FileObject file) {
        this.addStack.push(file);
    }","  public void test7()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      String string0 = """";
      FileObject fileObject0 = null;
      defaultFileMonitor0.queueAddFile((FileObject) null);
      FileType fileType0 = FileType.FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", (-4376), (-4376), ""bYbC)"", ""bYbC)"", ""bYbC)"", fileType0, """");
      FileType fileType1 = FileType.FOLDER;
      LayeredFileName layeredFileName0 = new LayeredFileName("""", genericURLFileName0, """", fileType1);
      HttpFileSystem httpFileSystem0 = mock(HttpFileSystem.class, new ViolatedAssumptionAnswer());
      DefaultLocalFileProvider defaultLocalFileProvider0 = new DefaultLocalFileProvider();
      String string1 = ""}\""'T{J,%I9}="";
      URI uRI0 = MockURI.URI(""com.jcraft.jsch.JSch"");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException(""java.io.File"", e);
      }
  }"
471,"    public long getDelay() {
        return delay;
    }","  public void test8()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.start();
      defaultFileMonitor0.run();
      long long0 = defaultFileMonitor0.getDelay();
      long long1 = 1000L;
      defaultFileMonitor0.setDelay(long1);
      defaultFileMonitor0.setDelay(long0);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.stop();
      int int0 = 1000;
      defaultFileMonitor0.setChecksPerRun(int0);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.getDelay();
      defaultFileMonitor0.getDelay();
  }"
472,"    public void run() {
        mainloop: while (!monitorThread.isInterrupted() && this.shouldRun) {
            // For each entry in the map
            final Object[] fileNames;
            synchronized (this.monitorMap) {
                fileNames = this.monitorMap.keySet().toArray();
            }
            for (int iterFileNames = 0; iterFileNames < fileNames.length; iterFileNames++) {
                final FileName fileName = (FileName) fileNames[iterFileNames];
                final FileMonitorAgent agent;
                synchronized (this.monitorMap) {
                    agent = this.monitorMap.get(fileName);
                }
                if (agent != null) {
                    agent.check();
                }

                if (getChecksPerRun() > 0 && (iterFileNames + 1) % getChecksPerRun() == 0) {
                    try {
                        Thread.sleep(getDelay());
                    } catch (final InterruptedException e) {
                        // Woke up.
                    }
                }

                if (monitorThread.isInterrupted() || !this.shouldRun) {
                    continue mainloop;
                }
            }

            while (!this.addStack.empty()) {
                this.addFile(this.addStack.pop());
            }

            while (!this.deleteStack.empty()) {
                this.removeFile(this.deleteStack.pop());
            }

            try {
                Thread.sleep(getDelay());
            } catch (final InterruptedException e) {
                continue;
            }
        }

        this.shouldRun = true;
    }","  public void test9()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay((-40L));
      defaultFileMonitor0.setRecursive(false);
      // Undeclared exception!
      try { 
        defaultFileMonitor0.run();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileMonitor"", e);
      }
  }"
473,"    public long getDelay() {
        return delay;
    }","  public void test10()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.start();
      defaultFileMonitor0.getDelay();
      defaultFileMonitor0.setDelay(1000L);
      defaultFileMonitor0.setDelay(1000L);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(1000);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.getDelay();
  }"
474,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test11()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.isRecursive();
  }"
475,"    public void start() {
        if (this.monitorThread == null) {
            this.monitorThread = new Thread(this);
            this.monitorThread.setDaemon(true);
            this.monitorThread.setPriority(Thread.MIN_PRIORITY);
        }
        this.monitorThread.start();
    }","  public void test12()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.start();
      defaultFileMonitor0.getDelay();
      defaultFileMonitor0.setDelay(1000L);
      // Undeclared exception!
      try { 
        defaultFileMonitor0.start();
        fail(""Expecting exception: IllegalThreadStateException"");
      } catch(IllegalThreadStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.lang.Thread"", e);
      }
  }"
476,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test13()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
477,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test14()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
478,"    public long getDelay() {
        return delay;
    }","  public void test15()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
479,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test16()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
480,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test17()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject((FileObject) null);
}"
481,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test18()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject((FileObject) null);
      defaultFileMonitor0.start();
}"
482,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test19()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject((FileObject) null);
      defaultFileMonitor0.start();
}"
483,"    public long getDelay() {
        return delay;
    }","  public void test20()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject((FileObject) null);
      defaultFileMonitor0.start();
}"
484,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test21()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
485,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test22()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
486,"    public long getDelay() {
        return delay;
    }","  public void test23()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
487,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test24()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
488,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test25()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
}"
489,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test26()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
}"
490,"    public long getDelay() {
        return delay;
    }","  public void test27()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
}"
491,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test28()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setDelay(1565L);
}"
492,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test29()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setDelay(1565L);
}"
493,"    public long getDelay() {
        return delay;
    }","  public void test30()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setDelay(1565L);
}"
494,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test31()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
495,"    public long getDelay() {
        return delay;
    }","  public void test32()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
496,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test33()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
497,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test34()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
498,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test35()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.start();
}"
499,"    public long getDelay() {
        return delay;
    }","  public void test36()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.start();
}"
500,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test37()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.start();
}"
501,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test38()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.start();
      defaultFileMonitor0.stop();
}"
502,"    public long getDelay() {
        return delay;
    }","  public void test39()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.start();
      defaultFileMonitor0.stop();
}"
503,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test40()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.start();
      defaultFileMonitor0.stop();
}"
504,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test41()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.start();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun((-508));
}"
505,"    public long getDelay() {
        return delay;
    }","  public void test42()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.start();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun((-508));
}"
506,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test43()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.start();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun((-508));
}"
507,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test44()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.start();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun((-508));
      defaultFileMonitor0.setChecksPerRun((-508));
}"
508,"    public long getDelay() {
        return delay;
    }","  public void test45()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.start();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun((-508));
      defaultFileMonitor0.setChecksPerRun((-508));
}"
509,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test46()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.start();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun((-508));
      defaultFileMonitor0.setChecksPerRun((-508));
}"
510,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test47()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.start();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun((-508));
      defaultFileMonitor0.setChecksPerRun((-508));
      defaultFileMonitor0.start();
}"
511,"    public long getDelay() {
        return delay;
    }","  public void test48()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.start();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun((-508));
      defaultFileMonitor0.setChecksPerRun((-508));
      defaultFileMonitor0.start();
}"
512,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test49()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.start();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun((-508));
      defaultFileMonitor0.setChecksPerRun((-508));
      defaultFileMonitor0.start();
}"
513,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test50()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.start();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun((-508));
      defaultFileMonitor0.setChecksPerRun((-508));
      defaultFileMonitor0.start();
      FileObject fileObject0 = null;
      defaultFileMonitor0.queueRemoveFile((FileObject) null);
}"
514,"    public long getDelay() {
        return delay;
    }","  public void test51()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.start();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun((-508));
      defaultFileMonitor0.setChecksPerRun((-508));
      defaultFileMonitor0.start();
      FileObject fileObject0 = null;
      defaultFileMonitor0.queueRemoveFile((FileObject) null);
}"
515,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test52()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.start();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun((-508));
      defaultFileMonitor0.setChecksPerRun((-508));
      defaultFileMonitor0.start();
      FileObject fileObject0 = null;
      defaultFileMonitor0.queueRemoveFile((FileObject) null);
}"
516,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test53()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
517,"    public long getDelay() {
        return delay;
    }","  public void test54()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
518,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test55()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
519,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test56()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
520,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test57()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
}"
521,"    public long getDelay() {
        return delay;
    }","  public void test58()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
}"
522,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test59()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
}"
523,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test60()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.start();
}"
524,"    public long getDelay() {
        return delay;
    }","  public void test61()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.start();
}"
525,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test62()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.start();
}"
526,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test63()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
527,"    public long getDelay() {
        return delay;
    }","  public void test64()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
528,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test65()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
529,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test66()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
530,"    public long getDelay() {
        return delay;
    }","  public void test67()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
531,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test68()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
532,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test69()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
533,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test70()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
534,"    public long getDelay() {
        return delay;
    }","  public void test71()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(0L);
}"
535,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test72()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(0L);
}"
536,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test73()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(0L);
}"
537,"    public long getDelay() {
        return delay;
    }","  public void test74()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(0L);
      defaultFileMonitor0.setRecursive(false);
}"
538,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test75()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(0L);
      defaultFileMonitor0.setRecursive(false);
}"
539,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test76()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(0L);
      defaultFileMonitor0.setRecursive(false);
}"
540,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test77()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
541,"    public long getDelay() {
        return delay;
    }","  public void test78()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
542,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test79()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
543,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test80()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
544,"    public long getDelay() {
        return delay;
    }","  public void test81()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
545,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test82()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
546,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test83()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
547,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test84()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
548,"    public long getDelay() {
        return delay;
    }","  public void test85()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
}"
549,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test86()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
}"
550,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test87()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
}"
551,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test88()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(0);
}"
552,"    public long getDelay() {
        return delay;
    }","  public void test89()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(0);
}"
553,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test90()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(0);
}"
554,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test91()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(0);
      defaultFileMonitor0.stop();
}"
555,"    public long getDelay() {
        return delay;
    }","  public void test92()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(0);
      defaultFileMonitor0.stop();
}"
556,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test93()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(0);
      defaultFileMonitor0.stop();
}"
557,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test94()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(0);
      defaultFileMonitor0.stop();
      FileListener fileListener0 = defaultFileMonitor0.getFileListener();
}"
558,"    public long getDelay() {
        return delay;
    }","  public void test95()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(0);
      defaultFileMonitor0.stop();
      FileListener fileListener0 = defaultFileMonitor0.getFileListener();
}"
559,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test96()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(0);
      defaultFileMonitor0.stop();
      FileListener fileListener0 = defaultFileMonitor0.getFileListener();
}"
560,"    FileListener getFileListener() {
        return this.listener;
    }","  public void test97()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(0);
      defaultFileMonitor0.stop();
      FileListener fileListener0 = defaultFileMonitor0.getFileListener();
}"
561,"    FileListener getFileListener() {
        return this.listener;
    }","  public void test98()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(0);
      defaultFileMonitor0.stop();
      FileListener fileListener0 = defaultFileMonitor0.getFileListener();
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
}"
562,"    FileListener getFileListener() {
        return this.listener;
    }","  public void test99()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(0);
      defaultFileMonitor0.stop();
      FileListener fileListener0 = defaultFileMonitor0.getFileListener();
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
}"
563,"    FileListener getFileListener() {
        return this.listener;
    }","  public void test100()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(0);
      defaultFileMonitor0.stop();
      FileListener fileListener0 = defaultFileMonitor0.getFileListener();
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      URI uRI0 = MockURI.aFileURI;
}"
564,"    FileListener getFileListener() {
        return this.listener;
    }","  public void test101()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(0);
      defaultFileMonitor0.stop();
      FileListener fileListener0 = defaultFileMonitor0.getFileListener();
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      URI uRI0 = MockURI.aFileURI;
}"
565,"    FileListener getFileListener() {
        return this.listener;
    }","  public void test102()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(0);
      defaultFileMonitor0.stop();
      FileListener fileListener0 = defaultFileMonitor0.getFileListener();
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      URI uRI0 = MockURI.aFileURI;
}"
566,"    FileListener getFileListener() {
        return this.listener;
    }","  public void test103()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(0);
      defaultFileMonitor0.stop();
      FileListener fileListener0 = defaultFileMonitor0.getFileListener();
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      URI uRI0 = MockURI.aFileURI;
}"
567,"    FileListener getFileListener() {
        return this.listener;
    }","  public void test104()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(0);
      defaultFileMonitor0.stop();
      FileListener fileListener0 = defaultFileMonitor0.getFileListener();
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      URI uRI0 = MockURI.aFileURI;
}"
568,"    FileListener getFileListener() {
        return this.listener;
    }","  public void test105()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(0);
      defaultFileMonitor0.stop();
      FileListener fileListener0 = defaultFileMonitor0.getFileListener();
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      URI uRI0 = MockURI.aFileURI;
}"
569,"    FileListener getFileListener() {
        return this.listener;
    }","  public void test106()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(0);
      defaultFileMonitor0.stop();
      FileListener fileListener0 = defaultFileMonitor0.getFileListener();
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      URI uRI0 = MockURI.aFileURI;
}"
570,"    FileListener getFileListener() {
        return this.listener;
    }","  public void test107()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(0);
      defaultFileMonitor0.stop();
      FileListener fileListener0 = defaultFileMonitor0.getFileListener();
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      URI uRI0 = MockURI.aFileURI;
}"
571,"    FileListener getFileListener() {
        return this.listener;
    }","  public void test108()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(0);
      defaultFileMonitor0.stop();
      FileListener fileListener0 = defaultFileMonitor0.getFileListener();
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      URI uRI0 = MockURI.aFileURI;
}"
572,"    FileListener getFileListener() {
        return this.listener;
    }","  public void test109()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(0);
      defaultFileMonitor0.stop();
      FileListener fileListener0 = defaultFileMonitor0.getFileListener();
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      URI uRI0 = MockURI.aFileURI;
}"
573,"    FileListener getFileListener() {
        return this.listener;
    }","  public void test110()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(0);
      defaultFileMonitor0.stop();
      FileListener fileListener0 = defaultFileMonitor0.getFileListener();
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      URI uRI0 = MockURI.aFileURI;
}"
574,"    FileListener getFileListener() {
        return this.listener;
    }","  public void test111()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(0);
      defaultFileMonitor0.stop();
      FileListener fileListener0 = defaultFileMonitor0.getFileListener();
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      URI uRI0 = MockURI.aFileURI;
}"
575,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test112()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
576,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test113()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
577,"    public long getDelay() {
        return delay;
    }","  public void test114()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
578,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test115()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
579,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test116()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
}"
580,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test117()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
}"
581,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test118()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
}"
582,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test119()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
}"
583,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test120()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
}"
584,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test121()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
}"
585,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test122()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
}"
586,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test123()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
}"
587,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test124()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
}"
588,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test125()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
}"
589,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test126()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
590,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test127()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
591,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test128()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
592,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test129()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
593,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test130()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
594,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test131()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
595,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test132()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
596,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test133()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
597,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test134()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
598,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test135()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
599,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test136()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
600,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test137()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
601,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test138()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
602,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test139()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
}"
603,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test140()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
}"
604,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test141()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
}"
605,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test142()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
}"
606,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test143()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
}"
607,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test144()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
}"
608,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test145()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
}"
609,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test146()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
}"
610,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test147()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
}"
611,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test148()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
}"
612,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test149()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
613,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test150()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
614,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test151()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
615,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test152()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
616,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test153()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
617,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test154()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
618,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test155()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
619,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test156()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
620,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test157()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
621,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test158()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
622,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test159()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
623,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test160()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
624,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test161()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
625,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test162()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
626,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test163()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
627,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test164()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
628,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test165()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
629,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test166()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
630,"    public long getDelay() {
        return delay;
    }","  public void test167()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
631,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test168()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
632,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test169()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
633,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test170()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
634,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test171()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
635,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test172()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
636,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test173()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
637,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test174()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
638,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test175()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
639,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test176()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
640,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test177()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
641,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test178()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
642,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test179()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
643,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test180()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
644,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test181()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
645,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test182()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
646,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test183()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
}"
647,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test184()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
}"
648,"    public long getDelay() {
        return delay;
    }","  public void test185()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
}"
649,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test186()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
}"
650,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test187()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
}"
651,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test188()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
}"
652,"    public long getDelay() {
        return delay;
    }","  public void test189()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""PJ:EGuUKePv*`2:"", ""=$oPj:P2"", fileType0, """");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
}"
653,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test190()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
654,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test191()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
655,"    public long getDelay() {
        return delay;
    }","  public void test192()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
656,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test193()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
657,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test194()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
}"
658,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test195()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
}"
659,"    public long getDelay() {
        return delay;
    }","  public void test196()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
}"
660,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test197()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
}"
661,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test198()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
}"
662,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test199()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
}"
663,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test200()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
}"
664,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test201()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
}"
665,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test202()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
}"
666,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test203()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
}"
667,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test204()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
}"
668,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test205()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
}"
669,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test206()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
}"
670,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test207()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
671,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test208()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
672,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test209()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
673,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test210()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
674,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test211()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
675,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test212()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
676,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test213()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
677,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test214()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
678,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test215()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
679,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test216()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
680,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test217()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
681,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test218()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
682,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test219()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
}"
683,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test220()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
}"
684,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test221()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
}"
685,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test222()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
}"
686,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test223()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
}"
687,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test224()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
}"
688,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test225()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
}"
689,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test226()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
}"
690,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test227()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
}"
691,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test228()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
}"
692,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test229()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
}"
693,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test230()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
694,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test231()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
695,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test232()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
696,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test233()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
697,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test234()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
698,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test235()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
699,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test236()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
700,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test237()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
701,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test238()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
702,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test239()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
703,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test240()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
704,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test241()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
705,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test242()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
706,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test243()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
707,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test244()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
708,"    public void setDelay(final long delay) {
        this.delay = delay > 0 ? delay : DEFAULT_DELAY;
    }","  public void test245()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
}"
709,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test246()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
710,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test247()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
711,"    public long getDelay() {
        return delay;
    }","  public void test248()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
712,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test249()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
713,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test250()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
714,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test251()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
715,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test252()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
716,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test253()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
717,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test254()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
718,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test255()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
719,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test256()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
720,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test257()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
721,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test258()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
722,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test259()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
723,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test260()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
724,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test261()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
725,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test262()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
726,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test263()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
727,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test264()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
}"
728,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test265()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
}"
729,"    public long getDelay() {
        return delay;
    }","  public void test266()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
}"
730,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test267()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
}"
731,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test268()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
}"
732,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test269()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
}"
733,"    public long getDelay() {
        return delay;
    }","  public void test270()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
}"
734,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test271()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
735,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test272()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
736,"    public long getDelay() {
        return delay;
    }","  public void test273()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
737,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test274()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
738,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test275()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
739,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test276()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
740,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test277()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
741,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test278()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
742,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test279()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
743,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test280()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
744,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test281()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
745,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test282()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
746,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test283()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
747,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test284()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
748,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test285()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
749,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test286()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
750,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test287()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
751,"    public void addFile(final FileObject file) {
        synchronized (this.monitorMap) {
            if (this.monitorMap.get(file.getName()) == null) {
                this.monitorMap.put(file.getName(), new FileMonitorAgent(this, file));

                try {
                    if (this.listener != null) {
                        file.getFileSystem().addListener(file, this.listener);
                    }

                    if (file.getType().hasChildren() && this.recursive) {
                        // Traverse the children
                        final FileObject[] children = file.getChildren();
                        for (final FileObject element : children) {
                            this.addFile(element); // Add depth first
                        }
                    }

                } catch (final FileSystemException fse) {
                    LOG.error(fse.getLocalizedMessage(), fse);
                }

            }
        }
    }","  public void test288()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(1611L);
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 3830, 3830, ""=$oPj:P2"", ""=$oPj:P2"", ""=$oPj:P2"", fileType0, ""=$oPj:P2"");
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, (FileSystemOptions) null);
      String string0 = genericURLFileName0.getBaseName();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)virtualFileSystem0.createFile(genericURLFileName0);
      defaultFileMonitor0.addFile(delegateFileObject0);
      int int0 = defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.addFile(delegateFileObject0);
}"
752,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test289()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
753,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test290()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
754,"    public long getDelay() {
        return delay;
    }","  public void test291()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
755,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test292()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
756,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test293()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
}"
757,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test294()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
}"
758,"    public long getDelay() {
        return delay;
    }","  public void test295()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
}"
759,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test296()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.stop();
}"
760,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test297()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.stop();
}"
761,"    public long getDelay() {
        return delay;
    }","  public void test298()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.stop();
}"
762,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test299()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.start();
}"
763,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test300()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.start();
}"
764,"    public long getDelay() {
        return delay;
    }","  public void test301()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.start();
}"
765,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test302()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
766,"    public long getDelay() {
        return delay;
    }","  public void test303()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
767,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test304()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
768,"    public DefaultFileMonitor(final FileListener listener) {
        this.listener = listener;
    }","  public void test305()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
}"
769,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test306()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.start();
}"
770,"    public long getDelay() {
        return delay;
    }","  public void test307()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.start();
}"
771,"    public boolean isRecursive() {
        return this.recursive;
    }","  public void test308()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.start();
}"
772,"    public long getDelay() {
        return delay;
    }","  public void test309()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.start();
      long long0 = defaultFileMonitor0.getDelay();
}"
773,"    public int getChecksPerRun() {
        return checksPerRun;
    }","  public void test310()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.start();
      long long0 = defaultFileMonitor0.getDelay();
      defaultFileMonitor0.run();
      defaultFileMonitor0.queueAddFile((FileObject) null);
      defaultFileMonitor0.setDelay(1000L);
      defaultFileMonitor0.stop();
}"
774,"    public long getDelay() {
        return delay;
    }","  public void test311()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.stop();
      defaultFileMonitor0.start();
      long long0 = defaultFileMonitor0.getDelay();
      defaultFileMonitor0.run();
      defaultFileMonitor0.queueAddFile((FileObject) null);
      defaultFileMonitor0.setDelay(1000L);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.setChecksPerRun(1000);
      defaultFileMonitor0.stop();
      defaultFileMonitor0.getChecksPerRun();
      defaultFileMonitor0.getChecksPerRun();
      long long1 = defaultFileMonitor0.getDelay();
}"
775,,"  public void test312()  throws Throwable  {
      HttpFileSystem httpFileSystem0 = mock(HttpFileSystem.class, new ViolatedAssumptionAnswer());
      DefaultLocalFileProvider defaultLocalFileProvider0 = new DefaultLocalFileProvider();
      // Undeclared exception!
      try { 
        defaultLocalFileProvider0.findLocalFile((File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.local.DefaultLocalFileProvider"", e);
      }
  }"
776,"    public void setRecursive(final boolean newRecursive) {
        this.recursive = newRecursive;
    }","  public void test313()  throws Throwable  {
      DefaultFileMonitor defaultFileMonitor0 = new DefaultFileMonitor((FileListener) null);
      defaultFileMonitor0.setDelay(0L);
      defaultFileMonitor0.getFileListener();
      defaultFileMonitor0.setRecursive(false);
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      try { 
        defaultFileSystemManager0.resolveFile(""%"", fileSystemOptions0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Invalid URI escape sequence \""%\"".
         //
         verifyException(""org.apache.commons.vfs2.provider.UriParser"", e);
      }
  }"
777,"    public boolean isDefault() {
        return true;
    }","  public void test0()  throws Throwable  {
      DefaultProviderConfiguration defaultProviderConfiguration0 = new DefaultProviderConfiguration();
      boolean boolean0 = defaultProviderConfiguration0.isDefault();
}"
778,"    protected void configurePlugins() throws FileSystemException {
        final Enumeration<URL> enumResources;
        try {
            enumResources = enumerateResources(PLUGIN_CONFIG_RESOURCE);
        } catch (final IOException e) {
            throw new FileSystemException(e);
        }

        while (enumResources.hasMoreElements()) {
            configure(enumResources.nextElement());
        }
    }","  public void test0()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      standardFileSystemManager0.configurePlugins();
}"
779,"    public void setConfiguration(final String configUri) {
        try {
            setConfiguration(new URL(configUri));
        } catch (final MalformedURLException e) {
            getLogger().warn(e.getLocalizedMessage(), e);
        }
    }","  public void test1()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      standardFileSystemManager0.setConfiguration(""http://java.sun.com/xml/stream/properties/implementation-name"");
}"
780,"    protected DefaultFileReplicator createDefaultFileReplicator() {
        return new DefaultFileReplicator();
    }","  public void test2()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      DefaultFileReplicator defaultFileReplicator0 = standardFileSystemManager0.createDefaultFileReplicator();
}"
781,"    public void setConfiguration(final String configUri) {
        try {
            setConfiguration(new URL(configUri));
        } catch (final MalformedURLException e) {
            getLogger().warn(e.getLocalizedMessage(), e);
        }
    }","  public void test3()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      standardFileSystemManager0.setLogger((Log) null);
      // Undeclared exception!
      try { 
        standardFileSystemManager0.setConfiguration(""J7b8H"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.StandardFileSystemManager"", e);
      }
  }"
782,"    public void setConfiguration(final String configUri) {
        try {
            setConfiguration(new URL(configUri));
        } catch (final MalformedURLException e) {
            getLogger().warn(e.getLocalizedMessage(), e);
        }
    }","  public void test4()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      Log4JLogger log4JLogger0 = new Log4JLogger();
      standardFileSystemManager0.setLogger(log4JLogger0);
      // Undeclared exception!
      try { 
        standardFileSystemManager0.setConfiguration("""");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.log4j.CategoryKey"", e);
      }
  }"
783,"    public void init() throws FileSystemException {
        // Set the replicator and temporary file store (use the same component)
        final DefaultFileReplicator replicator = createDefaultFileReplicator();
        setReplicator(new PrivilegedFileReplicator(replicator));
        setTemporaryFileStore(replicator);

        if (configUri == null) {
            // Use default config
            final URL url = getClass().getResource(CONFIG_RESOURCE);
            FileSystemException.requireNonNull(url, ""vfs.impl/find-config-file.error"", CONFIG_RESOURCE);
            configUri = url;
        }

        configure(configUri);
        configurePlugins();

        // Initialize super-class
        super.init();
    }","  public void test5()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      Log4JLogger log4JLogger0 = new Log4JLogger();
      standardFileSystemManager0.setLogger(log4JLogger0);
      // Undeclared exception!
      try { 
        standardFileSystemManager0.init();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.log4j.CategoryKey"", e);
      }
  }"
784,"    public void init() throws FileSystemException {
        // Set the replicator and temporary file store (use the same component)
        final DefaultFileReplicator replicator = createDefaultFileReplicator();
        setReplicator(new PrivilegedFileReplicator(replicator));
        setTemporaryFileStore(replicator);

        if (configUri == null) {
            // Use default config
            final URL url = getClass().getResource(CONFIG_RESOURCE);
            FileSystemException.requireNonNull(url, ""vfs.impl/find-config-file.error"", CONFIG_RESOURCE);
            configUri = url;
        }

        configure(configUri);
        configurePlugins();

        // Initialize super-class
        super.init();
    }","  public void test6()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      URL uRL0 = MockURL.getHttpExample();
      standardFileSystemManager0.setConfiguration(uRL0);
      try { 
        standardFileSystemManager0.init();
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not load VFS configuration from \""http://www.someFakeButWellFormedURL.org/fooExample\"".
         //
         verifyException(""org.apache.commons.vfs2.impl.StandardFileSystemManager"", e);
      }
  }"
785,"    public void init() throws FileSystemException {
        // Set the replicator and temporary file store (use the same component)
        final DefaultFileReplicator replicator = createDefaultFileReplicator();
        setReplicator(new PrivilegedFileReplicator(replicator));
        setTemporaryFileStore(replicator);

        if (configUri == null) {
            // Use default config
            final URL url = getClass().getResource(CONFIG_RESOURCE);
            FileSystemException.requireNonNull(url, ""vfs.impl/find-config-file.error"", CONFIG_RESOURCE);
            configUri = url;
        }

        configure(configUri);
        configurePlugins();

        // Initialize super-class
        super.init();
    }","  public void test7()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      standardFileSystemManager0.init();
      try { 
        standardFileSystemManager0.init();
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not load VFS configuration from \""file:/home/FSE_USER/Documents/toga-evaluation/toga-eval-FSE_USER-2023/artifacts/commons-vfs-2.9.0/commons-vfs2/target/classes/org/apache/commons/vfs2/impl/providers.xml\"".
         //
         verifyException(""org.apache.commons.vfs2.impl.StandardFileSystemManager"", e);
      }
  }"
786,"    public void init() throws FileSystemException {
        // Set the replicator and temporary file store (use the same component)
        final DefaultFileReplicator replicator = createDefaultFileReplicator();
        setReplicator(new PrivilegedFileReplicator(replicator));
        setTemporaryFileStore(replicator);

        if (configUri == null) {
            // Use default config
            final URL url = getClass().getResource(CONFIG_RESOURCE);
            FileSystemException.requireNonNull(url, ""vfs.impl/find-config-file.error"", CONFIG_RESOURCE);
            configUri = url;
        }

        configure(configUri);
        configurePlugins();

        // Initialize super-class
        super.init();
    }","  public void test8()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      Daemon.DaemonFactory daemon_DaemonFactory0 = new Daemon.DaemonFactory();
      ClassLoader classLoader0 = daemon_DaemonFactory0.getContextClassLoader();
      standardFileSystemManager0.setClassLoader(classLoader0);
      standardFileSystemManager0.init();
}"
787,"    public List<String> getDependencies() {
        return dependenies;
    }","  public void test0()  throws Throwable  {
      ProviderConfiguration providerConfiguration0 = new ProviderConfiguration();
      providerConfiguration0.setDependency(""org.apache.commons.vfs2.impl.ProviderConfiguration"");
      List<String> list0 = providerConfiguration0.getDependencies();
}"
788,"    public String getClassName() {
        return className;
    }","  public void test1()  throws Throwable  {
      ProviderConfiguration providerConfiguration0 = new ProviderConfiguration();
      providerConfiguration0.setClassName("""");
      String string0 = providerConfiguration0.getClassName();
}"
789,"    public List<String> getDependencies() {
        return dependenies;
    }","  public void test2()  throws Throwable  {
      ProviderConfiguration providerConfiguration0 = new ProviderConfiguration();
      List<String> list0 = providerConfiguration0.getDependencies();
}"
790,"    public String getClassName() {
        return className;
    }","  public void test3()  throws Throwable  {
      ProviderConfiguration providerConfiguration0 = new ProviderConfiguration();
      String string0 = providerConfiguration0.getClassName();
}"
791,"    public boolean isDefault() {
        return false;
    }","  public void test4()  throws Throwable  {
      ProviderConfiguration providerConfiguration0 = new ProviderConfiguration();
      boolean boolean0 = providerConfiguration0.isDefault();
}"
792,"    public List<String> getSchemes() {
        return schemes;
    }","  public void test5()  throws Throwable  {
      ProviderConfiguration providerConfiguration0 = new ProviderConfiguration();
      providerConfiguration0.setScheme(""wdv\""QmF+"");
      List<String> list0 = providerConfiguration0.getSchemes();
}"
793,"    public List<String> getSchemes() {
        return schemes;
    }","  public void test6()  throws Throwable  {
      ProviderConfiguration providerConfiguration0 = new ProviderConfiguration();
      List<String> list0 = providerConfiguration0.getSchemes();
}"
794,"    public String getClassName() {
        return className;
    }","  public void test7()  throws Throwable  {
      ProviderConfiguration providerConfiguration0 = new ProviderConfiguration();
      providerConfiguration0.setClassName(""wdv\""QmF+"");
      String string0 = providerConfiguration0.getClassName();
}"
795,"    public void setConfigClass(final FileSystemOptions fso, final String scheme, final String name,
            final Class<?> className) throws FileSystemException, IllegalAccessException, InstantiationException {
        setConfigClasses(fso, scheme, name, new Class[] { className });
    }","  public void test0()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder(defaultFileSystemManager0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<FileSystemOptions> class0 = FileSystemOptions.class;
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigClass(fileSystemOptions0, ""p+/QP4O[WAcsD'?*%X"", ""4u&ZDGKp:"", class0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Unknown scheme \""p+/QP4O[WAcsD'?*%X\"" in URI \""{1}\"".
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
796,"    protected FileSystemManager getManager() {
        return manager;
    }","  public void test1()  throws Throwable  {
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder((FileSystemManager) null);
      FileSystemManager fileSystemManager0 = delegatingFileSystemOptionsBuilder0.getManager();
}"
797,"    protected FileSystemManager getManager() {
        return manager;
    }","  public void test2()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder(defaultFileSystemManager0);
      FileSystemManager fileSystemManager0 = delegatingFileSystemOptionsBuilder0.getManager();
}"
798,"    public void setConfigStrings(final FileSystemOptions fso, final String scheme, final String name,
            final String[] values) throws FileSystemException {
        final Context ctx = new Context(fso, scheme, name, values);

        setValues(ctx);
    }","  public void test3()  throws Throwable  {
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder((FileSystemManager) null);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigStrings(fileSystemOptions0, ""#%4ZO4Jmkk"", ""#%4ZO4Jmkk"", stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.DelegatingFileSystemOptionsBuilder"", e);
      }
  }"
799,"    public void setConfigString(final FileSystemOptions fso, final String scheme, final String name, final String value)
            throws FileSystemException {
        setConfigStrings(fso, scheme, name, new String[] { value });
    }","  public void test4()  throws Throwable  {
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder((FileSystemManager) null);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      // Undeclared exception!
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigString(fileSystemOptions0, "" doesn't support removeAcl"", "" doesn't support removeAcl"", ""org.apache.commons.io.filefilter.PathEqualsFileFilter"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.DelegatingFileSystemOptionsBuilder"", e);
      }
  }"
800,"    public void setConfigClasses(final FileSystemOptions fso, final String scheme, final String name,
            final Class<?>[] classNames) throws FileSystemException, IllegalAccessException, InstantiationException {
        final Object[] values = new Object[classNames.length];
        for (int iterClassNames = 0; iterClassNames < values.length; iterClassNames++) {
            values[iterClassNames] = classNames[iterClassNames].newInstance();
        }

        final Context ctx = new Context(fso, scheme, name, values);

        setValues(ctx);
    }","  public void test5()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder(standardFileSystemManager0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 3);
      Class<Long> class0 = Long.class;
      classArray0[0] = class0;
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigClasses(fileSystemOptions0, ""N,lMj##X>_%t^,"", ""r/'_"", classArray0);
        fail(""Expecting exception: InstantiationException"");
      } catch(InstantiationException e) {
      }
  }"
801,"    public void setConfigClasses(final FileSystemOptions fso, final String scheme, final String name,
            final Class<?>[] classNames) throws FileSystemException, IllegalAccessException, InstantiationException {
        final Object[] values = new Object[classNames.length];
        for (int iterClassNames = 0; iterClassNames < values.length; iterClassNames++) {
            values[iterClassNames] = classNames[iterClassNames].newInstance();
        }

        final Context ctx = new Context(fso, scheme, name, values);

        setValues(ctx);
    }","  public void test6()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder(standardFileSystemManager0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<Void>[] classArray0 = (Class<Void>[]) Array.newInstance(Class.class, 5);
      Class<Void> class0 = Void.class;
      classArray0[0] = class0;
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigClasses(fileSystemOptions0, ""Or6y*"", (String) null, classArray0);
        fail(""Expecting exception: IllegalAccessException"");
      } catch(IllegalAccessException e) {
      }
  }"
802,"    public void setConfigClass(final FileSystemOptions fso, final String scheme, final String name,
            final Class<?> className) throws FileSystemException, IllegalAccessException, InstantiationException {
        setConfigClasses(fso, scheme, name, new Class[] { className });
    }","  public void test7()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder(defaultFileSystemManager0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 9);
      Class<Double> class0 = Double.class;
      classArray0[1] = class0;
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigClass(fileSystemOptions0, """", ""#a"", classArray0[1]);
        fail(""Expecting exception: InstantiationException"");
      } catch(InstantiationException e) {
      }
  }"
803,"    public void setConfigClass(final FileSystemOptions fso, final String scheme, final String name,
            final Class<?> className) throws FileSystemException, IllegalAccessException, InstantiationException {
        setConfigClasses(fso, scheme, name, new Class[] { className });
    }","  public void test8()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder((FileSystemManager) null);
      Class<Void> class0 = Void.class;
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigClass(fileSystemOptions0, "" class loader."", ""NJ#|M<?&yU*1] sD\""."", class0);
        fail(""Expecting exception: IllegalAccessException"");
      } catch(IllegalAccessException e) {
      }
  }"
804,"    public void setConfigClasses(final FileSystemOptions fso, final String scheme, final String name,
            final Class<?>[] classNames) throws FileSystemException, IllegalAccessException, InstantiationException {
        final Object[] values = new Object[classNames.length];
        for (int iterClassNames = 0; iterClassNames < values.length; iterClassNames++) {
            values[iterClassNames] = classNames[iterClassNames].newInstance();
        }

        final Context ctx = new Context(fso, scheme, name, values);

        setValues(ctx);
    }","  public void test9()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder(defaultFileSystemManager0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<DelegatingFileSystemOptionsBuilder>[] classArray0 = (Class<DelegatingFileSystemOptionsBuilder>[]) Array.newInstance(Class.class, 0);
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigClasses(fileSystemOptions0, ""W|ZpQg"", ""W|ZpQg"", classArray0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Unknown scheme \""W|ZpQg\"" in URI \""{1}\"".
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
805,"    public void setConfigClasses(final FileSystemOptions fso, final String scheme, final String name,
            final Class<?>[] classNames) throws FileSystemException, IllegalAccessException, InstantiationException {
        final Object[] values = new Object[classNames.length];
        for (int iterClassNames = 0; iterClassNames < values.length; iterClassNames++) {
            values[iterClassNames] = classNames[iterClassNames].newInstance();
        }

        final Context ctx = new Context(fso, scheme, name, values);

        setValues(ctx);
    }","  public void test10()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder(defaultFileSystemManager0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
      // Undeclared exception!
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigClasses(fileSystemOptions0, ""TI\""kP)x =x"", ""TI\""kP)x =x"", classArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.DelegatingFileSystemOptionsBuilder"", e);
      }
  }"
806,"    public void setConfigClass(final FileSystemOptions fso, final String scheme, final String name,
            final Class<?> className) throws FileSystemException, IllegalAccessException, InstantiationException {
        setConfigClasses(fso, scheme, name, new Class[] { className });
    }","  public void test11()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      ResourceFileProvider resourceFileProvider0 = new ResourceFileProvider();
      standardFileSystemManager0.addProvider(""\""QKMm"", (FileProvider) resourceFileProvider0);
      Class<String> class0 = String.class;
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder(standardFileSystemManager0);
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigClass((FileSystemOptions) null, ""\""QKMm"", ""\""QKMm"", class0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // The configuration builder for scheme \""\""QKMm\"" has no option \""\""QKMm\"".
         //
         verifyException(""org.apache.commons.vfs2.util.DelegatingFileSystemOptionsBuilder"", e);
      }
  }"
807,"    public void setConfigClass(final FileSystemOptions fso, final String scheme, final String name,
            final Class<?> className) throws FileSystemException, IllegalAccessException, InstantiationException {
        setConfigClasses(fso, scheme, name, new Class[] { className });
    }","  public void test12()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder(standardFileSystemManager0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<FileSystemOptions> class0 = FileSystemOptions.class;
      // Undeclared exception!
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigClass(fileSystemOptions0, (String) null, (String) null, class0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
808,"    public void setConfigString(final FileSystemOptions fso, final String scheme, final String name, final String value)
            throws FileSystemException {
        setConfigStrings(fso, scheme, name, new String[] { value });
    }","  public void test13()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder(defaultFileSystemManager0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigString(fileSystemOptions0, ""W=6hXBdI2GXF${d^2g"", """", """");
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Unknown scheme \""W=6hXBdI2GXF${d^2g\"" in URI \""{1}\"".
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
809,"    public void setConfigStrings(final FileSystemOptions fso, final String scheme, final String name,
            final String[] values) throws FileSystemException {
        final Context ctx = new Context(fso, scheme, name, values);

        setValues(ctx);
    }","  public void test14()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder(defaultFileSystemManager0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      String[] stringArray0 = new String[9];
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigStrings(fileSystemOptions0, ""U'4\""32dwl"", ""U'4\""32dwl"", stringArray0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Unknown scheme \""U'4\""32dwl\"" in URI \""{1}\"".
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
810,"    public String getResourceName() {
        return resourceName;
    }","  public void test0()  throws Throwable  {
      CombinedResources combinedResources0 = new CombinedResources("".properties"");
      combinedResources0.loadResources("".properties"");
}"
811,"    protected void loadResources(final Locale locale) {
        if (locale == null) {
            return;
        }
        final String[] parts = new String[] {locale.getLanguage(), locale.getCountry(), locale.getVariant()};
        final StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 3; i++) {
            sb.append(getResourceName());
            for (int j = 0; j < i; j++) {
                sb.append('_').append(parts[j]);
            }
            if (!parts[i].isEmpty()) {
                sb.append('_').append(parts[i]);
                loadResources(sb.toString());
            }
            sb.setLength(0);
        }
    }","  public void test1()  throws Throwable  {
      CombinedResources combinedResources0 = new CombinedResources("""");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      combinedResources0.loadResources(locale0);
}"
812,"    protected Object handleGetObject(final String key) {
        return properties.get(key);
    }","  public void test2()  throws Throwable  {
      CombinedResources combinedResources0 = new CombinedResources("""");
      Object object0 = combinedResources0.handleGetObject(""&j{s)b{f<,"");
}"
813,"    public String getResourceName() {
        return resourceName;
    }","  public void test3()  throws Throwable  {
      CombinedResources combinedResources0 = new CombinedResources("".properties"");
      String string0 = combinedResources0.getResourceName();
}"
814,"    public Enumeration<String> getKeys() {
        return new Enumeration<String>() {
            @Override
            public boolean hasMoreElements() {
                return properties.keys().hasMoreElements();
            }

            @Override
            public String nextElement() {
                // We know that our properties will only ever contain Strings
                return (String) properties.keys().nextElement();
            }

        };
    }","  public void test4()  throws Throwable  {
      CombinedResources combinedResources0 = new CombinedResources("""");
      Enumeration<String> enumeration0 = combinedResources0.getKeys();
}"
815,"    protected void loadResources(final Locale locale) {
        if (locale == null) {
            return;
        }
        final String[] parts = new String[] {locale.getLanguage(), locale.getCountry(), locale.getVariant()};
        final StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 3; i++) {
            sb.append(getResourceName());
            for (int j = 0; j < i; j++) {
                sb.append('_').append(parts[j]);
            }
            if (!parts[i].isEmpty()) {
                sb.append('_').append(parts[i]);
                loadResources(sb.toString());
            }
            sb.setLength(0);
        }
    }","  public void test5()  throws Throwable  {
      CombinedResources combinedResources0 = new CombinedResources(""u(<S(b|+&!\""e87}"");
      // Undeclared exception!
      try { 
        combinedResources0.loadResources((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.CombinedResources"", e);
      }
  }"
816,"    protected Object handleGetObject(final String key) {
        return properties.get(key);
    }","  public void test6()  throws Throwable  {
      CombinedResources combinedResources0 = new CombinedResources(""llud(WKN!"");
      // Undeclared exception!
      try { 
        combinedResources0.handleGetObject((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
817,"    public CombinedResources(final String resourceName) {
        this.resourceName = resourceName;
        init();
    }","  public void test7()  throws Throwable  {
      CombinedResources combinedResources0 = null;
      try {
        combinedResources0 = new CombinedResources((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.CombinedResources"", e);
      }
  }"
818,"    public String getResourceName() {
        return resourceName;
    }","  public void test8()  throws Throwable  {
      CombinedResources combinedResources0 = new CombinedResources("""");
      String string0 = combinedResources0.getResourceName();
}"
819,"    public String getResourceName() {
        return resourceName;
    }","  public void test9()  throws Throwable  {
      CombinedResources combinedResources0 = new CombinedResources(""7"");
      combinedResources0.init();
}"
820,"    public CombinedResources(final String resourceName) {
        this.resourceName = resourceName;
        init();
    }","  public void test10()  throws Throwable  {
      CombinedResources combinedResources0 = new CombinedResources(""7"");
      boolean boolean0 = combinedResources0.containsKey(""7"");
}"
821,"    public String decrypt(final String encryptedKey) throws Exception {
        final SecretKeySpec key = new SecretKeySpec(KEY_BYTES, ""AES"");
        final Cipher cipher = Cipher.getInstance(""AES"");
        cipher.init(Cipher.DECRYPT_MODE, key);
        final byte[] decoded = decode(encryptedKey);
        final byte[] plainText = new byte[cipher.getOutputSize(decoded.length)];
        int ptLength = cipher.update(decoded, 0, decoded.length, plainText, 0);
        ptLength += cipher.doFinal(plainText, ptLength);
        return new String(plainText, StandardCharsets.UTF_8).substring(0, ptLength);
    }","  public void test0()  throws Throwable  {
      DefaultCryptor defaultCryptor0 = new DefaultCryptor();
      try { 
        defaultCryptor0.decrypt(""4:\""|]mWO*m1Rrgmj"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Character : at position 1 is not a valid hexidecimal character
         //
         verifyException(""org.apache.commons.vfs2.util.DefaultCryptor"", e);
      }
  }"
822,"    public String decrypt(final String encryptedKey) throws Exception {
        final SecretKeySpec key = new SecretKeySpec(KEY_BYTES, ""AES"");
        final Cipher cipher = Cipher.getInstance(""AES"");
        cipher.init(Cipher.DECRYPT_MODE, key);
        final byte[] decoded = decode(encryptedKey);
        final byte[] plainText = new byte[cipher.getOutputSize(decoded.length)];
        int ptLength = cipher.update(decoded, 0, decoded.length, plainText, 0);
        ptLength += cipher.doFinal(plainText, ptLength);
        return new String(plainText, StandardCharsets.UTF_8).substring(0, ptLength);
    }","  public void test1()  throws Throwable  {
      DefaultCryptor defaultCryptor0 = new DefaultCryptor();
      try { 
        defaultCryptor0.decrypt(""ACwB"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Character w at position 2 is not a valid hexidecimal character
         //
         verifyException(""org.apache.commons.vfs2.util.DefaultCryptor"", e);
      }
  }"
823,"    public String decrypt(final String encryptedKey) throws Exception {
        final SecretKeySpec key = new SecretKeySpec(KEY_BYTES, ""AES"");
        final Cipher cipher = Cipher.getInstance(""AES"");
        cipher.init(Cipher.DECRYPT_MODE, key);
        final byte[] decoded = decode(encryptedKey);
        final byte[] plainText = new byte[cipher.getOutputSize(decoded.length)];
        int ptLength = cipher.update(decoded, 0, decoded.length, plainText, 0);
        ptLength += cipher.doFinal(plainText, ptLength);
        return new String(plainText, StandardCharsets.UTF_8).substring(0, ptLength);
    }","  public void test2()  throws Throwable  {
      DefaultCryptor defaultCryptor0 = new DefaultCryptor();
      String string0 = defaultCryptor0.decrypt("""");
}"
824,"    public String encrypt(final String plainKey) throws Exception {
        final byte[] input = plainKey.getBytes(StandardCharsets.UTF_8);
        final SecretKeySpec key = new SecretKeySpec(KEY_BYTES, ""AES"");

        final Cipher cipher = Cipher.getInstance(""AES"");

        // encryption pass
        cipher.init(Cipher.ENCRYPT_MODE, key);

        final byte[] cipherText = new byte[cipher.getOutputSize(input.length)];
        int ctLength = cipher.update(input, 0, input.length, cipherText, 0);
        ctLength += cipher.doFinal(cipherText, ctLength);
        return encode(cipherText);
    }","  public void test3()  throws Throwable  {
      DefaultCryptor defaultCryptor0 = new DefaultCryptor();
      try { 
        defaultCryptor0.encrypt((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.DefaultCryptor"", e);
      }
  }"
825,"    public String decrypt(final String encryptedKey) throws Exception {
        final SecretKeySpec key = new SecretKeySpec(KEY_BYTES, ""AES"");
        final Cipher cipher = Cipher.getInstance(""AES"");
        cipher.init(Cipher.DECRYPT_MODE, key);
        final byte[] decoded = decode(encryptedKey);
        final byte[] plainText = new byte[cipher.getOutputSize(decoded.length)];
        int ptLength = cipher.update(decoded, 0, decoded.length, plainText, 0);
        ptLength += cipher.doFinal(plainText, ptLength);
        return new String(plainText, StandardCharsets.UTF_8).substring(0, ptLength);
    }","  public void test4()  throws Throwable  {
      DefaultCryptor defaultCryptor0 = new DefaultCryptor();
      try { 
        defaultCryptor0.decrypt(""93"");
        fail(""Expecting exception: IllegalBlockSizeException"");
      } catch(IllegalBlockSizeException e) {
      }
  }"
826,"    public String decrypt(final String encryptedKey) throws Exception {
        final SecretKeySpec key = new SecretKeySpec(KEY_BYTES, ""AES"");
        final Cipher cipher = Cipher.getInstance(""AES"");
        cipher.init(Cipher.DECRYPT_MODE, key);
        final byte[] decoded = decode(encryptedKey);
        final byte[] plainText = new byte[cipher.getOutputSize(decoded.length)];
        int ptLength = cipher.update(decoded, 0, decoded.length, plainText, 0);
        ptLength += cipher.doFinal(plainText, ptLength);
        return new String(plainText, StandardCharsets.UTF_8).substring(0, ptLength);
    }","  public void test5()  throws Throwable  {
      DefaultCryptor defaultCryptor0 = new DefaultCryptor();
      try { 
        defaultCryptor0.decrypt((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.DefaultCryptor"", e);
      }
  }"
827,"    public String decrypt(final String encryptedKey) throws Exception {
        final SecretKeySpec key = new SecretKeySpec(KEY_BYTES, ""AES"");
        final Cipher cipher = Cipher.getInstance(""AES"");
        cipher.init(Cipher.DECRYPT_MODE, key);
        final byte[] decoded = decode(encryptedKey);
        final byte[] plainText = new byte[cipher.getOutputSize(decoded.length)];
        int ptLength = cipher.update(decoded, 0, decoded.length, plainText, 0);
        ptLength += cipher.doFinal(plainText, ptLength);
        return new String(plainText, StandardCharsets.UTF_8).substring(0, ptLength);
    }","  public void test6()  throws Throwable  {
      DefaultCryptor defaultCryptor0 = new DefaultCryptor();
      try { 
        defaultCryptor0.decrypt(""574"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The given string must have even number of hex chars.
         //
         verifyException(""org.apache.commons.vfs2.util.DefaultCryptor"", e);
      }
  }"
828,"    public String decrypt(final String encryptedKey) throws Exception {
        final SecretKeySpec key = new SecretKeySpec(KEY_BYTES, ""AES"");
        final Cipher cipher = Cipher.getInstance(""AES"");
        cipher.init(Cipher.DECRYPT_MODE, key);
        final byte[] decoded = decode(encryptedKey);
        final byte[] plainText = new byte[cipher.getOutputSize(decoded.length)];
        int ptLength = cipher.update(decoded, 0, decoded.length, plainText, 0);
        ptLength += cipher.doFinal(plainText, ptLength);
        return new String(plainText, StandardCharsets.UTF_8).substring(0, ptLength);
    }","  public void test7()  throws Throwable  {
      DefaultCryptor defaultCryptor0 = new DefaultCryptor();
      String string0 = defaultCryptor0.decrypt(""51EC5276F1A499CB677BE7419530CD60A453E1379286CB06D13C155FBC78A74F1CB1C12EDF88EFBC21F13347EBFC435A"");
}"
829,"    public String encrypt(final String plainKey) throws Exception {
        final byte[] input = plainKey.getBytes(StandardCharsets.UTF_8);
        final SecretKeySpec key = new SecretKeySpec(KEY_BYTES, ""AES"");

        final Cipher cipher = Cipher.getInstance(""AES"");

        // encryption pass
        cipher.init(Cipher.ENCRYPT_MODE, key);

        final byte[] cipherText = new byte[cipher.getOutputSize(input.length)];
        int ctLength = cipher.update(input, 0, input.length, cipherText, 0);
        ctLength += cipher.doFinal(cipherText, ctLength);
        return encode(cipherText);
    }","  public void test8()  throws Throwable  {
      DefaultCryptor defaultCryptor0 = new DefaultCryptor();
      String string0 = defaultCryptor0.encrypt(""Crbz"");
}"
830,"    public String getName() {
        return name;
    }","  public void test0()  throws Throwable  {
      OsFamily osFamily0 = new OsFamily((String) null);
      String string0 = osFamily0.getName();
}"
831,"    public String getName() {
        return name;
    }","  public void test1()  throws Throwable  {
      OsFamily[] osFamilyArray0 = new OsFamily[2];
      OsFamily osFamily0 = new OsFamily("""", osFamilyArray0);
      osFamilyArray0[1] = osFamily0;
      String string0 = osFamilyArray0[1].getName();
}"
832,"    public OsFamily[] getFamilies() {
        return families;
    }","  public void test2()  throws Throwable  {
      OsFamily[] osFamilyArray0 = new OsFamily[2];
      OsFamily osFamily0 = new OsFamily(""D.72CQ5"", osFamilyArray0);
      OsFamily[] osFamilyArray1 = osFamily0.getFamilies();
}"
833,"    public OsFamily[] getFamilies() {
        return families;
    }","  public void test3()  throws Throwable  {
      OsFamily osFamily0 = new OsFamily(""/~:%mfvHuq=GB\""i"");
      OsFamily[] osFamilyArray0 = osFamily0.getFamilies();
}"
834,"    public String getName() {
        return name;
    }","  public void test4()  throws Throwable  {
      OsFamily osFamily0 = new OsFamily(""/~:%mfvHuq=GB\""i"");
      String string0 = osFamily0.getName();
}"
835,"    public OsFamily[] getFamilies() {
        return families;
    }","  public void test5()  throws Throwable  {
      OsFamily osFamily0 = new OsFamily("""", (OsFamily[]) null);
      OsFamily[] osFamilyArray0 = osFamily0.getFamilies();
}"
836,"    public Integer makeWritable(final boolean writable, final boolean ownerOnly) {
        final EnumMap<Type, Boolean> map = new EnumMap<>(Type.class);
        map.put(Type.UserWritable, writable);
        if (!ownerOnly) {
            map.put(Type.GroupWritable, writable);
            map.put(Type.OtherWritable, writable);
        }
        return this.computeNewPermissions(map);
    }","  public void test0()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(32, true, false);
      Integer integer0 = posixPermissions0.makeWritable(true, false);
}"
837,"    public boolean isExecutable() {
        if (this.isOwner) {
            return this.get(Type.UserExecutable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupExecutable);
        }
        return this.get(Type.OtherExecutable);
    }","  public void test1()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-1528), false, false);
      Integer integer0 = posixPermissions0.makeReadable(true, false);
}"
838,"    public Integer makeReadable(final boolean readable, final boolean ownerOnly) {
        final EnumMap<Type, Boolean> map = new EnumMap<>(Type.class);
        map.put(Type.UserReadable, readable);
        if (!ownerOnly) {
            map.put(Type.GroupReadable, readable);
            map.put(Type.OtherReadable, readable);
        }
        return this.computeNewPermissions(map);
    }","  public void test2()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-1528), false, false);
      Integer integer0 = posixPermissions0.makeReadable(true, false);
}"
839,"    public boolean isExecutable() {
        if (this.isOwner) {
            return this.get(Type.UserExecutable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupExecutable);
        }
        return this.get(Type.OtherExecutable);
    }","  public void test3()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-1723), true, true);
      int int0 = posixPermissions0.makeExecutable(true, false);
}"
840,"    public int makeExecutable(final boolean executable, final boolean ownerOnly) {
        final EnumMap<Type, Boolean> map = new EnumMap<>(Type.class);
        map.put(Type.UserExecutable, executable);
        if (!ownerOnly) {
            map.put(Type.GroupExecutable, executable);
            map.put(Type.OtherExecutable, executable);
        }
        return this.computeNewPermissions(map);
    }","  public void test4()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-1723), true, true);
      int int0 = posixPermissions0.makeExecutable(true, false);
}"
841,"    public int getPermissions() {
        return this.permissions;
    }","  public void test5()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-1723), true, true);
      int int0 = posixPermissions0.makeExecutable(true, false);
}"
842,"    public Integer makeWritable(final boolean writable, final boolean ownerOnly) {
        final EnumMap<Type, Boolean> map = new EnumMap<>(Type.class);
        map.put(Type.UserWritable, writable);
        if (!ownerOnly) {
            map.put(Type.GroupWritable, writable);
            map.put(Type.OtherWritable, writable);
        }
        return this.computeNewPermissions(map);
    }","  public void test6()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(0, false, false);
      Integer integer0 = posixPermissions0.makeWritable(false, false);
}"
843,"    public boolean isExecutable() {
        if (this.isOwner) {
            return this.get(Type.UserExecutable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupExecutable);
        }
        return this.get(Type.OtherExecutable);
    }","  public void test7()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-578), true, true);
      Integer integer0 = posixPermissions0.makeWritable(true, true);
}"
844,"    public Integer makeWritable(final boolean writable, final boolean ownerOnly) {
        final EnumMap<Type, Boolean> map = new EnumMap<>(Type.class);
        map.put(Type.UserWritable, writable);
        if (!ownerOnly) {
            map.put(Type.GroupWritable, writable);
            map.put(Type.OtherWritable, writable);
        }
        return this.computeNewPermissions(map);
    }","  public void test8()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-578), true, true);
      Integer integer0 = posixPermissions0.makeWritable(true, true);
}"
845,"    public boolean isReadable() {
        if (this.isOwner) {
            return this.get(Type.UserReadable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupReadable);
        }
        return this.get(Type.OtherReadable);
    }","  public void test9()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(4, false, true);
      Integer integer0 = posixPermissions0.makeReadable(false, true);
}"
846,"    public Integer makeReadable(final boolean readable, final boolean ownerOnly) {
        final EnumMap<Type, Boolean> map = new EnumMap<>(Type.class);
        map.put(Type.UserReadable, readable);
        if (!ownerOnly) {
            map.put(Type.GroupReadable, readable);
            map.put(Type.OtherReadable, readable);
        }
        return this.computeNewPermissions(map);
    }","  public void test10()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(4, false, true);
      Integer integer0 = posixPermissions0.makeReadable(false, true);
}"
847,"    public Integer makeReadable(final boolean readable, final boolean ownerOnly) {
        final EnumMap<Type, Boolean> map = new EnumMap<>(Type.class);
        map.put(Type.UserReadable, readable);
        if (!ownerOnly) {
            map.put(Type.GroupReadable, readable);
            map.put(Type.OtherReadable, readable);
        }
        return this.computeNewPermissions(map);
    }","  public void test11()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(0, false, false);
      Integer integer0 = posixPermissions0.makeReadable(false, false);
}"
848,"    public int makeExecutable(final boolean executable, final boolean ownerOnly) {
        final EnumMap<Type, Boolean> map = new EnumMap<>(Type.class);
        map.put(Type.UserExecutable, executable);
        if (!ownerOnly) {
            map.put(Type.GroupExecutable, executable);
            map.put(Type.OtherExecutable, executable);
        }
        return this.computeNewPermissions(map);
    }","  public void test12()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(0, false, true);
      int int0 = posixPermissions0.makeExecutable(false, true);
}"
849,"    public int getPermissions() {
        return this.permissions;
    }","  public void test13()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(0, false, true);
      int int0 = posixPermissions0.getPermissions();
}"
850,"    public int getPermissions() {
        return this.permissions;
    }","  public void test14()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(3, true, true);
      int int0 = posixPermissions0.getPermissions();
}"
851,,"  public void test15()  throws Throwable  {
      PosixPermissions.Type posixPermissions_Type0 = PosixPermissions.Type.GroupReadable;
      int int0 = posixPermissions_Type0.getMask();
}"
852,"    public Integer makeWritable(final boolean writable, final boolean ownerOnly) {
        final EnumMap<Type, Boolean> map = new EnumMap<>(Type.class);
        map.put(Type.UserWritable, writable);
        if (!ownerOnly) {
            map.put(Type.GroupWritable, writable);
            map.put(Type.OtherWritable, writable);
        }
        return this.computeNewPermissions(map);
    }","  public void test16()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(32, true, true);
      Integer integer0 = posixPermissions0.makeWritable(false, false);
}"
853,"    public boolean isReadable() {
        if (this.isOwner) {
            return this.get(Type.UserReadable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupReadable);
        }
        return this.get(Type.OtherReadable);
    }","  public void test17()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(32, true, true);
      Integer integer0 = posixPermissions0.makeWritable(false, false);
}"
854,"    public boolean isExecutable() {
        if (this.isOwner) {
            return this.get(Type.UserExecutable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupExecutable);
        }
        return this.get(Type.OtherExecutable);
    }","  public void test18()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-57), false, false);
      Integer integer0 = posixPermissions0.makeReadable(false, false);
}"
855,"    public Integer makeReadable(final boolean readable, final boolean ownerOnly) {
        final EnumMap<Type, Boolean> map = new EnumMap<>(Type.class);
        map.put(Type.UserReadable, readable);
        if (!ownerOnly) {
            map.put(Type.GroupReadable, readable);
            map.put(Type.OtherReadable, readable);
        }
        return this.computeNewPermissions(map);
    }","  public void test19()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-57), false, false);
      Integer integer0 = posixPermissions0.makeReadable(false, false);
}"
856,"    public int getPermissions() {
        return this.permissions;
    }","  public void test20()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, false, true);
      boolean boolean0 = posixPermissions0.isWritable();
}"
857,"    public boolean isWritable() {
        if (this.isOwner) {
            return this.get(Type.UserWritable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupWritable);
        }
        return this.get(Type.OtherWritable);
    }","  public void test21()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, false, true);
      boolean boolean0 = posixPermissions0.isWritable();
}"
858,"    public int getPermissions() {
        return this.permissions;
    }","  public void test22()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, true, true);
      boolean boolean0 = posixPermissions0.isWritable();
}"
859,"    public boolean isWritable() {
        if (this.isOwner) {
            return this.get(Type.UserWritable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupWritable);
        }
        return this.get(Type.OtherWritable);
    }","  public void test23()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, true, true);
      boolean boolean0 = posixPermissions0.isWritable();
}"
860,"    public boolean isExecutable() {
        if (this.isOwner) {
            return this.get(Type.UserExecutable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupExecutable);
        }
        return this.get(Type.OtherExecutable);
    }","  public void test24()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, true, true);
      boolean boolean0 = posixPermissions0.isWritable();
}"
861,"    public boolean isReadable() {
        if (this.isOwner) {
            return this.get(Type.UserReadable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupReadable);
        }
        return this.get(Type.OtherReadable);
    }","  public void test25()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, true, true);
      boolean boolean0 = posixPermissions0.isWritable();
}"
862,"    public boolean isExecutable() {
        if (this.isOwner) {
            return this.get(Type.UserExecutable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupExecutable);
        }
        return this.get(Type.OtherExecutable);
    }","  public void test26()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-57), false, false);
      boolean boolean0 = posixPermissions0.isWritable();
}"
863,"    public boolean isWritable() {
        if (this.isOwner) {
            return this.get(Type.UserWritable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupWritable);
        }
        return this.get(Type.OtherWritable);
    }","  public void test27()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-57), false, false);
      boolean boolean0 = posixPermissions0.isWritable();
}"
864,"    public boolean isWritable() {
        if (this.isOwner) {
            return this.get(Type.UserWritable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupWritable);
        }
        return this.get(Type.OtherWritable);
    }","  public void test28()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, false, true);
      boolean boolean0 = posixPermissions0.isReadable();
}"
865,"    public int getPermissions() {
        return this.permissions;
    }","  public void test29()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, false, true);
      boolean boolean0 = posixPermissions0.isReadable();
}"
866,"    public boolean isReadable() {
        if (this.isOwner) {
            return this.get(Type.UserReadable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupReadable);
        }
        return this.get(Type.OtherReadable);
    }","  public void test30()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, false, true);
      boolean boolean0 = posixPermissions0.isReadable();
}"
867,"    public boolean isExecutable() {
        if (this.isOwner) {
            return this.get(Type.UserExecutable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupExecutable);
        }
        return this.get(Type.OtherExecutable);
    }","  public void test31()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-57), false, false);
      boolean boolean0 = posixPermissions0.isReadable();
}"
868,"    public boolean isReadable() {
        if (this.isOwner) {
            return this.get(Type.UserReadable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupReadable);
        }
        return this.get(Type.OtherReadable);
    }","  public void test32()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-57), false, false);
      boolean boolean0 = posixPermissions0.isReadable();
}"
869,"    public int getPermissions() {
        return this.permissions;
    }","  public void test33()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, false, true);
      boolean boolean0 = posixPermissions0.isExecutable();
}"
870,"    public boolean isWritable() {
        if (this.isOwner) {
            return this.get(Type.UserWritable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupWritable);
        }
        return this.get(Type.OtherWritable);
    }","  public void test34()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, false, true);
      boolean boolean0 = posixPermissions0.isExecutable();
}"
871,"    public boolean isExecutable() {
        if (this.isOwner) {
            return this.get(Type.UserExecutable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupExecutable);
        }
        return this.get(Type.OtherExecutable);
    }","  public void test35()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, false, true);
      boolean boolean0 = posixPermissions0.isExecutable();
}"
872,"    public boolean isReadable() {
        if (this.isOwner) {
            return this.get(Type.UserReadable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupReadable);
        }
        return this.get(Type.OtherReadable);
    }","  public void test36()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(32, true, true);
      boolean boolean0 = posixPermissions0.isExecutable();
}"
873,"    public int getPermissions() {
        return this.permissions;
    }","  public void test37()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(32, true, true);
      boolean boolean0 = posixPermissions0.isExecutable();
}"
874,"    public boolean isExecutable() {
        if (this.isOwner) {
            return this.get(Type.UserExecutable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupExecutable);
        }
        return this.get(Type.OtherExecutable);
    }","  public void test38()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(32, true, true);
      boolean boolean0 = posixPermissions0.isExecutable();
}"
875,"    public boolean isExecutable() {
        if (this.isOwner) {
            return this.get(Type.UserExecutable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupExecutable);
        }
        return this.get(Type.OtherExecutable);
    }","  public void test39()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-57), false, false);
      boolean boolean0 = posixPermissions0.isExecutable();
}"
876,"    public boolean isWritable() {
        if (this.isOwner) {
            return this.get(Type.UserWritable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupWritable);
        }
        return this.get(Type.OtherWritable);
    }","  public void test40()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-57), false, false);
      boolean boolean0 = posixPermissions0.isExecutable();
}"
877,"    public boolean isExecutable() {
        if (this.isOwner) {
            return this.get(Type.UserExecutable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupExecutable);
        }
        return this.get(Type.OtherExecutable);
    }","  public void test41()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, true, true);
      boolean boolean0 = posixPermissions0.isReadable();
}"
878,"    public boolean isReadable() {
        if (this.isOwner) {
            return this.get(Type.UserReadable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupReadable);
        }
        return this.get(Type.OtherReadable);
    }","  public void test42()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, true, true);
      boolean boolean0 = posixPermissions0.isReadable();
}"
879,"    public boolean isWritable() {
        if (this.isOwner) {
            return this.get(Type.UserWritable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupWritable);
        }
        return this.get(Type.OtherWritable);
    }","  public void test43()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, true, true);
      boolean boolean0 = posixPermissions0.isReadable();
}"
880,"    public int getPermissions() {
        return this.permissions;
    }","  public void test44()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, true, true);
      boolean boolean0 = posixPermissions0.isReadable();
}"
881,"    public int makeExecutable(final boolean executable, final boolean ownerOnly) {
        final EnumMap<Type, Boolean> map = new EnumMap<>(Type.class);
        map.put(Type.UserExecutable, executable);
        if (!ownerOnly) {
            map.put(Type.GroupExecutable, executable);
            map.put(Type.OtherExecutable, executable);
        }
        return this.computeNewPermissions(map);
    }","  public void test45()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, true, true);
      int int0 = posixPermissions0.makeExecutable(true, true);
}"
882,"    public boolean isWritable() {
        if (this.isOwner) {
            return this.get(Type.UserWritable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupWritable);
        }
        return this.get(Type.OtherWritable);
    }","  public void test46()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, true, true);
      int int0 = posixPermissions0.makeExecutable(true, true);
}"
883,"    public int getPermissions() {
        return this.permissions;
    }","  public void test47()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-57), false, false);
      int int0 = posixPermissions0.getPermissions();
}"
884,"    public boolean isWritable() {
        if (this.isOwner) {
            return this.get(Type.UserWritable);
        }
        if (this.isInGroup) {
            return this.get(Type.GroupWritable);
        }
        return this.get(Type.OtherWritable);
    }","  public void test48()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-57), false, false);
      int int0 = posixPermissions0.getPermissions();
}"
885,,"  public void test0()  throws Throwable  {
      RandomAccessMode[] randomAccessModeArray0 = RandomAccessMode.values();
}"
886,"    public boolean requestWrite() {
        return write;
    }","  public void test1()  throws Throwable  {
      RandomAccessMode randomAccessMode0 = RandomAccessMode.valueOf(""READWRITE"");
}"
887,"    public String getModeString() {
        if (requestRead()) {
            if (requestWrite()) {
                return ""rw""; // NON-NLS
            }
            return ""r""; // NON-NLS
        }
        if (requestWrite()) {
            return ""w""; // NON-NLS
        }

        return """";
    }","  public void test2()  throws Throwable  {
      RandomAccessMode randomAccessMode0 = RandomAccessMode.valueOf(""READ"");
}"
888,"    public boolean requestWrite() {
        return write;
    }","  public void test3()  throws Throwable  {
      RandomAccessMode randomAccessMode0 = RandomAccessMode.READWRITE;
      boolean boolean0 = randomAccessMode0.requestWrite();
}"
889,"    public boolean requestRead() {
        return read;
    }","  public void test4()  throws Throwable  {
      RandomAccessMode randomAccessMode0 = RandomAccessMode.READ;
      boolean boolean0 = randomAccessMode0.requestRead();
}"
890,"    public boolean requestWrite() {
        return write;
    }","  public void test5()  throws Throwable  {
      RandomAccessMode randomAccessMode0 = RandomAccessMode.READ;
      boolean boolean0 = randomAccessMode0.requestWrite();
}"
891,"    public String getModeString() {
        if (requestRead()) {
            if (requestWrite()) {
                return ""rw""; // NON-NLS
            }
            return ""r""; // NON-NLS
        }
        if (requestWrite()) {
            return ""w""; // NON-NLS
        }

        return """";
    }","  public void test6()  throws Throwable  {
      RandomAccessMode randomAccessMode0 = RandomAccessMode.READWRITE;
      String string0 = randomAccessMode0.getModeString();
}"
892,"    public String getModeString() {
        if (requestRead()) {
            if (requestWrite()) {
                return ""rw""; // NON-NLS
            }
            return ""r""; // NON-NLS
        }
        if (requestWrite()) {
            return ""w""; // NON-NLS
        }

        return """";
    }","  public void test7()  throws Throwable  {
      RandomAccessMode randomAccessMode0 = RandomAccessMode.READ;
      String string0 = randomAccessMode0.getModeString();
}"
893,"    public static String toString(final char[] data) {
        if (data == null) {
            return null;
        }

        return new String(data);
    }","  public void test0()  throws Throwable  {
      char[] charArray0 = UserAuthenticatorUtils.toChar("""");
      String string0 = UserAuthenticatorUtils.toString(charArray0);
}"
894,"    public static char[] getData(final UserAuthenticationData data, final UserAuthenticationData.Type type,
            final char[] overriddenValue) {
        if (overriddenValue != null) {
            return overriddenValue;
        }

        if (data == null) {
            return null;
        }

        return data.getData(type);
    }","  public void test1()  throws Throwable  {
      UserAuthenticationData.Type userAuthenticationData_Type0 = UserAuthenticationData.DOMAIN;
      char[] charArray0 = UserAuthenticatorUtils.toChar("""");
      char[] charArray1 = UserAuthenticatorUtils.getData((UserAuthenticationData) null, userAuthenticationData_Type0, charArray0);
}"
895,"    public static char[] getData(final UserAuthenticationData data, final UserAuthenticationData.Type type,
            final char[] overriddenValue) {
        if (overriddenValue != null) {
            return overriddenValue;
        }

        if (data == null) {
            return null;
        }

        return data.getData(type);
    }","  public void test2()  throws Throwable  {
      UserAuthenticationData.Type[] userAuthenticationData_TypeArray0 = new UserAuthenticationData.Type[8];
      UserAuthenticationData userAuthenticationData0 = new UserAuthenticationData();
      // Undeclared exception!
      try { 
        UserAuthenticatorUtils.getData(userAuthenticationData0, userAuthenticationData_TypeArray0[1], (char[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.TreeMap"", e);
      }
  }"
896,"    public static UserAuthenticationData authenticate(final FileSystemOptions options,
        final UserAuthenticationData.Type[] authenticatorTypes) {
        final UserAuthenticator auth = DefaultFileSystemConfigBuilder.getInstance().getUserAuthenticator(options);
        return authenticate(auth, authenticatorTypes);
    }","  public void test3()  throws Throwable  {
      StaticUserAuthenticator staticUserAuthenticator0 = new StaticUserAuthenticator(""org.apache.commons.vfs2.util.UserAuthenticatorUtils"", ""org.apache.commons.vfs2.util.UserAuthenticatorUtils"", ""z)"");
      // Undeclared exception!
      try { 
        UserAuthenticatorUtils.authenticate((UserAuthenticator) staticUserAuthenticator0, (UserAuthenticationData.Type[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.auth.StaticUserAuthenticator"", e);
      }
  }"
897,"    public static char[] toChar(final String string) {
        if (string == null) {
            return null;
        }

        return string.toCharArray();
    }","  public void test4()  throws Throwable  {
      char[] charArray0 = UserAuthenticatorUtils.toChar((String) null);
}"
898,"    public static UserAuthenticationData authenticate(final FileSystemOptions options,
        final UserAuthenticationData.Type[] authenticatorTypes) {
        final UserAuthenticator auth = DefaultFileSystemConfigBuilder.getInstance().getUserAuthenticator(options);
        return authenticate(auth, authenticatorTypes);
    }","  public void test5()  throws Throwable  {
      UserAuthenticationData.Type[] userAuthenticationData_TypeArray0 = new UserAuthenticationData.Type[5];
      UserAuthenticationData userAuthenticationData0 = UserAuthenticatorUtils.authenticate((UserAuthenticator) null, userAuthenticationData_TypeArray0);
}"
899,"    public static String toString(final char[] data) {
        if (data == null) {
            return null;
        }

        return new String(data);
    }","  public void test6()  throws Throwable  {
      String string0 = UserAuthenticatorUtils.toString((char[]) null);
}"
900,"    public static String toString(final char[] data) {
        if (data == null) {
            return null;
        }

        return new String(data);
    }","  public void test7()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = UserAuthenticatorUtils.toString(charArray0);
}"
901,"    public static void cleanup(final UserAuthenticationData authData) {
        if (authData != null) {
            authData.cleanup();
        }
    }","  public void test8()  throws Throwable  {
      UserAuthenticationData userAuthenticationData0 = new UserAuthenticationData();
      UserAuthenticatorUtils.cleanup(userAuthenticationData0);
  }"
902,"    public static void cleanup(final UserAuthenticationData authData) {
        if (authData != null) {
            authData.cleanup();
        }
    }","  public void test9()  throws Throwable  {
      UserAuthenticatorUtils.cleanup((UserAuthenticationData) null);
  }"
903,"    public static char[] toChar(final String string) {
        if (string == null) {
            return null;
        }

        return string.toCharArray();
    }","  public void test10()  throws Throwable  {
      char[] charArray0 = UserAuthenticatorUtils.toChar(""\u0000\u0000\u0000\u0000\u0000\u0000"");
}"
904,"    public static UserAuthenticationData authenticate(final FileSystemOptions options,
        final UserAuthenticationData.Type[] authenticatorTypes) {
        final UserAuthenticator auth = DefaultFileSystemConfigBuilder.getInstance().getUserAuthenticator(options);
        return authenticate(auth, authenticatorTypes);
    }","  public void test11()  throws Throwable  {
      StaticUserAuthenticator staticUserAuthenticator0 = new StaticUserAuthenticator(""\u0000\u0000\u0000\u0000\u0000\u0000"", ""\u0000\u0000\u0000\u0000\u0000\u0000"", ""\u0000\u0000\u0000\u0000\u0000\u0000"");
      UserAuthenticationData.Type[] userAuthenticationData_TypeArray0 = new UserAuthenticationData.Type[9];
      UserAuthenticationData userAuthenticationData0 = UserAuthenticatorUtils.authenticate((UserAuthenticator) staticUserAuthenticator0, userAuthenticationData_TypeArray0);
}"
905,"    public static char[] getData(final UserAuthenticationData data, final UserAuthenticationData.Type type,
            final char[] overriddenValue) {
        if (overriddenValue != null) {
            return overriddenValue;
        }

        if (data == null) {
            return null;
        }

        return data.getData(type);
    }","  public void test12()  throws Throwable  {
      StaticUserAuthenticator staticUserAuthenticator0 = new StaticUserAuthenticator((String) null, (String) null, (String) null);
      UserAuthenticationData.Type[] userAuthenticationData_TypeArray0 = new UserAuthenticationData.Type[8];
      UserAuthenticationData userAuthenticationData0 = staticUserAuthenticator0.requestAuthentication(userAuthenticationData_TypeArray0);
      char[] charArray0 = UserAuthenticatorUtils.getData(userAuthenticationData0, userAuthenticationData0.PASSWORD, (char[]) null);
}"
906,"    public static char[] getData(final UserAuthenticationData data, final UserAuthenticationData.Type type,
            final char[] overriddenValue) {
        if (overriddenValue != null) {
            return overriddenValue;
        }

        if (data == null) {
            return null;
        }

        return data.getData(type);
    }","  public void test13()  throws Throwable  {
      char[] charArray0 = new char[6];
      UserAuthenticationData.Type[] userAuthenticationData_TypeArray0 = new UserAuthenticationData.Type[9];
      UserAuthenticationData userAuthenticationData0 = new UserAuthenticationData();
      char[] charArray1 = UserAuthenticatorUtils.getData(userAuthenticationData0, userAuthenticationData_TypeArray0[1], charArray0);
}"
907,"    public static char[] getData(final UserAuthenticationData data, final UserAuthenticationData.Type type,
            final char[] overriddenValue) {
        if (overriddenValue != null) {
            return overriddenValue;
        }

        if (data == null) {
            return null;
        }

        return data.getData(type);
    }","  public void test14()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      UserAuthenticationData.Type[] userAuthenticationData_TypeArray0 = new UserAuthenticationData.Type[6];
      UserAuthenticationData userAuthenticationData0 = UserAuthenticatorUtils.authenticate(fileSystemOptions0, userAuthenticationData_TypeArray0);
      char[] charArray0 = UserAuthenticatorUtils.getData((UserAuthenticationData) null, userAuthenticationData0.USERNAME, (char[]) null);
}"
908,"    public static boolean isFamily(final String family) {
        return isOs(family, null, null, null);
    }","  public void test0()  throws Throwable  {
      boolean boolean0 = Os.isFamily(""unix"");
}"
909,"    public static boolean isOs(final String family, final String name, final String arch, final String version) {
        return isOs(getFamily(family), name, arch, version);
    }","  public void test1()  throws Throwable  {
      boolean boolean0 = Os.isOs(""unix"", ""unix"", ""t/.n\""O"", ""unix"");
}"
910,"    public static boolean isOs(final String family, final String name, final String arch, final String version) {
        return isOs(getFamily(family), name, arch, version);
    }","  public void test2()  throws Throwable  {
      boolean boolean0 = Os.isOs(""unix"", ""unix"", ""unix"", ""org.apacheYpommony.vfs2.utilQ(sfa!ily"");
}"
911,"    public static boolean isFamily(final String family) {
        return isOs(family, null, null, null);
    }","  public void test3()  throws Throwable  {
      boolean boolean0 = Os.isFamily(""unHx"");
}"
912,"    public static boolean isFamily(final String family) {
        return isOs(family, null, null, null);
    }","  public void test4()  throws Throwable  {
      boolean boolean0 = Os.isFamily(""netware"");
}"
913,"    public static boolean isVersion(final String version) {
        return isOs((OsFamily) null, null, null, version);
    }","  public void test5()  throws Throwable  {
      boolean boolean0 = Os.isVersion(""unix"");
}"
914,"    public static boolean isArch(final String arch) {
        return isOs((OsFamily) null, null, arch, null);
    }","  public void test6()  throws Throwable  {
      boolean boolean0 = Os.isArch(""netware"");
}"
915,"    public static boolean isOs(final String family, final String name, final String arch, final String version) {
        return isOs(getFamily(family), name, arch, version);
    }","  public void test7()  throws Throwable  {
      boolean boolean0 = Os.isOs(""unix"", ""org.apacheYpommony.vfs2.utilQ(sfa!ily"", ""unix"", ""unix"");
}"
916,"    public static boolean isName(final String name) {
        return isOs((OsFamily) null, name, null, null);
    }","  public void test8()  throws Throwable  {
      boolean boolean0 = Os.isName(""org.apacheYpommony.vfs2.utilQ(sfa!ily"");
}"
917,"    public static void main(final String[] args) throws Exception {
        if (args.length != 2 || !args[0].equals(""encrypt"")) {
            System.err.println(""Usage: \""EncryptUtil encrypt\"" password"");
            System.err.println(""     password : The clear text password to encrypt"");
            System.exit(0);
        }
        final Cryptor cryptor = CryptorFactory.getCryptor();

        if (args[0].equals(""encrypt"")) {
            System.out.println(cryptor.encrypt(args[1]));
        }
    }","  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        EncryptUtil.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
918,"    public static void main(final String[] args) throws Exception {
        if (args.length != 2 || !args[0].equals(""encrypt"")) {
            System.err.println(""Usage: \""EncryptUtil encrypt\"" password"");
            System.err.println(""     password : The clear text password to encrypt"");
            System.exit(0);
        }
        final Cryptor cryptor = CryptorFactory.getCryptor();

        if (args[0].equals(""encrypt"")) {
            System.out.println(cryptor.encrypt(args[1]));
        }
    }","  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ""encrypt"";
      stringArray0[1] = """";
      EncryptUtil.main(stringArray0);
}"
919,"    public static void main(final String[] args) throws Exception {
        if (args.length != 2 || !args[0].equals(""encrypt"")) {
            System.err.println(""Usage: \""EncryptUtil encrypt\"" password"");
            System.err.println(""     password : The clear text password to encrypt"");
            System.exit(0);
        }
        final Cryptor cryptor = CryptorFactory.getCryptor();

        if (args[0].equals(""encrypt"")) {
            System.out.println(cryptor.encrypt(args[1]));
        }
    }","  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ""encqypt"";
      // Undeclared exception!
      try { 
        EncryptUtil.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
920,"    public static void main(final String[] args) throws Exception {
        if (args.length != 2 || !args[0].equals(""encrypt"")) {
            System.err.println(""Usage: \""EncryptUtil encrypt\"" password"");
            System.err.println(""     password : The clear text password to encrypt"");
            System.exit(0);
        }
        final Cryptor cryptor = CryptorFactory.getCryptor();

        if (args[0].equals(""encrypt"")) {
            System.out.println(cryptor.encrypt(args[1]));
        }
    }","  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ""encrypt"";
      try { 
        EncryptUtil.main(stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.DefaultCryptor"", e);
      }
  }"
921,"    public static void main(final String[] args) throws Exception {
        if (args.length != 2 || !args[0].equals(""encrypt"")) {
            System.err.println(""Usage: \""EncryptUtil encrypt\"" password"");
            System.err.println(""     password : The clear text password to encrypt"");
            System.exit(0);
        }
        final Cryptor cryptor = CryptorFactory.getCryptor();

        if (args[0].equals(""encrypt"")) {
            System.out.println(cryptor.encrypt(args[1]));
        }
    }","  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        EncryptUtil.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
922,"    public static synchronized Cryptor getCryptor() {
        if (instance != null) {
            return instance;
        }

        final String cryptorClass = System.getProperty(CRYPTOR_CLASS);
        if (cryptorClass != null) {
            try {
                final Class<?> clazz = Class.forName(cryptorClass);
                instance = (Cryptor) clazz.newInstance();
                return instance;
            } catch (final Exception ex) {
                throw new RuntimeException(""Unable to create Cryptor "" + cryptorClass, ex);
            }
        }
        instance = new DefaultCryptor();
        return instance;
    }","  public void test0()  throws Throwable  {
      Cryptor cryptor0 = CryptorFactory.getCryptor();
      Cryptor cryptor1 = CryptorFactory.getCryptor();
}"
923,"    public static synchronized void setCryptor(final Cryptor cryptor) {
        instance = cryptor;
    }","  public void test1()  throws Throwable  {
      Cryptor cryptor0 = CryptorFactory.getCryptor();
      CryptorFactory.setCryptor(cryptor0);
  }"
924,"    public static String encodePath(final String unescaped) {
        return encodePath(unescaped, DEFAULT_PROTOCOL_CHARSET);
    }","  public void test0()  throws Throwable  {
      String string0 = URIUtils.encodePath("""", ""data may not be null"");
}"
925,"    public static String encodePath(final String unescaped) {
        return encodePath(unescaped, DEFAULT_PROTOCOL_CHARSET);
    }","  public void test1()  throws Throwable  {
      String string0 = URIUtils.encodePath("">#w"");
}"
926,"    public static String encodePath(final String unescaped) {
        return encodePath(unescaped, DEFAULT_PROTOCOL_CHARSET);
    }","  public void test2()  throws Throwable  {
      String string0 = URIUtils.encodePath("""");
}"
927,"    public static String encodePath(final String unescaped) {
        return encodePath(unescaped, DEFAULT_PROTOCOL_CHARSET);
    }","  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        URIUtils.encodePath((String) null, ""/~vZ40]?9U0G0avO#em"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The string to encode may not be null.
         //
         verifyException(""org.apache.commons.vfs2.util.URIUtils"", e);
      }
  }"
928,"    public static String encodePath(final String unescaped) {
        return encodePath(unescaped, DEFAULT_PROTOCOL_CHARSET);
    }","  public void test4()  throws Throwable  {
      String string0 = URIUtils.encodePath(""5p9MO^XC"", "" ^M@"");
}"
929,"    public static String encodePath(final String unescaped) {
        return encodePath(unescaped, DEFAULT_PROTOCOL_CHARSET);
    }","  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        URIUtils.encodePath(""The Hiearchy.overrideAsNeeded method has been deprecated."", (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // charset may not be null or empty
         //
         verifyException(""org.apache.commons.vfs2.util.URIUtils$EncodingUtils"", e);
      }
  }"
930,"    public static String encodePath(final String unescaped) {
        return encodePath(unescaped, DEFAULT_PROTOCOL_CHARSET);
    }","  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        URIUtils.encodePath((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The string to encode may not be null.
         //
         verifyException(""org.apache.commons.vfs2.util.URIUtils"", e);
      }
  }"
931,"    protected FileListener getListener() throws Exception {
        final FileListener listener = this.listener.get();
        if (listener == null) {
            try (final FileObject fileObject = fs.resolveFile(name)) {
                fileObject.getFileSystem().removeListener(fileObject, this);
            }
        }
        return listener;
    }","  public void test0()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""P#Xuz"", ""Renaming file "", 1, 1, ""P#Xuz"", ""fi=1%mw#7#KQd"", """", fileType0, ""nQ@Q7y `b_oe&EH"");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(genericURLFileName0, ftpsFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, delegateFileObject0);
      DelegateFileObject delegateFileObject1 = (DelegateFileObject)weakRefFileListener0.getListener();
}"
932,"    public static void installListener(final FileObject file, final FileListener listener) {
        final WeakRefFileListener weakListener = new WeakRefFileListener(file, listener);

        file.getFileSystem().addListener(file, new WeakRefFileListener(file, weakListener));
    }","  public void test1()  throws Throwable  {
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject((FileObject) null);
      FileType fileType0 = FileType.IMAGINARY;
      VirtualFileName virtualFileName0 = new VirtualFileName("""", ""Ud4g("", fileType0);
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", ""Ud4g("", (-590), (-590), """", """", """", fileType0, """");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(virtualFileName0, ftpsFileSystem0, (FileObject) null);
      // Undeclared exception!
      try { 
        WeakRefFileListener.installListener(synchronizedFileObject0, delegateFileObject0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DecoratedFileObject"", e);
      }
  }"
933,"    protected FileListener getListener() throws Exception {
        final FileListener listener = this.listener.get();
        if (listener == null) {
            try (final FileObject fileObject = fs.resolveFile(name)) {
                fileObject.getFileSystem().removeListener(fileObject, this);
            }
        }
        return listener;
    }","  public void test2()  throws Throwable  {
      FileType fileType0 = FileType.IMAGINARY;
      VirtualFileName virtualFileName0 = new VirtualFileName(""@@"", ""@@"", fileType0);
      LayeredFileName layeredFileName0 = new LayeredFileName(""@@"", virtualFileName0, ""@@"", fileType0);
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, ""Za]q"", 0, 0, """", ""PAUSED {}"", """", fileType0, (String) null);
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(layeredFileName0, ftpsFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, (FileListener) null);
      try { 
        weakRefFileListener0.getListener();
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Incorrect file system URI \""@@:@@@@!/\"" in name \""@@:@@@@!@@\"", was expecting \""null://Za]q/\"".
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileSystem"", e);
      }
  }"
934,"    protected FileListener getListener() throws Exception {
        final FileListener listener = this.listener.get();
        if (listener == null) {
            try (final FileObject fileObject = fs.resolveFile(name)) {
                fileObject.getFileSystem().removeListener(fileObject, this);
            }
        }
        return listener;
    }","  public void test3()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""`Te]-"", ""`Te]-"", (-1329), (-1329), ""`Te]-"", ""`Te]-"", ""`Te]-"", fileType0, ""`Te]-"");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(genericURLFileName0, ftpFileSystem0, (FileObject) null);
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((FilesCache) null).when(fileSystemManager0).getFilesCache();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileSystemManager0).when(vfsComponentContext0).getFileSystemManager();
      ftpFileSystem0.setContext(vfsComponentContext0);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, (FileListener) null);
      try { 
        weakRefFileListener0.getListener();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No files-cache implementation set.
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileSystem"", e);
      }
  }"
935,"    protected FileListener getListener() throws Exception {
        final FileListener listener = this.listener.get();
        if (listener == null) {
            try (final FileObject fileObject = fs.resolveFile(name)) {
                fileObject.getFileSystem().removeListener(fileObject, this);
            }
        }
        return listener;
    }","  public void test4()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""P#Xuz"", ""P#Xuz"", 1, 1, ""P#Xuz"", ""P#Xuz"", ""P#Xuz"", fileType0, ""P#Xuz"");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(genericURLFileName0, ftpsFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, (FileListener) null);
      try { 
        weakRefFileListener0.getListener();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileSystem"", e);
      }
  }"
936,"    public void fileDeleted(final FileChangeEvent event) throws Exception {
        final FileListener listener = getListener();
        if (listener == null) {
            return;
        }
        listener.fileDeleted(event);
    }","  public void test5()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""PXu"", ""Renaming file "", 1, 1, ""PXu"", ""fi=1%mw#7#KQd"", """", fileType0, """");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(genericURLFileName0, ftpsFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, delegateFileObject0);
      try { 
        weakRefFileListener0.fileDeleted((FileChangeEvent) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.DelegateFileObject"", e);
      }
  }"
937,"    public void fileCreated(final FileChangeEvent event) throws Exception {
        final FileListener listener = getListener();
        if (listener == null) {
            return;
        }
        listener.fileCreated(event);
    }","  public void test6()  throws Throwable  {
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileName virtualFileName0 = new VirtualFileName(""org.apache.commons.compress.archivers.tar.TarArchiveStructSparse"", "":7vyil15nRpg+"", fileType0);
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""org.apache.commons.compress.archivers.tar.TarArchiveStructSparse"", "":7vyil15nRpg+"", 4765, 4765, """", """", ""Yv4&jJq"", fileType0, """");
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(virtualFileName0, ftpFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, (FileListener) null);
      FileChangeEvent fileChangeEvent0 = new FileChangeEvent((FileObject) null);
      try { 
        weakRefFileListener0.fileCreated(fileChangeEvent0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Incorrect file system URI \""org.apache.commons.compress.archivers.tar.TarArchiveStructSparse/\"" in name \""org.apache.commons.compress.archivers.tar.TarArchiveStructSparse:7vyil15nRpg+\"", was expecting \""org.apache.commons.compress.archivers.tar.TarArchiveStructSparse://:7vyil15nRpg+Yv4&jJq?\"".
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileSystem"", e);
      }
  }"
938,"    public void fileCreated(final FileChangeEvent event) throws Exception {
        final FileListener listener = getListener();
        if (listener == null) {
            return;
        }
        listener.fileCreated(event);
    }","  public void test7()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""P#Xuz"", ""Renaming file "", 1, 1, ""P#Xuz"", ""fi=1%mw#7#KQd"", """", fileType0, """");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(genericURLFileName0, ftpsFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, delegateFileObject0);
      try { 
        weakRefFileListener0.fileCreated((FileChangeEvent) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.DelegateFileObject"", e);
      }
  }"
939,"    public void fileChanged(final FileChangeEvent event) throws Exception {
        final FileListener listener = getListener();
        if (listener == null) {
            return;
        }
        listener.fileChanged(event);
    }","  public void test8()  throws Throwable  {
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileName virtualFileName0 = new VirtualFileName(""org.apache.commons.compress.archivers.tar.TarArchiveStructSparse"", "":7vyil15nRpg+"", fileType0);
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""org.apache.commons.compress.archivers.tar.TarArchiveStructSparse"", "":7vyil15nRpg+"", 4765, 4765, """", """", ""Yv4&jJq"", fileType0, """");
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(virtualFileName0, ftpFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, (FileListener) null);
      FileChangeEvent fileChangeEvent0 = new FileChangeEvent((FileObject) null);
      try { 
        weakRefFileListener0.fileChanged(fileChangeEvent0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Incorrect file system URI \""org.apache.commons.compress.archivers.tar.TarArchiveStructSparse/\"" in name \""org.apache.commons.compress.archivers.tar.TarArchiveStructSparse:7vyil15nRpg+\"", was expecting \""org.apache.commons.compress.archivers.tar.TarArchiveStructSparse://:7vyil15nRpg+Yv4&jJq?\"".
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileSystem"", e);
      }
  }"
940,"    public void fileChanged(final FileChangeEvent event) throws Exception {
        final FileListener listener = getListener();
        if (listener == null) {
            return;
        }
        listener.fileChanged(event);
    }","  public void test9()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""P#Xuz"", ""P#Xuz"", 1, 1, ""P#Xuz"", ""P#Xuz"", """", fileType0, """");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(genericURLFileName0, ftpsFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, (FileListener) null);
      FileChangeEvent fileChangeEvent0 = new FileChangeEvent(delegateFileObject0);
      try { 
        weakRefFileListener0.fileChanged(fileChangeEvent0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileSystem"", e);
      }
  }"
941,"    public void fileDeleted(final FileChangeEvent event) throws Exception {
        final FileListener listener = getListener();
        if (listener == null) {
            return;
        }
        listener.fileDeleted(event);
    }","  public void test10()  throws Throwable  {
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""z@Xuk"", ""z@Xuk"", 492, 492, ""z@Xuk"", ""z@Xuk"", ""z@Xuk"", fileType0, ""z@Xuk"");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(genericURLFileName0, ftpsFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, delegateFileObject0);
      FileChangeEvent fileChangeEvent0 = new FileChangeEvent(delegateFileObject0);
      weakRefFileListener0.fileDeleted(fileChangeEvent0);
  }"
942,"    public void fileCreated(final FileChangeEvent event) throws Exception {
        final FileListener listener = getListener();
        if (listener == null) {
            return;
        }
        listener.fileCreated(event);
    }","  public void test11()  throws Throwable  {
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""z@Xuk"", ""z@Xuk"", 492, 492, ""z@Xuk"", ""z@Xuk"", ""z@Xuk"", fileType0, ""z@Xuk"");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(genericURLFileName0, ftpsFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, delegateFileObject0);
      FileChangeEvent fileChangeEvent0 = new FileChangeEvent(delegateFileObject0);
      weakRefFileListener0.fileCreated(fileChangeEvent0);
  }"
943,"    public void fileDeleted(final FileChangeEvent event) throws Exception {
        final FileListener listener = getListener();
        if (listener == null) {
            return;
        }
        listener.fileDeleted(event);
    }","  public void test12()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FileType fileType0 = FileType.IMAGINARY;
      VirtualFileName virtualFileName0 = new VirtualFileName(""GS|V"", ""org.aache.ommons.vfs2.til.WeakRefFileListener"", fileType0);
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, "";"", (-1361), 0, ""org.apache.commons.vfs2.util.WeakRefFileListener"", "".EBR,"", ""org.aache.ommons.vfs2.til.WeakRefFileListener"", fileType0, (String) null);
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(virtualFileName0, ftpFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, (FileListener) null);
      FileChangeEvent fileChangeEvent0 = new FileChangeEvent((FileObject) null);
      try { 
        weakRefFileListener0.fileDeleted(fileChangeEvent0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Incorrect file system URI \""GS|V/\"" in name \""GS|Vorg.aache.ommons.vfs2.til.WeakRefFileListener\"", was expecting \""null://org.apache.commons.vfs2.util.WeakRefFileListener:***@;org.aache.ommons.vfs2.til.WeakRefFileListener\"".
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileSystem"", e);
      }
  }"
944,"    public void fileChanged(final FileChangeEvent event) throws Exception {
        final FileListener listener = getListener();
        if (listener == null) {
            return;
        }
        listener.fileChanged(event);
    }","  public void test13()  throws Throwable  {
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""z@Xuk"", ""z@Xuk"", 492, 492, ""z@Xuk"", ""z@Xuk"", ""z@Xuk"", fileType0, ""z@Xuk"");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(genericURLFileName0, ftpsFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = new WeakRefFileListener(delegateFileObject0, delegateFileObject0);
      FileChangeEvent fileChangeEvent0 = new FileChangeEvent(delegateFileObject0);
      weakRefFileListener0.fileChanged(fileChangeEvent0);
  }"
945,"    public static void installListener(final FileObject file, final FileListener listener) {
        final WeakRefFileListener weakListener = new WeakRefFileListener(file, listener);

        file.getFileSystem().addListener(file, new WeakRefFileListener(file, weakListener));
    }","  public void test14()  throws Throwable  {
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""z@Xuk"", ""z@Xuk"", 492, 492, ""z@Xuk"", ""z@Xuk"", ""z@Xuk"", fileType0, ""z@Xuk"");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(genericURLFileName0, ftpsFileSystem0, (FileObject) null);
      WeakRefFileListener.installListener(delegateFileObject0, delegateFileObject0);
}"
946,"    protected WeakRefFileListener(final FileObject file, final FileListener listener) {
        this.fs = file.getFileSystem();
        this.name = file.getName();
        this.listener = new WeakReference<>(listener);
    }","  public void test15()  throws Throwable  {
      FileType fileType0 = FileType.FOLDER;
      VirtualFileName virtualFileName0 = new VirtualFileName(""r>X#\""C2p4~3<}N(}Q"", ""r>X#\""C2p4~3<}N(}Q"", fileType0);
      LayeredFileName layeredFileName0 = new LayeredFileName(""r>X#\""C2p4~3<}N(}Q"", virtualFileName0, (String) null, fileType0);
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, (String) null, (-310), 499, ""org.apache.commons.vfs2.util.WeakRefFileListener"", ""org.apache.commons.vfs2.util.WeakRefFileListener"", ""&"", fileType0, ""&"");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(layeredFileName0, ftpsFileSystem0, (FileObject) null);
      WeakRefFileListener weakRefFileListener0 = null;
      try {
        weakRefFileListener0 = new WeakRefFileListener((FileObject) null, delegateFileObject0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.WeakRefFileListener"", e);
      }
  }"
947,"    public long length() throws IOException {
        return content.length();
    }","  public void test0()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      monitorRandomAccessContent0.write((int) (byte)0);
}"
948,"    public int skipBytes(final int n) throws IOException {
        return content.skipBytes(n);
    }","  public void test1()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn(944).when(randomAccessContent0).skipBytes(anyInt());
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      int int0 = monitorRandomAccessContent0.skipBytes((-3569));
}"
949,"    public int skipBytes(final int n) throws IOException {
        return content.skipBytes(n);
    }","  public void test2()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn((-1732)).when(randomAccessContent0).skipBytes(anyInt());
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      int int0 = monitorRandomAccessContent0.skipBytes((-589));
}"
950,"    public int readUnsignedShort() throws IOException {
        return content.readUnsignedShort();
    }","  public void test3()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn(0, 2216).when(randomAccessContent0).readUnsignedShort();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      monitorRandomAccessContent0.readUnsignedShort();
      int int0 = monitorRandomAccessContent0.readUnsignedShort();
}"
951,"    public int readUnsignedShort() throws IOException {
        return content.readUnsignedShort();
    }","  public void test4()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn((-364)).when(randomAccessContent0).readUnsignedShort();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      int int0 = monitorRandomAccessContent0.readUnsignedShort();
}"
952,"    public int readUnsignedByte() throws IOException {
        return content.readUnsignedByte();
    }","  public void test5()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(randomAccessContent0).readUnsignedByte();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      int int0 = monitorRandomAccessContent0.readUnsignedByte();
}"
953,"    public int readUnsignedByte() throws IOException {
        return content.readUnsignedByte();
    }","  public void test6()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn((int)(byte)62).when(randomAccessContent0).readUnsignedByte();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      int int0 = monitorRandomAccessContent0.readUnsignedByte();
}"
954,"    public String readUTF() throws IOException {
        return content.readUTF();
    }","  public void test7()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(randomAccessContent0).readUTF();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      String string0 = monitorRandomAccessContent0.readUTF();
}"
955,"    public String readUTF() throws IOException {
        return content.readUTF();
    }","  public void test8()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(randomAccessContent0).readUTF();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      String string0 = monitorRandomAccessContent0.readUTF();
}"
956,"    public short readShort() throws IOException {
        return content.readShort();
    }","  public void test9()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn((short)1, (short) (-1)).when(randomAccessContent0).readShort();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      short short0 = monitorRandomAccessContent0.readShort();
      short short1 = monitorRandomAccessContent0.readShort();
}"
957,"    public long readLong() throws IOException {
        return content.readLong();
    }","  public void test10()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(randomAccessContent0).readLong();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      long long0 = monitorRandomAccessContent0.readLong();
}"
958,"    public long readLong() throws IOException {
        return content.readLong();
    }","  public void test11()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn((-2758L)).when(randomAccessContent0).readLong();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      long long0 = monitorRandomAccessContent0.readLong();
}"
959,"    public String readLine() throws IOException {
        return content.readLine();
    }","  public void test12()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn(""!NL%[syauH6; H0#"").when(randomAccessContent0).readLine();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      String string0 = monitorRandomAccessContent0.readLine();
}"
960,"    public String readLine() throws IOException {
        return content.readLine();
    }","  public void test13()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(randomAccessContent0).readLine();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      String string0 = monitorRandomAccessContent0.readLine();
}"
961,"    public int readInt() throws IOException {
        return content.readInt();
    }","  public void test14()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn((-2642), (int)(byte)1).when(randomAccessContent0).readInt();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      int int0 = monitorRandomAccessContent0.readInt();
      int int1 = monitorRandomAccessContent0.readInt();
}"
962,"    public float readFloat() throws IOException {
        return content.readFloat();
    }","  public void test15()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn(0.0F).when(randomAccessContent0).readFloat();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      float float0 = monitorRandomAccessContent0.readFloat();
}"
963,"    public float readFloat() throws IOException {
        return content.readFloat();
    }","  public void test16()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn((-31.864F)).when(randomAccessContent0).readFloat();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      float float0 = monitorRandomAccessContent0.readFloat();
}"
964,"    public double readDouble() throws IOException {
        return content.readDouble();
    }","  public void test17()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, (double)(byte) (-11)).when(randomAccessContent0).readDouble();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      double double0 = monitorRandomAccessContent0.readDouble();
      double double1 = monitorRandomAccessContent0.readDouble();
}"
965,"    public int skipBytes(final int n) throws IOException {
        return content.skipBytes(n);
    }","  public void test18()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(randomAccessContent0).readBoolean();
      doReturn('a').when(randomAccessContent0).readChar();
      doReturn(0.0, 0.0).when(randomAccessContent0).readDouble();
      doReturn((String) null, (String) null).when(randomAccessContent0).readLine();
      doReturn((short)0).when(randomAccessContent0).readShort();
      doReturn(0).when(randomAccessContent0).skipBytes(anyInt());
      doReturn(0L).when(randomAccessContent0).getFilePointer();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      byte[] byteArray0 = new byte[0];
      monitorRandomAccessContent0.writeDouble(1.0);
      monitorRandomAccessContent0.writeLong((-3456L));
      monitorRandomAccessContent0.write(byteArray0);
      monitorRandomAccessContent0.readDouble();
      monitorRandomAccessContent0.readShort();
      monitorRandomAccessContent0.readLine();
      monitorRandomAccessContent0.readBoolean();
      monitorRandomAccessContent0.write(byteArray0, 755, 1);
      monitorRandomAccessContent0.readChar();
      monitorRandomAccessContent0.onClose();
      monitorRandomAccessContent0.close();
      monitorRandomAccessContent0.readBoolean();
      monitorRandomAccessContent0.readLine();
      monitorRandomAccessContent0.writeDouble((-2997.1));
      monitorRandomAccessContent0.writeShort(755);
      monitorRandomAccessContent0.readDouble();
      monitorRandomAccessContent0.getFilePointer();
      monitorRandomAccessContent0.write(byteArray0, 755, 0);
      int int0 = monitorRandomAccessContent0.skipBytes(0);
}"
966,"    public char readChar() throws IOException {
        return content.readChar();
    }","  public void test19()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn('2').when(randomAccessContent0).readChar();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      char char0 = monitorRandomAccessContent0.readChar();
}"
967,"    public byte readByte() throws IOException {
        return content.readByte();
    }","  public void test20()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn((byte)0).when(randomAccessContent0).readByte();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      byte byte0 = monitorRandomAccessContent0.readByte();
}"
968,"    public byte readByte() throws IOException {
        return content.readByte();
    }","  public void test21()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn((byte)1).when(randomAccessContent0).readByte();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      byte byte0 = monitorRandomAccessContent0.readByte();
}"
969,"    public byte readByte() throws IOException {
        return content.readByte();
    }","  public void test22()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn((byte) (-11)).when(randomAccessContent0).readByte();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      byte byte0 = monitorRandomAccessContent0.readByte();
}"
970,"    public boolean readBoolean() throws IOException {
        return content.readBoolean();
    }","  public void test23()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(randomAccessContent0).readBoolean();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      boolean boolean0 = monitorRandomAccessContent0.readBoolean();
}"
971,"    public long length() throws IOException {
        return content.length();
    }","  public void test24()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(randomAccessContent0).length();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      long long0 = monitorRandomAccessContent0.length();
}"
972,"    public long length() throws IOException {
        return content.length();
    }","  public void test25()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn((long)(short)125).when(randomAccessContent0).length();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      long long0 = monitorRandomAccessContent0.length();
}"
973,"    public InputStream getInputStream() throws IOException {
        return content.getInputStream();
    }","  public void test26()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(inputStream0).toString();
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream0).when(randomAccessContent0).getInputStream();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      InputStream inputStream1 = monitorRandomAccessContent0.getInputStream();
}"
974,"    public long getFilePointer() throws IOException {
        return content.getFilePointer();
    }","  public void test27()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn(1392L).when(randomAccessContent0).getFilePointer();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      long long0 = monitorRandomAccessContent0.getFilePointer();
}"
975,"    public long getFilePointer() throws IOException {
        return content.getFilePointer();
    }","  public void test28()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn((-1L)).when(randomAccessContent0).getFilePointer();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      long long0 = monitorRandomAccessContent0.getFilePointer();
}"
976,"    public void writeLong(final long v) throws IOException {
        content.writeLong(v);
    }","  public void test29()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.writeLong(0L);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
977,"    public void writeInt(final int v) throws IOException {
        content.writeInt(v);
    }","  public void test30()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.writeInt(0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
978,"    public void writeFloat(final float v) throws IOException {
        content.writeFloat(v);
    }","  public void test31()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.writeFloat((-1.0F));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
979,"    public void writeDouble(final double v) throws IOException {
        content.writeDouble(v);
    }","  public void test32()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.writeDouble(0.0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
980,"    public void writeChars(final String s) throws IOException {
        content.writeChars(s);
    }","  public void test33()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.writeChars(""O0X^lJnsmd3!"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
981,"    public void writeChar(final int v) throws IOException {
        content.writeChar(v);
    }","  public void test34()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.writeChar((byte)0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
982,"    public void writeBytes(final String s) throws IOException {
        content.writeBytes(s);
    }","  public void test35()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.writeBytes((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
983,"    public void writeByte(final int v) throws IOException {
        content.writeByte(v);
    }","  public void test36()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.writeByte((-545));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
984,"    public void writeBoolean(final boolean v) throws IOException {
        content.writeBoolean(v);
    }","  public void test37()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.writeBoolean(true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
985,"    public void write(final int b) throws IOException {
        content.write(b);
    }","  public void test38()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.write(byteArray0, (int) (byte)21, (int) (byte)0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
986,"    public void write(final int b) throws IOException {
        content.write(b);
    }","  public void test39()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.write(byteArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
987,"    public int skipBytes(final int n) throws IOException {
        return content.skipBytes(n);
    }","  public void test40()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.skipBytes(0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
988,"    public void setLength(final long newLength) throws IOException {
        content.setLength(newLength);
    }","  public void test41()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.setLength((byte)0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
989,"    public int readUnsignedShort() throws IOException {
        return content.readUnsignedShort();
    }","  public void test42()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.readUnsignedShort();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
990,"    public String readUTF() throws IOException {
        return content.readUTF();
    }","  public void test43()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.readUTF();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
991,"    public short readShort() throws IOException {
        return content.readShort();
    }","  public void test44()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.readShort();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
992,"    public long readLong() throws IOException {
        return content.readLong();
    }","  public void test45()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.readLong();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
993,"    public String readLine() throws IOException {
        return content.readLine();
    }","  public void test46()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.readLine();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
994,"    public int readInt() throws IOException {
        return content.readInt();
    }","  public void test47()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.readInt();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
995,"    public void readFully(final byte[] b) throws IOException {
        content.readFully(b);
    }","  public void test48()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.readFully(byteArray0, 0, 1400);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
996,"    public void readFully(final byte[] b) throws IOException {
        content.readFully(b);
    }","  public void test49()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.readFully(byteArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
997,"    public float readFloat() throws IOException {
        return content.readFloat();
    }","  public void test50()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.readFloat();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
998,"    public char readChar() throws IOException {
        return content.readChar();
    }","  public void test51()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.readChar();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
999,"    public boolean readBoolean() throws IOException {
        return content.readBoolean();
    }","  public void test52()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.readBoolean();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
1000,"    public InputStream getInputStream() throws IOException {
        return content.getInputStream();
    }","  public void test53()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.getInputStream();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
1001,"    public void close() throws IOException {
        if (finished) {
            return;
        }

        // Close the output stream
        IOException exc;
        try {
            content.close();
        } catch (final IOException ioe) {
            exc = ioe;
        }

        // Notify of end of output
        exc = null;
        try {
            onClose();
        } catch (final IOException ioe) {
            exc = ioe;
        }

        finished = true;

        if (exc != null) {
            throw exc;
        }
    }","  public void test54()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.close();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
1002,"    public long length() throws IOException {
        return content.length();
    }","  public void test55()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      monitorRandomAccessContent0.close();
      monitorRandomAccessContent0.close();
}"
1003,"    public void readFully(final byte[] b) throws IOException {
        content.readFully(b);
    }","  public void test56()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      byte[] byteArray0 = new byte[1];
      monitorRandomAccessContent0.readFully(byteArray0, (int) (byte)28, 146);
}"
1004,"    public long getFilePointer() throws IOException {
        return content.getFilePointer();
    }","  public void test57()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      monitorRandomAccessContent0.writeBoolean(true);
}"
1005,"    public long getFilePointer() throws IOException {
        return content.getFilePointer();
    }","  public void test58()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      monitorRandomAccessContent0.writeByte((byte)0);
}"
1006,"    public long length() throws IOException {
        return content.length();
    }","  public void test59()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      monitorRandomAccessContent0.writeInt((byte)0);
}"
1007,"    public long length() throws IOException {
        return content.length();
    }","  public void test60()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      monitorRandomAccessContent0.writeChars(""B9IS|y*>qEX"");
}"
1008,"    public int readInt() throws IOException {
        return content.readInt();
    }","  public void test61()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(randomAccessContent0).readInt();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      int int0 = monitorRandomAccessContent0.readInt();
}"
1009,"    public long getFilePointer() throws IOException {
        return content.getFilePointer();
    }","  public void test62()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      byte[] byteArray0 = new byte[0];
      monitorRandomAccessContent0.readFully(byteArray0);
}"
1010,"    public long getFilePointer() throws IOException {
        return content.getFilePointer();
    }","  public void test63()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      monitorRandomAccessContent0.writeFloat((short) (-470));
}"
1011,"    public long length() throws IOException {
        return content.length();
    }","  public void test64()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn((long)(byte) (-1)).when(randomAccessContent0).length();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      long long0 = monitorRandomAccessContent0.length();
}"
1012,"    public float readFloat() throws IOException {
        return content.readFloat();
    }","  public void test65()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn((float)(byte)1).when(randomAccessContent0).readFloat();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      float float0 = monitorRandomAccessContent0.readFloat();
}"
1013,"    public int readUnsignedByte() throws IOException {
        return content.readUnsignedByte();
    }","  public void test66()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn((-2642)).when(randomAccessContent0).readUnsignedByte();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      int int0 = monitorRandomAccessContent0.readUnsignedByte();
}"
1014,"    public long getFilePointer() throws IOException {
        return content.getFilePointer();
    }","  public void test67()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      monitorRandomAccessContent0.writeUTF(""CnkikDDQ]&5?gZ"");
}"
1015,"    public InputStream getInputStream() throws IOException {
        return content.getInputStream();
    }","  public void test68()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(randomAccessContent0).getInputStream();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      InputStream inputStream0 = monitorRandomAccessContent0.getInputStream();
}"
1016,"    public long readLong() throws IOException {
        return content.readLong();
    }","  public void test69()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn(1L).when(randomAccessContent0).readLong();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      long long0 = monitorRandomAccessContent0.readLong();
}"
1017,"    public long getFilePointer() throws IOException {
        return content.getFilePointer();
    }","  public void test70()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      monitorRandomAccessContent0.writeBytes(""6V |ojIR"");
}"
1018,"    public String readUTF() throws IOException {
        return content.readUTF();
    }","  public void test71()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      doReturn(""vMmt]6&@IG'{,eZrH"").when(randomAccessContent0).readUTF();
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      String string0 = monitorRandomAccessContent0.readUTF();
}"
1019,"    public long length() throws IOException {
        return content.length();
    }","  public void test72()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      monitorRandomAccessContent0.setLength((byte)2);
}"
1020,"    public void write(final int b) throws IOException {
        content.write(b);
    }","  public void test73()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.write(0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
1021,"    public byte readByte() throws IOException {
        return content.readByte();
    }","  public void test74()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.readByte();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
1022,"    public long getFilePointer() throws IOException {
        return content.getFilePointer();
    }","  public void test75()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      monitorRandomAccessContent0.writeChar((byte)0);
}"
1023,"    public double readDouble() throws IOException {
        return content.readDouble();
    }","  public void test76()  throws Throwable  {
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent((RandomAccessContent) null);
      // Undeclared exception!
      try { 
        monitorRandomAccessContent0.readDouble();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.MonitorRandomAccessContent"", e);
      }
  }"
1024,"    public long length() throws IOException {
        return content.length();
    }","  public void test77()  throws Throwable  {
      RandomAccessContent randomAccessContent0 = mock(RandomAccessContent.class, new ViolatedAssumptionAnswer());
      MonitorRandomAccessContent monitorRandomAccessContent0 = new MonitorRandomAccessContent(randomAccessContent0);
      monitorRandomAccessContent0.seek((-14));
}"
1025,"    public static String getString(final String code) {
        return getString(code, ArrayUtils.EMPTY_OBJECT_ARRAY);
    }","  public void test0()  throws Throwable  {
      String string0 = Messages.getString("",h*O.%z?yBb\"":"", (Object) "",h*O.%z?yBb\"":"");
}"
1026,"    public static String getString(final String code) {
        return getString(code, ArrayUtils.EMPTY_OBJECT_ARRAY);
    }","  public void test1()  throws Throwable  {
      String string0 = Messages.getString((String) null);
}"
1027,"    public static String getString(final String code) {
        return getString(code, ArrayUtils.EMPTY_OBJECT_ARRAY);
    }","  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = Messages.getString((String) null, objectArray0);
}"
1028,"    public static String getString(final String code) {
        return getString(code, ArrayUtils.EMPTY_OBJECT_ARRAY);
    }","  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = Messages.getString("",h*O.%z?yBb\"":"", objectArray0);
}"
1029,"    public static String getString(final String code) {
        return getString(code, ArrayUtils.EMPTY_OBJECT_ARRAY);
    }","  public void test4()  throws Throwable  {
      String string0 = Messages.getString((String) null, (Object) """");
}"
1030,"    public static String getString(final String code) {
        return getString(code, ArrayUtils.EMPTY_OBJECT_ARRAY);
    }","  public void test5()  throws Throwable  {
      String string0 = Messages.getString("""");
}"
1031,"    public static String getString(final String code) {
        return getString(code, ArrayUtils.EMPTY_OBJECT_ARRAY);
    }","  public void test6()  throws Throwable  {
      String string0 = Messages.getString("""");
}"
1032,"    public static Properties readProperties(final FileObject fileObject) throws FileSystemException, IOException {
        return readProperties(fileObject, new Properties());
    }","  public void test0()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Properties properties0 = new Properties();
      properties0.put(class0, """");
      Properties properties1 = FileObjectUtils.readProperties((FileObject) null, properties0);
}"
1033,"    public static Properties readProperties(final FileObject fileObject) throws FileSystemException, IOException {
        return readProperties(fileObject, new Properties());
    }","  public void test1()  throws Throwable  {
      Properties properties0 = FileObjectUtils.readProperties((FileObject) null);
      Properties properties1 = FileObjectUtils.readProperties((FileObject) null, properties0);
}"
1034,"    public static AbstractFileObject getAbstractFileObject(final FileObject fileObject) throws FileSystemException {
        Object searchObject = fileObject;
        while (searchObject instanceof DecoratedFileObject) {
            searchObject = ((DecoratedFileObject) searchObject).getDecoratedFileObject();
        }
        if (searchObject instanceof AbstractFileObject) {
            return (AbstractFileObject) searchObject;
        }
        if (searchObject == null) {
            return null;
        }

        throw new FileSystemException(""vfs.util/find-abstract-file-object.error"",
            fileObject == null ? ""null"" : fileObject.getClass().getName());
    }","  public void test2()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""}X2~yt"", ""|N}iwj"", 154, 1974, ""|N}iwj"", ""org.apache.commons.vfs2.util.FileObjectUtils"", ""#%lx1ok<l. &'"", fileType0, ""<titl>"");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(genericURLFileName0, ftpFileSystem0, (FileObject) null);
      FileObjectUtils.exists(delegateFileObject0);
      AbstractFileObject abstractFileObject0 = FileObjectUtils.getAbstractFileObject(delegateFileObject0);
}"
1035,"    public static void writeContent(final FileObject srcFile, final FileObject destFile) throws IOException {
        try (final FileContent content = srcFile.getContent()) {
            content.write(destFile);
        }
    }","  public void test3()  throws Throwable  {
      String string0 = "">"";
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("">"", "">"", (-12), (-12), "">"", "">"", "">"", fileType0, "">"");
      LayeredFileName layeredFileName0 = new LayeredFileName("">"", genericURLFileName0, "">"", fileType0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""null"");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      FileContentInfoFactory fileContentInfoFactory0 = mock(FileContentInfoFactory.class, new ViolatedAssumptionAnswer());
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileContentInfoFactory0).when(fileSystemManager0).getFileContentInfoFactory();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileSystemManager0, (FileSystemManager) null).when(vfsComponentContext0).getFileSystemManager();
      ftpsFileSystem0.setContext(vfsComponentContext0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(layeredFileName0, ftpsFileSystem0, (FileObject) null);
      AbstractFileObject abstractFileObject0 = FileObjectUtils.getAbstractFileObject(delegateFileObject0);
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject(delegateFileObject0);
      // Undeclared exception!
      try { 
        FileObjectUtils.writeContent((FileObject) abstractFileObject0, (FileObject) synchronizedFileObject0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileSystem"", e);
      }
  }"
1036,"    public static void writeContent(final FileObject srcFile, final FileObject destFile) throws IOException {
        try (final FileContent content = srcFile.getContent()) {
            content.write(destFile);
        }
    }","  public void test4()  throws Throwable  {
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject((FileObject) null);
      // Undeclared exception!
      try { 
        FileObjectUtils.writeContent((FileObject) onCallRefreshFileObject0, (FileObject) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DecoratedFileObject"", e);
      }
  }"
1037,"    public static void writeContent(final FileObject srcFile, final FileObject destFile) throws IOException {
        try (final FileContent content = srcFile.getContent()) {
            content.write(destFile);
        }
    }","  public void test5()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""/K9)K44"", """");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        FileObjectUtils.writeContent((FileObject) null, (OutputStream) mockPrintStream0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.FileObjectUtils"", e);
      }
  }"
1038,"    public static void writeContent(final FileObject srcFile, final FileObject destFile) throws IOException {
        try (final FileContent content = srcFile.getContent()) {
            content.write(destFile);
        }
    }","  public void test6()  throws Throwable  {
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject((FileObject) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        FileObjectUtils.writeContent((FileObject) synchronizedFileObject0, (OutputStream) pipedOutputStream0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DecoratedFileObject"", e);
      }
  }"
1039,"    public static Properties readProperties(final FileObject fileObject) throws FileSystemException, IOException {
        return readProperties(fileObject, new Properties());
    }","  public void test7()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("">"", "">"", (-1), (-1), "">"", "">"", "">"", fileType0, "">"");
      LayeredFileName layeredFileName0 = new LayeredFileName("">"", genericURLFileName0, "">"", fileType0);
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      FileContentInfoFactory fileContentInfoFactory0 = mock(FileContentInfoFactory.class, new ViolatedAssumptionAnswer());
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn((FileSystemManager) null).when(vfsComponentContext0).getFileSystemManager();
      ftpsFileSystem0.setContext(vfsComponentContext0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(layeredFileName0, ftpsFileSystem0, (FileObject) null);
      AbstractFileObject abstractFileObject0 = FileObjectUtils.getAbstractFileObject(delegateFileObject0);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        FileObjectUtils.readProperties((FileObject) abstractFileObject0, properties0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileObject"", e);
      }
  }"
1040,"    public static Properties readProperties(final FileObject fileObject) throws FileSystemException, IOException {
        return readProperties(fileObject, new Properties());
    }","  public void test8()  throws Throwable  {
      FileType fileType0 = FileType.FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, (String) null, 0, 1636, (String) null, ""null"", ""lPhSK;d(.0f"", fileType0, ""SW^@>!:~>HsP56b%["");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>((AbstractFileName) null, ftpsFileSystem0, (FileObject) null);
      DecoratedFileObject decoratedFileObject0 = new DecoratedFileObject(delegateFileObject0);
      Configuration configuration0 = new Configuration();
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      Properties properties0 = configuration0.getAllPropertiesByTags(list0);
      // Undeclared exception!
      try { 
        FileObjectUtils.readProperties((FileObject) decoratedFileObject0, properties0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileSystem"", e);
      }
  }"
1041,"    public static Properties readProperties(final FileObject fileObject) throws FileSystemException, IOException {
        return readProperties(fileObject, new Properties());
    }","  public void test9()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("">"", "">"", (-1), (-1), "">"", "">"", "">"", fileType0, "">"");
      LayeredFileName layeredFileName0 = new LayeredFileName("">"", genericURLFileName0, "">"", fileType0);
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      FileContentInfoFactory fileContentInfoFactory0 = mock(FileContentInfoFactory.class, new ViolatedAssumptionAnswer());
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileContentInfoFactory0).when(fileSystemManager0).getFileContentInfoFactory();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileSystemManager0).when(vfsComponentContext0).getFileSystemManager();
      ftpsFileSystem0.setContext(vfsComponentContext0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(layeredFileName0, ftpsFileSystem0, (FileObject) null);
      DecoratedFileObject decoratedFileObject0 = new DecoratedFileObject(delegateFileObject0);
      try { 
        FileObjectUtils.readProperties((FileObject) decoratedFileObject0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not read file \"">:>://>:>@>>?>!>\"".
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileObject"", e);
      }
  }"
1042,"    public static Properties readProperties(final FileObject fileObject) throws FileSystemException, IOException {
        return readProperties(fileObject, new Properties());
    }","  public void test10()  throws Throwable  {
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject((FileObject) null);
      // Undeclared exception!
      try { 
        FileObjectUtils.readProperties((FileObject) synchronizedFileObject0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DecoratedFileObject"", e);
      }
  }"
1043,"    public static boolean isInstanceOf(final FileObject fileObject, final Class<?> wantedClass)
        throws FileSystemException {
        Object searchObject = fileObject;
        while (searchObject instanceof DecoratedFileObject) {
            if (wantedClass.isInstance(searchObject)) {
                return true;
            }

            searchObject = ((DecoratedFileObject) searchObject).getDecoratedFileObject();
        }

        return wantedClass.isInstance(searchObject);
    }","  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileObjectUtils.isInstanceOf((FileObject) null, (Class<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.FileObjectUtils"", e);
      }
  }"
1044,"    public static String getContentAsString(final FileObject file, final Charset charset) throws IOException {
        try (final FileContent content = file.getContent()) {
            return content.getString(charset);
        }
    }","  public void test12()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileObjectUtils.getContentAsString((FileObject) null, charset0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.FileObjectUtils"", e);
      }
  }"
1045,"    public static String getContentAsString(final FileObject file, final Charset charset) throws IOException {
        try (final FileContent content = file.getContent()) {
            return content.getString(charset);
        }
    }","  public void test13()  throws Throwable  {
      FileType fileType0 = FileType.FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, (String) null, 0, 1636, (String) null, ""null"", ""lPhSK;d(.0f"", fileType0, ""SW^@>!:~>HsP56b%["");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>((AbstractFileName) null, ftpsFileSystem0, (FileObject) null);
      DecoratedFileObject decoratedFileObject0 = new DecoratedFileObject(delegateFileObject0);
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject(decoratedFileObject0);
      // Undeclared exception!
      try { 
        FileObjectUtils.getContentAsString((FileObject) synchronizedFileObject0, (Charset) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileSystem"", e);
      }
  }"
1046,"    public static String getContentAsString(final FileObject file, final Charset charset) throws IOException {
        try (final FileContent content = file.getContent()) {
            return content.getString(charset);
        }
    }","  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileObjectUtils.getContentAsString((FileObject) null, ""No current tar entry"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.FileObjectUtils"", e);
      }
  }"
1047,"    public static String getContentAsString(final FileObject file, final Charset charset) throws IOException {
        try (final FileContent content = file.getContent()) {
            return content.getString(charset);
        }
    }","  public void test15()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", (-1), (-1), """", """", ""9=9.M2"", fileType0, """");
      LayeredFileName layeredFileName0 = new LayeredFileName("""", genericURLFileName0, """", fileType0);
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(layeredFileName0, ftpsFileSystem0, (FileObject) null);
      AbstractFileObject abstractFileObject0 = FileObjectUtils.getAbstractFileObject(delegateFileObject0);
      // Undeclared exception!
      try { 
        FileObjectUtils.getContentAsString((FileObject) abstractFileObject0, ""9=9.M2"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileSystem"", e);
      }
  }"
1048,"    public static byte[] getContentAsByteArray(final FileObject file) throws IOException {
        try (final FileContent content = file.getContent()) {
            return content.getByteArray();
        }
    }","  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileObjectUtils.getContentAsByteArray((FileObject) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.util.FileObjectUtils"", e);
      }
  }"
1049,"    public static byte[] getContentAsByteArray(final FileObject file) throws IOException {
        try (final FileContent content = file.getContent()) {
            return content.getByteArray();
        }
    }","  public void test17()  throws Throwable  {
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject((FileObject) null);
      // Undeclared exception!
      try { 
        FileObjectUtils.getContentAsByteArray(synchronizedFileObject0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DecoratedFileObject"", e);
      }
  }"
1050,"    public static boolean exists(final FileObject fileObject) throws FileSystemException {
        return fileObject != null && fileObject.exists();
    }","  public void test18()  throws Throwable  {
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject((FileObject) null);
      // Undeclared exception!
      try { 
        FileObjectUtils.exists(onCallRefreshFileObject0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DecoratedFileObject"", e);
      }
  }"
1051,"    public static Properties readProperties(final FileObject fileObject) throws FileSystemException, IOException {
        return readProperties(fileObject, new Properties());
    }","  public void test19()  throws Throwable  {
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject((FileObject) null);
      Configuration configuration0 = new Configuration();
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      Properties properties0 = configuration0.getAllPropertiesByTags(list0);
      // Undeclared exception!
      try { 
        FileObjectUtils.readProperties((FileObject) onCallRefreshFileObject0, properties0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DecoratedFileObject"", e);
      }
  }"
1052,"    public static void writeContent(final FileObject srcFile, final FileObject destFile) throws IOException {
        try (final FileContent content = srcFile.getContent()) {
            content.write(destFile);
        }
    }","  public void test20()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("">"", "">"", 27, 27, "">"", "">"", "">"", fileType0, "">"");
      LayeredFileName layeredFileName0 = new LayeredFileName("">"", genericURLFileName0, "">"", fileType0);
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      FileContentInfoFactory fileContentInfoFactory0 = mock(FileContentInfoFactory.class, new ViolatedAssumptionAnswer());
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileContentInfoFactory0).when(fileSystemManager0).getFileContentInfoFactory();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileSystemManager0).when(vfsComponentContext0).getFileSystemManager();
      ftpsFileSystem0.setContext(vfsComponentContext0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(layeredFileName0, ftpsFileSystem0, (FileObject) null);
      AbstractFileObject abstractFileObject0 = FileObjectUtils.getAbstractFileObject(delegateFileObject0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("">"");
      try { 
        FileObjectUtils.writeContent((FileObject) abstractFileObject0, (OutputStream) mockPrintStream0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not read file \"">:>://>:>@>>?>!>\"".
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileObject"", e);
      }
  }"
1053,"    public static Properties readProperties(final FileObject fileObject) throws FileSystemException, IOException {
        return readProperties(fileObject, new Properties());
    }","  public void test21()  throws Throwable  {
      Properties properties0 = FileObjectUtils.readProperties((FileObject) null, (Properties) null);
}"
1054,"    public static boolean isInstanceOf(final FileObject fileObject, final Class<?> wantedClass)
        throws FileSystemException {
        Object searchObject = fileObject;
        while (searchObject instanceof DecoratedFileObject) {
            if (wantedClass.isInstance(searchObject)) {
                return true;
            }

            searchObject = ((DecoratedFileObject) searchObject).getDecoratedFileObject();
        }

        return wantedClass.isInstance(searchObject);
    }","  public void test22()  throws Throwable  {
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject((FileObject) null);
      Class<FtpFileSystem> class0 = FtpFileSystem.class;
      boolean boolean0 = FileObjectUtils.isInstanceOf(onCallRefreshFileObject0, class0);
}"
1055,"    public static boolean isInstanceOf(final FileObject fileObject, final Class<?> wantedClass)
        throws FileSystemException {
        Object searchObject = fileObject;
        while (searchObject instanceof DecoratedFileObject) {
            if (wantedClass.isInstance(searchObject)) {
                return true;
            }

            searchObject = ((DecoratedFileObject) searchObject).getDecoratedFileObject();
        }

        return wantedClass.isInstance(searchObject);
    }","  public void test23()  throws Throwable  {
      FileType fileType0 = FileType.FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, (String) null, 0, 1636, (String) null, ""null"", ""lPhSK;d(.0f"", fileType0, ""SW^@>!:~>HsP56b%["");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>((AbstractFileName) null, ftpsFileSystem0, (FileObject) null);
      DecoratedFileObject decoratedFileObject0 = new DecoratedFileObject(delegateFileObject0);
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject(decoratedFileObject0);
      Class<Object> class0 = Object.class;
      boolean boolean0 = FileObjectUtils.isInstanceOf(synchronizedFileObject0, class0);
}"
1056,"    public static String getContentAsString(final FileObject file, final Charset charset) throws IOException {
        try (final FileContent content = file.getContent()) {
            return content.getString(charset);
        }
    }","  public void test24()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("">"", "">"", (-1), (-1), "">"", "">"", "">"", fileType0, "">"");
      LayeredFileName layeredFileName0 = new LayeredFileName("">"", genericURLFileName0, "">"", fileType0);
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      FileContentInfoFactory fileContentInfoFactory0 = mock(FileContentInfoFactory.class, new ViolatedAssumptionAnswer());
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileContentInfoFactory0).when(fileSystemManager0).getFileContentInfoFactory();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileSystemManager0).when(vfsComponentContext0).getFileSystemManager();
      ftpsFileSystem0.setContext(vfsComponentContext0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(layeredFileName0, ftpsFileSystem0, (FileObject) null);
      AbstractFileObject abstractFileObject0 = FileObjectUtils.getAbstractFileObject(delegateFileObject0);
      try { 
        FileObjectUtils.getContentAsString((FileObject) abstractFileObject0, "">"");
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not determine the size of \"">:>://>:>@>>?>!>\"" because it is not a file.
         //
         verifyException(""org.apache.commons.vfs2.provider.DefaultFileContent"", e);
      }
  }"
1057,"    public static String getContentAsString(final FileObject file, final Charset charset) throws IOException {
        try (final FileContent content = file.getContent()) {
            return content.getString(charset);
        }
    }","  public void test25()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("">"", "">"", 16, 16, "">"", "">"", "">"", fileType0, "">"");
      LayeredFileName layeredFileName0 = new LayeredFileName("">"", genericURLFileName0, "">"", fileType0);
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      FileContentInfoFactory fileContentInfoFactory0 = mock(FileContentInfoFactory.class, new ViolatedAssumptionAnswer());
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileContentInfoFactory0).when(fileSystemManager0).getFileContentInfoFactory();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileSystemManager0).when(vfsComponentContext0).getFileSystemManager();
      ftpsFileSystem0.setContext(vfsComponentContext0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(layeredFileName0, ftpsFileSystem0, (FileObject) null);
      AbstractFileObject abstractFileObject0 = FileObjectUtils.getAbstractFileObject(delegateFileObject0);
      try { 
        FileObjectUtils.getContentAsString((FileObject) abstractFileObject0, (Charset) null);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not determine the size of \"">:>://>:>@>>?>!>\"" because it is not a file.
         //
         verifyException(""org.apache.commons.vfs2.provider.DefaultFileContent"", e);
      }
  }"
1058,"    public static byte[] getContentAsByteArray(final FileObject file) throws IOException {
        try (final FileContent content = file.getContent()) {
            return content.getByteArray();
        }
    }","  public void test26()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""x"", ""x"", (-1), (-1), ""x"", ""x"", ""x"", fileType0, ""x"");
      LayeredFileName layeredFileName0 = new LayeredFileName(""x"", genericURLFileName0, ""x"", fileType0);
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      FileContentInfoFactory fileContentInfoFactory0 = mock(FileContentInfoFactory.class, new ViolatedAssumptionAnswer());
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileContentInfoFactory0).when(fileSystemManager0).getFileContentInfoFactory();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileSystemManager0).when(vfsComponentContext0).getFileSystemManager();
      ftpsFileSystem0.setContext(vfsComponentContext0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(layeredFileName0, ftpsFileSystem0, (FileObject) null);
      try { 
        FileObjectUtils.getContentAsByteArray(delegateFileObject0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not determine the size of \""x:x://x:***@xx?x!x\"" because it is not a file.
         //
         verifyException(""org.apache.commons.vfs2.provider.DefaultFileContent"", e);
      }
  }"
1059,"    public static AbstractFileObject getAbstractFileObject(final FileObject fileObject) throws FileSystemException {
        Object searchObject = fileObject;
        while (searchObject instanceof DecoratedFileObject) {
            searchObject = ((DecoratedFileObject) searchObject).getDecoratedFileObject();
        }
        if (searchObject instanceof AbstractFileObject) {
            return (AbstractFileObject) searchObject;
        }
        if (searchObject == null) {
            return null;
        }

        throw new FileSystemException(""vfs.util/find-abstract-file-object.error"",
            fileObject == null ? ""null"" : fileObject.getClass().getName());
    }","  public void test27()  throws Throwable  {
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject((FileObject) null);
      AbstractFileObject abstractFileObject0 = FileObjectUtils.getAbstractFileObject(synchronizedFileObject0);
}"
1060,"    public static boolean exists(final FileObject fileObject) throws FileSystemException {
        return fileObject != null && fileObject.exists();
    }","  public void test28()  throws Throwable  {
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 114, 114, """", """", """", fileType0, """");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(genericURLFileName0, ftpFileSystem0, (FileObject) null);
      delegateFileObject0.attachChild(genericURLFileName0, fileType0);
      boolean boolean0 = FileObjectUtils.exists(delegateFileObject0);
}"
1061,"    public static boolean exists(final FileObject fileObject) throws FileSystemException {
        return fileObject != null && fileObject.exists();
    }","  public void test29()  throws Throwable  {
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject((FileObject) null);
      // Undeclared exception!
      try { 
        FileObjectUtils.exists(synchronizedFileObject0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DecoratedFileObject"", e);
      }
  }"
1062,"    public static boolean exists(final FileObject fileObject) throws FileSystemException {
        return fileObject != null && fileObject.exists();
    }","  public void test30()  throws Throwable  {
      boolean boolean0 = FileObjectUtils.exists((FileObject) null);
}"
1063,"    public static Properties readProperties(final FileObject fileObject) throws FileSystemException, IOException {
        return readProperties(fileObject, new Properties());
    }","  public void test31()  throws Throwable  {
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject((FileObject) null);
      // Undeclared exception!
      try { 
        FileObjectUtils.readProperties((FileObject) onCallRefreshFileObject0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DecoratedFileObject"", e);
      }
  }"
1064,"    protected Reference<FileObject> createReference(final FileObject file, final ReferenceQueue<FileObject> refqueue) {
        return new WeakReference<>(file, refqueue);
    }","  public void test0()  throws Throwable  {
      WeakRefFilesCache weakRefFilesCache0 = new WeakRefFilesCache();
      Reference<FileObject> reference0 = weakRefFilesCache0.createReference((FileObject) null, (ReferenceQueue<FileObject>) null);
}"
1065,"    public synchronized void removeFile(final FileSystem fileSystem, final FileName fileName) {
        if (removeFile(new FileSystemAndNameKey(fileSystem, fileName))) {
            close(fileSystem);
        }
    }","  public void test0()  throws Throwable  {
      SoftRefFilesCache softRefFilesCache0 = new SoftRefFilesCache();
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      LocalFileSystem localFileSystem0 = new LocalFileSystem((FileName) null, ""w2Mn6I%}q.Zg9cA"", fileSystemOptions0);
      FileType fileType0 = FileType.IMAGINARY;
      LayeredFileName layeredFileName0 = new LayeredFileName("""", (FileName) null, ""7el0$vc_N[2Tj{a"", fileType0);
      // Undeclared exception!
      try { 
        softRefFilesCache0.removeFile(localFileSystem0, layeredFileName0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.LayeredFileName"", e);
      }
  }"
1066,"    public synchronized FileObject getFile(final FileSystem fileSystem, final FileName fileName) {
        final Map<FileName, Reference<FileObject>> files = getOrCreateFilesystemCache(fileSystem);

        final Reference<FileObject> ref = files.get(fileName);
        if (ref == null) {
            return null;
        }

        final FileObject fo = ref.get();
        if (fo == null) {
            removeFile(fileSystem, fileName);
        }
        return fo;
    }","  public void test1()  throws Throwable  {
      SoftRefFilesCache softRefFilesCache0 = new SoftRefFilesCache();
      GzipFileSystem gzipFileSystem0 = mock(GzipFileSystem.class, new ViolatedAssumptionAnswer());
      FileType fileType0 = FileType.IMAGINARY;
      LayeredFileName layeredFileName0 = new LayeredFileName(""&7"", (FileName) null, ""&7"", fileType0);
      // Undeclared exception!
      try { 
        softRefFilesCache0.getFile(gzipFileSystem0, layeredFileName0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.LayeredFileName"", e);
      }
  }"
1067,"    public String toString() {
        return super.toString() + "" [releaseThread="" + releaseThread
            + (releaseThread == null ? """" : ""(ID "" + releaseThread.getId() + "" is "" + releaseThread.getState() + "")"")
            + ""]"";
    }","  public void test2()  throws Throwable  {
      SoftRefFilesCache softRefFilesCache0 = new SoftRefFilesCache();
      String string0 = softRefFilesCache0.toString();
}"
1068,"    public synchronized void removeFile(final FileSystem fileSystem, final FileName fileName) {
        if (removeFile(new FileSystemAndNameKey(fileSystem, fileName))) {
            close(fileSystem);
        }
    }","  public void test3()  throws Throwable  {
      SoftRefFilesCache softRefFilesCache0 = new SoftRefFilesCache();
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FileType fileType0 = FileType.FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""b"", ""b"", 77, 77, ""b"", ""b"", ""b"", fileType0, ""b"");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      softRefFilesCache0.removeFile(ftpsFileSystem0, genericURLFileName0);
}"
1069,"    public boolean putFileIfAbsent(final FileObject fileObject) {
        if (log.isDebugEnabled()) {
            log.debug(""putFile: "" + this.getSafeName(fileObject));
        }

        synchronized(this) {
            final Map<FileName, Reference<FileObject>> files = getOrCreateFilesystemCache(fileObject.getFileSystem());

            final Reference<FileObject> ref = createReference(fileObject, refQueue);
            final FileSystemAndNameKey key = new FileSystemAndNameKey(fileObject.getFileSystem(), fileObject.getName());

            if (files.containsKey(fileObject.getName()) && files.get(fileObject.getName()).get() != null) {
                return false;
            }
            final Reference<FileObject> old = files.put(fileObject.getName(), ref);
            if (old != null) {
                refReverseMap.remove(old);
            }
            refReverseMap.put(ref, key);
            return true;
        }
    }","  public void test4()  throws Throwable  {
      SoftRefFilesCache softRefFilesCache0 = new SoftRefFilesCache();
      // Undeclared exception!
      try { 
        softRefFilesCache0.putFileIfAbsent((FileObject) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.cache.SoftRefFilesCache"", e);
      }
  }"
1070,"    public void putFile(final FileObject fileObject) {
        if (log.isDebugEnabled()) {
            log.debug(""putFile: "" + this.getSafeName(fileObject));
        }

        synchronized(this) {
            final Map<FileName, Reference<FileObject>> files = getOrCreateFilesystemCache(fileObject.getFileSystem());

            final Reference<FileObject> ref = createReference(fileObject, refQueue);
            final FileSystemAndNameKey key = new FileSystemAndNameKey(fileObject.getFileSystem(), fileObject.getName());

            final Reference<FileObject> old = files.put(fileObject.getName(), ref);
            if (old != null) {
                refReverseMap.remove(old);
            }
            refReverseMap.put(ref, key);
        }
    }","  public void test5()  throws Throwable  {
      SoftRefFilesCache softRefFilesCache0 = new SoftRefFilesCache();
      // Undeclared exception!
      try { 
        softRefFilesCache0.putFile((FileObject) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.cache.SoftRefFilesCache"", e);
      }
  }"
1071,"    public String toString() {
        return super.toString() + "" [releaseThread="" + releaseThread
            + (releaseThread == null ? """" : ""(ID "" + releaseThread.getId() + "" is "" + releaseThread.getState() + "")"")
            + ""]"";
    }","  public void test6()  throws Throwable  {
      SoftRefFilesCache softRefFilesCache0 = new SoftRefFilesCache();
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem((AbstractFileName) null, fileSystemOptions0);
      softRefFilesCache0.getFile(virtualFileSystem0, (FileName) null);
      String string0 = softRefFilesCache0.toString();
}"
1072,"    public synchronized void clear(final FileSystem fileSystem) {
        final Map<FileName, Reference<FileObject>> files = getOrCreateFilesystemCache(fileSystem);
        final Iterator<FileSystemAndNameKey> iterKeys = refReverseMap.values().iterator();

        while (iterKeys.hasNext()) {
            final FileSystemAndNameKey key = iterKeys.next();
            if (key.getFileSystem() == fileSystem) {
                iterKeys.remove();
                files.remove(key.getFileName());
            }
        }

        if (files.isEmpty()) {
            close(fileSystem);
        }
    }","  public void test7()  throws Throwable  {
      SoftRefFilesCache softRefFilesCache0 = new SoftRefFilesCache();
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FileType fileType0 = FileType.FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""b"", ""b"", 77, 77, ""b"", ""b"", ""b"", fileType0, ""b"");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem((AbstractFileName) null, fileSystemOptions0);
      softRefFilesCache0.getOrCreateFilesystemCache(ftpsFileSystem0);
      softRefFilesCache0.clear(virtualFileSystem0);
}"
1073,"    public synchronized void close() {
        super.close();
        endThread();
        fileSystemCache.clear();
        refReverseMap.clear();
    }","  public void test8()  throws Throwable  {
      SoftRefFilesCache softRefFilesCache0 = new SoftRefFilesCache();
      softRefFilesCache0.close();
  }"
1074,"    protected Reference<FileObject> createReference(final FileObject file, final ReferenceQueue<FileObject> refqueue) {
        return new SoftReference<>(file, refqueue);
    }","  public void test9()  throws Throwable  {
      SoftRefFilesCache softRefFilesCache0 = new SoftRefFilesCache();
      Reference<FileObject> reference0 = softRefFilesCache0.createReference((FileObject) null, (ReferenceQueue<FileObject>) null);
}"
1075,"    public void removeFile(final FileSystem filesystem, final FileName name) {
        // empty
    }","  public void test0()  throws Throwable  {
      NullFilesCache nullFilesCache0 = new NullFilesCache();
      nullFilesCache0.removeFile((FileSystem) null, (FileName) null);
  }"
1076,"    public FileObject getFile(final FileSystem filesystem, final FileName name) {
        return null;
    }","  public void test1()  throws Throwable  {
      NullFilesCache nullFilesCache0 = new NullFilesCache();
      FileSystem fileSystem0 = mock(FileSystem.class, new ViolatedAssumptionAnswer());
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      FileObject fileObject0 = nullFilesCache0.getFile(fileSystem0, fileName0);
}"
1077,"    public boolean putFileIfAbsent(final FileObject file) {
        return false;
    }","  public void test2()  throws Throwable  {
      NullFilesCache nullFilesCache0 = new NullFilesCache();
      boolean boolean0 = nullFilesCache0.putFileIfAbsent((FileObject) null);
}"
1078,"    public void clear(final FileSystem filesystem) {
        // empty
    }","  public void test3()  throws Throwable  {
      NullFilesCache nullFilesCache0 = new NullFilesCache();
      nullFilesCache0.clear((FileSystem) null);
  }"
1079,"    public void putFile(final FileObject file) {
        // empty
    }","  public void test4()  throws Throwable  {
      NullFilesCache nullFilesCache0 = new NullFilesCache();
      nullFilesCache0.putFile((FileObject) null);
  }"
1080,"    public int compareTo(final FileSystemAndNameKey other) {
        if (fileSystemId < other.fileSystemId) {
            return -1;
        }
        if (fileSystemId > other.fileSystemId) {
            return 1;
        }

        return fileName.compareTo(other.fileName);
    }","  public void test0()  throws Throwable  {
      AbstractFileName abstractFileName0 = mock(AbstractFileName.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(abstractFileName0).compareTo(any(org.apache.commons.vfs2.FileName.class));
      doReturn((String) null).when(abstractFileName0).getURI();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(abstractFileName0, (FileSystemOptions) null);
      FileName fileName0 = virtualFileSystem0.getRootName();
      FileSystemAndNameKey fileSystemAndNameKey0 = new FileSystemAndNameKey((FileSystem) null, fileName0);
      FileSystemAndNameKey fileSystemAndNameKey1 = new FileSystemAndNameKey((FileSystem) null, fileName0);
      int int0 = fileSystemAndNameKey0.compareTo(fileSystemAndNameKey1);
}"
1081,"    FileSystem getFileSystem() {
        return fileSystem;
    }","  public void test1()  throws Throwable  {
      AbstractFileName abstractFileName0 = mock(AbstractFileName.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(abstractFileName0).getURI();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(abstractFileName0, (FileSystemOptions) null);
      FileName fileName0 = virtualFileSystem0.getRootName();
      FileSystemAndNameKey fileSystemAndNameKey0 = new FileSystemAndNameKey((FileSystem) null, fileName0);
      FileSystem fileSystem0 = fileSystemAndNameKey0.getFileSystem();
}"
1082,"    FileName getFileName() {
        return fileName;
    }","  public void test2()  throws Throwable  {
      AbstractFileName abstractFileName0 = mock(AbstractFileName.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(abstractFileName0).getURI();
      doReturn((String) null).when(abstractFileName0).toString();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(abstractFileName0, (FileSystemOptions) null);
      FileName fileName0 = virtualFileSystem0.getRootName();
      FileSystemAndNameKey fileSystemAndNameKey0 = new FileSystemAndNameKey((FileSystem) null, fileName0);
      FileName fileName1 = fileSystemAndNameKey0.getFileName();
}"
1083,"    public int compareTo(final FileSystemAndNameKey other) {
        if (fileSystemId < other.fileSystemId) {
            return -1;
        }
        if (fileSystemId > other.fileSystemId) {
            return 1;
        }

        return fileName.compareTo(other.fileName);
    }","  public void test3()  throws Throwable  {
      AbstractFileName abstractFileName0 = mock(AbstractFileName.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(abstractFileName0).getURI();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(abstractFileName0, (FileSystemOptions) null);
      FileSystemAndNameKey fileSystemAndNameKey0 = new FileSystemAndNameKey(virtualFileSystem0, (FileName) null);
      AbstractFileName abstractFileName1 = mock(AbstractFileName.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(abstractFileName1).getURI();
      VirtualFileSystem virtualFileSystem1 = new VirtualFileSystem(abstractFileName1, (FileSystemOptions) null);
      FileName fileName0 = virtualFileSystem0.getRootName();
      FileSystemAndNameKey fileSystemAndNameKey1 = new FileSystemAndNameKey(virtualFileSystem1, fileName0);
      int int0 = fileSystemAndNameKey1.compareTo(fileSystemAndNameKey0);
}"
1084,"    public int compareTo(final FileSystemAndNameKey other) {
        if (fileSystemId < other.fileSystemId) {
            return -1;
        }
        if (fileSystemId > other.fileSystemId) {
            return 1;
        }

        return fileName.compareTo(other.fileName);
    }","  public void test4()  throws Throwable  {
      AbstractFileName abstractFileName0 = mock(AbstractFileName.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(abstractFileName0).getURI();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(abstractFileName0, (FileSystemOptions) null);
      FileSystemAndNameKey fileSystemAndNameKey0 = new FileSystemAndNameKey(virtualFileSystem0, (FileName) null);
      AbstractFileName abstractFileName1 = mock(AbstractFileName.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(abstractFileName1).getURI();
      VirtualFileSystem virtualFileSystem1 = new VirtualFileSystem(abstractFileName1, (FileSystemOptions) null);
      FileName fileName0 = virtualFileSystem0.getRootName();
      FileSystemAndNameKey fileSystemAndNameKey1 = new FileSystemAndNameKey(virtualFileSystem1, fileName0);
      int int0 = fileSystemAndNameKey0.compareTo(fileSystemAndNameKey1);
}"
1085,"    public int compareTo(final FileSystemAndNameKey other) {
        if (fileSystemId < other.fileSystemId) {
            return -1;
        }
        if (fileSystemId > other.fileSystemId) {
            return 1;
        }

        return fileName.compareTo(other.fileName);
    }","  public void test5()  throws Throwable  {
      AbstractFileName abstractFileName0 = mock(AbstractFileName.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(abstractFileName0).getURI();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(abstractFileName0, (FileSystemOptions) null);
      FileSystemAndNameKey fileSystemAndNameKey0 = new FileSystemAndNameKey(virtualFileSystem0, (FileName) null);
      // Undeclared exception!
      try { 
        fileSystemAndNameKey0.compareTo(fileSystemAndNameKey0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.cache.FileSystemAndNameKey"", e);
      }
  }"
1086,"    FileName getFileName() {
        return fileName;
    }","  public void test6()  throws Throwable  {
      AbstractFileName abstractFileName0 = mock(AbstractFileName.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(abstractFileName0).getURI();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(abstractFileName0, (FileSystemOptions) null);
      FileSystemAndNameKey fileSystemAndNameKey0 = new FileSystemAndNameKey(virtualFileSystem0, (FileName) null);
      FileName fileName0 = fileSystemAndNameKey0.getFileName();
}"
1087,"    FileSystem getFileSystem() {
        return fileSystem;
    }","  public void test7()  throws Throwable  {
      AbstractFileName abstractFileName0 = mock(AbstractFileName.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(abstractFileName0).getURI();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(abstractFileName0, (FileSystemOptions) null);
      FileSystemAndNameKey fileSystemAndNameKey0 = new FileSystemAndNameKey(virtualFileSystem0, (FileName) null);
      VirtualFileSystem virtualFileSystem1 = (VirtualFileSystem)fileSystemAndNameKey0.getFileSystem();
}"
1088,"    public void touchFile(final FileObject file) {
        // empty
    }","  public void test0()  throws Throwable  {
      NullFilesCache nullFilesCache0 = new NullFilesCache();
      nullFilesCache0.touchFile((FileObject) null);
  }"
1089,"    public void touchFile(final FileObject file) {
        // empty
    }","  public void test1()  throws Throwable  {
      LRUFilesCache lRUFilesCache0 = new LRUFilesCache();
      // Undeclared exception!
      try { 
        lRUFilesCache0.touchFile((FileObject) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.cache.LRUFilesCache"", e);
      }
  }"
1090,"    public void removeFile(final FileSystem filesystem, final FileName name) {
        // avoid creating filesystem entry for empty filesystem cache:
        final Map<FileName, FileObject> files = filesystemCache.get(filesystem);
        if (files != null) {
            files.remove(name);
            // This would be too racey:
            // if (files.empty()) filesystemCache.remove(filessystem);
        }
    }","  public void test0()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""[1$*xaYBRpzeI"", """", 0, 0, (String) null, ""l/QZ"", ""l/QZ"", fileType0, ""uF"");
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, fileSystemOptions0);
      defaultFilesCache0.getOrCreateFilesystemCache(virtualFileSystem0);
      // Undeclared exception!
      try { 
        defaultFilesCache0.removeFile(virtualFileSystem0, (FileName) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1091,"    public boolean putFileIfAbsent(final FileObject file) {
        final ConcurrentMap<FileName, FileObject> files = getOrCreateFilesystemCache(file.getFileSystem());
        return files.putIfAbsent(file.getName(), file) == null;
    }","  public void test1()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      // Undeclared exception!
      try { 
        defaultFilesCache0.putFileIfAbsent((FileObject) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.cache.DefaultFilesCache"", e);
      }
  }"
1092,"    protected ConcurrentMap<FileName, FileObject> getOrCreateFilesystemCache(final FileSystem filesystem) {
        ConcurrentMap<FileName, FileObject> files = filesystemCache.get(filesystem);
        // we loop to make sure we never return null even when concurrent clean is called
        while (files == null) {
            filesystemCache.putIfAbsent(filesystem, new ConcurrentHashMap<>(200, 0.75f, 8));
            files = filesystemCache.get(filesystem);
        }

        return files;
    }","  public void test2()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      // Undeclared exception!
      try { 
        defaultFilesCache0.getOrCreateFilesystemCache((FileSystem) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1093,"    public FileObject getFile(final FileSystem filesystem, final FileName name) {
        // avoid creating filesystem entry for empty filesystem cache:
        final Map<FileName, FileObject> files = filesystemCache.get(filesystem);
        if (files == null) {
            // cache for filesystem is not known => file is not cached:
            return null;
        }

        return files.get(name); // or null
    }","  public void test3()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      // Undeclared exception!
      try { 
        defaultFilesCache0.getFile((FileSystem) null, (FileName) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1094,"    public void clear(final FileSystem filesystem) {
        // avoid keeping a reference to the FileSystem (key) object
        final Map<FileName, FileObject> files = filesystemCache.remove(filesystem);
        if (files != null) {
            files.clear(); // help GC
        }
    }","  public void test4()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      // Undeclared exception!
      try { 
        defaultFilesCache0.clear((FileSystem) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1095,"    public void removeFile(final FileSystem filesystem, final FileName name) {
        // avoid creating filesystem entry for empty filesystem cache:
        final Map<FileName, FileObject> files = filesystemCache.get(filesystem);
        if (files != null) {
            files.remove(name);
            // This would be too racey:
            // if (files.empty()) filesystemCache.remove(filessystem);
        }
    }","  public void test5()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 5, 5, """", """", """", fileType0, """");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      defaultFilesCache0.getOrCreateFilesystemCache(ftpFileSystem0);
      defaultFilesCache0.removeFile(ftpFileSystem0, genericURLFileName0);
}"
1096,"    public void removeFile(final FileSystem filesystem, final FileName name) {
        // avoid creating filesystem entry for empty filesystem cache:
        final Map<FileName, FileObject> files = filesystemCache.get(filesystem);
        if (files != null) {
            files.remove(name);
            // This would be too racey:
            // if (files.empty()) filesystemCache.remove(filessystem);
        }
    }","  public void test6()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("""", """", 5, 5, """", """", """", fileType0, """");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      defaultFilesCache0.removeFile(ftpFileSystem0, genericURLFileName0);
}"
1097,"    public void clear(final FileSystem filesystem) {
        // avoid keeping a reference to the FileSystem (key) object
        final Map<FileName, FileObject> files = filesystemCache.remove(filesystem);
        if (files != null) {
            files.clear(); // help GC
        }
    }","  public void test7()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""++ f)%~K{Q7-`6"", ""++ f)%~K{Q7-`6"", 3783, 3783, ""++ f)%~K{Q7-`6"", ""++ f)%~K{Q7-`6"", ""++ f)%~K{Q7-`6"", fileType0, ""++ f)%~K{Q7-`6"");
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      LocalFileSystem localFileSystem0 = new LocalFileSystem(genericURLFileName0, ""++ f)%~K{Q7-`6"", fileSystemOptions0);
      defaultFilesCache0.getOrCreateFilesystemCache(localFileSystem0);
      defaultFilesCache0.clear(localFileSystem0);
}"
1098,"    public void clear(final FileSystem filesystem) {
        // avoid keeping a reference to the FileSystem (key) object
        final Map<FileName, FileObject> files = filesystemCache.remove(filesystem);
        if (files != null) {
            files.clear(); // help GC
        }
    }","  public void test8()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      FileType fileType0 = FileType.FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""|]"", ""|]"", (-7), (-7), ""|]"", ""|]"", ""|]"", fileType0, ""|]"");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      defaultFilesCache0.clear(ftpFileSystem0);
}"
1099,"    public FileObject getFile(final FileSystem filesystem, final FileName name) {
        // avoid creating filesystem entry for empty filesystem cache:
        final Map<FileName, FileObject> files = filesystemCache.get(filesystem);
        if (files == null) {
            // cache for filesystem is not known => file is not cached:
            return null;
        }

        return files.get(name); // or null
    }","  public void test9()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      FileType fileType0 = FileType.FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(""|]"", ""|]"", (-7), (-7), ""|]"", ""|]"", ""|]"", fileType0, ""|]"");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      FileObject fileObject0 = defaultFilesCache0.getFile(ftpFileSystem0, genericURLFileName0);
}"
1100,"    public FileObject getFile(final FileSystem filesystem, final FileName name) {
        // avoid creating filesystem entry for empty filesystem cache:
        final Map<FileName, FileObject> files = filesystemCache.get(filesystem);
        if (files == null) {
            // cache for filesystem is not known => file is not cached:
            return null;
        }

        return files.get(name); // or null
    }","  public void test10()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      FileType fileType0 = FileType.FILE;
      VirtualFileName virtualFileName0 = new VirtualFileName(""zB@%}Mk"", ""zB@%}Mk"", fileType0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      LocalFileSystem localFileSystem0 = new LocalFileSystem(virtualFileName0, ""zB@%}Mk"", fileSystemOptions0);
      defaultFilesCache0.getOrCreateFilesystemCache(localFileSystem0);
      FileObject fileObject0 = defaultFilesCache0.getFile(localFileSystem0, virtualFileName0);
}"
1101,"    public void close() {
        super.close();
        filesystemCache.clear();
    }","  public void test11()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      defaultFilesCache0.close();
  }"
1102,"    public void putFile(final FileObject file) {
        final Map<FileName, FileObject> files = getOrCreateFilesystemCache(file.getFileSystem());
        files.put(file.getName(), file);
    }","  public void test12()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      // Undeclared exception!
      try { 
        defaultFilesCache0.putFile((FileObject) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.cache.DefaultFilesCache"", e);
      }
  }"
1103,"    public void execute() throws BuildException {
        if (dirName == null) {
            final String message = Messages.getString(""vfs.tasks/no-directory-specified.error"");
            throw new BuildException(message);
        }

        try {
            final FileObject dir = resolveFile(dirName);
            final String message = Messages.getString(""vfs.tasks/mkdir.create-folder.info"", dir);
            log(message);
            dir.createFolder();
        } catch (final FileSystemException e) {
            throw new BuildException(e);
        }
    }","  public void test0()  throws Throwable  {
      MkdirTask mkdirTask0 = new MkdirTask();
      try { 
        mkdirTask0.execute();
        fail(""Expecting exception: BuildException"");
      } catch(BuildException e) {
         //
         // Unknown message with code \""vfs.tasks/no-directory-specified.error\"".
         //
         verifyException(""org.apache.commons.vfs2.tasks.MkdirTask"", e);
      }
  }"
1104,"    public void execute() throws BuildException {
        if (dirName == null) {
            final String message = Messages.getString(""vfs.tasks/no-directory-specified.error"");
            throw new BuildException(message);
        }

        try {
            final FileObject dir = resolveFile(dirName);
            final String message = Messages.getString(""vfs.tasks/mkdir.create-folder.info"", dir);
            log(message);
            dir.createFolder();
        } catch (final FileSystemException e) {
            throw new BuildException(e);
        }
    }","  public void test1()  throws Throwable  {
      MkdirTask mkdirTask0 = new MkdirTask();
      mkdirTask0.setDir("""");
      // Undeclared exception!
      try { 
        mkdirTask0.execute();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.tools.ant.Task"", e);
      }
  }"
1105,"    public void execute() throws BuildException {
        try {
            try (final FileObject file = resolveFile(url)) {
                log(""Details of "" + file.getPublicURIString());
                showFile(file, INDENT);
            }
        } catch (final Exception e) {
            throw new BuildException(e);
        }
    }","  public void test0()  throws Throwable  {
      ShowFileTask showFileTask0 = new ShowFileTask();
      try { 
        showFileTask0.execute();
        fail(""Expecting exception: BuildException"");
      } catch(BuildException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException(""org.apache.commons.vfs2.tasks.ShowFileTask"", e);
      }
  }"
1106,"    public void setRecursive(final boolean recursive) {
        this.recursive = recursive;
    }","  public void test1()  throws Throwable  {
      ShowFileTask showFileTask0 = new ShowFileTask();
      showFileTask0.setRecursive(true);
  }"
1107,"    public void setFile(final String url) {
        this.url = url;
    }","  public void test2()  throws Throwable  {
      ShowFileTask showFileTask0 = new ShowFileTask();
      showFileTask0.setFile("""");
  }"
1108,"    public void setShowContent(final boolean showContent) {
        this.showContent = showContent;
    }","  public void test3()  throws Throwable  {
      ShowFileTask showFileTask0 = new ShowFileTask();
      showFileTask0.setShowContent(true);
  }"
1109,"    protected boolean detectMissingSourceFiles() {
        return true;
    }","  public void test0()  throws Throwable  {
      SyncTask syncTask0 = new SyncTask();
      boolean boolean0 = syncTask0.detectMissingSourceFiles();
}"
1110,"    protected void handleMissingSourceFile(final FileObject destFile) throws Exception {
        log(""deleting "" + destFile.getPublicURIString());
        // destFile.delete( Selectors.SELECT_SELF );
    }","  public void test1()  throws Throwable  {
      SyncTask syncTask0 = new SyncTask();
      try { 
        syncTask0.handleMissingSourceFile((FileObject) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.tasks.SyncTask"", e);
      }
  }"
1111,"    public int compareTo(final StaticUserAuthenticator other) {
        int result = compareStringOrNull(domain, other.domain);
        result = result == 0 ? compareStringOrNull(username, other.username) : result;
        result = result == 0 ? compareStringOrNull(password, other.password) : result;

        return result;
    }","  public void test0()  throws Throwable  {
      StaticUserAuthenticator staticUserAuthenticator0 = new StaticUserAuthenticator("""", """", """");
      StaticUserAuthenticator staticUserAuthenticator1 = new StaticUserAuthenticator((String) null, (String) null, (String) null);
      int int0 = staticUserAuthenticator0.compareTo(staticUserAuthenticator1);
}"
1112,"    public int hashCode() {
        final int prime = 37;
        int result = 1;
        result = prime * result + (domain == null ? 0 : domain.hashCode());
        result = prime * result + (password == null ? 0 : password.hashCode());
        result = prime * result + (username == null ? 0 : username.hashCode());

        return result;
    }","  public void test1()  throws Throwable  {
      StaticUserAuthenticator staticUserAuthenticator0 = new StaticUserAuthenticator(""Pa$sed "", ""W E"", ""W E"");
      staticUserAuthenticator0.hashCode();
  }"
1113,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        if (domain != null) {
            buffer.append(domain).append('\\');
        }
        if (username != null) {
            buffer.append(username);
        } else {
            buffer.append(""(null)"");
        }
        if (password != null) {
            buffer.append("":***"");
        }
        return buffer.toString();
    }","  public void test2()  throws Throwable  {
      StaticUserAuthenticator staticUserAuthenticator0 = new StaticUserAuthenticator((String) null, """", (String) null);
      String string0 = staticUserAuthenticator0.toString();
}"
1114,"    public UserAuthenticationData requestAuthentication(final UserAuthenticationData.Type[] types) {
        final UserAuthenticationData data = new UserAuthenticationData();
        for (final UserAuthenticationData.Type type : types) {
            if (type == UserAuthenticationData.DOMAIN) {
                data.setData(UserAuthenticationData.DOMAIN, UserAuthenticatorUtils.toChar(domain));
            } else if (type == UserAuthenticationData.USERNAME) {
                data.setData(UserAuthenticationData.USERNAME, UserAuthenticatorUtils.toChar(username));
            } else if (type == UserAuthenticationData.PASSWORD) {
                data.setData(UserAuthenticationData.PASSWORD, UserAuthenticatorUtils.toChar(password));
            } else if (LOG.isDebugEnabled()) {
                LOG.debug(StaticUserAuthenticator.class.getSimpleName()
                        + "" does not support authentication data type '"" + type
                        + ""'; authentication request for this type ignored."");
            }
        }
        return data;
    }","  public void test3()  throws Throwable  {
      StaticUserAuthenticator staticUserAuthenticator0 = new StaticUserAuthenticator((String) null, (String) null, (String) null);
      // Undeclared exception!
      try { 
        staticUserAuthenticator0.requestAuthentication((UserAuthenticationData.Type[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.auth.StaticUserAuthenticator"", e);
      }
  }"
1115,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        if (domain != null) {
            buffer.append(domain).append('\\');
        }
        if (username != null) {
            buffer.append(username);
        } else {
            buffer.append(""(null)"");
        }
        if (password != null) {
            buffer.append("":***"");
        }
        return buffer.toString();
    }","  public void test4()  throws Throwable  {
      StaticUserAuthenticator staticUserAuthenticator0 = new StaticUserAuthenticator("""", ""["", ""] whereas object of type "");
      String string0 = staticUserAuthenticator0.toString();
}"
1116,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        if (domain != null) {
            buffer.append(domain).append('\\');
        }
        if (username != null) {
            buffer.append(username);
        } else {
            buffer.append(""(null)"");
        }
        if (password != null) {
            buffer.append("":***"");
        }
        return buffer.toString();
    }","  public void test5()  throws Throwable  {
      StaticUserAuthenticator staticUserAuthenticator0 = new StaticUserAuthenticator((String) null, (String) null, (String) null);
      String string0 = staticUserAuthenticator0.toString();
}"
1117,"    public int compareTo(final StaticUserAuthenticator other) {
        int result = compareStringOrNull(domain, other.domain);
        result = result == 0 ? compareStringOrNull(username, other.username) : result;
        result = result == 0 ? compareStringOrNull(password, other.password) : result;

        return result;
    }","  public void test6()  throws Throwable  {
      StaticUserAuthenticator staticUserAuthenticator0 = new StaticUserAuthenticator((String) null, (String) null, ""xk7>;UHU\""$G3q* Ltq"");
      StaticUserAuthenticator staticUserAuthenticator1 = new StaticUserAuthenticator((String) null, """", (String) null);
      int int0 = staticUserAuthenticator0.compareTo(staticUserAuthenticator1);
}"
1118,"    public int compareTo(final StaticUserAuthenticator other) {
        int result = compareStringOrNull(domain, other.domain);
        result = result == 0 ? compareStringOrNull(username, other.username) : result;
        result = result == 0 ? compareStringOrNull(password, other.password) : result;

        return result;
    }","  public void test7()  throws Throwable  {
      StaticUserAuthenticator staticUserAuthenticator0 = new StaticUserAuthenticator(""BU{"", ""BU{"", ""BU{"");
      StaticUserAuthenticator staticUserAuthenticator1 = new StaticUserAuthenticator(""BU{"", ""BU{"", (String) null);
      int int0 = staticUserAuthenticator0.compareTo(staticUserAuthenticator1);
}"
1119,"    public int compareTo(final StaticUserAuthenticator other) {
        int result = compareStringOrNull(domain, other.domain);
        result = result == 0 ? compareStringOrNull(username, other.username) : result;
        result = result == 0 ? compareStringOrNull(password, other.password) : result;

        return result;
    }","  public void test8()  throws Throwable  {
      StaticUserAuthenticator staticUserAuthenticator0 = new StaticUserAuthenticator((String) null, (String) null, (String) null);
      int int0 = staticUserAuthenticator0.compareTo(staticUserAuthenticator0);
}"
1120,"    public int compareTo(final StaticUserAuthenticator other) {
        int result = compareStringOrNull(domain, other.domain);
        result = result == 0 ? compareStringOrNull(username, other.username) : result;
        result = result == 0 ? compareStringOrNull(password, other.password) : result;

        return result;
    }","  public void test9()  throws Throwable  {
      StaticUserAuthenticator staticUserAuthenticator0 = new StaticUserAuthenticator(""BU{"", ""BU{"", ""BU{"");
      StaticUserAuthenticator staticUserAuthenticator1 = new StaticUserAuthenticator(""BU{BU{:***"", ""BU{"", (String) null);
      int int0 = staticUserAuthenticator0.compareTo(staticUserAuthenticator1);
}"
1121,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }

        if (obj == null) {
            return false;
        }

        if (getClass() != obj.getClass()) {
            return false;
        }

        final StaticUserAuthenticator other = (StaticUserAuthenticator) obj;
        return Objects.equals(domain, other.domain) && Objects.equals(username, other.username)
            && Objects.equals(password, other.password);
    }","  public void test10()  throws Throwable  {
      StaticUserAuthenticator staticUserAuthenticator0 = new StaticUserAuthenticator(""m"", ""m"", ""m"");
      StaticUserAuthenticator staticUserAuthenticator1 = new StaticUserAuthenticator(""m"", ""m"", ""m"");
      boolean boolean0 = staticUserAuthenticator0.equals(staticUserAuthenticator1);
}"
1122,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }

        if (obj == null) {
            return false;
        }

        if (getClass() != obj.getClass()) {
            return false;
        }

        final StaticUserAuthenticator other = (StaticUserAuthenticator) obj;
        return Objects.equals(domain, other.domain) && Objects.equals(username, other.username)
            && Objects.equals(password, other.password);
    }","  public void test11()  throws Throwable  {
      StaticUserAuthenticator staticUserAuthenticator0 = new StaticUserAuthenticator(""Pa$sed "", ""W E"", ""W E"");
      StaticUserAuthenticator staticUserAuthenticator1 = new StaticUserAuthenticator(""Pa$sed "", ""W E"", ""Pa$sed "");
      boolean boolean0 = staticUserAuthenticator1.equals(staticUserAuthenticator0);
}"
1123,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }

        if (obj == null) {
            return false;
        }

        if (getClass() != obj.getClass()) {
            return false;
        }

        final StaticUserAuthenticator other = (StaticUserAuthenticator) obj;
        return Objects.equals(domain, other.domain) && Objects.equals(username, other.username)
            && Objects.equals(password, other.password);
    }","  public void test12()  throws Throwable  {
      StaticUserAuthenticator staticUserAuthenticator0 = new StaticUserAuthenticator(""BU{"", ""BU{"", ""BU{"");
      StaticUserAuthenticator staticUserAuthenticator1 = new StaticUserAuthenticator(""BU{BU{:***"", ""BU{"", (String) null);
      boolean boolean0 = staticUserAuthenticator1.equals(staticUserAuthenticator0);
}"
1124,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }

        if (obj == null) {
            return false;
        }

        if (getClass() != obj.getClass()) {
            return false;
        }

        final StaticUserAuthenticator other = (StaticUserAuthenticator) obj;
        return Objects.equals(domain, other.domain) && Objects.equals(username, other.username)
            && Objects.equals(password, other.password);
    }","  public void test13()  throws Throwable  {
      StaticUserAuthenticator staticUserAuthenticator0 = new StaticUserAuthenticator("""", ""zwvwg7d.r`.QlX"", """");
      StaticUserAuthenticator staticUserAuthenticator1 = new StaticUserAuthenticator("""", """", """");
      boolean boolean0 = staticUserAuthenticator0.equals(staticUserAuthenticator1);
}"
1125,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }

        if (obj == null) {
            return false;
        }

        if (getClass() != obj.getClass()) {
            return false;
        }

        final StaticUserAuthenticator other = (StaticUserAuthenticator) obj;
        return Objects.equals(domain, other.domain) && Objects.equals(username, other.username)
            && Objects.equals(password, other.password);
    }","  public void test14()  throws Throwable  {
      StaticUserAuthenticator staticUserAuthenticator0 = new StaticUserAuthenticator("""", ""["", ""] whereas object of type "");
      Object object0 = new Object();
      boolean boolean0 = staticUserAuthenticator0.equals(object0);
}"
1126,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }

        if (obj == null) {
            return false;
        }

        if (getClass() != obj.getClass()) {
            return false;
        }

        final StaticUserAuthenticator other = (StaticUserAuthenticator) obj;
        return Objects.equals(domain, other.domain) && Objects.equals(username, other.username)
            && Objects.equals(password, other.password);
    }","  public void test15()  throws Throwable  {
      StaticUserAuthenticator staticUserAuthenticator0 = new StaticUserAuthenticator((String) null, (String) null, (String) null);
      boolean boolean0 = staticUserAuthenticator0.equals(staticUserAuthenticator0);
}"
1127,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }

        if (obj == null) {
            return false;
        }

        if (getClass() != obj.getClass()) {
            return false;
        }

        final StaticUserAuthenticator other = (StaticUserAuthenticator) obj;
        return Objects.equals(domain, other.domain) && Objects.equals(username, other.username)
            && Objects.equals(password, other.password);
    }","  public void test16()  throws Throwable  {
      StaticUserAuthenticator staticUserAuthenticator0 = new StaticUserAuthenticator((String) null, (String) null, (String) null);
      boolean boolean0 = staticUserAuthenticator0.equals((Object) null);
}"
1128,"    public int hashCode() {
        final int prime = 37;
        int result = 1;
        result = prime * result + (domain == null ? 0 : domain.hashCode());
        result = prime * result + (password == null ? 0 : password.hashCode());
        result = prime * result + (username == null ? 0 : username.hashCode());

        return result;
    }","  public void test17()  throws Throwable  {
      StaticUserAuthenticator staticUserAuthenticator0 = new StaticUserAuthenticator((String) null, (String) null, (String) null);
      staticUserAuthenticator0.hashCode();
  }"
1129,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }

        if (obj == null) {
            return false;
        }

        if (getClass() != obj.getClass()) {
            return false;
        }

        final StaticUserAuthenticator other = (StaticUserAuthenticator) obj;
        return Objects.equals(domain, other.domain) && Objects.equals(username, other.username)
            && Objects.equals(password, other.password);
    }","  public void test18()  throws Throwable  {
      StaticUserAuthenticator staticUserAuthenticator0 = new StaticUserAuthenticator((String) null, (String) null, (String) null);
      UserAuthenticationData.Type[] userAuthenticationData_TypeArray0 = new UserAuthenticationData.Type[8];
      UserAuthenticationData userAuthenticationData0 = staticUserAuthenticator0.requestAuthentication(userAuthenticationData_TypeArray0);
      UserAuthenticationData.Type[] userAuthenticationData_TypeArray1 = new UserAuthenticationData.Type[10];
      userAuthenticationData_TypeArray1[0] = userAuthenticationData0.PASSWORD;
      UserAuthenticationData userAuthenticationData1 = staticUserAuthenticator0.requestAuthentication(userAuthenticationData_TypeArray1);
}"
1130,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }

        if (obj == null) {
            return false;
        }

        if (getClass() != obj.getClass()) {
            return false;
        }

        final StaticUserAuthenticator other = (StaticUserAuthenticator) obj;
        return Objects.equals(domain, other.domain) && Objects.equals(username, other.username)
            && Objects.equals(password, other.password);
    }","  public void test19()  throws Throwable  {
      StaticUserAuthenticator staticUserAuthenticator0 = new StaticUserAuthenticator((String) null, (String) null, (String) null);
      UserAuthenticationData.Type[] userAuthenticationData_TypeArray0 = new UserAuthenticationData.Type[8];
      UserAuthenticationData userAuthenticationData0 = staticUserAuthenticator0.requestAuthentication(userAuthenticationData_TypeArray0);
      UserAuthenticationData.Type[] userAuthenticationData_TypeArray1 = new UserAuthenticationData.Type[10];
      userAuthenticationData_TypeArray1[3] = userAuthenticationData0.USERNAME;
      UserAuthenticationData userAuthenticationData1 = staticUserAuthenticator0.requestAuthentication(userAuthenticationData_TypeArray1);
}"
1131,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }

        if (obj == null) {
            return false;
        }

        if (getClass() != obj.getClass()) {
            return false;
        }

        final StaticUserAuthenticator other = (StaticUserAuthenticator) obj;
        return Objects.equals(domain, other.domain) && Objects.equals(username, other.username)
            && Objects.equals(password, other.password);
    }","  public void test20()  throws Throwable  {
      StaticUserAuthenticator staticUserAuthenticator0 = new StaticUserAuthenticator((String) null, (String) null, (String) null);
      UserAuthenticationData.Type[] userAuthenticationData_TypeArray0 = new UserAuthenticationData.Type[8];
      UserAuthenticationData userAuthenticationData0 = staticUserAuthenticator0.requestAuthentication(userAuthenticationData_TypeArray0);
      UserAuthenticationData.Type[] userAuthenticationData_TypeArray1 = new UserAuthenticationData.Type[10];
      userAuthenticationData_TypeArray1[7] = userAuthenticationData0.DOMAIN;
      UserAuthenticationData userAuthenticationData1 = staticUserAuthenticator0.requestAuthentication(userAuthenticationData_TypeArray1);
}"
1132,"    public int compareTo(final StaticUserAuthenticator other) {
        int result = compareStringOrNull(domain, other.domain);
        result = result == 0 ? compareStringOrNull(username, other.username) : result;
        result = result == 0 ? compareStringOrNull(password, other.password) : result;

        return result;
    }","  public void test21()  throws Throwable  {
      StaticUserAuthenticator staticUserAuthenticator0 = new StaticUserAuthenticator("""", ""Mq**['af]H'5I"", ""(nX8a[l7hBY^WzJ{="");
      // Undeclared exception!
      try { 
        staticUserAuthenticator0.compareTo((StaticUserAuthenticator) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.auth.StaticUserAuthenticator"", e);
      }
  }"
1133,"    public void notify(final FileListener listener) throws Exception {
        listener.fileDeleted(this);
    }","  public void test0()  throws Throwable  {
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      DeleteEvent deleteEvent0 = new DeleteEvent(fileObject0);
      try { 
        deleteEvent0.notify((FileListener) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.events.DeleteEvent"", e);
      }
  }"
1134,"    public void notify(final FileListener listener) throws Exception {
        listener.fileDeleted(this);
    }","  public void test1()  throws Throwable  {
      DeleteEvent deleteEvent0 = new DeleteEvent((FileObject) null);
      FileListener fileListener0 = mock(FileListener.class, new ViolatedAssumptionAnswer());
      deleteEvent0.notify(fileListener0);
  }"
1135,"    public void notify(final FileListener listener) throws Exception {
        listener.fileChanged(this);
    }","  public void test0()  throws Throwable  {
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      ChangedEvent changedEvent0 = new ChangedEvent(fileObject0);
      try { 
        changedEvent0.notify((FileListener) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.events.ChangedEvent"", e);
      }
  }"
1136,"    public void notify(final FileListener listener) throws Exception {
        listener.fileChanged(this);
    }","  public void test1()  throws Throwable  {
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      ChangedEvent changedEvent0 = new ChangedEvent(fileObject0);
      FileListener fileListener0 = mock(FileListener.class, new ViolatedAssumptionAnswer());
      changedEvent0.notify(fileListener0);
  }"
1137,"    public abstract void notify(final FileListener listener) throws Exception;
}
","  public void test0()  throws Throwable  {
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      DeleteEvent deleteEvent0 = new DeleteEvent(fileObject0);
      FileListener fileListener0 = mock(FileListener.class, new ViolatedAssumptionAnswer());
      deleteEvent0.notify(fileListener0);
  }"
1138,"    public abstract void notify(final FileListener listener) throws Exception;
}
","  public void test1()  throws Throwable  {
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      CreateEvent createEvent0 = new CreateEvent(fileObject0);
      try { 
        createEvent0.notify((FileListener) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.events.CreateEvent"", e);
      }
  }"
1139,"    public void notify(final FileListener listener) throws Exception {
        listener.fileCreated(this);
    }","  public void test0()  throws Throwable  {
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      CreateEvent createEvent0 = new CreateEvent(fileObject0);
      try { 
        createEvent0.notify((FileListener) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.events.CreateEvent"", e);
      }
  }"
1140,"    public void notify(final FileListener listener) throws Exception {
        listener.fileCreated(this);
    }","  public void test1()  throws Throwable  {
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      CreateEvent createEvent0 = new CreateEvent(fileObject0);
      FileListener fileListener0 = mock(FileListener.class, new ViolatedAssumptionAnswer());
      createEvent0.notify(fileListener0);
  }"
1141,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        try (final FileObject file = fileSelectInfo.getFile()) {
            if (!file.exists()) {
                return false;
            }
            try (final FileContent content = file.getContent()) {
                final long length = content.getSize();
                final boolean smaller = length < size;
                return acceptLarger != smaller;
            }
        }
    }","  public void test0()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(0L);
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      doReturn(4500L).when(fileContent0).getSize();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fileObject0).exists();
      doReturn(fileContent0).when(fileObject0).getContent();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = sizeFileFilter0.accept(fileSelectInfo0);
}"
1142,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        try (final FileObject file = fileSelectInfo.getFile()) {
            if (!file.exists()) {
                return false;
            }
            try (final FileContent content = file.getContent()) {
                final long length = content.getSize();
                final boolean smaller = length < size;
                return acceptLarger != smaller;
            }
        }
    }","  public void test1()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(1L);
      // Undeclared exception!
      try { 
        sizeFileFilter0.accept((FileSelectInfo) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.SizeFileFilter"", e);
      }
  }"
1143,"    public SizeFileFilter(final long size) {
        this(size, true);
    }","  public void test2()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = null;
      try {
        sizeFileFilter0 = new SizeFileFilter((-1L), true);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The size must be non-negative
         //
         verifyException(""org.apache.commons.vfs2.filter.SizeFileFilter"", e);
      }
  }"
1144,"    public String toString() {
        final String condition = acceptLarger ? "">="" : ""<"";
        return super.toString() + ""("" + condition + size + "")"";
    }","  public void test3()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(938L);
      String string0 = sizeFileFilter0.toString();
}"
1145,"    public String toString() {
        final String condition = acceptLarger ? "">="" : ""<"";
        return super.toString() + ""("" + condition + size + "")"";
    }","  public void test4()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(1203L, false);
      String string0 = sizeFileFilter0.toString();
}"
1146,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        try (final FileObject file = fileSelectInfo.getFile()) {
            if (!file.exists()) {
                return false;
            }
            try (final FileContent content = file.getContent()) {
                final long length = content.getSize();
                final boolean smaller = length < size;
                return acceptLarger != smaller;
            }
        }
    }","  public void test5()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(0L);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSelectInfo0).getFile();
      // Undeclared exception!
      try { 
        sizeFileFilter0.accept(fileSelectInfo0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.SizeFileFilter"", e);
      }
  }"
1147,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        try (final FileObject file = fileSelectInfo.getFile()) {
            if (!file.exists()) {
                return false;
            }
            try (final FileContent content = file.getContent()) {
                final long length = content.getSize();
                final boolean smaller = length < size;
                return acceptLarger != smaller;
            }
        }
    }","  public void test6()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(938L);
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fileObject0).exists();
      doReturn((FileContent) null).when(fileObject0).getContent();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      // Undeclared exception!
      try { 
        sizeFileFilter0.accept(fileSelectInfo0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.SizeFileFilter"", e);
      }
  }"
1148,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        try (final FileObject file = fileSelectInfo.getFile()) {
            if (!file.exists()) {
                return false;
            }
            try (final FileContent content = file.getContent()) {
                final long length = content.getSize();
                final boolean smaller = length < size;
                return acceptLarger != smaller;
            }
        }
    }","  public void test7()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(1266L);
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(fileContent0).getSize();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fileObject0).exists();
      doReturn(fileContent0).when(fileObject0).getContent();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = sizeFileFilter0.accept(fileSelectInfo0);
}"
1149,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        try (final FileObject file = fileSelectInfo.getFile()) {
            if (!file.exists()) {
                return false;
            }
            try (final FileContent content = file.getContent()) {
                final long length = content.getSize();
                final boolean smaller = length < size;
                return acceptLarger != smaller;
            }
        }
    }","  public void test8()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(702L, true);
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(fileObject0).exists();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = sizeFileFilter0.accept(fileSelectInfo0);
}"
1150,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        try (final FileObject file = fileSelectInfo.getFile()) {
            if (!file.exists()) {
                return false;
            }
            try (final FileContent content = file.getContent()) {
                final long length = content.getSize();
                final boolean smaller = length < size;
                return acceptLarger != smaller;
            }
        }
    }","  public void test9()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(0L);
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(fileContent0).getSize();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fileObject0).exists();
      doReturn(fileContent0).when(fileObject0).getContent();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = sizeFileFilter0.accept(fileSelectInfo0);
}"
1151,"    public SizeFileFilter(final long size) {
        this(size, true);
    }","  public void test10()  throws Throwable  {
      SizeFileFilter sizeFileFilter0 = null;
      try {
        sizeFileFilter0 = new SizeFileFilter((-1390L));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The size must be non-negative
         //
         verifyException(""org.apache.commons.vfs2.filter.SizeFileFilter"", e);
      }
  }"
1152,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        return fileSelectInfo.getFile().isReadable();
    }","  public void test0()  throws Throwable  {
      CanReadFileFilter canReadFileFilter0 = new CanReadFileFilter();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(fileObject0).isReadable();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = canReadFileFilter0.accept(fileSelectInfo0);
}"
1153,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        return fileSelectInfo.getFile().isReadable();
    }","  public void test1()  throws Throwable  {
      CanReadFileFilter canReadFileFilter0 = new CanReadFileFilter();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSelectInfo0).getFile();
      // Undeclared exception!
      try { 
        canReadFileFilter0.accept(fileSelectInfo0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.CanReadFileFilter"", e);
      }
  }"
1154,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        return fileSelectInfo.getFile().isReadable();
    }","  public void test2()  throws Throwable  {
      CanReadFileFilter canReadFileFilter0 = new CanReadFileFilter();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fileObject0).isReadable();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = canReadFileFilter0.accept(fileSelectInfo0);
}"
1155,"    public boolean accept(final FileSelectInfo fileSelectInfo) {
        return true;
    }","  public void test0()  throws Throwable  {
      TrueFileFilter trueFileFilter0 = new TrueFileFilter();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = trueFileFilter0.accept(fileSelectInfo0);
}"
1156,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        return fileSelectInfo.getFile().getType() == FileType.FOLDER;
    }","  public void test0()  throws Throwable  {
      DirectoryFileFilter directoryFileFilter0 = new DirectoryFileFilter();
      // Undeclared exception!
      try { 
        directoryFileFilter0.accept((FileSelectInfo) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.DirectoryFileFilter"", e);
      }
  }"
1157,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        return fileSelectInfo.getFile().getType() == FileType.FOLDER;
    }","  public void test1()  throws Throwable  {
      DirectoryFileFilter directoryFileFilter0 = new DirectoryFileFilter();
      FileType fileType0 = FileType.FOLDER;
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileType0).when(fileObject0).getType();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = directoryFileFilter0.accept(fileSelectInfo0);
}"
1158,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        return fileSelectInfo.getFile().getType() == FileType.FOLDER;
    }","  public void test2()  throws Throwable  {
      DirectoryFileFilter directoryFileFilter0 = new DirectoryFileFilter();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileType) null).when(fileObject0).getType();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = directoryFileFilter0.accept(fileSelectInfo0);
}"
1159,"    public boolean accept(final FileSelectInfo fileSelectInfo) {
        final String name = fileSelectInfo.getFile().getName().getBaseName();
        for (final String name2 : this.names) {
            if (caseSensitivity.checkEquals(name, name2)) {
                return true;
            }
        }
        return false;
    }","  public void test0()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      NameFileFilter nameFileFilter0 = new NameFileFilter(arrayList0);
      // Undeclared exception!
      try { 
        nameFileFilter0.accept((FileSelectInfo) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.NameFileFilter"", e);
      }
  }"
1160,"    public boolean accept(final FileSelectInfo fileSelectInfo) {
        final String name = fileSelectInfo.getFile().getName().getBaseName();
        for (final String name2 : this.names) {
            if (caseSensitivity.checkEquals(name, name2)) {
                return true;
            }
        }
        return false;
    }","  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[1];
      NameFileFilter nameFileFilter0 = new NameFileFilter(stringArray0);
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fileName0).getBaseName();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      // Undeclared exception!
      try { 
        nameFileFilter0.accept(fileSelectInfo0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The strings must not be null
         //
         verifyException(""org.apache.commons.vfs2.filter.IOCase"", e);
      }
  }"
1161,"    public NameFileFilter(final List<String> names) {
        this((IOCase) null, names);
    }","  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[2];
      NameFileFilter nameFileFilter0 = new NameFileFilter((IOCase) null, stringArray0);
  }"
1162,"    public NameFileFilter(final List<String> names) {
        this((IOCase) null, names);
    }","  public void test3()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      NameFileFilter nameFileFilter0 = null;
      try {
        nameFileFilter0 = new NameFileFilter(iOCase0, (String[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The array of names must not be null
         //
         verifyException(""org.apache.commons.vfs2.filter.NameFileFilter"", e);
      }
  }"
1163,"    public NameFileFilter(final List<String> names) {
        this((IOCase) null, names);
    }","  public void test4()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      NameFileFilter nameFileFilter0 = new NameFileFilter((IOCase) null, vector0);
  }"
1164,"    public NameFileFilter(final List<String> names) {
        this((IOCase) null, names);
    }","  public void test5()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      NameFileFilter nameFileFilter0 = null;
      try {
        nameFileFilter0 = new NameFileFilter(iOCase0, (List<String>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The list of names must not be null
         //
         verifyException(""org.apache.commons.vfs2.filter.NameFileFilter"", e);
      }
  }"
1165,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(super.toString());
        buffer.append(""("");
        if (names != null) {
            for (int i = 0; i < names.size(); i++) {
                if (i > 0) {
                    buffer.append("","");
                }
                buffer.append(names.get(i));
            }
        }
        buffer.append("")"");
        return buffer.toString();
    }","  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[4];
      NameFileFilter nameFileFilter0 = new NameFileFilter(stringArray0);
      String string0 = nameFileFilter0.toString();
}"
1166,"    public boolean accept(final FileSelectInfo fileSelectInfo) {
        final String name = fileSelectInfo.getFile().getName().getBaseName();
        for (final String name2 : this.names) {
            if (caseSensitivity.checkEquals(name, name2)) {
                return true;
            }
        }
        return false;
    }","  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ""t%~"";
      NameFileFilter nameFileFilter0 = new NameFileFilter(stringArray0);
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn(""t%~"").when(fileName0).getBaseName();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = nameFileFilter0.accept(fileSelectInfo0);
}"
1167,"    public boolean accept(final FileSelectInfo fileSelectInfo) {
        final String name = fileSelectInfo.getFile().getName().getBaseName();
        for (final String name2 : this.names) {
            if (caseSensitivity.checkEquals(name, name2)) {
                return true;
            }
        }
        return false;
    }","  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = """";
      stringArray0[1] = """";
      stringArray0[2] = """";
      stringArray0[3] = """";
      NameFileFilter nameFileFilter0 = new NameFileFilter(stringArray0);
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn(""Q|ChqtCZHQc1[f|"").when(fileName0).getBaseName();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = nameFileFilter0.accept(fileSelectInfo0);
}"
1168,"    public NameFileFilter(final List<String> names) {
        this((IOCase) null, names);
    }","  public void test9()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      String[] stringArray0 = new String[8];
      NameFileFilter nameFileFilter0 = new NameFileFilter(iOCase0, stringArray0);
  }"
1169,"    public NameFileFilter(final List<String> names) {
        this((IOCase) null, names);
    }","  public void test10()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      IOCase iOCase0 = IOCase.SYSTEM;
      NameFileFilter nameFileFilter0 = new NameFileFilter(iOCase0, stack0);
  }"
1170,"    public NameFileFilter(final List<String> names) {
        this((IOCase) null, names);
    }","  public void test11()  throws Throwable  {
      NameFileFilter nameFileFilter0 = null;
      try {
        nameFileFilter0 = new NameFileFilter((List<String>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The list of names must not be null
         //
         verifyException(""org.apache.commons.vfs2.filter.NameFileFilter"", e);
      }
  }"
1171,"    public NameFileFilter(final List<String> names) {
        this((IOCase) null, names);
    }","  public void test12()  throws Throwable  {
      NameFileFilter nameFileFilter0 = null;
      try {
        nameFileFilter0 = new NameFileFilter((String[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The array of names must not be null
         //
         verifyException(""org.apache.commons.vfs2.filter.NameFileFilter"", e);
      }
  }"
1172,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        if (!fileSelectInfo.getFile().exists()) {
            return false;
        }
        return fileSelectInfo.getFile().isSymbolicLink();
    }","  public void test0()  throws Throwable  {
      SymbolicLinkFileFilter symbolicLinkFileFilter0 = (SymbolicLinkFileFilter)SymbolicLinkFileFilter.SYMBOLIC;
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fileObject0).exists();
      FileObject fileObject1 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fileObject1).isSymbolicLink();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0, fileObject1).when(fileSelectInfo0).getFile();
      boolean boolean0 = symbolicLinkFileFilter0.accept(fileSelectInfo0);
}"
1173,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        if (!fileSelectInfo.getFile().exists()) {
            return false;
        }
        return fileSelectInfo.getFile().isSymbolicLink();
    }","  public void test1()  throws Throwable  {
      SymbolicLinkFileFilter symbolicLinkFileFilter0 = new SymbolicLinkFileFilter();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(fileObject0).exists();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = symbolicLinkFileFilter0.accept(fileSelectInfo0);
}"
1174,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        if (!fileSelectInfo.getFile().exists()) {
            return false;
        }
        return fileSelectInfo.getFile().isSymbolicLink();
    }","  public void test2()  throws Throwable  {
      SymbolicLinkFileFilter symbolicLinkFileFilter0 = (SymbolicLinkFileFilter)SymbolicLinkFileFilter.SYMBOLIC;
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fileObject0).exists();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0, (FileObject) null).when(fileSelectInfo0).getFile();
      // Undeclared exception!
      try { 
        symbolicLinkFileFilter0.accept(fileSelectInfo0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.SymbolicLinkFileFilter"", e);
      }
  }"
1175,"    public boolean removeFileFilter(final FileFilter fileFilter) {
        return this.fileFilters.remove(fileFilter);
    }","  public void test0()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(list0);
      orFileFilter0.addFileFilter(suffixFileFilter0);
      boolean boolean0 = orFileFilter0.removeFileFilter(suffixFileFilter0);
}"
1176,"    public void setFileFilters(final List<FileFilter> fileFilters) {
        this.fileFilters.clear();
        this.fileFilters.addAll(fileFilters);
    }","  public void test1()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter((List<FileFilter>) null);
      // Undeclared exception!
      try { 
        orFileFilter0.setFileFilters((List<FileFilter>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1177,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        for (final FileFilter fileFilter : fileFilters) {
            if (fileFilter.accept(fileSelectInfo)) {
                return true;
            }
        }
        return false;
    }","  public void test2()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      EmptyFileFilter emptyFileFilter0 = (EmptyFileFilter)EmptyFileFilter.EMPTY;
      orFileFilter0.addFileFilter(emptyFileFilter0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSelectInfo0).getFile();
      // Undeclared exception!
      try { 
        orFileFilter0.accept(fileSelectInfo0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.EmptyFileFilter"", e);
      }
  }"
1178,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(super.toString());
        buffer.append(""("");
        if (fileFilters != null) {
            for (int i = 0; i < fileFilters.size(); i++) {
                if (i > 0) {
                    buffer.append("","");
                }
                final Object filter = fileFilters.get(i);
                buffer.append(filter == null ? ""null"" : filter.toString());
            }
        }
        buffer.append("")"");
        return buffer.toString();
    }","  public void test3()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      EmptyFileFilter emptyFileFilter0 = (EmptyFileFilter)EmptyFileFilter.EMPTY;
      orFileFilter0.addFileFilter(emptyFileFilter0);
      orFileFilter0.addFileFilter((FileFilter) null);
      String string0 = orFileFilter0.toString();
}"
1179,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(super.toString());
        buffer.append(""("");
        if (fileFilters != null) {
            for (int i = 0; i < fileFilters.size(); i++) {
                if (i > 0) {
                    buffer.append("","");
                }
                final Object filter = fileFilters.get(i);
                buffer.append(filter == null ? ""null"" : filter.toString());
            }
        }
        buffer.append("")"");
        return buffer.toString();
    }","  public void test4()  throws Throwable  {
      Stack<FileFilter> stack0 = new Stack<FileFilter>();
      FalseFileFilter falseFileFilter0 = new FalseFileFilter();
      OrFileFilter orFileFilter0 = new OrFileFilter(stack0);
      orFileFilter0.addFileFilter(falseFileFilter0);
      String string0 = orFileFilter0.toString();
}"
1180,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        for (final FileFilter fileFilter : fileFilters) {
            if (fileFilter.accept(fileSelectInfo)) {
                return true;
            }
        }
        return false;
    }","  public void test5()  throws Throwable  {
      Stack<FileFilter> stack0 = new Stack<FileFilter>();
      FalseFileFilter falseFileFilter0 = new FalseFileFilter();
      OrFileFilter orFileFilter0 = new OrFileFilter(stack0);
      orFileFilter0.addFileFilter(falseFileFilter0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = orFileFilter0.accept(fileSelectInfo0);
}"
1181,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        for (final FileFilter fileFilter : fileFilters) {
            if (fileFilter.accept(fileSelectInfo)) {
                return true;
            }
        }
        return false;
    }","  public void test6()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      orFileFilter0.addFileFilter((FileFilter) null);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        orFileFilter0.accept(fileSelectInfo0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.OrFileFilter"", e);
      }
  }"
1182,"    public OrFileFilter() {
        this.fileFilters = new ArrayList<>();
    }","  public void test7()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      List<FileFilter> list0 = orFileFilter0.getFileFilters();
      OrFileFilter orFileFilter1 = new OrFileFilter(list0);
}"
1183,"    public OrFileFilter() {
        this.fileFilters = new ArrayList<>();
    }","  public void test8()  throws Throwable  {
      FileFilter[] fileFilterArray0 = new FileFilter[1];
      AndFileFilter andFileFilter0 = new AndFileFilter();
      fileFilterArray0[0] = (FileFilter) andFileFilter0;
      OrFileFilter orFileFilter0 = new OrFileFilter(fileFilterArray0);
  }"
1184,"    public OrFileFilter() {
        this.fileFilters = new ArrayList<>();
    }","  public void test9()  throws Throwable  {
      FileFilter[] fileFilterArray0 = new FileFilter[1];
      OrFileFilter orFileFilter0 = null;
      try {
        orFileFilter0 = new OrFileFilter(fileFilterArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Null filters are not allowed
         //
         verifyException(""org.apache.commons.vfs2.filter.OrFileFilter"", e);
      }
  }"
1185,"    public OrFileFilter() {
        this.fileFilters = new ArrayList<>();
    }","  public void test10()  throws Throwable  {
      FileFilter[] fileFilterArray0 = new FileFilter[0];
      OrFileFilter orFileFilter0 = null;
      try {
        orFileFilter0 = new OrFileFilter(fileFilterArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The filters must not be null or empty
         //
         verifyException(""org.apache.commons.vfs2.filter.OrFileFilter"", e);
      }
  }"
1186,"    public OrFileFilter() {
        this.fileFilters = new ArrayList<>();
    }","  public void test11()  throws Throwable  {
      OrFileFilter orFileFilter0 = null;
      try {
        orFileFilter0 = new OrFileFilter((FileFilter[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The filters must not be null or empty
         //
         verifyException(""org.apache.commons.vfs2.filter.OrFileFilter"", e);
      }
  }"
1187,"    public boolean removeFileFilter(final FileFilter fileFilter) {
        return this.fileFilters.remove(fileFilter);
    }","  public void test12()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      boolean boolean0 = orFileFilter0.removeFileFilter(orFileFilter0);
}"
1188,"    public void setFileFilters(final List<FileFilter> fileFilters) {
        this.fileFilters.clear();
        this.fileFilters.addAll(fileFilters);
    }","  public void test13()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      List<FileFilter> list0 = orFileFilter0.getFileFilters();
      orFileFilter0.setFileFilters(list0);
}"
1189,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        for (final FileFilter fileFilter : fileFilters) {
            if (fileFilter.accept(fileSelectInfo)) {
                return true;
            }
        }
        return false;
    }","  public void test14()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter((List<FileFilter>) null);
      TrueFileFilter trueFileFilter0 = new TrueFileFilter();
      orFileFilter0.addFileFilter(trueFileFilter0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = orFileFilter0.accept(fileSelectInfo0);
}"
1190,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        return fileSelectInfo.getFile().getType() == FileType.FILE;
    }","  public void test0()  throws Throwable  {
      FileFileFilter fileFileFilter0 = (FileFileFilter)FileFileFilter.FILE;
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSelectInfo0).getFile();
      // Undeclared exception!
      try { 
        fileFileFilter0.accept(fileSelectInfo0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.FileFileFilter"", e);
      }
  }"
1191,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        return fileSelectInfo.getFile().getType() == FileType.FILE;
    }","  public void test1()  throws Throwable  {
      FileFileFilter fileFileFilter0 = (FileFileFilter)FileFileFilter.FILE;
      FileType fileType0 = FileType.FILE;
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileType0).when(fileObject0).getType();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = fileFileFilter0.accept(fileSelectInfo0);
}"
1192,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        return fileSelectInfo.getFile().getType() == FileType.FILE;
    }","  public void test2()  throws Throwable  {
      FileFileFilter fileFileFilter0 = (FileFileFilter)FileFileFilter.FILE;
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileType) null).when(fileObject0).getType();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = fileFileFilter0.accept(fileSelectInfo0);
}"
1193,"    protected FileFileFilter() {
    }","  public void test3()  throws Throwable  {
      FileFileFilter fileFileFilter0 = new FileFileFilter();
  }"
1194,"    public boolean removeFileFilter(final FileFilter fileFilter) {
        return this.fileFilters.remove(fileFilter);
    }","  public void test0()  throws Throwable  {
      FileFilter[] fileFilterArray0 = new FileFilter[1];
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.TRUE;
      fileFilterArray0[0] = (FileFilter) trueFileFilter0;
      AndFileFilter andFileFilter0 = new AndFileFilter(fileFilterArray0);
      boolean boolean0 = andFileFilter0.removeFileFilter(fileFilterArray0[0]);
}"
1195,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        if (this.fileFilters.isEmpty()) {
            return false;
        }
        for (final FileFilter fileFilter : fileFilters) {
            if (!fileFilter.accept(fileSelectInfo)) {
                return false;
            }
        }
        return true;
    }","  public void test1()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      List<FileFilter> list0 = orFileFilter0.getFileFilters();
      AndFileFilter andFileFilter0 = new AndFileFilter(list0);
      List<FileFilter> list1 = andFileFilter0.getFileFilters();
      andFileFilter0.addFileFilter(orFileFilter0);
      orFileFilter0.setFileFilters(list1);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        andFileFilter0.accept(fileSelectInfo0);
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1196,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        if (this.fileFilters.isEmpty()) {
            return false;
        }
        for (final FileFilter fileFilter : fileFilters) {
            if (!fileFilter.accept(fileSelectInfo)) {
                return false;
            }
        }
        return true;
    }","  public void test2()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      SymbolicLinkFileFilter symbolicLinkFileFilter0 = (SymbolicLinkFileFilter)SymbolicLinkFileFilter.SYMBOLIC;
      andFileFilter0.addFileFilter(symbolicLinkFileFilter0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSelectInfo0).getFile();
      // Undeclared exception!
      try { 
        andFileFilter0.accept(fileSelectInfo0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.SymbolicLinkFileFilter"", e);
      }
  }"
1197,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        if (this.fileFilters.isEmpty()) {
            return false;
        }
        for (final FileFilter fileFilter : fileFilters) {
            if (!fileFilter.accept(fileSelectInfo)) {
                return false;
            }
        }
        return true;
    }","  public void test3()  throws Throwable  {
      FileFilter[] fileFilterArray0 = new FileFilter[6];
      NotFileFilter notFileFilter0 = (NotFileFilter)CanWriteFileFilter.CANNOT_WRITE;
      fileFilterArray0[0] = (FileFilter) notFileFilter0;
      ArrayList<FileFilter> arrayList0 = new ArrayList<FileFilter>();
      OrFileFilter orFileFilter0 = new OrFileFilter(arrayList0);
      fileFilterArray0[1] = (FileFilter) orFileFilter0;
      CanExecuteFileFilter canExecuteFileFilter0 = (CanExecuteFileFilter)CanExecuteFileFilter.CAN_EXECUTE;
      fileFilterArray0[2] = (FileFilter) canExecuteFileFilter0;
      String[] stringArray0 = new String[8];
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(stringArray0);
      fileFilterArray0[3] = (FileFilter) prefixFileFilter0;
      TrueFileFilter trueFileFilter0 = new TrueFileFilter();
      fileFilterArray0[4] = (FileFilter) trueFileFilter0;
      fileFilterArray0[5] = (FileFilter) notFileFilter0;
      AndFileFilter andFileFilter0 = new AndFileFilter(fileFilterArray0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSelectInfo0).getFile();
      // Undeclared exception!
      try { 
        andFileFilter0.accept(fileSelectInfo0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.CanWriteFileFilter"", e);
      }
  }"
1198,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(super.toString());
        buffer.append(""("");
        if (fileFilters != null) {
            for (int i = 0; i < fileFilters.size(); i++) {
                if (i > 0) {
                    buffer.append("","");
                }
                final Object filter = fileFilters.get(i);
                buffer.append(filter == null ? ""null"" : filter.toString());
            }
        }
        buffer.append("")"");
        return buffer.toString();
    }","  public void test4()  throws Throwable  {
      FileFilter[] fileFilterArray0 = new FileFilter[1];
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.TRUE;
      fileFilterArray0[0] = (FileFilter) trueFileFilter0;
      AndFileFilter andFileFilter0 = new AndFileFilter(fileFilterArray0);
      andFileFilter0.addFileFilter(fileFilterArray0[0]);
      String string0 = andFileFilter0.toString();
}"
1199,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        if (this.fileFilters.isEmpty()) {
            return false;
        }
        for (final FileFilter fileFilter : fileFilters) {
            if (!fileFilter.accept(fileSelectInfo)) {
                return false;
            }
        }
        return true;
    }","  public void test5()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      Vector<FileFilter> vector0 = new Vector<FileFilter>();
      AndFileFilter andFileFilter0 = new AndFileFilter(vector0);
      andFileFilter0.addFileFilter(orFileFilter0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = andFileFilter0.accept(fileSelectInfo0);
}"
1200,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        if (this.fileFilters.isEmpty()) {
            return false;
        }
        for (final FileFilter fileFilter : fileFilters) {
            if (!fileFilter.accept(fileSelectInfo)) {
                return false;
            }
        }
        return true;
    }","  public void test6()  throws Throwable  {
      FileFilter[] fileFilterArray0 = new FileFilter[1];
      TrueFileFilter trueFileFilter0 = new TrueFileFilter();
      fileFilterArray0[0] = (FileFilter) trueFileFilter0;
      AndFileFilter andFileFilter0 = new AndFileFilter(fileFilterArray0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = andFileFilter0.accept(fileSelectInfo0);
}"
1201,"    public AndFileFilter() {
        this.fileFilters = new ArrayList<>();
    }","  public void test7()  throws Throwable  {
      FileFilter[] fileFilterArray0 = new FileFilter[1];
      AndFileFilter andFileFilter0 = null;
      try {
        andFileFilter0 = new AndFileFilter(fileFilterArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Null filters are not allowed
         //
         verifyException(""org.apache.commons.vfs2.filter.AndFileFilter"", e);
      }
  }"
1202,"    public AndFileFilter() {
        this.fileFilters = new ArrayList<>();
    }","  public void test8()  throws Throwable  {
      AndFileFilter andFileFilter0 = null;
      try {
        andFileFilter0 = new AndFileFilter((FileFilter[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The filters must not be null or empty
         //
         verifyException(""org.apache.commons.vfs2.filter.AndFileFilter"", e);
      }
  }"
1203,"    public boolean removeFileFilter(final FileFilter fileFilter) {
        return this.fileFilters.remove(fileFilter);
    }","  public void test9()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter((List<FileFilter>) null);
      boolean boolean0 = andFileFilter0.removeFileFilter(andFileFilter0);
}"
1204,"    public void setFileFilters(final List<FileFilter> fileFilters) {
        this.fileFilters.clear();
        this.fileFilters.addAll(fileFilters);
    }","  public void test10()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter((List<FileFilter>) null);
      // Undeclared exception!
      try { 
        andFileFilter0.setFileFilters((List<FileFilter>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1205,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(super.toString());
        buffer.append(""("");
        if (fileFilters != null) {
            for (int i = 0; i < fileFilters.size(); i++) {
                if (i > 0) {
                    buffer.append("","");
                }
                final Object filter = fileFilters.get(i);
                buffer.append(filter == null ? ""null"" : filter.toString());
            }
        }
        buffer.append("")"");
        return buffer.toString();
    }","  public void test11()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      andFileFilter0.addFileFilter((FileFilter) null);
      String string0 = andFileFilter0.toString();
}"
1206,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        if (this.fileFilters.isEmpty()) {
            return false;
        }
        for (final FileFilter fileFilter : fileFilters) {
            if (!fileFilter.accept(fileSelectInfo)) {
                return false;
            }
        }
        return true;
    }","  public void test12()  throws Throwable  {
      FileFilter[] fileFilterArray0 = new FileFilter[1];
      TrueFileFilter trueFileFilter0 = new TrueFileFilter();
      fileFilterArray0[0] = (FileFilter) trueFileFilter0;
      AndFileFilter andFileFilter0 = new AndFileFilter(fileFilterArray0);
      List<FileFilter> list0 = andFileFilter0.getFileFilters();
      andFileFilter0.setFileFilters(list0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = andFileFilter0.accept(fileSelectInfo0);
}"
1207,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        return fileSelectInfo.getFile().isExecutable();
    }","  public void test0()  throws Throwable  {
      CanExecuteFileFilter canExecuteFileFilter0 = new CanExecuteFileFilter();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(fileObject0).isExecutable();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = canExecuteFileFilter0.accept(fileSelectInfo0);
}"
1208,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        return fileSelectInfo.getFile().isExecutable();
    }","  public void test1()  throws Throwable  {
      CanExecuteFileFilter canExecuteFileFilter0 = new CanExecuteFileFilter();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSelectInfo0).getFile();
      // Undeclared exception!
      try { 
        canExecuteFileFilter0.accept(fileSelectInfo0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.CanExecuteFileFilter"", e);
      }
  }"
1209,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        return fileSelectInfo.getFile().isExecutable();
    }","  public void test2()  throws Throwable  {
      CanExecuteFileFilter canExecuteFileFilter0 = new CanExecuteFileFilter();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fileObject0).isExecutable();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = canExecuteFileFilter0.accept(fileSelectInfo0);
}"
1210,"    public PrefixFileFilter(final List<String> prefixes) {
        this(IOCase.SENSITIVE, prefixes);
    }","  public void test0()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      PrefixFileFilter prefixFileFilter0 = null;
      try {
        prefixFileFilter0 = new PrefixFileFilter(iOCase0, (String[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The array of prefixes must not be null
         //
         verifyException(""org.apache.commons.vfs2.filter.PrefixFileFilter"", e);
      }
  }"
1211,"    public PrefixFileFilter(final List<String> prefixes) {
        this(IOCase.SENSITIVE, prefixes);
    }","  public void test1()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(iOCase0, arrayList0);
  }"
1212,"    public PrefixFileFilter(final List<String> prefixes) {
        this(IOCase.SENSITIVE, prefixes);
    }","  public void test2()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      PrefixFileFilter prefixFileFilter0 = null;
      try {
        prefixFileFilter0 = new PrefixFileFilter(iOCase0, (List<String>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The list of prefixes must not be null
         //
         verifyException(""org.apache.commons.vfs2.filter.PrefixFileFilter"", e);
      }
  }"
1213,"    public PrefixFileFilter(final List<String> prefixes) {
        this(IOCase.SENSITIVE, prefixes);
    }","  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[1];
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(stringArray0);
  }"
1214,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(super.toString());
        buffer.append(""("");
        if (prefixes != null) {
            for (int i = 0; i < prefixes.size(); i++) {
                if (i > 0) {
                    buffer.append("","");
                }
                buffer.append(prefixes.get(i));
            }
        }
        buffer.append("")"");
        return buffer.toString();
    }","  public void test4()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      String[] stringArray0 = new String[4];
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(iOCase0, stringArray0);
      String string0 = prefixFileFilter0.toString();
}"
1215,"    public boolean accept(final FileSelectInfo fileSelectInfo) {
        final String name = fileSelectInfo.getFile().getName().getBaseName();
        for (final String prefix : this.prefixes) {
            if (caseSensitivity.checkStartsWith(name, prefix)) {
                return true;
            }
        }
        return false;
    }","  public void test5()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "" ^OcEzH&~z/]~fz24k"";
      stringArray0[1] = "" ^OcEzH&~z/]~fz24k"";
      stringArray0[2] = "" ^OcEzH&~z/]~fz24k"";
      stringArray0[3] = """";
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(iOCase0, stringArray0);
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.vfs2.filter.PrefixFileFilter@1( ^OcEzH&~z/]~fz24k, ^OcEzH&~z/]~fz24k, ^OcEzH&~z/]~fz24k,)"").when(fileName0).getBaseName();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = prefixFileFilter0.accept(fileSelectInfo0);
}"
1216,"    public boolean accept(final FileSelectInfo fileSelectInfo) {
        final String name = fileSelectInfo.getFile().getName().getBaseName();
        for (final String prefix : this.prefixes) {
            if (caseSensitivity.checkStartsWith(name, prefix)) {
                return true;
            }
        }
        return false;
    }","  public void test6()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "" ^OcEzH&~z/]~fz24k"";
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(iOCase0, stringArray0);
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.vfs2.filter.PrefixFileFilter@1( ^OcEzH&~z/]~fz24k, ^OcEzH&~z/]~fz24k, ^OcEzH&~z/]~fz24k,)"").when(fileName0).getBaseName();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      // Undeclared exception!
      try { 
        prefixFileFilter0.accept(fileSelectInfo0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.IOCase"", e);
      }
  }"
1217,"    public PrefixFileFilter(final List<String> prefixes) {
        this(IOCase.SENSITIVE, prefixes);
    }","  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[6];
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter((IOCase) null, stringArray0);
  }"
1218,"    public PrefixFileFilter(final List<String> prefixes) {
        this(IOCase.SENSITIVE, prefixes);
    }","  public void test8()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter((IOCase) null, stack0);
  }"
1219,"    public PrefixFileFilter(final List<String> prefixes) {
        this(IOCase.SENSITIVE, prefixes);
    }","  public void test9()  throws Throwable  {
      PrefixFileFilter prefixFileFilter0 = null;
      try {
        prefixFileFilter0 = new PrefixFileFilter((List<String>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The list of prefixes must not be null
         //
         verifyException(""org.apache.commons.vfs2.filter.PrefixFileFilter"", e);
      }
  }"
1220,"    public PrefixFileFilter(final List<String> prefixes) {
        this(IOCase.SENSITIVE, prefixes);
    }","  public void test10()  throws Throwable  {
      PrefixFileFilter prefixFileFilter0 = null;
      try {
        prefixFileFilter0 = new PrefixFileFilter((String[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The array of prefixes must not be null
         //
         verifyException(""org.apache.commons.vfs2.filter.PrefixFileFilter"", e);
      }
  }"
1221,"    public boolean accept(final FileSelectInfo fileSelectInfo) {
        final String name = fileSelectInfo.getFile().getName().getBaseName();
        for (final String prefix : this.prefixes) {
            if (caseSensitivity.checkStartsWith(name, prefix)) {
                return true;
            }
        }
        return false;
    }","  public void test11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(linkedList0);
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn(""Ci7{<6;,av"").when(fileName0).getBaseName();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = prefixFileFilter0.accept(fileSelectInfo0);
}"
1222,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        if (!fileSelectInfo.getFile().exists()) {
            return false;
        }
        return fileSelectInfo.getFile().isHidden();
    }","  public void test0()  throws Throwable  {
      HiddenFileFilter hiddenFileFilter0 = new HiddenFileFilter();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fileObject0).exists();
      FileObject fileObject1 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fileObject1).isHidden();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0, fileObject1).when(fileSelectInfo0).getFile();
      boolean boolean0 = hiddenFileFilter0.accept(fileSelectInfo0);
}"
1223,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        if (!fileSelectInfo.getFile().exists()) {
            return false;
        }
        return fileSelectInfo.getFile().isHidden();
    }","  public void test1()  throws Throwable  {
      HiddenFileFilter hiddenFileFilter0 = new HiddenFileFilter();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(fileObject0).exists();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = hiddenFileFilter0.accept(fileSelectInfo0);
}"
1224,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        if (!fileSelectInfo.getFile().exists()) {
            return false;
        }
        return fileSelectInfo.getFile().isHidden();
    }","  public void test2()  throws Throwable  {
      HiddenFileFilter hiddenFileFilter0 = (HiddenFileFilter)HiddenFileFilter.HIDDEN;
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fileObject0).exists();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0, (FileObject) null).when(fileSelectInfo0).getFile();
      // Undeclared exception!
      try { 
        hiddenFileFilter0.accept(fileSelectInfo0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.HiddenFileFilter"", e);
      }
  }"
1225,"    public int checkIndexOf(final String str, final int strStartIndex, final String search) {
        final int endIndex = str.length() - search.length();
        if (endIndex >= strStartIndex) {
            for (int i = strStartIndex; i <= endIndex; i++) {
                if (checkRegionMatches(str, i, search)) {
                    return i;
                }
            }
        }
        return -1;
    }","  public void test0()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      iOCase0.checkIndexOf("""", 0, """");
  }"
1226,"    public boolean checkEquals(final String str1, final String str2) {
        if (str1 == null || str2 == null) {
            throw new NullPointerException(""The strings must not be null"");
        }
        return sensitive ? str1.equals(str2) : str1.equalsIgnoreCase(str2);
    }","  public void test1()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      iOCase0.checkEquals(""f`t)Vo"", ""og5q|z*E'a"");
  }"
1227,,"  public void test2()  throws Throwable  {
      IOCase.values();
  }"
1228,,"  public void test3()  throws Throwable  {
      IOCase.valueOf(""SENSITIVE"");
  }"
1229,,"  public void test4()  throws Throwable  {
      IOCase.valueOf(""INSENSITIVE"");
  }"
1230,"    public boolean isCaseSensitive() {
        return sensitive;
    }","  public void test5()  throws Throwable  {
      IOCase iOCase0 = IOCase.forName(""Insensitive"");
      iOCase0.isCaseSensitive();
  }"
1231,"    public boolean checkStartsWith(final String str, final String start) {
        return str.regionMatches(!sensitive, 0, start, 0, start.length());
    }","  public void test6()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      iOCase0.checkStartsWith(""XJot20r_~5"", ""Ts1S"");
  }"
1232,"    public int checkIndexOf(final String str, final int strStartIndex, final String search) {
        final int endIndex = str.length() - search.length();
        if (endIndex >= strStartIndex) {
            for (int i = strStartIndex; i <= endIndex; i++) {
                if (checkRegionMatches(str, i, search)) {
                    return i;
                }
            }
        }
        return -1;
    }","  public void test7()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      iOCase0.checkIndexOf(""lter.i"", 1, """");
  }"
1233,"    public boolean checkEndsWith(final String str, final String end) {
        final int endLen = end.length();
        return str.regionMatches(!sensitive, str.length() - endLen, end, 0, endLen);
    }","  public void test8()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      iOCase0.checkEndsWith(""{-m}Qd]`S=h$*[s\"""", ""f`t)Vo"");
  }"
1234,"    public int checkCompareTo(final String str1, final String str2) {
        if (str1 == null || str2 == null) {
            throw new NullPointerException(""The strings must not be null"");
        }
        return sensitive ? str1.compareTo(str2) : str1.compareToIgnoreCase(str2);
    }","  public void test9()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      iOCase0.checkCompareTo("";)mFc"", "";)mFc"");
  }"
1235,"    public boolean checkStartsWith(final String str, final String start) {
        return str.regionMatches(!sensitive, 0, start, 0, start.length());
    }","  public void test10()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      // Undeclared exception!
      try { 
        iOCase0.checkStartsWith((String) null, ""k 6jF`$7aDD+lLxsK"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
1236,"    public boolean checkRegionMatches(final String str, final int strStartIndex, final String search) {
        return str.regionMatches(!sensitive, strStartIndex, search, 0, search.length());
    }","  public void test11()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      // Undeclared exception!
      try { 
        iOCase0.checkRegionMatches((String) null, 0, ""INSENSITIVE"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
1237,"    public int checkIndexOf(final String str, final int strStartIndex, final String search) {
        final int endIndex = str.length() - search.length();
        if (endIndex >= strStartIndex) {
            for (int i = strStartIndex; i <= endIndex; i++) {
                if (checkRegionMatches(str, i, search)) {
                    return i;
                }
            }
        }
        return -1;
    }","  public void test12()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      // Undeclared exception!
      iOCase0.checkIndexOf(""Om1$u^kbPFciUHv"", (-1734307956), ""Om1$u^kbPFciUHv"");
  }"
1238,"    public int checkIndexOf(final String str, final int strStartIndex, final String search) {
        final int endIndex = str.length() - search.length();
        if (endIndex >= strStartIndex) {
            for (int i = strStartIndex; i <= endIndex; i++) {
                if (checkRegionMatches(str, i, search)) {
                    return i;
                }
            }
        }
        return -1;
    }","  public void test13()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      // Undeclared exception!
      try { 
        iOCase0.checkIndexOf((String) null, 0, ""TIR@PN[t/1tuvN"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1239,"    public boolean checkEndsWith(final String str, final String end) {
        final int endLen = end.length();
        return str.regionMatches(!sensitive, str.length() - endLen, end, 0, endLen);
    }","  public void test14()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      // Undeclared exception!
      try { 
        iOCase0.checkEndsWith((String) null, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.IOCase"", e);
      }
  }"
1240,"    public boolean checkRegionMatches(final String str, final int strStartIndex, final String search) {
        return str.regionMatches(!sensitive, strStartIndex, search, 0, search.length());
    }","  public void test15()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = iOCase0.checkRegionMatches(""D#Ic'lN#V76%"", (-23), """");
}"
1241,"    public boolean checkRegionMatches(final String str, final int strStartIndex, final String search) {
        return str.regionMatches(!sensitive, strStartIndex, search, 0, search.length());
    }","  public void test16()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = iOCase0.checkRegionMatches(""SENSITIVE"", 0, """");
}"
1242,"    public String getName() {
        return name;
    }","  public void test17()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      String string0 = iOCase0.getName();
}"
1243,"    public int checkIndexOf(final String str, final int strStartIndex, final String search) {
        final int endIndex = str.length() - search.length();
        if (endIndex >= strStartIndex) {
            for (int i = strStartIndex; i <= endIndex; i++) {
                if (checkRegionMatches(str, i, search)) {
                    return i;
                }
            }
        }
        return -1;
    }","  public void test18()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      int int0 = iOCase0.checkIndexOf(""org.apache.commons.vfs2.filter.IOCase"", 0, ""5VMqth"");
}"
1244,"    public int checkIndexOf(final String str, final int strStartIndex, final String search) {
        final int endIndex = str.length() - search.length();
        if (endIndex >= strStartIndex) {
            for (int i = strStartIndex; i <= endIndex; i++) {
                if (checkRegionMatches(str, i, search)) {
                    return i;
                }
            }
        }
        return -1;
    }","  public void test19()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      int int0 = iOCase0.checkIndexOf("""", (-2276), """");
}"
1245,"    public int checkIndexOf(final String str, final int strStartIndex, final String search) {
        final int endIndex = str.length() - search.length();
        if (endIndex >= strStartIndex) {
            for (int i = strStartIndex; i <= endIndex; i++) {
                if (checkRegionMatches(str, i, search)) {
                    return i;
                }
            }
        }
        return -1;
    }","  public void test20()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      int int0 = iOCase0.checkIndexOf(""I?Mxlm^o3"", 10, ""I?Mxlm^o3"");
}"
1246,"    public boolean checkEndsWith(final String str, final String end) {
        final int endLen = end.length();
        return str.regionMatches(!sensitive, str.length() - endLen, end, 0, endLen);
    }","  public void test21()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = iOCase0.checkEndsWith("";&4ZX2HL*="", "";&4ZX2HL*="");
}"
1247,"    public boolean checkEndsWith(final String str, final String end) {
        final int endLen = end.length();
        return str.regionMatches(!sensitive, str.length() - endLen, end, 0, endLen);
    }","  public void test22()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = iOCase0.checkEndsWith(""Sensitive"", ""Sensitive"");
}"
1248,"    public boolean checkStartsWith(final String str, final String start) {
        return str.regionMatches(!sensitive, 0, start, 0, start.length());
    }","  public void test23()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = iOCase0.checkStartsWith(""{=N$0i<w"", ""{=N$0i<w"");
}"
1249,"    public boolean checkEquals(final String str1, final String str2) {
        if (str1 == null || str2 == null) {
            throw new NullPointerException(""The strings must not be null"");
        }
        return sensitive ? str1.equals(str2) : str1.equalsIgnoreCase(str2);
    }","  public void test24()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = iOCase0.checkEquals("";&4ZX2HL*="", "";&4ZX2HL*="");
}"
1250,"    public boolean checkEquals(final String str1, final String str2) {
        if (str1 == null || str2 == null) {
            throw new NullPointerException(""The strings must not be null"");
        }
        return sensitive ? str1.equals(str2) : str1.equalsIgnoreCase(str2);
    }","  public void test25()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      // Undeclared exception!
      try { 
        iOCase0.checkEquals(""c\"""", (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The strings must not be null
         //
         verifyException(""org.apache.commons.vfs2.filter.IOCase"", e);
      }
  }"
1251,"    public boolean checkEquals(final String str1, final String str2) {
        if (str1 == null || str2 == null) {
            throw new NullPointerException(""The strings must not be null"");
        }
        return sensitive ? str1.equals(str2) : str1.equalsIgnoreCase(str2);
    }","  public void test26()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = iOCase0.checkEquals(""zl+~{@\""TXO"", """");
}"
1252,"    public boolean checkEquals(final String str1, final String str2) {
        if (str1 == null || str2 == null) {
            throw new NullPointerException(""The strings must not be null"");
        }
        return sensitive ? str1.equals(str2) : str1.equalsIgnoreCase(str2);
    }","  public void test27()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      // Undeclared exception!
      try { 
        iOCase0.checkEquals((String) null, ""{=N$0i<w"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The strings must not be null
         //
         verifyException(""org.apache.commons.vfs2.filter.IOCase"", e);
      }
  }"
1253,"    public int checkCompareTo(final String str1, final String str2) {
        if (str1 == null || str2 == null) {
            throw new NullPointerException(""The strings must not be null"");
        }
        return sensitive ? str1.compareTo(str2) : str1.compareToIgnoreCase(str2);
    }","  public void test28()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      int int0 = iOCase0.checkCompareTo(""SYSTEM"", ""I?Mxlm^o3"");
}"
1254,"    public int checkCompareTo(final String str1, final String str2) {
        if (str1 == null || str2 == null) {
            throw new NullPointerException(""The strings must not be null"");
        }
        return sensitive ? str1.compareTo(str2) : str1.compareToIgnoreCase(str2);
    }","  public void test29()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      // Undeclared exception!
      try { 
        iOCase0.checkCompareTo(""org.apache.commons.vfs2.filter.IOCase"", (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The strings must not be null
         //
         verifyException(""org.apache.commons.vfs2.filter.IOCase"", e);
      }
  }"
1255,"    public int checkCompareTo(final String str1, final String str2) {
        if (str1 == null || str2 == null) {
            throw new NullPointerException(""The strings must not be null"");
        }
        return sensitive ? str1.compareTo(str2) : str1.compareToIgnoreCase(str2);
    }","  public void test30()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      int int0 = iOCase0.checkCompareTo("""", ""mh31t@RYscAZC,"");
}"
1256,"    public int checkCompareTo(final String str1, final String str2) {
        if (str1 == null || str2 == null) {
            throw new NullPointerException(""The strings must not be null"");
        }
        return sensitive ? str1.compareTo(str2) : str1.compareToIgnoreCase(str2);
    }","  public void test31()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      // Undeclared exception!
      try { 
        iOCase0.checkCompareTo((String) null, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The strings must not be null
         //
         verifyException(""org.apache.commons.vfs2.filter.IOCase"", e);
      }
  }"
1257,"    public static IOCase forName(final String name) {
        for (final IOCase ioCase : IOCase.values()) {
            if (ioCase.getName().equals(name)) {
                return ioCase;
            }
        }
        throw new IllegalArgumentException(""Invalid IOCase name: "" + name);
    }","  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOCase.forName(""insensitive"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid IOCase name: insensitive
         //
         verifyException(""org.apache.commons.vfs2.filter.IOCase"", e);
      }
  }"
1258,"    public boolean isCaseSensitive() {
        return sensitive;
    }","  public void test33()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = iOCase0.isCaseSensitive();
}"
1259,"    public static IOCase forName(final String name) {
        for (final IOCase ioCase : IOCase.values()) {
            if (ioCase.getName().equals(name)) {
                return ioCase;
            }
        }
        throw new IllegalArgumentException(""Invalid IOCase name: "" + name);
    }","  public void test34()  throws Throwable  {
      IOCase iOCase0 = IOCase.forName(""Sensitive"");
}"
1260,"    public String toString() {
        return name;
    }","  public void test35()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      String string0 = iOCase0.toString();
}"
1261,"    public boolean accept(final FileSelectInfo fileInfo) throws FileSystemException {
        return acceptOlder != isFileNewer(fileInfo.getFile(), cutoff);
    }","  public void test0()  throws Throwable  {
      AgeFileFilter ageFileFilter0 = new AgeFileFilter((-1L), true);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSelectInfo0).getFile();
      // Undeclared exception!
      try { 
        ageFileFilter0.accept(fileSelectInfo0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // fileObject
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
1262,"    public AgeFileFilter(final Date cutoffDate) {
        this(cutoffDate, true);
    }","  public void test1()  throws Throwable  {
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject((FileObject) null);
      AgeFileFilter ageFileFilter0 = null;
      try {
        ageFileFilter0 = new AgeFileFilter(synchronizedFileObject0, true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DecoratedFileObject"", e);
      }
  }"
1263,"    public AgeFileFilter(final Date cutoffDate) {
        this(cutoffDate, true);
    }","  public void test2()  throws Throwable  {
      FileType fileType0 = FileType.IMAGINARY;
      LayeredFileName layeredFileName0 = new LayeredFileName(""period: 0 (expected: != 0)"", (FileName) null, """", fileType0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      LocalFileSystem localFileSystem0 = new LocalFileSystem((FileName) null, ""period: 0 (expected: != 0)"", fileSystemOptions0);
      DelegateFileObject<LocalFileSystem> delegateFileObject0 = new DelegateFileObject<LocalFileSystem>(layeredFileName0, localFileSystem0, (FileObject) null);
      AgeFileFilter ageFileFilter0 = null;
      try {
        ageFileFilter0 = new AgeFileFilter(delegateFileObject0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.AbstractFileSystem"", e);
      }
  }"
1264,"    public AgeFileFilter(final Date cutoffDate) {
        this(cutoffDate, true);
    }","  public void test3()  throws Throwable  {
      AgeFileFilter ageFileFilter0 = null;
      try {
        ageFileFilter0 = new AgeFileFilter((Date) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.AgeFileFilter"", e);
      }
  }"
1265,"    public AgeFileFilter(final Date cutoffDate) {
        this(cutoffDate, true);
    }","  public void test4()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(mockDate0, false);
  }"
1266,"    public String toString() {
        final String condition = acceptOlder ? ""<="" : "">"";
        return super.toString() + ""("" + condition + cutoff + "")"";
    }","  public void test5()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(mockDate0);
      String string0 = ageFileFilter0.toString();
}"
1267,"    public String toString() {
        final String condition = acceptOlder ? ""<="" : "">"";
        return super.toString() + ""("" + condition + cutoff + "")"";
    }","  public void test6()  throws Throwable  {
      AgeFileFilter ageFileFilter0 = new AgeFileFilter((-688L), false);
      String string0 = ageFileFilter0.toString();
}"
1268,"    public boolean accept(final FileSelectInfo fileInfo) throws FileSystemException {
        return acceptOlder != isFileNewer(fileInfo.getFile(), cutoff);
    }","  public void test7()  throws Throwable  {
      AgeFileFilter ageFileFilter0 = new AgeFileFilter((-688L), false);
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(fileObject0).exists();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = ageFileFilter0.accept(fileSelectInfo0);
}"
1269,"    public boolean accept(final FileSelectInfo fileInfo) throws FileSystemException {
        return acceptOlder != isFileNewer(fileInfo.getFile(), cutoff);
    }","  public void test8()  throws Throwable  {
      AgeFileFilter ageFileFilter0 = new AgeFileFilter((-691L), false);
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fileObject0).exists();
      doReturn((FileContent) null).when(fileObject0).getContent();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      // Undeclared exception!
      try { 
        ageFileFilter0.accept(fileSelectInfo0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.AgeFileFilter"", e);
      }
  }"
1270,"    public boolean accept(final FileSelectInfo fileInfo) throws FileSystemException {
        return acceptOlder != isFileNewer(fileInfo.getFile(), cutoff);
    }","  public void test9()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(mockDate0);
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(fileObject0).exists();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = ageFileFilter0.accept(fileSelectInfo0);
}"
1271,"    public AgeFileFilter(final Date cutoffDate) {
        this(cutoffDate, true);
    }","  public void test10()  throws Throwable  {
      AgeFileFilter ageFileFilter0 = null;
      try {
        ageFileFilter0 = new AgeFileFilter((Date) null, true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.AgeFileFilter"", e);
      }
  }"
1272,"    public AgeFileFilter(final Date cutoffDate) {
        this(cutoffDate, true);
    }","  public void test11()  throws Throwable  {
      AgeFileFilter ageFileFilter0 = new AgeFileFilter((-54L));
  }"
1273,"    public AgeFileFilter(final Date cutoffDate) {
        this(cutoffDate, true);
    }","  public void test12()  throws Throwable  {
      AgeFileFilter ageFileFilter0 = null;
      try {
        ageFileFilter0 = new AgeFileFilter((FileObject) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.AgeFileFilter"", e);
      }
  }"
1274,"    public AgeFileFilter(final Date cutoffDate) {
        this(cutoffDate, true);
    }","  public void test13()  throws Throwable  {
      AgeFileFilter ageFileFilter0 = null;
      try {
        ageFileFilter0 = new AgeFileFilter((FileObject) null, false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.AgeFileFilter"", e);
      }
  }"
1275,"    public SuffixFileFilter(final List<String> suffixes) {
        this(IOCase.SENSITIVE, suffixes);
    }","  public void test0()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      SuffixFileFilter suffixFileFilter0 = null;
      try {
        suffixFileFilter0 = new SuffixFileFilter(iOCase0, (String[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The array of suffixes must not be null
         //
         verifyException(""org.apache.commons.vfs2.filter.SuffixFileFilter"", e);
      }
  }"
1276,"    public SuffixFileFilter(final List<String> suffixes) {
        this(IOCase.SENSITIVE, suffixes);
    }","  public void test1()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      SuffixFileFilter suffixFileFilter0 = null;
      try {
        suffixFileFilter0 = new SuffixFileFilter(iOCase0, (List<String>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The list of suffixes must not be null
         //
         verifyException(""org.apache.commons.vfs2.filter.SuffixFileFilter"", e);
      }
  }"
1277,"    public SuffixFileFilter(final List<String> suffixes) {
        this(IOCase.SENSITIVE, suffixes);
    }","  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(stringArray0);
  }"
1278,"    public SuffixFileFilter(final List<String> suffixes) {
        this(IOCase.SENSITIVE, suffixes);
    }","  public void test3()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(stack0);
  }"
1279,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(super.toString());
        buffer.append(""("");
        if (suffixes != null) {
            for (int i = 0; i < suffixes.size(); i++) {
                if (i > 0) {
                    buffer.append("","");
                }
                buffer.append(suffixes.get(i));
            }
        }
        buffer.append("")"");
        return buffer.toString();
    }","  public void test4()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      String[] stringArray0 = new String[3];
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(iOCase0, stringArray0);
      String string0 = suffixFileFilter0.toString();
}"
1280,"    public boolean accept(final FileSelectInfo fileSelectInfo) {
        final String name = fileSelectInfo.getFile().getName().getBaseName();
        for (final String suffix : this.suffixes) {
            if (caseSensitivity.checkEndsWith(name, suffix)) {
                return true;
            }
        }
        return false;
    }","  public void test5()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      String[] stringArray0 = new String[3];
      stringArray0[0] = ""<C3p!KGv-H;4k"";
      stringArray0[1] = ""<C3p!KGv-H;4k"";
      stringArray0[2] = "")"";
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(iOCase0, stringArray0);
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn("")"").when(fileName0).getBaseName();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = suffixFileFilter0.accept(fileSelectInfo0);
}"
1281,"    public boolean accept(final FileSelectInfo fileSelectInfo) {
        final String name = fileSelectInfo.getFile().getName().getBaseName();
        for (final String suffix : this.suffixes) {
            if (caseSensitivity.checkEndsWith(name, suffix)) {
                return true;
            }
        }
        return false;
    }","  public void test6()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      String[] stringArray0 = new String[3];
      stringArray0[0] = ""<C3p!KGv-H;4k"";
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(iOCase0, stringArray0);
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn("")"").when(fileName0).getBaseName();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      // Undeclared exception!
      try { 
        suffixFileFilter0.accept(fileSelectInfo0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.IOCase"", e);
      }
  }"
1282,"    public SuffixFileFilter(final List<String> suffixes) {
        this(IOCase.SENSITIVE, suffixes);
    }","  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[14];
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter((IOCase) null, stringArray0);
  }"
1283,"    public SuffixFileFilter(final List<String> suffixes) {
        this(IOCase.SENSITIVE, suffixes);
    }","  public void test8()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter((IOCase) null, linkedList0);
  }"
1284,"    public boolean accept(final FileSelectInfo fileSelectInfo) {
        final String name = fileSelectInfo.getFile().getName().getBaseName();
        for (final String suffix : this.suffixes) {
            if (caseSensitivity.checkEndsWith(name, suffix)) {
                return true;
            }
        }
        return false;
    }","  public void test9()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(iOCase0, linkedList0);
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fileName0).getBaseName();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = suffixFileFilter0.accept(fileSelectInfo0);
}"
1285,"    public SuffixFileFilter(final List<String> suffixes) {
        this(IOCase.SENSITIVE, suffixes);
    }","  public void test10()  throws Throwable  {
      SuffixFileFilter suffixFileFilter0 = null;
      try {
        suffixFileFilter0 = new SuffixFileFilter((String[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The array of suffixes must not be null
         //
         verifyException(""org.apache.commons.vfs2.filter.SuffixFileFilter"", e);
      }
  }"
1286,"    public SuffixFileFilter(final List<String> suffixes) {
        this(IOCase.SENSITIVE, suffixes);
    }","  public void test11()  throws Throwable  {
      SuffixFileFilter suffixFileFilter0 = null;
      try {
        suffixFileFilter0 = new SuffixFileFilter((List<String>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The list of suffixes must not be null
         //
         verifyException(""org.apache.commons.vfs2.filter.SuffixFileFilter"", e);
      }
  }"
1287,"    public boolean accept(final FileSelectInfo fileSelectInfo) {
        return false;
    }","  public void test0()  throws Throwable  {
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      FalseFileFilter falseFileFilter0 = new FalseFileFilter();
      boolean boolean0 = falseFileFilter0.accept(fileSelectInfo0);
}"
1288,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        return filter.accept(fileSelectInfo);
    }","  public void test0()  throws Throwable  {
      SizeRangeFileFilter sizeRangeFileFilter0 = new SizeRangeFileFilter(0L, 0L);
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(fileObject0).exists();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = sizeRangeFileFilter0.accept(fileSelectInfo0);
}"
1289,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        return filter.accept(fileSelectInfo);
    }","  public void test1()  throws Throwable  {
      SizeRangeFileFilter sizeRangeFileFilter0 = new SizeRangeFileFilter(1537L, 0L);
      // Undeclared exception!
      try { 
        sizeRangeFileFilter0.accept((FileSelectInfo) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.SizeFileFilter"", e);
      }
  }"
1290,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        return filter.accept(fileSelectInfo);
    }","  public void test2()  throws Throwable  {
      SizeRangeFileFilter sizeRangeFileFilter0 = new SizeRangeFileFilter(0L, 0L);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSelectInfo0).getFile();
      // Undeclared exception!
      try { 
        sizeRangeFileFilter0.accept(fileSelectInfo0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.SizeFileFilter"", e);
      }
  }"
1291,"    public SizeRangeFileFilter(final long minSizeInclusive, final long maxSizeInclusive) {
        final FileFilter minimumFilter = new SizeFileFilter(minSizeInclusive, true);
        final FileFilter maximumFilter = new SizeFileFilter(maxSizeInclusive + 1L, false);
        filter = new AndFileFilter(minimumFilter, maximumFilter);
    }","  public void test3()  throws Throwable  {
      SizeRangeFileFilter sizeRangeFileFilter0 = null;
      try {
        sizeRangeFileFilter0 = new SizeRangeFileFilter((-624L), (-2485L));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The size must be non-negative
         //
         verifyException(""org.apache.commons.vfs2.filter.SizeFileFilter"", e);
      }
  }"
1292,"    public boolean accept(final FileSelectInfo fileSelectInfo) {
        final String name = fileSelectInfo.getFile().getName().getBaseName();
        return pattern.matcher(name).matches();
    }","  public void test0()  throws Throwable  {
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(""org.apache.commons.vfs2.FileOject"");
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.vfs2.FileOject"").when(fileName0).getBaseName();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = regexFileFilter0.accept(fileSelectInfo0);
}"
1293,"    public boolean accept(final FileSelectInfo fileSelectInfo) {
        final String name = fileSelectInfo.getFile().getName().getBaseName();
        return pattern.matcher(name).matches();
    }","  public void test1()  throws Throwable  {
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn(""ncpg8`6(eJ"").when(fileName0).getBaseName();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      RegexFileFilter regexFileFilter0 = new RegexFileFilter("""");
      boolean boolean0 = regexFileFilter0.accept(fileSelectInfo0);
}"
1294,"    public RegexFileFilter(final Pattern pattern) {
        if (pattern == null) {
            throw new IllegalArgumentException(PATTERN_IS_MISSING);
        }

        this.pattern = pattern;
    }","  public void test2()  throws Throwable  {
      RegexFileFilter regexFileFilter0 = null;
      try {
        regexFileFilter0 = new RegexFileFilter(""y[bJ="", 0);
        fail(""Expecting exception: PatternSyntaxException"");
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 5
         // y[bJ=
         //      ^
         //
         verifyException(""java.util.regex.Pattern"", e);
      }
  }"
1295,"    public RegexFileFilter(final Pattern pattern) {
        if (pattern == null) {
            throw new IllegalArgumentException(PATTERN_IS_MISSING);
        }

        this.pattern = pattern;
    }","  public void test3()  throws Throwable  {
      RegexFileFilter regexFileFilter0 = null;
      try {
        regexFileFilter0 = new RegexFileFilter(""NLUD)lu]KT?L"");
        fail(""Expecting exception: PatternSyntaxException"");
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 3
         // NLUD)lu]KT?L
         //    ^
         //
         verifyException(""java.util.regex.Pattern"", e);
      }
  }"
1296,"    public RegexFileFilter(final Pattern pattern) {
        if (pattern == null) {
            throw new IllegalArgumentException(PATTERN_IS_MISSING);
        }

        this.pattern = pattern;
    }","  public void test4()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(""6YU,=QGX%R5D"", iOCase0);
  }"
1297,"    public RegexFileFilter(final Pattern pattern) {
        if (pattern == null) {
            throw new IllegalArgumentException(PATTERN_IS_MISSING);
        }

        this.pattern = pattern;
    }","  public void test5()  throws Throwable  {
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(""tN9L%GNy2?mgWf"", (IOCase) null);
  }"
1298,"    public RegexFileFilter(final Pattern pattern) {
        if (pattern == null) {
            throw new IllegalArgumentException(PATTERN_IS_MISSING);
        }

        this.pattern = pattern;
    }","  public void test6()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      RegexFileFilter regexFileFilter0 = null;
      try {
        regexFileFilter0 = new RegexFileFilter((String) null, iOCase0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Pattern is missing
         //
         verifyException(""org.apache.commons.vfs2.filter.RegexFileFilter"", e);
      }
  }"
1299,"    public RegexFileFilter(final Pattern pattern) {
        if (pattern == null) {
            throw new IllegalArgumentException(PATTERN_IS_MISSING);
        }

        this.pattern = pattern;
    }","  public void test7()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(""Pattern is missing"", iOCase0);
  }"
1300,"    public RegexFileFilter(final Pattern pattern) {
        if (pattern == null) {
            throw new IllegalArgumentException(PATTERN_IS_MISSING);
        }

        this.pattern = pattern;
    }","  public void test8()  throws Throwable  {
      RegexFileFilter regexFileFilter0 = null;
      try {
        regexFileFilter0 = new RegexFileFilter((String) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Pattern is missing
         //
         verifyException(""org.apache.commons.vfs2.filter.RegexFileFilter"", e);
      }
  }"
1301,"    public RegexFileFilter(final Pattern pattern) {
        if (pattern == null) {
            throw new IllegalArgumentException(PATTERN_IS_MISSING);
        }

        this.pattern = pattern;
    }","  public void test9()  throws Throwable  {
      RegexFileFilter regexFileFilter0 = new RegexFileFilter("""", 34);
  }"
1302,"    public RegexFileFilter(final Pattern pattern) {
        if (pattern == null) {
            throw new IllegalArgumentException(PATTERN_IS_MISSING);
        }

        this.pattern = pattern;
    }","  public void test10()  throws Throwable  {
      RegexFileFilter regexFileFilter0 = null;
      try {
        regexFileFilter0 = new RegexFileFilter((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Pattern is missing
         //
         verifyException(""org.apache.commons.vfs2.filter.RegexFileFilter"", e);
      }
  }"
1303,"    public RegexFileFilter(final Pattern pattern) {
        if (pattern == null) {
            throw new IllegalArgumentException(PATTERN_IS_MISSING);
        }

        this.pattern = pattern;
    }","  public void test11()  throws Throwable  {
      RegexFileFilter regexFileFilter0 = null;
      try {
        regexFileFilter0 = new RegexFileFilter((Pattern) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Pattern is missing
         //
         verifyException(""org.apache.commons.vfs2.filter.RegexFileFilter"", e);
      }
  }"
1304,"    public boolean accept(final FileSelectInfo fileSelectInfo) {
        final String name = fileSelectInfo.getFile().getName().getBaseName();
        return pattern.matcher(name).matches();
    }","  public void test12()  throws Throwable  {
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSelectInfo0).getFile();
      Pattern pattern0 = Pattern.compile(""];81SaO-"", (-1143));
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern0);
      // Undeclared exception!
      try { 
        regexFileFilter0.accept(fileSelectInfo0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.RegexFileFilter"", e);
      }
  }"
1305,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        return !filter.accept(fileSelectInfo);
    }","  public void test0()  throws Throwable  {
      FileFilter fileFilter0 = mock(FileFilter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fileFilter0).accept(any(org.apache.commons.vfs2.FileSelectInfo.class));
      NotFileFilter notFileFilter0 = new NotFileFilter(fileFilter0);
      NotFileFilter notFileFilter1 = new NotFileFilter(notFileFilter0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = notFileFilter1.accept(fileSelectInfo0);
}"
1306,"    public boolean accept(final FileSelectInfo fileSelectInfo) throws FileSystemException {
        return !filter.accept(fileSelectInfo);
    }","  public void test1()  throws Throwable  {
      FileFilter fileFilter0 = mock(FileFilter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(fileFilter0).accept(any(org.apache.commons.vfs2.FileSelectInfo.class));
      NotFileFilter notFileFilter0 = new NotFileFilter(fileFilter0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = notFileFilter0.accept(fileSelectInfo0);
}"
1307,"    public NotFileFilter(final FileFilter filter) {
        if (filter == null) {
            throw new IllegalArgumentException(""The filter must not be null"");
        }
        this.filter = filter;
    }","  public void test2()  throws Throwable  {
      NotFileFilter notFileFilter0 = null;
      try {
        notFileFilter0 = new NotFileFilter((FileFilter) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The filter must not be null
         //
         verifyException(""org.apache.commons.vfs2.filter.NotFileFilter"", e);
      }
  }"
1308,"    public String toString() {
        return super.toString() + ""("" + filter.toString() + "")"";
    }","  public void test3()  throws Throwable  {
      FileFilter fileFilter0 = mock(FileFilter.class, new ViolatedAssumptionAnswer());
      NotFileFilter notFileFilter0 = new NotFileFilter(fileFilter0);
      String string0 = notFileFilter0.toString();
}"
1309,"    static boolean wildcardMatch(final String fileName, final String wildcardMatcher, IOCase caseSensitivity) {
        if (fileName == null && wildcardMatcher == null) {
            return true;
        }
        if (fileName == null || wildcardMatcher == null) {
            return false;
        }
        if (caseSensitivity == null) {
            caseSensitivity = IOCase.SENSITIVE;
        }
        final String[] wcs = splitOnTokens(wildcardMatcher);
        boolean anyChars = false;
        int textIdx = 0;
        int wcsIdx = 0;
        final Stack<int[]> backtrack = new Stack<>();

        // loop around a backtrack stack, to handle complex * matching
        do {
            if (!backtrack.isEmpty()) {
                final int[] array = backtrack.pop();
                wcsIdx = array[0];
                textIdx = array[1];
                anyChars = true;
            }

            // loop whilst tokens and text left to process
            while (wcsIdx < wcs.length) {

                if (wcs[wcsIdx].equals(""?"")) {
                    // ? so move to next text char
                    textIdx++;
                    if (textIdx > fileName.length()) {
                        break;
                    }
                    anyChars = false;

                } else if (wcs[wcsIdx].equals(""*"")) {
                    // set any chars status
                    anyChars = true;
                    if (wcsIdx == wcs.length - 1) {
                        textIdx = fileName.length();
                    }

                } else {
                    // matching text token
                    if (anyChars) {
                        // any chars then try to locate text token
                        textIdx = caseSensitivity.checkIndexOf(fileName, textIdx, wcs[wcsIdx]);
                        if (textIdx == -1) {
                            // token not found
                            break;
                        }
                        final int repeat = caseSensitivity.checkIndexOf(fileName, textIdx + 1, wcs[wcsIdx]);
                        if (repeat >= 0) {
                            backtrack.push(new int[] { wcsIdx, repeat });
                        }
                    } else if (!caseSensitivity.checkRegionMatches(fileName, textIdx, wcs[wcsIdx])) {
                        // matching from current position
                        // couldnt match token
                        break;
                    }

                    // matched text token, move text index to end of matched
                    // token
                    textIdx += wcs[wcsIdx].length();
                    anyChars = false;
                }

                wcsIdx++;
            }

            // full match
            if (wcsIdx == wcs.length && textIdx == fileName.length()) {
                return true;
            }

        } while (!backtrack.isEmpty());

        return false;
    }","  public void test0()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = WildcardFileFilter.wildcardMatch(""G_!.kT8C??dNzU6"", ""G_!.kT8C??dNzU6"", iOCase0);
}"
1310,"    static String[] splitOnTokens(final String text) {
        // used by wildcardMatch
        // package level so a unit test may run on this

        if (text.indexOf('?') == -1 && text.indexOf('*') == -1) {
            return new String[] { text };
        }

        final char[] array = text.toCharArray();
        final ArrayList<String> list = new ArrayList<>();
        final StringBuilder builder = new StringBuilder();
        for (int i = 0; i < array.length; i++) {
            if (array[i] == '?' || array[i] == '*') {
                if (StringUtils.isNotEmpty(builder)) {
                    list.add(builder.toString());
                    builder.setLength(0);
                }
                if (array[i] == '?') {
                    list.add(""?"");
                } else if (list.isEmpty() || i > 0 && !list.get(list.size() - 1).equals(""*"")) {
                    list.add(""*"");
                }
            } else {
                builder.append(array[i]);
            }
        }
        if (StringUtils.isNotEmpty(builder)) {
            list.add(builder.toString());
        }

        return list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
    }","  public void test1()  throws Throwable  {
      String[] stringArray0 = WildcardFileFilter.splitOnTokens("" F**ROqP/aAE,5[TjKu"");
}"
1311,"    static String[] splitOnTokens(final String text) {
        // used by wildcardMatch
        // package level so a unit test may run on this

        if (text.indexOf('?') == -1 && text.indexOf('*') == -1) {
            return new String[] { text };
        }

        final char[] array = text.toCharArray();
        final ArrayList<String> list = new ArrayList<>();
        final StringBuilder builder = new StringBuilder();
        for (int i = 0; i < array.length; i++) {
            if (array[i] == '?' || array[i] == '*') {
                if (StringUtils.isNotEmpty(builder)) {
                    list.add(builder.toString());
                    builder.setLength(0);
                }
                if (array[i] == '?') {
                    list.add(""?"");
                } else if (list.isEmpty() || i > 0 && !list.get(list.size() - 1).equals(""*"")) {
                    list.add(""*"");
                }
            } else {
                builder.append(array[i]);
            }
        }
        if (StringUtils.isNotEmpty(builder)) {
            list.add(builder.toString());
        }

        return list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
    }","  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        WildcardFileFilter.splitOnTokens((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.WildcardFileFilter"", e);
      }
  }"
1312,"    public boolean accept(final FileSelectInfo fileSelectInfo) {
        final String name = fileSelectInfo.getFile().getName().getBaseName();
        for (final String wildcard : wildcards) {
            if (wildcardMatch(name, wildcard, caseSensitivity)) {
                return true;
            }
        }
        return false;
    }","  public void test3()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      AttributesMap attributesMap0 = new AttributesMap();
      Set<String> set0 = attributesMap0.getAttributeNameSet();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(iOCase0, list0);
      // Undeclared exception!
      try { 
        wildcardFileFilter0.accept((FileSelectInfo) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.filter.WildcardFileFilter"", e);
      }
  }"
1313,"    public WildcardFileFilter(final List<String> wildcards) {
        this((IOCase) null, wildcards);
    }","  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[4];
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter((IOCase) null, stringArray0);
  }"
1314,"    public WildcardFileFilter(final List<String> wildcards) {
        this((IOCase) null, wildcards);
    }","  public void test5()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = null;
      try {
        wildcardFileFilter0 = new WildcardFileFilter(iOCase0, (String[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The wildcard array must not be null
         //
         verifyException(""org.apache.commons.vfs2.filter.WildcardFileFilter"", e);
      }
  }"
1315,"    public WildcardFileFilter(final List<String> wildcards) {
        this((IOCase) null, wildcards);
    }","  public void test6()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter((IOCase) null, arrayList0);
  }"
1316,"    public WildcardFileFilter(final List<String> wildcards) {
        this((IOCase) null, wildcards);
    }","  public void test7()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = null;
      try {
        wildcardFileFilter0 = new WildcardFileFilter(iOCase0, (List<String>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The wildcard list must not be null
         //
         verifyException(""org.apache.commons.vfs2.filter.WildcardFileFilter"", e);
      }
  }"
1317,"    static boolean wildcardMatch(final String fileName, final String wildcardMatcher, IOCase caseSensitivity) {
        if (fileName == null && wildcardMatcher == null) {
            return true;
        }
        if (fileName == null || wildcardMatcher == null) {
            return false;
        }
        if (caseSensitivity == null) {
            caseSensitivity = IOCase.SENSITIVE;
        }
        final String[] wcs = splitOnTokens(wildcardMatcher);
        boolean anyChars = false;
        int textIdx = 0;
        int wcsIdx = 0;
        final Stack<int[]> backtrack = new Stack<>();

        // loop around a backtrack stack, to handle complex * matching
        do {
            if (!backtrack.isEmpty()) {
                final int[] array = backtrack.pop();
                wcsIdx = array[0];
                textIdx = array[1];
                anyChars = true;
            }

            // loop whilst tokens and text left to process
            while (wcsIdx < wcs.length) {

                if (wcs[wcsIdx].equals(""?"")) {
                    // ? so move to next text char
                    textIdx++;
                    if (textIdx > fileName.length()) {
                        break;
                    }
                    anyChars = false;

                } else if (wcs[wcsIdx].equals(""*"")) {
                    // set any chars status
                    anyChars = true;
                    if (wcsIdx == wcs.length - 1) {
                        textIdx = fileName.length();
                    }

                } else {
                    // matching text token
                    if (anyChars) {
                        // any chars then try to locate text token
                        textIdx = caseSensitivity.checkIndexOf(fileName, textIdx, wcs[wcsIdx]);
                        if (textIdx == -1) {
                            // token not found
                            break;
                        }
                        final int repeat = caseSensitivity.checkIndexOf(fileName, textIdx + 1, wcs[wcsIdx]);
                        if (repeat >= 0) {
                            backtrack.push(new int[] { wcsIdx, repeat });
                        }
                    } else if (!caseSensitivity.checkRegionMatches(fileName, textIdx, wcs[wcsIdx])) {
                        // matching from current position
                        // couldnt match token
                        break;
                    }

                    // matched text token, move text index to end of matched
                    // token
                    textIdx += wcs[wcsIdx].length();
                    anyChars = false;
                }

                wcsIdx++;
            }

            // full match
            if (wcsIdx == wcs.length && textIdx == fileName.length()) {
                return true;
            }

        } while (!backtrack.isEmpty());

        return false;
    }","  public void test8()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = WildcardFileFilter.wildcardMatch("""", ""l>^"", iOCase0);
}"
1318,"    static boolean wildcardMatch(final String fileName, final String wildcardMatcher, IOCase caseSensitivity) {
        if (fileName == null && wildcardMatcher == null) {
            return true;
        }
        if (fileName == null || wildcardMatcher == null) {
            return false;
        }
        if (caseSensitivity == null) {
            caseSensitivity = IOCase.SENSITIVE;
        }
        final String[] wcs = splitOnTokens(wildcardMatcher);
        boolean anyChars = false;
        int textIdx = 0;
        int wcsIdx = 0;
        final Stack<int[]> backtrack = new Stack<>();

        // loop around a backtrack stack, to handle complex * matching
        do {
            if (!backtrack.isEmpty()) {
                final int[] array = backtrack.pop();
                wcsIdx = array[0];
                textIdx = array[1];
                anyChars = true;
            }

            // loop whilst tokens and text left to process
            while (wcsIdx < wcs.length) {

                if (wcs[wcsIdx].equals(""?"")) {
                    // ? so move to next text char
                    textIdx++;
                    if (textIdx > fileName.length()) {
                        break;
                    }
                    anyChars = false;

                } else if (wcs[wcsIdx].equals(""*"")) {
                    // set any chars status
                    anyChars = true;
                    if (wcsIdx == wcs.length - 1) {
                        textIdx = fileName.length();
                    }

                } else {
                    // matching text token
                    if (anyChars) {
                        // any chars then try to locate text token
                        textIdx = caseSensitivity.checkIndexOf(fileName, textIdx, wcs[wcsIdx]);
                        if (textIdx == -1) {
                            // token not found
                            break;
                        }
                        final int repeat = caseSensitivity.checkIndexOf(fileName, textIdx + 1, wcs[wcsIdx]);
                        if (repeat >= 0) {
                            backtrack.push(new int[] { wcsIdx, repeat });
                        }
                    } else if (!caseSensitivity.checkRegionMatches(fileName, textIdx, wcs[wcsIdx])) {
                        // matching from current position
                        // couldnt match token
                        break;
                    }

                    // matched text token, move text index to end of matched
                    // token
                    textIdx += wcs[wcsIdx].length();
                    anyChars = false;
                }

                wcsIdx++;
            }

            // full match
            if (wcsIdx == wcs.length && textIdx == fileName.length()) {
                return true;
            }

        } while (!backtrack.isEmpty());

        return false;
    }","  public void test9()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = WildcardFileFilter.wildcardMatch(""rj:XjIa~\""4mk"", ""*EU+T-x"", iOCase0);
}"
1319,"    static boolean wildcardMatch(final String fileName, final String wildcardMatcher, IOCase caseSensitivity) {
        if (fileName == null && wildcardMatcher == null) {
            return true;
        }
        if (fileName == null || wildcardMatcher == null) {
            return false;
        }
        if (caseSensitivity == null) {
            caseSensitivity = IOCase.SENSITIVE;
        }
        final String[] wcs = splitOnTokens(wildcardMatcher);
        boolean anyChars = false;
        int textIdx = 0;
        int wcsIdx = 0;
        final Stack<int[]> backtrack = new Stack<>();

        // loop around a backtrack stack, to handle complex * matching
        do {
            if (!backtrack.isEmpty()) {
                final int[] array = backtrack.pop();
                wcsIdx = array[0];
                textIdx = array[1];
                anyChars = true;
            }

            // loop whilst tokens and text left to process
            while (wcsIdx < wcs.length) {

                if (wcs[wcsIdx].equals(""?"")) {
                    // ? so move to next text char
                    textIdx++;
                    if (textIdx > fileName.length()) {
                        break;
                    }
                    anyChars = false;

                } else if (wcs[wcsIdx].equals(""*"")) {
                    // set any chars status
                    anyChars = true;
                    if (wcsIdx == wcs.length - 1) {
                        textIdx = fileName.length();
                    }

                } else {
                    // matching text token
                    if (anyChars) {
                        // any chars then try to locate text token
                        textIdx = caseSensitivity.checkIndexOf(fileName, textIdx, wcs[wcsIdx]);
                        if (textIdx == -1) {
                            // token not found
                            break;
                        }
                        final int repeat = caseSensitivity.checkIndexOf(fileName, textIdx + 1, wcs[wcsIdx]);
                        if (repeat >= 0) {
                            backtrack.push(new int[] { wcsIdx, repeat });
                        }
                    } else if (!caseSensitivity.checkRegionMatches(fileName, textIdx, wcs[wcsIdx])) {
                        // matching from current position
                        // couldnt match token
                        break;
                    }

                    // matched text token, move text index to end of matched
                    // token
                    textIdx += wcs[wcsIdx].length();
                    anyChars = false;
                }

                wcsIdx++;
            }

            // full match
            if (wcsIdx == wcs.length && textIdx == fileName.length()) {
                return true;
            }

        } while (!backtrack.isEmpty());

        return false;
    }","  public void test10()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = WildcardFileFilter.wildcardMatch(""glob:"", ""*"", iOCase0);
}"
1320,"    static boolean wildcardMatch(final String fileName, final String wildcardMatcher, IOCase caseSensitivity) {
        if (fileName == null && wildcardMatcher == null) {
            return true;
        }
        if (fileName == null || wildcardMatcher == null) {
            return false;
        }
        if (caseSensitivity == null) {
            caseSensitivity = IOCase.SENSITIVE;
        }
        final String[] wcs = splitOnTokens(wildcardMatcher);
        boolean anyChars = false;
        int textIdx = 0;
        int wcsIdx = 0;
        final Stack<int[]> backtrack = new Stack<>();

        // loop around a backtrack stack, to handle complex * matching
        do {
            if (!backtrack.isEmpty()) {
                final int[] array = backtrack.pop();
                wcsIdx = array[0];
                textIdx = array[1];
                anyChars = true;
            }

            // loop whilst tokens and text left to process
            while (wcsIdx < wcs.length) {

                if (wcs[wcsIdx].equals(""?"")) {
                    // ? so move to next text char
                    textIdx++;
                    if (textIdx > fileName.length()) {
                        break;
                    }
                    anyChars = false;

                } else if (wcs[wcsIdx].equals(""*"")) {
                    // set any chars status
                    anyChars = true;
                    if (wcsIdx == wcs.length - 1) {
                        textIdx = fileName.length();
                    }

                } else {
                    // matching text token
                    if (anyChars) {
                        // any chars then try to locate text token
                        textIdx = caseSensitivity.checkIndexOf(fileName, textIdx, wcs[wcsIdx]);
                        if (textIdx == -1) {
                            // token not found
                            break;
                        }
                        final int repeat = caseSensitivity.checkIndexOf(fileName, textIdx + 1, wcs[wcsIdx]);
                        if (repeat >= 0) {
                            backtrack.push(new int[] { wcsIdx, repeat });
                        }
                    } else if (!caseSensitivity.checkRegionMatches(fileName, textIdx, wcs[wcsIdx])) {
                        // matching from current position
                        // couldnt match token
                        break;
                    }

                    // matched text token, move text index to end of matched
                    // token
                    textIdx += wcs[wcsIdx].length();
                    anyChars = false;
                }

                wcsIdx++;
            }

            // full match
            if (wcsIdx == wcs.length && textIdx == fileName.length()) {
                return true;
            }

        } while (!backtrack.isEmpty());

        return false;
    }","  public void test11()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = WildcardFileFilter.wildcardMatch(""\""yl$|^(].Nb[&c=C?"", ""\""yl$|^(].Nb[&c=C?"", iOCase0);
}"
1321,"    static boolean wildcardMatch(final String fileName, final String wildcardMatcher, IOCase caseSensitivity) {
        if (fileName == null && wildcardMatcher == null) {
            return true;
        }
        if (fileName == null || wildcardMatcher == null) {
            return false;
        }
        if (caseSensitivity == null) {
            caseSensitivity = IOCase.SENSITIVE;
        }
        final String[] wcs = splitOnTokens(wildcardMatcher);
        boolean anyChars = false;
        int textIdx = 0;
        int wcsIdx = 0;
        final Stack<int[]> backtrack = new Stack<>();

        // loop around a backtrack stack, to handle complex * matching
        do {
            if (!backtrack.isEmpty()) {
                final int[] array = backtrack.pop();
                wcsIdx = array[0];
                textIdx = array[1];
                anyChars = true;
            }

            // loop whilst tokens and text left to process
            while (wcsIdx < wcs.length) {

                if (wcs[wcsIdx].equals(""?"")) {
                    // ? so move to next text char
                    textIdx++;
                    if (textIdx > fileName.length()) {
                        break;
                    }
                    anyChars = false;

                } else if (wcs[wcsIdx].equals(""*"")) {
                    // set any chars status
                    anyChars = true;
                    if (wcsIdx == wcs.length - 1) {
                        textIdx = fileName.length();
                    }

                } else {
                    // matching text token
                    if (anyChars) {
                        // any chars then try to locate text token
                        textIdx = caseSensitivity.checkIndexOf(fileName, textIdx, wcs[wcsIdx]);
                        if (textIdx == -1) {
                            // token not found
                            break;
                        }
                        final int repeat = caseSensitivity.checkIndexOf(fileName, textIdx + 1, wcs[wcsIdx]);
                        if (repeat >= 0) {
                            backtrack.push(new int[] { wcsIdx, repeat });
                        }
                    } else if (!caseSensitivity.checkRegionMatches(fileName, textIdx, wcs[wcsIdx])) {
                        // matching from current position
                        // couldnt match token
                        break;
                    }

                    // matched text token, move text index to end of matched
                    // token
                    textIdx += wcs[wcsIdx].length();
                    anyChars = false;
                }

                wcsIdx++;
            }

            // full match
            if (wcsIdx == wcs.length && textIdx == fileName.length()) {
                return true;
            }

        } while (!backtrack.isEmpty());

        return false;
    }","  public void test12()  throws Throwable  {
      boolean boolean0 = WildcardFileFilter.wildcardMatch("""", """", (IOCase) null);
}"
1322,"    static boolean wildcardMatch(final String fileName, final String wildcardMatcher, IOCase caseSensitivity) {
        if (fileName == null && wildcardMatcher == null) {
            return true;
        }
        if (fileName == null || wildcardMatcher == null) {
            return false;
        }
        if (caseSensitivity == null) {
            caseSensitivity = IOCase.SENSITIVE;
        }
        final String[] wcs = splitOnTokens(wildcardMatcher);
        boolean anyChars = false;
        int textIdx = 0;
        int wcsIdx = 0;
        final Stack<int[]> backtrack = new Stack<>();

        // loop around a backtrack stack, to handle complex * matching
        do {
            if (!backtrack.isEmpty()) {
                final int[] array = backtrack.pop();
                wcsIdx = array[0];
                textIdx = array[1];
                anyChars = true;
            }

            // loop whilst tokens and text left to process
            while (wcsIdx < wcs.length) {

                if (wcs[wcsIdx].equals(""?"")) {
                    // ? so move to next text char
                    textIdx++;
                    if (textIdx > fileName.length()) {
                        break;
                    }
                    anyChars = false;

                } else if (wcs[wcsIdx].equals(""*"")) {
                    // set any chars status
                    anyChars = true;
                    if (wcsIdx == wcs.length - 1) {
                        textIdx = fileName.length();
                    }

                } else {
                    // matching text token
                    if (anyChars) {
                        // any chars then try to locate text token
                        textIdx = caseSensitivity.checkIndexOf(fileName, textIdx, wcs[wcsIdx]);
                        if (textIdx == -1) {
                            // token not found
                            break;
                        }
                        final int repeat = caseSensitivity.checkIndexOf(fileName, textIdx + 1, wcs[wcsIdx]);
                        if (repeat >= 0) {
                            backtrack.push(new int[] { wcsIdx, repeat });
                        }
                    } else if (!caseSensitivity.checkRegionMatches(fileName, textIdx, wcs[wcsIdx])) {
                        // matching from current position
                        // couldnt match token
                        break;
                    }

                    // matched text token, move text index to end of matched
                    // token
                    textIdx += wcs[wcsIdx].length();
                    anyChars = false;
                }

                wcsIdx++;
            }

            // full match
            if (wcsIdx == wcs.length && textIdx == fileName.length()) {
                return true;
            }

        } while (!backtrack.isEmpty());

        return false;
    }","  public void test13()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = WildcardFileFilter.wildcardMatch(""OyMr=?"", (String) null, iOCase0);
}"
1323,"    static boolean wildcardMatch(final String fileName, final String wildcardMatcher, IOCase caseSensitivity) {
        if (fileName == null && wildcardMatcher == null) {
            return true;
        }
        if (fileName == null || wildcardMatcher == null) {
            return false;
        }
        if (caseSensitivity == null) {
            caseSensitivity = IOCase.SENSITIVE;
        }
        final String[] wcs = splitOnTokens(wildcardMatcher);
        boolean anyChars = false;
        int textIdx = 0;
        int wcsIdx = 0;
        final Stack<int[]> backtrack = new Stack<>();

        // loop around a backtrack stack, to handle complex * matching
        do {
            if (!backtrack.isEmpty()) {
                final int[] array = backtrack.pop();
                wcsIdx = array[0];
                textIdx = array[1];
                anyChars = true;
            }

            // loop whilst tokens and text left to process
            while (wcsIdx < wcs.length) {

                if (wcs[wcsIdx].equals(""?"")) {
                    // ? so move to next text char
                    textIdx++;
                    if (textIdx > fileName.length()) {
                        break;
                    }
                    anyChars = false;

                } else if (wcs[wcsIdx].equals(""*"")) {
                    // set any chars status
                    anyChars = true;
                    if (wcsIdx == wcs.length - 1) {
                        textIdx = fileName.length();
                    }

                } else {
                    // matching text token
                    if (anyChars) {
                        // any chars then try to locate text token
                        textIdx = caseSensitivity.checkIndexOf(fileName, textIdx, wcs[wcsIdx]);
                        if (textIdx == -1) {
                            // token not found
                            break;
                        }
                        final int repeat = caseSensitivity.checkIndexOf(fileName, textIdx + 1, wcs[wcsIdx]);
                        if (repeat >= 0) {
                            backtrack.push(new int[] { wcsIdx, repeat });
                        }
                    } else if (!caseSensitivity.checkRegionMatches(fileName, textIdx, wcs[wcsIdx])) {
                        // matching from current position
                        // couldnt match token
                        break;
                    }

                    // matched text token, move text index to end of matched
                    // token
                    textIdx += wcs[wcsIdx].length();
                    anyChars = false;
                }

                wcsIdx++;
            }

            // full match
            if (wcsIdx == wcs.length && textIdx == fileName.length()) {
                return true;
            }

        } while (!backtrack.isEmpty());

        return false;
    }","  public void test14()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = WildcardFileFilter.wildcardMatch((String) null, ""7r0Zl:)!J/S3DW=.fdNI"", iOCase0);
}"
1324,"    static boolean wildcardMatch(final String fileName, final String wildcardMatcher, IOCase caseSensitivity) {
        if (fileName == null && wildcardMatcher == null) {
            return true;
        }
        if (fileName == null || wildcardMatcher == null) {
            return false;
        }
        if (caseSensitivity == null) {
            caseSensitivity = IOCase.SENSITIVE;
        }
        final String[] wcs = splitOnTokens(wildcardMatcher);
        boolean anyChars = false;
        int textIdx = 0;
        int wcsIdx = 0;
        final Stack<int[]> backtrack = new Stack<>();

        // loop around a backtrack stack, to handle complex * matching
        do {
            if (!backtrack.isEmpty()) {
                final int[] array = backtrack.pop();
                wcsIdx = array[0];
                textIdx = array[1];
                anyChars = true;
            }

            // loop whilst tokens and text left to process
            while (wcsIdx < wcs.length) {

                if (wcs[wcsIdx].equals(""?"")) {
                    // ? so move to next text char
                    textIdx++;
                    if (textIdx > fileName.length()) {
                        break;
                    }
                    anyChars = false;

                } else if (wcs[wcsIdx].equals(""*"")) {
                    // set any chars status
                    anyChars = true;
                    if (wcsIdx == wcs.length - 1) {
                        textIdx = fileName.length();
                    }

                } else {
                    // matching text token
                    if (anyChars) {
                        // any chars then try to locate text token
                        textIdx = caseSensitivity.checkIndexOf(fileName, textIdx, wcs[wcsIdx]);
                        if (textIdx == -1) {
                            // token not found
                            break;
                        }
                        final int repeat = caseSensitivity.checkIndexOf(fileName, textIdx + 1, wcs[wcsIdx]);
                        if (repeat >= 0) {
                            backtrack.push(new int[] { wcsIdx, repeat });
                        }
                    } else if (!caseSensitivity.checkRegionMatches(fileName, textIdx, wcs[wcsIdx])) {
                        // matching from current position
                        // couldnt match token
                        break;
                    }

                    // matched text token, move text index to end of matched
                    // token
                    textIdx += wcs[wcsIdx].length();
                    anyChars = false;
                }

                wcsIdx++;
            }

            // full match
            if (wcsIdx == wcs.length && textIdx == fileName.length()) {
                return true;
            }

        } while (!backtrack.isEmpty());

        return false;
    }","  public void test15()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = WildcardFileFilter.wildcardMatch((String) null, (String) null, iOCase0);
}"
1325,"    static boolean wildcardMatch(final String fileName, final String wildcardMatcher, IOCase caseSensitivity) {
        if (fileName == null && wildcardMatcher == null) {
            return true;
        }
        if (fileName == null || wildcardMatcher == null) {
            return false;
        }
        if (caseSensitivity == null) {
            caseSensitivity = IOCase.SENSITIVE;
        }
        final String[] wcs = splitOnTokens(wildcardMatcher);
        boolean anyChars = false;
        int textIdx = 0;
        int wcsIdx = 0;
        final Stack<int[]> backtrack = new Stack<>();

        // loop around a backtrack stack, to handle complex * matching
        do {
            if (!backtrack.isEmpty()) {
                final int[] array = backtrack.pop();
                wcsIdx = array[0];
                textIdx = array[1];
                anyChars = true;
            }

            // loop whilst tokens and text left to process
            while (wcsIdx < wcs.length) {

                if (wcs[wcsIdx].equals(""?"")) {
                    // ? so move to next text char
                    textIdx++;
                    if (textIdx > fileName.length()) {
                        break;
                    }
                    anyChars = false;

                } else if (wcs[wcsIdx].equals(""*"")) {
                    // set any chars status
                    anyChars = true;
                    if (wcsIdx == wcs.length - 1) {
                        textIdx = fileName.length();
                    }

                } else {
                    // matching text token
                    if (anyChars) {
                        // any chars then try to locate text token
                        textIdx = caseSensitivity.checkIndexOf(fileName, textIdx, wcs[wcsIdx]);
                        if (textIdx == -1) {
                            // token not found
                            break;
                        }
                        final int repeat = caseSensitivity.checkIndexOf(fileName, textIdx + 1, wcs[wcsIdx]);
                        if (repeat >= 0) {
                            backtrack.push(new int[] { wcsIdx, repeat });
                        }
                    } else if (!caseSensitivity.checkRegionMatches(fileName, textIdx, wcs[wcsIdx])) {
                        // matching from current position
                        // couldnt match token
                        break;
                    }

                    // matched text token, move text index to end of matched
                    // token
                    textIdx += wcs[wcsIdx].length();
                    anyChars = false;
                }

                wcsIdx++;
            }

            // full match
            if (wcsIdx == wcs.length && textIdx == fileName.length()) {
                return true;
            }

        } while (!backtrack.isEmpty());

        return false;
    }","  public void test16()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = WildcardFileFilter.wildcardMatch(""org.apache.commons.vfs2.filter.WildcardFileFilter@1(**RqP/AEZ51[jKu,**RqP/AEZ51[jKu)"", ""**RqP/AEZ51[jKu"", iOCase0);
}"
1326,"    static boolean wildcardMatch(final String fileName, final String wildcardMatcher, IOCase caseSensitivity) {
        if (fileName == null && wildcardMatcher == null) {
            return true;
        }
        if (fileName == null || wildcardMatcher == null) {
            return false;
        }
        if (caseSensitivity == null) {
            caseSensitivity = IOCase.SENSITIVE;
        }
        final String[] wcs = splitOnTokens(wildcardMatcher);
        boolean anyChars = false;
        int textIdx = 0;
        int wcsIdx = 0;
        final Stack<int[]> backtrack = new Stack<>();

        // loop around a backtrack stack, to handle complex * matching
        do {
            if (!backtrack.isEmpty()) {
                final int[] array = backtrack.pop();
                wcsIdx = array[0];
                textIdx = array[1];
                anyChars = true;
            }

            // loop whilst tokens and text left to process
            while (wcsIdx < wcs.length) {

                if (wcs[wcsIdx].equals(""?"")) {
                    // ? so move to next text char
                    textIdx++;
                    if (textIdx > fileName.length()) {
                        break;
                    }
                    anyChars = false;

                } else if (wcs[wcsIdx].equals(""*"")) {
                    // set any chars status
                    anyChars = true;
                    if (wcsIdx == wcs.length - 1) {
                        textIdx = fileName.length();
                    }

                } else {
                    // matching text token
                    if (anyChars) {
                        // any chars then try to locate text token
                        textIdx = caseSensitivity.checkIndexOf(fileName, textIdx, wcs[wcsIdx]);
                        if (textIdx == -1) {
                            // token not found
                            break;
                        }
                        final int repeat = caseSensitivity.checkIndexOf(fileName, textIdx + 1, wcs[wcsIdx]);
                        if (repeat >= 0) {
                            backtrack.push(new int[] { wcsIdx, repeat });
                        }
                    } else if (!caseSensitivity.checkRegionMatches(fileName, textIdx, wcs[wcsIdx])) {
                        // matching from current position
                        // couldnt match token
                        break;
                    }

                    // matched text token, move text index to end of matched
                    // token
                    textIdx += wcs[wcsIdx].length();
                    anyChars = false;
                }

                wcsIdx++;
            }

            // full match
            if (wcsIdx == wcs.length && textIdx == fileName.length()) {
                return true;
            }

        } while (!backtrack.isEmpty());

        return false;
    }","  public void test17()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = WildcardFileFilter.wildcardMatch("""", ""?"", iOCase0);
}"
1327,"    public boolean accept(final FileSelectInfo fileSelectInfo) {
        final String name = fileSelectInfo.getFile().getName().getBaseName();
        for (final String wildcard : wildcards) {
            if (wildcardMatch(name, wildcard, caseSensitivity)) {
                return true;
            }
        }
        return false;
    }","  public void test18()  throws Throwable  {
      String[] stringArray0 = WildcardFileFilter.splitOnTokens("""");
      IOCase iOCase0 = IOCase.INSENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(iOCase0, stringArray0);
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(fileName0).getBaseName();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = wildcardFileFilter0.accept(fileSelectInfo0);
}"
1328,"    public boolean accept(final FileSelectInfo fileSelectInfo) {
        final String name = fileSelectInfo.getFile().getName().getBaseName();
        for (final String wildcard : wildcards) {
            if (wildcardMatch(name, wildcard, caseSensitivity)) {
                return true;
            }
        }
        return false;
    }","  public void test19()  throws Throwable  {
      String[] stringArray0 = WildcardFileFilter.splitOnTokens("""");
      IOCase iOCase0 = IOCase.INSENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(iOCase0, stringArray0);
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.hadoop.thirdparty.com.google.common.cache.CacheLoader"").when(fileName0).getBaseName();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = wildcardFileFilter0.accept(fileSelectInfo0);
}"
1329,"    public boolean accept(final FileSelectInfo fileSelectInfo) {
        final String name = fileSelectInfo.getFile().getName().getBaseName();
        for (final String wildcard : wildcards) {
            if (wildcardMatch(name, wildcard, caseSensitivity)) {
                return true;
            }
        }
        return false;
    }","  public void test20()  throws Throwable  {
      String[] stringArray0 = WildcardFileFilter.splitOnTokens("""");
      IOCase iOCase0 = IOCase.INSENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(iOCase0, stringArray0);
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.hadoop.thirdparty.com.google.common.cache.CacheLoader"").when(fileName0).getBaseName();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = wildcardFileFilter0.accept(fileSelectInfo0);
}"
1330,"    public WildcardFileFilter(final List<String> wildcards) {
        this((IOCase) null, wildcards);
    }","  public void test21()  throws Throwable  {
      WildcardFileFilter wildcardFileFilter0 = null;
      try {
        wildcardFileFilter0 = new WildcardFileFilter((String[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The wildcard array must not be null
         //
         verifyException(""org.apache.commons.vfs2.filter.WildcardFileFilter"", e);
      }
  }"
1331,"    public WildcardFileFilter(final List<String> wildcards) {
        this((IOCase) null, wildcards);
    }","  public void test22()  throws Throwable  {
      WildcardFileFilter wildcardFileFilter0 = null;
      try {
        wildcardFileFilter0 = new WildcardFileFilter((List<String>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The wildcard list must not be null
         //
         verifyException(""org.apache.commons.vfs2.filter.WildcardFileFilter"", e);
      }
  }"
1332,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(super.toString());
        buffer.append(""("");
        if (wildcards != null) {
            for (int i = 0; i < wildcards.size(); i++) {
                if (i > 0) {
                    buffer.append("","");
                }
                buffer.append(wildcards.get(i));
            }
        }
        buffer.append("")"");
        return buffer.toString();
    }","  public void test23()  throws Throwable  {
      String[] stringArray0 = WildcardFileFilter.splitOnTokens("")*"");
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(stringArray0);
      wildcardFileFilter0.toString();
}"
1333,"    public WildcardFileFilter(final List<String> wildcards) {
        this((IOCase) null, wildcards);
    }","  public void test24()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(stack0);
  }"
1334,"    public static void main(final String[] args) throws Exception {
        if (args.length == 0) {
            System.err.println(""Please pass the name of a file as parameter."");
            return;
        }

        final FileObject fo = VFS.getManager().resolveFile(args[0]);
        final long setTo = System.currentTimeMillis();
        System.err.println(""set to: "" + setTo);
        fo.getContent().setLastModifiedTime(setTo);
        System.err.println(""after set: "" + fo.getContent().getLastModifiedTime());
    }","  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[4];
      try { 
        ChangeLastModificationTime.main(stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
1335,"    public static void main(final String[] args) throws Exception {
        if (args.length == 0) {
            System.err.println(""Please pass the name of a file as parameter."");
            return;
        }

        final FileObject fo = VFS.getManager().resolveFile(args[0]);
        final long setTo = System.currentTimeMillis();
        System.err.println(""set to: "" + setTo);
        fo.getContent().setLastModifiedTime(setTo);
        System.err.println(""after set: "" + fo.getContent().getLastModifiedTime());
    }","  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ""TJNTkC9\""gmN\""iR,RHyH"";
      try { 
        ChangeLastModificationTime.main(stringArray0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not find file with URI \""TJNTkC9\""gmN\""iR,RHyH\"" because it is a relative path, and no base URI was provided.
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
1336,"    public static void main(final String[] args) throws Exception {
        if (args.length == 0) {
            System.err.println(""Please pass the name of a file as parameter."");
            return;
        }

        final FileObject fo = VFS.getManager().resolveFile(args[0]);
        final long setTo = System.currentTimeMillis();
        System.err.println(""set to: "" + setTo);
        fo.getContent().setLastModifiedTime(setTo);
        System.err.println(""after set: "" + fo.getContent().getLastModifiedTime());
    }","  public void test2()  throws Throwable  {
      try { 
        ChangeLastModificationTime.main((String[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.example.ChangeLastModificationTime"", e);
      }
  }"
1337,"    public static void main(final String[] args) throws Exception {
        if (args.length == 0) {
            System.err.println(""Please pass the name of a file as parameter."");
            return;
        }

        final FileObject fo = VFS.getManager().resolveFile(args[0]);
        final long setTo = System.currentTimeMillis();
        System.err.println(""set to: "" + setTo);
        fo.getContent().setLastModifiedTime(setTo);
        System.err.println(""after set: "" + fo.getContent().getLastModifiedTime());
    }","  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ChangeLastModificationTime.main(stringArray0);
}"
1338,"    public static void main(final String[] args) {
        if (args.length == 0) {
            System.err.println(""Please pass the name of a file as parameter."");
            System.err.println(""e.g. java org.apache.commons.vfs2.example.ShowProperties LICENSE.txt"");
            return;
        }
        for (final String arg : args) {
            try {
                final FileSystemManager mgr = VFS.getManager();
                System.out.println();
                System.out.println(""Parsing: "" + arg);
                final FileObject file = mgr.resolveFile(arg);
                System.out.println(""URL: "" + file.getURL());
                System.out.println(""getName(): "" + file.getName());
                System.out.println(""BaseName: "" + file.getName().getBaseName());
                System.out.println(""Extension: "" + file.getName().getExtension());
                System.out.println(""Path: "" + file.getName().getPath());
                System.out.println(""Scheme: "" + file.getName().getScheme());
                System.out.println(""URI: "" + file.getName().getURI());
                System.out.println(""Root URI: "" + file.getName().getRootURI());
                System.out.println(""Parent: "" + file.getName().getParent());
                System.out.println(""Type: "" + file.getType());
                System.out.println(""Exists: "" + file.exists());
                System.out.println(""Readable: "" + file.isReadable());
                System.out.println(""Writeable: "" + file.isWriteable());
                System.out.println(""Root path: "" + file.getFileSystem().getRoot().getName().getPath());
                if (file.exists()) {
                    if (file.getType().equals(FileType.FILE)) {
                        System.out.println(""Size: "" + file.getContent().getSize() + "" bytes"");
                    } else if (file.getType().equals(FileType.FOLDER) && file.isReadable()) {
                        final FileObject[] children = file.getChildren();
                        System.out.println(""Directory with "" + children.length + "" files"");
                        for (int iterChildren = 0; iterChildren < children.length; iterChildren++) {
                            System.out.println(""#"" + iterChildren + "": "" + children[iterChildren].getName());
                            if (iterChildren > SHOW_MAX) {
                                break;
                            }
                        }
                    }
                    System.out.println(""Last modified: ""
                            + DateFormat.getInstance().format(new Date(file.getContent().getLastModifiedTime())));
                } else {
                    System.out.println(""The file does not exist"");
                }
                file.close();
            } catch (final FileSystemException ex) {
                ex.printStackTrace();
            }
        }
    }","  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        ShowProperties.main(stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.impl.DefaultFileSystemManager"", e);
      }
  }"
1339,"    public static void main(final String[] args) {
        if (args.length == 0) {
            System.err.println(""Please pass the name of a file as parameter."");
            System.err.println(""e.g. java org.apache.commons.vfs2.example.ShowProperties LICENSE.txt"");
            return;
        }
        for (final String arg : args) {
            try {
                final FileSystemManager mgr = VFS.getManager();
                System.out.println();
                System.out.println(""Parsing: "" + arg);
                final FileObject file = mgr.resolveFile(arg);
                System.out.println(""URL: "" + file.getURL());
                System.out.println(""getName(): "" + file.getName());
                System.out.println(""BaseName: "" + file.getName().getBaseName());
                System.out.println(""Extension: "" + file.getName().getExtension());
                System.out.println(""Path: "" + file.getName().getPath());
                System.out.println(""Scheme: "" + file.getName().getScheme());
                System.out.println(""URI: "" + file.getName().getURI());
                System.out.println(""Root URI: "" + file.getName().getRootURI());
                System.out.println(""Parent: "" + file.getName().getParent());
                System.out.println(""Type: "" + file.getType());
                System.out.println(""Exists: "" + file.exists());
                System.out.println(""Readable: "" + file.isReadable());
                System.out.println(""Writeable: "" + file.isWriteable());
                System.out.println(""Root path: "" + file.getFileSystem().getRoot().getName().getPath());
                if (file.exists()) {
                    if (file.getType().equals(FileType.FILE)) {
                        System.out.println(""Size: "" + file.getContent().getSize() + "" bytes"");
                    } else if (file.getType().equals(FileType.FOLDER) && file.isReadable()) {
                        final FileObject[] children = file.getChildren();
                        System.out.println(""Directory with "" + children.length + "" files"");
                        for (int iterChildren = 0; iterChildren < children.length; iterChildren++) {
                            System.out.println(""#"" + iterChildren + "": "" + children[iterChildren].getName());
                            if (iterChildren > SHOW_MAX) {
                                break;
                            }
                        }
                    }
                    System.out.println(""Last modified: ""
                            + DateFormat.getInstance().format(new Date(file.getContent().getLastModifiedTime())));
                } else {
                    System.out.println(""The file does not exist"");
                }
                file.close();
            } catch (final FileSystemException ex) {
                ex.printStackTrace();
            }
        }
    }","  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        ShowProperties.main((String[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.example.ShowProperties"", e);
      }
  }"
1340,"    public static void main(final String[] args) {
        if (args.length == 0) {
            System.err.println(""Please pass the name of a file as parameter."");
            System.err.println(""e.g. java org.apache.commons.vfs2.example.ShowProperties LICENSE.txt"");
            return;
        }
        for (final String arg : args) {
            try {
                final FileSystemManager mgr = VFS.getManager();
                System.out.println();
                System.out.println(""Parsing: "" + arg);
                final FileObject file = mgr.resolveFile(arg);
                System.out.println(""URL: "" + file.getURL());
                System.out.println(""getName(): "" + file.getName());
                System.out.println(""BaseName: "" + file.getName().getBaseName());
                System.out.println(""Extension: "" + file.getName().getExtension());
                System.out.println(""Path: "" + file.getName().getPath());
                System.out.println(""Scheme: "" + file.getName().getScheme());
                System.out.println(""URI: "" + file.getName().getURI());
                System.out.println(""Root URI: "" + file.getName().getRootURI());
                System.out.println(""Parent: "" + file.getName().getParent());
                System.out.println(""Type: "" + file.getType());
                System.out.println(""Exists: "" + file.exists());
                System.out.println(""Readable: "" + file.isReadable());
                System.out.println(""Writeable: "" + file.isWriteable());
                System.out.println(""Root path: "" + file.getFileSystem().getRoot().getName().getPath());
                if (file.exists()) {
                    if (file.getType().equals(FileType.FILE)) {
                        System.out.println(""Size: "" + file.getContent().getSize() + "" bytes"");
                    } else if (file.getType().equals(FileType.FOLDER) && file.isReadable()) {
                        final FileObject[] children = file.getChildren();
                        System.out.println(""Directory with "" + children.length + "" files"");
                        for (int iterChildren = 0; iterChildren < children.length; iterChildren++) {
                            System.out.println(""#"" + iterChildren + "": "" + children[iterChildren].getName());
                            if (iterChildren > SHOW_MAX) {
                                break;
                            }
                        }
                    }
                    System.out.println(""Last modified: ""
                            + DateFormat.getInstance().format(new Date(file.getContent().getLastModifiedTime())));
                } else {
                    System.out.println(""The file does not exist"");
                }
                file.close();
            } catch (final FileSystemException ex) {
                ex.printStackTrace();
            }
        }
    }","  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[1];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/NTBZq@@b{"");
      FileSystemHandling.createFolder(evoSuiteFile0);
      stringArray0[0] = ""/NTBZq@@b{"";
      ShowProperties.main(stringArray0);
}"
1341,"    public static void main(final String[] args) {
        if (args.length == 0) {
            System.err.println(""Please pass the name of a file as parameter."");
            System.err.println(""e.g. java org.apache.commons.vfs2.example.ShowProperties LICENSE.txt"");
            return;
        }
        for (final String arg : args) {
            try {
                final FileSystemManager mgr = VFS.getManager();
                System.out.println();
                System.out.println(""Parsing: "" + arg);
                final FileObject file = mgr.resolveFile(arg);
                System.out.println(""URL: "" + file.getURL());
                System.out.println(""getName(): "" + file.getName());
                System.out.println(""BaseName: "" + file.getName().getBaseName());
                System.out.println(""Extension: "" + file.getName().getExtension());
                System.out.println(""Path: "" + file.getName().getPath());
                System.out.println(""Scheme: "" + file.getName().getScheme());
                System.out.println(""URI: "" + file.getName().getURI());
                System.out.println(""Root URI: "" + file.getName().getRootURI());
                System.out.println(""Parent: "" + file.getName().getParent());
                System.out.println(""Type: "" + file.getType());
                System.out.println(""Exists: "" + file.exists());
                System.out.println(""Readable: "" + file.isReadable());
                System.out.println(""Writeable: "" + file.isWriteable());
                System.out.println(""Root path: "" + file.getFileSystem().getRoot().getName().getPath());
                if (file.exists()) {
                    if (file.getType().equals(FileType.FILE)) {
                        System.out.println(""Size: "" + file.getContent().getSize() + "" bytes"");
                    } else if (file.getType().equals(FileType.FOLDER) && file.isReadable()) {
                        final FileObject[] children = file.getChildren();
                        System.out.println(""Directory with "" + children.length + "" files"");
                        for (int iterChildren = 0; iterChildren < children.length; iterChildren++) {
                            System.out.println(""#"" + iterChildren + "": "" + children[iterChildren].getName());
                            if (iterChildren > SHOW_MAX) {
                                break;
                            }
                        }
                    }
                    System.out.println(""Last modified: ""
                            + DateFormat.getInstance().format(new Date(file.getContent().getLastModifiedTime())));
                } else {
                    System.out.println(""The file does not exist"");
                }
                file.close();
            } catch (final FileSystemException ex) {
                ex.printStackTrace();
            }
        }
    }","  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[1];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/NTBZq@@b{"");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ""Extensio: "");
      stringArray0[0] = ""/NTBZq@@b{"";
      ShowProperties.main(stringArray0);
}"
1342,"    public static void main(final String[] args) {
        if (args.length == 0) {
            System.err.println(""Please pass the name of a file as parameter."");
            System.err.println(""e.g. java org.apache.commons.vfs2.example.ShowProperties LICENSE.txt"");
            return;
        }
        for (final String arg : args) {
            try {
                final FileSystemManager mgr = VFS.getManager();
                System.out.println();
                System.out.println(""Parsing: "" + arg);
                final FileObject file = mgr.resolveFile(arg);
                System.out.println(""URL: "" + file.getURL());
                System.out.println(""getName(): "" + file.getName());
                System.out.println(""BaseName: "" + file.getName().getBaseName());
                System.out.println(""Extension: "" + file.getName().getExtension());
                System.out.println(""Path: "" + file.getName().getPath());
                System.out.println(""Scheme: "" + file.getName().getScheme());
                System.out.println(""URI: "" + file.getName().getURI());
                System.out.println(""Root URI: "" + file.getName().getRootURI());
                System.out.println(""Parent: "" + file.getName().getParent());
                System.out.println(""Type: "" + file.getType());
                System.out.println(""Exists: "" + file.exists());
                System.out.println(""Readable: "" + file.isReadable());
                System.out.println(""Writeable: "" + file.isWriteable());
                System.out.println(""Root path: "" + file.getFileSystem().getRoot().getName().getPath());
                if (file.exists()) {
                    if (file.getType().equals(FileType.FILE)) {
                        System.out.println(""Size: "" + file.getContent().getSize() + "" bytes"");
                    } else if (file.getType().equals(FileType.FOLDER) && file.isReadable()) {
                        final FileObject[] children = file.getChildren();
                        System.out.println(""Directory with "" + children.length + "" files"");
                        for (int iterChildren = 0; iterChildren < children.length; iterChildren++) {
                            System.out.println(""#"" + iterChildren + "": "" + children[iterChildren].getName());
                            if (iterChildren > SHOW_MAX) {
                                break;
                            }
                        }
                    }
                    System.out.println(""Last modified: ""
                            + DateFormat.getInstance().format(new Date(file.getContent().getLastModifiedTime())));
                } else {
                    System.out.println(""The file does not exist"");
                }
                file.close();
            } catch (final FileSystemException ex) {
                ex.printStackTrace();
            }
        }
    }","  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ""/NTBZq@@b{"";
      ShowProperties.main(stringArray0);
}"
1343,"    public static void main(final String[] args) {
        if (args.length == 0) {
            System.err.println(""Please pass the name of a file as parameter."");
            System.err.println(""e.g. java org.apache.commons.vfs2.example.ShowProperties LICENSE.txt"");
            return;
        }
        for (final String arg : args) {
            try {
                final FileSystemManager mgr = VFS.getManager();
                System.out.println();
                System.out.println(""Parsing: "" + arg);
                final FileObject file = mgr.resolveFile(arg);
                System.out.println(""URL: "" + file.getURL());
                System.out.println(""getName(): "" + file.getName());
                System.out.println(""BaseName: "" + file.getName().getBaseName());
                System.out.println(""Extension: "" + file.getName().getExtension());
                System.out.println(""Path: "" + file.getName().getPath());
                System.out.println(""Scheme: "" + file.getName().getScheme());
                System.out.println(""URI: "" + file.getName().getURI());
                System.out.println(""Root URI: "" + file.getName().getRootURI());
                System.out.println(""Parent: "" + file.getName().getParent());
                System.out.println(""Type: "" + file.getType());
                System.out.println(""Exists: "" + file.exists());
                System.out.println(""Readable: "" + file.isReadable());
                System.out.println(""Writeable: "" + file.isWriteable());
                System.out.println(""Root path: "" + file.getFileSystem().getRoot().getName().getPath());
                if (file.exists()) {
                    if (file.getType().equals(FileType.FILE)) {
                        System.out.println(""Size: "" + file.getContent().getSize() + "" bytes"");
                    } else if (file.getType().equals(FileType.FOLDER) && file.isReadable()) {
                        final FileObject[] children = file.getChildren();
                        System.out.println(""Directory with "" + children.length + "" files"");
                        for (int iterChildren = 0; iterChildren < children.length; iterChildren++) {
                            System.out.println(""#"" + iterChildren + "": "" + children[iterChildren].getName());
                            if (iterChildren > SHOW_MAX) {
                                break;
                            }
                        }
                    }
                    System.out.println(""Last modified: ""
                            + DateFormat.getInstance().format(new Date(file.getContent().getLastModifiedTime())));
                } else {
                    System.out.println(""The file does not exist"");
                }
                file.close();
            } catch (final FileSystemException ex) {
                ex.printStackTrace();
            }
        }
    }","  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ShowProperties.main(stringArray0);
}"
1344,"    public static void main(final String[] args) {
        try {
            new Shell().go();
        } catch (final Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        System.exit(0);
    }","  public void test0()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""[-R]"");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      SystemInUtil.addInputLine(""ls [-R] [path]     Lists contents of a file or folder."");
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        Shell.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1345,"    public static void main(final String[] args) {
        try {
            new Shell().go();
        } catch (final Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        System.exit(0);
    }","  public void test1()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""<src>"");
      FileSystemHandling.createFolder(evoSuiteFile0);
      SystemInUtil.addInputLine(""cp <src> <dest>    Copies a file or folder."");
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        Shell.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1346,"    public static void main(final String[] args) {
        try {
            new Shell().go();
        } catch (final Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        System.exit(0);
    }","  public void test2()  throws Throwable  {
      SystemInUtil.addInputLine(""cat <file>         Displays the contents of a file."");
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        Shell.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1347,"    public static void main(final String[] args) {
        try {
            new Shell().go();
        } catch (final Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        System.exit(0);
    }","  public void test3()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""<dest>"");
      FileSystemHandling.createFolder(evoSuiteFile0);
      SystemInUtil.addInputLine(""cp <src> <dest>    Copies a file or folder."");
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        Shell.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1348,"    public static void main(final String[] args) {
        try {
            new Shell().go();
        } catch (final Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        System.exit(0);
    }","  public void test4()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""<dest>"");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ""UAGE rm <path>"");
      SystemInUtil.addInputLine(""cp <src> <dest>    Copies a file or folder."");
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        Shell.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1349,"    public static void main(final String[] args) {
        try {
            new Shell().go();
        } catch (final Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        System.exit(0);
    }","  public void test5()  throws Throwable  {
      SystemInUtil.addInputLine(""cp"");
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        Shell.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1350,"    public static void main(final String[] args) {
        try {
            new Shell().go();
        } catch (final Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        System.exit(0);
    }","  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[5];
      SystemInUtil.addInputLine(""rm <path>          Deletes a file or folder."");
      // Undeclared exception!
      try { 
        Shell.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1351,"    public static void main(final String[] args) {
        try {
            new Shell().go();
        } catch (final Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        System.exit(0);
    }","  public void test7()  throws Throwable  {
      SystemInUtil.addInputLine(""info [scheme]      Displays information about providSrs."");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Shell.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1352,"    public static void main(final String[] args) {
        try {
            new Shell().go();
        } catch (final Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        System.exit(0);
    }","  public void test8()  throws Throwable  {
      SystemInUtil.addInputLine(""info"");
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        Shell.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1353,"    public static void main(final String[] args) {
        try {
            new Shell().go();
        } catch (final Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        System.exit(0);
    }","  public void test9()  throws Throwable  {
      SystemInUtil.addInputLine(""touch"");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Shell.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1354,"    public static void main(final String[] args) {
        try {
            new Shell().go();
        } catch (final Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        System.exit(0);
    }","  public void test10()  throws Throwable  {
      SystemInUtil.addInputLine(""rm"");
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        Shell.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1355,"    public static void main(final String[] args) {
        try {
            new Shell().go();
        } catch (final Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        System.exit(0);
    }","  public void test11()  throws Throwable  {
      SystemInUtil.addInputLine(""itlfo"");
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        Shell.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1356,"    public static void main(final String[] args) {
        try {
            new Shell().go();
        } catch (final Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        System.exit(0);
    }","  public void test12()  throws Throwable  {
      SystemInUtil.addInputLine(""ls"");
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        Shell.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1357,"    public static void main(final String[] args) {
        try {
            new Shell().go();
        } catch (final Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        System.exit(0);
    }","  public void test13()  throws Throwable  {
      SystemInUtil.addInputLine(""?"");
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        Shell.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1358,"    public static void main(final String[] args) {
        try {
            new Shell().go();
        } catch (final Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        System.exit(0);
    }","  public void test14()  throws Throwable  {
      SystemInUtil.addInputLine(""cd"");
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        Shell.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1359,"    public static void main(final String[] args) {
        try {
            new Shell().go();
        } catch (final Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        System.exit(0);
    }","  public void test15()  throws Throwable  {
      SystemInUtil.addInputLine(""cat"");
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        Shell.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1360,"    public static void main(final String[] args) {
        try {
            new Shell().go();
        } catch (final Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        System.exit(0);
    }","  public void test16()  throws Throwable  {
      SystemInUtil.addInputLine(""quit"");
      // Undeclared exception!
      try { 
        Shell.main((String[]) null);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1361,"    public static void main(final String[] args) {
        try {
            new Shell().go();
        } catch (final Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        System.exit(0);
    }","  public void test17()  throws Throwable  {
      SystemInUtil.addInputLine(""exit"");
      // Undeclared exception!
      try { 
        Shell.main((String[]) null);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1362,"    public static void main(final String[] args) {
        try {
            new Shell().go();
        } catch (final Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        System.exit(0);
    }","  public void test18()  throws Throwable  {
      SystemInUtil.addInputLine("""");
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        Shell.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1363,"    public static void main(final String[] args) {
        try {
            new Shell().go();
        } catch (final Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        System.exit(0);
    }","  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[23];
      SystemInUtil.addInputLine(""pwd"");
      // Undeclared exception!
      try { 
        Shell.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1364,"    public static void main(final String[] args) {
        try {
            new Shell().go();
        } catch (final Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        System.exit(0);
    }","  public void test20()  throws Throwable  {
      SystemInUtil.addInputLine(""help"");
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        Shell.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1365,"    public static void main(final String[] args) {
        try {
            new Shell().go();
        } catch (final Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        System.exit(0);
    }","  public void test21()  throws Throwable  {
      SystemInUtil.addInputLine(""pwfs"");
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        Shell.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1366,"    public static void main(final String[] args) {
        try {
            new Shell().go();
        } catch (final Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        System.exit(0);
    }","  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        Shell.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1367,"    public static void main(final String[] args) throws Exception {

        // Example, showing how to print out a list of the current directory's
        // hidden files
        {
            System.out.println(""---HIDDEN---"");
            final FileSystemManager fsManager = VFS.getManager();
            final FileObject dir = fsManager.toFileObject(new File("".""));
            final FileObject[] files = dir.findFiles(new FileFilterSelector(HiddenFileFilter.HIDDEN));
            for (final FileObject file : files) {
                System.out.println(file);
            }
        }

        // Example, showing how to print out a list of the current directory's
        // visible (i.e. not hidden) files
        {
            System.out.println(""---VISIBLE---"");
            final FileSystemManager fsManager = VFS.getManager();
            final FileObject dir = fsManager.toFileObject(new File("".""));
            final FileObject[] files = dir.findFiles(new FileFilterSelector(HiddenFileFilter.VISIBLE));
            for (final FileObject file : files) {
                System.out.println(file);
            }
        }

    }","  public void test0()  throws Throwable  {
      FileSystemManager fileSystemManager0 = VFS.getManager();
      VFS.reset();
      VFS.setManager(fileSystemManager0);
      String[] stringArray0 = new String[1];
      try { 
        HiddenFileFilterExample.main(stringArray0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not find a file provider which can handle local files.
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
1368,"    public static void main(final String[] args) throws Exception {

        // Example, showing how to print out a list of the current directory's
        // hidden files
        {
            System.out.println(""---HIDDEN---"");
            final FileSystemManager fsManager = VFS.getManager();
            final FileObject dir = fsManager.toFileObject(new File("".""));
            final FileObject[] files = dir.findFiles(new FileFilterSelector(HiddenFileFilter.HIDDEN));
            for (final FileObject file : files) {
                System.out.println(file);
            }
        }

        // Example, showing how to print out a list of the current directory's
        // visible (i.e. not hidden) files
        {
            System.out.println(""---VISIBLE---"");
            final FileSystemManager fsManager = VFS.getManager();
            final FileObject dir = fsManager.toFileObject(new File("".""));
            final FileObject[] files = dir.findFiles(new FileFilterSelector(HiddenFileFilter.VISIBLE));
            for (final FileObject file : files) {
                System.out.println(file);
            }
        }

    }","  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[3];
      HiddenFileFilterExample.main(stringArray0);
      HiddenFileFilterExample.main(stringArray0);
      HiddenFileFilterExample.main(stringArray0);
      HiddenFileFilterExample.main(stringArray0);
      HiddenFileFilterExample.main(stringArray0);
      HiddenFileFilterExample.main(stringArray0);
      HiddenFileFilterExample.main(stringArray0);
      HiddenFileFilterExample.main(stringArray0);
      HiddenFileFilterExample.main(stringArray0);
      HiddenFileFilterExample.main(stringArray0);
      HiddenFileFilterExample.main(stringArray0);
      HiddenFileFilterExample.main(stringArray0);
      HiddenFileFilterExample.main(stringArray0);
      HiddenFileFilterExample.main(stringArray0);
      HiddenFileFilterExample.main(stringArray0);
      HiddenFileFilterExample.main(stringArray0);
  }"
1369,"    public static void main(final String[] args) throws Exception {

        // Example, showing how to print out a list of the current directory's
        // hidden files
        {
            System.out.println(""---HIDDEN---"");
            final FileSystemManager fsManager = VFS.getManager();
            final FileObject dir = fsManager.toFileObject(new File("".""));
            final FileObject[] files = dir.findFiles(new FileFilterSelector(HiddenFileFilter.HIDDEN));
            for (final FileObject file : files) {
                System.out.println(file);
            }
        }

        // Example, showing how to print out a list of the current directory's
        // visible (i.e. not hidden) files
        {
            System.out.println(""---VISIBLE---"");
            final FileSystemManager fsManager = VFS.getManager();
            final FileObject dir = fsManager.toFileObject(new File("".""));
            final FileObject[] files = dir.findFiles(new FileFilterSelector(HiddenFileFilter.VISIBLE));
            for (final FileObject file : files) {
                System.out.println(file);
            }
        }

    }","  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[1];
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSystemManager0).toFileObject(any(java.io.File.class));
      VFS.setManager(fileSystemManager0);
      try { 
        HiddenFileFilterExample.main(stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.example.filter.HiddenFileFilterExample"", e);
      }
  }"
1370,"    public static void main(final String[] args) throws Exception {

        // Example, showing how to print out a list of the current directory's
        // hidden files
        {
            System.out.println(""---HIDDEN---"");
            final FileSystemManager fsManager = VFS.getManager();
            final FileObject dir = fsManager.toFileObject(new File("".""));
            final FileObject[] files = dir.findFiles(new FileFilterSelector(HiddenFileFilter.HIDDEN));
            for (final FileObject file : files) {
                System.out.println(file);
            }
        }

        // Example, showing how to print out a list of the current directory's
        // visible (i.e. not hidden) files
        {
            System.out.println(""---VISIBLE---"");
            final FileSystemManager fsManager = VFS.getManager();
            final FileObject dir = fsManager.toFileObject(new File("".""));
            final FileObject[] files = dir.findFiles(new FileFilterSelector(HiddenFileFilter.VISIBLE));
            for (final FileObject file : files) {
                System.out.println(file);
            }
        }

    }","  public void test3()  throws Throwable  {
      FileObject[] fileObjectArray0 = new FileObject[33];
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((Object) fileObjectArray0, (Object) fileObjectArray0).when(fileObject0).findFiles(any(org.apache.commons.vfs2.FileSelector.class));
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0, fileObject0).when(fileSystemManager0).toFileObject(any(java.io.File.class));
      VFS.setManager(fileSystemManager0);
      String[] stringArray0 = new String[18];
      HiddenFileFilterExample.main(stringArray0);
}"
1371,,"  public void test4()  throws Throwable  {
      HiddenFileFilterExample hiddenFileFilterExample0 = new HiddenFileFilterExample();
  }"
1372,"    public static void main(final String[] args) throws Exception {

        // Example, to retrieve and print all java files where the name matched
        // the regular expression in the current directory
        final FileSystemManager fsManager = VFS.getManager();
        final FileObject dir = fsManager.toFileObject(new File("".""));
        final FileObject[] files = dir.findFiles(new FileFilterSelector(new RegexFileFilter(
                ""Ë†.*[tT]est(-\\d+)?\\.java$"")));
        for (final FileObject file : files) {
            System.out.println(file);
        }

    }","  public void test0()  throws Throwable  {
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSystemManager0).toFileObject(any(java.io.File.class));
      VFS.setManager(fileSystemManager0);
      try { 
        RegexFileFilterExample.main((String[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.example.filter.RegexFileFilterExample"", e);
      }
  }"
1373,"    public static void main(final String[] args) throws Exception {

        // Example, to retrieve and print all java files where the name matched
        // the regular expression in the current directory
        final FileSystemManager fsManager = VFS.getManager();
        final FileObject dir = fsManager.toFileObject(new File("".""));
        final FileObject[] files = dir.findFiles(new FileFilterSelector(new RegexFileFilter(
                ""Ë†.*[tT]est(-\\d+)?\\.java$"")));
        for (final FileObject file : files) {
            System.out.println(file);
        }

    }","  public void test1()  throws Throwable  {
      RegexFileFilterExample.main((String[]) null);
  }"
1374,,"  public void test2()  throws Throwable  {
      RegexFileFilterExample regexFileFilterExample0 = new RegexFileFilterExample();
  }"
1375,"    public static void main(final String[] args) throws Exception {

        // Example, to retrieve and print all java files that have the
        // expression test in the name in the current directory
        final FileSystemManager fsManager = VFS.getManager();
        final FileObject dir = fsManager.toFileObject(new File("".""));
        final FileObject[] files = dir.findFiles(new FileFilterSelector(new WildcardFileFilter(
                ""*test*.java"")));
        for (final FileObject file : files) {
            System.out.println(file);
        }

    }","  public void test0()  throws Throwable  {
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSystemManager0).toFileObject(any(java.io.File.class));
      VFS.setManager(fileSystemManager0);
      try { 
        WildcardFileFilterExample.main((String[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.example.filter.WildcardFileFilterExample"", e);
      }
  }"
1376,"    public static void main(final String[] args) throws Exception {

        // Example, to retrieve and print all java files that have the
        // expression test in the name in the current directory
        final FileSystemManager fsManager = VFS.getManager();
        final FileObject dir = fsManager.toFileObject(new File("".""));
        final FileObject[] files = dir.findFiles(new FileFilterSelector(new WildcardFileFilter(
                ""*test*.java"")));
        for (final FileObject file : files) {
            System.out.println(file);
        }

    }","  public void test1()  throws Throwable  {
      FileObject[] fileObjectArray0 = new FileObject[7];
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileObjectArray0).when(fileObject0).findFiles(any(org.apache.commons.vfs2.FileSelector.class));
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSystemManager0).toFileObject(any(java.io.File.class));
      VFS.setManager(fileSystemManager0);
      WildcardFileFilterExample.main((String[]) null);
  }"
1377,,"  public void test2()  throws Throwable  {
      WildcardFileFilterExample wildcardFileFilterExample0 = new WildcardFileFilterExample();
  }"
1378,"    public static void main(final String[] args) throws Exception {

        // Example, how to print out a list of the real files within the current
        // directory
        final FileSystemManager fsManager = VFS.getManager();
        final FileObject dir = fsManager.toFileObject(new File("".""));
        final FileObject[] files = dir.findFiles(new FileFilterSelector(FileFileFilter.FILE));
        for (final FileObject file : files) {
            System.out.println(file);
        }
    }","  public void test0()  throws Throwable  {
      FileSystemManager fileSystemManager0 = VFS.reset();
      VFS.close();
      VFS.setManager(fileSystemManager0);
      String[] stringArray0 = new String[1];
      try { 
        FileFileFilterExample.main(stringArray0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not find a file provider which can handle local files.
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
1379,"    public static void main(final String[] args) throws Exception {

        // Example, how to print out a list of the real files within the current
        // directory
        final FileSystemManager fsManager = VFS.getManager();
        final FileObject dir = fsManager.toFileObject(new File("".""));
        final FileObject[] files = dir.findFiles(new FileFilterSelector(FileFileFilter.FILE));
        for (final FileObject file : files) {
            System.out.println(file);
        }
    }","  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSystemManager0).toFileObject(any(java.io.File.class));
      VFS.setManager(fileSystemManager0);
      try { 
        FileFileFilterExample.main(stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.example.filter.FileFileFilterExample"", e);
      }
  }"
1380,"    public static void main(final String[] args) throws Exception {

        // Example, how to print out a list of the real files within the current
        // directory
        final FileSystemManager fsManager = VFS.getManager();
        final FileObject dir = fsManager.toFileObject(new File("".""));
        final FileObject[] files = dir.findFiles(new FileFilterSelector(FileFileFilter.FILE));
        for (final FileObject file : files) {
            System.out.println(file);
        }
    }","  public void test2()  throws Throwable  {
      FileObject[] fileObjectArray0 = new FileObject[2];
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileObjectArray0).when(fileObject0).findFiles(any(org.apache.commons.vfs2.FileSelector.class));
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSystemManager0).toFileObject(any(java.io.File.class));
      VFS.setManager(fileSystemManager0);
      String[] stringArray0 = new String[33];
      FileFileFilterExample.main(stringArray0);
}"
1381,,"  public void test3()  throws Throwable  {
      FileFileFilterExample fileFileFilterExample0 = new FileFileFilterExample();
  }"
1382,"    public static void main(final String[] args) throws Exception {

        final FileSystemManager fsManager = VFS.getManager();
        final FileObject dir = fsManager.toFileObject(new File("".""));

        // We are interested in files older than one day
        final long cutoff = System.currentTimeMillis() - (24 * 60 * 60 * 1000);
        final AgeFileFilter filter = new AgeFileFilter(cutoff);

        final FileObject[] files = dir.findFiles(new FileFilterSelector(filter));
        for (final FileObject file : files) {
            System.out.println(file);
        }

    }","  public void test0()  throws Throwable  {
      FileSystemManager fileSystemManager0 = VFS.getManager();
      VFS.reset();
      VFS.setManager(fileSystemManager0);
      String[] stringArray0 = new String[2];
      try { 
        AgeFileFilterExample.main(stringArray0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not find a file provider which can handle local files.
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
1383,"    public static void main(final String[] args) throws Exception {

        final FileSystemManager fsManager = VFS.getManager();
        final FileObject dir = fsManager.toFileObject(new File("".""));

        // We are interested in files older than one day
        final long cutoff = System.currentTimeMillis() - (24 * 60 * 60 * 1000);
        final AgeFileFilter filter = new AgeFileFilter(cutoff);

        final FileObject[] files = dir.findFiles(new FileFilterSelector(filter));
        for (final FileObject file : files) {
            System.out.println(file);
        }

    }","  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[5];
      FileObject[] fileObjectArray0 = new FileObject[7];
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileObjectArray0[4]).when(fileSystemManager0).toFileObject(any(java.io.File.class));
      VFS.setManager(fileSystemManager0);
      try { 
        AgeFileFilterExample.main(stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.example.filter.AgeFileFilterExample"", e);
      }
  }"
1384,"    public static void main(final String[] args) throws Exception {

        final FileSystemManager fsManager = VFS.getManager();
        final FileObject dir = fsManager.toFileObject(new File("".""));

        // We are interested in files older than one day
        final long cutoff = System.currentTimeMillis() - (24 * 60 * 60 * 1000);
        final AgeFileFilter filter = new AgeFileFilter(cutoff);

        final FileObject[] files = dir.findFiles(new FileFilterSelector(filter));
        for (final FileObject file : files) {
            System.out.println(file);
        }

    }","  public void test2()  throws Throwable  {
      FileObject[] fileObjectArray0 = new FileObject[28];
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileObjectArray0).when(fileObject0).findFiles(any(org.apache.commons.vfs2.FileSelector.class));
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSystemManager0).toFileObject(any(java.io.File.class));
      VFS.setManager(fileSystemManager0);
      String[] stringArray0 = new String[2];
      AgeFileFilterExample.main(stringArray0);
}"
1385,,"  public void test3()  throws Throwable  {
      AgeFileFilterExample ageFileFilterExample0 = new AgeFileFilterExample();
  }"
1386,"    public static void main(final String[] args) throws Exception {

        // Example, showing how to print out a list of the current directory's
        // empty files/directories
        {
            System.out.println(""---EMPTY---"");
            final FileSystemManager fsManager = VFS.getManager();
            final FileObject dir = fsManager.toFileObject(new File("".""));
            final FileObject[] files = dir.findFiles(new FileFilterSelector(EmptyFileFilter.EMPTY));
            for (final FileObject file : files) {
                System.out.println(file);
            }
        }

        // Example, showing how to print out a list of the current directory's
        // non-empty files/directories
        {
            System.out.println(""---NOT_EMPTY---"");
            final FileSystemManager fsManager = VFS.getManager();
            final FileObject dir = fsManager.toFileObject(new File("".""));
            final FileObject[] files = dir.findFiles(new FileFilterSelector(EmptyFileFilter.NOT_EMPTY));
            for (final FileObject file : files) {
                System.out.println(file);
            }
        }

    }","  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[4];
      EmptyFileFilterExample.main(stringArray0);
      EmptyFileFilterExample.main(stringArray0);
      EmptyFileFilterExample.main(stringArray0);
      EmptyFileFilterExample.main(stringArray0);
      EmptyFileFilterExample.main(stringArray0);
      EmptyFileFilterExample.main(stringArray0);
      EmptyFileFilterExample.main(stringArray0);
      EmptyFileFilterExample.main(stringArray0);
      EmptyFileFilterExample.main(stringArray0);
      EmptyFileFilterExample.main(stringArray0);
      EmptyFileFilterExample.main(stringArray0);
      EmptyFileFilterExample.main(stringArray0);
      EmptyFileFilterExample.main(stringArray0);
      EmptyFileFilterExample.main(stringArray0);
      EmptyFileFilterExample.main(stringArray0);
      EmptyFileFilterExample.main(stringArray0);
  }"
1387,"    public static void main(final String[] args) throws Exception {

        // Example, showing how to print out a list of the current directory's
        // empty files/directories
        {
            System.out.println(""---EMPTY---"");
            final FileSystemManager fsManager = VFS.getManager();
            final FileObject dir = fsManager.toFileObject(new File("".""));
            final FileObject[] files = dir.findFiles(new FileFilterSelector(EmptyFileFilter.EMPTY));
            for (final FileObject file : files) {
                System.out.println(file);
            }
        }

        // Example, showing how to print out a list of the current directory's
        // non-empty files/directories
        {
            System.out.println(""---NOT_EMPTY---"");
            final FileSystemManager fsManager = VFS.getManager();
            final FileObject dir = fsManager.toFileObject(new File("".""));
            final FileObject[] files = dir.findFiles(new FileFilterSelector(EmptyFileFilter.NOT_EMPTY));
            for (final FileObject file : files) {
                System.out.println(file);
            }
        }

    }","  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[7];
      FileObject[] fileObjectArray0 = new FileObject[1];
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileObjectArray0).when(fileObject0).findFiles(any(org.apache.commons.vfs2.FileSelector.class));
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0, (FileObject) null).when(fileSystemManager0).toFileObject(any(java.io.File.class));
      VFS.setManager(fileSystemManager0);
      try { 
        EmptyFileFilterExample.main(stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.example.filter.EmptyFileFilterExample"", e);
      }
  }"
1388,,"  public void test2()  throws Throwable  {
      EmptyFileFilterExample emptyFileFilterExample0 = new EmptyFileFilterExample();
  }"
1389,"    public static void main(final String[] args) throws Exception {

        // Example, to retrieve and print all *.java files in the current
        // directory
        final FileSystemManager fsManager = VFS.getManager();
        final FileObject dir = fsManager.toFileObject(new File("".""));
        final FileObject[] files = dir.findFiles(new FileFilterSelector(new SuffixFileFilter("".java"")));
        for (final FileObject file : files) {
            System.out.println(file);
        }

    }","  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[4];
      FileSystemManager fileSystemManager0 = VFS.getManager();
      VFS.reset();
      VFS.setManager(fileSystemManager0);
      try { 
        SuffixFileFilterExample.main(stringArray0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not find a file provider which can handle local files.
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
1390,"    public static void main(final String[] args) throws Exception {

        // Example, to retrieve and print all *.java files in the current
        // directory
        final FileSystemManager fsManager = VFS.getManager();
        final FileObject dir = fsManager.toFileObject(new File("".""));
        final FileObject[] files = dir.findFiles(new FileFilterSelector(new SuffixFileFilter("".java"")));
        for (final FileObject file : files) {
            System.out.println(file);
        }

    }","  public void test1()  throws Throwable  {
      FileObject[] fileObjectArray0 = new FileObject[2];
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileObjectArray0[0]).when(fileSystemManager0).toFileObject(any(java.io.File.class));
      VFS.setManager(fileSystemManager0);
      String[] stringArray0 = new String[4];
      try { 
        SuffixFileFilterExample.main(stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.example.filter.SuffixFileFilterExample"", e);
      }
  }"
1391,"    public static void main(final String[] args) throws Exception {

        // Example, to retrieve and print all *.java files in the current
        // directory
        final FileSystemManager fsManager = VFS.getManager();
        final FileObject dir = fsManager.toFileObject(new File("".""));
        final FileObject[] files = dir.findFiles(new FileFilterSelector(new SuffixFileFilter("".java"")));
        for (final FileObject file : files) {
            System.out.println(file);
        }

    }","  public void test2()  throws Throwable  {
      FileObject[] fileObjectArray0 = new FileObject[1];
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileObjectArray0).when(fileObject0).findFiles(any(org.apache.commons.vfs2.FileSelector.class));
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSystemManager0).toFileObject(any(java.io.File.class));
      VFS.setManager(fileSystemManager0);
      String[] stringArray0 = new String[5];
      SuffixFileFilterExample.main(stringArray0);
}"
1392,,"  public void test3()  throws Throwable  {
      SuffixFileFilterExample suffixFileFilterExample0 = new SuffixFileFilterExample();
  }"
1393,"    public static void main(final String[] args) throws Exception {

        // Example, how to print out a list of the current directory's
        // subdirectories
        final FileSystemManager fsManager = VFS.getManager();
        final FileObject dir = fsManager.toFileObject(new File("".""));
        final FileObject[] files = dir.findFiles(new FileFilterSelector(DirectoryFileFilter.DIRECTORY));
        for (final FileObject file : files) {
            System.out.println(file);
        }
    }","  public void test0()  throws Throwable  {
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSystemManager0).toFileObject(any(java.io.File.class));
      VFS.setManager(fileSystemManager0);
      try { 
        DirectoryFileFilterExample.main((String[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.example.filter.DirectoryFileFilterExample"", e);
      }
  }"
1394,"    public static void main(final String[] args) throws Exception {

        // Example, how to print out a list of the current directory's
        // subdirectories
        final FileSystemManager fsManager = VFS.getManager();
        final FileObject dir = fsManager.toFileObject(new File("".""));
        final FileObject[] files = dir.findFiles(new FileFilterSelector(DirectoryFileFilter.DIRECTORY));
        for (final FileObject file : files) {
            System.out.println(file);
        }
    }","  public void test1()  throws Throwable  {
      FileObject[] fileObjectArray0 = new FileObject[9];
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileObjectArray0).when(fileObject0).findFiles(any(org.apache.commons.vfs2.FileSelector.class));
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSystemManager0).toFileObject(any(java.io.File.class));
      VFS.setManager(fileSystemManager0);
      DirectoryFileFilterExample.main((String[]) null);
  }"
1395,,"  public void test2()  throws Throwable  {
      DirectoryFileFilterExample directoryFileFilterExample0 = new DirectoryFileFilterExample();
  }"
1396,"    public static void main(final String[] args) throws Exception {

        // Example, showing how to print out a list of the current directory's
        // readable files:
        {
            System.out.println(""---CAN_READ---"");
            final FileSystemManager fsManager = VFS.getManager();
            final FileObject dir = fsManager.toFileObject(new File("".""));
            final FileObject[] files = dir.findFiles(new FileFilterSelector(CanReadFileFilter.CAN_READ));
            for (final FileObject file : files) {
                System.out.println(file);
            }
        }

        // Example, showing how to print out a list of the current directory's
        // un-readable files:
        {
            System.out.println(""---CANNOT_READ---"");
            final FileSystemManager fsManager = VFS.getManager();
            final FileObject dir = fsManager.toFileObject(new File("".""));
            final FileObject[] files = dir
                    .findFiles(new FileFilterSelector(CanReadFileFilter.CANNOT_READ));
            for (final FileObject file : files) {
                System.out.println(file);
            }
        }

        // Example, showing how to print out a list of the current directory's
        // read-only files:
        {
            System.out.println(""---READ_ONLY---"");
            final FileSystemManager fsManager = VFS.getManager();
            final FileObject dir = fsManager.toFileObject(new File("".""));
            final FileObject[] files = dir.findFiles(new FileFilterSelector(CanReadFileFilter.READ_ONLY));
            for (final FileObject file : files) {
                System.out.println(file);
            }
        }

    }","  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[8];
      CanReadFileFilterExample.main(stringArray0);
      CanReadFileFilterExample.main(stringArray0);
      CanReadFileFilterExample.main(stringArray0);
      CanReadFileFilterExample.main(stringArray0);
      CanReadFileFilterExample.main(stringArray0);
      CanReadFileFilterExample.main(stringArray0);
      CanReadFileFilterExample.main(stringArray0);
      CanReadFileFilterExample.main(stringArray0);
      CanReadFileFilterExample.main(stringArray0);
      CanReadFileFilterExample.main(stringArray0);
      CanReadFileFilterExample.main(stringArray0);
  }"
1397,"    public static void main(final String[] args) throws Exception {

        // Example, showing how to print out a list of the current directory's
        // readable files:
        {
            System.out.println(""---CAN_READ---"");
            final FileSystemManager fsManager = VFS.getManager();
            final FileObject dir = fsManager.toFileObject(new File("".""));
            final FileObject[] files = dir.findFiles(new FileFilterSelector(CanReadFileFilter.CAN_READ));
            for (final FileObject file : files) {
                System.out.println(file);
            }
        }

        // Example, showing how to print out a list of the current directory's
        // un-readable files:
        {
            System.out.println(""---CANNOT_READ---"");
            final FileSystemManager fsManager = VFS.getManager();
            final FileObject dir = fsManager.toFileObject(new File("".""));
            final FileObject[] files = dir
                    .findFiles(new FileFilterSelector(CanReadFileFilter.CANNOT_READ));
            for (final FileObject file : files) {
                System.out.println(file);
            }
        }

        // Example, showing how to print out a list of the current directory's
        // read-only files:
        {
            System.out.println(""---READ_ONLY---"");
            final FileSystemManager fsManager = VFS.getManager();
            final FileObject dir = fsManager.toFileObject(new File("".""));
            final FileObject[] files = dir.findFiles(new FileFilterSelector(CanReadFileFilter.READ_ONLY));
            for (final FileObject file : files) {
                System.out.println(file);
            }
        }

    }","  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[7];
      FileObject[] fileObjectArray0 = new FileObject[2];
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileObjectArray0).when(fileObject0).findFiles(any(org.apache.commons.vfs2.FileSelector.class));
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0, (FileObject) null).when(fileSystemManager0).toFileObject(any(java.io.File.class));
      VFS.setManager(fileSystemManager0);
      try { 
        CanReadFileFilterExample.main(stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.example.filter.CanReadFileFilterExample"", e);
      }
  }"
1398,,"  public void test2()  throws Throwable  {
      CanReadFileFilterExample canReadFileFilterExample0 = new CanReadFileFilterExample();
  }"
1399,"    public static void main(final String[] args) throws Exception {

        // Example, to print all files and directories in the current directory
        // whose size is greater than 1 MB
        final FileSystemManager fsManager = VFS.getManager();
        final FileObject dir = fsManager.toFileObject(new File("".""));
        final SizeFileFilter filter = new SizeFileFilter(1024 * 1024);
        final FileObject[] files = dir.findFiles(new FileFilterSelector(filter));
        for (final FileObject file : files) {
            System.out.println(file);
        }

    }","  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[1];
      FileSystemManager fileSystemManager0 = VFS.reset();
      VFS.close();
      VFS.setManager(fileSystemManager0);
      try { 
        SizeFileFilterExample.main(stringArray0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not find a file provider which can handle local files.
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
1400,"    public static void main(final String[] args) throws Exception {

        // Example, to print all files and directories in the current directory
        // whose size is greater than 1 MB
        final FileSystemManager fsManager = VFS.getManager();
        final FileObject dir = fsManager.toFileObject(new File("".""));
        final SizeFileFilter filter = new SizeFileFilter(1024 * 1024);
        final FileObject[] files = dir.findFiles(new FileFilterSelector(filter));
        for (final FileObject file : files) {
            System.out.println(file);
        }

    }","  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[1];
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSystemManager0).toFileObject(any(java.io.File.class));
      VFS.setManager(fileSystemManager0);
      try { 
        SizeFileFilterExample.main(stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.example.filter.SizeFileFilterExample"", e);
      }
  }"
1401,"    public static void main(final String[] args) throws Exception {

        // Example, to print all files and directories in the current directory
        // whose size is greater than 1 MB
        final FileSystemManager fsManager = VFS.getManager();
        final FileObject dir = fsManager.toFileObject(new File("".""));
        final SizeFileFilter filter = new SizeFileFilter(1024 * 1024);
        final FileObject[] files = dir.findFiles(new FileFilterSelector(filter));
        for (final FileObject file : files) {
            System.out.println(file);
        }

    }","  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[1];
      FileObject[] fileObjectArray0 = new FileObject[2];
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileObjectArray0).when(fileObject0).findFiles(any(org.apache.commons.vfs2.FileSelector.class));
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSystemManager0).toFileObject(any(java.io.File.class));
      VFS.setManager(fileSystemManager0);
      SizeFileFilterExample.main(stringArray0);
}"
1402,,"  public void test3()  throws Throwable  {
      SizeFileFilterExample sizeFileFilterExample0 = new SizeFileFilterExample();
  }"
1403,"    public static void main(final String[] args) throws Exception {

        // Example, to print all files and directories in the current directory
        // whose name starts with a {@code .}
        final FileSystemManager fsManager = VFS.getManager();
        final FileObject dir = fsManager.toFileObject(new File("".""));
        final FileObject[] files = dir.findFiles(new FileFilterSelector(new PrefixFileFilter(""."")));
        for (final FileObject file : files) {
            System.out.println(file);
        }

    }","  public void test0()  throws Throwable  {
      FileSystemManager fileSystemManager0 = VFS.getManager();
      VFS.reset();
      VFS.setManager(fileSystemManager0);
      String[] stringArray0 = new String[1];
      try { 
        PrefixFileFilterExample.main(stringArray0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Could not find a file provider which can handle local files.
         //
         verifyException(""org.apache.commons.vfs2.FileSystemException"", e);
      }
  }"
1404,"    public static void main(final String[] args) throws Exception {

        // Example, to print all files and directories in the current directory
        // whose name starts with a {@code .}
        final FileSystemManager fsManager = VFS.getManager();
        final FileObject dir = fsManager.toFileObject(new File("".""));
        final FileObject[] files = dir.findFiles(new FileFilterSelector(new PrefixFileFilter(""."")));
        for (final FileObject file : files) {
            System.out.println(file);
        }

    }","  public void test1()  throws Throwable  {
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSystemManager0).toFileObject(any(java.io.File.class));
      VFS.setManager(fileSystemManager0);
      String[] stringArray0 = new String[1];
      try { 
        PrefixFileFilterExample.main(stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.example.filter.PrefixFileFilterExample"", e);
      }
  }"
1405,"    public static void main(final String[] args) throws Exception {

        // Example, to print all files and directories in the current directory
        // whose name starts with a {@code .}
        final FileSystemManager fsManager = VFS.getManager();
        final FileObject dir = fsManager.toFileObject(new File("".""));
        final FileObject[] files = dir.findFiles(new FileFilterSelector(new PrefixFileFilter(""."")));
        for (final FileObject file : files) {
            System.out.println(file);
        }

    }","  public void test2()  throws Throwable  {
      PrefixFileFilterExample.main((String[]) null);
  }"
1406,,"  public void test3()  throws Throwable  {
      PrefixFileFilterExample prefixFileFilterExample0 = new PrefixFileFilterExample();
  }"
1407,"    public static void main(final String[] args) throws Exception {

        // Example, to print all files and directories in the current directory
        // whose name is Test
        final FileSystemManager fsManager = VFS.getManager();
        final FileObject dir = fsManager.toFileObject(new File("".""));
        final FileObject[] files = dir.findFiles(new FileFilterSelector(new NameFileFilter(""Test"")));
        for (final FileObject file : files) {
            System.out.println(file);
        }

    }","  public void test0()  throws Throwable  {
      FileObject[] fileObjectArray0 = new FileObject[7];
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileObjectArray0[1]).when(fileSystemManager0).toFileObject(any(java.io.File.class));
      VFS.setManager(fileSystemManager0);
      try { 
        NameFileFilterExample.main((String[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.example.filter.NameFileFilterExample"", e);
      }
  }"
1408,"    public static void main(final String[] args) throws Exception {

        // Example, to print all files and directories in the current directory
        // whose name is Test
        final FileSystemManager fsManager = VFS.getManager();
        final FileObject dir = fsManager.toFileObject(new File("".""));
        final FileObject[] files = dir.findFiles(new FileFilterSelector(new NameFileFilter(""Test"")));
        for (final FileObject file : files) {
            System.out.println(file);
        }

    }","  public void test1()  throws Throwable  {
      FileObject[] fileObjectArray0 = new FileObject[4];
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileObjectArray0).when(fileObject0).findFiles(any(org.apache.commons.vfs2.FileSelector.class));
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSystemManager0).toFileObject(any(java.io.File.class));
      VFS.setManager(fileSystemManager0);
      NameFileFilterExample.main((String[]) null);
  }"
1409,,"  public void test2()  throws Throwable  {
      NameFileFilterExample nameFileFilterExample0 = new NameFileFilterExample();
  }"
1410,"    public static void main(final String[] args) throws Exception {

        // Example, showing how to print out a list of the current directory's
        // writable files:
        {
            System.out.println(""---CAN_WRITE---"");
            final FileSystemManager fsManager = VFS.getManager();
            final FileObject dir = fsManager.toFileObject(new File("".""));
            final FileObject[] files = dir
                    .findFiles(new FileFilterSelector(CanWriteFileFilter.CAN_WRITE));
            for (final FileObject file : files) {
                System.out.println(file);
            }
        }

        // Example, showing how to print out a list of the current directory's
        // un-writable files:
        {
            System.out.println(""---CANNOT_WRITE---"");
            final FileSystemManager fsManager = VFS.getManager();
            final FileObject dir = fsManager.toFileObject(new File("".""));
            final FileObject[] files = dir.findFiles(new FileFilterSelector(
                    CanWriteFileFilter.CANNOT_WRITE));
            for (final FileObject file : files) {
                System.out.println(file);
            }
        }

    }","  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[5];
      CanWriteFileFilterExample.main(stringArray0);
      CanWriteFileFilterExample.main(stringArray0);
      CanWriteFileFilterExample.main(stringArray0);
      CanWriteFileFilterExample.main(stringArray0);
      CanWriteFileFilterExample.main(stringArray0);
      CanWriteFileFilterExample.main(stringArray0);
      CanWriteFileFilterExample.main(stringArray0);
      CanWriteFileFilterExample.main(stringArray0);
      CanWriteFileFilterExample.main(stringArray0);
      CanWriteFileFilterExample.main(stringArray0);
      CanWriteFileFilterExample.main(stringArray0);
      CanWriteFileFilterExample.main(stringArray0);
      CanWriteFileFilterExample.main((String[]) null);
      CanWriteFileFilterExample.main((String[]) null);
      CanWriteFileFilterExample.main(stringArray0);
      CanWriteFileFilterExample.main((String[]) null);
  }"
1411,"    public static void main(final String[] args) throws Exception {

        // Example, showing how to print out a list of the current directory's
        // writable files:
        {
            System.out.println(""---CAN_WRITE---"");
            final FileSystemManager fsManager = VFS.getManager();
            final FileObject dir = fsManager.toFileObject(new File("".""));
            final FileObject[] files = dir
                    .findFiles(new FileFilterSelector(CanWriteFileFilter.CAN_WRITE));
            for (final FileObject file : files) {
                System.out.println(file);
            }
        }

        // Example, showing how to print out a list of the current directory's
        // un-writable files:
        {
            System.out.println(""---CANNOT_WRITE---"");
            final FileSystemManager fsManager = VFS.getManager();
            final FileObject dir = fsManager.toFileObject(new File("".""));
            final FileObject[] files = dir.findFiles(new FileFilterSelector(
                    CanWriteFileFilter.CANNOT_WRITE));
            for (final FileObject file : files) {
                System.out.println(file);
            }
        }

    }","  public void test1()  throws Throwable  {
      FileObject[] fileObjectArray0 = new FileObject[9];
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileObjectArray0).when(fileObject0).findFiles(any(org.apache.commons.vfs2.FileSelector.class));
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0, (FileObject) null).when(fileSystemManager0).toFileObject(any(java.io.File.class));
      VFS.setManager(fileSystemManager0);
      String[] stringArray0 = new String[8];
      try { 
        CanWriteFileFilterExample.main(stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.example.filter.CanWriteFileFilterExample"", e);
      }
  }"
1412,,"  public void test2()  throws Throwable  {
      CanWriteFileFilterExample canWriteFileFilterExample0 = new CanWriteFileFilterExample();
  }"
1413,"    public static void main(final String[] args) throws Exception {
        if (args.length < 3) {
            throw new IllegalArgumentException(""Usage: FtpCheck user pass host dir"");
        }
        final String user = args[0];
        final String pass = args[1];
        final String host = args[2];
        String dir = null;
        if (args.length == 4) {
            dir = args[3];
        }

        final FTPClient client = new FTPClient();
        client.connect(host);
        final int reply = client.getReplyCode();
        if (!FTPReply.isPositiveCompletion(reply)) {
            throw new IllegalArgumentException(""cant connect: "" + reply);
        }
        if (!client.login(user, pass)) {
            throw new IllegalArgumentException(""login failed"");
        }
        client.enterLocalPassiveMode();

        final OutputStream os = client.storeFileStream(dir + ""/test.txt"");
        if (os == null) {
            throw new IllegalStateException(client.getReplyString());
        }
        os.write(""test"".getBytes(Charset.defaultCharset()));
        os.close();
        client.completePendingCommand();

        if (dir != null && !client.changeWorkingDirectory(dir)) {
            throw new IllegalArgumentException(""change dir to '"" + dir + ""' failed"");
        }

        System.err.println(""System: "" + client.getSystemType());

        final FTPFile[] files = client.listFiles();
        for (int i = 0; i < files.length; i++) {
            final FTPFile file = files[i];
            if (file == null) {
                System.err.println(""#"" + i + "": "" + null);
            } else {
                System.err.println(""#"" + i + "": "" + file.getRawListing());
                System.err.println(""#"" + i + "": "" + file.toString());
                System.err.println(""\t name:"" + file.getName() + "" type:"" + file.getType());
            }
        }
        client.disconnect();
    }","  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String[] stringArray0 = new String[3];
          stringArray0[2] = ""' failed"";
          try { 
            FtpCheck.main(stringArray0);
            fail(""Expecting exception: SecurityException"");
          } catch(SecurityException e) {
             //
             // Security manager blocks (\""java.net.SocketPermission\"" \""200.42.42.0:21\"" \""connect,resolve\"")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1051)
             // java.net.Socket.connect(Socket.java:602)
             // org.apache.commons.net.SocketClient._connect(SocketClient.java:253)
             // org.apache.commons.net.SocketClient.connect(SocketClient.java:212)
             // org.apache.commons.net.SocketClient.connect(SocketClient.java:316)
             // org.apache.commons.vfs2.libcheck.FtpCheck.main(FtpCheck.java:47)
             // sun.reflect.GeneratedMethodAccessor12.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException(""org.evosuite.runtime.sandbox.MSecurityManager"", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }"
1414,"    public static void main(final String[] args) throws Exception {
        if (args.length < 3) {
            throw new IllegalArgumentException(""Usage: FtpCheck user pass host dir"");
        }
        final String user = args[0];
        final String pass = args[1];
        final String host = args[2];
        String dir = null;
        if (args.length == 4) {
            dir = args[3];
        }

        final FTPClient client = new FTPClient();
        client.connect(host);
        final int reply = client.getReplyCode();
        if (!FTPReply.isPositiveCompletion(reply)) {
            throw new IllegalArgumentException(""cant connect: "" + reply);
        }
        if (!client.login(user, pass)) {
            throw new IllegalArgumentException(""login failed"");
        }
        client.enterLocalPassiveMode();

        final OutputStream os = client.storeFileStream(dir + ""/test.txt"");
        if (os == null) {
            throw new IllegalStateException(client.getReplyString());
        }
        os.write(""test"".getBytes(Charset.defaultCharset()));
        os.close();
        client.completePendingCommand();

        if (dir != null && !client.changeWorkingDirectory(dir)) {
            throw new IllegalArgumentException(""change dir to '"" + dir + ""' failed"");
        }

        System.err.println(""System: "" + client.getSystemType());

        final FTPFile[] files = client.listFiles();
        for (int i = 0; i < files.length; i++) {
            final FTPFile file = files[i];
            if (file == null) {
                System.err.println(""#"" + i + "": "" + null);
            } else {
                System.err.println(""#"" + i + "": "" + file.getRawListing());
                System.err.println(""#"" + i + "": "" + file.toString());
                System.err.println(""\t name:"" + file.getName() + "" type:"" + file.getType());
            }
        }
        client.disconnect();
    }","  public void test1()  throws Throwable  {
      try { 
        FtpCheck.main((String[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.libcheck.FtpCheck"", e);
      }
  }"
1415,"    public static void main(final String[] args) throws Exception {
        if (args.length < 3) {
            throw new IllegalArgumentException(""Usage: FtpCheck user pass host dir"");
        }
        final String user = args[0];
        final String pass = args[1];
        final String host = args[2];
        String dir = null;
        if (args.length == 4) {
            dir = args[3];
        }

        final FTPClient client = new FTPClient();
        client.connect(host);
        final int reply = client.getReplyCode();
        if (!FTPReply.isPositiveCompletion(reply)) {
            throw new IllegalArgumentException(""cant connect: "" + reply);
        }
        if (!client.login(user, pass)) {
            throw new IllegalArgumentException(""login failed"");
        }
        client.enterLocalPassiveMode();

        final OutputStream os = client.storeFileStream(dir + ""/test.txt"");
        if (os == null) {
            throw new IllegalStateException(client.getReplyString());
        }
        os.write(""test"".getBytes(Charset.defaultCharset()));
        os.close();
        client.completePendingCommand();

        if (dir != null && !client.changeWorkingDirectory(dir)) {
            throw new IllegalArgumentException(""change dir to '"" + dir + ""' failed"");
        }

        System.err.println(""System: "" + client.getSystemType());

        final FTPFile[] files = client.listFiles();
        for (int i = 0; i < files.length; i++) {
            final FTPFile file = files[i];
            if (file == null) {
                System.err.println(""#"" + i + "": "" + null);
            } else {
                System.err.println(""#"" + i + "": "" + file.getRawListing());
                System.err.println(""#"" + i + "": "" + file.toString());
                System.err.println(""\t name:"" + file.getName() + "" type:"" + file.getType());
            }
        }
        client.disconnect();
    }","  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String[] stringArray0 = new String[4];
          try { 
            FtpCheck.main(stringArray0);
            fail(""Expecting exception: SecurityException"");
          } catch(SecurityException e) {
             //
             // Security manager blocks (\""java.net.SocketPermission\"" \""127.0.0.1:21\"" \""connect,resolve\"")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1051)
             // java.net.Socket.connect(Socket.java:602)
             // org.apache.commons.net.SocketClient._connect(SocketClient.java:253)
             // org.apache.commons.net.SocketClient.connect(SocketClient.java:212)
             // org.apache.commons.net.SocketClient.connect(SocketClient.java:316)
             // org.apache.commons.vfs2.libcheck.FtpCheck.main(FtpCheck.java:47)
             // sun.reflect.GeneratedMethodAccessor12.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException(""org.evosuite.runtime.sandbox.MSecurityManager"", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }"
1416,"    public static void main(final String[] args) throws Exception {
        if (args.length < 3) {
            throw new IllegalArgumentException(""Usage: FtpCheck user pass host dir"");
        }
        final String user = args[0];
        final String pass = args[1];
        final String host = args[2];
        String dir = null;
        if (args.length == 4) {
            dir = args[3];
        }

        final FTPClient client = new FTPClient();
        client.connect(host);
        final int reply = client.getReplyCode();
        if (!FTPReply.isPositiveCompletion(reply)) {
            throw new IllegalArgumentException(""cant connect: "" + reply);
        }
        if (!client.login(user, pass)) {
            throw new IllegalArgumentException(""login failed"");
        }
        client.enterLocalPassiveMode();

        final OutputStream os = client.storeFileStream(dir + ""/test.txt"");
        if (os == null) {
            throw new IllegalStateException(client.getReplyString());
        }
        os.write(""test"".getBytes(Charset.defaultCharset()));
        os.close();
        client.completePendingCommand();

        if (dir != null && !client.changeWorkingDirectory(dir)) {
            throw new IllegalArgumentException(""change dir to '"" + dir + ""' failed"");
        }

        System.err.println(""System: "" + client.getSystemType());

        final FTPFile[] files = client.listFiles();
        for (int i = 0; i < files.length; i++) {
            final FTPFile file = files[i];
            if (file == null) {
                System.err.println(""#"" + i + "": "" + null);
            } else {
                System.err.println(""#"" + i + "": "" + file.getRawListing());
                System.err.println(""#"" + i + "": "" + file.toString());
                System.err.println(""\t name:"" + file.getName() + "" type:"" + file.getType());
            }
        }
        client.disconnect();
    }","  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[2];
      try { 
        FtpCheck.main(stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Usage: FtpCheck user pass host dir
         //
         verifyException(""org.apache.commons.vfs2.libcheck.FtpCheck"", e);
      }
  }"
1417,"    public static void main(final String[] args) throws Exception {
        if (args.length < 3) {
            throw new IllegalArgumentException(""Usage: FtpCheck user pass host dir"");
        }
        final String user = args[0];
        final String pass = args[1];
        final String host = args[2];
        String dir = null;
        if (args.length == 4) {
            dir = args[3];
        }

        final FTPClient client = new FTPClient();
        client.connect(host);
        final int reply = client.getReplyCode();
        if (!FTPReply.isPositiveCompletion(reply)) {
            throw new IllegalArgumentException(""cant connect: "" + reply);
        }
        if (!client.login(user, pass)) {
            throw new IllegalArgumentException(""login failed"");
        }
        client.enterLocalPassiveMode();

        final OutputStream os = client.storeFileStream(dir + ""/test.txt"");
        if (os == null) {
            throw new IllegalStateException(client.getReplyString());
        }
        os.write(""test"".getBytes(Charset.defaultCharset()));
        os.close();
        client.completePendingCommand();

        if (dir != null && !client.changeWorkingDirectory(dir)) {
            throw new IllegalArgumentException(""change dir to '"" + dir + ""' failed"");
        }

        System.err.println(""System: "" + client.getSystemType());

        final FTPFile[] files = client.listFiles();
        for (int i = 0; i < files.length; i++) {
            final FTPFile file = files[i];
            if (file == null) {
                System.err.println(""#"" + i + "": "" + null);
            } else {
                System.err.println(""#"" + i + "": "" + file.getRawListing());
                System.err.println(""#"" + i + "": "" + file.toString());
                System.err.println(""\t name:"" + file.getName() + "" type:"" + file.getType());
            }
        }
        client.disconnect();
    }","  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String[] stringArray0 = new String[11];
          try { 
            FtpCheck.main(stringArray0);
            fail(""Expecting exception: SecurityException"");
          } catch(SecurityException e) {
             //
             // Security manager blocks (\""java.net.SocketPermission\"" \""127.0.0.1:21\"" \""connect,resolve\"")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1051)
             // java.net.Socket.connect(Socket.java:602)
             // org.apache.commons.net.SocketClient._connect(SocketClient.java:253)
             // org.apache.commons.net.SocketClient.connect(SocketClient.java:212)
             // org.apache.commons.net.SocketClient.connect(SocketClient.java:316)
             // org.apache.commons.vfs2.libcheck.FtpCheck.main(FtpCheck.java:47)
             // sun.reflect.GeneratedMethodAccessor12.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException(""org.evosuite.runtime.sandbox.MSecurityManager"", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }"
1418,"    public static void main(final String[] args) throws Exception {
        if (args.length != 4) {
            throw new IllegalArgumentException(""Usage: SftpCheck user pass host dir"");
        }
        final String user = args[0];
        final String pass = args[1];
        final String host = args[2];
        final String dir = args[3];

        final Properties props = new Properties();
        props.setProperty(""StrictHostKeyChecking"", ""false"");
        final JSch jsch = new JSch();
        final Session session = jsch.getSession(user, host, 22);
        session.setUserInfo(new UserInfo() {
            @Override
            public String getPassphrase() {
                return null;
            }

            @Override
            public String getPassword() {
                return null;
            }

            @Override
            public boolean promptPassword(final String string) {
                return false;
            }

            @Override
            public boolean promptPassphrase(final String string) {
                return false;
            }

            @Override
            public boolean promptYesNo(final String string) {
                return true;
            }

            @Override
            public void showMessage(final String string) {
            }
        });
        session.setPassword(pass);
        session.connect();
        final ChannelSftp chan = (ChannelSftp) session.openChannel(""sftp"");
        chan.connect();
        final Vector<?> list = chan.ls(dir);
        list.forEach(System.err::println);
        System.err.println(""done"");
        chan.disconnect();
        session.disconnect();
    }","  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = ""i9W"";
      stringArray0[2] = """";
      try { 
        SftpCheck.main(stringArray0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@54afafa8
         //
         verifyException(""com.jcraft.jsch.Util"", e);
      }
  }"
1419,"    public static void main(final String[] args) throws Exception {
        if (args.length != 4) {
            throw new IllegalArgumentException(""Usage: SftpCheck user pass host dir"");
        }
        final String user = args[0];
        final String pass = args[1];
        final String host = args[2];
        final String dir = args[3];

        final Properties props = new Properties();
        props.setProperty(""StrictHostKeyChecking"", ""false"");
        final JSch jsch = new JSch();
        final Session session = jsch.getSession(user, host, 22);
        session.setUserInfo(new UserInfo() {
            @Override
            public String getPassphrase() {
                return null;
            }

            @Override
            public String getPassword() {
                return null;
            }

            @Override
            public boolean promptPassword(final String string) {
                return false;
            }

            @Override
            public boolean promptPassphrase(final String string) {
                return false;
            }

            @Override
            public boolean promptYesNo(final String string) {
                return true;
            }

            @Override
            public void showMessage(final String string) {
            }
        });
        session.setPassword(pass);
        session.connect();
        final ChannelSftp chan = (ChannelSftp) session.openChannel(""sftp"");
        chan.connect();
        final Vector<?> list = chan.ls(dir);
        list.forEach(System.err::println);
        System.err.println(""done"");
        chan.disconnect();
        session.disconnect();
    }","  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = """";
      try { 
        SftpCheck.main(stringArray0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // host must not be null.
         //
         verifyException(""com.jcraft.jsch.JSch"", e);
      }
  }"
1420,"    public static void main(final String[] args) throws Exception {
        if (args.length != 4) {
            throw new IllegalArgumentException(""Usage: SftpCheck user pass host dir"");
        }
        final String user = args[0];
        final String pass = args[1];
        final String host = args[2];
        final String dir = args[3];

        final Properties props = new Properties();
        props.setProperty(""StrictHostKeyChecking"", ""false"");
        final JSch jsch = new JSch();
        final Session session = jsch.getSession(user, host, 22);
        session.setUserInfo(new UserInfo() {
            @Override
            public String getPassphrase() {
                return null;
            }

            @Override
            public String getPassword() {
                return null;
            }

            @Override
            public boolean promptPassword(final String string) {
                return false;
            }

            @Override
            public boolean promptPassphrase(final String string) {
                return false;
            }

            @Override
            public boolean promptYesNo(final String string) {
                return true;
            }

            @Override
            public void showMessage(final String string) {
            }
        });
        session.setPassword(pass);
        session.connect();
        final ChannelSftp chan = (ChannelSftp) session.openChannel(""sftp"");
        chan.connect();
        final Vector<?> list = chan.ls(dir);
        list.forEach(System.err::println);
        System.err.println(""done"");
        chan.disconnect();
        session.disconnect();
    }","  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[5];
      try { 
        SftpCheck.main(stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Usage: SftpCheck user pass host dir
         //
         verifyException(""org.apache.commons.vfs2.libcheck.SftpCheck"", e);
      }
  }"
1421,"    public static void main(final String[] args) throws Exception {
        if (args.length != 4) {
            throw new IllegalArgumentException(""Usage: SftpCheck user pass host dir"");
        }
        final String user = args[0];
        final String pass = args[1];
        final String host = args[2];
        final String dir = args[3];

        final Properties props = new Properties();
        props.setProperty(""StrictHostKeyChecking"", ""false"");
        final JSch jsch = new JSch();
        final Session session = jsch.getSession(user, host, 22);
        session.setUserInfo(new UserInfo() {
            @Override
            public String getPassphrase() {
                return null;
            }

            @Override
            public String getPassword() {
                return null;
            }

            @Override
            public boolean promptPassword(final String string) {
                return false;
            }

            @Override
            public boolean promptPassphrase(final String string) {
                return false;
            }

            @Override
            public boolean promptYesNo(final String string) {
                return true;
            }

            @Override
            public void showMessage(final String string) {
            }
        });
        session.setPassword(pass);
        session.connect();
        final ChannelSftp chan = (ChannelSftp) session.openChannel(""sftp"");
        chan.connect();
        final Vector<?> list = chan.ls(dir);
        list.forEach(System.err::println);
        System.err.println(""done"");
        chan.disconnect();
        session.disconnect();
    }","  public void test3()  throws Throwable  {
      try { 
        SftpCheck.main((String[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.libcheck.SftpCheck"", e);
      }
  }"
1422,"    public static void main(final String[] args) throws Exception {
        if (args.length != 4) {
            throw new IllegalArgumentException(""Usage: SftpCheck user pass host dir"");
        }
        final String user = args[0];
        final String pass = args[1];
        final String host = args[2];
        final String dir = args[3];

        final Properties props = new Properties();
        props.setProperty(""StrictHostKeyChecking"", ""false"");
        final JSch jsch = new JSch();
        final Session session = jsch.getSession(user, host, 22);
        session.setUserInfo(new UserInfo() {
            @Override
            public String getPassphrase() {
                return null;
            }

            @Override
            public String getPassword() {
                return null;
            }

            @Override
            public boolean promptPassword(final String string) {
                return false;
            }

            @Override
            public boolean promptPassphrase(final String string) {
                return false;
            }

            @Override
            public boolean promptYesNo(final String string) {
                return true;
            }

            @Override
            public void showMessage(final String string) {
            }
        });
        session.setPassword(pass);
        session.connect();
        final ChannelSftp chan = (ChannelSftp) session.openChannel(""sftp"");
        chan.connect();
        final Vector<?> list = chan.ls(dir);
        list.forEach(System.err::println);
        System.err.println(""done"");
        chan.disconnect();
        session.disconnect();
    }","  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[1];
      try { 
        SftpCheck.main(stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Usage: SftpCheck user pass host dir
         //
         verifyException(""org.apache.commons.vfs2.libcheck.SftpCheck"", e);
      }
  }"
