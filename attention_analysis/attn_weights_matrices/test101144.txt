101144
Test: public void test0579() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0579"); org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfEra(); org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now((org.joda.time.Chronology) iSOChronology0); org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.minuteOfHour(); org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField5 = gJChronology4.yearOfCentury(); org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology4); int int7 = dateTime6.getEra(); int int8 = dateTime6.getMillisOfSecond(); org.joda.time.DateTime.Property property9 = dateTime6.year(); org.joda.time.ReadableDuration readableDuration10 = null; org.joda.time.DateTime dateTime11 = dateTime6.plus(readableDuration10); int int12 = dateTime11.getMillisOfDay(); org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfDay(); int int14 = dateTime11.get(dateTimeFieldType13); org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField15 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField3, dateTimeFieldType13); long long17 = delegatedDateTimeField15.remainder(0L); org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstanceUTC(); int int20 = julianChronology18.getMillisOfDay((long) 682); org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now((org.joda.time.Chronology) julianChronology18); int int22 = julianChronology18.getMaxYear(); org.joda.time.DateTimeField dateTimeField23 = julianChronology18.centuryOfEra(); org.joda.time.chrono.BasicYearDateTimeField basicYearDateTimeField24 = new org.joda.time.chrono.BasicYearDateTimeField((org.joda.time.chrono.BasicChronology) julianChronology18); org.joda.time.DurationField durationField25 = basicYearDateTimeField24.getLeapDurationField(); long long28 = basicYearDateTimeField24.getDifferenceAsLong((long) 23, 13759113600420L); org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField30 = gJChronology29.yearOfCentury(); org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology29); int int32 = dateTime31.getEra(); org.joda.time.ReadableInstant readableInstant33 = null; boolean boolean34 = dateTime31.isBefore(readableInstant33); java.util.GregorianCalendar gregorianCalendar35 = dateTime31.toGregorianCalendar(); org.joda.time.DateTime dateTime36 = dateTime31.withTimeAtStartOfDay(); org.joda.time.LocalDate localDate37 = dateTime36.toLocalDate(); int int38 = localDate37.getEra(); java.util.Locale locale40 = null; java.lang.String str41 = basicYearDateTimeField24.getAsShortText((org.joda.time.ReadablePartial) localDate37, 669, locale40); org.joda.time.chrono.BasicChronology basicChronology43 = null; org.joda.time.chrono.GJEraDateTimeField gJEraDateTimeField44 = new org.joda.time.chrono.GJEraDateTimeField(basicChronology43); java.util.Locale locale45 = null; int int46 = gJEraDateTimeField44.getMaximumTextLength(locale45); org.joda.time.Instant instant48 = new org.joda.time.Instant((long) (short) -1); org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField50 = gJChronology49.yearOfCentury(); org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology49); int int52 = dateTime51.getEra(); int int53 = dateTime51.getYear(); boolean boolean54 = instant48.isBefore((org.joda.time.ReadableInstant) dateTime51); org.joda.time.LocalDate localDate55 = dateTime51.toLocalDate(); org.joda.time.LocalDate localDate57 = localDate55.plusDays(2757764); int int58 = localDate57.getDayOfMonth(); org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField62 = gJChronology61.yearOfCentury(); org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology61); org.joda.time.DurationField durationField64 = gJChronology61.eras(); org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology61); org.joda.time.ReadablePeriod readablePeriod66 = null; org.joda.time.LocalDate localDate68 = localDate65.withPeriodAdded(readablePeriod66, (-28800000)); org.joda.time.LocalDate.Property property69 = localDate65.dayOfMonth(); int[] intArray70 = localDate65.getValues(); int[] intArray72 = gJEraDateTimeField44.addWrapField((org.joda.time.ReadablePartial) localDate57, 0, intArray70, 899); try { int[] intArray74 = delegatedDateTimeField15.set((org.joda.time.ReadablePartial) localDate37, (-28800000), intArray70, 0); } catch (java.lang.ArrayIndexOutOfBoundsException e) { } }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0056, 0.0185, 0.0105,  ..., 0.0063, 0.0325, 0.0026],
        [0.0060, 0.0168, 0.0117,  ..., 0.0058, 0.0212, 0.0031],
        [0.0051, 0.0218, 0.0112,  ..., 0.0067, 0.0283, 0.0021],
        ...,
        [0.0036, 0.0181, 0.0115,  ..., 0.0050, 0.0325, 0.0021],
        [0.0049, 0.0181, 0.0114,  ..., 0.0058, 0.0284, 0.0024],
        [0.0041, 0.0173, 0.0128,  ..., 0.0090, 0.0216, 0.0023]])