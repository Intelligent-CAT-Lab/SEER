101023
Test: public void test0110() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0110"); org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField1 = gJChronology0.yearOfCentury(); org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology0); int int3 = dateTime2.getEra(); int int4 = dateTime2.getMillisOfSecond(); org.joda.time.DateTime.Property property5 = dateTime2.year(); org.joda.time.ReadableDuration readableDuration6 = null; org.joda.time.DateTime dateTime7 = dateTime2.plus(readableDuration6); int int8 = dateTime7.getMillisOfDay(); org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay(); int int10 = dateTime7.get(dateTimeFieldType9); org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.eras(); org.joda.time.field.UnsupportedDurationField unsupportedDurationField12 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType11); org.joda.time.field.PreciseDurationField preciseDurationField14 = new org.joda.time.field.PreciseDurationField(durationFieldType11, 0L); long long15 = preciseDurationField14.getUnitMillis(); org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField16 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType9, (org.joda.time.DurationField) preciseDurationField14); org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField19 = gJChronology18.yearOfCentury(); org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology18); org.joda.time.DurationField durationField21 = gJChronology18.eras(); org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology18); org.joda.time.ReadablePeriod readablePeriod23 = null; org.joda.time.LocalDate localDate25 = localDate22.withPeriodAdded(readablePeriod23, (-28800000)); org.joda.time.LocalDate.Property property26 = localDate22.dayOfMonth(); org.joda.time.LocalDate localDate28 = property26.addWrapFieldToCopy(818); org.joda.time.chrono.BasicChronology basicChronology30 = null; org.joda.time.chrono.GJEraDateTimeField gJEraDateTimeField31 = new org.joda.time.chrono.GJEraDateTimeField(basicChronology30); java.util.Locale locale32 = null; int int33 = gJEraDateTimeField31.getMaximumTextLength(locale32); org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1); org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField37 = gJChronology36.yearOfCentury(); org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology36); int int39 = dateTime38.getEra(); int int40 = dateTime38.getYear(); boolean boolean41 = instant35.isBefore((org.joda.time.ReadableInstant) dateTime38); org.joda.time.LocalDate localDate42 = dateTime38.toLocalDate(); org.joda.time.LocalDate localDate44 = localDate42.plusDays(2757764); int int45 = localDate44.getDayOfMonth(); org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField49 = gJChronology48.yearOfCentury(); org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology48); org.joda.time.DurationField durationField51 = gJChronology48.eras(); org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology48); org.joda.time.ReadablePeriod readablePeriod53 = null; org.joda.time.LocalDate localDate55 = localDate52.withPeriodAdded(readablePeriod53, (-28800000)); org.joda.time.LocalDate.Property property56 = localDate52.dayOfMonth(); int[] intArray57 = localDate52.getValues(); int[] intArray59 = gJEraDateTimeField31.addWrapField((org.joda.time.ReadablePartial) localDate44, 0, intArray57, 899); java.util.Locale locale61 = null; try { int[] intArray62 = unsupportedDateTimeField16.set((org.joda.time.ReadablePartial) localDate28, 637, intArray59, "0", locale61); } catch (java.lang.UnsupportedOperationException e) { } }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone)); if (cutoverDate.getYear() <= 0) { throw new IllegalArgumentException("Cutover too early. Must be on or after 0001-01-01."); } } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0047, 0.0152, 0.0087,  ..., 0.0052, 0.0273, 0.0021],
        [0.0049, 0.0137, 0.0096,  ..., 0.0047, 0.0174, 0.0025],
        [0.0042, 0.0178, 0.0092,  ..., 0.0055, 0.0235, 0.0017],
        ...,
        [0.0030, 0.0148, 0.0096,  ..., 0.0042, 0.0273, 0.0017],
        [0.0040, 0.0147, 0.0094,  ..., 0.0047, 0.0236, 0.0020],
        [0.0034, 0.0141, 0.0105,  ..., 0.0073, 0.0177, 0.0018]])