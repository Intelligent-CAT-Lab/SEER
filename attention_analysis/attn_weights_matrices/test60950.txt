60950
Test: public void testBackslashEscapingOld() throws IOException { final String code = "one,two,three\n" + "on\\\"e,two\n" + "on\"e,two\n" + "one,\"tw\\\"o\"\n" + "one,\"t\\,wo\"\n" + "one,two,\"th,ree\"\n" + "\"a\\\\\"\n" + "a\\,b\n" + "\"a\\\\,b\""; final String[][] res = { {"one", "two", "three"}, {"on\\\"e", "two"}, {"on\"e", "two"}, {"one", "tw\"o"}, {"one", "t\\,wo"}, {"one", "two", "th,ree"}, {"a\\\\"}, {"a\\", "b"}, {"a\\\\,b"} }; final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); for (int i = 0; i < res.length; i++) { } parser.close(); } @Test @Ignore("CSV-107") public void testBOM() throws IOException { URL url = ClassLoader.getSystemClassLoader().getResource("CSVFileParser/bom.csv"); final CSVParser parser = CSVParser.parse(url, null, CSVFormat.EXCEL.withHeader()); try { for (CSVRecord record : parser) { final String string = record.get("Date"); } } finally { parser.close(); } } @Test public void testBOMInputStream() {} @Test public void testCarriageReturnEndings() throws IOException { final String code = "foo\rbaar,\rhello,world\r,kanu"; final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); parser.close(); } @Test public void testCarriageReturnLineFeedEndings() throws IOException { final String code = "foo\r\nbaar,\r\nhello,world\r\n,kanu"; final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); parser.close(); } @Test(expected = NoSuchElementException.class) public void testClose() throws Exception { final Reader in = new StringReader("# comment\na,b,c\n1,2,3\nx,y,z"); final CSVParser parser = CSVFormat.DEFAULT.withCommentStart('#').withHeader().parse(in); final Iterator<CSVRecord> records = parser.iterator(); parser.close(); records.next(); } @Test public void testCSV57() throws Exception { final CSVParser parser = CSVParser.parse("", CSVFormat.DEFAULT); final List<CSVRecord> list = parser.getRecords(); parser.close(); } @Test public void testDefaultFormat() throws IOException { final String code = "" + "a,b#\n" + "\"\n\",\" \",#\n" + "#,\"\"\n" + "# Final comment\n" ; final String[][] res = { {"a", "b#"}, {"\n", " ", "#"}, {"#", ""}, {"# Final comment"} }; CSVFormat format = CSVFormat.DEFAULT; CSVParser parser = CSVParser.parse(code, format); List<CSVRecord> records = parser.getRecords(); Utils.compare("Failed to parse without comments", res, records); final String[][] res_comments = { {"a", "b#"}, {"\n", " ", "#"}, }; format = CSVFormat.DEFAULT.withCommentStart('#'); parser.close(); parser = CSVParser.parse(code, format); records = parser.getRecords(); Utils.compare("Failed to parse with comments", res_comments, records); parser.close(); } @Test public void testEmptyFile() throws Exception { final CSVParser parser = CSVParser.parse("", CSVFormat.DEFAULT); parser.close(); } @Test public void testEmptyLineBehaviourCSV() throws Exception { final String[] codes = { "hello,\r\n\r\n\r\n", "hello,\n\n\n", "hello,\"\"\r\n\r\n\r\n", "hello,\"\"\n\n\n" }; final String[][] res = { {"hello", ""} }; for (final String code : codes) { final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); for (int i = 0; i < res.length; i++) { } parser.close(); } } @Test public void testEmptyLineBehaviourExcel() throws Exception { final String[] codes = { "hello,\r\n\r\n\r\n", "hello,\n\n\n", "hello,\"\"\r\n\r\n\r\n", "hello,\"\"\n\n\n" }; final String[][] res = { {"hello", ""}, {""}, {""} }; for (final String code : codes) { final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL); final List<CSVRecord> records = parser.getRecords(); for (int i = 0; i < res.length; i++) { } parser.close(); } } @Test public void testEndOfFileBehaviorCSV() throws Exception { final String[] codes = { "hello,\r\n\r\nworld,\r\n", "hello,\r\n\r\nworld,", "hello,\r\n\r\nworld,\"\"\r\n", "hello,\r\n\r\nworld,\"\"", "hello,\r\n\r\nworld,\n", "hello,\r\n\r\nworld,", "hello,\r\n\r\nworld,\"\"\n", "hello,\r\n\r\nworld,\"\"" }; final String[][] res = { {"hello", ""}, {"world", ""} }; for (final String code : codes) { final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); for (int i = 0; i < res.length; i++) { } parser.close(); } } @Test public void testEndOfFileBehaviourExcel() throws Exception { final String[] codes = { "hello,\r\n\r\nworld,\r\n", "hello,\r\n\r\nworld,", "hello,\r\n\r\nworld,\"\"\r\n", "hello,\r\n\r\nworld,\"\"", "hello,\r\n\r\nworld,\n", "hello,\r\n\r\nworld,", "hello,\r\n\r\nworld,\"\"\n", "hello,\r\n\r\nworld,\"\"" }; final String[][] res = { {"hello", ""}, {""}, {"world", ""} }; for (final String code : codes) { final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL); final List<CSVRecord> records = parser.getRecords(); for (int i = 0; i < res.length; i++) { } parser.close(); } } @Test public void testExcelFormat1() throws IOException { final String code = "value1,value2,value3,value4\r\na,b,c,d\r\n x,,," + "\r\n\r\n\"\"\"hello\"\"\",\" \"\"world\"\"\",\"abc\ndef\",\r\n"; final String[][] res = { {"value1", "value2", "value3", "value4"}, {"a", "b", "c", "d"}, {" x", "", "", ""}, {""}, {"\"hello\"", " \"world\"", "abc\ndef", ""} }; final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL); final List<CSVRecord> records = parser.getRecords(); for (int i = 0; i < res.length; i++) { } parser.close(); } @Test public void testExcelFormat2() throws Exception { final String code = "foo,baar\r\n\r\nhello,\r\n\r\nworld,\r\n"; final String[][] res = { {"foo", "baar"}, {""}, {"hello", ""}, {""}, {"world", ""} }; final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL); final List<CSVRecord> records = parser.getRecords(); for (int i = 0; i < res.length; i++) { } parser.close(); } @Test public void testForEach() throws Exception { final List<CSVRecord> records = new ArrayList<CSVRecord>(); final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); for (final CSVRecord record : CSVFormat.DEFAULT.parse(in)) { records.add(record); } } @Test public void testGetHeaderMap() throws Exception { final CSVParser parser = CSVParser.parse("a,b,c\n1,2,3\nx,y,z", CSVFormat.DEFAULT.withHeader("A", "B", "C")); final Map<String, Integer> headerMap = parser.getHeaderMap(); final Iterator<String> columnNames = headerMap.keySet().iterator(); final Iterator<CSVRecord> records = parser.iterator(); for (int i = 0; i < 3; i++) { final CSVRecord record = records.next(); } parser.close(); } @Test(expected = IllegalArgumentException.class) public void testDuplicateHeaderEntries() throws Exception { CSVParser.parse("a,b,a\n1,2,3\nx,y,z", CSVFormat.DEFAULT.withHeader(new String[]{})); } @Test public void testGetLine() throws IOException { final CSVParser parser = CSVParser.parse(CSV_INPUT, CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true)); for (final String[] re : RESULT) { } parser.close(); } @Test public void testGetLineNumberWithCR() throws Exception { this.validateLineNumbers(String.valueOf(CR)); } @Test public void testGetLineNumberWithCRLF() throws Exception { this.validateLineNumbers(CRLF); } @Test public void testGetLineNumberWithLF() throws Exception { this.validateLineNumbers(String.valueOf(LF)); } @Test public void testGetOneLine() throws IOException { final CSVParser parser = CSVParser.parse(CSV_INPUT_1, CSVFormat.DEFAULT); final CSVRecord record = parser.getRecords().get(0); parser.close(); } @Test public void testGetOneLineCustomCollection() throws IOException { final CSVParser parser = CSVParser.parse(CSV_INPUT_1, CSVFormat.DEFAULT); final CSVRecord record = parser.getRecords(new LinkedList<CSVRecord>()).getFirst(); parser.close(); } @Test public void testGetOneLineOneParser() throws IOException { PipedWriter writer = new PipedWriter(); PipedReader reader = new PipedReader(writer); final CSVFormat format = CSVFormat.DEFAULT; final CSVParser parser = new CSVParser(reader, format); try { writer.append(CSV_INPUT_1); writer.append(format.getRecordSeparator()); final CSVRecord record1 = parser.nextRecord(); writer.append(CSV_INPUT_2); writer.append(format.getRecordSeparator()); final CSVRecord record2 = parser.nextRecord(); } finally { parser.close(); } } @Test public void testGetRecordNumberWithCR() throws Exception { this.validateRecordNumbers(String.valueOf(CR)); } @Test public void testGetRecordNumberWithCRLF() throws Exception { this.validateRecordNumbers(CRLF); } @Test public void testGetRecordNumberWithLF() throws Exception { this.validateRecordNumbers(String.valueOf(LF)); } @Test public void testGetRecords() throws IOException { final CSVParser parser = CSVParser.parse(CSV_INPUT, CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true)); final List<CSVRecord> records = parser.getRecords(); for (int i = 0; i < RESULT.length; i++) { } parser.close(); } @Test public void testGetRecordWithMultiLineValues() throws Exception { final CSVParser parser = CSVParser.parse("\"a\r\n1\",\"a\r\n2\"" + CRLF + "\"b\r\n1\",\"b\r\n2\"" + CRLF + "\"c\r\n1\",\"c\r\n2\"", CSVFormat.DEFAULT.withRecordSeparator(CRLF)); CSVRecord record; parser.close(); } @Test public void testHeader() throws Exception { final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader().parse(in).iterator(); for (int i = 0; i < 2; i++) { final CSVRecord record = records.next(); } } @Test public void testHeaderComment() throws Exception { final Reader in = new StringReader("# comment\na,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withCommentStart('#').withHeader().parse(in).iterator(); for (int i = 0; i < 2; i++) { final CSVRecord record = records.next(); } } @Test public void testIgnoreEmptyLines() throws IOException { final String code = "\nfoo,baar\n\r\n,\n\n,world\r\n\n"; final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); parser.close(); } @Test(expected = IllegalArgumentException.class) public void testInvalidFormat() throws Exception { final CSVFormat invalidFormat = CSVFormat.DEFAULT.withDelimiter(CR); new CSVParser(null, invalidFormat).close(); } @Test public void testIterator() throws Exception { final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> iterator = CSVFormat.DEFAULT.parse(in).iterator(); try { iterator.remove(); fail("expected UnsupportedOperationException"); } catch (final UnsupportedOperationException expected) { } try { iterator.next(); fail("NoSuchElementException expected"); } catch (final NoSuchElementException e) { } } @Test public void testLineFeedEndings() throws IOException { final String code = "foo\nbaar,\nhello,world\n,kanu"; final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); parser.close(); } @Test public void testMappedButNotSetAsOutlook2007ContactExport() throws Exception { final Reader in = new StringReader("a,b,c\n1,2\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader("A", "B", "C").withSkipHeaderRecord(true) .parse(in).iterator(); CSVRecord record; record = records.next(); record = records.next(); } @Test public void testMultipleIterators() throws Exception { final CSVParser parser = CSVParser.parse("a,b,c" + CR + "d,e,f", CSVFormat.DEFAULT); final Iterator<CSVRecord> itr1 = parser.iterator(); final Iterator<CSVRecord> itr2 = parser.iterator(); final CSVRecord first = itr1.next(); final CSVRecord second = itr2.next(); parser.close(); } @Test(expected = IllegalArgumentException.class) public void testNewCSVParserNullReaderFormat() throws Exception { new CSVParser(null, CSVFormat.DEFAULT).close(); } @Test(expected = IllegalArgumentException.class) public void testNewCSVParserReaderNullFormat() throws Exception { new CSVParser(new StringReader(""), null).close(); } @Test public void testNoHeaderMap() throws Exception { final CSVParser parser = CSVParser.parse("a,b,c\n1,2,3\nx,y,z", CSVFormat.DEFAULT); parser.close(); } @Test(expected = IllegalArgumentException.class) public void testParseFileNullFormat() throws Exception { CSVParser.parse(new File(""), null); } @Test(expected = IllegalArgumentException.class) public void testParseNullFileFormat() throws Exception { CSVParser.parse((File) null, CSVFormat.DEFAULT); } @Test(expected = IllegalArgumentException.class) public void testParseNullStringFormat() throws Exception { CSVParser.parse((String) null, CSVFormat.DEFAULT); } @Test(expected = IllegalArgumentException.class) public void testParseNullUrlCharsetFormat() throws Exception { CSVParser.parse(null, Charset.defaultCharset(), CSVFormat.DEFAULT); } @Test(expected = IllegalArgumentException.class) public void testParserUrlNullCharsetFormat() throws Exception { final CSVParser parser = CSVParser.parse(new URL("http: parser.close(); } @Test(expected = IllegalArgumentException.class) public void testParseStringNullFormat() throws Exception { CSVParser.parse("csv data", null); } @Test(expected = IllegalArgumentException.class) public void testParseUrlCharsetNullFormat() throws Exception { final CSVParser parser = CSVParser.parse(new URL("http: parser.close(); } @Test public void testProvidedHeader() throws Exception { final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader("A", "B", "C").parse(in).iterator(); for (int i = 0; i < 3; i++) { final CSVRecord record = records.next(); } } @Test public void testProvidedHeaderAuto() throws Exception { final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader().parse(in).iterator(); for (int i = 0; i < 2; i++) { final CSVRecord record = records.next(); } } @Test public void testRoundtrip() throws Exception { final StringWriter out = new StringWriter(); final CSVPrinter printer = new CSVPrinter(out, CSVFormat.DEFAULT); final String input = "a,b,c\r\n1,2,3\r\nx,y,z\r\n"; for (final CSVRecord record : CSVParser.parse(input, CSVFormat.DEFAULT)) { printer.printRecord(record); } printer.close(); } @Test public void testSkipAutoHeader() throws Exception { final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader().parse(in).iterator(); final CSVRecord record = records.next(); } @Test public void testSkipSetHeader() throws Exception { final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader("a", "b", "c").withSkipHeaderRecord(true) .parse(in).iterator(); final CSVRecord record = records.next(); } private void validateLineNumbers(final String lineSeparator) throws IOException { final CSVParser parser = CSVParser.parse("a" + lineSeparator + "b" + lineSeparator + "c", CSVFormat.DEFAULT.withRecordSeparator(lineSeparator)); parser.close(); } private void validateRecordNumbers(final String lineSeparator) throws IOException { final CSVParser parser = CSVParser.parse("a" + lineSeparator + "b" + lineSeparator + "c", CSVFormat.DEFAULT.withRecordSeparator(lineSeparator)); CSVRecord record; parser.close(); }}
Code: public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException { Assertions.notNull(out, "out"); Assertions.notNull(format, "format"); this.out = out; this.format = format; this.format.validate(); if (format.getHeader() != null) { this.printRecord((Object[]) format.getHeader()); } }
[[0.02703328 0.03925434 0.03333673 0.02715057 0.02167184 0.01084981
 0.04352908 0.06419683 0.01392312 0.03584293 0.02546106 0.03256244
 0.027659   0.03039764 0.04276847 0.01699699 0.02214326 0.03842456
 0.01699699 0.03379573 0.07876471 0.07284631 0.01750698 0.01473183
 0.01453875 0.03584293 0.0569604  0.08186604 0.01147369 0.01147369]
[0.02523182 0.0344713  0.03767981 0.03254891 0.02082544 0.0115749
 0.03985746 0.07098584 0.01736671 0.04006615 0.02759826 0.0317972
 0.02531449 0.02800382 0.03371879 0.0194134  0.02572461 0.03593057
 0.0194134  0.02752968 0.05874978 0.07488457 0.01746714 0.02069952
 0.01824955 0.04006616 0.06042746 0.07935181 0.01252572 0.01252572]
[0.02347218 0.03856389 0.03268927 0.03021423 0.02105524 0.00968269
 0.04198302 0.07445614 0.01582252 0.04233008 0.03180062 0.02403582
 0.0256725  0.02802598 0.04334636 0.01976643 0.02403156 0.03575568
 0.01976643 0.02665755 0.08311434 0.07197009 0.01716311 0.01425505
 0.01382606 0.04233008 0.04355086 0.08391308 0.01037459 0.01037459]
[0.02581106 0.04033075 0.03953687 0.02689904 0.01994351 0.01123813
 0.03987801 0.05774913 0.0170848  0.03987811 0.02817503 0.0288198
 0.02046825 0.03086202 0.03387101 0.01739316 0.02863851 0.03877753
 0.01739316 0.02596455 0.08650079 0.07402296 0.02117624 0.01579748
 0.01804733 0.03987811 0.04460359 0.09128276 0.00998916 0.00998916]
[0.02652378 0.04181417 0.03360385 0.02841747 0.01708978 0.00839324
 0.03770588 0.07521655 0.01517627 0.03917946 0.02710334 0.02251043
 0.02069595 0.02785128 0.03409682 0.0206497  0.02252416 0.0305989
 0.0206497  0.0209183  0.11945488 0.0907359  0.01220444 0.01148548
 0.01255396 0.03917947 0.04939868 0.07822038 0.00802385 0.00802385]
[0.02070515 0.03394568 0.03264096 0.0284461  0.01801367 0.00792628
 0.04242681 0.07799681 0.01300228 0.05006972 0.02909757 0.02865566
 0.01995767 0.02351964 0.02665506 0.01542723 0.01877671 0.03510497
 0.01542723 0.01984307 0.09483783 0.08474045 0.01572679 0.01087948
 0.01236319 0.05006972 0.05211198 0.10502407 0.00830413 0.00830413]
[0.01856323 0.03746956 0.02560188 0.02425895 0.0164432  0.00730555
 0.0481647  0.08278119 0.01069991 0.03936337 0.03178658 0.02504122
 0.01967811 0.02396556 0.0335882  0.01350275 0.02100659 0.03891507
 0.01350275 0.01677497 0.12438799 0.07638447 0.01372255 0.0102399
 0.00893097 0.03936338 0.05157087 0.11433194 0.00632727 0.00632727]
[0.01898842 0.03457344 0.03514928 0.0335777  0.01512911 0.00826021
 0.04173774 0.09780642 0.01109074 0.040675   0.02885335 0.0260396
 0.0173148  0.02256423 0.03183977 0.01646024 0.01699919 0.03101484
 0.01646024 0.02167924 0.08697936 0.08473563 0.01369821 0.01390702
 0.01177488 0.04067502 0.05262871 0.1128308  0.00827842 0.00827842]
[0.02225814 0.03347339 0.02825183 0.03091592 0.0183893  0.00874878
 0.04287549 0.08697925 0.01144246 0.03488697 0.02808882 0.02631364
 0.02675911 0.02869491 0.03539163 0.01707527 0.02141574 0.03536135
 0.01707527 0.02106961 0.0987163  0.08941935 0.01249471 0.01273502
 0.00976226 0.03488698 0.04526886 0.10566303 0.0077933  0.0077933 ]
[0.029098   0.04073644 0.04107489 0.02944881 0.02837774 0.0151322
 0.04462372 0.05250561 0.01873668 0.04193156 0.03394876 0.02804253
 0.0258653  0.02791395 0.03517693 0.02400462 0.02317953 0.03755813
 0.02400462 0.03055483 0.06946384 0.05075355 0.01897047 0.01976066
 0.01977037 0.04193157 0.04528932 0.07102744 0.01555897 0.01555897]
[0.02522831 0.04125036 0.03325178 0.03032554 0.02853679 0.01298681
 0.03668419 0.06336857 0.01643601 0.04657907 0.02630779 0.02671268
 0.02680435 0.02462203 0.03957086 0.01845647 0.02081095 0.0366439
 0.01845647 0.02589297 0.0732545  0.09276322 0.01468803 0.01541074
 0.01568055 0.04657907 0.04250761 0.08061853 0.0097859  0.0097859 ]
[0.0225987  0.04109948 0.02821841 0.02879608 0.01701579 0.00716506
 0.04261843 0.09727174 0.0147462  0.03405184 0.03114405 0.0249289
 0.02168407 0.02004523 0.03544986 0.01591752 0.02195648 0.03101874
 0.01591752 0.02112472 0.11272749 0.08963242 0.01303665 0.00849392
 0.01129832 0.03405185 0.04909761 0.09625767 0.00631764 0.00631764]
[0.02337991 0.04111936 0.03103788 0.0291588  0.02424023 0.00960086
 0.04080374 0.07105546 0.01452114 0.03715826 0.02839509 0.02728524
 0.02239076 0.03116749 0.03673352 0.01977512 0.02107534 0.03602241
 0.01977512 0.02605654 0.08185598 0.07487239 0.01608116 0.01288677
 0.01485554 0.03715826 0.04960917 0.09739131 0.01226858 0.01226858]
[0.02257186 0.0365946  0.03608783 0.02711213 0.01908905 0.01176978
 0.03830206 0.08743881 0.01491547 0.03863055 0.02317458 0.02921389
 0.02339034 0.03086979 0.0381858  0.02419341 0.02095427 0.03680948
 0.02419341 0.02167606 0.06774344 0.07767014 0.01598197 0.01557867
 0.01589072 0.03863055 0.04881731 0.09091809 0.01179797 0.01179797]
[0.02826652 0.03582795 0.03402347 0.02738633 0.0219946  0.00948294
 0.04465281 0.07934763 0.01386648 0.04280065 0.03432234 0.02944929
 0.02492456 0.02475888 0.03294881 0.01721368 0.02533855 0.02869903
 0.01721368 0.01808149 0.09658786 0.06312627 0.01606827 0.01376184
 0.01431686 0.04280065 0.0528582  0.08993787 0.00997123 0.00997123]
[0.03184113 0.03962895 0.04454362 0.03459464 0.02672955 0.01658857
 0.03273586 0.04785974 0.01944141 0.03332616 0.03102864 0.0274748
 0.03109973 0.02625958 0.03910516 0.02564098 0.02478396 0.03973003
 0.02564098 0.02688522 0.06602273 0.06996144 0.01990503 0.02616011
 0.02084368 0.03332616 0.04173709 0.06716506 0.01497001 0.01497001]
[0.02746142 0.03731999 0.03446257 0.03236102 0.02387393 0.01080841
 0.04973453 0.07424188 0.01670363 0.0330599  0.02854216 0.0277922
 0.0229592  0.03046008 0.04038401 0.01673265 0.02089358 0.03137367
 0.01673265 0.03454272 0.08152133 0.0773545  0.01761815 0.01343094
 0.01451882 0.03305991 0.05453011 0.07402313 0.01175145 0.01175145]
[0.02397197 0.03864373 0.0364231  0.02490571 0.02081222 0.00741684
 0.03732889 0.09151177 0.01062151 0.03279235 0.02524267 0.02609533
 0.02337884 0.03089719 0.0370482  0.02395684 0.02297463 0.03468771
 0.02395684 0.02287574 0.0750279  0.06550944 0.01730914 0.01281353
 0.01407943 0.03279236 0.05661034 0.11035975 0.00997802 0.00997802]
[0.03184113 0.03962895 0.04454362 0.03459464 0.02672955 0.01658857
 0.03273586 0.04785974 0.01944141 0.03332616 0.03102864 0.0274748
 0.03109973 0.02625958 0.03910516 0.02564098 0.02478396 0.03973003
 0.02564098 0.02688522 0.06602273 0.06996144 0.01990503 0.02616011
 0.02084368 0.03332616 0.04173709 0.06716506 0.01497001 0.01497001]
[0.0192086  0.03812245 0.02664444 0.02690202 0.01713657 0.00752403
 0.03909503 0.08721364 0.01321367 0.04460717 0.02550193 0.02459509
 0.01781317 0.02980966 0.03610082 0.01865436 0.0219774  0.0366848
 0.01865436 0.02055176 0.09627088 0.0813289  0.01368825 0.00875822
 0.00920461 0.04460717 0.05266926 0.10986938 0.00679622 0.00679622]
[0.03086504 0.0367179  0.0404274  0.02850254 0.01807319 0.01196887
 0.04942398 0.06972887 0.01763229 0.04124924 0.02845027 0.03259748
 0.02539413 0.01831258 0.03739258 0.01695986 0.01891226 0.03519043
 0.01695986 0.02785824 0.07730742 0.07877901 0.01167543 0.02202296
 0.01880292 0.04124924 0.0602589  0.0587701  0.01425853 0.01425853]
[0.01789003 0.03536053 0.02766444 0.02251912 0.0121507  0.00379373
 0.05292597 0.10681391 0.00978149 0.03141884 0.02206983 0.0198007
 0.01668428 0.02916013 0.02760379 0.01346757 0.01842327 0.03166794
 0.01346757 0.01714417 0.12217589 0.09855773 0.01060022 0.0062484
 0.00695336 0.03141883 0.05018201 0.13393675 0.00505938 0.00505938]
[0.02488123 0.03992399 0.03574571 0.0300081  0.02175885 0.0103335
 0.04346913 0.07845948 0.01494019 0.04114173 0.02115063 0.03106726
 0.02702161 0.02713083 0.03742258 0.01945377 0.02108194 0.03437537
 0.01945377 0.02389965 0.06724096 0.07609667 0.01914872 0.01519712
 0.01261043 0.04114174 0.05147302 0.08982723 0.0122724  0.0122724 ]
[0.02180208 0.04099558 0.02895686 0.02742038 0.02206131 0.00649601
 0.04080702 0.08142537 0.01152909 0.04303357 0.02704881 0.0267897
 0.02586561 0.04247168 0.03246081 0.01738295 0.0187821  0.02850772
 0.01738295 0.01836528 0.09157124 0.08051816 0.01271656 0.00862361
 0.0112968  0.04303357 0.04837283 0.10811334 0.00808447 0.00808447]
[0.02214777 0.03552001 0.03345443 0.02681062 0.01808678 0.0080871
 0.04337939 0.07967293 0.0140736  0.04393582 0.02905166 0.02617506
 0.01991587 0.03005867 0.03587883 0.01395356 0.01645981 0.03094712
 0.01395356 0.02540001 0.08267328 0.10217462 0.01301211 0.01181707
 0.01440177 0.04393583 0.04803514 0.10271183 0.00713791 0.00713791]
[0.029098   0.04073644 0.04107489 0.02944881 0.02837774 0.0151322
 0.04462372 0.05250561 0.01873668 0.04193156 0.03394876 0.02804253
 0.0258653  0.02791395 0.03517693 0.02400462 0.02317953 0.03755813
 0.02400462 0.03055483 0.06946384 0.05075355 0.01897047 0.01976066
 0.01977037 0.04193157 0.04528932 0.07102744 0.01555897 0.01555897]
[0.02466734 0.03635038 0.03025748 0.03727241 0.02307433 0.01029127
 0.0380697  0.06809372 0.0163285  0.04606437 0.03421413 0.02949551
 0.02508419 0.02528111 0.02973782 0.02280958 0.02119019 0.03336433
 0.02280958 0.02785164 0.06650823 0.08004545 0.01665386 0.01545743
 0.01535378 0.04606437 0.05024982 0.08407198 0.01164376 0.01164376]
[0.02508933 0.03809658 0.04098837 0.03083006 0.02130754 0.01302032
 0.04227819 0.06967559 0.01503804 0.03803728 0.02421167 0.0350303
 0.02341516 0.02405852 0.03977166 0.01668112 0.02398792 0.03935487
 0.01668112 0.02691498 0.07157978 0.08259584 0.0192431  0.0181368
 0.01505217 0.03803727 0.0455161  0.07856826 0.01340102 0.01340102]
[0.02095575 0.03278408 0.03161641 0.03407924 0.01831401 0.0109352
 0.03477447 0.08886716 0.01522822 0.04575976 0.02609568 0.03546657
 0.02318078 0.03298036 0.03696264 0.01807003 0.02016558 0.03332913
 0.01807003 0.01659653 0.07735232 0.07909711 0.01784022 0.01440103
 0.01340337 0.04575976 0.04541773 0.09202194 0.01023745 0.01023745]
[0.02095575 0.03278408 0.03161641 0.03407924 0.01831401 0.0109352
 0.03477447 0.08886716 0.01522822 0.04575976 0.02609568 0.03546657
 0.02318078 0.03298036 0.03696264 0.01807003 0.02016558 0.03332913
 0.01807003 0.01659653 0.07735232 0.07909711 0.01784022 0.01440103
 0.01340337 0.04575976 0.04541773 0.09202194 0.01023745 0.01023745]]