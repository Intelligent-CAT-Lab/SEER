16527
Test: public void testGetScopeRoot() { Compiler compiler = new Compiler(); NodeTraversal t = new NodeTraversal(compiler, new NodeTraversal.ScopedCallback() { @Override public void enterScope(NodeTraversal t) { Node root1 = t.getScopeRoot(); Node root2 = t.getScope().getRootNode(); } @Override public void exitScope(NodeTraversal t) { } @Override public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { return true; } @Override public void visit(NodeTraversal t, Node n, Node parent) { } } ); String code = "" + "var a; " + "function foo() {" + " var b" + "}"; Node tree = parse(compiler, code); t.traverse(tree); }
Code: public void visit(NodeTraversal t, Node n, Node parent) { if (isCallToScopeMethod(n)) { validateScopeCall(t, n, n.getParent()); } if (t.getScopeDepth() == 2) { int type = n.getType(); if (type == Token.NAME && parent.getType() == Token.VAR) { if (n.hasChildren() && n.getFirstChild().isQualifiedName()) { String name = n.getString(); Var aliasVar = t.getScope().getVar(name); aliases.put(name, aliasVar); aliasDefinitionsInOrder.add(n); String qualifiedName = aliasVar.getInitialValue().getQualifiedName(); transformation.addAlias(name, qualifiedName); return; } else { report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString()); } } if (type == Token.NAME && NodeUtil.isAssignmentOp(parent) && n == parent.getFirstChild()) { report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString()); } if (type == Token.RETURN) { report(t, n, GOOG_SCOPE_USES_RETURN); } else if (type == Token.THIS) { report(t, n, GOOG_SCOPE_REFERENCES_THIS); } else if (type == Token.THROW) { report(t, n, GOOG_SCOPE_USES_THROW); } } if (t.getScopeDepth() >= 2) { if (n.getType() == Token.NAME) { String name = n.getString(); Var aliasVar = aliases.get(name); if (aliasVar != null && t.getScope().getVar(name) == aliasVar) { Node aliasedNode = aliasVar.getInitialValue(); aliasUsages.add(new AliasedNode(n, aliasedNode)); } } JSDocInfo info = n.getJSDocInfo(); if (info != null) { for (Node node : info.getTypeNodes()) { fixTypeNode(node); } } } }
tensor([[0.0039, 0.0032, 0.0018,  ..., 0.0018, 0.0018, 0.0018],
        [0.0028, 0.0027, 0.0009,  ..., 0.0018, 0.0018, 0.0018],
        [0.0027, 0.0019, 0.0011,  ..., 0.0009, 0.0009, 0.0009],
        ...,
        [0.0027, 0.0025, 0.0014,  ..., 0.0015, 0.0015, 0.0015],
        [0.0027, 0.0025, 0.0014,  ..., 0.0015, 0.0015, 0.0015],
        [0.0027, 0.0025, 0.0014,  ..., 0.0015, 0.0015, 0.0015]])