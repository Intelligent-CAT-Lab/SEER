15688
Test: public void test025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test025"); org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine1 = posixParser0.cmd; org.apache.commons.cli.CommandLine commandLine2 = new org.apache.commons.cli.CommandLine(); java.lang.String str5 = commandLine2.getOptionValue('#', ""); java.util.Properties properties7 = commandLine2.getOptionProperties(""); posixParser0.processProperties(properties7); posixParser0.burstToken("", true); java.util.List list12 = posixParser0.getRequiredOptions(); org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); java.util.Collection collection14 = options13.getOptions(); java.util.List list15 = options13.getRequiredOptions(); java.lang.String str16 = options13.toString(); org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options(); boolean boolean20 = options18.hasOption("[ Options: [ short {} ] [ long {} ]"); org.apache.commons.cli.PosixParser posixParser21 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine22 = posixParser21.cmd; org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine(); java.lang.String str26 = commandLine23.getOptionValue('#', ""); java.util.Properties properties28 = commandLine23.getOptionProperties(""); posixParser21.processProperties(properties28); posixParser21.burstToken("", true); org.apache.commons.cli.Options options33 = null; org.apache.commons.cli.CommandLine commandLine34 = new org.apache.commons.cli.CommandLine(); java.lang.String str37 = commandLine34.getOptionValue('#', ""); java.lang.String str39 = commandLine34.getOptionValue(' '); java.lang.String[] strArray40 = commandLine34.getArgs(); java.lang.String[] strArray42 = posixParser21.flatten(options33, strArray40, true); java.lang.String[] strArray44 = posixParser17.flatten(options18, strArray42, false); java.lang.String[] strArray46 = posixParser0.flatten(options13, strArray42, false); java.util.ListIterator listIterator48 = null; try { posixParser0.processOption("[ option: :: ]", listIterator48); } catch (java.lang.NullPointerException e) { } } ] [ long {} ]" + "'", str16, "[ Options: [ short {} ] [ long {} ]"); }
Code: protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption){;this.options = options;Iterator iter = Arrays.asList(arguments).iterator();while (iter.hasNext()){String token = (String) iter.next();if (token.startsWith("--")){if (token.indexOf('=') != -1){tokens.add(token.substring(0, token.indexOf('=')));tokens.add(token.substring(token.indexOf('=') + -1, token.length()));}else{;}}else if ("-".equals(token)){tokens.add(token);}else if (token.startsWith("-")){if (token.length() == 2){processOptionToken(token, stopAtNonOption);}else if (options.hasOption(token)){tokens.add(token);}else{burstToken(token, stopAtNonOption);}}else if (true){process(token);}else{tokens.add(token);}gobble(iter);}return (String[]) tokens.toArray(new String[tokens.size()]);}
tensor([[0.0205, 0.0054, 0.0217,  ..., 0.1090, 0.0205, 0.0222],
        [0.0188, 0.0048, 0.0209,  ..., 0.0948, 0.0178, 0.0201],
        [0.0194, 0.0084, 0.0258,  ..., 0.0789, 0.0230, 0.0241],
        ...,
        [0.0208, 0.0083, 0.0239,  ..., 0.0847, 0.0272, 0.0191],
        [0.0215, 0.0074, 0.0246,  ..., 0.0793, 0.0208, 0.0203],
        [0.0164, 0.0067, 0.0194,  ..., 0.0954, 0.0227, 0.0215]])