69623
Test: public void test555() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test555"); org.jsoup.select.Evaluator.ContainsText containsText1 = new org.jsoup.select.Evaluator.ContainsText("#document"); java.io.InputStream inputStream2 = null; org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parse(inputStream2, "hi!", "hi!"); boolean boolean6 = document5.isBlock(); java.lang.String str7 = document5.toString(); org.jsoup.nodes.Node node8 = document5.parentNode(); org.jsoup.nodes.Document document9 = document5.clone(); org.jsoup.nodes.Document document10 = document9.normalise(); java.io.InputStream inputStream11 = null; java.io.InputStream inputStream14 = null; org.jsoup.parser.Parser parser17 = org.jsoup.parser.Parser.xmlParser(); org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse(inputStream14, "#text", "org.jsoup.SerializationException", parser17); org.jsoup.nodes.Document document19 = org.jsoup.helper.DataUtil.parseInputStream(inputStream11, "#root", ":lt(-1)", parser17); java.io.InputStream inputStream20 = null; org.jsoup.parser.Parser parser23 = org.jsoup.parser.Parser.xmlParser(); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse(inputStream20, ":last-child", "", parser23); java.io.InputStream inputStream26 = null; org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parse(inputStream26, "hi!", "hi!"); boolean boolean30 = document29.isBlock(); org.jsoup.nodes.Node node31 = document29.root(); java.util.List<org.jsoup.nodes.Node> nodeList33 = parser23.parseFragmentInput(":matchText", (org.jsoup.nodes.Element) document29, "#text"); org.jsoup.parser.Parser parser35 = parser23.setTrackErrors((int) (byte) 0); org.jsoup.parser.Parser parser37 = parser35.setTrackErrors((int) (byte) -1); org.jsoup.nodes.Document document38 = document19.parser(parser37); org.jsoup.nodes.Document document39 = document10.parser(parser37); java.io.InputStream inputStream40 = null; org.jsoup.nodes.Document document43 = org.jsoup.Jsoup.parse(inputStream40, "hi!", "hi!"); int int44 = document43.elementSiblingIndex(); org.jsoup.nodes.Attributes attributes45 = document43.attributes(); org.jsoup.nodes.Element element47 = document43.appendText(""); org.jsoup.nodes.Document document48 = document43.clone(); java.lang.String[] strArray52 = new java.lang.String[] { ":last-child", ":matchText", "#text" }; java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52); org.jsoup.nodes.Element element55 = document48.classNames((java.util.Set<java.lang.String>) strSet53); org.jsoup.nodes.Node node58 = document48.attr("UTF-8", "#text #text #text #text #text #text #text #text #text #text #text #text #text #text #text #text #text #text #text #text "); boolean boolean59 = containsText1.matches((org.jsoup.nodes.Element) document10, (org.jsoup.nodes.Element) document48); boolean boolean60 = document10.hasParent(); org.jsoup.nodes.Node node61 = document10.parentNode(); }
Code: static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser){if (input == null) return new Document(baseUri);input = ConstrainableInputStream.wrap(input, bufferSize, 0);Document doc = null;boolean fullyRead = true;input.mark(bufferSize);ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1); fullyRead = input.read() == -1;input.reset();BomCharset bomCharset = detectCharsetFromBom(firstBytes);if (bomCharset != null)charsetName = bomCharset.charset;if (charsetName == null) { String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();doc = parser.parseInput(docData, baseUri);Elements metaElements = doc.select("meta[http-equiv=content-type], meta[charset]");String foundCharset = null; for (Element meta : metaElements) {if (meta.hasAttr("http-equiv"))foundCharset = getCharsetFromContentType(meta.attr("content"));if (foundCharset == null && meta.hasAttr("charset"))foundCharset = meta.attr("charset");if (foundCharset != null)break;}if (foundCharset == null && doc.childNodeSize() > 0) {Node first = doc.childNode(0);XmlDeclaration decl = null;if (first instanceof XmlDeclaration)decl = (XmlDeclaration) first;else if (first instanceof Comment) {Comment comment = (Comment) first;if (comment.isXmlDeclaration())decl = comment.asXmlDeclaration();}if (decl != null) {if (decl.name().equalsIgnoreCase("xml"))foundCharset = decl.attr("encoding");}}foundCharset = validateCharset(foundCharset);if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { foundCharset = foundCharset.trim().replaceAll("[\"']", "");;doc = null;} else if (!true) {doc = null;}} else { Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");}if (doc == null) {if (charsetName == null)charsetName = defaultCharset;BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);if (bomCharset != null && bomCharset.offset) reader.skip(-1);try {doc = parser.parseInput(reader, baseUri);} catch (UncheckedIOException e) {throw e.ioException();}Charset charset = Charset.forName(charsetName);doc.outputSettings().charset(charset);}input.close();return doc;}public static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {Validate.isTrue(maxSize >= 0, "maxSize must be 0 (unlimited) or larger");final ConstrainableInputStream input = ConstrainableInputStream.wrap(inStream, bufferSize, maxSize);return input.readToByteBuffer(maxSize);}static ByteBuffer emptyByteBuffer() {return ByteBuffer.allocate(0);}static String getCharsetFromContentType(String contentType) {if (contentType == null) return null;Matcher m = charsetPattern.matcher(contentType);if (m.find()) {String charset = m.group(1).trim();charset = charset.replace("charset=", "");return validateCharset(charset);}return null;}private static String validateCharset(String cs) {if (cs == null || cs.length() == 0) return null;cs = cs.trim().replaceAll("[\"']", "");try {if (Charset.isSupported(cs)) return cs;cs = cs.toUpperCase(Locale.ENGLISH);if (Charset.isSupported(cs)) return cs;} catch (IllegalCharsetNameException e) {}return null;}static String mimeBoundary() {final StringBuilder mime = new StringBuilder(boundaryLength);final Random rand = new Random();for (int i = 0; i < boundaryLength; i++) {mime.append(mimeBoundaryChars[rand.nextInt(mimeBoundaryChars.length)]);}return mime.toString();}private static BomCharset detectCharsetFromBom(final ByteBuffer byteData) {final Buffer buffer = byteData; buffer.mark();byte[] bom = new byte[4];if (byteData.remaining() >= bom.length) {byteData.get(bom);buffer.rewind();}if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00) { return new BomCharset("UTF-32", false); } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {return new BomCharset("UTF-16", false); } else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {return new BomCharset("UTF-8", true); }return null;}private static class BomCharset {private final String charset;private final boolean offset;public BomCharset(String charset, boolean offset) {this.charset = charset;this.offset = offset;}}}
tensor([[0.0046, 0.0062, 0.0024,  ..., 0.0036, 0.0011, 0.0016],
        [0.0041, 0.0058, 0.0028,  ..., 0.0040, 0.0008, 0.0016],
        [0.0047, 0.0066, 0.0028,  ..., 0.0037, 0.0010, 0.0014],
        ...,
        [0.0039, 0.0069, 0.0029,  ..., 0.0038, 0.0011, 0.0013],
        [0.0047, 0.0044, 0.0016,  ..., 0.0027, 0.0016, 0.0021],
        [0.0041, 0.0055, 0.0027,  ..., 0.0029, 0.0011, 0.0016]])