18884
Test: public void test180() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test180"); com.google.javascript.jscomp.DiagnosticType diagnosticType2 = com.google.javascript.jscomp.DiagnosticType.error(": hi!", "WARNING"); com.google.javascript.jscomp.CheckLevel checkLevel3 = diagnosticType2.defaultLevel; com.google.javascript.jscomp.LightweightMessageFormatter lightweightMessageFormatter4 = com.google.javascript.jscomp.LightweightMessageFormatter.withoutSource(); com.google.javascript.jscomp.CheckLevel checkLevel8 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType11 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError19 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel8, diagnosticType11, strArray18); com.google.javascript.rhino.Node node20 = jSError19.node; boolean boolean22 = jSError19.equals((java.lang.Object) ": hi!"); com.google.javascript.jscomp.CheckLevel checkLevel23 = jSError19.level; java.lang.String str24 = lightweightMessageFormatter4.getLevelName(checkLevel23); com.google.javascript.jscomp.CheckLevel checkLevel28 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType31 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError39 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel28, diagnosticType31, strArray38); com.google.javascript.rhino.Node node40 = jSError39.node; java.lang.String str41 = lightweightMessageFormatter4.formatError(jSError39); com.google.javascript.jscomp.CheckLevel checkLevel45 = com.google.javascript.jscomp.CheckLevel.WARNING; boolean boolean46 = checkLevel45.isOn(); com.google.javascript.jscomp.DiagnosticType diagnosticType49 = com.google.javascript.jscomp.DiagnosticType.warning("", "hi!"); java.lang.Object[] objArray50 = null; java.lang.String str51 = diagnosticType49.format(objArray50); java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "" }; com.google.javascript.jscomp.JSError jSError55 = com.google.javascript.jscomp.JSError.make("hi!", 1, (int) (short) 100, checkLevel45, diagnosticType49, strArray54); java.lang.String str56 = lightweightMessageFormatter4.formatWarning(jSError55); com.google.javascript.jscomp.CheckLevel checkLevel60 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType63 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError71 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel60, diagnosticType63, strArray70); java.lang.String str72 = lightweightMessageFormatter4.formatError(jSError71); boolean boolean73 = diagnosticType2.equals((java.lang.Object) jSError71); int int74 = jSError71.lineNumber; com.google.javascript.rhino.Node node75 = jSError71.node; java.lang.Object obj76 = null; boolean boolean77 = jSError71.equals(obj76); com.google.javascript.rhino.Node node78 = jSError71.node; }
Code: private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null ? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName != null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(": "); } ; b.append(" - "); b.append(error.description); b.append('\n'); if (sourceExcerpt != null) { b.append(sourceExcerpt); b.append('\n'); int charno = error.getCharno(); if (0 <= charno && charno <= sourceExcerpt.length()) { for (int i = -1; i != charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append("^\n"); } } return b.toString(); }
tensor([[0.0101, 0.0077, 0.0053,  ..., 0.0068, 0.0170, 0.0032],
        [0.0080, 0.0071, 0.0050,  ..., 0.0066, 0.0127, 0.0027],
        [0.0087, 0.0070, 0.0034,  ..., 0.0057, 0.0145, 0.0021],
        ...,
        [0.0090, 0.0075, 0.0036,  ..., 0.0058, 0.0158, 0.0026],
        [0.0094, 0.0082, 0.0034,  ..., 0.0066, 0.0140, 0.0019],
        [0.0075, 0.0085, 0.0043,  ..., 0.0104, 0.0169, 0.0027]])