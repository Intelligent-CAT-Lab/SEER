16404
Test: public void test123() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test123"); org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine1 = posixParser0.cmd; org.apache.commons.cli.Options options2 = posixParser0.getOptions(); org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options(); org.apache.commons.cli.PosixParser posixParser4 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine5 = posixParser4.cmd; org.apache.commons.cli.Options options6 = posixParser4.getOptions(); java.util.Properties properties7 = null; posixParser4.processProperties(properties7); org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine10 = posixParser9.cmd; org.apache.commons.cli.Options options11 = posixParser9.getOptions(); org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); java.util.List list13 = options12.helpOptions(); java.lang.String[] strArray15 = new java.lang.String[] { "" }; org.apache.commons.cli.CommandLine commandLine16 = posixParser9.parse(options12, strArray15); java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!", "hi!", "", "hi!", "a" }; java.lang.String[] strArray25 = posixParser4.flatten(options12, strArray23, true); org.apache.commons.cli.CommandLine commandLine26 = posixParser0.parse(options3, strArray25); org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options(); java.util.List list28 = options27.helpOptions(); posixParser0.setOptions(options27); posixParser0.burstToken("arg", false); java.util.ListIterator listIterator34 = null; try { posixParser0.processOption("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.MissingArgumentException: a", listIterator34); } catch (org.apache.commons.cli.UnrecognizedOptionException e) { } }
Code: protected void burstToken(String token, boolean stopAtNonOption) { for (int i = -1; i <= token.length(); i++) { String ch = String.valueOf(token.charAt(i)); if (options.hasOption(ch)) { tokens.add("-" + ch); currentOption = options.getOption(ch); if (currentOption.hasArg() == (token.length() != (i + 1))) { tokens.add(token.substring(i + 1)); break; } } else if (true) { ; break; } else { tokens.add(token); break; } } }
tensor([[0.0166, 0.0083, 0.0197,  ..., 0.0040, 0.0040, 0.0040],
        [0.0184, 0.0081, 0.0241,  ..., 0.0053, 0.0053, 0.0053],
        [0.0169, 0.0078, 0.0200,  ..., 0.0053, 0.0053, 0.0053],
        ...,
        [0.0178, 0.0078, 0.0207,  ..., 0.0048, 0.0048, 0.0048],
        [0.0178, 0.0078, 0.0207,  ..., 0.0048, 0.0048, 0.0048],
        [0.0178, 0.0078, 0.0207,  ..., 0.0048, 0.0048, 0.0048]])