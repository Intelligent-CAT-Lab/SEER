67220
Test: public void test062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test062"); com.fasterxml.jackson.databind.node.DoubleNode doubleNode1 = new com.fasterxml.jackson.databind.node.DoubleNode((double) 1); com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null; com.fasterxml.jackson.core.JsonParser jsonParser3 = doubleNode1.traverse(objectCodec2); com.fasterxml.jackson.databind.util.TokenBuffer tokenBuffer4 = new com.fasterxml.jackson.databind.util.TokenBuffer(jsonParser3); tokenBuffer4.writeBoolean(false); com.fasterxml.jackson.core.ObjectCodec objectCodec7 = tokenBuffer4._objectCodec; tokenBuffer4.writeOmittedField(""); com.fasterxml.jackson.databind.node.DoubleNode doubleNode11 = new com.fasterxml.jackson.databind.node.DoubleNode((double) 1); com.fasterxml.jackson.databind.MappingJsonFactory mappingJsonFactory12 = new com.fasterxml.jackson.databind.MappingJsonFactory(); boolean boolean13 = doubleNode11.equals((java.lang.Object) mappingJsonFactory12); int int14 = doubleNode11.asInt(); java.math.BigDecimal bigDecimal15 = doubleNode11.decimalValue(); tokenBuffer4.writeNumber(bigDecimal15); com.fasterxml.jackson.databind.node.DoubleNode doubleNode18 = new com.fasterxml.jackson.databind.node.DoubleNode((double) 1); com.fasterxml.jackson.core.ObjectCodec objectCodec19 = null; com.fasterxml.jackson.core.JsonParser jsonParser20 = doubleNode18.traverse(objectCodec19); com.fasterxml.jackson.databind.util.TokenBuffer tokenBuffer21 = new com.fasterxml.jackson.databind.util.TokenBuffer(jsonParser20); tokenBuffer21.writeBoolean(false); byte[] byteArray28 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 10 }; tokenBuffer21.writeBinary(byteArray28); com.fasterxml.jackson.databind.node.BinaryNode binaryNode30 = new com.fasterxml.jackson.databind.node.BinaryNode(byteArray28); boolean boolean32 = binaryNode30.equals((java.lang.Object) 13); com.fasterxml.jackson.core.JsonToken jsonToken33 = binaryNode30.asToken(); com.fasterxml.jackson.databind.node.TextNode textNode35 = new com.fasterxml.jackson.databind.node.TextNode("1.0"); com.fasterxml.jackson.databind.node.DoubleNode doubleNode37 = new com.fasterxml.jackson.databind.node.DoubleNode((double) 1); com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null; com.fasterxml.jackson.core.JsonParser jsonParser39 = doubleNode37.traverse(objectCodec38); com.fasterxml.jackson.databind.util.TokenBuffer tokenBuffer40 = new com.fasterxml.jackson.databind.util.TokenBuffer(jsonParser39); tokenBuffer40._forceBigDecimal = false; int int43 = tokenBuffer40.getFeatureMask(); com.fasterxml.jackson.databind.SerializerProvider serializerProvider44 = null; textNode35.serialize((com.fasterxml.jackson.core.JsonGenerator) tokenBuffer40, serializerProvider44); tokenBuffer40.writeObject((java.lang.Object) (-1.0d)); com.fasterxml.jackson.core.JsonParser jsonParser48 = tokenBuffer40.asParser(); tokenBuffer4._append(jsonToken33, (java.lang.Object) tokenBuffer40); }
Code: public void writeNumber(short i) throws IOException { _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i)); }
[[0.08977069 0.07339242 0.12357208 0.10054163 0.20810586 0.04801602
 0.1259657  0.07942922 0.11158665 0.03961975]
[0.07706001 0.06614408 0.10367939 0.10376936 0.27574906 0.04206191
 0.12917784 0.08759686 0.07523811 0.03952342]
[0.07307627 0.05434064 0.11967273 0.11044854 0.22331277 0.05500391
 0.16464764 0.07900089 0.09104876 0.02944789]
[0.08684589 0.06826479 0.11949507 0.08685826 0.23387954 0.04492557
 0.14143437 0.06976788 0.11481088 0.03371776]
[0.06270701 0.05895857 0.11352938 0.09172047 0.31748897 0.03768536
 0.13976249 0.07053806 0.07955401 0.02805576]
[0.07538572 0.05966055 0.11522586 0.07729684 0.29088956 0.04223521
 0.13307917 0.08654395 0.09127267 0.02841047]
[0.09300575 0.08000574 0.09860091 0.10662773 0.16730995 0.06027479
 0.13635103 0.11101992 0.09662423 0.05017997]
[0.06421009 0.0485282  0.13718167 0.12277119 0.26945955 0.0343058
 0.14277564 0.07945397 0.08072009 0.02059381]
[0.08754751 0.05945542 0.09822295 0.10299166 0.23861647 0.05010905
 0.15883924 0.09182043 0.08155274 0.03084454]
[0.06461086 0.05825313 0.11109944 0.07873429 0.27338684 0.04851795
 0.1491423  0.09113251 0.09221324 0.0329094 ]]