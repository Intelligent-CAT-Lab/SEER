101465
Test: public void test33() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test33"); org.joda.time.DateTimeZone dateTimeZone0 = null; org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0); org.joda.time.DateTime dateTime2 = dateTime1.toDateTime(); org.joda.time.ReadableDuration readableDuration3 = null; org.joda.time.DateTime dateTime5 = dateTime2.withDurationAdded(readableDuration3, 36); org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.secondOfMinute(); int int7 = dateTime5.get(dateTimeFieldType6); org.joda.time.DateTime dateTime8 = dateTime5.toDateTime(); org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance(); org.joda.time.DateTimeField dateTimeField11 = gregorianChronology10.minuteOfDay(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField13 = new org.joda.time.field.OffsetDateTimeField(dateTimeField11, (int) ' '); org.joda.time.DateTimeZone dateTimeZone15 = null; org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15); org.joda.time.DateTime.Property property17 = dateTime16.secondOfMinute(); org.joda.time.ReadablePeriod readablePeriod18 = null; org.joda.time.DateTime dateTime19 = dateTime16.plus(readablePeriod18); org.joda.time.DateTime.Property property20 = dateTime19.centuryOfEra(); org.joda.time.format.DateTimeParser[] dateTimeParserArray21 = new org.joda.time.format.DateTimeParser[] {}; org.joda.time.format.DateTimeFormatterBuilder.MatchingParser matchingParser22 = new org.joda.time.format.DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray21); org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstanceUTC(); org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((org.joda.time.Chronology) iSOChronology24); org.joda.time.DateTimeZone dateTimeZone26 = null; org.joda.time.Chronology chronology27 = iSOChronology24.withZone(dateTimeZone26); org.joda.time.DateTimeField dateTimeField28 = iSOChronology24.weekyear(); java.util.Locale locale29 = null; org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) 100, (org.joda.time.Chronology) iSOChronology24, locale29); int int33 = matchingParser22.parseInto(dateTimeParserBucket30, "713", 1439); org.joda.time.format.DateTimeParserBucket.SavedState savedState34 = dateTimeParserBucket30.new SavedState(); org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstanceUTC(); org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((org.joda.time.Chronology) iSOChronology36); org.joda.time.DateTimeZone dateTimeZone38 = null; org.joda.time.Chronology chronology39 = iSOChronology36.withZone(dateTimeZone38); org.joda.time.DateTimeField dateTimeField40 = iSOChronology36.weekyear(); java.util.Locale locale41 = null; org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) 100, (org.joda.time.Chronology) iSOChronology36, locale41); java.lang.Integer int43 = dateTimeParserBucket42.getPivotYear(); boolean boolean44 = savedState34.restoreState(dateTimeParserBucket42); org.joda.time.Chronology chronology45 = dateTimeParserBucket42.getChronology(); org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField47 = iSOChronology46.millisOfSecond(); org.joda.time.DurationField durationField48 = iSOChronology46.hours(); boolean boolean49 = dateTimeParserBucket42.restoreState((java.lang.Object) iSOChronology46); java.util.Locale locale50 = dateTimeParserBucket42.getLocale(); int int51 = property20.getMaximumShortTextLength(locale50); java.lang.String str52 = offsetDateTimeField13.getAsShortText((long) 25, locale50); try { java.lang.String str53 = dateTime8.toString("GregorianChronology[UTC]", locale50); } catch (java.lang.IllegalArgumentException e) { } }
Code: public int parseInto(DateTimeParserBucket bucket, String text, int position){if (position >= text.length()) {return ~position;}char a = text.charAt(position);char b = iValue;if (a != b) {a = Character.toUpperCase(a);b = Character.toUpperCase(b);if (a != b) {a = Character.toLowerCase(a);b = Character.toLowerCase(b);if (a != b) {return ~position;}}}return position + 1;}
tensor([[0.0176, 0.0108, 0.0276,  ..., 0.0165, 0.0143, 0.0465],
        [0.0107, 0.0077, 0.0274,  ..., 0.0093, 0.0127, 0.0473],
        [0.0135, 0.0076, 0.0310,  ..., 0.0094, 0.0166, 0.0505],
        ...,
        [0.0124, 0.0077, 0.0315,  ..., 0.0131, 0.0132, 0.0537],
        [0.0168, 0.0091, 0.0368,  ..., 0.0125, 0.0141, 0.0420],
        [0.0147, 0.0101, 0.0300,  ..., 0.0127, 0.0140, 0.0567]])