67192
Test: public void testMapTypesRefined() { TypeFactory tf = newTypeFactory(); JavaType type = tf.constructType(new TypeReference<Map<String,List<Integer>>>() { }); MapType mapType = (MapType) type; JavaType subtype = tf.constructSpecializedType(type, LinkedHashMap.class); JavaType superType = subtype.getSuperClass(); }
Code: public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass) { final Class<?> rawBase = baseType.getRawClass(); if (rawBase == subclass) { return baseType; } JavaType newType; do { if (rawBase == Object.class) { newType = _fromClass(null, subclass, TypeBindings.emptyBindings()); break; } if (!rawBase.isAssignableFrom(subclass)) { throw new IllegalArgumentException(String.format( "Class %s not subtype of %s", subclass.getName(), baseType)); } if (baseType.getBindings().isEmpty()) { newType = _fromClass(null, subclass, TypeBindings.emptyBindings()); break; } if (baseType.isContainerType()) { if (baseType.isMapLikeType()) { if ((subclass == HashMap.class) || (subclass == LinkedHashMap.class) || (subclass == EnumMap.class) || (subclass == TreeMap.class)) { newType = _fromClass(null, subclass, TypeBindings.create(subclass, baseType.getKeyType(), baseType.getContentType())); break; } } else if (baseType.isCollectionLikeType()) { if ((subclass == ArrayList.class) || (subclass == LinkedList.class) || (subclass == HashSet.class) || (subclass == TreeSet.class)) { newType = _fromClass(null, subclass, TypeBindings.create(subclass, baseType.getContentType())); break; } if (rawBase == EnumSet.class) { return baseType; } } } int typeParamCount = subclass.getTypeParameters().length; if (typeParamCount == 0) { newType = _fromClass(null, subclass, TypeBindings.emptyBindings()); break; } TypeBindings tb = _bindingsForSubtype(baseType, typeParamCount, subclass); newType = _fromClass(null, subclass, tb); } while (false); newType = newType.withHandlersFrom(baseType); return newType; }
tensor([[0.0044, 0.0071, 0.0075,  ..., 0.0049, 0.0035, 0.0020],
        [0.0042, 0.0076, 0.0071,  ..., 0.0048, 0.0026, 0.0016],
        [0.0044, 0.0077, 0.0067,  ..., 0.0051, 0.0020, 0.0015],
        ...,
        [0.0030, 0.0077, 0.0063,  ..., 0.0043, 0.0018, 0.0017],
        [0.0044, 0.0067, 0.0063,  ..., 0.0058, 0.0022, 0.0017],
        [0.0034, 0.0077, 0.0060,  ..., 0.0073, 0.0026, 0.0018]])