16745
Test: public void testFunctionSubTypeRelationships() { FunctionType googBarMethod = new FunctionBuilder(registry) .withTypeOfThis(googBar).build(); FunctionType googBarParamFn = new FunctionBuilder(registry) .withParamsNode(registry.createParameters(googBar)).build(); FunctionType googBarReturnFn = new FunctionBuilder(registry) .withParamsNode(registry.createParameters()) .withReturnType(googBar).build(); FunctionType googSubBarMethod = new FunctionBuilder(registry) .withTypeOfThis(googSubBar).build(); FunctionType googSubBarParamFn = new FunctionBuilder(registry) .withParamsNode(registry.createParameters(googSubBar)).build(); FunctionType googSubBarReturnFn = new FunctionBuilder(registry) .withReturnType(googSubBar).build(); List<FunctionType> allFunctions = Lists.newArrayList( googBarMethod, googBarParamFn, googBarReturnFn, googSubBarMethod, googSubBarParamFn, googSubBarReturnFn); for (int i = 0; i < allFunctions.size(); i++) { for (int j = 0; j < allFunctions.size(); j++) { FunctionType typeA = allFunctions.get(i); FunctionType typeB = allFunctions.get(j); if (i == j) { } else { } } } }
Code: static boolean isSubtype(ObjectType typeA, RecordType typeB) { for (String property : typeB.properties.keySet()) { if (!typeA.hasProperty(property)) { return false; } JSType propA = typeA.getPropertyType(property); JSType propB = typeB.getPropertyType(property); if (!propA.isUnknownType() && !propB.isUnknownType()) { if (typeA.isPropertyTypeDeclared(property)) { if (!propA.isInvariant(propB)) { return false; } } else { if (!propA.isSubtype(propB)) { return false; } } } } return true; }
tensor([[0.0309, 0.0393, 0.0106,  ..., 0.0115, 0.0088, 0.0055],
        [0.0283, 0.0490, 0.0084,  ..., 0.0128, 0.0069, 0.0034],
        [0.0372, 0.0403, 0.0087,  ..., 0.0102, 0.0067, 0.0032],
        ...,
        [0.0338, 0.0409, 0.0100,  ..., 0.0110, 0.0060, 0.0039],
        [0.0286, 0.0532, 0.0116,  ..., 0.0128, 0.0093, 0.0037],
        [0.0314, 0.0319, 0.0089,  ..., 0.0175, 0.0111, 0.0041]])