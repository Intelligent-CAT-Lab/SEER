17890
Test: public void testGetScopeRoot() { Compiler compiler = new Compiler(); NodeTraversal t = new NodeTraversal(compiler, new NodeTraversal.ScopedCallback() { @Override public void enterScope(NodeTraversal t) { Node root1 = t.getScopeRoot(); Node root2 = t.getScope().getRootNode(); } @Override public void exitScope(NodeTraversal t) { } @Override public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { return true; } @Override public void visit(NodeTraversal t, Node n, Node parent) { } } ); String code = "" + "var a; " + "function foo() {" + " var b" + "}"; Node tree = parse(compiler, code); t.traverse(tree); }
Code: public void visit(NodeTraversal t, Node node, Node parent) { if (node.getType() == Token.NAME) { String oldName = node.getString(); if (containsSeparator(oldName)) { Scope scope = t.getScope(); Var var = t.getScope().getVar(oldName); if (var == null || var.isGlobal()) { return; } if (nameMap.containsKey(var)) { node.setString(nameMap.get(var)); } else { int index = indexOfSeparator(oldName); String newName = getOrginalNameInternal(oldName, index); String suffix = getNameSuffix(oldName, index); boolean recurseScopes = false; if (!suffix.matches("\\d+")) { recurseScopes = true; } if (var.scope.isDeclared(newName, recurseScopes) || !TokenStream.isJSIdentifier(newName)) { newName = oldName; } else { var.scope.declare(newName, var.nameNode, null, null); Node parentNode = var.getParentNode(); if (parentNode.getType() == Token.FUNCTION && parentNode == var.scope.getRootNode()) { var.getNameNode().setString(newName); } node.setString(newName); compiler.reportCodeChange(); } nameMap.put(var, newName); } } } }
tensor([[0.0057, 0.0046, 0.0027,  ..., 0.0025, 0.0025, 0.0025],
        [0.0041, 0.0038, 0.0014,  ..., 0.0024, 0.0024, 0.0024],
        [0.0039, 0.0028, 0.0017,  ..., 0.0012, 0.0012, 0.0012],
        ...,
        [0.0040, 0.0037, 0.0022,  ..., 0.0022, 0.0022, 0.0022],
        [0.0040, 0.0037, 0.0022,  ..., 0.0022, 0.0022, 0.0022],
        [0.0040, 0.0037, 0.0022,  ..., 0.0022, 0.0022, 0.0022]])