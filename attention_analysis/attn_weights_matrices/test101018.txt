101018
Test: public void test0261() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0261"); org.joda.time.DateTimeField dateTimeField0 = null; org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean3 = iSOChronology1.equals((java.lang.Object) iSOChronology2); org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField6 = gJChronology5.yearOfCentury(); org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology5); org.joda.time.DurationField durationField8 = gJChronology5.eras(); org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology5); int[] intArray11 = iSOChronology2.get((org.joda.time.ReadablePartial) localDate9, (-1123200000L)); org.joda.time.LocalDate localDate13 = localDate9.minusDays(100); org.joda.time.DateTimeZone dateTimeZone14 = null; org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeUtils.getZone(dateTimeZone14); org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (short) -1); org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField19 = gJChronology18.yearOfCentury(); org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology18); int int21 = dateTime20.getEra(); int int22 = dateTime20.getYear(); boolean boolean23 = instant17.isBefore((org.joda.time.ReadableInstant) dateTime20); org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, (org.joda.time.ReadableInstant) instant17); java.lang.Object obj25 = null; boolean boolean26 = dateTimeZone15.equals(obj25); org.joda.time.DateTime dateTime27 = localDate9.toDateTimeAtCurrentTime(dateTimeZone15); org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstanceUTC(); int int30 = julianChronology28.getMillisOfDay((long) 682); org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now((org.joda.time.Chronology) julianChronology28); long long34 = julianChronology28.getYearDifference(0L, (long) (-28800000)); org.joda.time.DurationField durationField35 = julianChronology28.years(); org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.halfdays(); org.joda.time.field.DecoratedDurationField decoratedDurationField37 = new org.joda.time.field.DecoratedDurationField(durationField35, durationFieldType36); long long40 = decoratedDurationField37.getMillis((-1), 0L); org.joda.time.DurationField durationField41 = null; org.joda.time.DurationField durationField42 = null; try { org.joda.time.chrono.ZonedChronology.ZonedDateTimeField zonedDateTimeField43 = new org.joda.time.chrono.ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone15, (org.joda.time.DurationField) decoratedDurationField37, durationField41, durationField42); } catch (java.lang.NullPointerException e) { } }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0056, 0.0185, 0.0105,  ..., 0.0063, 0.0325, 0.0026],
        [0.0060, 0.0168, 0.0117,  ..., 0.0058, 0.0212, 0.0031],
        [0.0051, 0.0218, 0.0112,  ..., 0.0067, 0.0283, 0.0021],
        ...,
        [0.0036, 0.0181, 0.0115,  ..., 0.0050, 0.0325, 0.0021],
        [0.0049, 0.0181, 0.0114,  ..., 0.0058, 0.0284, 0.0024],
        [0.0041, 0.0173, 0.0128,  ..., 0.0090, 0.0216, 0.0023]])