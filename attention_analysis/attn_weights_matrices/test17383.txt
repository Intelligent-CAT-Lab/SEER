17383
Test: public void testPropertyReferenceGraph() { String constructor = "function Foo() {}"; String defA = "Foo.prototype.a = function() { Foo.superClass_.a.call(this); };"; String defB = "Foo.prototype.b = function() { this.a(); };"; String defC = "Foo.prototype.c = function() { " + "Foo.superClass_.c.call(this); this.b(); this.a(); };"; String defD = "Foo.prototype.d = function() { this.c(); };"; String defE = "Foo.prototype.e = function() { this.a(); this.f(); };"; String defF = "Foo.prototype.f = function() { };"; String fullClassDef = constructor + defA + defB + defC + defD + defE + defF; test(fullClassDef, ""); String callA = "(new Foo()).a();"; String callB = "(new Foo()).b();"; String callC = "(new Foo()).c();"; String callD = "(new Foo()).d();"; String callE = "(new Foo()).e();"; String callF = "(new Foo()).f();"; test(fullClassDef + callA, constructor + defA + callA); test(fullClassDef + callB, constructor + defA + defB + callB); test(fullClassDef + callC, constructor + defA + defB + defC + callC); test(fullClassDef + callD, constructor + defA + defB + defC + defD + callD); test(fullClassDef + callE, constructor + defA + defE + defF + callE); test(fullClassDef + callF, constructor + defF + callF); test(fullClassDef + callA + callC, constructor + defA + defB + defC + callA + callC); test(fullClassDef + callB + callC, constructor + defA + defB + defC + callB + callC); test(fullClassDef + callA + callB + callC, constructor + defA + defB + defC + callA + callB + callC); }
Code: public Void call() throws Exception { if (options.printInputDelimiter) { if ((cb.getLength() > 0) && !cb.endsWith("\n")) { cb.append("\n"); } Preconditions.checkState(root.getType() == Token.SCRIPT); String delimiter = options.inputDelimiter; String sourceName = (String)root.getProp(Node.SOURCENAME_PROP); Preconditions.checkState(sourceName != null); Preconditions.checkState(!sourceName.isEmpty()); delimiter = delimiter.replaceAll("%name%", sourceName) .replaceAll("%num%", String.valueOf(inputSeqNum)); cb.append(delimiter) .append("\n"); } if (root.getJSDocInfo() != null && root.getJSDocInfo().getLicense() != null) { cb.append("\n"); } if (options.sourceMapOutputPath != null) { sourceMap.setStartingPosition( cb.getLineIndex(), cb.getColumnIndex()); } String code = toSource(root, sourceMap, inputSeqNum == 0); if (!code.isEmpty()) { cb.append(code); int length = code.length(); char lastChar = code.charAt(length - 1); char secondLastChar = length >= 2 ? code.charAt(length - 2) : '\0'; boolean hasSemiColon = lastChar == ';' || (lastChar == '\n' && secondLastChar == ';'); if (!hasSemiColon) { cb.append(";"); } } return null; }
tensor([[0.0056, 0.0061, 0.0136,  ..., 0.0062, 0.0118, 0.0025],
        [0.0045, 0.0054, 0.0130,  ..., 0.0048, 0.0139, 0.0023],
        [0.0053, 0.0070, 0.0126,  ..., 0.0079, 0.0145, 0.0025],
        ...,
        [0.0036, 0.0053, 0.0142,  ..., 0.0052, 0.0128, 0.0020],
        [0.0053, 0.0057, 0.0128,  ..., 0.0066, 0.0104, 0.0026],
        [0.0040, 0.0074, 0.0123,  ..., 0.0085, 0.0137, 0.0021]])