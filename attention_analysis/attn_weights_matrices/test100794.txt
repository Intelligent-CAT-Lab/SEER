100794
Test: public void testDelegatedMethods() { DateTimeField fieldOne = UnsupportedDateTimeField.getInstance( dateTimeFieldTypeOne, UnsupportedDurationField .getInstance(weeks)); PreciseDurationField hoursDuration = new PreciseDurationField( DurationFieldType.hours(), 10L); DateTimeField fieldTwo = UnsupportedDateTimeField.getInstance( dateTimeFieldTypeOne, hoursDuration); try { fieldOne.add(System.currentTimeMillis(), 100); } catch (UnsupportedOperationException e) { } try { long currentTime = System.currentTimeMillis(); long firstComputation = hoursDuration.add(currentTime, 100); long secondComputation = fieldTwo.add(currentTime, 100); } catch (UnsupportedOperationException e) { } try { fieldOne.add(System.currentTimeMillis(), 1000L); } catch (UnsupportedOperationException e) { } try { long currentTime = System.currentTimeMillis(); long firstComputation = hoursDuration.add(currentTime, 1000L); long secondComputation = fieldTwo.add(currentTime, 1000L); } catch (UnsupportedOperationException e) { } try { fieldOne.getDifference(100000L, 1000L); } catch (UnsupportedOperationException e) { } try { int firstDifference = hoursDuration.getDifference(100000L, 1000L); int secondDifference = fieldTwo.getDifference(100000L, 1000L); } catch (UnsupportedOperationException e) { } try { fieldOne.getDifferenceAsLong(100000L, 1000L); } catch (UnsupportedOperationException e) { } try { long firstDifference = hoursDuration.getDifference(100000L, 1000L); long secondDifference = fieldTwo.getDifference(100000L, 1000L); } catch (UnsupportedOperationException e) { } }
Code: public long add(long instant, int value) { if (iTimeField) { int offset = getOffsetToAdd(instant); long localInstant = iField.add(instant + offset, value); return localInstant - offset; } else { long localInstant = iZone.convertUTCToLocal(instant); localInstant = iField.add(localInstant, value); return iZone.convertLocalToUTC(localInstant, false, instant); } }
tensor([[0.0182, 0.0293, 0.0226,  ..., 0.0210, 0.0084, 0.0084],
        [0.0128, 0.0254, 0.0317,  ..., 0.0209, 0.0079, 0.0079],
        [0.0148, 0.0241, 0.0230,  ..., 0.0216, 0.0058, 0.0058],
        ...,
        [0.0144, 0.0224, 0.0196,  ..., 0.0182, 0.0057, 0.0057],
        [0.0136, 0.0221, 0.0202,  ..., 0.0190, 0.0075, 0.0075],
        [0.0136, 0.0221, 0.0202,  ..., 0.0190, 0.0075, 0.0075]])