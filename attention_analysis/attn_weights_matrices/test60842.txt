60842
Test: public void testCSVFile() throws Exception { String line = readTestData(); final String[] split = line.split(" "); CSVFormat format = CSVFormat.newFormat(',').withQuoteChar('"'); boolean checkComments = false; for(int i=1; i < split.length; i++) { final String option = split[i]; final String[] option_parts = option.split("=",2); if ("IgnoreEmpty".equalsIgnoreCase(option_parts[0])){ format = format.withIgnoreEmptyLines(Boolean.parseBoolean(option_parts[1])); } else if ("IgnoreSpaces".equalsIgnoreCase(option_parts[0])) { format = format.withIgnoreSurroundingSpaces(Boolean.parseBoolean(option_parts[1])); } else if ("CommentStart".equalsIgnoreCase(option_parts[0])) { format = format.withCommentStart(option_parts[1].charAt(0)); } else if ("CheckComments".equalsIgnoreCase(option_parts[0])) { checkComments = true; } else { fail(testName+" unexpected option: "+option); } } line = readTestData(); final CSVParser parser = CSVParser.parse(new File(BASE, split[0]), format); for(final CSVRecord record : parser) { String parsed = record.toString(); if (checkComments) { final String comment = record.getComment().replace("\n", "\\n"); if (comment != null) { parsed += "#" + comment; } } final int count = record.size(); } parser.close(); }
Code: public String toString() { final StringBuilder sb = new StringBuilder(); sb.append("Delimiter=<").append(delimiter).append('>'); if (isEscaping()) { sb.append(' '); sb.append("Escape=<").append(escape).append('>'); } if (isQuoting()) { sb.append(' '); sb.append("QuoteChar=<").append(quoteChar).append('>'); } if (isCommentingEnabled()) { sb.append(' '); sb.append("CommentStart=<").append(commentStart).append('>'); } if (isNullHandling()) { sb.append(' '); sb.append("NullString=<").append(nullString).append('>'); } if(recordSeparator != null) { sb.append(' '); sb.append("RecordSeparator=<").append(recordSeparator).append('>'); } if (getIgnoreEmptyLines()) { sb.append(" EmptyLines:ignored"); } if (getIgnoreSurroundingSpaces()) { sb.append(" SurroundingSpaces:ignored"); } sb.append(" SkipHeaderRecord:").append(skipHeaderRecord); if (header != null) { sb.append(' '); sb.append("Header:").append(Arrays.toString(header)); } return sb.toString(); }
tensor([[0.0075, 0.0092, 0.0076,  ..., 0.0088, 0.0285, 0.0040],
        [0.0072, 0.0078, 0.0075,  ..., 0.0077, 0.0361, 0.0034],
        [0.0049, 0.0074, 0.0037,  ..., 0.0077, 0.0355, 0.0032],
        ...,
        [0.0049, 0.0070, 0.0036,  ..., 0.0065, 0.0380, 0.0034],
        [0.0052, 0.0086, 0.0053,  ..., 0.0090, 0.0329, 0.0033],
        [0.0050, 0.0091, 0.0084,  ..., 0.0120, 0.0327, 0.0034]])