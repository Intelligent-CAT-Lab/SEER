101499
Test: public void test218() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test218"); org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral characterLiteral1 = new org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral('a'); org.joda.time.format.DateTimeParserBucket dateTimeParserBucket2 = null; int int5 = characterLiteral1.parseInto(dateTimeParserBucket2, "126", 5); int int6 = characterLiteral1.estimateParsedLength(); java.lang.StringBuffer stringBuffer7 = null; org.joda.time.chrono.BuddhistChronology buddhistChronology8 = org.joda.time.chrono.BuddhistChronology.getInstance(); org.joda.time.DateTimeField dateTimeField9 = buddhistChronology8.monthOfYear(); org.joda.time.DateTimeField dateTimeField10 = buddhistChronology8.yearOfCentury(); org.joda.time.DateTimeField dateTimeField11 = buddhistChronology8.dayOfYear(); org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.minuteOfHour(); java.lang.String str15 = dateTimeField13.getAsText((long) 26); org.joda.time.field.SkipUndoDateTimeField skipUndoDateTimeField17 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology) buddhistChronology8, dateTimeField13, 2); long long19 = skipUndoDateTimeField17.roundHalfCeiling((long) 1); long long22 = skipUndoDateTimeField17.set((-378662400000L), (int) (short) 1); java.lang.String str23 = skipUndoDateTimeField17.getName(); boolean boolean24 = skipUndoDateTimeField17.isSupported(); org.joda.time.chrono.BuddhistChronology buddhistChronology25 = org.joda.time.chrono.BuddhistChronology.getInstance(); org.joda.time.DateTimeField dateTimeField26 = buddhistChronology25.monthOfYear(); org.joda.time.DateTimeField dateTimeField27 = buddhistChronology25.minuteOfHour(); org.joda.time.DateTimeField dateTimeField28 = buddhistChronology25.yearOfEra(); org.joda.time.DateTimeField dateTimeField29 = buddhistChronology25.dayOfYear(); org.joda.time.DateTimeField dateTimeField30 = buddhistChronology25.clockhourOfDay(); org.joda.time.chrono.BuddhistChronology buddhistChronology31 = org.joda.time.chrono.BuddhistChronology.getInstance(); org.joda.time.DateTimeField dateTimeField32 = buddhistChronology31.centuryOfEra(); org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfDay(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField37 = new org.joda.time.field.OffsetDateTimeField(dateTimeField32, dateTimeFieldType33, (int) (byte) 100, (int) (short) -1, (int) (short) -1); org.joda.time.DateTimeField dateTimeField38 = offsetDateTimeField37.getWrappedField(); long long41 = offsetDateTimeField37.getDifferenceAsLong((long) 0, (long) (byte) 10); long long43 = offsetDateTimeField37.roundHalfFloor((long) 1); org.joda.time.chrono.BuddhistChronology buddhistChronology44 = org.joda.time.chrono.BuddhistChronology.getInstance(); org.joda.time.DateTimeField dateTimeField45 = buddhistChronology44.monthOfYear(); org.joda.time.DateTimeField dateTimeField46 = buddhistChronology44.yearOfCentury(); org.joda.time.DateTimeField dateTimeField47 = buddhistChronology44.dayOfYear(); org.joda.time.chrono.ISOChronology iSOChronology48 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.DateTimeField dateTimeField49 = iSOChronology48.minuteOfHour(); java.lang.String str51 = dateTimeField49.getAsText((long) 26); org.joda.time.field.SkipUndoDateTimeField skipUndoDateTimeField53 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology) buddhistChronology44, dateTimeField49, 2); long long56 = skipUndoDateTimeField53.add((long) 9, 0); org.joda.time.chrono.BuddhistChronology buddhistChronology57 = org.joda.time.chrono.BuddhistChronology.getInstance(); org.joda.time.DateTimeField dateTimeField58 = buddhistChronology57.monthOfYear(); org.joda.time.DateTimeField dateTimeField59 = buddhistChronology57.yearOfCentury(); org.joda.time.DateTimeField dateTimeField60 = buddhistChronology57.clockhourOfHalfday(); org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(); org.joda.time.DateTime dateTime63 = dateTime61.minusDays(10); int int64 = dateTime61.getDayOfWeek(); org.joda.time.DateTime dateTime66 = dateTime61.plusYears((int) '4'); org.joda.time.TimeOfDay timeOfDay67 = dateTime66.toTimeOfDay(); long long69 = buddhistChronology57.set((org.joda.time.ReadablePartial) timeOfDay67, (long) 19); java.util.Locale locale71 = null; java.lang.String str72 = skipUndoDateTimeField53.getAsShortText((org.joda.time.ReadablePartial) timeOfDay67, 3, locale71); java.util.Locale locale74 = null; java.lang.String str75 = offsetDateTimeField37.getAsText((org.joda.time.ReadablePartial) timeOfDay67, (int) (short) 1, locale74); int[] intArray77 = buddhistChronology25.get((org.joda.time.ReadablePartial) timeOfDay67, 3600000L); int int78 = skipUndoDateTimeField17.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay67); java.util.Locale locale79 = null; try { characterLiteral1.printTo(stringBuffer7, (org.joda.time.ReadablePartial) timeOfDay67, locale79); } catch (java.lang.NullPointerException e) { } }
Code: public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException("Instant must not be null"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis * chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal)); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (false) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { ; } instant.setChronology(chrono); if (false) { instant.setZone(iZone); } return newPos; }
tensor([[0.0083, 0.0051, 0.0114,  ..., 0.0093, 0.0307, 0.0037],
        [0.0055, 0.0039, 0.0095,  ..., 0.0089, 0.0301, 0.0027],
        [0.0070, 0.0042, 0.0098,  ..., 0.0098, 0.0347, 0.0031],
        ...,
        [0.0053, 0.0030, 0.0104,  ..., 0.0076, 0.0357, 0.0030],
        [0.0063, 0.0034, 0.0083,  ..., 0.0080, 0.0356, 0.0020],
        [0.0060, 0.0045, 0.0112,  ..., 0.0131, 0.0223, 0.0033]])