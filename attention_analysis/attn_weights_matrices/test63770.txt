63770
Test: public void testNextFieldName() throws IOException { JsonFactory f = new JsonFactory(); SerializedString id = new SerializedString("id"); ByteArrayOutputStream os = new ByteArrayOutputStream(); os.write('{'); for (int i = 0; i < 3994; i++) { os.write(' '); } os.write("\"id\":2".getBytes("UTF-8")); os.write('}'); JsonParser parser = f.createParser(new ByteArrayInputStream(os.toByteArray())); parser.close(); }
Code: public boolean nextFieldName(SerializableString sstr) throws IOException { _numTypesValid = NR_UNKNOWN; if (_currToken == JsonToken.FIELD_NAME) { _nextAfterName(); return false; } if (_tokenIncomplete) { _skipString(); } int i = _skipWSOrEnd(); if (i < 0) { close(); _currToken = null; return false; } _binaryValue = null; if (i == INT_RBRACKET) { _updateLocation(); if (!_parsingContext.inArray()) { _reportMismatchedEndMarker(i, '}'); } _parsingContext = _parsingContext.getParent(); _currToken = JsonToken.END_ARRAY; return false; } if (i == INT_RCURLY) { _updateLocation(); if (!_parsingContext.inObject()) { _reportMismatchedEndMarker(i, ']'); } _parsingContext = _parsingContext.getParent(); _currToken = JsonToken.END_OBJECT; return false; } if (_parsingContext.expectComma()) { i = _skipComma(i); } _updateLocation(); if (!_parsingContext.inObject()) { _nextTokenNotInObject(i); return false; } if (i == INT_QUOTE) { char[] nameChars = sstr.asQuotedChars(); final int len = nameChars.length; if ((_inputPtr + len + 4) < _inputEnd) { final int end = _inputPtr+len; if (_inputBuffer[end] == '"') { int offset = 0; int ptr = _inputPtr; while (true) { if (ptr == end) { _parsingContext.setCurrentName(sstr.getValue()); _isNextTokenNameYes(_skipColonFast(ptr+1)); return true; } if (nameChars[offset] != _inputBuffer[ptr]) { break; } ++offset; ++ptr; } } } } return _isNextTokenNameMaybe(i, sstr.getValue()); }
tensor([[0.0048, 0.0121, 0.0020,  ..., 0.0105, 0.0043, 0.0020],
        [0.0037, 0.0227, 0.0014,  ..., 0.0140, 0.0044, 0.0014],
        [0.0035, 0.0183, 0.0018,  ..., 0.0074, 0.0055, 0.0016],
        ...,
        [0.0052, 0.0153, 0.0016,  ..., 0.0108, 0.0045, 0.0019],
        [0.0035, 0.0159, 0.0018,  ..., 0.0111, 0.0044, 0.0012],
        [0.0034, 0.0127, 0.0019,  ..., 0.0077, 0.0063, 0.0017]])