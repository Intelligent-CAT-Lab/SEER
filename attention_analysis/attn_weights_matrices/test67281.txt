67281
Test: public void testCustomLists() throws Exception { ObjectMapper mapper = new ObjectMapper(); SimpleModule module = new SimpleModule("test", Version.unknownVersion()); JsonSerializer<?> ser = new CollectionSerializer(null, false, null, null, null); final JsonSerializer<Object> collectionSerializer = (JsonSerializer<Object>) ser; module.addSerializer(Collection.class, new JsonSerializer<Collection>() { @Override public void serialize(Collection value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { if (value.size() != 0) { collectionSerializer.serialize(value, jgen, provider); } else { jgen.writeNull(); } } }); mapper.registerModule(module); }
Code: public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider){String str;if (value instanceof Date) {;return;} else {str = value.toString();};}
tensor([[0.0550, 0.0468, 0.1328, 0.0506, 0.0697, 0.0366, 0.1625, 0.0431, 0.0615,
         0.0485, 0.0270, 0.0285, 0.0491, 0.0678, 0.0501, 0.0358, 0.0347],
        [0.0436, 0.0441, 0.1237, 0.0335, 0.0518, 0.0246, 0.2459, 0.0403, 0.0708,
         0.0432, 0.0335, 0.0198, 0.0419, 0.0676, 0.0497, 0.0402, 0.0259],
        [0.0558, 0.0434, 0.1103, 0.0501, 0.0740, 0.0399, 0.1617, 0.0530, 0.0707,
         0.0524, 0.0332, 0.0348, 0.0456, 0.0706, 0.0416, 0.0305, 0.0323],
        [0.0364, 0.0324, 0.1686, 0.0393, 0.0574, 0.0267, 0.2288, 0.0381, 0.0650,
         0.0541, 0.0239, 0.0182, 0.0353, 0.0642, 0.0480, 0.0352, 0.0282],
        [0.0486, 0.0413, 0.1577, 0.0393, 0.0559, 0.0329, 0.1892, 0.0451, 0.0734,
         0.0416, 0.0287, 0.0247, 0.0427, 0.0744, 0.0422, 0.0364, 0.0260],
        [0.0467, 0.0426, 0.1471, 0.0405, 0.0587, 0.0316, 0.1990, 0.0439, 0.0689,
         0.0538, 0.0351, 0.0182, 0.0438, 0.0566, 0.0454, 0.0404, 0.0276],
        [0.0415, 0.0339, 0.1562, 0.0489, 0.0654, 0.0290, 0.1975, 0.0518, 0.0787,
         0.0444, 0.0282, 0.0185, 0.0398, 0.0683, 0.0367, 0.0388, 0.0225],
        [0.0442, 0.0406, 0.1455, 0.0385, 0.0610, 0.0281, 0.2042, 0.0399, 0.0783,
         0.0474, 0.0345, 0.0229, 0.0426, 0.0624, 0.0446, 0.0396, 0.0257],
        [0.0429, 0.0485, 0.1276, 0.0490, 0.0674, 0.0437, 0.1501, 0.0502, 0.0745,
         0.0485, 0.0338, 0.0281, 0.0564, 0.0598, 0.0498, 0.0377, 0.0320],
        [0.0461, 0.0393, 0.1639, 0.0370, 0.0611, 0.0401, 0.1598, 0.0421, 0.0663,
         0.0545, 0.0328, 0.0265, 0.0458, 0.0681, 0.0483, 0.0376, 0.0307],
        [0.0407, 0.0406, 0.1396, 0.0473, 0.0684, 0.0372, 0.1688, 0.0397, 0.0897,
         0.0540, 0.0290, 0.0246, 0.0321, 0.0853, 0.0458, 0.0333, 0.0240],
        [0.0397, 0.0358, 0.1621, 0.0417, 0.0565, 0.0247, 0.2171, 0.0472, 0.0642,
         0.0499, 0.0250, 0.0180, 0.0410, 0.0700, 0.0430, 0.0413, 0.0228],
        [0.0424, 0.0357, 0.1810, 0.0440, 0.0614, 0.0283, 0.1798, 0.0363, 0.0720,
         0.0471, 0.0278, 0.0270, 0.0434, 0.0653, 0.0418, 0.0350, 0.0317],
        [0.0449, 0.0360, 0.1481, 0.0402, 0.0658, 0.0336, 0.1932, 0.0447, 0.0720,
         0.0567, 0.0283, 0.0185, 0.0366, 0.0737, 0.0484, 0.0324, 0.0269],
        [0.0394, 0.0426, 0.1453, 0.0345, 0.0506, 0.0278, 0.2516, 0.0403, 0.0692,
         0.0508, 0.0284, 0.0229, 0.0398, 0.0511, 0.0447, 0.0379, 0.0232],
        [0.0565, 0.0479, 0.1076, 0.0512, 0.0682, 0.0427, 0.1320, 0.0615, 0.0639,
         0.0431, 0.0343, 0.0398, 0.0489, 0.0639, 0.0507, 0.0494, 0.0386],
        [0.0432, 0.0462, 0.1380, 0.0440, 0.0625, 0.0322, 0.2025, 0.0505, 0.0628,
         0.0478, 0.0275, 0.0230, 0.0480, 0.0585, 0.0438, 0.0419, 0.0275]])