17959
Test: public void test32() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test32"); com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.rhino.ScriptOrFnNode scriptOrFnNode4 = new com.google.javascript.rhino.ScriptOrFnNode(2, 10, (int) '4'); int int6 = scriptOrFnNode4.getIntProp(29); boolean boolean7 = com.google.javascript.jscomp.NodeUtil.isAssignmentOp((com.google.javascript.rhino.Node) scriptOrFnNode4); com.google.javascript.rhino.ScriptOrFnNode scriptOrFnNode11 = new com.google.javascript.rhino.ScriptOrFnNode(2, 10, (int) '4'); scriptOrFnNode11.removeProp(1); com.google.javascript.rhino.Node node14 = scriptOrFnNode11.cloneTree(); boolean boolean15 = com.google.javascript.jscomp.NodeUtil.isCallOrNew(node14); com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node14); int int18 = node16.getIntProp(39); boolean boolean19 = com.google.javascript.jscomp.NodeUtil.isObjectLitKey((com.google.javascript.rhino.Node) scriptOrFnNode4, node16); boolean boolean20 = node16.isVarArgs(); compiler0.externsRoot = node16; com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (short) 10); com.google.javascript.rhino.ScriptOrFnNode scriptOrFnNode28 = new com.google.javascript.rhino.ScriptOrFnNode(2, 10, (int) '4'); scriptOrFnNode28.removeProp(1); com.google.javascript.rhino.Node node31 = scriptOrFnNode28.cloneTree(); boolean boolean32 = com.google.javascript.jscomp.NodeUtil.isForIn((com.google.javascript.rhino.Node) scriptOrFnNode28); boolean boolean33 = com.google.javascript.jscomp.NodeUtil.isVar((com.google.javascript.rhino.Node) scriptOrFnNode28); com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(1, node24, (com.google.javascript.rhino.Node) scriptOrFnNode28); compiler0.externAndJsRoot = node34; com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior behavior36 = com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR; com.google.javascript.jscomp.ReferenceCollectingCallback referenceCollectingCallback37 = new com.google.javascript.jscomp.ReferenceCollectingCallback((com.google.javascript.jscomp.AbstractCompiler) compiler0, behavior36); com.google.javascript.jscomp.AbstractCompiler abstractCompiler38 = null; com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior behavior39 = null; com.google.javascript.jscomp.ReferenceCollectingCallback referenceCollectingCallback40 = new com.google.javascript.jscomp.ReferenceCollectingCallback(abstractCompiler38, behavior39); java.util.Set<com.google.javascript.jscomp.Scope.Var> varSet41 = referenceCollectingCallback40.getReferencedVariables(); com.google.javascript.jscomp.Scope.Var var42 = null; com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceCollection43 = referenceCollectingCallback40.getReferenceCollection(var42); com.google.javascript.jscomp.AbstractCompiler abstractCompiler44 = null; com.google.javascript.jscomp.Compiler compiler45 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.jscomp.PerformanceTracker performanceTracker46 = compiler45.tracker; com.google.javascript.jscomp.CheckGlobalThis checkGlobalThis47 = new com.google.javascript.jscomp.CheckGlobalThis((com.google.javascript.jscomp.AbstractCompiler) compiler45); com.google.javascript.jscomp.NodeTraversal nodeTraversal48 = new com.google.javascript.jscomp.NodeTraversal(abstractCompiler44, (com.google.javascript.jscomp.NodeTraversal.Callback) checkGlobalThis47); com.google.javascript.rhino.ErrorReporter errorReporter49 = null; com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter49); com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope51 = null; com.google.javascript.rhino.jstype.JSType jSType56 = jSTypeRegistry50.getType(jSTypeStaticScope51, "hi!", "hi!", 0, 1); java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable58 = jSTypeRegistry50.getEachReferenceTypeWithProperty(""); com.google.javascript.rhino.jstype.FunctionParamBuilder functionParamBuilder59 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(jSTypeRegistry50); com.google.javascript.rhino.Node node60 = functionParamBuilder59.build(); com.google.javascript.rhino.ScriptOrFnNode scriptOrFnNode65 = new com.google.javascript.rhino.ScriptOrFnNode(2, 10, (int) '4'); int int67 = scriptOrFnNode65.getIntProp(29); boolean boolean68 = com.google.javascript.jscomp.NodeUtil.isForIn((com.google.javascript.rhino.Node) scriptOrFnNode65); boolean boolean69 = com.google.javascript.jscomp.NodeUtil.isImmutableValue((com.google.javascript.rhino.Node) scriptOrFnNode65); com.google.javascript.rhino.ScriptOrFnNode scriptOrFnNode73 = new com.google.javascript.rhino.ScriptOrFnNode(2, 10, (int) '4'); scriptOrFnNode73.removeProp(1); com.google.javascript.rhino.Node node76 = scriptOrFnNode73.cloneTree(); boolean boolean77 = scriptOrFnNode65.isEquivalentToTyped((com.google.javascript.rhino.Node) scriptOrFnNode73); com.google.javascript.jscomp.CheckLevel checkLevel78 = null; com.google.javascript.jscomp.DiagnosticType diagnosticType79 = com.google.javascript.jscomp.ProcessDefines.UNKNOWN_DEFINE_WARNING; java.lang.String[] strArray80 = null; com.google.javascript.jscomp.JSError jSError81 = com.google.javascript.jscomp.JSError.make("com.google.javascript.rhino.EcmaError: LinkedGraph: hi! (hi!#100)", (com.google.javascript.rhino.Node) scriptOrFnNode65, checkLevel78, diagnosticType79, strArray80); int int82 = scriptOrFnNode65.getEncodedSourceEnd(); java.lang.String str83 = com.google.javascript.jscomp.NodeUtil.getSourceName((com.google.javascript.rhino.Node) scriptOrFnNode65); referenceCollectingCallback40.visit(nodeTraversal48, node60, (com.google.javascript.rhino.Node) scriptOrFnNode65); java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> varMap85 = null; behavior36.afterExitScope(nodeTraversal48, varMap85); }
Code: public void visit(NodeTraversal t, Node n, Node parent) { if (n.getType() == Token.NAME) { Var v; if (n.getString().equals("arguments")) { v = t.getScope().getArgumentsVar(); } else { v = t.getScope().getVar(n.getString()); } if (v != null && varFilter.apply(v)) { addReference(t, v, new Reference(n, parent, t, blockStack.peek())); } } if (isBlockBoundary(n, parent)) { blockStack.pop(); } }
tensor([[0.0124, 0.0101, 0.0059,  ..., 0.0255, 0.0055, 0.0055],
        [0.0094, 0.0086, 0.0033,  ..., 0.0272, 0.0055, 0.0055],
        [0.0093, 0.0067, 0.0040,  ..., 0.0207, 0.0030, 0.0030],
        ...,
        [0.0102, 0.0080, 0.0046,  ..., 0.0225, 0.0033, 0.0033],
        [0.0087, 0.0080, 0.0048,  ..., 0.0241, 0.0047, 0.0047],
        [0.0087, 0.0080, 0.0048,  ..., 0.0241, 0.0047, 0.0047]])