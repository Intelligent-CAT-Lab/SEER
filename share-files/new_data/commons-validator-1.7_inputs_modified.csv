,method,test
0,"    public boolean isProcessed() {
        return processed;
    }","  public void test0()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.addConstant("""", ""BwJXEH,7b2QX2{["");
      formSet0.addConstant("""", ""'B{-Qx"");
}"
1,"    public boolean isProcessed() {
        return processed;
    }","  public void test1()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setVariant(""31>a[5a>]"");
      formSet0.getVariant();
}"
2,"    public boolean isProcessed() {
        return processed;
    }","  public void test2()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setVariant("""");
      formSet0.getVariant();
}"
3,"    public boolean isProcessed() {
        return processed;
    }","  public void test3()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage(""yfzf?x*V]+h\""N:3s"");
      formSet0.getLanguage();
}"
4,"    public boolean isProcessed() {
        return processed;
    }","  public void test4()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage("""");
      formSet0.getLanguage();
}"
5,"    public boolean isProcessed() {
        return processed;
    }","  public void test5()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Form form0 = new Form();
      formSet0.addForm(form0);
}"
6,"    public boolean isProcessed() {
        return processed;
    }","  public void test6()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Form form0 = new Form();
      formSet0.addForm(form0);
      formSet0.process(hashMap0);
      formSet0.getForm((String) null);
}"
7,"    public Form getForm(String formName) {
        return this.forms.get(formName);
    }","  public void test7()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      Form form0 = new Form();
      form0.setExtends(""FormSet: language=null  country=lG09~Oi7VK   variant=lG09~Oi7VK \n"");
      form0.setName(""Sn;Wj<gV)V"");
      formSet0.addForm(form0);
      Form form1 = formSet0.getForm(""Sn;Wj<gV)V"");
}"
8,"    public boolean isProcessed() {
        return processed;
    }","  public void test8()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      Form form0 = new Form();
      form0.setExtends(""FormSet: language=null  country=lG09~Oi7VK   variant=lG09~Oi7VK \n"");
      form0.setName(""Sn;Wj<gV)V"");
      formSet0.addForm(form0);
      Form form1 = formSet0.getForm(""Sn;Wj<gV)V"");
}"
9,"    public boolean isProcessed() {
        return processed;
    }","  public void test9()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setCountry(""!f2.6T#5:t"");
      formSet0.getCountry();
}"
10,"    public boolean isProcessed() {
        return processed;
    }","  public void test10()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setCountry("""");
      formSet0.getCountry();
}"
11,"    public String toString() {
        StringBuilder results = new StringBuilder();

        results.append(""FormSet: language="");
        results.append(language);
        results.append(""  country="");
        results.append(country);
        results.append(""  variant="");
        results.append(variant);
        results.append(""\n"");

        for (Iterator<?> i = getForms().values().iterator(); i.hasNext(); ) {
            results.append(""   "");
            results.append(i.next());
            results.append(""\n"");
        }

        return results.toString();
    }","  public void test11()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      Form form0 = new Form();
      form0.lFields = null;
      formSet0.addForm(form0);
      // Undeclared exception!
      try { 
        formSet0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.Form"", e);
      }
  }"
12,"    synchronized void process(Map<String, String> globalConstants) {
        for (Iterator<Form> i = forms.values().iterator(); i.hasNext(); ) {
            Form f = i.next();
            f.process(globalConstants, constants, forms);
        }

        processed = true;
    }","  public void test12()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      Form form0 = new Form();
      form0.setName(""sUb"");
      form0.inherit = ""sUb"";
      formSet0.addForm(form0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        formSet0.process(hashMap0);
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
13,"    synchronized void process(Map<String, String> globalConstants) {
        for (Iterator<Form> i = forms.values().iterator(); i.hasNext(); ) {
            Form f = i.next();
            f.process(globalConstants, constants, forms);
        }

        processed = true;
    }","  public void test13()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      Form form0 = new Form();
      form0.lFields = null;
      formSet0.addForm(form0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        formSet0.process(hashMap0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
14,"    protected void merge(FormSet depends) {
        if (depends != null) {
            Map<String, Form> pForms = getForms();
            Map<String, Form> dForms = depends.getForms();
            for (Iterator<Entry<String, Form>> it = dForms.entrySet().iterator(); it.hasNext(); ) {
                Entry<String, Form> entry = it.next();
                String key = entry.getKey();
                Form pForm = pForms.get(key);
                if (pForm != null) {//merge, but principal 'rules', don't overwrite
                    // anything
                    pForm.merge(entry.getValue());
                }
                else {//just add
                    addForm(entry.getValue());
                }
            }
        }
        merged = true;
    }","  public void test14()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      Form form0 = new Form();
      formSet0.addForm(form0);
      Field field0 = new Field();
      form0.addField(field0);
      // Undeclared exception!
      try { 
        formSet0.merge(formSet0);
        fail(""Expecting exception: ConcurrentModificationException"");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.ArrayList$Itr"", e);
      }
  }"
15,"    protected void merge(FormSet depends) {
        if (depends != null) {
            Map<String, Form> pForms = getForms();
            Map<String, Form> dForms = depends.getForms();
            for (Iterator<Entry<String, Form>> it = dForms.entrySet().iterator(); it.hasNext(); ) {
                Entry<String, Form> entry = it.next();
                String key = entry.getKey();
                Form pForm = pForms.get(key);
                if (pForm != null) {//merge, but principal 'rules', don't overwrite
                    // anything
                    pForm.merge(entry.getValue());
                }
                else {//just add
                    addForm(entry.getValue());
                }
            }
        }
        merged = true;
    }","  public void test15()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      Form form0 = new Form();
      List<Field> list0 = form0.getFields();
      form0.lFields = list0;
      formSet0.addForm(form0);
      // Undeclared exception!
      try { 
        formSet0.merge(formSet0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableList"", e);
      }
  }"
16,"    protected void merge(FormSet depends) {
        if (depends != null) {
            Map<String, Form> pForms = getForms();
            Map<String, Form> dForms = depends.getForms();
            for (Iterator<Entry<String, Form>> it = dForms.entrySet().iterator(); it.hasNext(); ) {
                Entry<String, Form> entry = it.next();
                String key = entry.getKey();
                Form pForm = pForms.get(key);
                if (pForm != null) {//merge, but principal 'rules', don't overwrite
                    // anything
                    pForm.merge(entry.getValue());
                }
                else {//just add
                    addForm(entry.getValue());
                }
            }
        }
        merged = true;
    }","  public void test16()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      Form form0 = new Form();
      formSet0.addForm(form0);
      form0.lFields = null;
      // Undeclared exception!
      try { 
        formSet0.merge(formSet0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableCollection"", e);
      }
  }"
17,"    public void addForm(Form f) {

        String formName = f.getName();
        if (forms.containsKey(formName)) {
            getLog().error(""Form '"" + formName + ""' already exists in FormSet[""
                      + this.displayKey() + ""] - ignoring."");

        } else {
            forms.put(f.getName(), f);
        }

    }","  public void test17()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      // Undeclared exception!
      try { 
        formSet0.addForm((Form) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.FormSet"", e);
      }
  }"
18,"    public String displayKey() {
        StringBuilder results = new StringBuilder();
        if (language != null && language.length() > 0) {
            results.append(""language="");
            results.append(language);
        }
        if (country != null && country.length() > 0) {
            if (results.length() > 0) {
               results.append("", "");
            }
            results.append(""country="");
            results.append(country);
        }
        if (variant != null && variant.length() > 0) {
            if (results.length() > 0) {
               results.append("", "");
            }
            results.append(""variant="");
            results.append(variant );
        }
        if (results.length() == 0) {
           results.append(""default"");
        }

        return results.toString();
    }","  public void test18()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage(""se{'|T`Ia_^G"");
      formSet0.setCountry(""se{'|T`Ia_^G"");
      String string0 = formSet0.displayKey();
}"
19,"    public boolean isProcessed() {
        return processed;
    }","  public void test19()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage(""se{'|T`Ia_^G"");
      formSet0.setCountry(""se{'|T`Ia_^G"");
      String string0 = formSet0.displayKey();
}"
20,"    public String displayKey() {
        StringBuilder results = new StringBuilder();
        if (language != null && language.length() > 0) {
            results.append(""language="");
            results.append(language);
        }
        if (country != null && country.length() > 0) {
            if (results.length() > 0) {
               results.append("", "");
            }
            results.append(""country="");
            results.append(country);
        }
        if (variant != null && variant.length() > 0) {
            if (results.length() > 0) {
               results.append("", "");
            }
            results.append(""variant="");
            results.append(variant );
        }
        if (results.length() == 0) {
           results.append(""default"");
        }

        return results.toString();
    }","  public void test20()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setCountry(""Arg: name="");
      String string0 = formSet0.displayKey();
}"
21,"    public boolean isProcessed() {
        return processed;
    }","  public void test21()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setCountry(""Arg: name="");
      String string0 = formSet0.displayKey();
}"
22,"    public boolean isProcessed() {
        return processed;
    }","  public void test22()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.getCountry();
}"
23,"    public boolean isProcessed() {
        return processed;
    }","  public void test23()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.getVariant();
}"
24,"    public boolean isProcessed() {
        return processed;
    }","  public void test24()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.getLanguage();
}"
25,"    public boolean isProcessed() {
        return processed;
    }","  public void test25()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      Form form0 = new Form();
      formSet0.addForm(form0);
      String string0 = formSet0.toString();
}"
26,"    public String toString() {
        StringBuilder results = new StringBuilder();

        results.append(""FormSet: language="");
        results.append(language);
        results.append(""  country="");
        results.append(country);
        results.append(""  variant="");
        results.append(variant);
        results.append(""\n"");

        for (Iterator<?> i = getForms().values().iterator(); i.hasNext(); ) {
            results.append(""   "");
            results.append(i.next());
            results.append(""\n"");
        }

        return results.toString();
    }","  public void test26()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      Form form0 = new Form();
      formSet0.addForm(form0);
      String string0 = formSet0.toString();
}"
27,"    public boolean isProcessed() {
        return processed;
    }","  public void test27()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage(""Tg5TaeY0"");
      formSet0.setVariant(""Tg5TaeY0"");
      String string0 = formSet0.displayKey();
}"
28,"    public String displayKey() {
        StringBuilder results = new StringBuilder();
        if (language != null && language.length() > 0) {
            results.append(""language="");
            results.append(language);
        }
        if (country != null && country.length() > 0) {
            if (results.length() > 0) {
               results.append("", "");
            }
            results.append(""country="");
            results.append(country);
        }
        if (variant != null && variant.length() > 0) {
            if (results.length() > 0) {
               results.append("", "");
            }
            results.append(""variant="");
            results.append(variant );
        }
        if (results.length() == 0) {
           results.append(""default"");
        }

        return results.toString();
    }","  public void test28()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage(""Tg5TaeY0"");
      formSet0.setVariant(""Tg5TaeY0"");
      String string0 = formSet0.displayKey();
}"
29,"    public String displayKey() {
        StringBuilder results = new StringBuilder();
        if (language != null && language.length() > 0) {
            results.append(""language="");
            results.append(language);
        }
        if (country != null && country.length() > 0) {
            if (results.length() > 0) {
               results.append("", "");
            }
            results.append(""country="");
            results.append(country);
        }
        if (variant != null && variant.length() > 0) {
            if (results.length() > 0) {
               results.append("", "");
            }
            results.append(""variant="");
            results.append(variant );
        }
        if (results.length() == 0) {
           results.append(""default"");
        }

        return results.toString();
    }","  public void test29()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setVariant(""Tg5TaeY0"");
      String string0 = formSet0.displayKey();
}"
30,"    public boolean isProcessed() {
        return processed;
    }","  public void test30()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setVariant(""Tg5TaeY0"");
      String string0 = formSet0.displayKey();
}"
31,"    public boolean isProcessed() {
        return processed;
    }","  public void test31()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage("" u: "");
      Form form0 = new Form();
      formSet0.addForm(form0);
      formSet0.setCountry("" u: "");
      formSet0.addForm(form0);
}"
32,"    public String displayKey() {
        StringBuilder results = new StringBuilder();
        if (language != null && language.length() > 0) {
            results.append(""language="");
            results.append(language);
        }
        if (country != null && country.length() > 0) {
            if (results.length() > 0) {
               results.append("", "");
            }
            results.append(""country="");
            results.append(country);
        }
        if (variant != null && variant.length() > 0) {
            if (results.length() > 0) {
               results.append("", "");
            }
            results.append(""variant="");
            results.append(variant );
        }
        if (results.length() == 0) {
           results.append(""default"");
        }

        return results.toString();
    }","  public void test32()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setCountry("""");
      String string0 = formSet0.displayKey();
}"
33,"    public boolean isProcessed() {
        return processed;
    }","  public void test33()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setCountry("""");
      String string0 = formSet0.displayKey();
}"
34,"    public boolean isProcessed() {
        return processed;
    }","  public void test34()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage("""");
      String string0 = formSet0.displayKey();
}"
35,"    public String displayKey() {
        StringBuilder results = new StringBuilder();
        if (language != null && language.length() > 0) {
            results.append(""language="");
            results.append(language);
        }
        if (country != null && country.length() > 0) {
            if (results.length() > 0) {
               results.append("", "");
            }
            results.append(""country="");
            results.append(country);
        }
        if (variant != null && variant.length() > 0) {
            if (results.length() > 0) {
               results.append("", "");
            }
            results.append(""variant="");
            results.append(variant );
        }
        if (results.length() == 0) {
           results.append(""default"");
        }

        return results.toString();
    }","  public void test35()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage("""");
      String string0 = formSet0.displayKey();
}"
36,"    public boolean isProcessed() {
        return processed;
    }","  public void test36()  throws Throwable  {
      FormSet formSet0 = new FormSet();
}"
37,"    public boolean isProcessed() {
        return processed;
    }","  public void test37()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      formSet0.process(hashMap0);
      boolean boolean0 = formSet0.isProcessed();
}"
38,"    public boolean isProcessed() {
        return processed;
    }","  public void test38()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      FormSet formSet1 = new FormSet();
      Form form0 = new Form();
      formSet0.addForm(form0);
      formSet1.merge(formSet0);
}"
39,"    protected boolean isMerged() {
        return merged;
    }","  public void test39()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.merge((FormSet) null);
      boolean boolean0 = formSet0.isMerged();
}"
40,"    public boolean isProcessed() {
        return processed;
    }","  public void test40()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.merge((FormSet) null);
      boolean boolean0 = formSet0.isMerged();
}"
41,"    public boolean isProcessed() {
        return processed;
    }","  public void test41()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage("" u: "");
      int int0 = formSet0.getType();
}"
42,"    protected int getType() {
        if (getVariant() != null) {
            if (getLanguage() == null || getCountry() == null) {
                throw new NullPointerException(
                    ""When variant is specified, country and language must be specified."");
            }
            return VARIANT_FORMSET;
        }
        else if (getCountry() != null) {
            if (getLanguage() == null) {
                throw new NullPointerException(
                    ""When country is specified, language must be specified."");
            }
            return COUNTRY_FORMSET;
        }
        else if (getLanguage() != null) {
            return LANGUAGE_FORMSET;
        }
        else {
            return GLOBAL_FORMSET;
        }
    }","  public void test42()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage("" u: "");
      int int0 = formSet0.getType();
}"
43,"    protected int getType() {
        if (getVariant() != null) {
            if (getLanguage() == null || getCountry() == null) {
                throw new NullPointerException(
                    ""When variant is specified, country and language must be specified."");
            }
            return VARIANT_FORMSET;
        }
        else if (getCountry() != null) {
            if (getLanguage() == null) {
                throw new NullPointerException(
                    ""When country is specified, language must be specified."");
            }
            return COUNTRY_FORMSET;
        }
        else if (getLanguage() != null) {
            return LANGUAGE_FORMSET;
        }
        else {
            return GLOBAL_FORMSET;
        }
    }","  public void test43()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage("" u: "");
      formSet0.setCountry("" u: "");
      int int0 = formSet0.getType();
}"
44,"    public boolean isProcessed() {
        return processed;
    }","  public void test44()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage("" u: "");
      formSet0.setCountry("" u: "");
      int int0 = formSet0.getType();
}"
45,"    protected int getType() {
        if (getVariant() != null) {
            if (getLanguage() == null || getCountry() == null) {
                throw new NullPointerException(
                    ""When variant is specified, country and language must be specified."");
            }
            return VARIANT_FORMSET;
        }
        else if (getCountry() != null) {
            if (getLanguage() == null) {
                throw new NullPointerException(
                    ""When country is specified, language must be specified."");
            }
            return COUNTRY_FORMSET;
        }
        else if (getLanguage() != null) {
            return LANGUAGE_FORMSET;
        }
        else {
            return GLOBAL_FORMSET;
        }
    }","  public void test45()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage(""Vc\""E[q(2OQCxwQU&'nxV"");
      formSet0.setVariant(""Vc\""E[q(2OQCxwQU&'nxV"");
      formSet0.setCountry("""");
      int int0 = formSet0.getType();
}"
46,"    public boolean isProcessed() {
        return processed;
    }","  public void test46()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage(""Vc\""E[q(2OQCxwQU&'nxV"");
      formSet0.setVariant(""Vc\""E[q(2OQCxwQU&'nxV"");
      formSet0.setCountry("""");
      int int0 = formSet0.getType();
}"
47,"    protected int getType() {
        if (getVariant() != null) {
            if (getLanguage() == null || getCountry() == null) {
                throw new NullPointerException(
                    ""When variant is specified, country and language must be specified."");
            }
            return VARIANT_FORMSET;
        }
        else if (getCountry() != null) {
            if (getLanguage() == null) {
                throw new NullPointerException(
                    ""When country is specified, language must be specified."");
            }
            return COUNTRY_FORMSET;
        }
        else if (getLanguage() != null) {
            return LANGUAGE_FORMSET;
        }
        else {
            return GLOBAL_FORMSET;
        }
    }","  public void test47()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setVariant("" u: "");
      // Undeclared exception!
      try { 
        formSet0.getType();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // When variant is specified, country and language must be specified.
         //
         verifyException(""org.apache.commons.validator.FormSet"", e);
      }
  }"
48,"    protected int getType() {
        if (getVariant() != null) {
            if (getLanguage() == null || getCountry() == null) {
                throw new NullPointerException(
                    ""When variant is specified, country and language must be specified."");
            }
            return VARIANT_FORMSET;
        }
        else if (getCountry() != null) {
            if (getLanguage() == null) {
                throw new NullPointerException(
                    ""When country is specified, language must be specified."");
            }
            return COUNTRY_FORMSET;
        }
        else if (getLanguage() != null) {
            return LANGUAGE_FORMSET;
        }
        else {
            return GLOBAL_FORMSET;
        }
    }","  public void test48()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setCountry("" u: "");
      // Undeclared exception!
      try { 
        formSet0.getType();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // When country is specified, language must be specified.
         //
         verifyException(""org.apache.commons.validator.FormSet"", e);
      }
  }"
49,"    public boolean isProcessed() {
        return processed;
    }","  public void test49()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      boolean boolean0 = formSet0.isProcessed();
}"
50,"    protected int getType() {
        if (getVariant() != null) {
            if (getLanguage() == null || getCountry() == null) {
                throw new NullPointerException(
                    ""When variant is specified, country and language must be specified."");
            }
            return VARIANT_FORMSET;
        }
        else if (getCountry() != null) {
            if (getLanguage() == null) {
                throw new NullPointerException(
                    ""When country is specified, language must be specified."");
            }
            return COUNTRY_FORMSET;
        }
        else if (getLanguage() != null) {
            return LANGUAGE_FORMSET;
        }
        else {
            return GLOBAL_FORMSET;
        }
    }","  public void test50()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage("" u: "");
      formSet0.setVariant("" u: "");
      // Undeclared exception!
      try { 
        formSet0.getType();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // When variant is specified, country and language must be specified.
         //
         verifyException(""org.apache.commons.validator.FormSet"", e);
      }
  }"
51,"    public boolean isProcessed() {
        return processed;
    }","  public void test51()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.isMerged();
}"
52,"    public boolean isProcessed() {
        return processed;
    }","  public void test52()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.getForm("" u: "");
}"
53,"    protected int getType() {
        if (getVariant() != null) {
            if (getLanguage() == null || getCountry() == null) {
                throw new NullPointerException(
                    ""When variant is specified, country and language must be specified."");
            }
            return VARIANT_FORMSET;
        }
        else if (getCountry() != null) {
            if (getLanguage() == null) {
                throw new NullPointerException(
                    ""When country is specified, language must be specified."");
            }
            return COUNTRY_FORMSET;
        }
        else if (getLanguage() != null) {
            return LANGUAGE_FORMSET;
        }
        else {
            return GLOBAL_FORMSET;
        }
    }","  public void test53()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      int int0 = formSet0.getType();
}"
54,"    public boolean isProcessed() {
        return processed;
    }","  public void test54()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      int int0 = formSet0.getType();
}"
55,"    public boolean isProcessed() {
        return processed;
    }","  public void test55()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.getForms();
}"
56,"    public String displayKey() {
        StringBuilder results = new StringBuilder();
        if (language != null && language.length() > 0) {
            results.append(""language="");
            results.append(language);
        }
        if (country != null && country.length() > 0) {
            if (results.length() > 0) {
               results.append("", "");
            }
            results.append(""country="");
            results.append(country);
        }
        if (variant != null && variant.length() > 0) {
            if (results.length() > 0) {
               results.append("", "");
            }
            results.append(""variant="");
            results.append(variant );
        }
        if (results.length() == 0) {
           results.append(""default"");
        }

        return results.toString();
    }","  public void test56()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setVariant("""");
      String string0 = formSet0.displayKey();
}"
57,"    public boolean isProcessed() {
        return processed;
    }","  public void test57()  throws Throwable  {
      FormSet formSet0 = new FormSet();
      formSet0.setVariant("""");
      String string0 = formSet0.displayKey();
}"
58,"    public static boolean maxValue(int value, int max) {
        return (value <= max);
    }","  public void test0()  throws Throwable  {
      boolean boolean0 = GenericValidator.maxValue((-4220.9434F), (-4220.9434F));
}"
59,"    public static boolean maxValue(int value, int max) {
        return (value <= max);
    }","  public void test1()  throws Throwable  {
      boolean boolean0 = GenericValidator.maxValue(1.0, 567.50265444);
}"
60,"    public static boolean maxValue(int value, int max) {
        return (value <= max);
    }","  public void test2()  throws Throwable  {
      boolean boolean0 = GenericValidator.maxValue((-1627L), (long) (byte) (-70));
}"
61,"    public static boolean maxValue(int value, int max) {
        return (value <= max);
    }","  public void test3()  throws Throwable  {
      boolean boolean0 = GenericValidator.maxValue((-1653), 0);
}"
62,"    public static boolean minValue(int value, int min) {
        return (value >= min);
    }","  public void test4()  throws Throwable  {
      boolean boolean0 = GenericValidator.minValue(2660.15F, 0.0F);
}"
63,"    public static boolean minValue(int value, int min) {
        return (value >= min);
    }","  public void test5()  throws Throwable  {
      boolean boolean0 = GenericValidator.minValue((double) 0, (double) (-62));
}"
64,"    public static boolean minValue(int value, int min) {
        return (value >= min);
    }","  public void test6()  throws Throwable  {
      boolean boolean0 = GenericValidator.minValue(0L, (-560L));
}"
65,"    public static boolean minValue(int value, int min) {
        return (value >= min);
    }","  public void test7()  throws Throwable  {
      boolean boolean0 = GenericValidator.minValue(13, (-1986));
}"
66,"    public static boolean minLength(String value, int min) {
        return (value.length() >= min);
    }","  public void test8()  throws Throwable  {
      boolean boolean0 = GenericValidator.minLength("""", 0, 13);
}"
67,"    public static boolean minLength(String value, int min) {
        return (value.length() >= min);
    }","  public void test9()  throws Throwable  {
      boolean boolean0 = GenericValidator.minLength("""", 0);
}"
68,"    public static boolean maxLength(String value, int max) {
        return (value.length() <= max);
    }","  public void test10()  throws Throwable  {
      boolean boolean0 = GenericValidator.maxLength("""", 0, 0);
}"
69,"    public static boolean maxLength(String value, int max) {
        return (value.length() <= max);
    }","  public void test11()  throws Throwable  {
      boolean boolean0 = GenericValidator.maxLength("""", 0);
}"
70,"    public static boolean isInRange(byte value, byte min, byte max) {
        return ((value >= min) && (value <= max));
    }","  public void test12()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInRange((-1673.37518), (double) (-4228.0F), (double) (-572));
}"
71,"    public static boolean isInRange(byte value, byte min, byte max) {
        return ((value >= min) && (value <= max));
    }","  public void test13()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInRange(64L, 64L, 2629L);
}"
72,"    public static boolean isInRange(byte value, byte min, byte max) {
        return ((value >= min) && (value <= max));
    }","  public void test14()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInRange((short) (-1738), (short) (-1738), (short)807);
}"
73,"    public static boolean isInRange(byte value, byte min, byte max) {
        return ((value >= min) && (value <= max));
    }","  public void test15()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInRange((short)848, (short) (-1676), (short) (-3153));
}"
74,"    public static boolean isInRange(byte value, byte min, byte max) {
        return ((value >= min) && (value <= max));
    }","  public void test16()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInRange((-1.0F), (-1.0F), 0.0F);
}"
75,"    public static boolean isInRange(byte value, byte min, byte max) {
        return ((value >= min) && (value <= max));
    }","  public void test17()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInRange((-1072), (-1072), 0);
}"
76,"    public static boolean isInRange(byte value, byte min, byte max) {
        return ((value >= min) && (value <= max));
    }","  public void test18()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInRange(1234, 144, 1234);
}"
77,"    public static boolean isInRange(byte value, byte min, byte max) {
        return ((value >= min) && (value <= max));
    }","  public void test19()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInRange((byte)63, (byte)0, (byte)90);
}"
78,"    public static boolean matchRegexp(String value, String regexp) {
        if (regexp == null || regexp.length() <= 0) {
            return false;
        }

        return Pattern.matches(regexp, value);
    }","  public void test20()  throws Throwable  {
      boolean boolean0 = GenericValidator.matchRegexp(""_W81BCZJ"", ""_W81BCZJ"");
}"
79,"    public static boolean isDate(String value, Locale locale) {
        return DateValidator.getInstance().isValid(value, locale);
    }","  public void test21()  throws Throwable  {
      boolean boolean0 = GenericValidator.isDate(""|"", ""|"", true);
}"
80,"    public static boolean isDate(String value, Locale locale) {
        return DateValidator.getInstance().isValid(value, locale);
    }","  public void test22()  throws Throwable  {
      boolean boolean0 = GenericValidator.isDate("""", """", false);
}"
81,"    public static boolean minLength(String value, int min) {
        return (value.length() >= min);
    }","  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        GenericValidator.minLength((String) null, (-105), (-779));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.GenericValidator"", e);
      }
  }"
82,"    public static boolean minLength(String value, int min) {
        return (value.length() >= min);
    }","  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        GenericValidator.minLength((String) null, 633);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.GenericValidator"", e);
      }
  }"
83,"    public static boolean maxLength(String value, int max) {
        return (value.length() <= max);
    }","  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        GenericValidator.maxLength((String) null, (-3704), 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.GenericValidator"", e);
      }
  }"
84,"    public static boolean maxLength(String value, int max) {
        return (value.length() <= max);
    }","  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        GenericValidator.maxLength((String) null, 10);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.GenericValidator"", e);
      }
  }"
85,"    public static boolean matchRegexp(String value, String regexp) {
        if (regexp == null || regexp.length() <= 0) {
            return false;
        }

        return Pattern.matches(regexp, value);
    }","  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        GenericValidator.matchRegexp(""p)fc+{0l/p"", ""p)fc+{0l/p"");
        fail(""Expecting exception: PatternSyntaxException"");
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 0
         // p)fc+{0l/p
         // ^
         //
         verifyException(""java.util.regex.Pattern"", e);
      }
  }"
86,"    public static boolean maxValue(int value, int max) {
        return (value <= max);
    }","  public void test28()  throws Throwable  {
      boolean boolean0 = GenericValidator.maxValue((-1434.321F), 0.0F);
}"
87,"    public static boolean maxValue(int value, int max) {
        return (value <= max);
    }","  public void test29()  throws Throwable  {
      boolean boolean0 = GenericValidator.maxValue((float) 1755L, (float) 43L);
}"
88,"    public static boolean maxValue(int value, int max) {
        return (value <= max);
    }","  public void test30()  throws Throwable  {
      boolean boolean0 = GenericValidator.maxValue((double) 1782, (double) 1782);
}"
89,"    public static boolean maxValue(int value, int max) {
        return (value <= max);
    }","  public void test31()  throws Throwable  {
      boolean boolean0 = GenericValidator.maxValue(1135.9402826498042, 1.0);
}"
90,"    public static boolean maxValue(int value, int max) {
        return (value <= max);
    }","  public void test32()  throws Throwable  {
      boolean boolean0 = GenericValidator.maxValue((long) 1782, (long) 1782);
}"
91,"    public static boolean maxValue(int value, int max) {
        return (value <= max);
    }","  public void test33()  throws Throwable  {
      boolean boolean0 = GenericValidator.maxValue(43L, (long) (-2372));
}"
92,"    public static boolean maxValue(int value, int max) {
        return (value <= max);
    }","  public void test34()  throws Throwable  {
      boolean boolean0 = GenericValidator.maxValue(0, 0);
}"
93,"    public static boolean maxValue(int value, int max) {
        return (value <= max);
    }","  public void test35()  throws Throwable  {
      boolean boolean0 = GenericValidator.maxValue((-29), (-1804));
}"
94,"    public static boolean minValue(int value, int min) {
        return (value >= min);
    }","  public void test36()  throws Throwable  {
      boolean boolean0 = GenericValidator.minValue((float) 3013, (float) 3013);
}"
95,"    public static boolean minValue(int value, int min) {
        return (value >= min);
    }","  public void test37()  throws Throwable  {
      boolean boolean0 = GenericValidator.minValue((-1434.321F), 0.0F);
}"
96,"    public static boolean minValue(int value, int min) {
        return (value >= min);
    }","  public void test38()  throws Throwable  {
      boolean boolean0 = GenericValidator.minValue((double) (short)184, (double) (short)184);
}"
97,"    public static boolean minValue(int value, int min) {
        return (value >= min);
    }","  public void test39()  throws Throwable  {
      boolean boolean0 = GenericValidator.minValue((double) (-1804), (double) (-29));
}"
98,"    public static boolean minValue(int value, int min) {
        return (value >= min);
    }","  public void test40()  throws Throwable  {
      boolean boolean0 = GenericValidator.minValue((long) (short)184, (long) (short)184);
}"
99,"    public static boolean minValue(int value, int min) {
        return (value >= min);
    }","  public void test41()  throws Throwable  {
      boolean boolean0 = GenericValidator.minValue(35L, (long) 989);
}"
100,"    public static boolean minValue(int value, int min) {
        return (value >= min);
    }","  public void test42()  throws Throwable  {
      boolean boolean0 = GenericValidator.minValue(10, 10);
}"
101,"    public static boolean minValue(int value, int min) {
        return (value >= min);
    }","  public void test43()  throws Throwable  {
      boolean boolean0 = GenericValidator.minValue((-1804), (-29));
}"
102,"    public static boolean minLength(String value, int min) {
        return (value.length() >= min);
    }","  public void test44()  throws Throwable  {
      boolean boolean0 = GenericValidator.minLength(""h=Hi\u0000jeZB"", 0, 614);
}"
103,"    public static boolean minLength(String value, int min) {
        return (value.length() >= min);
    }","  public void test45()  throws Throwable  {
      boolean boolean0 = GenericValidator.minLength(""$VALUES"", 989, 989);
}"
104,"    public static boolean minLength(String value, int min) {
        return (value.length() >= min);
    }","  public void test46()  throws Throwable  {
      boolean boolean0 = GenericValidator.minLength(""cate(ZF"", (-1804));
}"
105,"    public static boolean minLength(String value, int min) {
        return (value.length() >= min);
    }","  public void test47()  throws Throwable  {
      boolean boolean0 = GenericValidator.minLength(""$VALUES"", (int) (short)1824);
}"
106,"    public static boolean maxLength(String value, int max) {
        return (value.length() <= max);
    }","  public void test48()  throws Throwable  {
      boolean boolean0 = GenericValidator.maxLength(""I&nd_Sl]("", 1404, 0);
}"
107,"    public static boolean maxLength(String value, int max) {
        return (value.length() <= max);
    }","  public void test49()  throws Throwable  {
      boolean boolean0 = GenericValidator.maxLength(""cate(ZF"", (-1804), (-1804));
}"
108,"    public static boolean maxLength(String value, int max) {
        return (value.length() <= max);
    }","  public void test50()  throws Throwable  {
      boolean boolean0 = GenericValidator.maxLength(""vokswa"", 614);
}"
109,"    public static boolean maxLength(String value, int max) {
        return (value.length() <= max);
    }","  public void test51()  throws Throwable  {
      boolean boolean0 = GenericValidator.maxLength(""fu<itsu"", (-2372));
}"
110,"    public static boolean isInRange(byte value, byte min, byte max) {
        return ((value >= min) && (value <= max));
    }","  public void test52()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInRange((double) (byte)124, (double) (-29), (double) (-1804));
}"
111,"    public static boolean isInRange(byte value, byte min, byte max) {
        return ((value >= min) && (value <= max));
    }","  public void test53()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInRange((double) (byte)91, (double) (byte)91, (double) (byte)91);
}"
112,"    public static boolean isInRange(byte value, byte min, byte max) {
        return ((value >= min) && (value <= max));
    }","  public void test54()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInRange((double) 35L, (double) (short)1824, (double) (short)1824);
}"
113,"    public static boolean isInRange(byte value, byte min, byte max) {
        return ((value >= min) && (value <= max));
    }","  public void test55()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInRange(0L, (-326L), 0L);
}"
114,"    public static boolean isInRange(byte value, byte min, byte max) {
        return ((value >= min) && (value <= max));
    }","  public void test56()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInRange((long) 1782, (long) 1782, 19L);
}"
115,"    public static boolean isInRange(byte value, byte min, byte max) {
        return ((value >= min) && (value <= max));
    }","  public void test57()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInRange((-803L), 1L, 1417L);
}"
116,"    public static boolean isInRange(byte value, byte min, byte max) {
        return ((value >= min) && (value <= max));
    }","  public void test58()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInRange((short)184, (short)184, (short)184);
}"
117,"    public static boolean isInRange(byte value, byte min, byte max) {
        return ((value >= min) && (value <= max));
    }","  public void test59()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInRange((short)0, (short)1011, (short)0);
}"
118,"    public static boolean isInRange(byte value, byte min, byte max) {
        return ((value >= min) && (value <= max));
    }","  public void test60()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInRange((float) 614, (-4220.9434F), (-4220.9434F));
}"
119,"    public static boolean isInRange(byte value, byte min, byte max) {
        return ((value >= min) && (value <= max));
    }","  public void test61()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInRange((float) (byte)0, 0.0F, (float) (byte)0);
}"
120,"    public static boolean isInRange(byte value, byte min, byte max) {
        return ((value >= min) && (value <= max));
    }","  public void test62()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInRange((-461.6646F), 0.0F, 1831.76F);
}"
121,"    public static boolean isInRange(byte value, byte min, byte max) {
        return ((value >= min) && (value <= max));
    }","  public void test63()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInRange(614, 614, 0);
}"
122,"    public static boolean isInRange(byte value, byte min, byte max) {
        return ((value >= min) && (value <= max));
    }","  public void test64()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInRange((-1804), (-29), (-29));
}"
123,"    public static boolean isInRange(byte value, byte min, byte max) {
        return ((value >= min) && (value <= max));
    }","  public void test65()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInRange((byte)0, (byte)0, (byte)0);
}"
124,"    public static boolean isInRange(byte value, byte min, byte max) {
        return ((value >= min) && (value <= max));
    }","  public void test66()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInRange((byte)53, (byte)42, (byte)0);
}"
125,"    public static boolean isInRange(byte value, byte min, byte max) {
        return ((value >= min) && (value <= max));
    }","  public void test67()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInRange((byte)91, (byte)124, (byte) (-15));
}"
126,"    public static boolean isDouble(String value) {
        return (GenericTypeValidator.formatDouble(value) != null);
    }","  public void test68()  throws Throwable  {
      boolean boolean0 = GenericValidator.isDouble(""0"");
}"
127,"    public static boolean isDouble(String value) {
        return (GenericTypeValidator.formatDouble(value) != null);
    }","  public void test69()  throws Throwable  {
      boolean boolean0 = GenericValidator.isDouble(""I&nd_Sl]("");
}"
128,"    public static boolean isFloat(String value) {
        return (GenericTypeValidator.formatFloat(value) != null);
    }","  public void test70()  throws Throwable  {
      boolean boolean0 = GenericValidator.isFloat(""0"");
}"
129,"    public static boolean isFloat(String value) {
        return (GenericTypeValidator.formatFloat(value) != null);
    }","  public void test71()  throws Throwable  {
      boolean boolean0 = GenericValidator.isFloat(""*o>"");
}"
130,"    public static boolean isLong(String value) {
        return (GenericTypeValidator.formatLong(value) != null);
    }","  public void test72()  throws Throwable  {
      boolean boolean0 = GenericValidator.isLong(""0"");
}"
131,"    public static boolean isLong(String value) {
        return (GenericTypeValidator.formatLong(value) != null);
    }","  public void test73()  throws Throwable  {
      boolean boolean0 = GenericValidator.isLong(""cate(ZF"");
}"
132,"    public static boolean isInt(String value) {
        return (GenericTypeValidator.formatInt(value) != null);
    }","  public void test74()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInt(""0"");
}"
133,"    public static boolean isInt(String value) {
        return (GenericTypeValidator.formatInt(value) != null);
    }","  public void test75()  throws Throwable  {
      boolean boolean0 = GenericValidator.isInt((String) null);
}"
134,"    public static boolean isShort(String value) {
        return (GenericTypeValidator.formatShort(value) != null);
    }","  public void test76()  throws Throwable  {
      boolean boolean0 = GenericValidator.isShort(""0"");
}"
135,"    public static boolean isShort(String value) {
        return (GenericTypeValidator.formatShort(value) != null);
    }","  public void test77()  throws Throwable  {
      boolean boolean0 = GenericValidator.isShort(""s"");
}"
136,"    public static boolean isByte(String value) {
        return (GenericTypeValidator.formatByte(value) != null);
    }","  public void test78()  throws Throwable  {
      boolean boolean0 = GenericValidator.isByte(""0"");
}"
137,"    public static boolean isByte(String value) {
        return (GenericTypeValidator.formatByte(value) != null);
    }","  public void test79()  throws Throwable  {
      boolean boolean0 = GenericValidator.isByte((String) null);
}"
138,"    public static boolean matchRegexp(String value, String regexp) {
        if (regexp == null || regexp.length() <= 0) {
            return false;
        }

        return Pattern.matches(regexp, value);
    }","  public void test80()  throws Throwable  {
      boolean boolean0 = GenericValidator.matchRegexp("""", """");
}"
139,"    public static boolean matchRegexp(String value, String regexp) {
        if (regexp == null || regexp.length() <= 0) {
            return false;
        }

        return Pattern.matches(regexp, value);
    }","  public void test81()  throws Throwable  {
      boolean boolean0 = GenericValidator.matchRegexp(""$VALUES"", (String) null);
}"
140,"    public static boolean isBlankOrNull(String value) {
        return ((value == null) || (value.trim().length() == 0));
    }","  public void test82()  throws Throwable  {
      boolean boolean0 = GenericValidator.isBlankOrNull("""");
}"
141,"    public static boolean isBlankOrNull(String value) {
        return ((value == null) || (value.trim().length() == 0));
    }","  public void test83()  throws Throwable  {
      boolean boolean0 = GenericValidator.isBlankOrNull(""PP+#X]v=KfrQ\"""");
}"
142,"    public static boolean isBlankOrNull(String value) {
        return ((value == null) || (value.trim().length() == 0));
    }","  public void test84()  throws Throwable  {
      boolean boolean0 = GenericValidator.isBlankOrNull((String) null);
}"
143,"    public static boolean isUrl(String value) {
        return URL_VALIDATOR.isValid(value);
    }","  public void test85()  throws Throwable  {
      boolean boolean0 = GenericValidator.isUrl((String) null);
}"
144,"    public static boolean isDate(String value, Locale locale) {
        return DateValidator.getInstance().isValid(value, locale);
    }","  public void test86()  throws Throwable  {
      // Undeclared exception!
      try { 
        GenericValidator.isDate(""8z*\""Jj9A"", ""dIKX);'pr"", true);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'I'
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
145,,"  public void test87()  throws Throwable  {
      GenericValidator genericValidator0 = new GenericValidator();
  }"
146,"    public static boolean isEmail(String value) {
        return EmailValidator.getInstance().isValid(value);
    }","  public void test88()  throws Throwable  {
      boolean boolean0 = GenericValidator.isEmail(""{~%YT)<f]!]-35"");
}"
147,"    public static boolean isDate(String value, Locale locale) {
        return DateValidator.getInstance().isValid(value, locale);
    }","  public void test89()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      boolean boolean0 = GenericValidator.isDate((String) null, locale0);
}"
148,"    public static boolean isCreditCard(String value) {
        return CREDIT_CARD_VALIDATOR.isValid(value);
    }","  public void test90()  throws Throwable  {
      boolean boolean0 = GenericValidator.isCreditCard(""3]Di@PtA.;Zc$o~h2ZN"");
}"
149,"    public String toString() {
        StringBuilder results = new StringBuilder();

        results.append(""Msg: name="");
        results.append(name);
        results.append(""  key="");
        results.append(key);
        results.append(""  resource="");
        results.append(resource);
        results.append(""  bundle="");
        results.append(bundle);
        results.append(""\n"");

        return results.toString();
    }","  public void test0()  throws Throwable  {
      Msg msg0 = new Msg();
      msg0.setKey(""?o<;&:RXp\"""");
      String string0 = msg0.toString();
}"
150,"    public String toString() {
        StringBuilder results = new StringBuilder();

        results.append(""Msg: name="");
        results.append(name);
        results.append(""  key="");
        results.append(key);
        results.append(""  resource="");
        results.append(resource);
        results.append(""  bundle="");
        results.append(bundle);
        results.append(""\n"");

        return results.toString();
    }","  public void test1()  throws Throwable  {
      Msg msg0 = new Msg();
      msg0.setName(""?o<;&:RXp\"""");
      String string0 = msg0.toString();
}"
151,"    public boolean isResource() {
        return this.resource;
    }","  public void test2()  throws Throwable  {
      Msg msg0 = new Msg();
}"
152,"    public boolean isResource() {
        return this.resource;
    }","  public void test3()  throws Throwable  {
      Msg msg0 = new Msg();
      msg0.setResource(false);
}"
153,"    public boolean isResource() {
        return this.resource;
    }","  public void test4()  throws Throwable  {
      Msg msg0 = new Msg();
      msg0.resource = false;
      boolean boolean0 = msg0.isResource();
}"
154,"    public String getName() {
        return name;
    }","  public void test5()  throws Throwable  {
      Msg msg0 = new Msg();
      msg0.name = """";
      String string0 = msg0.getName();
}"
155,"    public boolean isResource() {
        return this.resource;
    }","  public void test6()  throws Throwable  {
      Msg msg0 = new Msg();
      msg0.name = """";
      String string0 = msg0.getName();
}"
156,"    public boolean isResource() {
        return this.resource;
    }","  public void test7()  throws Throwable  {
      Msg msg0 = new Msg();
      msg0.key = """";
      String string0 = msg0.getKey();
}"
157,"    public String getKey() {
        return key;
    }","  public void test8()  throws Throwable  {
      Msg msg0 = new Msg();
      msg0.key = """";
      String string0 = msg0.getKey();
}"
158,"    public boolean isResource() {
        return this.resource;
    }","  public void test9()  throws Throwable  {
      Msg msg0 = new Msg();
      msg0.bundle = ""JE(4Nbe:V*("";
      String string0 = msg0.getBundle();
}"
159,"    public String getBundle() {
        return this.bundle;
    }","  public void test10()  throws Throwable  {
      Msg msg0 = new Msg();
      msg0.bundle = ""JE(4Nbe:V*("";
      String string0 = msg0.getBundle();
}"
160,"    public String getBundle() {
        return this.bundle;
    }","  public void test11()  throws Throwable  {
      Msg msg0 = new Msg();
      msg0.setBundle("""");
      String string0 = msg0.getBundle();
}"
161,"    public boolean isResource() {
        return this.resource;
    }","  public void test12()  throws Throwable  {
      Msg msg0 = new Msg();
      msg0.setBundle("""");
      String string0 = msg0.getBundle();
}"
162,"    public boolean isResource() {
        return this.resource;
    }","  public void test13()  throws Throwable  {
      Msg msg0 = new Msg();
      msg0.setName(""?o<;&:RXp\"""");
      String string0 = msg0.getName();
}"
163,"    public String getName() {
        return name;
    }","  public void test14()  throws Throwable  {
      Msg msg0 = new Msg();
      msg0.setName(""?o<;&:RXp\"""");
      String string0 = msg0.getName();
}"
164,"    public boolean isResource() {
        return this.resource;
    }","  public void test15()  throws Throwable  {
      Msg msg0 = new Msg();
      Msg msg1 = (Msg)msg0.clone();
}"
165,"    public boolean isResource() {
        return this.resource;
    }","  public void test16()  throws Throwable  {
      Msg msg0 = new Msg();
      boolean boolean0 = msg0.isResource();
}"
166,"    public boolean isResource() {
        return this.resource;
    }","  public void test17()  throws Throwable  {
      Msg msg0 = new Msg();
      msg0.getKey();
}"
167,"    public boolean isResource() {
        return this.resource;
    }","  public void test18()  throws Throwable  {
      Msg msg0 = new Msg();
      msg0.getName();
}"
168,"    public String getKey() {
        return key;
    }","  public void test19()  throws Throwable  {
      Msg msg0 = new Msg();
      msg0.setKey(""?o<;&:RXp\"""");
      String string0 = msg0.getKey();
}"
169,"    public boolean isResource() {
        return this.resource;
    }","  public void test20()  throws Throwable  {
      Msg msg0 = new Msg();
      msg0.setKey(""?o<;&:RXp\"""");
      String string0 = msg0.getKey();
}"
170,"    public boolean isResource() {
        return this.resource;
    }","  public void test21()  throws Throwable  {
      Msg msg0 = new Msg();
      msg0.getBundle();
}"
171,"    public Object createObject(Attributes attributes) throws Exception {

        ValidatorResources resources = (ValidatorResources)digester.peek(0);

        String language = attributes.getValue(""language"");
        String country  = attributes.getValue(""country"");
        String variant  = attributes.getValue(""variant"");

        return createFormSet(resources, language, country, variant);

    }","  public void test0()  throws Throwable  {
      FormSetFactory formSetFactory0 = new FormSetFactory();
      Digester digester0 = new Digester();
      formSetFactory0.setDigester(digester0);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      attributesImpl0.addAttribute(""country"", ""country"", ""country"", ""5,Kk/i376V$1"", ""country"");
      try { 
        formSetFactory0.createObject(attributesImpl0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.FormSetFactory"", e);
      }
  }"
172,"    public Object createObject(Attributes attributes) throws Exception {

        ValidatorResources resources = (ValidatorResources)digester.peek(0);

        String language = attributes.getValue(""language"");
        String country  = attributes.getValue(""country"");
        String variant  = attributes.getValue(""variant"");

        return createFormSet(resources, language, country, variant);

    }","  public void test1()  throws Throwable  {
      FormSetFactory formSetFactory0 = new FormSetFactory();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      Digester digester0 = new Digester();
      digester0.push((Object) formSetFactory0);
      formSetFactory0.setDigester(digester0);
      try { 
        formSetFactory0.createObject(attributes2Impl0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.validator.FormSetFactory cannot be cast to org.apache.commons.validator.ValidatorResources
         //
         verifyException(""org.apache.commons.validator.FormSetFactory"", e);
      }
  }"
173,"    public String getMsg() {
        return msg;
    }","  public void test0()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setMethodParams(""/ValidatorAction: `\n"");
}"
174,"    public String getMethodParams() {
        return methodParams;
    }","  public void test1()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setName(""5}-EL'rb8#V%Qr0moy"");
      validatorAction0.getName();
}"
175,"    public String getMethodParams() {
        return methodParams;
    }","  public void test2()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setName("""");
      validatorAction0.getName();
}"
176,"    public String getMethodParams() {
        return methodParams;
    }","  public void test3()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setMsg(""ey*&z=z)CCf+ >qFZnL"");
      validatorAction0.getMsg();
}"
177,"    public String getMethodParams() {
        return methodParams;
    }","  public void test4()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setMsg("""");
      validatorAction0.getMsg();
}"
178,"    public String getMethodParams() {
        return methodParams;
    }","  public void test5()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setMethodParams("""");
      String string0 = validatorAction0.getMethodParams();
}"
179,"    public String getMethodParams() {
        return methodParams;
    }","  public void test6()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setMethod(""`"");
      validatorAction0.getMethod();
}"
180,"    public String getMethodParams() {
        return methodParams;
    }","  public void test7()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setMethod("""");
      validatorAction0.getMethod();
}"
181,"    public String getMethodParams() {
        return methodParams;
    }","  public void test8()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setJsFunctionName(""x>6o#E3"");
      validatorAction0.getJsFunctionName();
}"
182,"    public String getMethodParams() {
        return methodParams;
    }","  public void test9()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setJsFunctionName("""");
      validatorAction0.getJsFunctionName();
}"
183,"    public String getMethodParams() {
        return methodParams;
    }","  public void test10()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setJavascript(""addRuleSet() with namespace URI "");
      validatorAction0.getJavascript();
}"
184,"    public String getMethodParams() {
        return methodParams;
    }","  public void test11()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setJavascript("""");
      validatorAction0.getJavascript();
}"
185,"    public String getMethodParams() {
        return methodParams;
    }","  public void test12()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setDepends(""ValidatorAction: null\n"");
      validatorAction0.getDepends();
}"
186,"    public String getMethodParams() {
        return methodParams;
    }","  public void test13()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setDepends("""");
      validatorAction0.getDepends();
}"
187,"    public String getMethodParams() {
        return methodParams;
    }","  public void test14()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setClassname(""(XT2j%"");
      validatorAction0.getClassname();
}"
188,"    public String getMethodParams() {
        return methodParams;
    }","  public void test15()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setClassname("""");
      validatorAction0.getClassname();
}"
189,"    public void setMethodParams(String methodParams) {
        this.methodParams = methodParams;

        this.methodParameterList.clear();

        StringTokenizer st = new StringTokenizer(methodParams, "","");
        while (st.hasMoreTokens()) {
            String value = st.nextToken().trim();

            if (value != null && value.length() > 0) {
                this.methodParameterList.add(value);
            }
        }
    }","  public void test16()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      // Undeclared exception!
      try { 
        validatorAction0.setMethodParams((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
190,"    public void setMethodParams(String methodParams) {
        this.methodParams = methodParams;

        this.methodParameterList.clear();

        StringTokenizer st = new StringTokenizer(methodParams, "","");
        while (st.hasMoreTokens()) {
            String value = st.nextToken().trim();

            if (value != null && value.length() > 0) {
                this.methodParameterList.add(value);
            }
        }
    }","  public void test17()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      Field field0 = new Field();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ValidatorResults validatorResults0 = new ValidatorResults();
      validatorAction0.executeValidationMethod(field0, hashMap0, validatorResults0, 53);
      // Undeclared exception!
      try { 
        validatorAction0.setMethodParams((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
191,"    public void setDepends(String depends) {
        this.depends = depends;

        this.dependencyList.clear();

        StringTokenizer st = new StringTokenizer(depends, "","");
        while (st.hasMoreTokens()) {
            String depend = st.nextToken().trim();

            if (depend != null && depend.length() > 0) {
                this.dependencyList.add(depend);
            }
        }
    }","  public void test18()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      // Undeclared exception!
      try { 
        validatorAction0.setDepends((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
192,"    public void setDepends(String depends) {
        this.depends = depends;

        this.dependencyList.clear();

        StringTokenizer st = new StringTokenizer(depends, "","");
        while (st.hasMoreTokens()) {
            String depend = st.nextToken().trim();

            if (depend != null && depend.length() > 0) {
                this.dependencyList.add(depend);
            }
        }
    }","  public void test19()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      Field field0 = new Field();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ValidatorResults validatorResults0 = new ValidatorResults();
      validatorAction0.executeValidationMethod(field0, hashMap0, validatorResults0, 53);
      // Undeclared exception!
      try { 
        validatorAction0.setDepends((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
193,"    protected synchronized void loadJavascriptFunction() {

        if (this.javascriptAlreadyLoaded()) {
            return;
        }

        if (getLog().isTraceEnabled()) {
            getLog().trace(""  Loading function begun"");
        }

        if (this.jsFunction == null) {
            this.jsFunction = this.generateJsFunction();
        }

        String javascriptFileName = this.formatJavascriptFileName();

        if (getLog().isTraceEnabled()) {
            getLog().trace(""  Loading js function '"" + javascriptFileName + ""'"");
        }

        this.javascript = this.readJavascriptFile(javascriptFileName);

        if (getLog().isTraceEnabled()) {
            getLog().trace(""  Loading javascript function completed"");
        }

    }","  public void test20()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      // Undeclared exception!
      try { 
        validatorAction0.loadJavascriptFunction();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.ValidatorAction"", e);
      }
  }"
194,"    boolean executeValidationMethod(
        Field field,
        // TODO What is this the correct value type?
        // both ValidatorAction and Validator are added as parameters
        Map<String, Object> params,
        ValidatorResults results,
        int pos)
        throws ValidatorException {

        params.put(Validator.VALIDATOR_ACTION_PARAM, this);

        try {
            if (this.validationMethod == null) {
                synchronized(this) {
                    ClassLoader loader = this.getClassLoader(params);
                    this.loadValidationClass(loader);
                    this.loadParameterClasses(loader);
                    this.loadValidationMethod();
                }
            }

            Object[] paramValues = this.getParameterValues(params);

            if (field.isIndexed()) {
                this.handleIndexedField(field, pos, paramValues);
            }

            Object result = null;
            try {
                result =
                    validationMethod.invoke(
                        getValidationClassInstance(),
                        paramValues);

            } catch (IllegalArgumentException e) {
                throw new ValidatorException(e.getMessage());
            } catch (IllegalAccessException e) {
                throw new ValidatorException(e.getMessage());
            } catch (InvocationTargetException e) {

                if (e.getTargetException() instanceof Exception) {
                    throw (Exception) e.getTargetException();

                } else if (e.getTargetException() instanceof Error) {
                    throw (Error) e.getTargetException();
                }
            }

            boolean valid = this.isValid(result);
            if (!valid || (valid && !onlyReturnErrors(params))) {
                results.add(field, this.name, valid, result);
            }

            if (!valid) {
                return false;
            }

            // TODO This catch block remains for backward compatibility.  Remove
            // this for Validator 2.0 when exception scheme changes.
        } catch (Exception e) {
            if (e instanceof ValidatorException) {
                throw (ValidatorException) e;
            }

            getLog().error(
                ""Unhandled exception thrown during validation: "" + e.getMessage(),
                e);

            results.add(field, this.name, false);
            return false;
        }

        return true;
    }","  public void test21()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      Field field0 = new Field();
      HashMap<String, ValidatorAction> hashMap0 = new HashMap<String, ValidatorAction>();
      ValidatorResults validatorResults0 = field0.validate((Map<String, Object>) null, hashMap0);
      // Undeclared exception!
      try { 
        validatorAction0.executeValidationMethod(field0, (Map<String, Object>) null, validatorResults0, 4057);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.ValidatorAction"", e);
      }
  }"
195,"    public boolean isDependency(String validatorName) {
        return this.dependencyList.contains(validatorName);
    }","  public void test22()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setDepends(""/org/?^ache/commons/aalidator/resources/validetor_1_2_>zdtd"");
      boolean boolean0 = validatorAction0.isDependency(""/org/?^ache/commons/aalidator/resources/validetor_1_2_>zdtd"");
}"
196,"    public String getMethodParams() {
        return methodParams;
    }","  public void test23()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setDepends(""/org/?^ache/commons/aalidator/resources/validetor_1_2_>zdtd"");
      boolean boolean0 = validatorAction0.isDependency(""/org/?^ache/commons/aalidator/resources/validetor_1_2_>zdtd"");
}"
197,"    public boolean isDependency(String validatorName) {
        return this.dependencyList.contains(validatorName);
    }","  public void test24()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      boolean boolean0 = validatorAction0.isDependency((String) null);
}"
198,"    public String getMethodParams() {
        return methodParams;
    }","  public void test25()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      boolean boolean0 = validatorAction0.isDependency((String) null);
}"
199,"    public String getMethodParams() {
        return methodParams;
    }","  public void test26()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setJsFunction(""gv-12*YVs'98"");
      validatorAction0.init();
}"
200,"    public String getMethodParams() {
        return methodParams;
    }","  public void test27()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setJavascript(""\n"");
      validatorAction0.loadJavascriptFunction();
}"
201,"    public void setJavascript(String javascript) {
        if (jsFunction != null) {
            throw new IllegalStateException(""Cannot call setJavascript() after calling setJsFunction()"");
        }

        this.javascript = javascript;
    }","  public void test28()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setName(""r!pGGWI$hSF0<^5x=c"");
      validatorAction0.loadJavascriptFunction();
      // Undeclared exception!
      try { 
        validatorAction0.setJavascript((String) null);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Cannot call setJavascript() after calling setJsFunction()
         //
         verifyException(""org.apache.commons.validator.ValidatorAction"", e);
      }
  }"
202,"    public void setJsFunction(String jsFunction) {
        if (javascript != null) {
            throw new IllegalStateException(""Cannot call setJsFunction() after calling setJavascript()"");
        }

        this.jsFunction = jsFunction;
    }","  public void test29()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setJavascript(""\n"");
      // Undeclared exception!
      try { 
        validatorAction0.setJsFunction(""\n"");
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Cannot call setJsFunction() after calling setJavascript()
         //
         verifyException(""org.apache.commons.validator.ValidatorAction"", e);
      }
  }"
203,"    protected void init() {
        this.loadJavascriptFunction();
    }","  public void test30()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setJsFunction("""");
      // Undeclared exception!
      try { 
        validatorAction0.init();
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
204,"    public String getMethodParams() {
        return methodParams;
    }","  public void test31()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setDepends(""\n"");
}"
205,"    public String getMethodParams() {
        return methodParams;
    }","  public void test32()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setMethodParams(""\n"");
}"
206,"    public String getMethodParams() {
        return methodParams;
    }","  public void test33()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.getDependencyList();
}"
207,"    public String getMethodParams() {
        return methodParams;
    }","  public void test34()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.getJavascript();
}"
208,"    protected synchronized void loadJavascriptFunction() {

        if (this.javascriptAlreadyLoaded()) {
            return;
        }

        if (getLog().isTraceEnabled()) {
            getLog().trace(""  Loading function begun"");
        }

        if (this.jsFunction == null) {
            this.jsFunction = this.generateJsFunction();
        }

        String javascriptFileName = this.formatJavascriptFileName();

        if (getLog().isTraceEnabled()) {
            getLog().trace(""  Loading js function '"" + javascriptFileName + ""'"");
        }

        this.javascript = this.readJavascriptFile(javascriptFileName);

        if (getLog().isTraceEnabled()) {
            getLog().trace(""  Loading javascript function completed"");
        }

    }","  public void test35()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setName("""");
      // Undeclared exception!
      try { 
        validatorAction0.loadJavascriptFunction();
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
209,"    public String getMethodParams() {
        return methodParams;
    }","  public void test36()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.getJsFunctionName();
}"
210,"    public String getMethodParams() {
        return methodParams;
    }","  public void test37()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      String string0 = validatorAction0.getMethodParams();
}"
211,"    public String getMethodParams() {
        return methodParams;
    }","  public void test38()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.getDepends();
}"
212,"    public String getMethodParams() {
        return methodParams;
    }","  public void test39()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.getName();
}"
213,"    public String getMethodParams() {
        return methodParams;
    }","  public void test40()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      String string0 = validatorAction0.toString();
}"
214,"    public String toString() {
        StringBuilder results = new StringBuilder(""ValidatorAction: "");
        results.append(name);
        results.append(""\n"");

        return results.toString();
    }","  public void test41()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      String string0 = validatorAction0.toString();
}"
215,"    protected void init() {
        this.loadJavascriptFunction();
    }","  public void test42()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      // Undeclared exception!
      try { 
        validatorAction0.init();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.ValidatorAction"", e);
      }
  }"
216,"    public String getMethodParams() {
        return methodParams;
    }","  public void test43()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.getMethod();
}"
217,"    public String getMethodParams() {
        return methodParams;
    }","  public void test44()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.getMsg();
}"
218,"    public String getMethodParams() {
        return methodParams;
    }","  public void test45()  throws Throwable  {
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.getClassname();
}"
219,"    public boolean isValid(String card) {
        if ((card == null) || (card.length() < 13) || (card.length() > 19)) {
            return false;
        }

        if (!this.luhnCheck(card)) {
            return false;
        }

        for (Object cardType : this.cardTypes) {
            CreditCardType type = (CreditCardType) cardType;
            if (type.matches(card)) {
                return true;
            }
        }

        return false;
    }","  public void test0()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = new CreditCardValidator();
      boolean boolean0 = creditCardValidator0.isValid(""I>DL*#n_W+`Ta9&6&HV"");
}"
220,"    protected boolean luhnCheck(String cardNumber) {
        // number must be validated as 0..9 numeric first!!
        int digits = cardNumber.length();
        int oddOrEven = digits & 1;
        long sum = 0;
        for (int count = 0; count < digits; count++) {
            int digit = 0;
            try {
                digit = Integer.parseInt(cardNumber.charAt(count) + """");
            } catch(NumberFormatException e) {
                return false;
            }

            if (((count & 1) ^ oddOrEven) == 0) { // not
                digit *= 2;
                if (digit > 9) {
                    digit -= 9;
                }
            }
            sum += digit;
        }

        return (sum == 0) ? false : (sum % 10 == 0);
    }","  public void test1()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(19);
      // Undeclared exception!
      try { 
        creditCardValidator0.luhnCheck((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.CreditCardValidator"", e);
      }
  }"
221,"    protected boolean luhnCheck(String cardNumber) {
        // number must be validated as 0..9 numeric first!!
        int digits = cardNumber.length();
        int oddOrEven = digits & 1;
        long sum = 0;
        for (int count = 0; count < digits; count++) {
            int digit = 0;
            try {
                digit = Integer.parseInt(cardNumber.charAt(count) + """");
            } catch(NumberFormatException e) {
                return false;
            }

            if (((count & 1) ^ oddOrEven) == 0) { // not
                digit *= 2;
                if (digit > 9) {
                    digit -= 9;
                }
            }
            sum += digit;
        }

        return (sum == 0) ? false : (sum % 10 == 0);
    }","  public void test2()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(13);
      boolean boolean0 = creditCardValidator0.luhnCheck(""1"");
}"
222,"    protected boolean luhnCheck(String cardNumber) {
        // number must be validated as 0..9 numeric first!!
        int digits = cardNumber.length();
        int oddOrEven = digits & 1;
        long sum = 0;
        for (int count = 0; count < digits; count++) {
            int digit = 0;
            try {
                digit = Integer.parseInt(cardNumber.charAt(count) + """");
            } catch(NumberFormatException e) {
                return false;
            }

            if (((count & 1) ^ oddOrEven) == 0) { // not
                digit *= 2;
                if (digit > 9) {
                    digit -= 9;
                }
            }
            sum += digit;
        }

        return (sum == 0) ? false : (sum % 10 == 0);
    }","  public void test3()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(2);
      boolean boolean0 = creditCardValidator0.luhnCheck(""59"");
}"
223,"    protected boolean luhnCheck(String cardNumber) {
        // number must be validated as 0..9 numeric first!!
        int digits = cardNumber.length();
        int oddOrEven = digits & 1;
        long sum = 0;
        for (int count = 0; count < digits; count++) {
            int digit = 0;
            try {
                digit = Integer.parseInt(cardNumber.charAt(count) + """");
            } catch(NumberFormatException e) {
                return false;
            }

            if (((count & 1) ^ oddOrEven) == 0) { // not
                digit *= 2;
                if (digit > 9) {
                    digit -= 9;
                }
            }
            sum += digit;
        }

        return (sum == 0) ? false : (sum % 10 == 0);
    }","  public void test4()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(2);
      boolean boolean0 = creditCardValidator0.luhnCheck("""");
}"
224,"    public boolean isValid(String card) {
        if ((card == null) || (card.length() < 13) || (card.length() > 19)) {
            return false;
        }

        if (!this.luhnCheck(card)) {
            return false;
        }

        for (Object cardType : this.cardTypes) {
            CreditCardType type = (CreditCardType) cardType;
            if (type.matches(card)) {
                return true;
            }
        }

        return false;
    }","  public void test5()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = new CreditCardValidator();
      boolean boolean0 = creditCardValidator0.isValid("" oTldn! clone }(gs object."");
}"
225,"    public boolean isValid(String card) {
        if ((card == null) || (card.length() < 13) || (card.length() > 19)) {
            return false;
        }

        if (!this.luhnCheck(card)) {
            return false;
        }

        for (Object cardType : this.cardTypes) {
            CreditCardType type = (CreditCardType) cardType;
            if (type.matches(card)) {
                return true;
            }
        }

        return false;
    }","  public void test6()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(2);
      boolean boolean0 = creditCardValidator0.isValid("""");
}"
226,"    public boolean isValid(String card) {
        if ((card == null) || (card.length() < 13) || (card.length() > 19)) {
            return false;
        }

        if (!this.luhnCheck(card)) {
            return false;
        }

        for (Object cardType : this.cardTypes) {
            CreditCardType type = (CreditCardType) cardType;
            if (type.matches(card)) {
                return true;
            }
        }

        return false;
    }","  public void test7()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(2);
      boolean boolean0 = creditCardValidator0.isValid((String) null);
}"
227,"    public boolean isValid(String card) {
        if ((card == null) || (card.length() < 13) || (card.length() > 19)) {
            return false;
        }

        if (!this.luhnCheck(card)) {
            return false;
        }

        for (Object cardType : this.cardTypes) {
            CreditCardType type = (CreditCardType) cardType;
            if (type.matches(card)) {
                return true;
            }
        }

        return false;
    }","  public void test8()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = new CreditCardValidator();
      boolean boolean0 = creditCardValidator0.isValid(""24}7;:zI%%H##"");
}"
228,"    public void addAllowedCardType(CreditCardType type){
        this.cardTypes.add(type);
    }","  public void test9()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(190);
      creditCardValidator0.addAllowedCardType((CreditCardValidator.CreditCardType) null);
}"
229,"    protected EmailValidator() {
        super();
    }","  public void test0()  throws Throwable  {
      EmailValidator emailValidator0 = new EmailValidator();
}"
230,"    protected String stripComments(String emailStr)  {
     String result = emailStr;
     String commentPat = ""^((?:[^\""\\\\]|\\\\.)*(?:\""(?:[^\""\\\\]|\\\\.)*\""(?:[^\""\\\\]|\111111\\\\.)*)*)\\((?:[^()\\\\]|\\\\.)*\\)/"";
     Pattern commentMatcher = Pattern.compile(commentPat);
     
     while (commentMatcher.matcher(result).matches()) {
        result = result.replaceFirst(commentPat, ""\1 "");
     }
     return result;
    }","  public void test1()  throws Throwable  {
      EmailValidator emailValidator0 = new EmailValidator();
      String string0 = emailValidator0.stripComments("""");
}"
231,"    protected String stripComments(String emailStr)  {
     String result = emailStr;
     String commentPat = ""^((?:[^\""\\\\]|\\\\.)*(?:\""(?:[^\""\\\\]|\\\\.)*\""(?:[^\""\\\\]|\111111\\\\.)*)*)\\((?:[^()\\\\]|\\\\.)*\\)/"";
     Pattern commentMatcher = Pattern.compile(commentPat);
     
     while (commentMatcher.matcher(result).matches()) {
        result = result.replaceFirst(commentPat, ""\1 "");
     }
     return result;
    }","  public void test2()  throws Throwable  {
      EmailValidator emailValidator0 = new EmailValidator();
      String string0 = emailValidator0.stripComments("""");
}"
232,"    public static EmailValidator getInstance() {
        return EMAIL_VALIDATOR;
    }","  public void test3()  throws Throwable  {
      EmailValidator emailValidator0 = EmailValidator.getInstance();
}"
233,"    protected boolean isValidUser(String user) {
        return USER_PATTERN.matcher(user).matches(); 
    }","  public void test4()  throws Throwable  {
      EmailValidator emailValidator0 = EmailValidator.getInstance();
      boolean boolean0 = emailValidator0.isValidUser(""z0#{r0h}V~TkxR/"");
}"
234,"    public static EmailValidator getInstance() {
        return EMAIL_VALIDATOR;
    }","  public void test5()  throws Throwable  {
      EmailValidator emailValidator0 = EmailValidator.getInstance();
}"
235,"    protected EmailValidator() {
        super();
    }","  public void test6()  throws Throwable  {
      EmailValidator emailValidator0 = new EmailValidator();
}"
236,"    public static EmailValidator getInstance() {
        return EMAIL_VALIDATOR;
    }","  public void test7()  throws Throwable  {
      EmailValidator emailValidator0 = EmailValidator.getInstance();
}"
237,"    protected EmailValidator() {
        super();
    }","  public void test8()  throws Throwable  {
      EmailValidator emailValidator0 = new EmailValidator();
}"
238,"    protected EmailValidator() {
        super();
    }","  public void test9()  throws Throwable  {
      EmailValidator emailValidator0 = new EmailValidator();
}"
239,"    public static EmailValidator getInstance() {
        return EMAIL_VALIDATOR;
    }","  public void test10()  throws Throwable  {
      EmailValidator emailValidator0 = EmailValidator.getInstance();
}"
240,"    protected EmailValidator() {
        super();
    }","  public void test11()  throws Throwable  {
      EmailValidator emailValidator0 = new EmailValidator();
}"
241,"    protected EmailValidator() {
        super();
    }","  public void test12()  throws Throwable  {
      EmailValidator emailValidator0 = new EmailValidator();
}"
242,"    protected String stripComments(String emailStr)  {
     String result = emailStr;
     String commentPat = ""^((?:[^\""\\\\]|\\\\.)*(?:\""(?:[^\""\\\\]|\\\\.)*\""(?:[^\""\\\\]|\111111\\\\.)*)*)\\((?:[^()\\\\]|\\\\.)*\\)/"";
     Pattern commentMatcher = Pattern.compile(commentPat);
     
     while (commentMatcher.matcher(result).matches()) {
        result = result.replaceFirst(commentPat, ""\1 "");
     }
     return result;
    }","  public void test13()  throws Throwable  {
      EmailValidator emailValidator0 = new EmailValidator();
      String string0 = emailValidator0.stripComments(""B@g<#W'%5v~*vb%16a%"");
}"
243,"    protected String stripComments(String emailStr)  {
     String result = emailStr;
     String commentPat = ""^((?:[^\""\\\\]|\\\\.)*(?:\""(?:[^\""\\\\]|\\\\.)*\""(?:[^\""\\\\]|\111111\\\\.)*)*)\\((?:[^()\\\\]|\\\\.)*\\)/"";
     Pattern commentMatcher = Pattern.compile(commentPat);
     
     while (commentMatcher.matcher(result).matches()) {
        result = result.replaceFirst(commentPat, ""\1 "");
     }
     return result;
    }","  public void test14()  throws Throwable  {
      EmailValidator emailValidator0 = new EmailValidator();
      String string0 = emailValidator0.stripComments(""B@g<#W'%5v~*vb%16a%"");
}"
244,"    protected boolean isValidDomain(String domain) {
        boolean symbolic = false;

        // see if domain is an IP address in brackets
        Matcher ipDomainMatcher = IP_DOMAIN_PATTERN.matcher(domain);

        if (ipDomainMatcher.matches()) {
            InetAddressValidator inetAddressValidator =
                    InetAddressValidator.getInstance();
            if (inetAddressValidator.isValid(ipDomainMatcher.group(1))) {
                return true;
            }
        } else {
            // Domain is symbolic name
            symbolic = DOMAIN_PATTERN.matcher(domain).matches();
        }

        if (symbolic) {
            if (!isValidSymbolicDomain(domain)) {
                return false;
            }
        } else {
            return false;
        }

        return true;
    }","  public void test15()  throws Throwable  {
      EmailValidator emailValidator0 = EmailValidator.getInstance();
      // Undeclared exception!
      emailValidator0.isValidDomain(""org.apache.commons.validator.EmailValidator"");
  }"
245,"    protected boolean isValidIpAddress(String ipAddress) {
        Matcher ipAddressMatcher = IP_DOMAIN_PATTERN.matcher(ipAddress);
        for (int i = 1; i <= 4; i++) { // CHECKSTYLE IGNORE MagicNumber
            String ipSegment = ipAddressMatcher.group(i);
            if (ipSegment == null || ipSegment.length() <= 0) {
                return false;
            }

            int iIpSegment = 0;

            try {
                iIpSegment = Integer.parseInt(ipSegment);
            } catch(NumberFormatException e) {
                return false;
            }

            if (iIpSegment > 255) { // CHECKSTYLE IGNORE MagicNumber
                return false;
            }

        }
        return true;
    }","  public void test16()  throws Throwable  {
      EmailValidator emailValidator0 = new EmailValidator();
      // Undeclared exception!
      try { 
        emailValidator0.isValidIpAddress("""");
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException(""java.util.regex.Matcher"", e);
      }
  }"
246,"    protected boolean isValidDomain(String domain) {
        boolean symbolic = false;

        // see if domain is an IP address in brackets
        Matcher ipDomainMatcher = IP_DOMAIN_PATTERN.matcher(domain);

        if (ipDomainMatcher.matches()) {
            InetAddressValidator inetAddressValidator =
                    InetAddressValidator.getInstance();
            if (inetAddressValidator.isValid(ipDomainMatcher.group(1))) {
                return true;
            }
        } else {
            // Domain is symbolic name
            symbolic = DOMAIN_PATTERN.matcher(domain).matches();
        }

        if (symbolic) {
            if (!isValidSymbolicDomain(domain)) {
                return false;
            }
        } else {
            return false;
        }

        return true;
    }","  public void test17()  throws Throwable  {
      EmailValidator emailValidator0 = EmailValidator.getInstance();
      // Undeclared exception!
      try { 
        emailValidator0.isValidDomain(""agakhan"");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
247,"    protected boolean isValidDomain(String domain) {
        boolean symbolic = false;

        // see if domain is an IP address in brackets
        Matcher ipDomainMatcher = IP_DOMAIN_PATTERN.matcher(domain);

        if (ipDomainMatcher.matches()) {
            InetAddressValidator inetAddressValidator =
                    InetAddressValidator.getInstance();
            if (inetAddressValidator.isValid(ipDomainMatcher.group(1))) {
                return true;
            }
        } else {
            // Domain is symbolic name
            symbolic = DOMAIN_PATTERN.matcher(domain).matches();
        }

        if (symbolic) {
            if (!isValidSymbolicDomain(domain)) {
                return false;
            }
        } else {
            return false;
        }

        return true;
    }","  public void test18()  throws Throwable  {
      EmailValidator emailValidator0 = EmailValidator.getInstance();
      boolean boolean0 = emailValidator0.isValidDomain("""");
}"
248,"    protected boolean isValidUser(String user) {
        return USER_PATTERN.matcher(user).matches(); 
    }","  public void test19()  throws Throwable  {
      EmailValidator emailValidator0 = EmailValidator.getInstance();
      boolean boolean0 = emailValidator0.isValidUser("""");
}"
249,"    public boolean isValid(String email) {
        return org.apache.commons.validator.routines.EmailValidator.getInstance().isValid(email);
    }","  public void test20()  throws Throwable  {
      EmailValidator emailValidator0 = new EmailValidator();
      boolean boolean0 = emailValidator0.isValid((String) null);
}"
250,"    ValidatorResults validate(Map<String, Object> params, Map<String, ValidatorAction> actions, int page)
        throws ValidatorException {
        return validate(params, actions, page, null);
    }","  public void test0()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      form0.addField(field0);
      FastHashMap fastHashMap0 = new FastHashMap(551);
      form0.validate(fastHashMap0, fastHashMap0, 0);
}"
251,"    ValidatorResults validate(Map<String, Object> params, Map<String, ValidatorAction> actions, int page)
        throws ValidatorException {
        return validate(params, actions, page, null);
    }","  public void test1()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      form0.addField(field0);
      FastHashMap fastHashMap0 = new FastHashMap();
      FastHashMap fastHashMap1 = new FastHashMap();
      form0.validate(fastHashMap0, fastHashMap1, 10);
}"
252,"    ValidatorResults validate(Map<String, Object> params, Map<String, ValidatorAction> actions, int page)
        throws ValidatorException {
        return validate(params, actions, page, null);
    }","  public void test2()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      form0.addField(field0);
      FastHashMap fastHashMap0 = new FastHashMap();
      FastHashMap fastHashMap1 = new FastHashMap();
      form0.validate(fastHashMap0, fastHashMap1, 10);
}"
253,"    public boolean isProcessed() {
        return processed;
    }","  public void test3()  throws Throwable  {
      Form form0 = new Form();
      form0.name = ""tp?XQ>6"";
      String string0 = form0.toString();
}"
254,"    public String toString() {
        StringBuilder results = new StringBuilder();

        results.append(""Form: "");
        results.append(name);
        results.append(""\n"");

        for (Iterator<Field> i = lFields.iterator(); i.hasNext(); ) {
            results.append(""\tField: \n"");
            results.append(i.next());
            results.append(""\n"");
        }

        return results.toString();
    }","  public void test4()  throws Throwable  {
      Form form0 = new Form();
      form0.name = ""tp?XQ>6"";
      String string0 = form0.toString();
}"
255,"    protected void process(Map<String, String> globalConstants, Map<String, String> constants, Map<String, Form> forms) {
        if (isProcessed()) {
            return;
        }

        int n = 0;//we want the fields from its parent first
        if (isExtending()) {
            Form parent = forms.get(inherit);
            if (parent != null) {
                if (!parent.isProcessed()) {
                    //we want to go all the way up the tree
                    parent.process(constants, globalConstants, forms);
                }
                for (Iterator<Field> i = parent.getFields().iterator(); i.hasNext(); ) {
                    Field f = i.next();
                    //we want to be able to override any fields we like
                    if (getFieldMap().get(f.getKey()) == null) {
                        lFields.add(n, f);
                        getFieldMap().put(f.getKey(), f);
                        n++;
                    }
                }
            }
        }
        hFields.setFast(true);
        //no need to reprocess parent's fields, we iterate from 'n'
        for (Iterator<Field> i = lFields.listIterator(n); i.hasNext(); ) {
            Field f = i.next();
            f.process(globalConstants, constants);
        }

        processed = true;
    }","  public void test5()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      form0.addField(field0);
      FastHashMap fastHashMap0 = new FastHashMap();
      // Undeclared exception!
      try { 
        form0.process((Map<String, String>) null, fastHashMap0, fastHashMap0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
256,"    protected void process(Map<String, String> globalConstants, Map<String, String> constants, Map<String, Form> forms) {
        if (isProcessed()) {
            return;
        }

        int n = 0;//we want the fields from its parent first
        if (isExtending()) {
            Form parent = forms.get(inherit);
            if (parent != null) {
                if (!parent.isProcessed()) {
                    //we want to go all the way up the tree
                    parent.process(constants, globalConstants, forms);
                }
                for (Iterator<Field> i = parent.getFields().iterator(); i.hasNext(); ) {
                    Field f = i.next();
                    //we want to be able to override any fields we like
                    if (getFieldMap().get(f.getKey()) == null) {
                        lFields.add(n, f);
                        getFieldMap().put(f.getKey(), f);
                        n++;
                    }
                }
            }
        }
        hFields.setFast(true);
        //no need to reprocess parent's fields, we iterate from 'n'
        for (Iterator<Field> i = lFields.listIterator(n); i.hasNext(); ) {
            Field f = i.next();
            f.process(globalConstants, constants);
        }

        processed = true;
    }","  public void test6()  throws Throwable  {
      Form form0 = new Form();
      FastHashMap fastHashMap0 = form0.hFields;
      Field field0 = new Field();
      form0.addField(field0);
      HashMap<String, Form> hashMap0 = new HashMap<String, Form>();
      // Undeclared exception!
      try { 
        form0.process(fastHashMap0, fastHashMap0, hashMap0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.validator.Field cannot be cast to java.lang.String
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
257,"    public boolean isExtending() {
        return inherit != null;
    }","  public void test7()  throws Throwable  {
      Form form0 = new Form();
      form0.setExtends(""org.apache.commons.validator.Form"");
      FastHashMap fastHashMap0 = new FastHashMap();
      Form form1 = new Form();
      fastHashMap0.put(""org.apache.commons.validator.Form"", form1);
      form0.process((Map<String, String>) null, fastHashMap0, fastHashMap0);
}"
258,"    public boolean isProcessed() {
        return processed;
    }","  public void test8()  throws Throwable  {
      Form form0 = new Form();
      form0.setExtends(""org.apache.commons.validator.Form"");
      FastHashMap fastHashMap0 = new FastHashMap();
      Form form1 = new Form();
      fastHashMap0.put(""org.apache.commons.validator.Form"", form1);
      form0.process((Map<String, String>) null, fastHashMap0, fastHashMap0);
}"
259,"    public boolean isProcessed() {
        return processed;
    }","  public void test9()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      Field field1 = new Field();
      form0.addField(field1);
      form0.addField(field0);
      form0.merge(form0);
}"
260,"    public boolean isProcessed() {
        return processed;
    }","  public void test10()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      field0.property = """";
      form0.addField(field0);
      Form form1 = new Form();
      form1.merge(form0);
}"
261,"    protected void merge(Form depends) {

        List<Field> templFields = new ArrayList<Field>();
        @SuppressWarnings(""unchecked"") // FastHashMap is not generic
        Map<String, Field> temphFields = new FastHashMap();
        Iterator<Field> dependsIt = depends.getFields().iterator();
        while (dependsIt.hasNext()) {
            Field defaultField = dependsIt.next();
            if (defaultField != null) {
                String fieldKey = defaultField.getKey();
                if (!this.containsField(fieldKey)) {
                    templFields.add(defaultField);
                    temphFields.put(fieldKey, defaultField);
                }
                else {
                    Field old = getField(fieldKey);
                    getFieldMap().remove(fieldKey);
                    lFields.remove(old);
                    templFields.add(old);
                    temphFields.put(fieldKey, old);
                }
            }
        }
        lFields.addAll(0, templFields);
        getFieldMap().putAll(temphFields);
    }","  public void test11()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      field0.property = """";
      form0.addField(field0);
      // Undeclared exception!
      try { 
        form0.merge(form0);
        fail(""Expecting exception: ConcurrentModificationException"");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.ArrayList$Itr"", e);
      }
  }"
262,"    public boolean isProcessed() {
        return processed;
    }","  public void test12()  throws Throwable  {
      Form form0 = new Form();
}"
263,"    public boolean isProcessed() {
        return processed;
    }","  public void test13()  throws Throwable  {
      Form form0 = new Form();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Form> hashMap1 = new HashMap<String, Form>();
      form0.process(hashMap0, hashMap0, hashMap1);
      boolean boolean0 = form0.isProcessed();
}"
264,"    public String getName() {
        return name;
    }","  public void test14()  throws Throwable  {
      Form form0 = new Form();
      form0.setName(""Form: null\n"");
      String string0 = form0.getName();
}"
265,"    public boolean isProcessed() {
        return processed;
    }","  public void test15()  throws Throwable  {
      Form form0 = new Form();
      form0.setName(""Form: null\n"");
      String string0 = form0.getName();
}"
266,"    public boolean isProcessed() {
        return processed;
    }","  public void test16()  throws Throwable  {
      Form form0 = new Form();
      form0.name = """";
      String string0 = form0.getName();
}"
267,"    public String getName() {
        return name;
    }","  public void test17()  throws Throwable  {
      Form form0 = new Form();
      form0.name = """";
      String string0 = form0.getName();
}"
268,"    public boolean isProcessed() {
        return processed;
    }","  public void test18()  throws Throwable  {
      Form form0 = new Form();
      form0.hFields = null;
      form0.getFieldMap();
}"
269,"    public boolean isProcessed() {
        return processed;
    }","  public void test19()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      field0.setClientValidation(false);
      form0.addField(field0);
      form0.getField((String) null);
}"
270,"    public boolean isProcessed() {
        return processed;
    }","  public void test20()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      field0.setPage(10);
      form0.addField(field0);
      form0.getField((String) null);
}"
271,"    public boolean isProcessed() {
        return processed;
    }","  public void test21()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      field0.page = (-4166);
      form0.addField(field0);
      form0.getField((String) null);
}"
272,"    public boolean isProcessed() {
        return processed;
    }","  public void test22()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      field0.fieldOrder = 1;
      form0.addField(field0);
      form0.getField((String) null);
}"
273,"    public boolean isExtending() {
        return inherit != null;
    }","  public void test23()  throws Throwable  {
      Form form0 = new Form();
      form0.setExtends(""tp?XQ>6"");
      form0.getExtends();
}"
274,"    public boolean isExtending() {
        return inherit != null;
    }","  public void test24()  throws Throwable  {
      Form form0 = new Form();
      form0.setExtends("""");
      form0.getExtends();
}"
275,"    ValidatorResults validate(Map<String, Object> params, Map<String, ValidatorAction> actions, int page)
        throws ValidatorException {
        return validate(params, actions, page, null);
    }","  public void test25()  throws Throwable  {
      Form form0 = new Form();
      FastHashMap fastHashMap0 = new FastHashMap(895);
      // Undeclared exception!
      try { 
        form0.validate((Map<String, Object>) null, fastHashMap0, 895, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.Form"", e);
      }
  }"
276,"    ValidatorResults validate(Map<String, Object> params, Map<String, ValidatorAction> actions, int page)
        throws ValidatorException {
        return validate(params, actions, page, null);
    }","  public void test26()  throws Throwable  {
      Form form0 = new Form();
      FastHashMap fastHashMap0 = new FastHashMap();
      ValidatorResults validatorResults0 = form0.validate(fastHashMap0, fastHashMap0, 1994, (String) null);
      FastHashMap fastHashMap1 = form0.hFields;
      fastHashMap1.put("""", validatorResults0);
      // Undeclared exception!
      try { 
        form0.validate(fastHashMap1, fastHashMap1, (-4277), """");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.validator.ValidatorResults cannot be cast to org.apache.commons.validator.Field
         //
         verifyException(""org.apache.commons.validator.Form"", e);
      }
  }"
277,"    ValidatorResults validate(Map<String, Object> params, Map<String, ValidatorAction> actions, int page)
        throws ValidatorException {
        return validate(params, actions, page, null);
    }","  public void test27()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      field0.setDepends(""6"");
      form0.addField(field0);
      Map<String, Field> map0 = form0.getFieldMap();
      FastHashMap fastHashMap0 = new FastHashMap(map0);
      try { 
        form0.validate(fastHashMap0, fastHashMap0, 44);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // No ValidatorAction named 6 found for field null
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
278,"    ValidatorResults validate(Map<String, Object> params, Map<String, ValidatorAction> actions, int page)
        throws ValidatorException {
        return validate(params, actions, page, null);
    }","  public void test28()  throws Throwable  {
      Form form0 = new Form();
      HashMap<String, ValidatorAction> hashMap0 = new HashMap<String, ValidatorAction>();
      // Undeclared exception!
      try { 
        form0.validate((Map<String, Object>) null, hashMap0, (-5101));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.Form"", e);
      }
  }"
279,"    public String toString() {
        StringBuilder results = new StringBuilder();

        results.append(""Form: "");
        results.append(name);
        results.append(""\n"");

        for (Iterator<Field> i = lFields.iterator(); i.hasNext(); ) {
            results.append(""\tField: \n"");
            results.append(i.next());
            results.append(""\n"");
        }

        return results.toString();
    }","  public void test29()  throws Throwable  {
      Form form0 = new Form();
      form0.lFields = null;
      // Undeclared exception!
      try { 
        form0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.Form"", e);
      }
  }"
280,"    protected void process(Map<String, String> globalConstants, Map<String, String> constants, Map<String, Form> forms) {
        if (isProcessed()) {
            return;
        }

        int n = 0;//we want the fields from its parent first
        if (isExtending()) {
            Form parent = forms.get(inherit);
            if (parent != null) {
                if (!parent.isProcessed()) {
                    //we want to go all the way up the tree
                    parent.process(constants, globalConstants, forms);
                }
                for (Iterator<Field> i = parent.getFields().iterator(); i.hasNext(); ) {
                    Field f = i.next();
                    //we want to be able to override any fields we like
                    if (getFieldMap().get(f.getKey()) == null) {
                        lFields.add(n, f);
                        getFieldMap().put(f.getKey(), f);
                        n++;
                    }
                }
            }
        }
        hFields.setFast(true);
        //no need to reprocess parent's fields, we iterate from 'n'
        for (Iterator<Field> i = lFields.listIterator(n); i.hasNext(); ) {
            Field f = i.next();
            f.process(globalConstants, constants);
        }

        processed = true;
    }","  public void test30()  throws Throwable  {
      Form form0 = new Form();
      form0.setExtends(""org.apache.commons.validator.Form"");
      List<Field> list0 = form0.getFields();
      form0.lFields = list0;
      FastHashMap fastHashMap0 = new FastHashMap();
      Form form1 = new Form();
      Field field0 = new Field();
      form1.addField(field0);
      form1.process(fastHashMap0, fastHashMap0, fastHashMap0);
      fastHashMap0.put(""org.apache.commons.validator.Form"", form1);
      // Undeclared exception!
      try { 
        form0.process(fastHashMap0, fastHashMap0, fastHashMap0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableList"", e);
      }
  }"
281,"    protected void merge(Form depends) {

        List<Field> templFields = new ArrayList<Field>();
        @SuppressWarnings(""unchecked"") // FastHashMap is not generic
        Map<String, Field> temphFields = new FastHashMap();
        Iterator<Field> dependsIt = depends.getFields().iterator();
        while (dependsIt.hasNext()) {
            Field defaultField = dependsIt.next();
            if (defaultField != null) {
                String fieldKey = defaultField.getKey();
                if (!this.containsField(fieldKey)) {
                    templFields.add(defaultField);
                    temphFields.put(fieldKey, defaultField);
                }
                else {
                    Field old = getField(fieldKey);
                    getFieldMap().remove(fieldKey);
                    lFields.remove(old);
                    templFields.add(old);
                    temphFields.put(fieldKey, old);
                }
            }
        }
        lFields.addAll(0, templFields);
        getFieldMap().putAll(temphFields);
    }","  public void test31()  throws Throwable  {
      Form form0 = new Form();
      List<Field> list0 = form0.getFields();
      form0.lFields = list0;
      // Undeclared exception!
      try { 
        form0.merge(form0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableList"", e);
      }
  }"
282,"    protected void merge(Form depends) {

        List<Field> templFields = new ArrayList<Field>();
        @SuppressWarnings(""unchecked"") // FastHashMap is not generic
        Map<String, Field> temphFields = new FastHashMap();
        Iterator<Field> dependsIt = depends.getFields().iterator();
        while (dependsIt.hasNext()) {
            Field defaultField = dependsIt.next();
            if (defaultField != null) {
                String fieldKey = defaultField.getKey();
                if (!this.containsField(fieldKey)) {
                    templFields.add(defaultField);
                    temphFields.put(fieldKey, defaultField);
                }
                else {
                    Field old = getField(fieldKey);
                    getFieldMap().remove(fieldKey);
                    lFields.remove(old);
                    templFields.add(old);
                    temphFields.put(fieldKey, old);
                }
            }
        }
        lFields.addAll(0, templFields);
        getFieldMap().putAll(temphFields);
    }","  public void test32()  throws Throwable  {
      Form form0 = new Form();
      // Undeclared exception!
      try { 
        form0.merge((Form) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.Form"", e);
      }
  }"
283,"    public Field getField(String fieldName) {
        return getFieldMap().get(fieldName);
    }","  public void test33()  throws Throwable  {
      Form form0 = new Form();
      form0.hFields = null;
      // Undeclared exception!
      try { 
        form0.getField(""Y"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.Form"", e);
      }
  }"
284,"    public Field getField(String fieldName) {
        return getFieldMap().get(fieldName);
    }","  public void test34()  throws Throwable  {
      Form form0 = new Form();
      FastHashMap fastHashMap0 = form0.hFields;
      form0.validate(fastHashMap0, fastHashMap0, (-2021161078));
      // Undeclared exception!
      try { 
        form0.getField(""org.apache.commons.validator.ValidatorResults"");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.validator.ValidatorResults cannot be cast to org.apache.commons.validator.Field
         //
         verifyException(""org.apache.commons.validator.Form"", e);
      }
  }"
285,"    public boolean containsField(String fieldName) {
        return getFieldMap().containsKey(fieldName);
    }","  public void test35()  throws Throwable  {
      Form form0 = new Form();
      form0.hFields = null;
      // Undeclared exception!
      try { 
        form0.containsField(""[~Y"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
286,"    public void addField(Field f) {
        this.lFields.add(f);
        getFieldMap().put(f.getKey(), f);
    }","  public void test36()  throws Throwable  {
      Form form0 = new Form();
      // Undeclared exception!
      try { 
        form0.addField((Field) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.Form"", e);
      }
  }"
287,"    public boolean isExtending() {
        return inherit != null;
    }","  public void test37()  throws Throwable  {
      Form form0 = new Form();
      boolean boolean0 = form0.isExtending();
}"
288,"    public boolean isProcessed() {
        return processed;
    }","  public void test38()  throws Throwable  {
      Form form0 = new Form();
      boolean boolean0 = form0.isExtending();
}"
289,"    public boolean isExtending() {
        return inherit != null;
    }","  public void test39()  throws Throwable  {
      Form form0 = new Form();
      form0.setExtends(""tp?XQ>6"");
      boolean boolean0 = form0.isExtending();
}"
290,"    public boolean isProcessed() {
        return processed;
    }","  public void test40()  throws Throwable  {
      Form form0 = new Form();
      FastHashMap fastHashMap0 = new FastHashMap(1121);
      fastHashMap0.put(""Form: null\n"", form0);
      form0.hFields = fastHashMap0;
      boolean boolean0 = form0.containsField(""Form: null\n"");
}"
291,"    public boolean containsField(String fieldName) {
        return getFieldMap().containsKey(fieldName);
    }","  public void test41()  throws Throwable  {
      Form form0 = new Form();
      FastHashMap fastHashMap0 = new FastHashMap(1121);
      fastHashMap0.put(""Form: null\n"", form0);
      form0.hFields = fastHashMap0;
      boolean boolean0 = form0.containsField(""Form: null\n"");
}"
292,"    public boolean isProcessed() {
        return processed;
    }","  public void test42()  throws Throwable  {
      Form form0 = new Form();
      form0.getName();
}"
293,"    public boolean isProcessed() {
        return processed;
    }","  public void test43()  throws Throwable  {
      Form form0 = new Form();
      form0.getField(""Form: Form: null\n\n"");
}"
294,"    ValidatorResults validate(Map<String, Object> params, Map<String, ValidatorAction> actions, int page)
        throws ValidatorException {
        return validate(params, actions, page, null);
    }","  public void test44()  throws Throwable  {
      Form form0 = new Form();
      FastHashMap fastHashMap0 = new FastHashMap(570, 570);
      Field field0 = new Field();
      form0.addField(field0);
      form0.validate(fastHashMap0, fastHashMap0, (-2));
}"
295,"    public boolean isProcessed() {
        return processed;
    }","  public void test45()  throws Throwable  {
      Form form0 = new Form();
      FastHashMap fastHashMap0 = new FastHashMap(570, 570);
      Field field0 = new Field();
      form0.addField(field0);
      form0.validate(fastHashMap0, fastHashMap0, (-2));
}"
296,"    public boolean isProcessed() {
        return processed;
    }","  public void test46()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      field0.property = ""org.apache.commons.validator.Form"";
      form0.addField(field0);
      FastHashMap fastHashMap0 = new FastHashMap();
      form0.validate(fastHashMap0, fastHashMap0, 551, ""org.apache.commons.validator.Form"");
}"
297,"    public boolean isProcessed() {
        return processed;
    }","  public void test47()  throws Throwable  {
      Form form0 = new Form();
      FastHashMap fastHashMap0 = new FastHashMap();
      Field field0 = new Field();
      field0.property = ""ote! u|3T?x+Gm]2f"";
      form0.addField(field0);
      form0.validate(fastHashMap0, fastHashMap0, (-808), ""ote! u|3T?x+Gm]2f"");
}"
298,"    public boolean isProcessed() {
        return processed;
    }","  public void test48()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      form0.addField(field0);
      String string0 = form0.toString();
}"
299,"    public String toString() {
        StringBuilder results = new StringBuilder();

        results.append(""Form: "");
        results.append(name);
        results.append(""\n"");

        for (Iterator<Field> i = lFields.iterator(); i.hasNext(); ) {
            results.append(""\tField: \n"");
            results.append(i.next());
            results.append(""\n"");
        }

        return results.toString();
    }","  public void test49()  throws Throwable  {
      Form form0 = new Form();
      Field field0 = new Field();
      form0.addField(field0);
      String string0 = form0.toString();
}"
300,"    protected void process(Map<String, String> globalConstants, Map<String, String> constants, Map<String, Form> forms) {
        if (isProcessed()) {
            return;
        }

        int n = 0;//we want the fields from its parent first
        if (isExtending()) {
            Form parent = forms.get(inherit);
            if (parent != null) {
                if (!parent.isProcessed()) {
                    //we want to go all the way up the tree
                    parent.process(constants, globalConstants, forms);
                }
                for (Iterator<Field> i = parent.getFields().iterator(); i.hasNext(); ) {
                    Field f = i.next();
                    //we want to be able to override any fields we like
                    if (getFieldMap().get(f.getKey()) == null) {
                        lFields.add(n, f);
                        getFieldMap().put(f.getKey(), f);
                        n++;
                    }
                }
            }
        }
        hFields.setFast(true);
        //no need to reprocess parent's fields, we iterate from 'n'
        for (Iterator<Field> i = lFields.listIterator(n); i.hasNext(); ) {
            Field f = i.next();
            f.process(globalConstants, constants);
        }

        processed = true;
    }","  public void test50()  throws Throwable  {
      Form form0 = new Form();
      form0.setExtends(""org.apache.commons.validator.Form"");
      FastHashMap fastHashMap0 = new FastHashMap();
      Form form1 = new Form();
      Field field0 = new Field();
      form1.addField(field0);
      form1.process(fastHashMap0, fastHashMap0, fastHashMap0);
      fastHashMap0.put(""org.apache.commons.validator.Form"", form1);
      form0.addField(field0);
      // Undeclared exception!
      try { 
        form0.process(fastHashMap0, fastHashMap0, fastHashMap0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.validator.Form cannot be cast to java.lang.String
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
301,"    public boolean isExtending() {
        return inherit != null;
    }","  public void test51()  throws Throwable  {
      Form form0 = new Form();
      form0.setExtends(""org.apache.commons.validator.Form"");
      FastHashMap fastHashMap0 = new FastHashMap();
      Form form1 = new Form();
      Field field0 = new Field();
      form1.addField(field0);
      form1.process(fastHashMap0, fastHashMap0, fastHashMap0);
      fastHashMap0.put(""org.apache.commons.validator.Form"", form1);
      form0.process(fastHashMap0, fastHashMap0, fastHashMap0);
}"
302,"    public boolean isProcessed() {
        return processed;
    }","  public void test52()  throws Throwable  {
      Form form0 = new Form();
      form0.setExtends(""org.apache.commons.validator.Form"");
      FastHashMap fastHashMap0 = new FastHashMap();
      Form form1 = new Form();
      Field field0 = new Field();
      form1.addField(field0);
      form1.process(fastHashMap0, fastHashMap0, fastHashMap0);
      fastHashMap0.put(""org.apache.commons.validator.Form"", form1);
      form0.process(fastHashMap0, fastHashMap0, fastHashMap0);
}"
303,"    public boolean isExtending() {
        return inherit != null;
    }","  public void test53()  throws Throwable  {
      Form form0 = new Form();
      form0.setExtends(""Y),~3S-8F.6}7T"");
      FastHashMap fastHashMap0 = new FastHashMap(570, 570);
      form0.process(fastHashMap0, fastHashMap0, fastHashMap0);
}"
304,"    public boolean isProcessed() {
        return processed;
    }","  public void test54()  throws Throwable  {
      Form form0 = new Form();
}"
305,"    public boolean isProcessed() {
        return processed;
    }","  public void test55()  throws Throwable  {
      Form form0 = new Form();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FastHashMap fastHashMap0 = new FastHashMap();
      form0.process(hashMap0, hashMap0, fastHashMap0);
      form0.process(fastHashMap0, hashMap0, fastHashMap0);
}"
306,"    public boolean containsField(String fieldName) {
        return getFieldMap().containsKey(fieldName);
    }","  public void test56()  throws Throwable  {
      Form form0 = new Form();
      boolean boolean0 = form0.containsField(""pRLi>;*9w!UVsZ'7*i"");
}"
307,"    public boolean isProcessed() {
        return processed;
    }","  public void test57()  throws Throwable  {
      Form form0 = new Form();
      boolean boolean0 = form0.containsField(""pRLi>;*9w!UVsZ'7*i"");
}"
308,"    public boolean isProcessed() {
        return processed;
    }","  public void test58()  throws Throwable  {
      Form form0 = new Form();
      boolean boolean0 = form0.isProcessed();
}"
309,"    ValidatorResults validate(Map<String, Object> params, Map<String, ValidatorAction> actions, int page)
        throws ValidatorException {
        return validate(params, actions, page, null);
    }","  public void test59()  throws Throwable  {
      Form form0 = new Form();
      FastHashMap fastHashMap0 = new FastHashMap(570, 570);
      try { 
        form0.validate(fastHashMap0, fastHashMap0, 570, ""i2ry(S"");
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Unknown field i2ry(S in form null
         //
         verifyException(""org.apache.commons.validator.Form"", e);
      }
  }"
310,"    public boolean isProcessed() {
        return processed;
    }","  public void test60()  throws Throwable  {
      Form form0 = new Form();
      form0.getExtends();
}"
311,"    public boolean isProcessed() {
        return processed;
    }","  public void test61()  throws Throwable  {
      Form form0 = new Form();
      form0.getFieldMap();
}"
312,"    public void addField(Field f) {
        this.lFields.add(f);
        getFieldMap().put(f.getKey(), f);
    }","  public void test62()  throws Throwable  {
      Form form0 = new Form();
      List<Field> list0 = form0.getFields();
      form0.lFields = list0;
      Field field0 = new Field();
      // Undeclared exception!
      try { 
        form0.addField(field0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableCollection"", e);
      }
  }"
313,"    public ValidatorException() {
        super();
    }","  public void test0()  throws Throwable  {
      ValidatorException validatorException0 = new ValidatorException();
  }"
314,"    public ValidatorException() {
        super();
    }","  public void test1()  throws Throwable  {
      ValidatorException validatorException0 = new ValidatorException(""<((_n%Vq_s&>)K"");
  }"
315,"    public void addArg(Arg arg) {
        // TODO this first if check can go away after arg0, etc. are removed from dtd
        if (arg == null || arg.getKey() == null || arg.getKey().length() == 0) {
            return;
        }

        determineArgPosition(arg);
        ensureArgsCapacity(arg);

        Map<String, Arg> argMap = this.args[arg.getPosition()];
        if (argMap == null) {
            argMap = new HashMap<>();
            this.args[arg.getPosition()] = argMap;
        }

        if (arg.getName() == null) {
            argMap.put(DEFAULT_ARG, arg);
        } else {
            argMap.put(arg.getName(), arg);
        }

    }","  public void test0()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hVars;
      Arg arg0 = new Arg();
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 13);
      mapArray0[0] = (Map<String, Arg>) fastHashMap0;
      mapArray0[4] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      arg0.setKey(""var:"");
      field0.addArg(arg0);
}"
316,"    public void addArg(Arg arg) {
        // TODO this first if check can go away after arg0, etc. are removed from dtd
        if (arg == null || arg.getKey() == null || arg.getKey().length() == 0) {
            return;
        }

        determineArgPosition(arg);
        ensureArgsCapacity(arg);

        Map<String, Arg> argMap = this.args[arg.getPosition()];
        if (argMap == null) {
            argMap = new HashMap<>();
            this.args[arg.getPosition()] = argMap;
        }

        if (arg.getName() == null) {
            argMap.put(DEFAULT_ARG, arg);
        } else {
            argMap.put(arg.getName(), arg);
        }

    }","  public void test1()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hVars;
      Arg arg0 = new Arg();
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 13);
      mapArray0[0] = (Map<String, Arg>) fastHashMap0;
      mapArray0[4] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      arg0.setKey(""var:"");
      field0.addArg(arg0);
      Arg arg1 = new Arg();
      arg1.setKey(""var:"");
      field0.addArg(arg1);
}"
317,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test2()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.setKey(""[]"");
      arg0.setPosition(0);
      field0.addArg(arg0);
}"
318,"    public int getPage() {
        return this.page;
    }","  public void test3()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.setKey(""[]"");
      arg0.setPosition(0);
      field0.addArg(arg0);
}"
319,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test4()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.setKey(""[]"");
      arg0.setPosition(0);
      field0.addArg(arg0);
}"
320,"    public String getIndexedProperty() {
        return this.indexedProperty;
    }","  public void test5()  throws Throwable  {
      Field field0 = new Field();
      field0.indexedListProperty = ""  Using converter "";
      try { 
        field0.getIndexedProperty((Object) field0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Unknown property '  Using converter ' on class 'class org.apache.commons.validator.Field'
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
321,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test6()  throws Throwable  {
      Field field0 = new Field();
}"
322,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test7()  throws Throwable  {
      Field field0 = new Field();
      field0.setClientValidation(false);
      boolean boolean0 = field0.isClientValidation();
}"
323,"    public String getVarValue(String mainKey) {
        String value = null;

        Var v = getVarMap().get(mainKey);
        if (v != null) {
            value = v.getValue();
        }

        return value;
    }","  public void test8()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar("""", """", """");
      String string0 = field0.getVarValue("""");
}"
324,"    public int getPage() {
        return this.page;
    }","  public void test9()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar("""", """", """");
      String string0 = field0.getVarValue("""");
}"
325,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test10()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar("""", """", """");
      String string0 = field0.getVarValue("""");
}"
326,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test11()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar("""", """", """");
      String string0 = field0.getVarValue("""");
}"
327,"    public String getVarValue(String mainKey) {
        String value = null;

        Var v = getVarMap().get(mainKey);
        if (v != null) {
            value = v.getValue();
        }

        return value;
    }","  public void test12()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar("""", """", """");
      String string0 = field0.getVarValue("""");
}"
328,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test13()  throws Throwable  {
      Field field0 = new Field();
      field0.hVars = null;
      field0.getVarMap();
}"
329,"    public int getPage() {
        return this.page;
    }","  public void test14()  throws Throwable  {
      Field field0 = new Field();
      field0.hVars = null;
      field0.getVarMap();
}"
330,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test15()  throws Throwable  {
      Field field0 = new Field();
      field0.hVars = null;
      field0.getVarMap();
}"
331,"    public int getPage() {
        return this.page;
    }","  public void test16()  throws Throwable  {
      Field field0 = new Field();
      field0.getVarMap();
}"
332,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test17()  throws Throwable  {
      Field field0 = new Field();
      field0.getVarMap();
}"
333,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test18()  throws Throwable  {
      Field field0 = new Field();
      field0.getVarMap();
}"
334,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test19()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar(""tL](j{T"", ""  key="", ""org.apache.commons.validator.ValidatorResults"");
      field0.getVarMap();
}"
335,"    public int getPage() {
        return this.page;
    }","  public void test20()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar(""tL](j{T"", ""  key="", ""org.apache.commons.validator.ValidatorResults"");
      field0.getVarMap();
}"
336,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test21()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar(""tL](j{T"", ""  key="", ""org.apache.commons.validator.ValidatorResults"");
      field0.getVarMap();
}"
337,"    public Var getVar(String mainKey) {
        return getVarMap().get(mainKey);
    }","  public void test22()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar(""~"", ""~"", ""~"");
      Var var0 = field0.getVar(""~"");
}"
338,"    public Var getVar(String mainKey) {
        return getVarMap().get(mainKey);
    }","  public void test23()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar(""~"", ""~"", ""~"");
      Var var0 = field0.getVar(""~"");
}"
339,"    public Var getVar(String mainKey) {
        return getVarMap().get(mainKey);
    }","  public void test24()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar(""~"", ""~"", ""~"");
      Var var0 = field0.getVar(""~"");
}"
340,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test25()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar(""~"", ""~"", ""~"");
      Var var0 = field0.getVar(""~"");
}"
341,"    public int getPage() {
        return this.page;
    }","  public void test26()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar(""~"", ""~"", ""~"");
      Var var0 = field0.getVar(""~"");
}"
342,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test27()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar(""~"", ""~"", ""~"");
      Var var0 = field0.getVar(""~"");
}"
343,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test28()  throws Throwable  {
      Field field0 = new Field();
      field0.property = ""org.apache.commons.collections.FastHashMap"";
      String string0 = field0.getProperty();
}"
344,"    public String getProperty() {
        return this.property;
    }","  public void test29()  throws Throwable  {
      Field field0 = new Field();
      field0.property = ""org.apache.commons.collections.FastHashMap"";
      String string0 = field0.getProperty();
}"
345,"    public String getProperty() {
        return this.property;
    }","  public void test30()  throws Throwable  {
      Field field0 = new Field();
      field0.property = ""org.apache.commons.collections.FastHashMap"";
      String string0 = field0.getProperty();
}"
346,"    public int getPage() {
        return this.page;
    }","  public void test31()  throws Throwable  {
      Field field0 = new Field();
      field0.property = ""org.apache.commons.collections.FastHashMap"";
      String string0 = field0.getProperty();
}"
347,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test32()  throws Throwable  {
      Field field0 = new Field();
      field0.property = ""org.apache.commons.collections.FastHashMap"";
      String string0 = field0.getProperty();
}"
348,"    public String getProperty() {
        return this.property;
    }","  public void test33()  throws Throwable  {
      Field field0 = new Field();
      field0.property = """";
      String string0 = field0.getProperty();
}"
349,"    public int getPage() {
        return this.page;
    }","  public void test34()  throws Throwable  {
      Field field0 = new Field();
      field0.property = """";
      String string0 = field0.getProperty();
}"
350,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test35()  throws Throwable  {
      Field field0 = new Field();
      field0.property = """";
      String string0 = field0.getProperty();
}"
351,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test36()  throws Throwable  {
      Field field0 = new Field();
      field0.property = """";
      String string0 = field0.getProperty();
}"
352,"    public String getProperty() {
        return this.property;
    }","  public void test37()  throws Throwable  {
      Field field0 = new Field();
      field0.property = """";
      String string0 = field0.getProperty();
}"
353,"    public int getPage() {
        return this.page;
    }","  public void test38()  throws Throwable  {
      Field field0 = new Field();
      field0.setPage(10);
      int int0 = field0.getPage();
}"
354,"    public int getPage() {
        return this.page;
    }","  public void test39()  throws Throwable  {
      Field field0 = new Field();
      field0.setPage((-1));
      int int0 = field0.getPage();
}"
355,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test40()  throws Throwable  {
      Field field0 = new Field();
      field0.hMsgs = null;
      field0.getMsgMap();
}"
356,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test41()  throws Throwable  {
      Field field0 = new Field();
      field0.hMsgs = null;
      field0.getMsgMap();
}"
357,"    public int getPage() {
        return this.page;
    }","  public void test42()  throws Throwable  {
      Field field0 = new Field();
      field0.hMsgs = null;
      field0.getMsgMap();
}"
358,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test43()  throws Throwable  {
      Field field0 = new Field();
      field0.getMsgMap();
}"
359,"    public int getPage() {
        return this.page;
    }","  public void test44()  throws Throwable  {
      Field field0 = new Field();
      field0.getMsgMap();
}"
360,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test45()  throws Throwable  {
      Field field0 = new Field();
      field0.getMsgMap();
}"
361,"    public int getPage() {
        return this.page;
    }","  public void test46()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hMsgs;
      Integer integer0 = new Integer((-2068));
      fastHashMap0.put(integer0, (Object) null);
      field0.getMsgMap();
}"
362,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test47()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hMsgs;
      Integer integer0 = new Integer((-2068));
      fastHashMap0.put(integer0, (Object) null);
      field0.getMsgMap();
}"
363,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test48()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hMsgs;
      Integer integer0 = new Integer((-2068));
      fastHashMap0.put(integer0, (Object) null);
      field0.getMsgMap();
}"
364,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test49()  throws Throwable  {
      Field field0 = new Field();
      Msg msg0 = new Msg();
      msg0.setKey(""G' LLTkp,"");
      field0.addMsg(msg0);
      String string0 = field0.getMsg((String) null);
}"
365,"    public int getPage() {
        return this.page;
    }","  public void test50()  throws Throwable  {
      Field field0 = new Field();
      Msg msg0 = new Msg();
      msg0.setKey(""G' LLTkp,"");
      field0.addMsg(msg0);
      String string0 = field0.getMsg((String) null);
}"
366,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test51()  throws Throwable  {
      Field field0 = new Field();
      Msg msg0 = new Msg();
      msg0.setKey(""G' LLTkp,"");
      field0.addMsg(msg0);
      String string0 = field0.getMsg((String) null);
}"
367,"    public String getMsg(String key) {
        Msg msg = getMessage(key);
        return (msg == null) ? null : msg.getKey();
    }","  public void test52()  throws Throwable  {
      Field field0 = new Field();
      Msg msg0 = new Msg();
      msg0.setKey(""G' LLTkp,"");
      field0.addMsg(msg0);
      String string0 = field0.getMsg((String) null);
}"
368,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test53()  throws Throwable  {
      Field field0 = new Field();
      Msg msg0 = new Msg();
      msg0.name = ""[]"";
      field0.addMsg(msg0);
      Msg msg1 = field0.getMessage(""[]"");
}"
369,"    public int getPage() {
        return this.page;
    }","  public void test54()  throws Throwable  {
      Field field0 = new Field();
      Msg msg0 = new Msg();
      msg0.name = ""[]"";
      field0.addMsg(msg0);
      Msg msg1 = field0.getMessage(""[]"");
}"
370,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test55()  throws Throwable  {
      Field field0 = new Field();
      Msg msg0 = new Msg();
      msg0.name = ""[]"";
      field0.addMsg(msg0);
      Msg msg1 = field0.getMessage(""[]"");
}"
371,"    public Msg getMessage(String key) {
        return getMsgMap().get(key);
    }","  public void test56()  throws Throwable  {
      Field field0 = new Field();
      Msg msg0 = new Msg();
      msg0.name = ""[]"";
      field0.addMsg(msg0);
      Msg msg1 = field0.getMessage(""[]"");
}"
372,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test57()  throws Throwable  {
      Field field0 = new Field();
      Msg msg0 = new Msg();
      msg0.name = ""[]"";
      msg0.setResource(false);
      field0.addMsg(msg0);
      Msg msg1 = field0.getMessage(""[]"");
}"
373,"    public int getPage() {
        return this.page;
    }","  public void test58()  throws Throwable  {
      Field field0 = new Field();
      Msg msg0 = new Msg();
      msg0.name = ""[]"";
      msg0.setResource(false);
      field0.addMsg(msg0);
      Msg msg1 = field0.getMessage(""[]"");
}"
374,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test59()  throws Throwable  {
      Field field0 = new Field();
      Msg msg0 = new Msg();
      msg0.name = ""[]"";
      msg0.setResource(false);
      field0.addMsg(msg0);
      Msg msg1 = field0.getMessage(""[]"");
}"
375,"    public Msg getMessage(String key) {
        return getMsgMap().get(key);
    }","  public void test60()  throws Throwable  {
      Field field0 = new Field();
      Msg msg0 = new Msg();
      msg0.name = ""[]"";
      msg0.setResource(false);
      field0.addMsg(msg0);
      Msg msg1 = field0.getMessage(""[]"");
}"
376,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test61()  throws Throwable  {
      Field field0 = new Field();
      field0.setProperty("""");
      String string0 = field0.getKey();
}"
377,"    public int getPage() {
        return this.page;
    }","  public void test62()  throws Throwable  {
      Field field0 = new Field();
      field0.setProperty("""");
      String string0 = field0.getKey();
}"
378,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test63()  throws Throwable  {
      Field field0 = new Field();
      field0.setProperty("""");
      String string0 = field0.getKey();
}"
379,"    public String getKey() {
        if (this.key == null) {
            this.generateKey();
        }

        return this.key;
    }","  public void test64()  throws Throwable  {
      Field field0 = new Field();
      field0.setProperty("""");
      String string0 = field0.getKey();
}"
380,"    public String getKey() {
        if (this.key == null) {
            this.generateKey();
        }

        return this.key;
    }","  public void test65()  throws Throwable  {
      Field field0 = new Field();
      field0.setProperty("""");
      String string0 = field0.getKey();
}"
381,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test66()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedProperty(""\t\tpage = "");
      String string0 = field0.getIndexedProperty();
}"
382,"    public int getPage() {
        return this.page;
    }","  public void test67()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedProperty(""\t\tpage = "");
      String string0 = field0.getIndexedProperty();
}"
383,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test68()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedProperty(""\t\tpage = "");
      String string0 = field0.getIndexedProperty();
}"
384,"    public String getIndexedProperty() {
        return this.indexedProperty;
    }","  public void test69()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedProperty(""\t\tpage = "");
      String string0 = field0.getIndexedProperty();
}"
385,"    public String getIndexedProperty() {
        return this.indexedProperty;
    }","  public void test70()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedProperty(""\t\tpage = "");
      String string0 = field0.getIndexedProperty();
}"
386,"    public String getIndexedProperty() {
        return this.indexedProperty;
    }","  public void test71()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedProperty("""");
      String string0 = field0.getIndexedProperty();
}"
387,"    public int getPage() {
        return this.page;
    }","  public void test72()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedProperty("""");
      String string0 = field0.getIndexedProperty();
}"
388,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test73()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedProperty("""");
      String string0 = field0.getIndexedProperty();
}"
389,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test74()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedProperty("""");
      String string0 = field0.getIndexedProperty();
}"
390,"    public String getIndexedProperty() {
        return this.indexedProperty;
    }","  public void test75()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedProperty("""");
      String string0 = field0.getIndexedProperty();
}"
391,"    public boolean isIndexed() {
        return (indexedListProperty != null && indexedListProperty.length() > 0);
    }","  public void test76()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedListProperty(""\t\tVars:\n"");
      field0.getIndexedListProperty();
}"
392,"    public String getIndexedListProperty() {
        return this.indexedListProperty;
    }","  public void test77()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedListProperty("""");
      String string0 = field0.getIndexedListProperty();
}"
393,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test78()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedListProperty("""");
      String string0 = field0.getIndexedListProperty();
}"
394,"    public int getPage() {
        return this.page;
    }","  public void test79()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedListProperty("""");
      String string0 = field0.getIndexedListProperty();
}"
395,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test80()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedListProperty("""");
      String string0 = field0.getIndexedListProperty();
}"
396,"    public String getIndexedListProperty() {
        return this.indexedListProperty;
    }","  public void test81()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedListProperty("""");
      String string0 = field0.getIndexedListProperty();
}"
397,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test82()  throws Throwable  {
      Field field0 = new Field();
      field0.setFieldOrder(1997);
      int int0 = field0.getFieldOrder();
}"
398,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test83()  throws Throwable  {
      Field field0 = new Field();
      field0.setFieldOrder((-899));
      int int0 = field0.getFieldOrder();
}"
399,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test84()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends(""[]"");
      String string0 = field0.getDepends();
}"
400,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test85()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends(""[]"");
      String string0 = field0.getDepends();
}"
401,"    public String getDepends() {
        return this.depends;
    }","  public void test86()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends(""[]"");
      String string0 = field0.getDepends();
}"
402,"    public int getPage() {
        return this.page;
    }","  public void test87()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends(""[]"");
      String string0 = field0.getDepends();
}"
403,"    public String getDepends() {
        return this.depends;
    }","  public void test88()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends(""[]"");
      String string0 = field0.getDepends();
}"
404,"    public String getDepends() {
        return this.depends;
    }","  public void test89()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends("""");
      String string0 = field0.getDepends();
}"
405,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test90()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends("""");
      String string0 = field0.getDepends();
}"
406,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test91()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends("""");
      String string0 = field0.getDepends();
}"
407,"    public String getDepends() {
        return this.depends;
    }","  public void test92()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends("""");
      String string0 = field0.getDepends();
}"
408,"    public int getPage() {
        return this.page;
    }","  public void test93()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends("""");
      String string0 = field0.getDepends();
}"
409,"    public void addArg(Arg arg) {
        // TODO this first if check can go away after arg0, etc. are removed from dtd
        if (arg == null || arg.getKey() == null || arg.getKey().length() == 0) {
            return;
        }

        determineArgPosition(arg);
        ensureArgsCapacity(arg);

        Map<String, Arg> argMap = this.args[arg.getPosition()];
        if (argMap == null) {
            argMap = new HashMap<>();
            this.args[arg.getPosition()] = argMap;
        }

        if (arg.getName() == null) {
            argMap.put(DEFAULT_ARG, arg);
        } else {
            argMap.put(arg.getName(), arg);
        }

    }","  public void test94()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hVars;
      Arg arg0 = new Arg();
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 6);
      mapArray0[0] = (Map<String, Arg>) fastHashMap0;
      arg0.resource = false;
      mapArray0[5] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      arg0.setKey(""var:"");
      field0.addArg(arg0);
}"
410,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test95()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hVars;
      Arg arg0 = new Arg();
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 6);
      mapArray0[0] = (Map<String, Arg>) fastHashMap0;
      arg0.resource = false;
      mapArray0[5] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      arg0.setKey(""var:"");
      field0.addArg(arg0);
      field0.getArg(""${Var:"", 5);
}"
411,"    public void addArg(Arg arg) {
        // TODO this first if check can go away after arg0, etc. are removed from dtd
        if (arg == null || arg.getKey() == null || arg.getKey().length() == 0) {
            return;
        }

        determineArgPosition(arg);
        ensureArgsCapacity(arg);

        Map<String, Arg> argMap = this.args[arg.getPosition()];
        if (argMap == null) {
            argMap = new HashMap<>();
            this.args[arg.getPosition()] = argMap;
        }

        if (arg.getName() == null) {
            argMap.put(DEFAULT_ARG, arg);
        } else {
            argMap.put(arg.getName(), arg);
        }

    }","  public void test96()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.setResource(false);
      arg0.setPosition(964);
      arg0.key = ""mCT#Bq2s0M&6S$nDy"";
      field0.addArg(arg0);
}"
412,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test97()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.setResource(false);
      arg0.setPosition(964);
      arg0.key = ""mCT#Bq2s0M&6S$nDy"";
      field0.addArg(arg0);
      field0.getArg(964);
}"
413,"    public void addArg(Arg arg) {
        // TODO this first if check can go away after arg0, etc. are removed from dtd
        if (arg == null || arg.getKey() == null || arg.getKey().length() == 0) {
            return;
        }

        determineArgPosition(arg);
        ensureArgsCapacity(arg);

        Map<String, Arg> argMap = this.args[arg.getPosition()];
        if (argMap == null) {
            argMap = new HashMap<>();
            this.args[arg.getPosition()] = argMap;
        }

        if (arg.getName() == null) {
            argMap.put(DEFAULT_ARG, arg);
        } else {
            argMap.put(arg.getName(), arg);
        }

    }","  public void test98()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.setKey(""var:"");
      field0.addArg(arg0);
}"
414,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test99()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.setKey(""var:"");
      field0.addArg(arg0);
      field0.getArg(0);
}"
415,"    public ValidatorResults validate(Map<String, Object> params, Map<String, ValidatorAction> actions)
        throws ValidatorException {

        if (this.getDepends() == null) {
            return new ValidatorResults();
        }

        ValidatorResults allResults = new ValidatorResults();

        Object bean = params.get(Validator.BEAN_PARAM);
        int numberOfFieldsToValidate =
            this.isIndexed() ? this.getIndexedPropertySize(bean) : 1;

        for (int fieldNumber = 0; fieldNumber < numberOfFieldsToValidate; fieldNumber++) {

            ValidatorResults results = new ValidatorResults();
            synchronized(dependencyList) {
                Iterator<String> dependencies = this.dependencyList.iterator();
                while (dependencies.hasNext()) {
                    String depend = dependencies.next();

                    ValidatorAction action = actions.get(depend);
                    if (action == null) {
                        this.handleMissingAction(depend);
                    }

                    boolean good =
                        validateForRule(action, results, actions, params, fieldNumber);

                    if (!good) {
                        allResults.merge(results);
                        return allResults;
                    }
                }
            }
            allResults.merge(results);
        }

        return allResults;
    }","  public void test100()  throws Throwable  {
      Field field0 = new Field();
      field0.depends = "":?Z9RX;"";
      HashMap<String, ValidatorAction> hashMap0 = new HashMap<String, ValidatorAction>();
      // Undeclared exception!
      try { 
        field0.validate((Map<String, Object>) null, hashMap0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
416,"    public ValidatorResults validate(Map<String, Object> params, Map<String, ValidatorAction> actions)
        throws ValidatorException {

        if (this.getDepends() == null) {
            return new ValidatorResults();
        }

        ValidatorResults allResults = new ValidatorResults();

        Object bean = params.get(Validator.BEAN_PARAM);
        int numberOfFieldsToValidate =
            this.isIndexed() ? this.getIndexedPropertySize(bean) : 1;

        for (int fieldNumber = 0; fieldNumber < numberOfFieldsToValidate; fieldNumber++) {

            ValidatorResults results = new ValidatorResults();
            synchronized(dependencyList) {
                Iterator<String> dependencies = this.dependencyList.iterator();
                while (dependencies.hasNext()) {
                    String depend = dependencies.next();

                    ValidatorAction action = actions.get(depend);
                    if (action == null) {
                        this.handleMissingAction(depend);
                    }

                    boolean good =
                        validateForRule(action, results, actions, params, fieldNumber);

                    if (!good) {
                        allResults.merge(results);
                        return allResults;
                    }
                }
            }
            allResults.merge(results);
        }

        return allResults;
    }","  public void test101()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends(""Ytpd9,A:"");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        field0.validate(hashMap0, (Map<String, ValidatorAction>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
417,"    public ValidatorResults validate(Map<String, Object> params, Map<String, ValidatorAction> actions)
        throws ValidatorException {

        if (this.getDepends() == null) {
            return new ValidatorResults();
        }

        ValidatorResults allResults = new ValidatorResults();

        Object bean = params.get(Validator.BEAN_PARAM);
        int numberOfFieldsToValidate =
            this.isIndexed() ? this.getIndexedPropertySize(bean) : 1;

        for (int fieldNumber = 0; fieldNumber < numberOfFieldsToValidate; fieldNumber++) {

            ValidatorResults results = new ValidatorResults();
            synchronized(dependencyList) {
                Iterator<String> dependencies = this.dependencyList.iterator();
                while (dependencies.hasNext()) {
                    String depend = dependencies.next();

                    ValidatorAction action = actions.get(depend);
                    if (action == null) {
                        this.handleMissingAction(depend);
                    }

                    boolean good =
                        validateForRule(action, results, actions, params, fieldNumber);

                    if (!good) {
                        allResults.merge(results);
                        return allResults;
                    }
                }
            }
            allResults.merge(results);
        }

        return allResults;
    }","  public void test102()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends(""ZX*v/J7K9=dPN"");
      FastHashMap fastHashMap0 = new FastHashMap();
      fastHashMap0.put(""ZX*v/J7K9=dPN"", field0);
      // Undeclared exception!
      try { 
        field0.validate(fastHashMap0, fastHashMap0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.validator.Field cannot be cast to org.apache.commons.validator.ValidatorAction
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
418,"    public void setDepends(String depends) {
        this.depends = depends;

        this.dependencyList.clear();

        StringTokenizer st = new StringTokenizer(depends, "","");
        while (st.hasMoreTokens()) {
            String depend = st.nextToken().trim();

            if (depend != null && depend.length() > 0) {
                this.dependencyList.add(depend);
            }
        }
    }","  public void test103()  throws Throwable  {
      Field field0 = new Field();
      // Undeclared exception!
      try { 
        field0.setDepends((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.StringTokenizer"", e);
      }
  }"
419,"    void process(Map<String, String> globalConstants, Map<String, String> constants) {
        this.hMsgs.setFast(false);
        this.hVars.setFast(true);

        this.generateKey();

        // Process FormSet Constants
        for (Iterator<Entry<String, String>> i = constants.entrySet().iterator(); i.hasNext();) {
            Entry<String, String> entry = i.next();
            String key1 = entry.getKey();
            String key2 = TOKEN_START + key1 + TOKEN_END;
            String replaceValue = entry.getValue();

            property = ValidatorUtils.replace(property, key2, replaceValue);

            processVars(key2, replaceValue);

            this.processMessageComponents(key2, replaceValue);
        }

        // Process Global Constants
        for (Iterator<Entry<String, String>> i = globalConstants.entrySet().iterator(); i.hasNext();) {
            Entry<String, String> entry = i.next();
            String key1 = entry.getKey();
            String key2 = TOKEN_START + key1 + TOKEN_END;
            String replaceValue = entry.getValue();

            property = ValidatorUtils.replace(property, key2, replaceValue);

            processVars(key2, replaceValue);

            this.processMessageComponents(key2, replaceValue);
        }

        // Process Var Constant Replacement
        for (Iterator<String> i = getVarMap().keySet().iterator(); i.hasNext();) {
            String key1 = i.next();
            String key2 = TOKEN_START + TOKEN_VAR + key1 + TOKEN_END;
            Var var = this.getVar(key1);
            String replaceValue = var.getValue();

            this.processMessageComponents(key2, replaceValue);
        }

        hMsgs.setFast(true);
    }","  public void test104()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hMsgs;
      // Undeclared exception!
      try { 
        field0.process(fastHashMap0, (Map<String, String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
420,"    void process(Map<String, String> globalConstants, Map<String, String> constants) {
        this.hMsgs.setFast(false);
        this.hVars.setFast(true);

        this.generateKey();

        // Process FormSet Constants
        for (Iterator<Entry<String, String>> i = constants.entrySet().iterator(); i.hasNext();) {
            Entry<String, String> entry = i.next();
            String key1 = entry.getKey();
            String key2 = TOKEN_START + key1 + TOKEN_END;
            String replaceValue = entry.getValue();

            property = ValidatorUtils.replace(property, key2, replaceValue);

            processVars(key2, replaceValue);

            this.processMessageComponents(key2, replaceValue);
        }

        // Process Global Constants
        for (Iterator<Entry<String, String>> i = globalConstants.entrySet().iterator(); i.hasNext();) {
            Entry<String, String> entry = i.next();
            String key1 = entry.getKey();
            String key2 = TOKEN_START + key1 + TOKEN_END;
            String replaceValue = entry.getValue();

            property = ValidatorUtils.replace(property, key2, replaceValue);

            processVars(key2, replaceValue);

            this.processMessageComponents(key2, replaceValue);
        }

        // Process Var Constant Replacement
        for (Iterator<String> i = getVarMap().keySet().iterator(); i.hasNext();) {
            String key1 = i.next();
            String key2 = TOKEN_START + TOKEN_VAR + key1 + TOKEN_END;
            Var var = this.getVar(key1);
            String replaceValue = var.getValue();

            this.processMessageComponents(key2, replaceValue);
        }

        hMsgs.setFast(true);
    }","  public void test105()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = new FastHashMap();
      fastHashMap0.put(field0, (Object) null);
      // Undeclared exception!
      try { 
        field0.process(fastHashMap0, fastHashMap0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.validator.Field cannot be cast to java.lang.String
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
421,"    public Map<String, Var> getVars() {
        return Collections.unmodifiableMap(getVarMap());
    }","  public void test106()  throws Throwable  {
      Field field0 = new Field();
      field0.hVars = null;
      // Undeclared exception!
      try { 
        field0.getVars();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableMap"", e);
      }
  }"
422,"    public String getVarValue(String mainKey) {
        String value = null;

        Var v = getVarMap().get(mainKey);
        if (v != null) {
            value = v.getValue();
        }

        return value;
    }","  public void test107()  throws Throwable  {
      Field field0 = new Field();
      field0.hVars = null;
      // Undeclared exception!
      try { 
        field0.getVarValue(""pxZng7aG"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
423,"    public Var getVar(String mainKey) {
        return getVarMap().get(mainKey);
    }","  public void test108()  throws Throwable  {
      Field field0 = new Field();
      field0.hVars = null;
      // Undeclared exception!
      try { 
        field0.getVar(""[]"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
424,"    public Var getVar(String mainKey) {
        return getVarMap().get(mainKey);
    }","  public void test109()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hVars;
      Arg arg0 = new Arg();
      arg0.setName(""[]"");
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 6);
      mapArray0[0] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      arg0.setKey(""var:"");
      field0.addArg(arg0);
      // Undeclared exception!
      try { 
        field0.getVar(""[]"");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.validator.Arg cannot be cast to org.apache.commons.validator.Var
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
425,"    public String getMsg(String key) {
        Msg msg = getMessage(key);
        return (msg == null) ? null : msg.getKey();
    }","  public void test110()  throws Throwable  {
      Field field0 = new Field();
      field0.hMsgs = null;
      // Undeclared exception!
      try { 
        field0.getMsg(""\t\tkey = null\n\t\tproperty = null\n\t\tindexedProperty = null\n\t\tindexedListProperty = null\n\t\tdepends = null\n\t\tpage = 0\n\t\tfieldOrder = 0\n\t\tVars:\n"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
426,"    public String getMsg(String key) {
        Msg msg = getMessage(key);
        return (msg == null) ? null : msg.getKey();
    }","  public void test111()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hMsgs;
      fastHashMap0.put((Object) null, field0);
      // Undeclared exception!
      try { 
        field0.getMsg((String) null);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.validator.Field cannot be cast to org.apache.commons.validator.Msg
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
427,"    public Map<String, Msg> getMessages() {
        return Collections.unmodifiableMap(getMsgMap());
    }","  public void test112()  throws Throwable  {
      Field field0 = new Field();
      field0.hMsgs = null;
      // Undeclared exception!
      try { 
        field0.getMessages();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableMap"", e);
      }
  }"
428,"    public Msg getMessage(String key) {
        return getMsgMap().get(key);
    }","  public void test113()  throws Throwable  {
      Field field0 = new Field();
      field0.hMsgs = null;
      // Undeclared exception!
      try { 
        field0.getMessage(""\t\tVars:\n"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
429,"    public Msg getMessage(String key) {
        return getMsgMap().get(key);
    }","  public void test114()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hMsgs;
      fastHashMap0.put("""", field0);
      // Undeclared exception!
      try { 
        field0.getMessage("""");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.validator.Field cannot be cast to org.apache.commons.validator.Msg
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
430,"    public String getIndexedProperty() {
        return this.indexedProperty;
    }","  public void test115()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = new FastHashMap();
      field0.setIndexedListProperty(""2L{3N>5&^*AJi|."");
      // Undeclared exception!
      try { 
        field0.getIndexedProperty((Object) fastHashMap0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Null property value for '2L{3N>5&^*AJi|.' on bean class 'class org.apache.commons.collections.FastHashMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
431,"    public String getIndexedProperty() {
        return this.indexedProperty;
    }","  public void test116()  throws Throwable  {
      Field field0 = new Field();
      // Undeclared exception!
      try { 
        field0.getIndexedProperty((Object) field0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class org.apache.commons.validator.Field'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
432,"    public Arg[] getArgs(String key){
        Arg[] argList = new Arg[this.args.length];

        for (int i = 0; i < this.args.length; i++) {
            argList[i] = this.getArg(key, i);
        }

        return argList;
    }","  public void test117()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hMsgs;
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 6);
      mapArray0[0] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      // Undeclared exception!
      try { 
        field0.getArgs((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
433,"    public Arg[] getArgs(String key){
        Arg[] argList = new Arg[this.args.length];

        for (int i = 0; i < this.args.length; i++) {
            argList[i] = this.getArg(key, i);
        }

        return argList;
    }","  public void test118()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hMsgs;
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 6);
      mapArray0[1] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      fastHashMap0.put((Object) null, """");
      // Undeclared exception!
      try { 
        field0.getArgs((String) null);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.apache.commons.validator.Arg
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
434,"    public Arg getArg(int position) {
        return this.getArg(DEFAULT_ARG, position);
    }","  public void test119()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hVars;
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 6);
      mapArray0[5] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      fastHashMap0.put(""${Var:"", fastHashMap0);
      // Undeclared exception!
      try { 
        field0.getArg(""${Var:"", 5);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections.FastHashMap cannot be cast to org.apache.commons.validator.Arg
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
435,"    public Arg getArg(int position) {
        return this.getArg(DEFAULT_ARG, position);
    }","  public void test120()  throws Throwable  {
      Field field0 = new Field();
      // Undeclared exception!
      try { 
        field0.getArg(""\""$\""Q&G]hxC"", (-1782));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1782
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
436,"    public Arg getArg(int position) {
        return this.getArg(DEFAULT_ARG, position);
    }","  public void test121()  throws Throwable  {
      Field field0 = new Field();
      field0.args = null;
      // Undeclared exception!
      try { 
        field0.getArg(2100);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
437,"    public Arg getArg(int position) {
        return this.getArg(DEFAULT_ARG, position);
    }","  public void test122()  throws Throwable  {
      Field field0 = new Field();
      // Undeclared exception!
      try { 
        field0.getArg((-131));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -131
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
438,"    public Object clone() {
        Field field = null;
        try {
            field = (Field) super.clone();
        } catch(CloneNotSupportedException e) {
            throw new RuntimeException(e.toString());
        }

        @SuppressWarnings(""unchecked"") // empty array always OK; cannot check this at compile time
        final Map<String, Arg>[] tempMap = new Map[this.args.length];
        field.args = tempMap;
        for (int i = 0; i < this.args.length; i++) {
            if (this.args[i] == null) {
                continue;
            }

            Map<String, Arg> argMap = new HashMap<>(this.args[i]);
            Iterator<Entry<String, Arg>> iter = argMap.entrySet().iterator();
            while (iter.hasNext()) {
                Entry<String, Arg> entry = iter.next();
                String validatorName = entry.getKey();
                Arg arg = entry.getValue();
                argMap.put(validatorName, (Arg) arg.clone());
            }
            field.args[i] = argMap;
        }

        field.hVars = ValidatorUtils.copyFastHashMap(hVars);
        field.hMsgs = ValidatorUtils.copyFastHashMap(hMsgs);

        return field;
    }","  public void test123()  throws Throwable  {
      Field field0 = new Field();
      field0.hMsgs = null;
      // Undeclared exception!
      try { 
        field0.clone();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.util.ValidatorUtils"", e);
      }
  }"
439,"    public Object clone() {
        Field field = null;
        try {
            field = (Field) super.clone();
        } catch(CloneNotSupportedException e) {
            throw new RuntimeException(e.toString());
        }

        @SuppressWarnings(""unchecked"") // empty array always OK; cannot check this at compile time
        final Map<String, Arg>[] tempMap = new Map[this.args.length];
        field.args = tempMap;
        for (int i = 0; i < this.args.length; i++) {
            if (this.args[i] == null) {
                continue;
            }

            Map<String, Arg> argMap = new HashMap<>(this.args[i]);
            Iterator<Entry<String, Arg>> iter = argMap.entrySet().iterator();
            while (iter.hasNext()) {
                Entry<String, Arg> entry = iter.next();
                String validatorName = entry.getKey();
                Arg arg = entry.getValue();
                argMap.put(validatorName, (Arg) arg.clone());
            }
            field.args[i] = argMap;
        }

        field.hVars = ValidatorUtils.copyFastHashMap(hVars);
        field.hMsgs = ValidatorUtils.copyFastHashMap(hMsgs);

        return field;
    }","  public void test124()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = new FastHashMap();
      fastHashMap0.put(field0, (Object) null);
      field0.hVars = fastHashMap0;
      // Undeclared exception!
      try { 
        field0.clone();
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.validator.Field cannot be cast to java.lang.String
         //
         verifyException(""org.apache.commons.validator.util.ValidatorUtils"", e);
      }
  }"
440,"    public void addVar(Var v) {
        this.getVarMap().put(v.getName(), v);
    }","  public void test125()  throws Throwable  {
      Field field0 = new Field();
      // Undeclared exception!
      try { 
        field0.addVar((Var) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
441,"    public void addVar(Var v) {
        this.getVarMap().put(v.getName(), v);
    }","  public void test126()  throws Throwable  {
      Field field0 = new Field();
      field0.hVars = null;
      // Undeclared exception!
      try { 
        field0.addVar("","", ""  bundle="", ""\t\tproperty = "");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
442,"    public void addMsg(Msg msg) {
        getMsgMap().put(msg.getName(), msg);
    }","  public void test127()  throws Throwable  {
      Field field0 = new Field();
      // Undeclared exception!
      try { 
        field0.addMsg((Msg) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
443,"    public int getPage() {
        return this.page;
    }","  public void test128()  throws Throwable  {
      Field field0 = new Field();
      field0.generateKey();
}"
444,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test129()  throws Throwable  {
      Field field0 = new Field();
      field0.generateKey();
}"
445,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test130()  throws Throwable  {
      Field field0 = new Field();
      field0.generateKey();
}"
446,"    public boolean isIndexed() {
        return (indexedListProperty != null && indexedListProperty.length() > 0);
    }","  public void test131()  throws Throwable  {
      Field field0 = new Field();
      field0.indexedListProperty = "","";
      field0.generateKey();
}"
447,"    public boolean isIndexed() {
        return (indexedListProperty != null && indexedListProperty.length() > 0);
    }","  public void test132()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedListProperty(""Yj6"");
      boolean boolean0 = field0.isIndexed();
}"
448,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test133()  throws Throwable  {
      Field field0 = new Field();
      field0.isIndexed();
}"
449,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test134()  throws Throwable  {
      Field field0 = new Field();
      field0.isIndexed();
}"
450,"    public int getPage() {
        return this.page;
    }","  public void test135()  throws Throwable  {
      Field field0 = new Field();
      field0.isIndexed();
}"
451,"    public void addArg(Arg arg) {
        // TODO this first if check can go away after arg0, etc. are removed from dtd
        if (arg == null || arg.getKey() == null || arg.getKey().length() == 0) {
            return;
        }

        determineArgPosition(arg);
        ensureArgsCapacity(arg);

        Map<String, Arg> argMap = this.args[arg.getPosition()];
        if (argMap == null) {
            argMap = new HashMap<>();
            this.args[arg.getPosition()] = argMap;
        }

        if (arg.getName() == null) {
            argMap.put(DEFAULT_ARG, arg);
        } else {
            argMap.put(arg.getName(), arg);
        }

    }","  public void test136()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.key = ""${var:${org.apache.commons.validator.Field.DEFAULT}"";
      arg0.position = 2153;
      field0.addArg(arg0);
}"
452,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test137()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.key = ""${var:${org.apache.commons.validator.Field.DEFAULT}"";
      arg0.position = 2153;
      field0.addArg(arg0);
      field0.getArg(""org.apache.commons.validator.Field.DEFAULT"", 2153);
}"
453,"    public int getPage() {
        return this.page;
    }","  public void test138()  throws Throwable  {
      Field field0 = new Field();
      field0.getArg((String) null, 0);
}"
454,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test139()  throws Throwable  {
      Field field0 = new Field();
      field0.getArg((String) null, 0);
}"
455,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test140()  throws Throwable  {
      Field field0 = new Field();
      field0.getArg((String) null, 0);
}"
456,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test141()  throws Throwable  {
      Field field0 = new Field();
      field0.getVar(""class"");
}"
457,"    public int getPage() {
        return this.page;
    }","  public void test142()  throws Throwable  {
      Field field0 = new Field();
      field0.getVar(""class"");
}"
458,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test143()  throws Throwable  {
      Field field0 = new Field();
      field0.getVar(""class"");
}"
459,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test144()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getProperty();
}"
460,"    public String getProperty() {
        return this.property;
    }","  public void test145()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getProperty();
}"
461,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test146()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getProperty();
}"
462,"    public int getPage() {
        return this.page;
    }","  public void test147()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getProperty();
}"
463,"    public int getPage() {
        return this.page;
    }","  public void test148()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getDepends();
}"
464,"    public String getDepends() {
        return this.depends;
    }","  public void test149()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getDepends();
}"
465,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test150()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getDepends();
}"
466,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test151()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getDepends();
}"
467,"    public boolean isIndexed() {
        return (indexedListProperty != null && indexedListProperty.length() > 0);
    }","  public void test152()  throws Throwable  {
      Field field0 = new Field();
      field0.depends = ""[]"";
}"
468,"    public int getPage() {
        return this.page;
    }","  public void test153()  throws Throwable  {
      Field field0 = new Field();
      field0.depends = ""[]"";
      FastHashMap fastHashMap0 = field0.hMsgs;
      field0.validate(fastHashMap0, fastHashMap0);
}"
469,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test154()  throws Throwable  {
      Field field0 = new Field();
      field0.depends = ""[]"";
      FastHashMap fastHashMap0 = field0.hMsgs;
      field0.validate(fastHashMap0, fastHashMap0);
}"
470,"    public String getDepends() {
        return this.depends;
    }","  public void test155()  throws Throwable  {
      Field field0 = new Field();
      field0.depends = ""[]"";
      FastHashMap fastHashMap0 = field0.hMsgs;
      field0.validate(fastHashMap0, fastHashMap0);
}"
471,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test156()  throws Throwable  {
      Field field0 = new Field();
      field0.depends = ""[]"";
      FastHashMap fastHashMap0 = field0.hMsgs;
      field0.validate(fastHashMap0, fastHashMap0);
}"
472,"    public ValidatorResults validate(Map<String, Object> params, Map<String, ValidatorAction> actions)
        throws ValidatorException {

        if (this.getDepends() == null) {
            return new ValidatorResults();
        }

        ValidatorResults allResults = new ValidatorResults();

        Object bean = params.get(Validator.BEAN_PARAM);
        int numberOfFieldsToValidate =
            this.isIndexed() ? this.getIndexedPropertySize(bean) : 1;

        for (int fieldNumber = 0; fieldNumber < numberOfFieldsToValidate; fieldNumber++) {

            ValidatorResults results = new ValidatorResults();
            synchronized(dependencyList) {
                Iterator<String> dependencies = this.dependencyList.iterator();
                while (dependencies.hasNext()) {
                    String depend = dependencies.next();

                    ValidatorAction action = actions.get(depend);
                    if (action == null) {
                        this.handleMissingAction(depend);
                    }

                    boolean good =
                        validateForRule(action, results, actions, params, fieldNumber);

                    if (!good) {
                        allResults.merge(results);
                        return allResults;
                    }
                }
            }
            allResults.merge(results);
        }

        return allResults;
    }","  public void test157()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = new FastHashMap();
      field0.setIndexedListProperty(""[]"");
      field0.setDepends(""[]"");
      // Undeclared exception!
      try { 
        field0.validate(fastHashMap0, fastHashMap0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
473,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test158()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hVars;
      field0.validate(fastHashMap0, fastHashMap0);
}"
474,"    public int getPage() {
        return this.page;
    }","  public void test159()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hVars;
      field0.validate(fastHashMap0, fastHashMap0);
}"
475,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test160()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hVars;
      field0.validate(fastHashMap0, fastHashMap0);
}"
476,"    public String getIndexedProperty() {
        return this.indexedProperty;
    }","  public void test161()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = new FastHashMap();
      fastHashMap0.put("""", field0);
      field0.setIndexedListProperty("""");
      try { 
        field0.getIndexedProperty((Object) fastHashMap0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // null is not indexed
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
477,"    public String getIndexedProperty() {
        return this.indexedProperty;
    }","  public void test162()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = new FastHashMap();
      field0.setIndexedListProperty("""");
      // Undeclared exception!
      try { 
        field0.getIndexedProperty((Object) fastHashMap0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
478,"    public String toString() {
        StringBuilder results = new StringBuilder();

        results.append(""\t\tkey = "" + key + ""\n"");
        results.append(""\t\tproperty = "" + property + ""\n"");
        results.append(""\t\tindexedProperty = "" + indexedProperty + ""\n"");
        results.append(""\t\tindexedListProperty = "" + indexedListProperty + ""\n"");
        results.append(""\t\tdepends = "" + depends + ""\n"");
        results.append(""\t\tpage = "" + page + ""\n"");
        results.append(""\t\tfieldOrder = "" + fieldOrder + ""\n"");

        if (hVars != null) {
            results.append(""\t\tVars:\n"");
            for (Iterator<?> i = getVarMap().keySet().iterator(); i.hasNext();) {
                Object key1 = i.next();
                results.append(""\t\t\t"");
                results.append(key1);
                results.append(""="");
                results.append(getVarMap().get(key1));
                results.append(""\n"");
            }
        }

        return results.toString();
    }","  public void test163()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar(""~l"", ""~l"", ""~l"");
      String string0 = field0.toString();
}"
479,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test164()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar(""~l"", ""~l"", ""~l"");
      String string0 = field0.toString();
}"
480,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test165()  throws Throwable  {
      Field field0 = new Field();
      field0.hVars = null;
      String string0 = field0.toString();
}"
481,"    public String toString() {
        StringBuilder results = new StringBuilder();

        results.append(""\t\tkey = "" + key + ""\n"");
        results.append(""\t\tproperty = "" + property + ""\n"");
        results.append(""\t\tindexedProperty = "" + indexedProperty + ""\n"");
        results.append(""\t\tindexedListProperty = "" + indexedListProperty + ""\n"");
        results.append(""\t\tdepends = "" + depends + ""\n"");
        results.append(""\t\tpage = "" + page + ""\n"");
        results.append(""\t\tfieldOrder = "" + fieldOrder + ""\n"");

        if (hVars != null) {
            results.append(""\t\tVars:\n"");
            for (Iterator<?> i = getVarMap().keySet().iterator(); i.hasNext();) {
                Object key1 = i.next();
                results.append(""\t\t\t"");
                results.append(key1);
                results.append(""="");
                results.append(getVarMap().get(key1));
                results.append(""\n"");
            }
        }

        return results.toString();
    }","  public void test166()  throws Throwable  {
      Field field0 = new Field();
      field0.hVars = null;
      String string0 = field0.toString();
}"
482,"    public void addArg(Arg arg) {
        // TODO this first if check can go away after arg0, etc. are removed from dtd
        if (arg == null || arg.getKey() == null || arg.getKey().length() == 0) {
            return;
        }

        determineArgPosition(arg);
        ensureArgsCapacity(arg);

        Map<String, Arg> argMap = this.args[arg.getPosition()];
        if (argMap == null) {
            argMap = new HashMap<>();
            this.args[arg.getPosition()] = argMap;
        }

        if (arg.getName() == null) {
            argMap.put(DEFAULT_ARG, arg);
        } else {
            argMap.put(arg.getName(), arg);
        }

    }","  public void test167()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.key = ""${var:${org.apache.commons.validator.Field.DEFAULT}"";
      arg0.position = 2153;
      field0.addArg(arg0);
}"
483,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test168()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.key = ""${var:${org.apache.commons.validator.Field.DEFAULT}"";
      arg0.position = 2153;
      field0.addArg(arg0);
      field0.clone();
}"
484,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test169()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends(""[]"");
      boolean boolean0 = field0.isDependency(""[]"");
}"
485,"    public String getDepends() {
        return this.depends;
    }","  public void test170()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends(""[]"");
      boolean boolean0 = field0.isDependency(""[]"");
}"
486,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test171()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends(""[]"");
      boolean boolean0 = field0.isDependency(""[]"");
}"
487,"    public int getPage() {
        return this.page;
    }","  public void test172()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends(""[]"");
      boolean boolean0 = field0.isDependency(""[]"");
}"
488,"    public boolean isDependency(String validatorName) {
        return this.dependencyList.contains(validatorName);
    }","  public void test173()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends(""[]"");
      boolean boolean0 = field0.isDependency(""[]"");
}"
489,"    public int getPage() {
        return this.page;
    }","  public void test174()  throws Throwable  {
      Field field0 = new Field();
      boolean boolean0 = field0.isDependency(""org.apache.commons.validator.Arg"");
}"
490,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test175()  throws Throwable  {
      Field field0 = new Field();
      boolean boolean0 = field0.isDependency(""org.apache.commons.validator.Arg"");
}"
491,"    public boolean isDependency(String validatorName) {
        return this.dependencyList.contains(validatorName);
    }","  public void test176()  throws Throwable  {
      Field field0 = new Field();
      boolean boolean0 = field0.isDependency(""org.apache.commons.validator.Arg"");
}"
492,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test177()  throws Throwable  {
      Field field0 = new Field();
      boolean boolean0 = field0.isDependency(""org.apache.commons.validator.Arg"");
}"
493,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test178()  throws Throwable  {
      Field field0 = new Field();
      Field field1 = new Field();
      FastHashMap fastHashMap0 = field1.hVars;
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 3);
      mapArray0[0] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      fastHashMap0.put((Object) null, (Object) null);
      field0.process(fastHashMap0, fastHashMap0);
}"
494,"    public boolean isIndexed() {
        return (indexedListProperty != null && indexedListProperty.length() > 0);
    }","  public void test179()  throws Throwable  {
      Field field0 = new Field();
      Field field1 = new Field();
      FastHashMap fastHashMap0 = field1.hVars;
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 3);
      mapArray0[0] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      fastHashMap0.put((Object) null, (Object) null);
      field0.process(fastHashMap0, fastHashMap0);
}"
495,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test180()  throws Throwable  {
      Field field0 = new Field();
      Field field1 = new Field();
      FastHashMap fastHashMap0 = field1.hVars;
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 3);
      mapArray0[0] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      fastHashMap0.put((Object) null, (Object) null);
      field0.process(fastHashMap0, fastHashMap0);
}"
496,"    public int getPage() {
        return this.page;
    }","  public void test181()  throws Throwable  {
      Field field0 = new Field();
      Field field1 = new Field();
      FastHashMap fastHashMap0 = field1.hVars;
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 3);
      mapArray0[0] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      fastHashMap0.put((Object) null, (Object) null);
      field0.process(fastHashMap0, fastHashMap0);
}"
497,"    public int getPage() {
        return this.page;
    }","  public void test182()  throws Throwable  {
      Field field0 = new Field();
      Field field1 = new Field();
      FastHashMap fastHashMap0 = field1.hVars;
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 3);
      mapArray0[0] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      fastHashMap0.put((Object) null, (Object) null);
      field0.process(fastHashMap0, fastHashMap0);
}"
498,"    public void addArg(Arg arg) {
        // TODO this first if check can go away after arg0, etc. are removed from dtd
        if (arg == null || arg.getKey() == null || arg.getKey().length() == 0) {
            return;
        }

        determineArgPosition(arg);
        ensureArgsCapacity(arg);

        Map<String, Arg> argMap = this.args[arg.getPosition()];
        if (argMap == null) {
            argMap = new HashMap<>();
            this.args[arg.getPosition()] = argMap;
        }

        if (arg.getName() == null) {
            argMap.put(DEFAULT_ARG, arg);
        } else {
            argMap.put(arg.getName(), arg);
        }

    }","  public void test183()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.setKey(""[]"");
      field0.addArg(arg0);
}"
499,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test184()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.setKey(""[]"");
      field0.addArg(arg0);
      FastHashMap fastHashMap0 = new FastHashMap();
      fastHashMap0.put((Object) null, (Object) null);
      field0.process(fastHashMap0, fastHashMap0);
}"
500,"    public int getPage() {
        return this.page;
    }","  public void test185()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = new FastHashMap();
      Msg msg0 = new Msg();
      fastHashMap0.put(""[]"", ""[]"");
      field0.addMsg(msg0);
      field0.process(fastHashMap0, fastHashMap0);
}"
501,"    public String getDepends() {
        return this.depends;
    }","  public void test186()  throws Throwable  {
      Field field0 = new Field();
      Var var0 = new Var();
      Field field1 = new Field();
      FastHashMap fastHashMap0 = field1.hVars;
      field0.addVar(var0);
      fastHashMap0.put(""Var: name=null  value=null  resource=false  jsType=null\n"", ""int"");
      field0.process(fastHashMap0, fastHashMap0);
}"
502,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test187()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedListProperty("""");
      boolean boolean0 = field0.isIndexed();
}"
503,"    public int getPage() {
        return this.page;
    }","  public void test188()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedListProperty("""");
      boolean boolean0 = field0.isIndexed();
}"
504,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test189()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedListProperty("""");
      boolean boolean0 = field0.isIndexed();
}"
505,"    public boolean isIndexed() {
        return (indexedListProperty != null && indexedListProperty.length() > 0);
    }","  public void test190()  throws Throwable  {
      Field field0 = new Field();
      field0.setIndexedListProperty("""");
      boolean boolean0 = field0.isIndexed();
}"
506,"    public boolean isIndexed() {
        return (indexedListProperty != null && indexedListProperty.length() > 0);
    }","  public void test191()  throws Throwable  {
      Field field0 = new Field();
      field0.indexedListProperty = ""T@vvWm7)#-W!{Mrw=4E"";
      field0.getKey();
}"
507,"    public String getKey() {
        if (this.key == null) {
            this.generateKey();
        }

        return this.key;
    }","  public void test192()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getKey();
}"
508,"    public int getPage() {
        return this.page;
    }","  public void test193()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getKey();
}"
509,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test194()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getKey();
}"
510,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test195()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getKey();
}"
511,"    public String getKey() {
        if (this.key == null) {
            this.generateKey();
        }

        return this.key;
    }","  public void test196()  throws Throwable  {
      Field field0 = new Field();
      field0.key = ""~="";
      String string0 = field0.getKey();
}"
512,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test197()  throws Throwable  {
      Field field0 = new Field();
      field0.key = ""~="";
      String string0 = field0.getKey();
}"
513,"    public int getPage() {
        return this.page;
    }","  public void test198()  throws Throwable  {
      Field field0 = new Field();
      field0.key = ""~="";
      String string0 = field0.getKey();
}"
514,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test199()  throws Throwable  {
      Field field0 = new Field();
      field0.key = ""~="";
      String string0 = field0.getKey();
}"
515,"    public String getKey() {
        if (this.key == null) {
            this.generateKey();
        }

        return this.key;
    }","  public void test200()  throws Throwable  {
      Field field0 = new Field();
      field0.key = ""~="";
      String string0 = field0.getKey();
}"
516,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test201()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar(""[]"", ""[]"", ""qHV#-{\""Jtkd"");
      String string0 = field0.getVarValue(""[]"");
}"
517,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test202()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar(""[]"", ""[]"", ""qHV#-{\""Jtkd"");
      String string0 = field0.getVarValue(""[]"");
}"
518,"    public int getPage() {
        return this.page;
    }","  public void test203()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar(""[]"", ""[]"", ""qHV#-{\""Jtkd"");
      String string0 = field0.getVarValue(""[]"");
}"
519,"    public String getVarValue(String mainKey) {
        String value = null;

        Var v = getVarMap().get(mainKey);
        if (v != null) {
            value = v.getValue();
        }

        return value;
    }","  public void test204()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar(""[]"", ""[]"", ""qHV#-{\""Jtkd"");
      String string0 = field0.getVarValue(""[]"");
}"
520,"    public String getVarValue(String mainKey) {
        String value = null;

        Var v = getVarMap().get(mainKey);
        if (v != null) {
            value = v.getValue();
        }

        return value;
    }","  public void test205()  throws Throwable  {
      Field field0 = new Field();
      field0.addVar(""[]"", ""[]"", ""qHV#-{\""Jtkd"");
      String string0 = field0.getVarValue(""[]"");
}"
521,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test206()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getVarValue(""int"");
}"
522,"    public int getPage() {
        return this.page;
    }","  public void test207()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getVarValue(""int"");
}"
523,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test208()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getVarValue(""int"");
}"
524,"    public String getVarValue(String mainKey) {
        String value = null;

        Var v = getVarMap().get(mainKey);
        if (v != null) {
            value = v.getValue();
        }

        return value;
    }","  public void test209()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getVarValue(""int"");
}"
525,"    public int getPage() {
        return this.page;
    }","  public void test210()  throws Throwable  {
      Field field0 = new Field();
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 6);
      field0.args = mapArray0;
      field0.getArgs(""': "");
}"
526,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test211()  throws Throwable  {
      Field field0 = new Field();
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 6);
      field0.args = mapArray0;
      field0.getArgs(""': "");
}"
527,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test212()  throws Throwable  {
      Field field0 = new Field();
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 6);
      field0.args = mapArray0;
      field0.getArgs(""': "");
}"
528,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test213()  throws Throwable  {
      Field field0 = new Field();
      Arg[] argArray0 = field0.getArgs(""': "");
}"
529,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test214()  throws Throwable  {
      Field field0 = new Field();
      Arg[] argArray0 = field0.getArgs(""': "");
}"
530,"    public int getPage() {
        return this.page;
    }","  public void test215()  throws Throwable  {
      Field field0 = new Field();
      Arg[] argArray0 = field0.getArgs(""': "");
}"
531,"    public Arg[] getArgs(String key){
        Arg[] argList = new Arg[this.args.length];

        for (int i = 0; i < this.args.length; i++) {
            argList[i] = this.getArg(key, i);
        }

        return argList;
    }","  public void test216()  throws Throwable  {
      Field field0 = new Field();
      Arg[] argArray0 = field0.getArgs(""': "");
}"
532,"    public int getPage() {
        return this.page;
    }","  public void test217()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hVars;
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 6);
      mapArray0[5] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      field0.getArg(""${Var:"", 5);
}"
533,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test218()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hVars;
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 6);
      mapArray0[5] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      field0.getArg(""${Var:"", 5);
}"
534,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test219()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hVars;
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 6);
      mapArray0[5] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      field0.getArg(""${Var:"", 5);
}"
535,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test220()  throws Throwable  {
      Field field0 = new Field();
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 6);
      field0.args = mapArray0;
      field0.getArg(""fZ]:gS?"", 5);
}"
536,"    public int getPage() {
        return this.page;
    }","  public void test221()  throws Throwable  {
      Field field0 = new Field();
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 6);
      field0.args = mapArray0;
      field0.getArg(""fZ]:gS?"", 5);
}"
537,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test222()  throws Throwable  {
      Field field0 = new Field();
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 6);
      field0.args = mapArray0;
      field0.getArg(""fZ]:gS?"", 5);
}"
538,"    public void addArg(Arg arg) {
        // TODO this first if check can go away after arg0, etc. are removed from dtd
        if (arg == null || arg.getKey() == null || arg.getKey().length() == 0) {
            return;
        }

        determineArgPosition(arg);
        ensureArgsCapacity(arg);

        Map<String, Arg> argMap = this.args[arg.getPosition()];
        if (argMap == null) {
            argMap = new HashMap<>();
            this.args[arg.getPosition()] = argMap;
        }

        if (arg.getName() == null) {
            argMap.put(DEFAULT_ARG, arg);
        } else {
            argMap.put(arg.getName(), arg);
        }

    }","  public void test223()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.setKey(""[]"");
      field0.addArg(arg0);
}"
539,"    public void addArg(Arg arg) {
        // TODO this first if check can go away after arg0, etc. are removed from dtd
        if (arg == null || arg.getKey() == null || arg.getKey().length() == 0) {
            return;
        }

        determineArgPosition(arg);
        ensureArgsCapacity(arg);

        Map<String, Arg> argMap = this.args[arg.getPosition()];
        if (argMap == null) {
            argMap = new HashMap<>();
            this.args[arg.getPosition()] = argMap;
        }

        if (arg.getName() == null) {
            argMap.put(DEFAULT_ARG, arg);
        } else {
            argMap.put(arg.getName(), arg);
        }

    }","  public void test224()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.setKey(""[]"");
      field0.addArg(arg0);
      Arg arg1 = new Arg();
      arg1.setKey(""[]"");
      field0.addArg(arg1);
}"
540,"    public Arg getArg(int position) {
        return this.getArg(DEFAULT_ARG, position);
    }","  public void test225()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.key = ""~="";
      arg0.position = 2153;
      field0.addArg(arg0);
      // Undeclared exception!
      try { 
        field0.getArg((String) null, 2153);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
541,"    public String getVarValue(String mainKey) {
        String value = null;

        Var v = getVarMap().get(mainKey);
        if (v != null) {
            value = v.getValue();
        }

        return value;
    }","  public void test226()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hVars;
      Arg arg0 = new Arg();
      Map<String, Arg>[] mapArray0 = (Map<String, Arg>[]) Array.newInstance(Map.class, 6);
      mapArray0[0] = (Map<String, Arg>) fastHashMap0;
      field0.args = mapArray0;
      arg0.setKey(""var:"");
      field0.addArg(arg0);
      // Undeclared exception!
      try { 
        field0.getVarValue(""org.apache.commons.validator.Field.DEFAULT"");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.validator.Arg cannot be cast to org.apache.commons.validator.Var
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
542,"    public int getPage() {
        return this.page;
    }","  public void test227()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.key = """";
      field0.addArg(arg0);
}"
543,"    public void addArg(Arg arg) {
        // TODO this first if check can go away after arg0, etc. are removed from dtd
        if (arg == null || arg.getKey() == null || arg.getKey().length() == 0) {
            return;
        }

        determineArgPosition(arg);
        ensureArgsCapacity(arg);

        Map<String, Arg> argMap = this.args[arg.getPosition()];
        if (argMap == null) {
            argMap = new HashMap<>();
            this.args[arg.getPosition()] = argMap;
        }

        if (arg.getName() == null) {
            argMap.put(DEFAULT_ARG, arg);
        } else {
            argMap.put(arg.getName(), arg);
        }

    }","  public void test228()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.key = """";
      field0.addArg(arg0);
}"
544,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test229()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.key = """";
      field0.addArg(arg0);
}"
545,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test230()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      arg0.key = """";
      field0.addArg(arg0);
}"
546,"    public int getPage() {
        return this.page;
    }","  public void test231()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      field0.addArg(arg0);
}"
547,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test232()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      field0.addArg(arg0);
}"
548,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test233()  throws Throwable  {
      Field field0 = new Field();
      Arg arg0 = new Arg();
      field0.addArg(arg0);
}"
549,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test234()  throws Throwable  {
      Field field0 = new Field();
      field0.addArg((Arg) null);
}"
550,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test235()  throws Throwable  {
      Field field0 = new Field();
      field0.addArg((Arg) null);
}"
551,"    public int getPage() {
        return this.page;
    }","  public void test236()  throws Throwable  {
      Field field0 = new Field();
      field0.addArg((Arg) null);
}"
552,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test237()  throws Throwable  {
      Field field0 = new Field();
      field0.getMsg(""-bPsw;8|m"");
}"
553,"    public int getPage() {
        return this.page;
    }","  public void test238()  throws Throwable  {
      Field field0 = new Field();
      field0.getMsg(""-bPsw;8|m"");
}"
554,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test239()  throws Throwable  {
      Field field0 = new Field();
      field0.getMsg(""-bPsw;8|m"");
}"
555,"    public String getDepends() {
        return this.depends;
    }","  public void test240()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends(""\n"");
}"
556,"    public int getPage() {
        return this.page;
    }","  public void test241()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends(""\n"");
}"
557,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test242()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends(""\n"");
}"
558,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test243()  throws Throwable  {
      Field field0 = new Field();
      field0.setDepends(""\n"");
}"
559,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test244()  throws Throwable  {
      Field field0 = new Field();
      field0.getArg(40);
}"
560,"    public int getPage() {
        return this.page;
    }","  public void test245()  throws Throwable  {
      Field field0 = new Field();
      field0.getArg(40);
}"
561,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test246()  throws Throwable  {
      Field field0 = new Field();
      field0.getArg(40);
}"
562,"    public int getPage() {
        return this.page;
    }","  public void test247()  throws Throwable  {
      Field field0 = new Field();
      field0.setKey(""[]"");
}"
563,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test248()  throws Throwable  {
      Field field0 = new Field();
      field0.setKey(""[]"");
}"
564,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test249()  throws Throwable  {
      Field field0 = new Field();
      field0.setKey(""[]"");
}"
565,"    public int getPage() {
        return this.page;
    }","  public void test250()  throws Throwable  {
      Field field0 = new Field();
      int int0 = field0.getPage();
}"
566,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test251()  throws Throwable  {
      Field field0 = new Field();
      int int0 = field0.getPage();
}"
567,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test252()  throws Throwable  {
      Field field0 = new Field();
      int int0 = field0.getPage();
}"
568,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test253()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getIndexedListProperty();
}"
569,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test254()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getIndexedListProperty();
}"
570,"    public int getPage() {
        return this.page;
    }","  public void test255()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getIndexedListProperty();
}"
571,"    public String getIndexedListProperty() {
        return this.indexedListProperty;
    }","  public void test256()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getIndexedListProperty();
}"
572,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test257()  throws Throwable  {
      Field field0 = new Field();
      field0.getVars();
}"
573,"    public int getPage() {
        return this.page;
    }","  public void test258()  throws Throwable  {
      Field field0 = new Field();
      field0.getVars();
}"
574,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test259()  throws Throwable  {
      Field field0 = new Field();
      field0.getVars();
}"
575,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test260()  throws Throwable  {
      Field field0 = new Field();
      field0.getMessages();
}"
576,"    public int getPage() {
        return this.page;
    }","  public void test261()  throws Throwable  {
      Field field0 = new Field();
      field0.getMessages();
}"
577,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test262()  throws Throwable  {
      Field field0 = new Field();
      field0.getMessages();
}"
578,"    public int getPage() {
        return this.page;
    }","  public void test263()  throws Throwable  {
      Field field0 = new Field();
      int int0 = field0.getFieldOrder();
}"
579,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test264()  throws Throwable  {
      Field field0 = new Field();
      int int0 = field0.getFieldOrder();
}"
580,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test265()  throws Throwable  {
      Field field0 = new Field();
      int int0 = field0.getFieldOrder();
}"
581,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test266()  throws Throwable  {
      Field field0 = new Field();
      field0.getMessage(""B3EGnm` J}I"");
}"
582,"    public int getPage() {
        return this.page;
    }","  public void test267()  throws Throwable  {
      Field field0 = new Field();
      field0.getMessage(""B3EGnm` J}I"");
}"
583,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test268()  throws Throwable  {
      Field field0 = new Field();
      field0.getMessage(""B3EGnm` J}I"");
}"
584,"    public ValidatorResults validate(Map<String, Object> params, Map<String, ValidatorAction> actions)
        throws ValidatorException {

        if (this.getDepends() == null) {
            return new ValidatorResults();
        }

        ValidatorResults allResults = new ValidatorResults();

        Object bean = params.get(Validator.BEAN_PARAM);
        int numberOfFieldsToValidate =
            this.isIndexed() ? this.getIndexedPropertySize(bean) : 1;

        for (int fieldNumber = 0; fieldNumber < numberOfFieldsToValidate; fieldNumber++) {

            ValidatorResults results = new ValidatorResults();
            synchronized(dependencyList) {
                Iterator<String> dependencies = this.dependencyList.iterator();
                while (dependencies.hasNext()) {
                    String depend = dependencies.next();

                    ValidatorAction action = actions.get(depend);
                    if (action == null) {
                        this.handleMissingAction(depend);
                    }

                    boolean good =
                        validateForRule(action, results, actions, params, fieldNumber);

                    if (!good) {
                        allResults.merge(results);
                        return allResults;
                    }
                }
            }
            allResults.merge(results);
        }

        return allResults;
    }","  public void test269()  throws Throwable  {
      Field field0 = new Field();
      FastHashMap fastHashMap0 = field0.hMsgs;
      field0.setDepends(""[]"");
      try { 
        field0.validate(fastHashMap0, fastHashMap0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // No ValidatorAction named [] found for field null
         //
         verifyException(""org.apache.commons.validator.Field"", e);
      }
  }"
585,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test270()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getIndexedProperty();
}"
586,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test271()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getIndexedProperty();
}"
587,"    public String getIndexedProperty() {
        return this.indexedProperty;
    }","  public void test272()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getIndexedProperty();
}"
588,"    public int getPage() {
        return this.page;
    }","  public void test273()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getIndexedProperty();
}"
589,"    public int getPage() {
        return this.page;
    }","  public void test274()  throws Throwable  {
      Field field0 = new Field();
      boolean boolean0 = field0.isClientValidation();
}"
590,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test275()  throws Throwable  {
      Field field0 = new Field();
      boolean boolean0 = field0.isClientValidation();
}"
591,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test276()  throws Throwable  {
      Field field0 = new Field();
      boolean boolean0 = field0.isClientValidation();
}"
592,"    public boolean isClientValidation() {
        return this.clientValidation;
    }","  public void test277()  throws Throwable  {
      Field field0 = new Field();
      field0.getDependencyList();
}"
593,"    public int getPage() {
        return this.page;
    }","  public void test278()  throws Throwable  {
      Field field0 = new Field();
      field0.getDependencyList();
}"
594,"    public int getFieldOrder() {
        return this.fieldOrder;
    }","  public void test279()  throws Throwable  {
      Field field0 = new Field();
      field0.getDependencyList();
}"
595,"    public boolean isValid(String isbn) {
        return org.apache.commons.validator.routines.ISBNValidator.getInstance().isValidISBN10(isbn);
    }","  public void test0()  throws Throwable  {
      ISBNValidator iSBNValidator0 = new ISBNValidator();
      boolean boolean0 = iSBNValidator0.isValid(""[J"");
}"
596,"    public boolean isValid(String value, String datePattern, boolean strict) {

        if (value == null
                || datePattern == null
                || datePattern.length() <= 0) {

            return false;
        }

        SimpleDateFormat formatter = new SimpleDateFormat(datePattern);
        formatter.setLenient(false);

        try {
            formatter.parse(value);
        } catch(ParseException e) {
            return false;
        }

        if (strict && (datePattern.length() != value.length())) {
            return false;
        }

        return true;
    }","  public void test0()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      // Undeclared exception!
      try { 
        dateValidator0.isValid(""rLPbKDP  SN_:a Gar"", ""4*J%>SdS]ellV!g"", true);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'J'
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
597,"    public boolean isValid(String value, String datePattern, boolean strict) {

        if (value == null
                || datePattern == null
                || datePattern.length() <= 0) {

            return false;
        }

        SimpleDateFormat formatter = new SimpleDateFormat(datePattern);
        formatter.setLenient(false);

        try {
            formatter.parse(value);
        } catch(ParseException e) {
            return false;
        }

        if (strict && (datePattern.length() != value.length())) {
            return false;
        }

        return true;
    }","  public void test1()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      boolean boolean0 = dateValidator0.isValid("""", (Locale) null);
}"
598,"    public boolean isValid(String value, String datePattern, boolean strict) {

        if (value == null
                || datePattern == null
                || datePattern.length() <= 0) {

            return false;
        }

        SimpleDateFormat formatter = new SimpleDateFormat(datePattern);
        formatter.setLenient(false);

        try {
            formatter.parse(value);
        } catch(ParseException e) {
            return false;
        }

        if (strict && (datePattern.length() != value.length())) {
            return false;
        }

        return true;
    }","  public void test2()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.KOREA;
      boolean boolean0 = dateValidator0.isValid((String) null, locale0);
}"
599,"    public boolean isValid(String value, String datePattern, boolean strict) {

        if (value == null
                || datePattern == null
                || datePattern.length() <= 0) {

            return false;
        }

        SimpleDateFormat formatter = new SimpleDateFormat(datePattern);
        formatter.setLenient(false);

        try {
            formatter.parse(value);
        } catch(ParseException e) {
            return false;
        }

        if (strict && (datePattern.length() != value.length())) {
            return false;
        }

        return true;
    }","  public void test3()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      Locale locale0 = new Locale("""");
      boolean boolean0 = dateValidator0.isValid(""4*J%>SdS]ellV!g"", locale0);
}"
600,"    public boolean isValid(String value, String datePattern, boolean strict) {

        if (value == null
                || datePattern == null
                || datePattern.length() <= 0) {

            return false;
        }

        SimpleDateFormat formatter = new SimpleDateFormat(datePattern);
        formatter.setLenient(false);

        try {
            formatter.parse(value);
        } catch(ParseException e) {
            return false;
        }

        if (strict && (datePattern.length() != value.length())) {
            return false;
        }

        return true;
    }","  public void test4()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      boolean boolean0 = dateValidator0.isValid("">6Od$f5i"", "">"", true);
}"
601,"    public boolean isValid(String value, String datePattern, boolean strict) {

        if (value == null
                || datePattern == null
                || datePattern.length() <= 0) {

            return false;
        }

        SimpleDateFormat formatter = new SimpleDateFormat(datePattern);
        formatter.setLenient(false);

        try {
            formatter.parse(value);
        } catch(ParseException e) {
            return false;
        }

        if (strict && (datePattern.length() != value.length())) {
            return false;
        }

        return true;
    }","  public void test5()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      boolean boolean0 = dateValidator0.isValid("">"", "">"", true);
}"
602,"    public boolean isValid(String value, String datePattern, boolean strict) {

        if (value == null
                || datePattern == null
                || datePattern.length() <= 0) {

            return false;
        }

        SimpleDateFormat formatter = new SimpleDateFormat(datePattern);
        formatter.setLenient(false);

        try {
            formatter.parse(value);
        } catch(ParseException e) {
            return false;
        }

        if (strict && (datePattern.length() != value.length())) {
            return false;
        }

        return true;
    }","  public void test6()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      boolean boolean0 = dateValidator0.isValid("">"", "">"", false);
}"
603,"    public boolean isValid(String value, String datePattern, boolean strict) {

        if (value == null
                || datePattern == null
                || datePattern.length() <= 0) {

            return false;
        }

        SimpleDateFormat formatter = new SimpleDateFormat(datePattern);
        formatter.setLenient(false);

        try {
            formatter.parse(value);
        } catch(ParseException e) {
            return false;
        }

        if (strict && (datePattern.length() != value.length())) {
            return false;
        }

        return true;
    }","  public void test7()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      boolean boolean0 = dateValidator0.isValid(""X|M"", (String) null, false);
}"
604,"    public boolean isValid(String value, String datePattern, boolean strict) {

        if (value == null
                || datePattern == null
                || datePattern.length() <= 0) {

            return false;
        }

        SimpleDateFormat formatter = new SimpleDateFormat(datePattern);
        formatter.setLenient(false);

        try {
            formatter.parse(value);
        } catch(ParseException e) {
            return false;
        }

        if (strict && (datePattern.length() != value.length())) {
            return false;
        }

        return true;
    }","  public void test8()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      boolean boolean0 = dateValidator0.isValid(""X|M"", ""X|M"", false);
}"
605,"    public boolean isValid(String value, String datePattern, boolean strict) {

        if (value == null
                || datePattern == null
                || datePattern.length() <= 0) {

            return false;
        }

        SimpleDateFormat formatter = new SimpleDateFormat(datePattern);
        formatter.setLenient(false);

        try {
            formatter.parse(value);
        } catch(ParseException e) {
            return false;
        }

        if (strict && (datePattern.length() != value.length())) {
            return false;
        }

        return true;
    }","  public void test9()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      boolean boolean0 = dateValidator0.isValid((String) null, ""X|M"", false);
}"
606,"    public boolean isValid(String value, String datePattern, boolean strict) {

        if (value == null
                || datePattern == null
                || datePattern.length() <= 0) {

            return false;
        }

        SimpleDateFormat formatter = new SimpleDateFormat(datePattern);
        formatter.setLenient(false);

        try {
            formatter.parse(value);
        } catch(ParseException e) {
            return false;
        }

        if (strict && (datePattern.length() != value.length())) {
            return false;
        }

        return true;
    }","  public void test10()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      boolean boolean0 = dateValidator0.isValid("""", """", false);
}"
607,"    protected int countToken(String token, String target) {
        int tokenIndex = 0;
        int count = 0;
        while (tokenIndex != -1) {
            tokenIndex = target.indexOf(token, tokenIndex);
            if (tokenIndex > -1) {
                tokenIndex++;
                count++;
            }
        }
        return count;
    }","  public void test0()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator(4518);
      int int0 = urlValidator0.countToken("" F?oT8E{ZiuZ,l/k"", ""b(yS`b"");
}"
608,"    protected int countToken(String token, String target) {
        int tokenIndex = 0;
        int count = 0;
        while (tokenIndex != -1) {
            tokenIndex = target.indexOf(token, tokenIndex);
            if (tokenIndex > -1) {
                tokenIndex++;
                count++;
            }
        }
        return count;
    }","  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[8];
      UrlValidator urlValidator0 = new UrlValidator(stringArray0, (-1943));
      // Undeclared exception!
      urlValidator0.countToken("""", ""org.apache.commons.validator.routines.RegexValidator"");
  }"
609,"    protected int countToken(String token, String target) {
        int tokenIndex = 0;
        int count = 0;
        while (tokenIndex != -1) {
            tokenIndex = target.indexOf(token, tokenIndex);
            if (tokenIndex > -1) {
                tokenIndex++;
                count++;
            }
        }
        return count;
    }","  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[8];
      UrlValidator urlValidator0 = new UrlValidator(stringArray0);
      // Undeclared exception!
      try { 
        urlValidator0.countToken((String) null, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
610,"    public UrlValidator() {
        this(null);
    }","  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[0];
      UrlValidator urlValidator0 = new UrlValidator(stringArray0, 0);
}"
611,"    public UrlValidator() {
        this(null);
    }","  public void test4()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator((String[]) null, (-2762));
}"
612,"    protected int countToken(String token, String target) {
        int tokenIndex = 0;
        int count = 0;
        while (tokenIndex != -1) {
            tokenIndex = target.indexOf(token, tokenIndex);
            if (tokenIndex > -1) {
                tokenIndex++;
                count++;
            }
        }
        return count;
    }","  public void test5()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator(5);
      int int0 = urlValidator0.countToken(""vUZu_VMb015vTw9=WV+3"", ""vUZu_VMb015vTw9=WV+3"");
}"
613,"    protected boolean isValidFragment(String fragment) {
        if (fragment == null) {
            return true;
        }

        return options.isOff(NO_FRAGMENTS);
    }","  public void test6()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator(5);
      boolean boolean0 = urlValidator0.isValidFragment((String) null);
}"
614,"    protected boolean isValidFragment(String fragment) {
        if (fragment == null) {
            return true;
        }

        return options.isOff(NO_FRAGMENTS);
    }","  public void test7()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator(5);
      boolean boolean0 = urlValidator0.isValidFragment("""");
}"
615,"    protected boolean isValidQuery(String query) {
        if (query == null) {
            return true;
        }

        return QUERY_PATTERN.matcher(query).matches();
    }","  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[3];
      UrlValidator urlValidator0 = new UrlValidator(stringArray0);
      boolean boolean0 = urlValidator0.isValidQuery(stringArray0[0]);
}"
616,"    protected boolean isValidQuery(String query) {
        if (query == null) {
            return true;
        }

        return QUERY_PATTERN.matcher(query).matches();
    }","  public void test9()  throws Throwable  {
      String[] stringArray0 = new String[3];
      UrlValidator urlValidator0 = new UrlValidator(stringArray0);
      boolean boolean0 = urlValidator0.isValidQuery(""."");
}"
617,"    protected boolean isValidPath(String path) {
        if (path == null) {
            return false;
        }

        if (!PATH_PATTERN.matcher(path).matches()) {
            return false;
        }

        int slash2Count = countToken(""//"", path);
        if (options.isOff(ALLOW_2_SLASHES) && (slash2Count > 0)) {
            return false;
        }

        int slashCount = countToken(""/"", path);
        int dot2Count = countToken("".."", path);
        if (dot2Count > 0 && (slashCount - slash2Count - 1) <= dot2Count){
            return false;
        }

        return true;
    }","  public void test10()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator((-1622));
      boolean boolean0 = urlValidator0.isValidPath("""");
}"
618,"    protected boolean isValidPath(String path) {
        if (path == null) {
            return false;
        }

        if (!PATH_PATTERN.matcher(path).matches()) {
            return false;
        }

        int slash2Count = countToken(""//"", path);
        if (options.isOff(ALLOW_2_SLASHES) && (slash2Count > 0)) {
            return false;
        }

        int slashCount = countToken(""/"", path);
        int dot2Count = countToken("".."", path);
        if (dot2Count > 0 && (slashCount - slash2Count - 1) <= dot2Count){
            return false;
        }

        return true;
    }","  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[3];
      UrlValidator urlValidator0 = new UrlValidator(stringArray0);
      boolean boolean0 = urlValidator0.isValidPath(""."");
}"
619,"    protected boolean isValidPath(String path) {
        if (path == null) {
            return false;
        }

        if (!PATH_PATTERN.matcher(path).matches()) {
            return false;
        }

        int slash2Count = countToken(""//"", path);
        if (options.isOff(ALLOW_2_SLASHES) && (slash2Count > 0)) {
            return false;
        }

        int slashCount = countToken(""/"", path);
        int dot2Count = countToken("".."", path);
        if (dot2Count > 0 && (slashCount - slash2Count - 1) <= dot2Count){
            return false;
        }

        return true;
    }","  public void test12()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator(5);
      boolean boolean0 = urlValidator0.isValidPath((String) null);
}"
620,"    protected boolean isValidPath(String path) {
        if (path == null) {
            return false;
        }

        if (!PATH_PATTERN.matcher(path).matches()) {
            return false;
        }

        int slash2Count = countToken(""//"", path);
        if (options.isOff(ALLOW_2_SLASHES) && (slash2Count > 0)) {
            return false;
        }

        int slashCount = countToken(""/"", path);
        int dot2Count = countToken("".."", path);
        if (dot2Count > 0 && (slashCount - slash2Count - 1) <= dot2Count){
            return false;
        }

        return true;
    }","  public void test13()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator(5);
      boolean boolean0 = urlValidator0.isValidPath("""");
}"
621,"    protected boolean isValidAuthority(String authority) {
        if (authority == null) {
            return false;
        }

        InetAddressValidator inetAddressValidator =
                InetAddressValidator.getInstance();

        Matcher authorityMatcher = AUTHORITY_PATTERN.matcher(authority);
        if (!authorityMatcher.matches()) {
            return false;
        }

        boolean hostname = false;
        // check if authority is IP address or hostname
        String hostIP = authorityMatcher.group(PARSE_AUTHORITY_HOST_IP);
        boolean ipV4Address = inetAddressValidator.isValid(hostIP);

        if (!ipV4Address) {
            // Domain is hostname name
            hostname = DOMAIN_PATTERN.matcher(hostIP).matches();
        }

        //rightmost hostname will never start with a digit.
        if (hostname) {
            // LOW-TECH FIX FOR VALIDATOR-202
            // TODO: Rewrite to use ArrayList and .add semantics: see VALIDATOR-203
            char[] chars = hostIP.toCharArray();
            int size = 1;
            for(int i=0; i<chars.length; i++) {
                if(chars[i] == '.') {
                    size++;
                }
            }
            String[] domainSegment = new String[size];
            boolean match = true;
            int segmentCount = 0;
            int segmentLength = 0;

            while (match) {
                Matcher atomMatcher = ATOM_PATTERN.matcher(hostIP);
                match = atomMatcher.matches();
                if (match) {
                    domainSegment[segmentCount] = atomMatcher.group(1);
                    segmentLength = domainSegment[segmentCount].length() + 1;
                    hostIP =
                            (segmentLength >= hostIP.length())
                            ? """"
                            : hostIP.substring(segmentLength);

                    segmentCount++;
                }
            }
            String topLevel = domainSegment[segmentCount - 1];
            if (topLevel.length() < 2 || topLevel.length() > 4) { // CHECKSTYLE IGNORE MagicNumber (deprecated code)
                return false;
            }

            // First letter of top level must be a alpha
            if (!ALPHA_PATTERN.matcher(topLevel.substring(0, 1)).matches()) {
                return false;
            }

            // Make sure there's a host name preceding the authority.
            if (segmentCount < 2) {
                return false;
            }
        }

        if (!hostname && !ipV4Address) {
            return false;
        }

        String port = authorityMatcher.group(PARSE_AUTHORITY_PORT);
        if (port != null && !PORT_PATTERN.matcher(port).matches()) {
            return false;
        }

        String extra = authorityMatcher.group(PARSE_AUTHORITY_EXTRA);
        if (!GenericValidator.isBlankOrNull(extra)) {
            return false;
        }

        return true;
    }","  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[3];
      UrlValidator urlValidator0 = new UrlValidator(stringArray0);
      boolean boolean0 = urlValidator0.isValidAuthority(stringArray0[1]);
}"
622,"    protected boolean isValidScheme(String scheme) {
        if (scheme == null) {
            return false;
        }

        if (!SCHEME_PATTERN.matcher(scheme).matches()) {
            return false;
        }

        if (options.isOff(ALLOW_ALL_SCHEMES) && !allowedSchemes.contains(scheme)) {
            return false;
        }

        return true;
    }","  public void test15()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator(5);
      boolean boolean0 = urlValidator0.isValidScheme(""I32i"");
}"
623,"    protected boolean isValidScheme(String scheme) {
        if (scheme == null) {
            return false;
        }

        if (!SCHEME_PATTERN.matcher(scheme).matches()) {
            return false;
        }

        if (options.isOff(ALLOW_ALL_SCHEMES) && !allowedSchemes.contains(scheme)) {
            return false;
        }

        return true;
    }","  public void test16()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator(5);
      boolean boolean0 = urlValidator0.isValidScheme((String) null);
}"
624,"    protected boolean isValidScheme(String scheme) {
        if (scheme == null) {
            return false;
        }

        if (!SCHEME_PATTERN.matcher(scheme).matches()) {
            return false;
        }

        if (options.isOff(ALLOW_ALL_SCHEMES) && !allowedSchemes.contains(scheme)) {
            return false;
        }

        return true;
    }","  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[3];
      UrlValidator urlValidator0 = new UrlValidator(stringArray0);
      boolean boolean0 = urlValidator0.isValidScheme(""or.apache.cojmonsvalidator.routines.InetAddrnssValidator"");
}"
625,"    public boolean isValid(String value) {
        if (value == null) {
            return false;
        }
        if (!LEGAL_ASCII_PATTERN.matcher(value).matches()) {
           return false;
        }

        // Check the whole url address structure
        Matcher urlMatcher = URL_PATTERN.matcher(value);
        if (!urlMatcher.matches()) {
            return false;
        }

        if (!isValidScheme(urlMatcher.group(PARSE_URL_SCHEME))) {
            return false;
        }

        if (!isValidAuthority(urlMatcher.group(PARSE_URL_AUTHORITY))) {
            return false;
        }

        if (!isValidPath(urlMatcher.group(PARSE_URL_PATH))) {
            return false;
        }

        if (!isValidQuery(urlMatcher.group(PARSE_URL_QUERY))) {
            return false;
        }

        if (!isValidFragment(urlMatcher.group(PARSE_URL_FRAGMENT))) {
            return false;
        }

        return true;
    }","  public void test18()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator(5);
      boolean boolean0 = urlValidator0.isValid("""");
}"
626,"    protected boolean isValidScheme(String scheme) {
        if (scheme == null) {
            return false;
        }

        if (!SCHEME_PATTERN.matcher(scheme).matches()) {
            return false;
        }

        if (options.isOff(ALLOW_ALL_SCHEMES) && !allowedSchemes.contains(scheme)) {
            return false;
        }

        return true;
    }","  public void test19()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      boolean boolean0 = urlValidator0.isValidScheme(""http"");
}"
627,"    protected boolean isValidScheme(String scheme) {
        if (scheme == null) {
            return false;
        }

        if (!SCHEME_PATTERN.matcher(scheme).matches()) {
            return false;
        }

        if (options.isOff(ALLOW_ALL_SCHEMES) && !allowedSchemes.contains(scheme)) {
            return false;
        }

        return true;
    }","  public void test20()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator((-1622));
      boolean boolean0 = urlValidator0.isValidScheme("""");
}"
628,"    public boolean isValid(String value) {
        if (value == null) {
            return false;
        }
        if (!LEGAL_ASCII_PATTERN.matcher(value).matches()) {
           return false;
        }

        // Check the whole url address structure
        Matcher urlMatcher = URL_PATTERN.matcher(value);
        if (!urlMatcher.matches()) {
            return false;
        }

        if (!isValidScheme(urlMatcher.group(PARSE_URL_SCHEME))) {
            return false;
        }

        if (!isValidAuthority(urlMatcher.group(PARSE_URL_AUTHORITY))) {
            return false;
        }

        if (!isValidPath(urlMatcher.group(PARSE_URL_PATH))) {
            return false;
        }

        if (!isValidQuery(urlMatcher.group(PARSE_URL_QUERY))) {
            return false;
        }

        if (!isValidFragment(urlMatcher.group(PARSE_URL_FRAGMENT))) {
            return false;
        }

        return true;
    }","  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[3];
      UrlValidator urlValidator0 = new UrlValidator(stringArray0);
      boolean boolean0 = urlValidator0.isValid(stringArray0[1]);
}"
629,"    public ValidatorResults validate() throws ValidatorException {
        Locale locale = (Locale) this.getParameterValue(LOCALE_PARAM);

        if (locale == null) {
            locale = Locale.getDefault();
        }

        this.setParameter(VALIDATOR_PARAM, this);

        Form form = this.resources.getForm(locale, this.formName);
        if (form != null) {
            this.setParameter(FORM_PARAM, form);
            return form.validate(
                this.parameters,
                this.resources.getValidatorActions(),
                this.page,
                this.fieldName);
        }

        return new ValidatorResults();
    }","  public void test0()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      validator0.fieldName = """";
      // Undeclared exception!
      try { 
        validator0.validate();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.ValidatorResources"", e);
      }
  }"
630,"    public boolean getUseContextClassLoader() {
        return this.useContextClassLoader;
    }","  public void test1()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0, ""+WCu.\"",-^mG"", ""v~dx,e#(_V)f{\""wL"");
}"
631,"    public boolean getUseContextClassLoader() {
        return this.useContextClassLoader;
    }","  public void test2()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0, ""+WCu.\"",-^mG"", ""v~dx,e#(_V)f{\""wL"");
      validator0.setUseContextClassLoader(true);
      boolean boolean0 = validator0.getUseContextClassLoader();
}"
632,"    public int getPage() {
        return page;
    }","  public void test3()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0, ""Zlc9!hUJ "");
      validator0.setPage(11);
      int int0 = validator0.getPage();
}"
633,"    public int getPage() {
        return page;
    }","  public void test4()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0, ""SaL>e"", ""\""s7a"");
      validator0.setPage((-1845));
      int int0 = validator0.getPage();
}"
634,"    public int getPage() {
        return page;
    }","  public void test5()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0, (String) null);
      String string0 = validator0.getFormName();
}"
635,"    public boolean getUseContextClassLoader() {
        return this.useContextClassLoader;
    }","  public void test6()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0, (String) null);
      String string0 = validator0.getFormName();
}"
636,"    public boolean getOnlyReturnErrors() {
        return onlyReturnErrors;
    }","  public void test7()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0, (String) null);
      String string0 = validator0.getFormName();
}"
637,"    public String getFormName() {
        return formName;
    }","  public void test8()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0, (String) null);
      String string0 = validator0.getFormName();
}"
638,"    public String getFormName() {
        return formName;
    }","  public void test9()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0, ""SaL>e"", ""\""s7a"");
}"
639,"    public String getFormName() {
        return formName;
    }","  public void test10()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0, ""SaL>e"", ""\""s7a"");
      validator0.setFormName("""");
      String string0 = validator0.getFormName();
}"
640,"    public void setParameter(String parameterClassName, Object parameterValue) {
        this.parameters.put(parameterClassName, parameterValue);
    }","  public void test11()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      validator0.parameters = null;
      // Undeclared exception!
      try { 
        validator0.setParameter(""z]r}3xIG5.M@|WlX"", ""z]r}3xIG5.M@|WlX"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.Validator"", e);
      }
  }"
641,"    public Validator(ValidatorResources resources) {
        this(resources, null);
    }","  public void test12()  throws Throwable  {
      Validator validator0 = null;
      try {
        validator0 = new Validator((ValidatorResources) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Resources cannot be null.
         //
         verifyException(""org.apache.commons.validator.Validator"", e);
      }
  }"
642,"    public Object getParameterValue(String parameterClassName) {
        return this.parameters.get(parameterClassName);
    }","  public void test13()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      validator0.setParameter(""RV,M4L| "", ""RV,M4L| "");
      Object object0 = validator0.getParameterValue(""RV,M4L| "");
}"
643,"    public boolean getUseContextClassLoader() {
        return this.useContextClassLoader;
    }","  public void test14()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      validator0.setParameter(""RV,M4L| "", ""RV,M4L| "");
      Object object0 = validator0.getParameterValue(""RV,M4L| "");
}"
644,"    public boolean getOnlyReturnErrors() {
        return onlyReturnErrors;
    }","  public void test15()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      validator0.setParameter(""RV,M4L| "", ""RV,M4L| "");
      Object object0 = validator0.getParameterValue(""RV,M4L| "");
}"
645,"    public int getPage() {
        return page;
    }","  public void test16()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      validator0.setParameter(""RV,M4L| "", ""RV,M4L| "");
      Object object0 = validator0.getParameterValue(""RV,M4L| "");
}"
646,"    public int getPage() {
        return page;
    }","  public void test17()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      validator0.getParameterValue(""RV,M4L| "");
}"
647,"    public boolean getOnlyReturnErrors() {
        return onlyReturnErrors;
    }","  public void test18()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      validator0.getParameterValue(""RV,M4L| "");
}"
648,"    public boolean getUseContextClassLoader() {
        return this.useContextClassLoader;
    }","  public void test19()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      validator0.getParameterValue(""RV,M4L| "");
}"
649,"    public boolean getUseContextClassLoader() {
        return this.useContextClassLoader;
    }","  public void test20()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FormSet formSet0 = new FormSet();
      validatorResources0.defaultFormSet = formSet0;
      Validator validator0 = new Validator(validatorResources0);
      validator0.validate();
}"
650,"    public boolean getOnlyReturnErrors() {
        return onlyReturnErrors;
    }","  public void test21()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FormSet formSet0 = new FormSet();
      validatorResources0.defaultFormSet = formSet0;
      Validator validator0 = new Validator(validatorResources0);
      validator0.validate();
}"
651,"    public int getPage() {
        return page;
    }","  public void test22()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FormSet formSet0 = new FormSet();
      validatorResources0.defaultFormSet = formSet0;
      Validator validator0 = new Validator(validatorResources0);
      validator0.validate();
}"
652,"    public boolean getUseContextClassLoader() {
        return this.useContextClassLoader;
    }","  public void test23()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0, ""Zlc9!hUJ "");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      validator0.setClassLoader(classLoader0);
      validator0.getClassLoader();
}"
653,"    public boolean getOnlyReturnErrors() {
        return onlyReturnErrors;
    }","  public void test24()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0, ""Zlc9!hUJ "");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      validator0.setClassLoader(classLoader0);
      validator0.getClassLoader();
}"
654,"    public int getPage() {
        return page;
    }","  public void test25()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0, ""Zlc9!hUJ "");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      validator0.setClassLoader(classLoader0);
      validator0.getClassLoader();
}"
655,"    public String getFormName() {
        return formName;
    }","  public void test26()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0, ""Zlc9!hUJ "");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      validator0.setClassLoader(classLoader0);
      validator0.getClassLoader();
}"
656,"    public boolean getUseContextClassLoader() {
        return this.useContextClassLoader;
    }","  public void test27()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0, ""Zlc9!hUJ "");
      ClassLoader classLoader0 = validator0.getClassLoader();
}"
657,"    public boolean getOnlyReturnErrors() {
        return onlyReturnErrors;
    }","  public void test28()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0, ""Zlc9!hUJ "");
      ClassLoader classLoader0 = validator0.getClassLoader();
}"
658,"    public int getPage() {
        return page;
    }","  public void test29()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0, ""Zlc9!hUJ "");
      ClassLoader classLoader0 = validator0.getClassLoader();
}"
659,"    public ClassLoader getClassLoader() {
        if (this.classLoader != null) {
            return this.classLoader;
        }

        if (this.useContextClassLoader) {
            ClassLoader contextLoader = Thread.currentThread().getContextClassLoader();
            if (contextLoader != null) {
                return contextLoader;
            }
        }

        return this.getClass().getClassLoader();
    }","  public void test30()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0, ""Zlc9!hUJ "");
      ClassLoader classLoader0 = validator0.getClassLoader();
}"
660,"    public String getFormName() {
        return formName;
    }","  public void test31()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0, ""Zlc9!hUJ "");
      ClassLoader classLoader0 = validator0.getClassLoader();
}"
661,"    public Validator(ValidatorResources resources) {
        this(resources, null);
    }","  public void test32()  throws Throwable  {
      Validator validator0 = null;
      try {
        validator0 = new Validator((ValidatorResources) null, """", """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Resources cannot be null.
         //
         verifyException(""org.apache.commons.validator.Validator"", e);
      }
  }"
662,"    public Validator(ValidatorResources resources) {
        this(resources, null);
    }","  public void test33()  throws Throwable  {
      Validator validator0 = null;
      try {
        validator0 = new Validator((ValidatorResources) null, """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Resources cannot be null.
         //
         verifyException(""org.apache.commons.validator.Validator"", e);
      }
  }"
663,"    public int getPage() {
        return page;
    }","  public void test34()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      int int0 = validator0.getPage();
}"
664,"    public boolean getOnlyReturnErrors() {
        return onlyReturnErrors;
    }","  public void test35()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      int int0 = validator0.getPage();
}"
665,"    public boolean getUseContextClassLoader() {
        return this.useContextClassLoader;
    }","  public void test36()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      int int0 = validator0.getPage();
}"
666,"    public int getPage() {
        return page;
    }","  public void test37()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      validator0.clear();
}"
667,"    public boolean getUseContextClassLoader() {
        return this.useContextClassLoader;
    }","  public void test38()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      validator0.clear();
}"
668,"    public boolean getOnlyReturnErrors() {
        return onlyReturnErrors;
    }","  public void test39()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      validator0.clear();
}"
669,"    public boolean getOnlyReturnErrors() {
        return onlyReturnErrors;
    }","  public void test40()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
}"
670,"    public boolean getOnlyReturnErrors() {
        return onlyReturnErrors;
    }","  public void test41()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      validator0.setOnlyReturnErrors(true);
      boolean boolean0 = validator0.getOnlyReturnErrors();
}"
671,"    public boolean getUseContextClassLoader() {
        return this.useContextClassLoader;
    }","  public void test42()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      boolean boolean0 = validator0.getOnlyReturnErrors();
}"
672,"    public boolean getOnlyReturnErrors() {
        return onlyReturnErrors;
    }","  public void test43()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      boolean boolean0 = validator0.getOnlyReturnErrors();
}"
673,"    public int getPage() {
        return page;
    }","  public void test44()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      boolean boolean0 = validator0.getOnlyReturnErrors();
}"
674,"    public int getPage() {
        return page;
    }","  public void test45()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      boolean boolean0 = validator0.getUseContextClassLoader();
}"
675,"    public boolean getUseContextClassLoader() {
        return this.useContextClassLoader;
    }","  public void test46()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      boolean boolean0 = validator0.getUseContextClassLoader();
}"
676,"    public boolean getOnlyReturnErrors() {
        return onlyReturnErrors;
    }","  public void test47()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      boolean boolean0 = validator0.getUseContextClassLoader();
}"
677,"    public boolean getUseContextClassLoader() {
        return this.useContextClassLoader;
    }","  public void test48()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
}"
678,"    public boolean getUseContextClassLoader() {
        return this.useContextClassLoader;
    }","  public void test49()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      validator0.setUseContextClassLoader(true);
      validator0.getClassLoader();
}"
679,"    public boolean getUseContextClassLoader() {
        return this.useContextClassLoader;
    }","  public void test50()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      validator0.setFieldName(""~\""sV"");
}"
680,"    public boolean getOnlyReturnErrors() {
        return onlyReturnErrors;
    }","  public void test51()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      validator0.setFieldName(""~\""sV"");
}"
681,"    public int getPage() {
        return page;
    }","  public void test52()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0);
      validator0.setFieldName(""~\""sV"");
}"
682,"    public int getPage() {
        return page;
    }","  public void test53()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0, ""O`y'X.(@9'S)TD"", ""O`y'X.(@9'S)TD"");
      String string0 = validator0.getFormName();
}"
683,"    public String getFormName() {
        return formName;
    }","  public void test54()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0, ""O`y'X.(@9'S)TD"", ""O`y'X.(@9'S)TD"");
      String string0 = validator0.getFormName();
}"
684,"    public boolean getOnlyReturnErrors() {
        return onlyReturnErrors;
    }","  public void test55()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0, ""O`y'X.(@9'S)TD"", ""O`y'X.(@9'S)TD"");
      String string0 = validator0.getFormName();
}"
685,"    public boolean getUseContextClassLoader() {
        return this.useContextClassLoader;
    }","  public void test56()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0, ""O`y'X.(@9'S)TD"", ""O`y'X.(@9'S)TD"");
      String string0 = validator0.getFormName();
}"
686,"    public String getFormName() {
        return formName;
    }","  public void test57()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Validator validator0 = new Validator(validatorResources0, ""O`y'X.(@9'S)TD"", ""O`y'X.(@9'S)TD"");
      String string0 = validator0.getFormName();
}"
687,"    public Form getForm(Locale locale, String formKey) {
        return this.getForm(locale.getLanguage(), locale.getCountry(), locale
                .getVariant(), formKey);
    }","  public void test0()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage(""FormSet: language=null  country=null  variant=null\n"");
      validatorResources0.addFormSet(formSet0);
      // Undeclared exception!
      try { 
        validatorResources0.getForm(""FormSet: language=null  country=null  variant=null\n"", """", ""8*$C#~uc"", """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.ValidatorResources"", e);
      }
  }"
688,"    public ValidatorAction getValidatorAction(String key) {
        return getActions().get(key);
    }","  public void test1()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setJavascript(""http://www.w3.org/2001/XMLSchema"");
      validatorResources0.addValidatorAction(validatorAction0);
      ValidatorAction validatorAction1 = validatorResources0.getValidatorAction((String) null);
}"
689,"    protected Map<String, FormSet> getFormSets() {
        return hFormSets;
    }","  public void test2()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      validatorResources0.hFormSets = null;
      Map<String, FormSet> map0 = validatorResources0.getFormSets();
}"
690,"    protected Map<String, FormSet> getFormSets() {
        return hFormSets;
    }","  public void test3()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Map<String, FormSet> map0 = validatorResources0.getFormSets();
}"
691,"    protected Map<String, FormSet> getFormSets() {
        return hFormSets;
    }","  public void test4()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FastHashMap fastHashMap0 = validatorResources0.hFormSets;
      Integer integer0 = new Integer(58);
      Object object0 = new Object();
      fastHashMap0.put(integer0, object0);
      Map<String, FormSet> map0 = validatorResources0.getFormSets();
}"
692,"    FormSet getFormSet(String language, String country, String variant) {

        String key = buildLocale(language, country, variant);

        if (key.length() == 0) {
            return defaultFormSet;
        }

        return getFormSets().get(key);
    }","  public void test5()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      validatorResources0.process();
      FormSet formSet0 = validatorResources0.getFormSet("""", """", """");
}"
693,"    FormSet getFormSet(String language, String country, String variant) {

        String key = buildLocale(language, country, variant);

        if (key.length() == 0) {
            return defaultFormSet;
        }

        return getFormSets().get(key);
    }","  public void test6()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FormSet formSet0 = new FormSet();
      validatorResources0.defaultFormSet = formSet0;
      FormSet formSet1 = validatorResources0.getFormSet("""", """", """");
}"
694,"    public Form getForm(Locale locale, String formKey) {
        return this.getForm(locale.getLanguage(), locale.getCountry(), locale
                .getVariant(), formKey);
    }","  public void test7()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FormSet formSet0 = new FormSet();
      validatorResources0.defaultFormSet = formSet0;
      Form form0 = new Form();
      formSet0.addForm(form0);
      validatorResources0.process();
      Locale locale0 = Locale.ENGLISH;
      Form form1 = validatorResources0.getForm(locale0, (String) null);
}"
695,"    public Form getForm(Locale locale, String formKey) {
        return this.getForm(locale.getLanguage(), locale.getCountry(), locale
                .getVariant(), formKey);
    }","  public void test8()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FormSet formSet0 = new FormSet();
      validatorResources0.defaultFormSet = formSet0;
      Form form0 = new Form();
      formSet0.addForm(form0);
      Locale locale0 = Locale.ENGLISH;
      Form form1 = validatorResources0.getForm(locale0, (String) null);
}"
696,"    public Form getForm(Locale locale, String formKey) {
        return this.getForm(locale.getLanguage(), locale.getCountry(), locale
                .getVariant(), formKey);
    }","  public void test9()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FormSet formSet0 = new FormSet();
      Form form0 = new Form();
      formSet0.addForm(form0);
      validatorResources0.addFormSet(formSet0);
      validatorResources0.process();
      Form form1 = validatorResources0.getForm(""FormSet: language=null  country=null  variant=null\n"", ""FormSet: language=null  country=null  variant=null\n"", ""FormSet: language=null  country=null  variant=null\n"", (String) null);
}"
697,"    public Form getForm(Locale locale, String formKey) {
        return this.getForm(locale.getLanguage(), locale.getCountry(), locale
                .getVariant(), formKey);
    }","  public void test10()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FormSet formSet0 = new FormSet();
      validatorResources0.defaultFormSet = formSet0;
      Form form0 = new Form();
      form0.inherit = ""FormSet: language=null  country=null  variant=null\n"";
      formSet0.addForm(form0);
      Form form1 = validatorResources0.getForm("""", ""FormSet: language=null  country=null  variant=null\n"", ""Error parsing Arg position: "", (String) null);
}"
698,"    protected Map<String, String> getConstants() {
        return hConstants;
    }","  public void test11()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Map<String, String> map0 = validatorResources0.getConstants();
}"
699,"    protected Map<String, String> getConstants() {
        return hConstants;
    }","  public void test12()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      validatorResources0.addConstant("""", ""Add ValidatorAction: "");
      Map<String, String> map0 = validatorResources0.getConstants();
}"
700,"    protected Map<String, ValidatorAction> getActions() {
        return hActions;
    }","  public void test13()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      validatorResources0.hActions = null;
      Map<String, ValidatorAction> map0 = validatorResources0.getActions();
}"
701,"    protected Map<String, ValidatorAction> getActions() {
        return hActions;
    }","  public void test14()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Map<String, ValidatorAction> map0 = validatorResources0.getActions();
}"
702,"    protected Map<String, ValidatorAction> getActions() {
        return hActions;
    }","  public void test15()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setJavascript("""");
      validatorResources0.addValidatorAction(validatorAction0);
      Map<String, ValidatorAction> map0 = validatorResources0.getActions();
}"
703,"    protected String buildKey(FormSet fs) {
        return
                this.buildLocale(fs.getLanguage(), fs.getCountry(), fs.getVariant());
    }","  public void test16()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FormSet formSet0 = new FormSet();
      String string0 = validatorResources0.buildKey(formSet0);
}"
704,"    public void process() {
        hFormSets.setFast(true);
        hConstants.setFast(true);
        hActions.setFast(true);

        this.processForms();
    }","  public void test17()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FormSet formSet0 = new FormSet();
      validatorResources0.defaultFormSet = formSet0;
      formSet0.setLanguage(""FormSet: language=null  country=null  variant=null\n"");
      Form form0 = new Form();
      Field field0 = new Field();
      form0.addField(field0);
      formSet0.addForm(form0);
      validatorResources0.addFormSet(formSet0);
      // Undeclared exception!
      try { 
        validatorResources0.process();
        fail(""Expecting exception: ConcurrentModificationException"");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.ArrayList$Itr"", e);
      }
  }"
705,"    public void process() {
        hFormSets.setFast(true);
        hConstants.setFast(true);
        hActions.setFast(true);

        this.processForms();
    }","  public void test18()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      validatorResources0.hActions = null;
      // Undeclared exception!
      try { 
        validatorResources0.process();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.ValidatorResources"", e);
      }
  }"
706,"    public void process() {
        hFormSets.setFast(true);
        hConstants.setFast(true);
        hActions.setFast(true);

        this.processForms();
    }","  public void test19()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FormSet formSet0 = new FormSet();
      formSet0.setVariant(""org.apache.commons.digester.xmlrules.DigesterRuleParser$ObjectParamRuleFactory"");
      validatorResources0.addFormSet(formSet0);
      // Undeclared exception!
      try { 
        validatorResources0.process();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // When variant is specified, country and language must be specified.
         //
         verifyException(""org.apache.commons.validator.FormSet"", e);
      }
  }"
707,"    public void process() {
        hFormSets.setFast(true);
        hConstants.setFast(true);
        hActions.setFast(true);

        this.processForms();
    }","  public void test20()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FastHashMap fastHashMap0 = validatorResources0.hFormSets;
      validatorResources0.hConstants = fastHashMap0;
      validatorResources0.addConstant((String) null, ""(%eR&J@9,O<"");
      // Undeclared exception!
      try { 
        validatorResources0.process();
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.apache.commons.validator.FormSet
         //
         verifyException(""org.apache.commons.validator.ValidatorResources"", e);
      }
  }"
708,"    public Map<String, ValidatorAction> getValidatorActions() {
        return Collections.unmodifiableMap(getActions());
    }","  public void test21()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      validatorResources0.hActions = null;
      // Undeclared exception!
      try { 
        validatorResources0.getValidatorActions();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableMap"", e);
      }
  }"
709,"    public ValidatorAction getValidatorAction(String key) {
        return getActions().get(key);
    }","  public void test22()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      validatorResources0.hActions = null;
      // Undeclared exception!
      try { 
        validatorResources0.getValidatorAction(""org.apache.commons.validator.Validator"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.ValidatorResources"", e);
      }
  }"
710,"    FormSet getFormSet(String language, String country, String variant) {

        String key = buildLocale(language, country, variant);

        if (key.length() == 0) {
            return defaultFormSet;
        }

        return getFormSets().get(key);
    }","  public void test23()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      validatorResources0.hFormSets = null;
      // Undeclared exception!
      try { 
        validatorResources0.getFormSet(""P"", ""P"", ""P"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.ValidatorResources"", e);
      }
  }"
711,"    public Form getForm(Locale locale, String formKey) {
        return this.getForm(locale.getLanguage(), locale.getCountry(), locale
                .getVariant(), formKey);
    }","  public void test24()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FastHashMap fastHashMap0 = validatorResources0.hFormSets;
      Object object0 = new Object();
      fastHashMap0.put(""Z/UK4\""4Kw4n)~+zIq="", object0);
      // Undeclared exception!
      try { 
        validatorResources0.getForm(""Z/UK4\""4Kw4n)~+zIq="", ""csEB(Xr@0"", ""3js <"", ""1:GV,|,n]~`,%p"");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.apache.commons.validator.FormSet
         //
         verifyException(""org.apache.commons.validator.ValidatorResources"", e);
      }
  }"
712,"    protected String buildKey(FormSet fs) {
        return
                this.buildLocale(fs.getLanguage(), fs.getCountry(), fs.getVariant());
    }","  public void test25()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      // Undeclared exception!
      try { 
        validatorResources0.buildKey((FormSet) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.ValidatorResources"", e);
      }
  }"
713,"    public void addValidatorAction(ValidatorAction va) {
        va.init();

        getActions().put(va.getName(), va);

        if (getLog().isDebugEnabled()) {
            getLog().debug(""Add ValidatorAction: "" + va.getName() + "","" + va.getClassname());
        }
    }","  public void test26()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      ValidatorAction validatorAction0 = new ValidatorAction();
      validatorAction0.setJsFunction("""");
      // Undeclared exception!
      try { 
        validatorResources0.addValidatorAction(validatorAction0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
714,"    public void addValidatorAction(ValidatorAction va) {
        va.init();

        getActions().put(va.getName(), va);

        if (getLog().isDebugEnabled()) {
            getLog().debug(""Add ValidatorAction: "" + va.getName() + "","" + va.getClassname());
        }
    }","  public void test27()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      ValidatorAction validatorAction0 = new ValidatorAction();
      // Undeclared exception!
      try { 
        validatorResources0.addValidatorAction(validatorAction0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.ValidatorAction"", e);
      }
  }"
715,"    public void addFormSet(FormSet fs) {
        String key = this.buildKey(fs);
        if (key.length() == 0) {// there can only be one default formset
            if (getLog().isWarnEnabled() && defaultFormSet != null) {
                // warn the user he might not get the expected results
                getLog().warn(""Overriding default FormSet definition."");
            }
            defaultFormSet = fs;
        } else {
            FormSet formset = getFormSets().get(key);
            if (formset == null) {// it hasn't been included yet
                if (getLog().isDebugEnabled()) {
                    getLog().debug(""Adding FormSet '"" + fs.toString() + ""'."");
                }
            } else if (getLog().isWarnEnabled()) {// warn the user he might not
                                                // get the expected results
                getLog()
                        .warn(""Overriding FormSet definition. Duplicate for locale: ""
                                + key);
            }
            getFormSets().put(key, fs);
        }
    }","  public void test28()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      // Undeclared exception!
      try { 
        validatorResources0.addFormSet((FormSet) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.ValidatorResources"", e);
      }
  }"
716,"    public void addConstant(String name, String value) {
        if (getLog().isDebugEnabled()) {
            getLog().debug(""Adding Global Constant: "" + name + "","" + value);
        }

        this.hConstants.put(name, value);
    }","  public void test29()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      validatorResources0.hConstants = null;
      // Undeclared exception!
      try { 
        validatorResources0.addConstant(""(,AU%'8`m"", ""-&Xc*\""BHJZK>{Q73("");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.ValidatorResources"", e);
      }
  }"
717,"    public ValidatorResources() {
        super();
    }","  public void test30()  throws Throwable  {
      URL[] uRLArray0 = new URL[0];
      ValidatorResources validatorResources0 = null;
      try {
        validatorResources0 = new ValidatorResources(uRLArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.digester.xmlrules.FromXmlRuleSet$URLXMLRulesLoader"", e);
      }
  }"
718,"    public ValidatorResources() {
        super();
    }","  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ValidatorResources validatorResources0 = null;
      try {
        validatorResources0 = new ValidatorResources(stringArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.digester.xmlrules.FromXmlRuleSet$URLXMLRulesLoader"", e);
      }
  }"
719,"    public ValidatorResources() {
        super();
    }","  public void test32()  throws Throwable  {
      ValidatorResources validatorResources0 = null;
      try {
        validatorResources0 = new ValidatorResources((InputStream[]) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.digester.xmlrules.FromXmlRuleSet$URLXMLRulesLoader"", e);
      }
  }"
720,"    FormSet getFormSet(String language, String country, String variant) {

        String key = buildLocale(language, country, variant);

        if (key.length() == 0) {
            return defaultFormSet;
        }

        return getFormSets().get(key);
    }","  public void test33()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FormSet formSet0 = validatorResources0.getFormSet("""", """", """");
}"
721,"    public void process() {
        hFormSets.setFast(true);
        hConstants.setFast(true);
        hActions.setFast(true);

        this.processForms();
    }","  public void test34()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage(""<\""ot?HW"");
      validatorResources0.addFormSet(formSet0);
      formSet0.setCountry(""<\""ot?HW"");
      formSet0.setVariant(""<\""ot?HW"");
      validatorResources0.process();
  }"
722,"    public void process() {
        hFormSets.setFast(true);
        hConstants.setFast(true);
        hActions.setFast(true);

        this.processForms();
    }","  public void test35()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FormSet formSet0 = new FormSet();
      formSet0.setVariant(""FormSet: language=null  country=null  variant=null\n"");
      formSet0.setCountry(""FormSet: language=null  country=null  variant=null\n"");
      formSet0.setLanguage(""FormSet: language=null  country=null  variant=null\n"");
      validatorResources0.addFormSet(formSet0);
      validatorResources0.process();
  }"
723,"    public void process() {
        hFormSets.setFast(true);
        hConstants.setFast(true);
        hActions.setFast(true);

        this.processForms();
    }","  public void test36()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage(""P"");
      validatorResources0.addFormSet(formSet0);
      formSet0.setLanguage((String) null);
      validatorResources0.process();
  }"
724,"    public void process() {
        hFormSets.setFast(true);
        hConstants.setFast(true);
        hActions.setFast(true);

        this.processForms();
    }","  public void test37()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage(""P"");
      validatorResources0.addFormSet(formSet0);
      formSet0.setCountry(""P"");
      validatorResources0.process();
  }"
725,"    public void process() {
        hFormSets.setFast(true);
        hConstants.setFast(true);
        hActions.setFast(true);

        this.processForms();
    }","  public void test38()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FormSet formSet0 = new FormSet();
      formSet0.setCountry(""wTw4 #"");
      formSet0.setLanguage(""FormSet: language=null  country=null  variant=null\n"");
      validatorResources0.addFormSet(formSet0);
      formSet0.setVariant(""' found in formset '"");
      validatorResources0.process();
  }"
726,"    public void process() {
        hFormSets.setFast(true);
        hConstants.setFast(true);
        hActions.setFast(true);

        this.processForms();
    }","  public void test39()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FormSet formSet0 = new FormSet();
      formSet0.setCountry(""FormSet: language=null  country=null  variant=null\n"");
      formSet0.setLanguage(""FormSet: language=null  country=null  variant=null\n"");
      validatorResources0.addFormSet(formSet0);
      validatorResources0.process();
  }"
727,"    public void process() {
        hFormSets.setFast(true);
        hConstants.setFast(true);
        hActions.setFast(true);

        this.processForms();
    }","  public void test40()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FormSet formSet0 = new FormSet();
      validatorResources0.defaultFormSet = formSet0;
      formSet0.setLanguage(""FormSet: language=null  country=null  variant=null\n"");
      validatorResources0.addFormSet(formSet0);
      validatorResources0.process();
  }"
728,"    public Form getForm(Locale locale, String formKey) {
        return this.getForm(locale.getLanguage(), locale.getCountry(), locale
                .getVariant(), formKey);
    }","  public void test41()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FormSet formSet0 = new FormSet();
      validatorResources0.defaultFormSet = formSet0;
      Locale locale0 = Locale.CHINA;
      Form form0 = validatorResources0.getForm(locale0, ""FormSet: language=null  country=null  variant=null\n"");
}"
729,"    public Form getForm(Locale locale, String formKey) {
        return this.getForm(locale.getLanguage(), locale.getCountry(), locale
                .getVariant(), formKey);
    }","  public void test42()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FormSet formSet0 = new FormSet();
      formSet0.setCountry(""FormSet: language=null  country=null  variant=null\n"");
      formSet0.setLanguage(""FormSet: language=null  country=null  variant=null\n"");
      Form form0 = new Form();
      formSet0.addForm(form0);
      validatorResources0.addFormSet(formSet0);
      Form form1 = validatorResources0.getForm(""FormSet: language=null  country=null  variant=null\n"", ""FormSet: language=null  country=null  variant=null\n"", """", (String) null);
}"
730,"    protected String buildKey(FormSet fs) {
        return
                this.buildLocale(fs.getLanguage(), fs.getCountry(), fs.getVariant());
    }","  public void test43()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FormSet formSet0 = new FormSet();
      formSet0.setVariant(""' found in formset '"");
      String string0 = validatorResources0.buildKey(formSet0);
}"
731,"    public Form getForm(Locale locale, String formKey) {
        return this.getForm(locale.getLanguage(), locale.getCountry(), locale
                .getVariant(), formKey);
    }","  public void test44()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      // Undeclared exception!
      try { 
        validatorResources0.getForm("""", """", """", """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.ValidatorResources"", e);
      }
  }"
732,"    public void addFormSet(FormSet fs) {
        String key = this.buildKey(fs);
        if (key.length() == 0) {// there can only be one default formset
            if (getLog().isWarnEnabled() && defaultFormSet != null) {
                // warn the user he might not get the expected results
                getLog().warn(""Overriding default FormSet definition."");
            }
            defaultFormSet = fs;
        } else {
            FormSet formset = getFormSets().get(key);
            if (formset == null) {// it hasn't been included yet
                if (getLog().isDebugEnabled()) {
                    getLog().debug(""Adding FormSet '"" + fs.toString() + ""'."");
                }
            } else if (getLog().isWarnEnabled()) {// warn the user he might not
                                                // get the expected results
                getLog()
                        .warn(""Overriding FormSet definition. Duplicate for locale: ""
                                + key);
            }
            getFormSets().put(key, fs);
        }
    }","  public void test45()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FormSet formSet0 = new FormSet();
      formSet0.setLanguage(""P"");
      validatorResources0.addFormSet(formSet0);
      validatorResources0.addFormSet(formSet0);
}"
733,"    public ValidatorResources() {
        super();
    }","  public void test46()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ValidatorResources validatorResources0 = null;
      try {
        validatorResources0 = new ValidatorResources(uRL0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.digester.xmlrules.FromXmlRuleSet$URLXMLRulesLoader"", e);
      }
  }"
734,"    public ValidatorResources() {
        super();
    }","  public void test47()  throws Throwable  {
      ValidatorResources validatorResources0 = null;
      try {
        validatorResources0 = new ValidatorResources("".J"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.digester.xmlrules.FromXmlRuleSet$URLXMLRulesLoader"", e);
      }
  }"
735,"    public ValidatorResources() {
        super();
    }","  public void test48()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ValidatorResources validatorResources0 = null;
      try {
        validatorResources0 = new ValidatorResources(pipedInputStream0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.digester.xmlrules.FromXmlRuleSet$URLXMLRulesLoader"", e);
      }
  }"
736,"    public Form getForm(Locale locale, String formKey) {
        return this.getForm(locale.getLanguage(), locale.getCountry(), locale
                .getVariant(), formKey);
    }","  public void test49()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        validatorResources0.getForm(locale0, ""FormSet: language=null  country=null  variant=null\n"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.ValidatorResources"", e);
      }
  }"
737,"    public ValidatorAction getValidatorAction(String key) {
        return getActions().get(key);
    }","  public void test50()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      ValidatorAction validatorAction0 = validatorResources0.getValidatorAction(""RRj'&\""i,<dh"");
}"
738,"    public void addFormSet(FormSet fs) {
        String key = this.buildKey(fs);
        if (key.length() == 0) {// there can only be one default formset
            if (getLog().isWarnEnabled() && defaultFormSet != null) {
                // warn the user he might not get the expected results
                getLog().warn(""Overriding default FormSet definition."");
            }
            defaultFormSet = fs;
        } else {
            FormSet formset = getFormSets().get(key);
            if (formset == null) {// it hasn't been included yet
                if (getLog().isDebugEnabled()) {
                    getLog().debug(""Adding FormSet '"" + fs.toString() + ""'."");
                }
            } else if (getLog().isWarnEnabled()) {// warn the user he might not
                                                // get the expected results
                getLog()
                        .warn(""Overriding FormSet definition. Duplicate for locale: ""
                                + key);
            }
            getFormSets().put(key, fs);
        }
    }","  public void test51()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      FormSet formSet0 = new FormSet();
      validatorResources0.addFormSet(formSet0);
      validatorResources0.addFormSet(formSet0);
}"
739,"    public Map<String, ValidatorAction> getValidatorActions() {
        return Collections.unmodifiableMap(getActions());
    }","  public void test52()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      Map<String, ValidatorAction> map0 = validatorResources0.getValidatorActions();
}"
740,"    public Form getForm(Locale locale, String formKey) {
        return this.getForm(locale.getLanguage(), locale.getCountry(), locale
                .getVariant(), formKey);
    }","  public void test53()  throws Throwable  {
      ValidatorResources validatorResources0 = new ValidatorResources();
      validatorResources0.process();
      Form form0 = validatorResources0.getForm(""FormSet: language=null  country=null  variant=null\n_wTw4 #_' found in formset '"", """", """", ""FormSet: language=null  country=null  variant=null\n_wTw4 #_' found in formset '"");
}"
741,"    public ValidatorResult getValidatorResult(String key) {
        return this.hResults.get(key);
    }","  public void test0()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      Field field0 = new Field();
      validatorResults0.add(field0, ""[]"", true);
      ValidatorResult validatorResult0 = validatorResults0.getValidatorResult((String) null);
}"
742,"    public void merge(ValidatorResults results) {
        this.hResults.putAll(results.hResults);
    }","  public void test1()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      // Undeclared exception!
      try { 
        validatorResults0.merge((ValidatorResults) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.ValidatorResults"", e);
      }
  }"
743,"    public boolean isEmpty() {
        return this.hResults.isEmpty();
    }","  public void test2()  throws Throwable  {
      Field field0 = new Field();
      HashMap<String, ValidatorAction> hashMap0 = new HashMap<String, ValidatorAction>();
      ValidatorResults validatorResults0 = field0.validate((Map<String, Object>) null, hashMap0);
      validatorResults0.hResults = null;
      // Undeclared exception!
      try { 
        validatorResults0.isEmpty();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
744,"    public ValidatorResult getValidatorResult(String key) {
        return this.hResults.get(key);
    }","  public void test3()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      validatorResults0.hResults = null;
      // Undeclared exception!
      try { 
        validatorResults0.getValidatorResult((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.ValidatorResults"", e);
      }
  }"
745,"    public Map<String, Object> getResultValueMap() {
        Map<String, Object> results = new HashMap<String, Object>();

        for (Iterator<String> i = hResults.keySet().iterator(); i.hasNext();) {
            String propertyKey = i.next();
            ValidatorResult vr = this.getValidatorResult(propertyKey);

            for (Iterator<String> x = vr.getActions(); x.hasNext();) {
                String actionKey = x.next();
                Object result = vr.getResult(actionKey);

                if (result != null && !(result instanceof Boolean)) {
                    results.put(propertyKey, result);
                }
            }
        }

        return results;
    }","  public void test4()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      HashMap<String, ValidatorResult> hashMap0 = new HashMap<String, ValidatorResult>();
      validatorResults0.hResults = (Map<String, ValidatorResult>) hashMap0;
      hashMap0.put((String) null, (ValidatorResult) null);
      // Undeclared exception!
      try { 
        validatorResults0.getResultValueMap();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.ValidatorResults"", e);
      }
  }"
746,"    public Set<String> getPropertyNames() {
        return Collections.unmodifiableSet(this.hResults.keySet());
    }","  public void test5()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      HashMap<String, ValidatorResult> hashMap0 = new HashMap<String, ValidatorResult>();
      validatorResults0.hResults = (Map<String, ValidatorResult>) hashMap0;
      validatorResults0.hResults = null;
      // Undeclared exception!
      try { 
        validatorResults0.getPropertyNames();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.ValidatorResults"", e);
      }
  }"
747,"    public void clear() {
        this.hResults.clear();
    }","  public void test6()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      validatorResults0.hResults = null;
      // Undeclared exception!
      try { 
        validatorResults0.clear();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.ValidatorResults"", e);
      }
  }"
748,"    public void add(Field field, String validatorName, boolean result) {
        this.add(field, validatorName, result, null);
    }","  public void test7()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        validatorResults0.add((Field) null, ""aqBH,<^v^*Q23k(4"", false, object0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.ValidatorResults"", e);
      }
  }"
749,"    public ValidatorResult getValidatorResult(String key) {
        return this.hResults.get(key);
    }","  public void test8()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      ValidatorResult validatorResult0 = validatorResults0.getValidatorResult("".np4>m1W{6j1H}SaPC"");
}"
750,"    public boolean isEmpty() {
        return this.hResults.isEmpty();
    }","  public void test9()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      Field field0 = new Field();
      Boolean boolean0 = Boolean.valueOf(""[]"");
      validatorResults0.add(field0, ""[]"", false, (Object) boolean0);
      Map<String, Object> map0 = validatorResults0.getResultValueMap();
}"
751,"    public Map<String, Object> getResultValueMap() {
        Map<String, Object> results = new HashMap<String, Object>();

        for (Iterator<String> i = hResults.keySet().iterator(); i.hasNext();) {
            String propertyKey = i.next();
            ValidatorResult vr = this.getValidatorResult(propertyKey);

            for (Iterator<String> x = vr.getActions(); x.hasNext();) {
                String actionKey = x.next();
                Object result = vr.getResult(actionKey);

                if (result != null && !(result instanceof Boolean)) {
                    results.put(propertyKey, result);
                }
            }
        }

        return results;
    }","  public void test10()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      Field field0 = new Field();
      validatorResults0.add(field0, ""[]"", false);
      Map<String, Object> map0 = validatorResults0.getResultValueMap();
}"
752,"    public boolean isEmpty() {
        return this.hResults.isEmpty();
    }","  public void test11()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      Field field0 = new Field();
      validatorResults0.add(field0, ""[]"", true, (Object) field0);
      Map<String, Object> map0 = validatorResults0.getResultValueMap();
}"
753,"    public boolean isEmpty() {
        return this.hResults.isEmpty();
    }","  public void test12()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      boolean boolean0 = validatorResults0.isEmpty();
}"
754,"    public boolean isEmpty() {
        return this.hResults.isEmpty();
    }","  public void test13()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
}"
755,"    public boolean isEmpty() {
        return this.hResults.isEmpty();
    }","  public void test14()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      Field field0 = new Field();
      validatorResults0.add(field0, ""[]"", true, (Object) field0);
      boolean boolean0 = validatorResults0.isEmpty();
}"
756,"    public void add(Field field, String validatorName, boolean result) {
        this.add(field, validatorName, result, null);
    }","  public void test15()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      Field field0 = new Field();
      validatorResults0.add(field0, ""[]"", false);
      Boolean boolean0 = Boolean.valueOf(""[]"");
      validatorResults0.add(field0, ""[]"", false, (Object) boolean0);
}"
757,"    public boolean isEmpty() {
        return this.hResults.isEmpty();
    }","  public void test16()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      validatorResults0.clear();
}"
758,"    public void add(Field field, String validatorName, boolean result) {
        this.add(field, validatorName, result, null);
    }","  public void test17()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      // Undeclared exception!
      try { 
        validatorResults0.add((Field) null, ""  key="", false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.ValidatorResults"", e);
      }
  }"
759,"    public boolean isEmpty() {
        return this.hResults.isEmpty();
    }","  public void test18()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      validatorResults0.merge(validatorResults0);
}"
760,"    public Set<String> getPropertyNames() {
        return Collections.unmodifiableSet(this.hResults.keySet());
    }","  public void test19()  throws Throwable  {
      ValidatorResults validatorResults0 = new ValidatorResults();
      Set<String> set0 = validatorResults0.getPropertyNames();
}"
761,"    public String toString() {
        StringBuilder results = new StringBuilder();

        results.append(""Arg: name="");
        results.append(name);
        results.append(""  key="");
        results.append(key);
        results.append(""  position="");
        results.append(position);
        results.append(""  bundle="");
        results.append(bundle);
        results.append(""  resource="");
        results.append(resource);
        results.append(""\n"");

        return results.toString();
    }","  public void test0()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.key = ""fRP2"";
      String string0 = arg0.toString();
}"
762,"    public String toString() {
        StringBuilder results = new StringBuilder();

        results.append(""Arg: name="");
        results.append(name);
        results.append(""  key="");
        results.append(key);
        results.append(""  position="");
        results.append(position);
        results.append(""  bundle="");
        results.append(bundle);
        results.append(""  resource="");
        results.append(resource);
        results.append(""\n"");

        return results.toString();
    }","  public void test1()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.name = ""E.6[& `:!sk)&foPP`"";
      String string0 = arg0.toString();
}"
763,"    public int getPosition() {
        return this.position;
    }","  public void test2()  throws Throwable  {
      Arg arg0 = new Arg();
}"
764,"    public int getPosition() {
        return this.position;
    }","  public void test3()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.position = 0;
      int int0 = arg0.getPosition();
}"
765,"    public int getPosition() {
        return this.position;
    }","  public void test4()  throws Throwable  {
      Arg arg0 = new Arg();
}"
766,"    public int getPosition() {
        return this.position;
    }","  public void test5()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setPosition(1);
      int int0 = arg0.getPosition();
}"
767,"    public String getName() {
        return this.name;
    }","  public void test6()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setName("""");
      String string0 = arg0.getName();
}"
768,"    public int getPosition() {
        return this.position;
    }","  public void test7()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setName("""");
      String string0 = arg0.getName();
}"
769,"    public boolean isResource() {
        return this.resource;
    }","  public void test8()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setName("""");
      String string0 = arg0.getName();
}"
770,"    public int getPosition() {
        return this.position;
    }","  public void test9()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.key = ""fRP2"";
      String string0 = arg0.getKey();
}"
771,"    public String getKey() {
        return this.key;
    }","  public void test10()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.key = ""fRP2"";
      String string0 = arg0.getKey();
}"
772,"    public boolean isResource() {
        return this.resource;
    }","  public void test11()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.key = ""fRP2"";
      String string0 = arg0.getKey();
}"
773,"    public boolean isResource() {
        return this.resource;
    }","  public void test12()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setKey("""");
      String string0 = arg0.getKey();
}"
774,"    public int getPosition() {
        return this.position;
    }","  public void test13()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setKey("""");
      String string0 = arg0.getKey();
}"
775,"    public String getKey() {
        return this.key;
    }","  public void test14()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setKey("""");
      String string0 = arg0.getKey();
}"
776,"    public int getPosition() {
        return this.position;
    }","  public void test15()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setBundle(""Arg: name=null  key=null  position=-1  bundle=null  resource=true\n"");
      String string0 = arg0.getBundle();
}"
777,"    public boolean isResource() {
        return this.resource;
    }","  public void test16()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setBundle(""Arg: name=null  key=null  position=-1  bundle=null  resource=true\n"");
      String string0 = arg0.getBundle();
}"
778,"    public String getBundle() {
        return this.bundle;
    }","  public void test17()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setBundle(""Arg: name=null  key=null  position=-1  bundle=null  resource=true\n"");
      String string0 = arg0.getBundle();
}"
779,"    public int getPosition() {
        return this.position;
    }","  public void test18()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setBundle("""");
      String string0 = arg0.getBundle();
}"
780,"    public String getBundle() {
        return this.bundle;
    }","  public void test19()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setBundle("""");
      String string0 = arg0.getBundle();
}"
781,"    public boolean isResource() {
        return this.resource;
    }","  public void test20()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setBundle("""");
      String string0 = arg0.getBundle();
}"
782,"    public int getPosition() {
        return this.position;
    }","  public void test21()  throws Throwable  {
      Arg arg0 = new Arg();
      int int0 = arg0.getPosition();
}"
783,"    public boolean isResource() {
        return this.resource;
    }","  public void test22()  throws Throwable  {
      Arg arg0 = new Arg();
      int int0 = arg0.getPosition();
}"
784,"    public String getName() {
        return this.name;
    }","  public void test23()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setName(""qN|pu*"");
      String string0 = arg0.getName();
}"
785,"    public boolean isResource() {
        return this.resource;
    }","  public void test24()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setName(""qN|pu*"");
      String string0 = arg0.getName();
}"
786,"    public int getPosition() {
        return this.position;
    }","  public void test25()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setName(""qN|pu*"");
      String string0 = arg0.getName();
}"
787,"    public boolean isResource() {
        return this.resource;
    }","  public void test26()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.getBundle();
}"
788,"    public int getPosition() {
        return this.position;
    }","  public void test27()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.getBundle();
}"
789,"    public int getPosition() {
        return this.position;
    }","  public void test28()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.getName();
}"
790,"    public boolean isResource() {
        return this.resource;
    }","  public void test29()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.getName();
}"
791,"    public boolean isResource() {
        return this.resource;
    }","  public void test30()  throws Throwable  {
      Arg arg0 = new Arg();
      Arg arg1 = (Arg)arg0.clone();
}"
792,"    public int getPosition() {
        return this.position;
    }","  public void test31()  throws Throwable  {
      Arg arg0 = new Arg();
      Arg arg1 = (Arg)arg0.clone();
}"
793,"    public int getPosition() {
        return this.position;
    }","  public void test32()  throws Throwable  {
      Arg arg0 = new Arg();
      boolean boolean0 = arg0.isResource();
}"
794,"    public boolean isResource() {
        return this.resource;
    }","  public void test33()  throws Throwable  {
      Arg arg0 = new Arg();
      boolean boolean0 = arg0.isResource();
}"
795,"    public boolean isResource() {
        return this.resource;
    }","  public void test34()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.getKey();
}"
796,"    public int getPosition() {
        return this.position;
    }","  public void test35()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.getKey();
}"
797,"    public boolean isResource() {
        return this.resource;
    }","  public void test36()  throws Throwable  {
      Arg arg0 = new Arg();
}"
798,"    public boolean isResource() {
        return this.resource;
    }","  public void test37()  throws Throwable  {
      Arg arg0 = new Arg();
      arg0.setResource(false);
      boolean boolean0 = arg0.isResource();
}"
799,"    public boolean isResource() {
        return this.resource;
    }","  public void test0()  throws Throwable  {
      Var var0 = new Var();
}"
800,"    public boolean isResource() {
        return this.resource;
    }","  public void test1()  throws Throwable  {
      Var var0 = new Var();
      var0.setResource(true);
      boolean boolean0 = var0.isResource();
}"
801,"    public boolean isResource() {
        return this.resource;
    }","  public void test2()  throws Throwable  {
      Var var0 = new Var();
      String string0 = var0.getValue();
}"
802,"    public String getValue() {
        return this.value;
    }","  public void test3()  throws Throwable  {
      Var var0 = new Var();
      String string0 = var0.getValue();
}"
803,"    public boolean isResource() {
        return this.resource;
    }","  public void test4()  throws Throwable  {
      Var var0 = new Var(""R:q-u_%~scpVR!Q "", """", ""R:q-u_%~scpVR!Q "");
      String string0 = var0.getValue();
}"
804,"    public String getName() {
        return this.name;
    }","  public void test5()  throws Throwable  {
      Var var0 = new Var(""R:q-u_%~scpVR!Q "", """", ""R:q-u_%~scpVR!Q "");
      String string0 = var0.getValue();
}"
805,"    public String getValue() {
        return this.value;
    }","  public void test6()  throws Throwable  {
      Var var0 = new Var(""R:q-u_%~scpVR!Q "", """", ""R:q-u_%~scpVR!Q "");
      String string0 = var0.getValue();
}"
806,"    public String getJsType() {
        return this.jsType;
    }","  public void test7()  throws Throwable  {
      Var var0 = new Var(""R:q-u_%~scpVR!Q "", """", ""R:q-u_%~scpVR!Q "");
      String string0 = var0.getValue();
}"
807,"    public String getName() {
        return this.name;
    }","  public void test8()  throws Throwable  {
      Var var0 = new Var();
      String string0 = var0.getName();
}"
808,"    public boolean isResource() {
        return this.resource;
    }","  public void test9()  throws Throwable  {
      Var var0 = new Var();
      String string0 = var0.getName();
}"
809,"    public String getName() {
        return this.name;
    }","  public void test10()  throws Throwable  {
      Var var0 = new Var("""", """", """");
      String string0 = var0.getName();
}"
810,"    public String getValue() {
        return this.value;
    }","  public void test11()  throws Throwable  {
      Var var0 = new Var("""", """", """");
      String string0 = var0.getName();
}"
811,"    public String getJsType() {
        return this.jsType;
    }","  public void test12()  throws Throwable  {
      Var var0 = new Var("""", """", """");
      String string0 = var0.getName();
}"
812,"    public boolean isResource() {
        return this.resource;
    }","  public void test13()  throws Throwable  {
      Var var0 = new Var("""", """", """");
      String string0 = var0.getName();
}"
813,"    public String getJsType() {
        return this.jsType;
    }","  public void test14()  throws Throwable  {
      Var var0 = new Var();
      String string0 = var0.getJsType();
}"
814,"    public boolean isResource() {
        return this.resource;
    }","  public void test15()  throws Throwable  {
      Var var0 = new Var();
      String string0 = var0.getJsType();
}"
815,"    public boolean isResource() {
        return this.resource;
    }","  public void test16()  throws Throwable  {
      Var var0 = new Var();
      var0.setJsType("""");
      String string0 = var0.getJsType();
}"
816,"    public String getJsType() {
        return this.jsType;
    }","  public void test17()  throws Throwable  {
      Var var0 = new Var();
      var0.setJsType("""");
      String string0 = var0.getJsType();
}"
817,"    public String getBundle() {
        return this.bundle;
    }","  public void test18()  throws Throwable  {
      Var var0 = new Var();
      var0.setBundle(""'"");
      String string0 = var0.getBundle();
}"
818,"    public boolean isResource() {
        return this.resource;
    }","  public void test19()  throws Throwable  {
      Var var0 = new Var();
      var0.setBundle(""'"");
      String string0 = var0.getBundle();
}"
819,"    public boolean isResource() {
        return this.resource;
    }","  public void test20()  throws Throwable  {
      Var var0 = new Var();
      var0.setBundle("""");
      String string0 = var0.getBundle();
}"
820,"    public String getBundle() {
        return this.bundle;
    }","  public void test21()  throws Throwable  {
      Var var0 = new Var();
      var0.setBundle("""");
      String string0 = var0.getBundle();
}"
821,"    public String getValue() {
        return this.value;
    }","  public void test22()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
}"
822,"    public String getName() {
        return this.name;
    }","  public void test23()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      var0.setValue(""int"");
}"
823,"    public String getValue() {
        return this.value;
    }","  public void test24()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      Var var1 = (Var)var0.clone();
}"
824,"    public String getJsType() {
        return this.jsType;
    }","  public void test25()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      Var var1 = (Var)var0.clone();
}"
825,"    public boolean isResource() {
        return this.resource;
    }","  public void test26()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      Var var1 = (Var)var0.clone();
}"
826,"    public String getName() {
        return this.name;
    }","  public void test27()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      Var var1 = (Var)var0.clone();
}"
827,"    public String getValue() {
        return this.value;
    }","  public void test28()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      String string0 = var0.getValue();
}"
828,"    public boolean isResource() {
        return this.resource;
    }","  public void test29()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      String string0 = var0.getValue();
}"
829,"    public String getJsType() {
        return this.jsType;
    }","  public void test30()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      String string0 = var0.getValue();
}"
830,"    public String getName() {
        return this.name;
    }","  public void test31()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      String string0 = var0.getValue();
}"
831,"    public String getJsType() {
        return this.jsType;
    }","  public void test32()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      String string0 = var0.getName();
}"
832,"    public String getValue() {
        return this.value;
    }","  public void test33()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      String string0 = var0.getName();
}"
833,"    public String getName() {
        return this.name;
    }","  public void test34()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      String string0 = var0.getName();
}"
834,"    public boolean isResource() {
        return this.resource;
    }","  public void test35()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      String string0 = var0.getName();
}"
835,"    public String getJsType() {
        return this.jsType;
    }","  public void test36()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      var0.setName("",V-D]EO.q( GjN7N"");
}"
836,"    public boolean isResource() {
        return this.resource;
    }","  public void test37()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      var0.setName("",V-D]EO.q( GjN7N"");
}"
837,"    public String getName() {
        return this.name;
    }","  public void test38()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      var0.setName("",V-D]EO.q( GjN7N"");
}"
838,"    public String getValue() {
        return this.value;
    }","  public void test39()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      var0.setName("",V-D]EO.q( GjN7N"");
}"
839,"    public String toString() {
        StringBuilder results = new StringBuilder();

        results.append(""Var: name="");
        results.append(name);
        results.append(""  value="");
        results.append(value);
        results.append(""  resource="");
        results.append(resource);
        if (resource) {
            results.append(""  bundle="");
            results.append(bundle);
        }
        results.append(""  jsType="");
        results.append(jsType);
        results.append(""\n"");

        return results.toString();
    }","  public void test40()  throws Throwable  {
      Var var0 = new Var();
      String string0 = var0.toString();
}"
840,"    public String getValue() {
        return this.value;
    }","  public void test41()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      String string0 = var0.getJsType();
}"
841,"    public String getName() {
        return this.name;
    }","  public void test42()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      String string0 = var0.getJsType();
}"
842,"    public String getJsType() {
        return this.jsType;
    }","  public void test43()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      String string0 = var0.getJsType();
}"
843,"    public boolean isResource() {
        return this.resource;
    }","  public void test44()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      String string0 = var0.getJsType();
}"
844,"    public String getJsType() {
        return this.jsType;
    }","  public void test45()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      String string0 = var0.getBundle();
}"
845,"    public String getBundle() {
        return this.bundle;
    }","  public void test46()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      String string0 = var0.getBundle();
}"
846,"    public String getName() {
        return this.name;
    }","  public void test47()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      String string0 = var0.getBundle();
}"
847,"    public boolean isResource() {
        return this.resource;
    }","  public void test48()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      String string0 = var0.getBundle();
}"
848,"    public String getValue() {
        return this.value;
    }","  public void test49()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      String string0 = var0.getBundle();
}"
849,"    public boolean isResource() {
        return this.resource;
    }","  public void test50()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      boolean boolean0 = var0.isResource();
}"
850,"    public String getName() {
        return this.name;
    }","  public void test51()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      boolean boolean0 = var0.isResource();
}"
851,"    public String getJsType() {
        return this.jsType;
    }","  public void test52()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      boolean boolean0 = var0.isResource();
}"
852,"    public String getValue() {
        return this.value;
    }","  public void test53()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      boolean boolean0 = var0.isResource();
}"
853,"    public boolean isResource() {
        return this.resource;
    }","  public void test54()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
}"
854,"    public boolean isResource() {
        return this.resource;
    }","  public void test55()  throws Throwable  {
      Var var0 = new Var("",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"", "",V-D]EO.q( GjN7N"");
      var0.setResource(true);
      var0.toString();
}"
855,"    public static Short formatShort(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Short.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test0()  throws Throwable  {
      Short short0 = GenericTypeValidator.formatShort(""2_a*EN*[agb_"");
}"
856,"    public static Short formatShort(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Short.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test1()  throws Throwable  {
      Locale locale0 = Locale.US;
      Short short0 = GenericTypeValidator.formatShort(""0"", locale0);
}"
857,"    public static Short formatShort(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Short.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test2()  throws Throwable  {
      Short short0 = GenericTypeValidator.formatShort(""1"", (Locale) null);
}"
858,"    public static Short formatShort(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Short.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test3()  throws Throwable  {
      Short short0 = GenericTypeValidator.formatShort(""0"");
}"
859,"    public static Short formatShort(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Short.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test4()  throws Throwable  {
      Short short0 = GenericTypeValidator.formatShort(""88"");
}"
860,"    public static Long formatLong(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Long.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test5()  throws Throwable  {
      Long long0 = GenericTypeValidator.formatLong(""0"", (Locale) null);
}"
861,"    public static Long formatLong(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Long.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test6()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag(""-1"");
      Long long0 = GenericTypeValidator.formatLong(""-1"", locale0);
}"
862,"    public static Long formatLong(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Long.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test7()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag(""-1"");
      Long long0 = GenericTypeValidator.formatLong(""-1"", locale0);
}"
863,"    public static Long formatLong(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Long.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test8()  throws Throwable  {
      Long long0 = GenericTypeValidator.formatLong(""0"");
}"
864,"    public static Long formatLong(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Long.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test9()  throws Throwable  {
      Long long0 = GenericTypeValidator.formatLong(""9"");
}"
865,"    public static Long formatLong(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Long.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test10()  throws Throwable  {
      Long long0 = GenericTypeValidator.formatLong(""-1"");
}"
866,"    public static Integer formatInt(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Integer.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test11()  throws Throwable  {
      Integer integer0 = GenericTypeValidator.formatInt(""1"", (Locale) null);
}"
867,"    public static Integer formatInt(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Integer.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test12()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Integer integer0 = GenericTypeValidator.formatInt(""0"", locale0);
}"
868,"    public static Integer formatInt(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Integer.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test13()  throws Throwable  {
      Integer integer0 = GenericTypeValidator.formatInt(""-1"", (Locale) null);
}"
869,"    public static Integer formatInt(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Integer.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test14()  throws Throwable  {
      Integer integer0 = GenericTypeValidator.formatInt(""-1"", (Locale) null);
}"
870,"    public static Integer formatInt(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Integer.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test15()  throws Throwable  {
      Integer integer0 = GenericTypeValidator.formatInt(""0"");
}"
871,"    public static Integer formatInt(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Integer.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test16()  throws Throwable  {
      Integer integer0 = GenericTypeValidator.formatInt(""9"");
}"
872,"    public static Integer formatInt(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Integer.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test17()  throws Throwable  {
      Integer integer0 = GenericTypeValidator.formatInt(""-1"");
}"
873,"    public static Float formatFloat(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Float.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test18()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Float float0 = GenericTypeValidator.formatFloat(""0"", locale0);
}"
874,"    public static Float formatFloat(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Float.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test19()  throws Throwable  {
      Float float0 = GenericTypeValidator.formatFloat(""-1"", (Locale) null);
}"
875,"    public static Float formatFloat(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Float.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test20()  throws Throwable  {
      Float float0 = GenericTypeValidator.formatFloat(""-1"", (Locale) null);
}"
876,"    public static Float formatFloat(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Float.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test21()  throws Throwable  {
      Float float0 = GenericTypeValidator.formatFloat(""8E75"");
}"
877,"    public static Float formatFloat(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Float.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test22()  throws Throwable  {
      Float float0 = GenericTypeValidator.formatFloat(""0"");
}"
878,"    public static Float formatFloat(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Float.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test23()  throws Throwable  {
      Float float0 = GenericTypeValidator.formatFloat(""9"");
}"
879,"    public static Float formatFloat(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Float.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test24()  throws Throwable  {
      Float float0 = GenericTypeValidator.formatFloat(""-76."");
}"
880,"    public static Double formatDouble(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Double.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test25()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      Double double0 = GenericTypeValidator.formatDouble(""0"", locale0);
}"
881,"    public static Double formatDouble(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Double.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test26()  throws Throwable  {
      Double double0 = GenericTypeValidator.formatDouble(""9"", (Locale) null);
}"
882,"    public static Double formatDouble(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Double.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test27()  throws Throwable  {
      Double double0 = GenericTypeValidator.formatDouble(""8E725"");
}"
883,"    public static Double formatDouble(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Double.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test28()  throws Throwable  {
      Double double0 = GenericTypeValidator.formatDouble(""0"");
}"
884,"    public static Double formatDouble(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Double.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test29()  throws Throwable  {
      Double double0 = GenericTypeValidator.formatDouble(""1"");
}"
885,"    public static Double formatDouble(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Double.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test30()  throws Throwable  {
      Double double0 = GenericTypeValidator.formatDouble(""-5"");
}"
886,"    public static Byte formatByte(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Byte.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test31()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      Byte byte0 = GenericTypeValidator.formatByte(""0"", locale0);
}"
887,"    public static Byte formatByte(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Byte.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test32()  throws Throwable  {
      Byte byte0 = GenericTypeValidator.formatByte(""-5"", (Locale) null);
}"
888,"    public static Byte formatByte(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Byte.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test33()  throws Throwable  {
      Byte byte0 = GenericTypeValidator.formatByte(""-5"", (Locale) null);
}"
889,"    public static Byte formatByte(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Byte.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test34()  throws Throwable  {
      Byte byte0 = GenericTypeValidator.formatByte(""0"");
}"
890,"    public static Byte formatByte(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Byte.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test35()  throws Throwable  {
      Byte byte0 = GenericTypeValidator.formatByte(""7"");
}"
891,"    public static Byte formatByte(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Byte.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test36()  throws Throwable  {
      Byte byte0 = GenericTypeValidator.formatByte(""-5"");
}"
892,"    public static Date formatDate(String value, Locale locale) {
        Date date = null;

        if (value == null) {
            return null;
        }

        try {
            // Get the formatters to check against
            DateFormat formatterShort = null;
            DateFormat formatterDefault = null;
            if (locale != null) {
                formatterShort =
                        DateFormat.getDateInstance(DateFormat.SHORT, locale);
                formatterDefault =
                        DateFormat.getDateInstance(DateFormat.DEFAULT, locale);
            } else {
                formatterShort =
                        DateFormat.getDateInstance(
                                DateFormat.SHORT,
                                Locale.getDefault());
                formatterDefault =
                        DateFormat.getDateInstance(
                                DateFormat.DEFAULT,
                                Locale.getDefault());
            }

            // Turn off lenient parsing
            formatterShort.setLenient(false);
            formatterDefault.setLenient(false);

            // Firstly, try with the short form
            try {
                date = formatterShort.parse(value);
            } catch (ParseException e) {
                // Fall back on the default one
                date = formatterDefault.parse(value);
            }
        } catch (ParseException e) {
            // Bad date, so LOG and return null
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Date parse failed value=["" + value + ""], "" +
                        ""locale=["" + locale + ""] "" + e);
            }
        }

        return date;
    }","  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        GenericTypeValidator.formatDate(""], locale=["", ""], locale=["", false);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'l'
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
893,"    public static Long formatCreditCard(String value) {
        return GenericValidator.isCreditCard(value) ? Long.valueOf(value) : null;
    }","  public void test38()  throws Throwable  {
      Long long0 = GenericTypeValidator.formatCreditCard(""7_qU63"");
}"
894,"    public static Date formatDate(String value, Locale locale) {
        Date date = null;

        if (value == null) {
            return null;
        }

        try {
            // Get the formatters to check against
            DateFormat formatterShort = null;
            DateFormat formatterDefault = null;
            if (locale != null) {
                formatterShort =
                        DateFormat.getDateInstance(DateFormat.SHORT, locale);
                formatterDefault =
                        DateFormat.getDateInstance(DateFormat.DEFAULT, locale);
            } else {
                formatterShort =
                        DateFormat.getDateInstance(
                                DateFormat.SHORT,
                                Locale.getDefault());
                formatterDefault =
                        DateFormat.getDateInstance(
                                DateFormat.DEFAULT,
                                Locale.getDefault());
            }

            // Turn off lenient parsing
            formatterShort.setLenient(false);
            formatterDefault.setLenient(false);

            // Firstly, try with the short form
            try {
                date = formatterShort.parse(value);
            } catch (ParseException e) {
                // Fall back on the default one
                date = formatterDefault.parse(value);
            }
        } catch (ParseException e) {
            // Bad date, so LOG and return null
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Date parse failed value=["" + value + ""], "" +
                        ""locale=["" + locale + ""] "" + e);
            }
        }

        return date;
    }","  public void test39()  throws Throwable  {
      Date date0 = GenericTypeValidator.formatDate(""-3fb#gEG>kyF'"", ""Y"", true);
}"
895,"    public static Date formatDate(String value, Locale locale) {
        Date date = null;

        if (value == null) {
            return null;
        }

        try {
            // Get the formatters to check against
            DateFormat formatterShort = null;
            DateFormat formatterDefault = null;
            if (locale != null) {
                formatterShort =
                        DateFormat.getDateInstance(DateFormat.SHORT, locale);
                formatterDefault =
                        DateFormat.getDateInstance(DateFormat.DEFAULT, locale);
            } else {
                formatterShort =
                        DateFormat.getDateInstance(
                                DateFormat.SHORT,
                                Locale.getDefault());
                formatterDefault =
                        DateFormat.getDateInstance(
                                DateFormat.DEFAULT,
                                Locale.getDefault());
            }

            // Turn off lenient parsing
            formatterShort.setLenient(false);
            formatterDefault.setLenient(false);

            // Firstly, try with the short form
            try {
                date = formatterShort.parse(value);
            } catch (ParseException e) {
                // Fall back on the default one
                date = formatterDefault.parse(value);
            }
        } catch (ParseException e) {
            // Bad date, so LOG and return null
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Date parse failed value=["" + value + ""], "" +
                        ""locale=["" + locale + ""] "" + e);
            }
        }

        return date;
    }","  public void test40()  throws Throwable  {
      Date date0 = GenericTypeValidator.formatDate(""-"", ""-"", true);
}"
896,"    public static Date formatDate(String value, Locale locale) {
        Date date = null;

        if (value == null) {
            return null;
        }

        try {
            // Get the formatters to check against
            DateFormat formatterShort = null;
            DateFormat formatterDefault = null;
            if (locale != null) {
                formatterShort =
                        DateFormat.getDateInstance(DateFormat.SHORT, locale);
                formatterDefault =
                        DateFormat.getDateInstance(DateFormat.DEFAULT, locale);
            } else {
                formatterShort =
                        DateFormat.getDateInstance(
                                DateFormat.SHORT,
                                Locale.getDefault());
                formatterDefault =
                        DateFormat.getDateInstance(
                                DateFormat.DEFAULT,
                                Locale.getDefault());
            }

            // Turn off lenient parsing
            formatterShort.setLenient(false);
            formatterDefault.setLenient(false);

            // Firstly, try with the short form
            try {
                date = formatterShort.parse(value);
            } catch (ParseException e) {
                // Fall back on the default one
                date = formatterDefault.parse(value);
            }
        } catch (ParseException e) {
            // Bad date, so LOG and return null
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Date parse failed value=["" + value + ""], "" +
                        ""locale=["" + locale + ""] "" + e);
            }
        }

        return date;
    }","  public void test41()  throws Throwable  {
      Date date0 = GenericTypeValidator.formatDate(""] "", ""] "", false);
}"
897,"    public static Date formatDate(String value, Locale locale) {
        Date date = null;

        if (value == null) {
            return null;
        }

        try {
            // Get the formatters to check against
            DateFormat formatterShort = null;
            DateFormat formatterDefault = null;
            if (locale != null) {
                formatterShort =
                        DateFormat.getDateInstance(DateFormat.SHORT, locale);
                formatterDefault =
                        DateFormat.getDateInstance(DateFormat.DEFAULT, locale);
            } else {
                formatterShort =
                        DateFormat.getDateInstance(
                                DateFormat.SHORT,
                                Locale.getDefault());
                formatterDefault =
                        DateFormat.getDateInstance(
                                DateFormat.DEFAULT,
                                Locale.getDefault());
            }

            // Turn off lenient parsing
            formatterShort.setLenient(false);
            formatterDefault.setLenient(false);

            // Firstly, try with the short form
            try {
                date = formatterShort.parse(value);
            } catch (ParseException e) {
                // Fall back on the default one
                date = formatterDefault.parse(value);
            }
        } catch (ParseException e) {
            // Bad date, so LOG and return null
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Date parse failed value=["" + value + ""], "" +
                        ""locale=["" + locale + ""] "" + e);
            }
        }

        return date;
    }","  public void test42()  throws Throwable  {
      Date date0 = GenericTypeValidator.formatDate(""j'u`{V"", ""] "", true);
}"
898,"    public static Date formatDate(String value, Locale locale) {
        Date date = null;

        if (value == null) {
            return null;
        }

        try {
            // Get the formatters to check against
            DateFormat formatterShort = null;
            DateFormat formatterDefault = null;
            if (locale != null) {
                formatterShort =
                        DateFormat.getDateInstance(DateFormat.SHORT, locale);
                formatterDefault =
                        DateFormat.getDateInstance(DateFormat.DEFAULT, locale);
            } else {
                formatterShort =
                        DateFormat.getDateInstance(
                                DateFormat.SHORT,
                                Locale.getDefault());
                formatterDefault =
                        DateFormat.getDateInstance(
                                DateFormat.DEFAULT,
                                Locale.getDefault());
            }

            // Turn off lenient parsing
            formatterShort.setLenient(false);
            formatterDefault.setLenient(false);

            // Firstly, try with the short form
            try {
                date = formatterShort.parse(value);
            } catch (ParseException e) {
                // Fall back on the default one
                date = formatterDefault.parse(value);
            }
        } catch (ParseException e) {
            // Bad date, so LOG and return null
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Date parse failed value=["" + value + ""], "" +
                        ""locale=["" + locale + ""] "" + e);
            }
        }

        return date;
    }","  public void test43()  throws Throwable  {
      Date date0 = GenericTypeValidator.formatDate(""b"", (String) null, false);
}"
899,"    public static Date formatDate(String value, Locale locale) {
        Date date = null;

        if (value == null) {
            return null;
        }

        try {
            // Get the formatters to check against
            DateFormat formatterShort = null;
            DateFormat formatterDefault = null;
            if (locale != null) {
                formatterShort =
                        DateFormat.getDateInstance(DateFormat.SHORT, locale);
                formatterDefault =
                        DateFormat.getDateInstance(DateFormat.DEFAULT, locale);
            } else {
                formatterShort =
                        DateFormat.getDateInstance(
                                DateFormat.SHORT,
                                Locale.getDefault());
                formatterDefault =
                        DateFormat.getDateInstance(
                                DateFormat.DEFAULT,
                                Locale.getDefault());
            }

            // Turn off lenient parsing
            formatterShort.setLenient(false);
            formatterDefault.setLenient(false);

            // Firstly, try with the short form
            try {
                date = formatterShort.parse(value);
            } catch (ParseException e) {
                // Fall back on the default one
                date = formatterDefault.parse(value);
            }
        } catch (ParseException e) {
            // Bad date, so LOG and return null
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Date parse failed value=["" + value + ""], "" +
                        ""locale=["" + locale + ""] "" + e);
            }
        }

        return date;
    }","  public void test44()  throws Throwable  {
      Date date0 = GenericTypeValidator.formatDate(""], locale=["", """", false);
}"
900,"    public static Date formatDate(String value, Locale locale) {
        Date date = null;

        if (value == null) {
            return null;
        }

        try {
            // Get the formatters to check against
            DateFormat formatterShort = null;
            DateFormat formatterDefault = null;
            if (locale != null) {
                formatterShort =
                        DateFormat.getDateInstance(DateFormat.SHORT, locale);
                formatterDefault =
                        DateFormat.getDateInstance(DateFormat.DEFAULT, locale);
            } else {
                formatterShort =
                        DateFormat.getDateInstance(
                                DateFormat.SHORT,
                                Locale.getDefault());
                formatterDefault =
                        DateFormat.getDateInstance(
                                DateFormat.DEFAULT,
                                Locale.getDefault());
            }

            // Turn off lenient parsing
            formatterShort.setLenient(false);
            formatterDefault.setLenient(false);

            // Firstly, try with the short form
            try {
                date = formatterShort.parse(value);
            } catch (ParseException e) {
                // Fall back on the default one
                date = formatterDefault.parse(value);
            }
        } catch (ParseException e) {
            // Bad date, so LOG and return null
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Date parse failed value=["" + value + ""], "" +
                        ""locale=["" + locale + ""] "" + e);
            }
        }

        return date;
    }","  public void test45()  throws Throwable  {
      Date date0 = GenericTypeValidator.formatDate((String) null, ""of{X`>g#+j"", false);
}"
901,"    public static Date formatDate(String value, Locale locale) {
        Date date = null;

        if (value == null) {
            return null;
        }

        try {
            // Get the formatters to check against
            DateFormat formatterShort = null;
            DateFormat formatterDefault = null;
            if (locale != null) {
                formatterShort =
                        DateFormat.getDateInstance(DateFormat.SHORT, locale);
                formatterDefault =
                        DateFormat.getDateInstance(DateFormat.DEFAULT, locale);
            } else {
                formatterShort =
                        DateFormat.getDateInstance(
                                DateFormat.SHORT,
                                Locale.getDefault());
                formatterDefault =
                        DateFormat.getDateInstance(
                                DateFormat.DEFAULT,
                                Locale.getDefault());
            }

            // Turn off lenient parsing
            formatterShort.setLenient(false);
            formatterDefault.setLenient(false);

            // Firstly, try with the short form
            try {
                date = formatterShort.parse(value);
            } catch (ParseException e) {
                // Fall back on the default one
                date = formatterDefault.parse(value);
            }
        } catch (ParseException e) {
            // Bad date, so LOG and return null
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Date parse failed value=["" + value + ""], "" +
                        ""locale=["" + locale + ""] "" + e);
            }
        }

        return date;
    }","  public void test46()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Date date0 = GenericTypeValidator.formatDate("""", locale0);
}"
902,"    public static Date formatDate(String value, Locale locale) {
        Date date = null;

        if (value == null) {
            return null;
        }

        try {
            // Get the formatters to check against
            DateFormat formatterShort = null;
            DateFormat formatterDefault = null;
            if (locale != null) {
                formatterShort =
                        DateFormat.getDateInstance(DateFormat.SHORT, locale);
                formatterDefault =
                        DateFormat.getDateInstance(DateFormat.DEFAULT, locale);
            } else {
                formatterShort =
                        DateFormat.getDateInstance(
                                DateFormat.SHORT,
                                Locale.getDefault());
                formatterDefault =
                        DateFormat.getDateInstance(
                                DateFormat.DEFAULT,
                                Locale.getDefault());
            }

            // Turn off lenient parsing
            formatterShort.setLenient(false);
            formatterDefault.setLenient(false);

            // Firstly, try with the short form
            try {
                date = formatterShort.parse(value);
            } catch (ParseException e) {
                // Fall back on the default one
                date = formatterDefault.parse(value);
            }
        } catch (ParseException e) {
            // Bad date, so LOG and return null
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Date parse failed value=["" + value + ""], "" +
                        ""locale=["" + locale + ""] "" + e);
            }
        }

        return date;
    }","  public void test47()  throws Throwable  {
      Date date0 = GenericTypeValidator.formatDate((String) null, (Locale) null);
}"
903,"    public static Date formatDate(String value, Locale locale) {
        Date date = null;

        if (value == null) {
            return null;
        }

        try {
            // Get the formatters to check against
            DateFormat formatterShort = null;
            DateFormat formatterDefault = null;
            if (locale != null) {
                formatterShort =
                        DateFormat.getDateInstance(DateFormat.SHORT, locale);
                formatterDefault =
                        DateFormat.getDateInstance(DateFormat.DEFAULT, locale);
            } else {
                formatterShort =
                        DateFormat.getDateInstance(
                                DateFormat.SHORT,
                                Locale.getDefault());
                formatterDefault =
                        DateFormat.getDateInstance(
                                DateFormat.DEFAULT,
                                Locale.getDefault());
            }

            // Turn off lenient parsing
            formatterShort.setLenient(false);
            formatterDefault.setLenient(false);

            // Firstly, try with the short form
            try {
                date = formatterShort.parse(value);
            } catch (ParseException e) {
                // Fall back on the default one
                date = formatterDefault.parse(value);
            }
        } catch (ParseException e) {
            // Bad date, so LOG and return null
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Date parse failed value=["" + value + ""], "" +
                        ""locale=["" + locale + ""] "" + e);
            }
        }

        return date;
    }","  public void test48()  throws Throwable  {
      Date date0 = GenericTypeValidator.formatDate(""7_qU63"", (Locale) null);
}"
904,"    public static Double formatDouble(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Double.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test49()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Double double0 = GenericTypeValidator.formatDouble(""2A?"", locale0);
}"
905,"    public static Double formatDouble(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Double.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test50()  throws Throwable  {
      Double double0 = GenericTypeValidator.formatDouble(""], locale=["", (Locale) null);
}"
906,"    public static Double formatDouble(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Double.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test51()  throws Throwable  {
      Double double0 = GenericTypeValidator.formatDouble(""-5"", (Locale) null);
}"
907,"    public static Double formatDouble(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Double.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test52()  throws Throwable  {
      Double double0 = GenericTypeValidator.formatDouble(""-5"", (Locale) null);
}"
908,"    public static Double formatDouble(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Double.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test53()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag(""8E725"");
      Double double0 = GenericTypeValidator.formatDouble(""8E725"", locale0);
}"
909,"    public static Double formatDouble(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Double.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test54()  throws Throwable  {
      Double double0 = GenericTypeValidator.formatDouble((String) null, (Locale) null);
}"
910,"    public static Double formatDouble(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Double.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test55()  throws Throwable  {
      Double double0 = GenericTypeValidator.formatDouble((String) null);
}"
911,"    public static Double formatDouble(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Double.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test56()  throws Throwable  {
      Double double0 = GenericTypeValidator.formatDouble(""f"");
}"
912,"    public static Float formatFloat(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Float.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test57()  throws Throwable  {
      Float float0 = GenericTypeValidator.formatFloat(""6"", (Locale) null);
}"
913,"    public static Float formatFloat(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Float.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test58()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Float float0 = GenericTypeValidator.formatFloat(""f"", locale0);
}"
914,"    public static Float formatFloat(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Float.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test59()  throws Throwable  {
      Float float0 = GenericTypeValidator.formatFloat(""7_qU63"", (Locale) null);
}"
915,"    public static Float formatFloat(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Float.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test60()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag(""8E725"");
      Float float0 = GenericTypeValidator.formatFloat(""8E725"", locale0);
}"
916,"    public static Float formatFloat(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Float.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test61()  throws Throwable  {
      Float float0 = GenericTypeValidator.formatFloat((String) null, (Locale) null);
}"
917,"    public static Float formatFloat(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Float.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test62()  throws Throwable  {
      Float float0 = GenericTypeValidator.formatFloat((String) null);
}"
918,"    public static Float formatFloat(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Float.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test63()  throws Throwable  {
      Float float0 = GenericTypeValidator.formatFloat(""German"");
}"
919,"    public static Long formatLong(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Long.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test64()  throws Throwable  {
      Long long0 = GenericTypeValidator.formatLong(""6"", (Locale) null);
}"
920,"    public static Long formatLong(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Long.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test65()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Long long0 = GenericTypeValidator.formatLong(""0K6%&dz~g nL>=uT,"", locale0);
}"
921,"    public static Long formatLong(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Long.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test66()  throws Throwable  {
      Long long0 = GenericTypeValidator.formatLong(""] "", (Locale) null);
}"
922,"    public static Long formatLong(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Long.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test67()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag(""8E725"");
      Long long0 = GenericTypeValidator.formatLong(""8E725"", locale0);
}"
923,"    public static Long formatLong(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Long.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test68()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      Long long0 = GenericTypeValidator.formatLong((String) null, locale0);
}"
924,"    public static Long formatLong(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Long.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test69()  throws Throwable  {
      Long long0 = GenericTypeValidator.formatLong((String) null);
}"
925,"    public static Long formatLong(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Long.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test70()  throws Throwable  {
      Long long0 = GenericTypeValidator.formatLong(""reviews"");
}"
926,"    public static Integer formatInt(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Integer.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test71()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag(""8E725"");
      Integer integer0 = GenericTypeValidator.formatInt("""", locale0);
}"
927,"    public static Integer formatInt(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Integer.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test72()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag(""8E725"");
      Integer integer0 = GenericTypeValidator.formatInt(""8E725"", locale0);
}"
928,"    public static Integer formatInt(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Integer.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test73()  throws Throwable  {
      Integer integer0 = GenericTypeValidator.formatInt(""7_qU63"", (Locale) null);
}"
929,"    public static Integer formatInt(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Integer.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test74()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Integer integer0 = GenericTypeValidator.formatInt((String) null, locale0);
}"
930,"    public static Integer formatInt(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Integer.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test75()  throws Throwable  {
      Integer integer0 = GenericTypeValidator.formatInt((String) null);
}"
931,"    public static Integer formatInt(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Integer.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test76()  throws Throwable  {
      Integer integer0 = GenericTypeValidator.formatInt(""87E5"");
}"
932,"    public static Short formatShort(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Short.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test77()  throws Throwable  {
      Short short0 = GenericTypeValidator.formatShort(""-5"", (Locale) null);
}"
933,"    public static Short formatShort(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Short.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test78()  throws Throwable  {
      Short short0 = GenericTypeValidator.formatShort(""-5"", (Locale) null);
}"
934,"    public static Short formatShort(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Short.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test79()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Short short0 = GenericTypeValidator.formatShort(""0K6%&dz~g nL>=uT,"", locale0);
}"
935,"    public static Short formatShort(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Short.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test80()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag(""8E725"");
      Short short0 = GenericTypeValidator.formatShort(""8E725"", locale0);
}"
936,"    public static Short formatShort(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Short.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test81()  throws Throwable  {
      Short short0 = GenericTypeValidator.formatShort("""", (Locale) null);
}"
937,"    public static Short formatShort(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Short.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test82()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Short short0 = GenericTypeValidator.formatShort((String) null, locale0);
}"
938,"    public static Short formatShort(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Short.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test83()  throws Throwable  {
      Short short0 = GenericTypeValidator.formatShort((String) null);
}"
939,"    public static Short formatShort(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Short.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test84()  throws Throwable  {
      Short short0 = GenericTypeValidator.formatShort(""-5"");
}"
940,"    public static Byte formatByte(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Byte.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test85()  throws Throwable  {
      Byte byte0 = GenericTypeValidator.formatByte(""88"", (Locale) null);
}"
941,"    public static Byte formatByte(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Byte.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test86()  throws Throwable  {
      Byte byte0 = GenericTypeValidator.formatByte(""88"", (Locale) null);
}"
942,"    public static Byte formatByte(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Byte.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test87()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag(""8E725"");
      Byte byte0 = GenericTypeValidator.formatByte(""8E725"", locale0);
}"
943,"    public static Byte formatByte(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Byte.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test88()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Byte byte0 = GenericTypeValidator.formatByte(""2A?"", locale0);
}"
944,"    public static Byte formatByte(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Byte.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test89()  throws Throwable  {
      Byte byte0 = GenericTypeValidator.formatByte("""", (Locale) null);
}"
945,"    public static Byte formatByte(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Byte.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test90()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Byte byte0 = GenericTypeValidator.formatByte((String) null, locale0);
}"
946,"    public static Byte formatByte(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Byte.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test91()  throws Throwable  {
      Byte byte0 = GenericTypeValidator.formatByte((String) null);
}"
947,"    public static Byte formatByte(String value) {
        if (value == null) {
            return null;
        }

        try {
            return Byte.valueOf(value);
        } catch (NumberFormatException e) {
            return null;
        }

    }","  public void test92()  throws Throwable  {
      Byte byte0 = GenericTypeValidator.formatByte(""7_qU63"");
}"
948,,"  public void test93()  throws Throwable  {
      GenericTypeValidator genericTypeValidator0 = new GenericTypeValidator();
  }"
949,"    public boolean isValid(String validatorName) {
        ResultStatus status = hAction.get(validatorName);
        return (status == null) ? false : status.isValid();
    }","  public void test0()  throws Throwable  {
      ValidatorResult validatorResult0 = new ValidatorResult((Field) null);
      validatorResult0.add(""org.apache.commons.collections.FastHashMap"", true);
      boolean boolean0 = validatorResult0.isValid(""org.apache.commons.collections.FastHashMap"");
}"
950,"    public Object getResult(String validatorName) {
        ResultStatus status = hAction.get(validatorName);
        return (status == null) ? null : status.getResult();
    }","  public void test1()  throws Throwable  {
      Field field0 = new Field();
      ValidatorResult validatorResult0 = new ValidatorResult(field0);
      Object object0 = new Object();
      validatorResult0.add(""[]"", true, object0);
      Object object1 = validatorResult0.getResult(""[]"");
}"
951,"    public Field getField() {
        return this.field;
    }","  public void test2()  throws Throwable  {
      Field field0 = new Field();
      ValidatorResult validatorResult0 = new ValidatorResult(field0);
      field0.setIndexedListProperty(""#yMIq@'H@m`@%R6X}d"");
      Field field1 = validatorResult0.getField();
}"
952,"    public Field getField() {
        return this.field;
    }","  public void test3()  throws Throwable  {
      Field field0 = new Field();
      ValidatorResult validatorResult0 = new ValidatorResult(field0);
      field0.setPage(1805);
      Field field1 = validatorResult0.getField();
}"
953,"    public Field getField() {
        return this.field;
    }","  public void test4()  throws Throwable  {
      Field field0 = new Field();
      ValidatorResult validatorResult0 = new ValidatorResult(field0);
      field0.setPage((-1442));
      Field field1 = validatorResult0.getField();
}"
954,"    public Field getField() {
        return this.field;
    }","  public void test5()  throws Throwable  {
      Field field0 = new Field();
      ValidatorResult validatorResult0 = new ValidatorResult(field0);
      Field field1 = validatorResult0.getField();
      field1.clientValidation = false;
      Field field2 = validatorResult0.getField();
}"
955,"    public Field getField() {
        return this.field;
    }","  public void test6()  throws Throwable  {
      Field field0 = new Field();
      field0.fieldOrder = 1;
      ValidatorResult validatorResult0 = new ValidatorResult(field0);
      Field field1 = validatorResult0.getField();
}"
956,"    public Field getField() {
        return this.field;
    }","  public void test7()  throws Throwable  {
      Field field0 = new Field();
      ValidatorResult validatorResult0 = new ValidatorResult(field0);
      field0.setFieldOrder((-1442));
      Field field1 = validatorResult0.getField();
}"
957,"    public boolean isValid(String validatorName) {
        ResultStatus status = hAction.get(validatorName);
        return (status == null) ? false : status.isValid();
    }","  public void test8()  throws Throwable  {
      ValidatorResult validatorResult0 = new ValidatorResult((Field) null);
      validatorResult0.hAction = null;
      // Undeclared exception!
      try { 
        validatorResult0.isValid((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.ValidatorResult"", e);
      }
  }"
958,"    public Object getResult(String validatorName) {
        ResultStatus status = hAction.get(validatorName);
        return (status == null) ? null : status.getResult();
    }","  public void test9()  throws Throwable  {
      Field field0 = new Field();
      ValidatorResult validatorResult0 = new ValidatorResult(field0);
      validatorResult0.hAction = null;
      // Undeclared exception!
      try { 
        validatorResult0.getResult("""");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.ValidatorResult"", e);
      }
  }"
959,"    public Iterator<String> getActions() {
        return Collections.unmodifiableMap(hAction).keySet().iterator();
    }","  public void test10()  throws Throwable  {
      Field field0 = new Field();
      ValidatorResult validatorResult0 = new ValidatorResult(field0);
      validatorResult0.hAction = null;
      // Undeclared exception!
      try { 
        validatorResult0.getActions();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableMap"", e);
      }
  }"
960,"    public Map<String, ResultStatus> getActionMap() {
        return Collections.unmodifiableMap(hAction);
    }","  public void test11()  throws Throwable  {
      Field field0 = new Field();
      ValidatorResult validatorResult0 = new ValidatorResult(field0);
      validatorResult0.hAction = null;
      // Undeclared exception!
      try { 
        validatorResult0.getActionMap();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableMap"", e);
      }
  }"
961,"    public boolean containsAction(String validatorName) {
        return hAction.containsKey(validatorName);
    }","  public void test12()  throws Throwable  {
      Field field0 = new Field();
      ValidatorResult validatorResult0 = new ValidatorResult(field0);
      validatorResult0.hAction = null;
      // Undeclared exception!
      try { 
        validatorResult0.containsAction(""Cannot call setJsFunction() after calling setJavascript()"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
962,"    public void add(String validatorName, boolean result) {
        this.add(validatorName, result, null);
    }","  public void test13()  throws Throwable  {
      ValidatorResult validatorResult0 = new ValidatorResult((Field) null);
      Map<String, ValidatorResult.ResultStatus> map0 = validatorResult0.getActionMap();
      ValidatorResult validatorResult1 = new ValidatorResult((Field) null);
      validatorResult1.hAction = map0;
      // Undeclared exception!
      try { 
        validatorResult1.add(""IL,EvsaUx|M.8j^s/:"", true, (Object) ""^pLK'|\""VVv9!"");
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableMap"", e);
      }
  }"
963,"    public void add(String validatorName, boolean result) {
        this.add(validatorName, result, null);
    }","  public void test14()  throws Throwable  {
      Field field0 = new Field();
      ValidatorResult validatorResult0 = new ValidatorResult(field0);
      validatorResult0.hAction = null;
      // Undeclared exception!
      try { 
        validatorResult0.add(""s+i|=X/ut"", false, (Object) ""[]"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.ValidatorResult"", e);
      }
  }"
964,"    public void add(String validatorName, boolean result) {
        this.add(validatorName, result, null);
    }","  public void test15()  throws Throwable  {
      Field field0 = new Field();
      ValidatorResult validatorResult0 = new ValidatorResult(field0);
      validatorResult0.hAction = null;
      // Undeclared exception!
      try { 
        validatorResult0.add((String) null, false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.ValidatorResult"", e);
      }
  }"
965,"    public boolean isValid(String validatorName) {
        ResultStatus status = hAction.get(validatorName);
        return (status == null) ? false : status.isValid();
    }","  public void test16()  throws Throwable  {
      ValidatorResult.ResultStatus validatorResult_ResultStatus0 = new ValidatorResult.ResultStatus(false, (Object) null);
      validatorResult_ResultStatus0.getResult();
}"
966,"    public boolean isValid(String validatorName) {
        ResultStatus status = hAction.get(validatorName);
        return (status == null) ? false : status.isValid();
    }","  public void test17()  throws Throwable  {
      ValidatorResult.ResultStatus validatorResult_ResultStatus0 = new ValidatorResult.ResultStatus(true, (Object) null);
      boolean boolean0 = validatorResult_ResultStatus0.isValid();
}"
967,"    public Object getResult(String validatorName) {
        ResultStatus status = hAction.get(validatorName);
        return (status == null) ? null : status.getResult();
    }","  public void test18()  throws Throwable  {
      Field field0 = new Field();
      ValidatorResult validatorResult0 = new ValidatorResult(field0);
      Object object0 = validatorResult0.getResult(""[]"");
}"
968,"    public boolean isValid(String validatorName) {
        ResultStatus status = hAction.get(validatorName);
        return (status == null) ? false : status.isValid();
    }","  public void test19()  throws Throwable  {
      ValidatorResult validatorResult0 = new ValidatorResult((Field) null);
      boolean boolean0 = validatorResult0.isValid(""l8~D'E-"");
}"
969,"    public boolean containsAction(String validatorName) {
        return hAction.containsKey(validatorName);
    }","  public void test20()  throws Throwable  {
      ValidatorResult validatorResult0 = new ValidatorResult((Field) null);
      validatorResult0.add((String) null, false);
      boolean boolean0 = validatorResult0.containsAction((String) null);
}"
970,"    public boolean containsAction(String validatorName) {
        return hAction.containsKey(validatorName);
    }","  public void test21()  throws Throwable  {
      Field field0 = new Field();
      ValidatorResult validatorResult0 = new ValidatorResult(field0);
      boolean boolean0 = validatorResult0.containsAction(""[]"");
}"
971,"    public Field getField() {
        return this.field;
    }","  public void test22()  throws Throwable  {
      ValidatorResult validatorResult0 = new ValidatorResult((Field) null);
      Field field0 = validatorResult0.getField();
}"
972,"    public Iterator<String> getActions() {
        return Collections.unmodifiableMap(hAction).keySet().iterator();
    }","  public void test23()  throws Throwable  {
      ValidatorResult validatorResult0 = new ValidatorResult((Field) null);
      Iterator<String> iterator0 = validatorResult0.getActions();
}"
973,"    public void add(String validatorName, boolean result) {
        this.add(validatorName, result, null);
    }","  public void test24()  throws Throwable  {
      ValidatorResult validatorResult0 = new ValidatorResult((Field) null);
      Map<String, ValidatorResult.ResultStatus> map0 = validatorResult0.getActionMap();
      validatorResult0.hAction = map0;
      // Undeclared exception!
      try { 
        validatorResult0.add((String) null, true);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableMap"", e);
      }
  }"
974,"    public boolean isValid(String validatorName) {
        ResultStatus status = hAction.get(validatorName);
        return (status == null) ? false : status.isValid();
    }","  public void test25()  throws Throwable  {
      Field field0 = new Field();
      ValidatorResult.ResultStatus validatorResult_ResultStatus0 = new ValidatorResult.ResultStatus(true, field0);
      Object object0 = new Object();
      validatorResult_ResultStatus0.setResult(object0);
}"
975,"    public boolean isValid(String validatorName) {
        ResultStatus status = hAction.get(validatorName);
        return (status == null) ? false : status.isValid();
    }","  public void test26()  throws Throwable  {
      ValidatorResult.ResultStatus validatorResult_ResultStatus0 = new ValidatorResult.ResultStatus(false, (Object) null);
}"
976,"    public boolean isValid(String validatorName) {
        ResultStatus status = hAction.get(validatorName);
        return (status == null) ? false : status.isValid();
    }","  public void test27()  throws Throwable  {
      ValidatorResult.ResultStatus validatorResult_ResultStatus0 = new ValidatorResult.ResultStatus(false, (Object) null);
      validatorResult_ResultStatus0.setValid(true);
}"
977,"    public static String getValueAsString(Object bean, String property) {
        Object value = null;

        try {
            value = PropertyUtils.getProperty(bean, property);

        } catch(IllegalAccessException e) {
            LOG.error(e.getMessage(), e);
        } catch(InvocationTargetException e) {
            LOG.error(e.getMessage(), e);
        } catch(NoSuchMethodException e) {
            LOG.error(e.getMessage(), e);
        }

        if (value == null) {
            return null;
        }

        if (value instanceof String[]) {
            return ((String[]) value).length > 0 ? value.toString() : """";

        } else if (value instanceof Collection) {
            return ((Collection<?>) value).isEmpty() ? """" : value.toString();

        } else {
            return value.toString();
        }

    }","  public void test0()  throws Throwable  {
      ValidatorUtils.replace("""", """", """");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Var var0 = new Var("""", """", """");
      var0.setResource(true);
      hashMap0.put("""", """");
      hashMap0.put("""", var0);
      Msg msg0 = new Msg();
      msg0.setName((String) null);
      hashMap0.put("""", msg0);
      FastHashMap fastHashMap0 = new FastHashMap(hashMap0);
      FastHashMap fastHashMap1 = ValidatorUtils.copyFastHashMap(fastHashMap0);
      ValidatorUtils.copyFastHashMap(fastHashMap0);
      Object object0 = new Object();
      ValidatorUtils validatorUtils0 = new ValidatorUtils();
      BiFunction<ValidatorUtils, ValidatorUtils, Var> biFunction0 = (BiFunction<ValidatorUtils, ValidatorUtils, Var>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      fastHashMap1.merge(object0, validatorUtils0, biFunction0);
      ValidatorUtils.copyMap(fastHashMap0);
      FastHashMap fastHashMap2 = ValidatorUtils.copyFastHashMap(fastHashMap1);
      ValidatorUtils.copyMap(fastHashMap2);
      Object object1 = new Object();
      ValidatorUtils.getValueAsString(object1, """");
      ValidatorUtils validatorUtils1 = new ValidatorUtils();
      ValidatorUtils.replace(""}#"", (String) null, ""_ %:"");
      // Undeclared exception!
      try { 
        ValidatorUtils.getValueAsString("""", (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.lang.String'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
978,"    public static String replace(String value, String key, String replaceValue) {

        if (value == null || key == null || replaceValue == null) {
            return value;
        }

        int pos = value.indexOf(key);

        if (pos < 0) {
            return value;
        }

        int length = value.length();
        int start = pos;
        int end = pos + key.length();

        if (length == key.length()) {
            value = replaceValue;

        } else if (end == length) {
            value = value.substring(0, start) + replaceValue;

        } else {
            value =
                    value.substring(0, start)
                    + replaceValue
                    + replace(value.substring(end), key, replaceValue);
        }

        return value;
    }","  public void test1()  throws Throwable  {
      FastHashMap fastHashMap0 = new FastHashMap();
      FastHashMap fastHashMap1 = ValidatorUtils.copyFastHashMap(fastHashMap0);
      FastHashMap fastHashMap2 = ValidatorUtils.copyFastHashMap(fastHashMap1);
      Var var0 = new Var();
      var0.setJsType("""");
      var0.setBundle(""        USING CONVERTER "");
      fastHashMap2.put(""        USING CONVERTER "", var0);
      fastHashMap2.putIfAbsent(fastHashMap1, fastHashMap0);
      ValidatorUtils.copyMap(fastHashMap2);
      ValidatorUtils.copyMap(fastHashMap2);
      ValidatorUtils.replace("""", """", """");
      ValidatorUtils.replace(""        USING CONVERTER "", ""G5[06='gh3"", """");
      ValidatorUtils.copyFastHashMap(fastHashMap2);
      ValidatorUtils validatorUtils0 = new ValidatorUtils();
      ValidatorUtils.copyFastHashMap(fastHashMap0);
      ValidatorUtils.copyFastHashMap(fastHashMap1);
      ValidatorUtils.copyMap(fastHashMap0);
      ValidatorUtils.getValueAsString(var0, ""        USING CONVERTER "");
      ValidatorUtils.copyFastHashMap(fastHashMap2);
      ValidatorUtils.replace("""", (String) null, """");
  }"
979,"    public static FastHashMap copyFastHashMap(FastHashMap map) {
        FastHashMap results = new FastHashMap();

        @SuppressWarnings(""unchecked"") // FastHashMap is not generic
        Iterator<Entry<String, ?>> i = map.entrySet().iterator();
        while (i.hasNext()) {
            Entry<String, ?> entry = i.next();
            String key = entry.getKey();
            Object value = entry.getValue();

            if (value instanceof Msg) {
                results.put(key, ((Msg) value).clone());
            } else if (value instanceof Arg) {
                results.put(key, ((Arg) value).clone());
            } else if (value instanceof Var) {
                results.put(key, ((Var) value).clone());
            } else {
                results.put(key, value);
            }
        }

        results.setFast(true);
        return results;
    }","  public void test2()  throws Throwable  {
      ValidatorUtils validatorUtils0 = new ValidatorUtils();
      FastHashMap fastHashMap0 = new FastHashMap(2);
      Msg msg0 = new Msg();
      Object object0 = new Object();
      Msg msg1 = new Msg();
      fastHashMap0.put((Object) null, msg1);
      msg0.toString();
      fastHashMap0.put(object0, (Object) null);
      fastHashMap0.put(msg0, msg0);
      // Undeclared exception!
      try { 
        ValidatorUtils.copyFastHashMap(fastHashMap0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException(""org.apache.commons.validator.util.ValidatorUtils"", e);
      }
  }"
980,"    public static String getValueAsString(Object bean, String property) {
        Object value = null;

        try {
            value = PropertyUtils.getProperty(bean, property);

        } catch(IllegalAccessException e) {
            LOG.error(e.getMessage(), e);
        } catch(InvocationTargetException e) {
            LOG.error(e.getMessage(), e);
        } catch(NoSuchMethodException e) {
            LOG.error(e.getMessage(), e);
        }

        if (value == null) {
            return null;
        }

        if (value instanceof String[]) {
            return ((String[]) value).length > 0 ? value.toString() : """";

        } else if (value instanceof Collection) {
            return ((Collection<?>) value).isEmpty() ? """" : value.toString();

        } else {
            return value.toString();
        }

    }","  public void test3()  throws Throwable  {
      String string0 = ""~9N4C+V[9=5T&PtVF"";
      String string1 = ""ih@^Gpv$zmU"";
      ValidatorUtils.replace(""~9N4C+V[9=5T&PtVF"", ""ih@^Gpv$zmU"", ""ih@^Gpv$zmU"");
      ValidatorUtils.getValueAsString(""ih@^Gpv$zmU"", ""\n"");
      ValidatorUtils validatorUtils0 = new ValidatorUtils();
      FastHashMap fastHashMap0 = new FastHashMap();
      Arg arg0 = new Arg();
      arg0.toString();
      fastHashMap0.put(""\n"", arg0);
      FastHashMap fastHashMap1 = ValidatorUtils.copyFastHashMap(fastHashMap0);
      Map<String, Object> map0 = ValidatorUtils.copyMap(fastHashMap1);
      ValidatorUtils.copyMap(map0);
      ValidatorUtils.copyMap(fastHashMap0);
      String string2 = ""W?pUTwW|q"";
      // Undeclared exception!
      try { 
        ValidatorUtils.getValueAsString((Object) null, ""W?pUTwW|q"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
981,"    public static String getValueAsString(Object bean, String property) {
        Object value = null;

        try {
            value = PropertyUtils.getProperty(bean, property);

        } catch(IllegalAccessException e) {
            LOG.error(e.getMessage(), e);
        } catch(InvocationTargetException e) {
            LOG.error(e.getMessage(), e);
        } catch(NoSuchMethodException e) {
            LOG.error(e.getMessage(), e);
        }

        if (value == null) {
            return null;
        }

        if (value instanceof String[]) {
            return ((String[]) value).length > 0 ? value.toString() : """";

        } else if (value instanceof Collection) {
            return ((Collection<?>) value).isEmpty() ? """" : value.toString();

        } else {
            return value.toString();
        }

    }","  public void test4()  throws Throwable  {
      ValidatorUtils.replace("""", """", """");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.values();
      hashMap0.put("""", """");
      Arg arg0 = new Arg();
      hashMap0.put(""\u0004oO"", arg0);
      ValidatorUtils.copyMap(hashMap0);
      ValidatorUtils.getValueAsString(""\u0004oO"", """");
      Arg arg1 = new Arg();
      arg1.setName(""\u0004oO"");
      ValidatorUtils.getValueAsString(arg1, """");
      ValidatorUtils validatorUtils0 = new ValidatorUtils();
      ValidatorUtils.replace((String) null, ""E+>i3u:r2/c@S]}\"""", """");
      ValidatorUtils.getValueAsString(validatorUtils0, """");
  }"
982,"    public static Map<String, Object> copyMap(Map<String, Object> map) {
        Map<String, Object> results = new HashMap<String, Object>();

        Iterator<Entry<String, Object>> i = map.entrySet().iterator();
        while (i.hasNext()) {
            Entry<String, Object> entry = i.next();
            String key = entry.getKey();
            Object value = entry.getValue();

            if (value instanceof Msg) {
                results.put(key, ((Msg) value).clone());
            } else if (value instanceof Arg) {
                results.put(key, ((Arg) value).clone());
            } else if (value instanceof Var) {
                results.put(key, ((Var) value).clone());
            } else {
                results.put(key, value);
            }
        }
        return results;
    }","  public void test5()  throws Throwable  {
      ValidatorUtils.replace("""", """", ""|L4vH1"");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Var var0 = new Var("""", ""[<"", ""'"");
      hashMap0.put(""Warning - null logger in constructor; possible log4j misconfiguration."", var0);
      hashMap0.put(""'"", ""'"");
      ValidatorUtils.copyMap(hashMap0);
  }"
983,"    public static FastHashMap copyFastHashMap(FastHashMap map) {
        FastHashMap results = new FastHashMap();

        @SuppressWarnings(""unchecked"") // FastHashMap is not generic
        Iterator<Entry<String, ?>> i = map.entrySet().iterator();
        while (i.hasNext()) {
            Entry<String, ?> entry = i.next();
            String key = entry.getKey();
            Object value = entry.getValue();

            if (value instanceof Msg) {
                results.put(key, ((Msg) value).clone());
            } else if (value instanceof Arg) {
                results.put(key, ((Arg) value).clone());
            } else if (value instanceof Var) {
                results.put(key, ((Var) value).clone());
            } else {
                results.put(key, value);
            }
        }

        results.setFast(true);
        return results;
    }","  public void test6()  throws Throwable  {
      ValidatorUtils validatorUtils0 = new ValidatorUtils();
      // Undeclared exception!
      try { 
        ValidatorUtils.copyFastHashMap((FastHashMap) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.util.ValidatorUtils"", e);
      }
  }"
984,"    public static String getValueAsString(Object bean, String property) {
        Object value = null;

        try {
            value = PropertyUtils.getProperty(bean, property);

        } catch(IllegalAccessException e) {
            LOG.error(e.getMessage(), e);
        } catch(InvocationTargetException e) {
            LOG.error(e.getMessage(), e);
        } catch(NoSuchMethodException e) {
            LOG.error(e.getMessage(), e);
        }

        if (value == null) {
            return null;
        }

        if (value instanceof String[]) {
            return ((String[]) value).length > 0 ? value.toString() : """";

        } else if (value instanceof Collection) {
            return ((Collection<?>) value).isEmpty() ? """" : value.toString();

        } else {
            return value.toString();
        }

    }","  public void test7()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      Object object1 = new Object();
      hashMap0.put("",/9DZmICs'#K`eSc"", object1);
      hashMap0.put("",/9DZmICs'#K`eSc"", object0);
      ValidatorUtils.copyMap(hashMap0);
      Object object2 = new Object();
      String string0 = ValidatorUtils.getValueAsString(object2, "",/9DZmICs'#K`eSc"");
}"
985,"    public static Map<String, Object> copyMap(Map<String, Object> map) {
        Map<String, Object> results = new HashMap<String, Object>();

        Iterator<Entry<String, Object>> i = map.entrySet().iterator();
        while (i.hasNext()) {
            Entry<String, Object> entry = i.next();
            String key = entry.getKey();
            Object value = entry.getValue();

            if (value instanceof Msg) {
                results.put(key, ((Msg) value).clone());
            } else if (value instanceof Arg) {
                results.put(key, ((Arg) value).clone());
            } else if (value instanceof Var) {
                results.put(key, ((Var) value).clone());
            } else {
                results.put(key, value);
            }
        }
        return results;
    }","  public void test8()  throws Throwable  {
      ValidatorUtils.replace(""Nested property names are not allowed: Property '"", ""Nested property names are not allowed: Property '"", ""Nested property names are not allowed: Property '"");
      String string0 = """";
      ValidatorUtils.getValueAsString(""Nested property names are not allowed: Property '"", """");
      // Undeclared exception!
      try { 
        ValidatorUtils.copyMap((Map<String, Object>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.util.ValidatorUtils"", e);
      }
  }"
986,"    public static FastHashMap copyFastHashMap(FastHashMap map) {
        FastHashMap results = new FastHashMap();

        @SuppressWarnings(""unchecked"") // FastHashMap is not generic
        Iterator<Entry<String, ?>> i = map.entrySet().iterator();
        while (i.hasNext()) {
            Entry<String, ?> entry = i.next();
            String key = entry.getKey();
            Object value = entry.getValue();

            if (value instanceof Msg) {
                results.put(key, ((Msg) value).clone());
            } else if (value instanceof Arg) {
                results.put(key, ((Arg) value).clone());
            } else if (value instanceof Var) {
                results.put(key, ((Var) value).clone());
            } else {
                results.put(key, value);
            }
        }

        results.setFast(true);
        return results;
    }","  public void test9()  throws Throwable  {
      FastHashMap fastHashMap0 = new FastHashMap();
      FastHashMap fastHashMap1 = new FastHashMap(fastHashMap0);
      BiConsumer<Var, Arg> biConsumer0 = (BiConsumer<Var, Arg>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      fastHashMap0.forEach(biConsumer0);
      fastHashMap0.put(fastHashMap1, fastHashMap1);
      fastHashMap1.setFast(true);
      fastHashMap1.put(fastHashMap0, fastHashMap0);
      // Undeclared exception!
      try { 
        ValidatorUtils.copyFastHashMap(fastHashMap1);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections.FastHashMap cannot be cast to java.lang.String
         //
         verifyException(""org.apache.commons.validator.util.ValidatorUtils"", e);
      }
  }"
987,"    public static Map<String, Object> copyMap(Map<String, Object> map) {
        Map<String, Object> results = new HashMap<String, Object>();

        Iterator<Entry<String, Object>> i = map.entrySet().iterator();
        while (i.hasNext()) {
            Entry<String, Object> entry = i.next();
            String key = entry.getKey();
            Object value = entry.getValue();

            if (value instanceof Msg) {
                results.put(key, ((Msg) value).clone());
            } else if (value instanceof Arg) {
                results.put(key, ((Arg) value).clone());
            } else if (value instanceof Var) {
                results.put(key, ((Var) value).clone());
            } else {
                results.put(key, value);
            }
        }
        return results;
    }","  public void test10()  throws Throwable  {
      ValidatorUtils validatorUtils0 = new ValidatorUtils();
      String string0 = """";
      ValidatorUtils.replace("""", """", """");
      String string1 = ""tY"";
      String string2 = null;
      ValidatorUtils.replace(""tY"", ""tY"", (String) null);
      ValidatorUtils.replace("""", """", """");
      FastHashMap fastHashMap0 = new FastHashMap(1531, 1531);
      Msg msg0 = new Msg();
      Var var0 = new Var();
      var0.setResource(true);
      fastHashMap0.put(msg0, var0);
      // Undeclared exception!
      try { 
        ValidatorUtils.copyMap(fastHashMap0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.validator.Msg cannot be cast to java.lang.String
         //
         verifyException(""org.apache.commons.validator.util.ValidatorUtils"", e);
      }
  }"
988,"    public static String replace(String value, String key, String replaceValue) {

        if (value == null || key == null || replaceValue == null) {
            return value;
        }

        int pos = value.indexOf(key);

        if (pos < 0) {
            return value;
        }

        int length = value.length();
        int start = pos;
        int end = pos + key.length();

        if (length == key.length()) {
            value = replaceValue;

        } else if (end == length) {
            value = value.substring(0, start) + replaceValue;

        } else {
            value =
                    value.substring(0, start)
                    + replaceValue
                    + replace(value.substring(end), key, replaceValue);
        }

        return value;
    }","  public void test11()  throws Throwable  {
      String string0 = ValidatorUtils.replace("""", ""org.apache.commons.validator.util.ValidatorUtils"", ""org.apache.commons.validator.util.ValidatorUtils"");
}"
989,"    public static String replace(String value, String key, String replaceValue) {

        if (value == null || key == null || replaceValue == null) {
            return value;
        }

        int pos = value.indexOf(key);

        if (pos < 0) {
            return value;
        }

        int length = value.length();
        int start = pos;
        int end = pos + key.length();

        if (length == key.length()) {
            value = replaceValue;

        } else if (end == length) {
            value = value.substring(0, start) + replaceValue;

        } else {
            value =
                    value.substring(0, start)
                    + replaceValue
                    + replace(value.substring(end), key, replaceValue);
        }

        return value;
    }","  public void test12()  throws Throwable  {
      String string0 = ValidatorUtils.replace("""", """", ""ic,lf$>"");
}"
990,"    public static Map<String, Object> copyMap(Map<String, Object> map) {
        Map<String, Object> results = new HashMap<String, Object>();

        Iterator<Entry<String, Object>> i = map.entrySet().iterator();
        while (i.hasNext()) {
            Entry<String, Object> entry = i.next();
            String key = entry.getKey();
            Object value = entry.getValue();

            if (value instanceof Msg) {
                results.put(key, ((Msg) value).clone());
            } else if (value instanceof Arg) {
                results.put(key, ((Arg) value).clone());
            } else if (value instanceof Var) {
                results.put(key, ((Var) value).clone());
            } else {
                results.put(key, value);
            }
        }
        return results;
    }","  public void test13()  throws Throwable  {
      ValidatorUtils validatorUtils0 = new ValidatorUtils();
      FastHashMap fastHashMap0 = new FastHashMap();
      Map<String, Object> map0 = ValidatorUtils.copyMap(fastHashMap0);
}"
991,"    public static FastHashMap copyFastHashMap(FastHashMap map) {
        FastHashMap results = new FastHashMap();

        @SuppressWarnings(""unchecked"") // FastHashMap is not generic
        Iterator<Entry<String, ?>> i = map.entrySet().iterator();
        while (i.hasNext()) {
            Entry<String, ?> entry = i.next();
            String key = entry.getKey();
            Object value = entry.getValue();

            if (value instanceof Msg) {
                results.put(key, ((Msg) value).clone());
            } else if (value instanceof Arg) {
                results.put(key, ((Arg) value).clone());
            } else if (value instanceof Var) {
                results.put(key, ((Var) value).clone());
            } else {
                results.put(key, value);
            }
        }

        results.setFast(true);
        return results;
    }","  public void test14()  throws Throwable  {
      FastHashMap fastHashMap0 = new FastHashMap(849);
      FastHashMap fastHashMap1 = ValidatorUtils.copyFastHashMap(fastHashMap0);
}"
992,"    public static String getValueAsString(Object bean, String property) {
        Object value = null;

        try {
            value = PropertyUtils.getProperty(bean, property);

        } catch(IllegalAccessException e) {
            LOG.error(e.getMessage(), e);
        } catch(InvocationTargetException e) {
            LOG.error(e.getMessage(), e);
        } catch(NoSuchMethodException e) {
            LOG.error(e.getMessage(), e);
        }

        if (value == null) {
            return null;
        }

        if (value instanceof String[]) {
            return ((String[]) value).length > 0 ? value.toString() : """";

        } else if (value instanceof Collection) {
            return ((Collection<?>) value).isEmpty() ? """" : value.toString();

        } else {
            return value.toString();
        }

    }","  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ValidatorUtils.getValueAsString((Object) null, "":{7xcWCT!_"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
993,"    public static Map<String, Object> copyMap(Map<String, Object> map) {
        Map<String, Object> results = new HashMap<String, Object>();

        Iterator<Entry<String, Object>> i = map.entrySet().iterator();
        while (i.hasNext()) {
            Entry<String, Object> entry = i.next();
            String key = entry.getKey();
            Object value = entry.getValue();

            if (value instanceof Msg) {
                results.put(key, ((Msg) value).clone());
            } else if (value instanceof Arg) {
                results.put(key, ((Arg) value).clone());
            } else if (value instanceof Var) {
                results.put(key, ((Var) value).clone());
            } else {
                results.put(key, value);
            }
        }
        return results;
    }","  public void test16()  throws Throwable  {
      FastHashMap fastHashMap0 = new FastHashMap();
      Map<String, Object> map0 = ValidatorUtils.copyMap(fastHashMap0);
}"
994,"    public static String getValueAsString(Object bean, String property) {
        Object value = null;

        try {
            value = PropertyUtils.getProperty(bean, property);

        } catch(IllegalAccessException e) {
            LOG.error(e.getMessage(), e);
        } catch(InvocationTargetException e) {
            LOG.error(e.getMessage(), e);
        } catch(NoSuchMethodException e) {
            LOG.error(e.getMessage(), e);
        }

        if (value == null) {
            return null;
        }

        if (value instanceof String[]) {
            return ((String[]) value).length > 0 ? value.toString() : """";

        } else if (value instanceof Collection) {
            return ((Collection<?>) value).isEmpty() ? """" : value.toString();

        } else {
            return value.toString();
        }

    }","  public void test17()  throws Throwable  {
      ValidatorUtils.replace((String) null, (String) null, """");
      ValidatorUtils validatorUtils0 = new ValidatorUtils();
      Arg arg0 = new Arg();
      // Undeclared exception!
      try { 
        ValidatorUtils.getValueAsString(arg0, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class org.apache.commons.validator.Arg'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
995,"    public static Map<String, Object> copyMap(Map<String, Object> map) {
        Map<String, Object> results = new HashMap<String, Object>();

        Iterator<Entry<String, Object>> i = map.entrySet().iterator();
        while (i.hasNext()) {
            Entry<String, Object> entry = i.next();
            String key = entry.getKey();
            Object value = entry.getValue();

            if (value instanceof Msg) {
                results.put(key, ((Msg) value).clone());
            } else if (value instanceof Arg) {
                results.put(key, ((Arg) value).clone());
            } else if (value instanceof Var) {
                results.put(key, ((Var) value).clone());
            } else {
                results.put(key, value);
            }
        }
        return results;
    }","  public void test18()  throws Throwable  {
      FastHashMap fastHashMap0 = new FastHashMap();
      FastHashMap fastHashMap1 = ValidatorUtils.copyFastHashMap(fastHashMap0);
      FastHashMap fastHashMap2 = ValidatorUtils.copyFastHashMap(fastHashMap1);
      Var var0 = new Var(""        USING CONVERTER "", ""        USING CONVERTER "", ""        USING CONVERTER "");
      var0.setJsType(""yO"");
      var0.setBundle(""        USING CONVERTER "");
      fastHashMap2.put(""        USING CONVERTER "", var0);
      fastHashMap2.putIfAbsent(fastHashMap1, fastHashMap0);
      Map<String, Object> map0 = ValidatorUtils.copyMap(fastHashMap2);
      Map<String, Object> map1 = ValidatorUtils.copyMap(fastHashMap2);
}"
996,"    public static Map<String, Object> copyMap(Map<String, Object> map) {
        Map<String, Object> results = new HashMap<String, Object>();

        Iterator<Entry<String, Object>> i = map.entrySet().iterator();
        while (i.hasNext()) {
            Entry<String, Object> entry = i.next();
            String key = entry.getKey();
            Object value = entry.getValue();

            if (value instanceof Msg) {
                results.put(key, ((Msg) value).clone());
            } else if (value instanceof Arg) {
                results.put(key, ((Arg) value).clone());
            } else if (value instanceof Var) {
                results.put(key, ((Var) value).clone());
            } else {
                results.put(key, value);
            }
        }
        return results;
    }","  public void test19()  throws Throwable  {
      FastHashMap fastHashMap0 = new FastHashMap();
      FastHashMap fastHashMap1 = ValidatorUtils.copyFastHashMap(fastHashMap0);
      FastHashMap fastHashMap2 = ValidatorUtils.copyFastHashMap(fastHashMap1);
      Var var0 = new Var(""        USING CONVERTER "", ""        USING CONVERTER "", ""        USING CONVERTER "");
      var0.setJsType(""yO"");
      var0.setBundle(""        USING CONVERTER "");
      fastHashMap2.put(""        USING CONVERTER "", var0);
      fastHashMap2.putIfAbsent(fastHashMap1, fastHashMap0);
      Map<String, Object> map0 = ValidatorUtils.copyMap(fastHashMap2);
      Map<String, Object> map1 = ValidatorUtils.copyMap(fastHashMap2);
}"
997,"    public static String replace(String value, String key, String replaceValue) {

        if (value == null || key == null || replaceValue == null) {
            return value;
        }

        int pos = value.indexOf(key);

        if (pos < 0) {
            return value;
        }

        int length = value.length();
        int start = pos;
        int end = pos + key.length();

        if (length == key.length()) {
            value = replaceValue;

        } else if (end == length) {
            value = value.substring(0, start) + replaceValue;

        } else {
            value =
                    value.substring(0, start)
                    + replaceValue
                    + replace(value.substring(end), key, replaceValue);
        }

        return value;
    }","  public void test20()  throws Throwable  {
      FastHashMap fastHashMap0 = new FastHashMap();
      FastHashMap fastHashMap1 = ValidatorUtils.copyFastHashMap(fastHashMap0);
      FastHashMap fastHashMap2 = ValidatorUtils.copyFastHashMap(fastHashMap1);
      Var var0 = new Var(""        USING CONVERTER "", ""        USING CONVERTER "", ""        USING CONVERTER "");
      var0.setJsType(""yO"");
      var0.setBundle(""        USING CONVERTER "");
      fastHashMap2.put(""        USING CONVERTER "", var0);
      fastHashMap2.putIfAbsent(fastHashMap1, fastHashMap0);
      Map<String, Object> map0 = ValidatorUtils.copyMap(fastHashMap2);
      Map<String, Object> map1 = ValidatorUtils.copyMap(fastHashMap2);
      ValidatorUtils.replace("""", """", """");
      String string0 = ValidatorUtils.replace(""        USING CONVERTER "", ""yO"", """");
}"
998,"    public static FastHashMap copyFastHashMap(FastHashMap map) {
        FastHashMap results = new FastHashMap();

        @SuppressWarnings(""unchecked"") // FastHashMap is not generic
        Iterator<Entry<String, ?>> i = map.entrySet().iterator();
        while (i.hasNext()) {
            Entry<String, ?> entry = i.next();
            String key = entry.getKey();
            Object value = entry.getValue();

            if (value instanceof Msg) {
                results.put(key, ((Msg) value).clone());
            } else if (value instanceof Arg) {
                results.put(key, ((Arg) value).clone());
            } else if (value instanceof Var) {
                results.put(key, ((Var) value).clone());
            } else {
                results.put(key, value);
            }
        }

        results.setFast(true);
        return results;
    }","  public void test21()  throws Throwable  {
      FastHashMap fastHashMap0 = new FastHashMap();
      FastHashMap fastHashMap1 = ValidatorUtils.copyFastHashMap(fastHashMap0);
      FastHashMap fastHashMap2 = ValidatorUtils.copyFastHashMap(fastHashMap1);
      Var var0 = new Var(""        USING CONVERTER "", ""        USING CONVERTER "", ""        USING CONVERTER "");
      var0.setJsType(""yO"");
      var0.setBundle(""        USING CONVERTER "");
      fastHashMap2.put(""        USING CONVERTER "", var0);
      fastHashMap2.putIfAbsent(fastHashMap1, fastHashMap0);
      Map<String, Object> map0 = ValidatorUtils.copyMap(fastHashMap2);
      Map<String, Object> map1 = ValidatorUtils.copyMap(fastHashMap2);
      ValidatorUtils.replace("""", """", """");
      String string0 = ValidatorUtils.replace(""        USING CONVERTER "", ""yO"", """");
      FastHashMap fastHashMap3 = ValidatorUtils.copyFastHashMap(fastHashMap2);
      ValidatorUtils validatorUtils0 = new ValidatorUtils();
      ValidatorUtils.copyFastHashMap(fastHashMap0);
      ValidatorUtils.copyFastHashMap(fastHashMap1);
      ValidatorUtils.copyMap(fastHashMap0);
      ValidatorUtils.getValueAsString(var0, ""        USING CONVERTER "");
      FastHashMap fastHashMap4 = ValidatorUtils.copyFastHashMap(fastHashMap2);
}"
999,"    public static FastHashMap copyFastHashMap(FastHashMap map) {
        FastHashMap results = new FastHashMap();

        @SuppressWarnings(""unchecked"") // FastHashMap is not generic
        Iterator<Entry<String, ?>> i = map.entrySet().iterator();
        while (i.hasNext()) {
            Entry<String, ?> entry = i.next();
            String key = entry.getKey();
            Object value = entry.getValue();

            if (value instanceof Msg) {
                results.put(key, ((Msg) value).clone());
            } else if (value instanceof Arg) {
                results.put(key, ((Arg) value).clone());
            } else if (value instanceof Var) {
                results.put(key, ((Var) value).clone());
            } else {
                results.put(key, value);
            }
        }

        results.setFast(true);
        return results;
    }","  public void test22()  throws Throwable  {
      FastHashMap fastHashMap0 = new FastHashMap();
      FastHashMap fastHashMap1 = ValidatorUtils.copyFastHashMap(fastHashMap0);
      FastHashMap fastHashMap2 = ValidatorUtils.copyFastHashMap(fastHashMap1);
      Var var0 = new Var(""        USING CONVERTER "", ""        USING CONVERTER "", ""        USING CONVERTER "");
      var0.setJsType(""yO"");
      var0.setBundle(""        USING CONVERTER "");
      fastHashMap2.put(""        USING CONVERTER "", var0);
      fastHashMap2.putIfAbsent(fastHashMap1, fastHashMap0);
      Map<String, Object> map0 = ValidatorUtils.copyMap(fastHashMap2);
      Map<String, Object> map1 = ValidatorUtils.copyMap(fastHashMap2);
      ValidatorUtils.replace("""", """", """");
      String string0 = ValidatorUtils.replace(""        USING CONVERTER "", ""yO"", """");
      FastHashMap fastHashMap3 = ValidatorUtils.copyFastHashMap(fastHashMap2);
      ValidatorUtils validatorUtils0 = new ValidatorUtils();
      ValidatorUtils.copyFastHashMap(fastHashMap0);
      ValidatorUtils.copyFastHashMap(fastHashMap1);
      ValidatorUtils.copyMap(fastHashMap0);
      ValidatorUtils.getValueAsString(var0, ""        USING CONVERTER "");
      FastHashMap fastHashMap4 = ValidatorUtils.copyFastHashMap(fastHashMap2);
}"
1000,"    public static String getValueAsString(Object bean, String property) {
        Object value = null;

        try {
            value = PropertyUtils.getProperty(bean, property);

        } catch(IllegalAccessException e) {
            LOG.error(e.getMessage(), e);
        } catch(InvocationTargetException e) {
            LOG.error(e.getMessage(), e);
        } catch(NoSuchMethodException e) {
            LOG.error(e.getMessage(), e);
        }

        if (value == null) {
            return null;
        }

        if (value instanceof String[]) {
            return ((String[]) value).length > 0 ? value.toString() : """";

        } else if (value instanceof Collection) {
            return ((Collection<?>) value).isEmpty() ? """" : value.toString();

        } else {
            return value.toString();
        }

    }","  public void test23()  throws Throwable  {
      String string0 = ""~9N4C+V[9=5T&PtVF"";
      String string1 = ""ih@^Gpv$zmU"";
      ValidatorUtils.replace(""~9N4C+V[9=5T&PtVF"", ""ih@^Gpv$zmU"", ""ih@^Gpv$zmU"");
      ValidatorUtils validatorUtils0 = new ValidatorUtils();
      FastHashMap fastHashMap0 = new FastHashMap();
      Arg arg0 = new Arg();
      arg0.toString();
      fastHashMap0.put(""\n"", arg0);
      FastHashMap fastHashMap1 = ValidatorUtils.copyFastHashMap(fastHashMap0);
      Map<String, Object> map0 = ValidatorUtils.copyMap(fastHashMap1);
      ValidatorUtils.copyMap(map0);
      ValidatorUtils.copyMap(fastHashMap0);
      String string2 = ""W?pUTwW|q"";
      // Undeclared exception!
      try { 
        ValidatorUtils.getValueAsString((Object) null, ""W?pUTwW|q"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1001,"    public static String replace(String value, String key, String replaceValue) {

        if (value == null || key == null || replaceValue == null) {
            return value;
        }

        int pos = value.indexOf(key);

        if (pos < 0) {
            return value;
        }

        int length = value.length();
        int start = pos;
        int end = pos + key.length();

        if (length == key.length()) {
            value = replaceValue;

        } else if (end == length) {
            value = value.substring(0, start) + replaceValue;

        } else {
            value =
                    value.substring(0, start)
                    + replaceValue
                    + replace(value.substring(end), key, replaceValue);
        }

        return value;
    }","  public void test24()  throws Throwable  {
      String string0 = ValidatorUtils.replace(""5HP"", ""5HP"", ""5HP"");
      String string1 = ValidatorUtils.replace("""", """", (String) null);
}"
1002,"    public static String getValueAsString(Object bean, String property) {
        Object value = null;

        try {
            value = PropertyUtils.getProperty(bean, property);

        } catch(IllegalAccessException e) {
            LOG.error(e.getMessage(), e);
        } catch(InvocationTargetException e) {
            LOG.error(e.getMessage(), e);
        } catch(NoSuchMethodException e) {
            LOG.error(e.getMessage(), e);
        }

        if (value == null) {
            return null;
        }

        if (value instanceof String[]) {
            return ((String[]) value).length > 0 ? value.toString() : """";

        } else if (value instanceof Collection) {
            return ((Collection<?>) value).isEmpty() ? """" : value.toString();

        } else {
            return value.toString();
        }

    }","  public void test25()  throws Throwable  {
      Object object0 = new Object();
      String string0 = ValidatorUtils.getValueAsString(object0, ""RWh`O\"""");
}"
1003,"    public static Map<String, Object> copyMap(Map<String, Object> map) {
        Map<String, Object> results = new HashMap<String, Object>();

        Iterator<Entry<String, Object>> i = map.entrySet().iterator();
        while (i.hasNext()) {
            Entry<String, Object> entry = i.next();
            String key = entry.getKey();
            Object value = entry.getValue();

            if (value instanceof Msg) {
                results.put(key, ((Msg) value).clone());
            } else if (value instanceof Arg) {
                results.put(key, ((Arg) value).clone());
            } else if (value instanceof Var) {
                results.put(key, ((Var) value).clone());
            } else {
                results.put(key, value);
            }
        }
        return results;
    }","  public void test26()  throws Throwable  {
      ValidatorUtils.replace(""#o"", (String) null, ""Index: "");
      FastHashMap fastHashMap0 = new FastHashMap();
      fastHashMap0.put(""Index: "", (Object) null);
      FastHashMap fastHashMap1 = new FastHashMap(fastHashMap0);
      fastHashMap1.clone();
      ValidatorUtils.copyFastHashMap(fastHashMap1);
      Object object0 = new Object();
      Arg arg0 = new Arg();
      arg0.setResource(true);
      fastHashMap1.put(""#o"", arg0);
      fastHashMap0.put(object0, (Object) null);
      ValidatorUtils.getValueAsString(fastHashMap1, ""#o"");
      // Undeclared exception!
      try { 
        ValidatorUtils.copyMap(fastHashMap0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException(""org.apache.commons.validator.util.ValidatorUtils"", e);
      }
  }"
1004,"    public boolean equals(Object obj) {
        if (!(obj instanceof Flags)) {
            return false;
        }

        if (obj == this) {
            return true;
        }

        Flags f = (Flags) obj;

        return this.flags == f.flags;
    }","  public void test0()  throws Throwable  {
      Flags flags0 = new Flags();
      Flags flags1 = new Flags((-646L));
      boolean boolean0 = flags0.equals(flags1);
}"
1005,"    public long getFlags() {
        return this.flags;
    }","  public void test1()  throws Throwable  {
      Flags flags0 = new Flags();
      Flags flags1 = new Flags((-646L));
      boolean boolean0 = flags0.equals(flags1);
}"
1006,"    public long getFlags() {
        return this.flags;
    }","  public void test2()  throws Throwable  {
      Flags flags0 = new Flags();
      Flags flags1 = new Flags((-646L));
      boolean boolean0 = flags0.equals(flags1);
}"
1007,"    public boolean equals(Object obj) {
        if (!(obj instanceof Flags)) {
            return false;
        }

        if (obj == this) {
            return true;
        }

        Flags f = (Flags) obj;

        return this.flags == f.flags;
    }","  public void test3()  throws Throwable  {
      Flags flags0 = new Flags();
      Flags flags1 = new Flags((-646L));
      boolean boolean0 = flags0.equals(flags1);
}"
1008,"    public long getFlags() {
        return this.flags;
    }","  public void test4()  throws Throwable  {
      Flags flags0 = new Flags();
}"
1009,"    public long getFlags() {
        return this.flags;
    }","  public void test5()  throws Throwable  {
      Flags flags0 = new Flags();
      flags0.turnOnAll();
      flags0.turnOn((-2321L));
}"
1010,"    public long getFlags() {
        return this.flags;
    }","  public void test6()  throws Throwable  {
      Flags flags0 = new Flags();
}"
1011,"    public long getFlags() {
        return this.flags;
    }","  public void test7()  throws Throwable  {
      Flags flags0 = new Flags();
      flags0.turnOnAll();
      boolean boolean0 = flags0.isOff(16L);
}"
1012,"    public boolean isOff(long flag) {
        return (this.flags & flag) == 0;
    }","  public void test8()  throws Throwable  {
      Flags flags0 = new Flags();
      flags0.turnOnAll();
      boolean boolean0 = flags0.isOff(16L);
}"
1013,"    public long getFlags() {
        return this.flags;
    }","  public void test9()  throws Throwable  {
      Flags flags0 = new Flags();
      boolean boolean0 = flags0.isOn((-510L));
}"
1014,"    public boolean isOn(long flag) {
        return (this.flags & flag) == flag;
    }","  public void test10()  throws Throwable  {
      Flags flags0 = new Flags();
      boolean boolean0 = flags0.isOn((-510L));
}"
1015,"    public long getFlags() {
        return this.flags;
    }","  public void test11()  throws Throwable  {
      Flags flags0 = new Flags(1L);
      long long0 = flags0.getFlags();
}"
1016,"    public long getFlags() {
        return this.flags;
    }","  public void test12()  throws Throwable  {
      Flags flags0 = new Flags();
      flags0.turnOn((-88L));
      long long0 = flags0.getFlags();
}"
1017,"    public String toString() {
        StringBuilder bin = new StringBuilder(Long.toBinaryString(this.flags));
        for (int i = 64 - bin.length(); i > 0; i--) { // CHECKSTYLE IGNORE MagicNumber
            bin.insert(0, ""0"");
        }
        return bin.toString();
    }","  public void test13()  throws Throwable  {
      Flags flags0 = new Flags();
      String string0 = flags0.toString();
}"
1018,"    public long getFlags() {
        return this.flags;
    }","  public void test14()  throws Throwable  {
      Flags flags0 = new Flags();
      Flags flags1 = (Flags)flags0.clone();
      boolean boolean0 = flags0.equals(flags1);
}"
1019,"    public boolean equals(Object obj) {
        if (!(obj instanceof Flags)) {
            return false;
        }

        if (obj == this) {
            return true;
        }

        Flags f = (Flags) obj;

        return this.flags == f.flags;
    }","  public void test15()  throws Throwable  {
      Flags flags0 = new Flags();
      Flags flags1 = (Flags)flags0.clone();
      boolean boolean0 = flags0.equals(flags1);
}"
1020,"    public long getFlags() {
        return this.flags;
    }","  public void test16()  throws Throwable  {
      Flags flags0 = new Flags();
      Object object0 = new Object();
      boolean boolean0 = flags0.equals(object0);
}"
1021,"    public boolean equals(Object obj) {
        if (!(obj instanceof Flags)) {
            return false;
        }

        if (obj == this) {
            return true;
        }

        Flags f = (Flags) obj;

        return this.flags == f.flags;
    }","  public void test17()  throws Throwable  {
      Flags flags0 = new Flags();
      Object object0 = new Object();
      boolean boolean0 = flags0.equals(object0);
}"
1022,"    public boolean equals(Object obj) {
        if (!(obj instanceof Flags)) {
            return false;
        }

        if (obj == this) {
            return true;
        }

        Flags f = (Flags) obj;

        return this.flags == f.flags;
    }","  public void test18()  throws Throwable  {
      Flags flags0 = new Flags();
      boolean boolean0 = flags0.equals(flags0);
}"
1023,"    public long getFlags() {
        return this.flags;
    }","  public void test19()  throws Throwable  {
      Flags flags0 = new Flags();
      boolean boolean0 = flags0.equals(flags0);
}"
1024,"    public long getFlags() {
        return this.flags;
    }","  public void test20()  throws Throwable  {
      Flags flags0 = new Flags(77L);
      flags0.clear();
      boolean boolean0 = flags0.isOff(77L);
}"
1025,"    public boolean isOff(long flag) {
        return (this.flags & flag) == 0;
    }","  public void test21()  throws Throwable  {
      Flags flags0 = new Flags(77L);
      flags0.clear();
      boolean boolean0 = flags0.isOff(77L);
}"
1026,"    public long getFlags() {
        return this.flags;
    }","  public void test22()  throws Throwable  {
      Flags flags0 = new Flags();
}"
1027,"    public long getFlags() {
        return this.flags;
    }","  public void test23()  throws Throwable  {
      Flags flags0 = new Flags();
      flags0.turnOnAll();
      boolean boolean0 = flags0.isOff((-3126L));
}"
1028,"    public boolean isOff(long flag) {
        return (this.flags & flag) == 0;
    }","  public void test24()  throws Throwable  {
      Flags flags0 = new Flags();
      flags0.turnOnAll();
      boolean boolean0 = flags0.isOff((-3126L));
}"
1029,"    public long getFlags() {
        return this.flags;
    }","  public void test25()  throws Throwable  {
      Flags flags0 = new Flags();
      flags0.hashCode();
}"
1030,"    public long getFlags() {
        return this.flags;
    }","  public void test26()  throws Throwable  {
      Flags flags0 = new Flags();
      Object object0 = flags0.clone();
      flags0.turnOn((-25L));
      boolean boolean0 = flags0.equals(object0);
}"
1031,"    public boolean equals(Object obj) {
        if (!(obj instanceof Flags)) {
            return false;
        }

        if (obj == this) {
            return true;
        }

        Flags f = (Flags) obj;

        return this.flags == f.flags;
    }","  public void test27()  throws Throwable  {
      Flags flags0 = new Flags();
      Object object0 = flags0.clone();
      flags0.turnOn((-25L));
      boolean boolean0 = flags0.equals(object0);
}"
1032,"    public long getFlags() {
        return this.flags;
    }","  public void test28()  throws Throwable  {
      Flags flags0 = new Flags();
}"
1033,"    public long getFlags() {
        return this.flags;
    }","  public void test29()  throws Throwable  {
      Flags flags0 = new Flags();
      flags0.turnOnAll();
      boolean boolean0 = flags0.isOn((-3126L));
}"
1034,"    public boolean isOn(long flag) {
        return (this.flags & flag) == flag;
    }","  public void test30()  throws Throwable  {
      Flags flags0 = new Flags();
      flags0.turnOnAll();
      boolean boolean0 = flags0.isOn((-3126L));
}"
1035,"    public long getFlags() {
        return this.flags;
    }","  public void test31()  throws Throwable  {
      Flags flags0 = new Flags();
      flags0.turnOffAll();
}"
1036,"    public long getFlags() {
        return this.flags;
    }","  public void test32()  throws Throwable  {
      Flags flags0 = new Flags();
      long long0 = flags0.getFlags();
}"
1037,"    public long getFlags() {
        return this.flags;
    }","  public void test33()  throws Throwable  {
      Flags flags0 = new Flags(77L);
      flags0.clear();
      boolean boolean0 = flags0.isOn(77L);
}"
1038,"    public boolean isOn(long flag) {
        return (this.flags & flag) == flag;
    }","  public void test34()  throws Throwable  {
      Flags flags0 = new Flags(77L);
      flags0.clear();
      boolean boolean0 = flags0.isOn(77L);
}"
1039,"    public long getFlags() {
        return this.flags;
    }","  public void test35()  throws Throwable  {
      Flags flags0 = new Flags();
      flags0.turnOff((-3126L));
}"
1040,"    protected Object processParsedValue(Object value, Format formatter) {

        double doubleValue = ((Number)value).doubleValue();

        if (doubleValue > 0) {
            if (doubleValue < Float.MIN_VALUE) {
                return null;
            }
            if (doubleValue > Float.MAX_VALUE) {
                return null;
            }
        } else  if (doubleValue < 0){
            double posDouble = doubleValue * -1;
            if (posDouble < Float.MIN_VALUE) {
                return null;
            }
            if (posDouble > Float.MAX_VALUE) {
                return null;
            }
        }

        return Float.valueOf((float)doubleValue);

    }","  public void test0()  throws Throwable  {
      FloatValidator floatValidator0 = FloatValidator.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Double double0 = new Double(3.4028234663852886E38);
      Object object0 = floatValidator0.processParsedValue(double0, mockSimpleDateFormat0);
}"
1041,"    protected Object processParsedValue(Object value, Format formatter) {

        double doubleValue = ((Number)value).doubleValue();

        if (doubleValue > 0) {
            if (doubleValue < Float.MIN_VALUE) {
                return null;
            }
            if (doubleValue > Float.MAX_VALUE) {
                return null;
            }
        } else  if (doubleValue < 0){
            double posDouble = doubleValue * -1;
            if (posDouble < Float.MIN_VALUE) {
                return null;
            }
            if (posDouble > Float.MAX_VALUE) {
                return null;
            }
        }

        return Float.valueOf((float)doubleValue);

    }","  public void test1()  throws Throwable  {
      FloatValidator floatValidator0 = FloatValidator.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Double double0 = new Double(3.4028234663852886E38);
      Object object0 = floatValidator0.processParsedValue(double0, mockSimpleDateFormat0);
}"
1042,"    protected Object processParsedValue(Object value, Format formatter) {

        double doubleValue = ((Number)value).doubleValue();

        if (doubleValue > 0) {
            if (doubleValue < Float.MIN_VALUE) {
                return null;
            }
            if (doubleValue > Float.MAX_VALUE) {
                return null;
            }
        } else  if (doubleValue < 0){
            double posDouble = doubleValue * -1;
            if (posDouble < Float.MIN_VALUE) {
                return null;
            }
            if (posDouble > Float.MAX_VALUE) {
                return null;
            }
        }

        return Float.valueOf((float)doubleValue);

    }","  public void test2()  throws Throwable  {
      FloatValidator floatValidator0 = FloatValidator.getInstance();
      DateFormat dateFormat0 = DateFormat.getInstance();
      Double double0 = new Double(1.401298464324817E-45);
      Object object0 = floatValidator0.processParsedValue(double0, dateFormat0);
}"
1043,"    protected Object processParsedValue(Object value, Format formatter) {

        double doubleValue = ((Number)value).doubleValue();

        if (doubleValue > 0) {
            if (doubleValue < Float.MIN_VALUE) {
                return null;
            }
            if (doubleValue > Float.MAX_VALUE) {
                return null;
            }
        } else  if (doubleValue < 0){
            double posDouble = doubleValue * -1;
            if (posDouble < Float.MIN_VALUE) {
                return null;
            }
            if (posDouble > Float.MAX_VALUE) {
                return null;
            }
        }

        return Float.valueOf((float)doubleValue);

    }","  public void test3()  throws Throwable  {
      FloatValidator floatValidator0 = FloatValidator.getInstance();
      DateFormat dateFormat0 = DateFormat.getInstance();
      Double double0 = new Double(1.401298464324817E-45);
      Object object0 = floatValidator0.processParsedValue(double0, dateFormat0);
}"
1044,"    protected Object processParsedValue(Object value, Format formatter) {

        double doubleValue = ((Number)value).doubleValue();

        if (doubleValue > 0) {
            if (doubleValue < Float.MIN_VALUE) {
                return null;
            }
            if (doubleValue > Float.MAX_VALUE) {
                return null;
            }
        } else  if (doubleValue < 0){
            double posDouble = doubleValue * -1;
            if (posDouble < Float.MIN_VALUE) {
                return null;
            }
            if (posDouble > Float.MAX_VALUE) {
                return null;
            }
        }

        return Float.valueOf((float)doubleValue);

    }","  public void test4()  throws Throwable  {
      FloatValidator floatValidator0 = FloatValidator.getInstance();
      Double double0 = new Double(1);
      DateFormat dateFormat0 = DateFormat.getInstance();
      Float float0 = (Float)floatValidator0.processParsedValue(double0, dateFormat0);
}"
1045,"    public boolean minValue(float value, float min) {
        return (value >= min);
    }","  public void test5()  throws Throwable  {
      FloatValidator floatValidator0 = FloatValidator.getInstance();
      Double double0 = new Double(1);
      DateFormat dateFormat0 = DateFormat.getInstance();
      Float float0 = (Float)floatValidator0.processParsedValue(double0, dateFormat0);
      boolean boolean0 = floatValidator0.minValue(float0, (float) 0);
}"
1046,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test6()  throws Throwable  {
      FloatValidator floatValidator0 = FloatValidator.getInstance();
      Locale locale0 = Locale.ENGLISH;
      Float float0 = floatValidator0.validate(""Vo{&aD]|ag"", locale0);
}"
1047,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test7()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      Locale locale0 = new Locale(""0"", ""0"");
      Float float0 = floatValidator0.validate(""0"", locale0);
}"
1048,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test8()  throws Throwable  {
      FloatValidator floatValidator0 = FloatValidator.getInstance();
      Locale locale0 = Locale.PRC;
      Float float0 = floatValidator0.validate(""-1,447"", locale0);
}"
1049,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test9()  throws Throwable  {
      FloatValidator floatValidator0 = FloatValidator.getInstance();
      Locale locale0 = Locale.PRC;
      Float float0 = floatValidator0.validate(""-1,447"", locale0);
}"
1050,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test10()  throws Throwable  {
      FloatValidator floatValidator0 = FloatValidator.getInstance();
      Locale locale0 = Locale.JAPANESE;
      Float float0 = floatValidator0.validate("""", """", locale0);
}"
1051,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test11()  throws Throwable  {
      FloatValidator floatValidator0 = FloatValidator.getInstance();
      Locale locale0 = Locale.FRANCE;
      Float float0 = floatValidator0.validate(""18446744073709551600"", ""18446744073709551600"", locale0);
}"
1052,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test12()  throws Throwable  {
      FloatValidator floatValidator0 = FloatValidator.getInstance();
      Locale locale0 = Locale.FRANCE;
      Float float0 = floatValidator0.validate(""18446744073709551600"", ""18446744073709551600"", locale0);
}"
1053,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test13()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      Locale locale0 = new Locale(""0"", ""0"");
      Float float0 = floatValidator0.validate(""0"", ""0"", locale0);
}"
1054,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test14()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      Locale locale0 = Locale.KOREA;
      Float float0 = floatValidator0.validate(""1"", """", locale0);
}"
1055,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test15()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      Locale locale0 = Locale.KOREA;
      Float float0 = floatValidator0.validate(""1"", """", locale0);
}"
1056,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test16()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(false, (-1));
      Locale locale0 = Locale.KOREA;
      Float float0 = floatValidator0.validate(""18446744073709551615"", (String) null, locale0);
}"
1057,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test17()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(false, (-1));
      Locale locale0 = Locale.KOREA;
      Float float0 = floatValidator0.validate(""18446744073709551615"", (String) null, locale0);
}"
1058,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test18()  throws Throwable  {
      FloatValidator floatValidator0 = FloatValidator.getInstance();
      Float float0 = floatValidator0.validate("""", ""org.apache.commons.validator.routines.AbstractFormatValidator"");
}"
1059,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test19()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(false, (-562));
      Float float0 = floatValidator0.validate(""25_dE8@D6;zRR1,"", """");
}"
1060,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test20()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(false, (-562));
      Float float0 = floatValidator0.validate(""25_dE8@D6;zRR1,"", """");
}"
1061,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test21()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      Float float0 = floatValidator0.validate(""-1,579"", """");
}"
1062,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test22()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      Float float0 = floatValidator0.validate(""-1,579"", """");
}"
1063,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test23()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(false, (-1385));
      Float float0 = floatValidator0.validate(""0p-?_dA"");
}"
1064,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test24()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      Float float0 = floatValidator0.validate(""1"");
}"
1065,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test25()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      Float float0 = floatValidator0.validate(""1"");
}"
1066,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test26()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(false, (-1));
      Float float0 = floatValidator0.validate(""18446744073709551615"");
}"
1067,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test27()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(false, (-1));
      Float float0 = floatValidator0.validate(""18446744073709551615"");
}"
1068,"    public boolean isInRange(float value, float min, float max) {
        return (value >= min && value <= max);
    }","  public void test28()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(false, 0);
      Float float0 = new Float((double) 0);
      boolean boolean0 = floatValidator0.isInRange(float0, (-1.0F), 1.0F);
}"
1069,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test29()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(false, (-774));
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        floatValidator0.validate(""org.apache.commons.validator.routines.FloatValidator"", ""org.apache.commons.validator.routines.FloatValidator"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \""org.apache.commons.validator.routines.FloatValidator\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1070,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test30()  throws Throwable  {
      FloatValidator floatValidator0 = FloatValidator.getInstance();
      // Undeclared exception!
      try { 
        floatValidator0.validate(""org.apache.commons.validator.routines.AbstractFormatValidator"", ""o:W8%u,h=c[zYj_}"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \""o:W8%u,h=c[zYj_}\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1071,"    protected Object processParsedValue(Object value, Format formatter) {

        double doubleValue = ((Number)value).doubleValue();

        if (doubleValue > 0) {
            if (doubleValue < Float.MIN_VALUE) {
                return null;
            }
            if (doubleValue > Float.MAX_VALUE) {
                return null;
            }
        } else  if (doubleValue < 0){
            double posDouble = doubleValue * -1;
            if (posDouble < Float.MIN_VALUE) {
                return null;
            }
            if (posDouble > Float.MAX_VALUE) {
                return null;
            }
        }

        return Float.valueOf((float)doubleValue);

    }","  public void test31()  throws Throwable  {
      FloatValidator floatValidator0 = FloatValidator.getInstance();
      Locale locale0 = Locale.JAPANESE;
      Format format0 = floatValidator0.getFormat(""4cV4*"", locale0);
      // Undeclared exception!
      try { 
        floatValidator0.processParsedValue((Object) null, format0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.FloatValidator"", e);
      }
  }"
1072,"    protected Object processParsedValue(Object value, Format formatter) {

        double doubleValue = ((Number)value).doubleValue();

        if (doubleValue > 0) {
            if (doubleValue < Float.MIN_VALUE) {
                return null;
            }
            if (doubleValue > Float.MAX_VALUE) {
                return null;
            }
        } else  if (doubleValue < 0){
            double posDouble = doubleValue * -1;
            if (posDouble < Float.MIN_VALUE) {
                return null;
            }
            if (posDouble > Float.MAX_VALUE) {
                return null;
            }
        }

        return Float.valueOf((float)doubleValue);

    }","  public void test32()  throws Throwable  {
      FloatValidator floatValidator0 = FloatValidator.getInstance();
      Locale locale0 = Locale.US;
      Format format0 = floatValidator0.getFormat(locale0);
      // Undeclared exception!
      try { 
        floatValidator0.processParsedValue(floatValidator0, format0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.validator.routines.FloatValidator cannot be cast to java.lang.Number
         //
         verifyException(""org.apache.commons.validator.routines.FloatValidator"", e);
      }
  }"
1073,"    public boolean minValue(float value, float min) {
        return (value >= min);
    }","  public void test33()  throws Throwable  {
      FloatValidator floatValidator0 = FloatValidator.getInstance();
      // Undeclared exception!
      try { 
        floatValidator0.minValue((Float) null, 1736.5167F);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.FloatValidator"", e);
      }
  }"
1074,"    public boolean isInRange(float value, float min, float max) {
        return (value >= min && value <= max);
    }","  public void test34()  throws Throwable  {
      FloatValidator floatValidator0 = FloatValidator.getInstance();
      // Undeclared exception!
      try { 
        floatValidator0.isInRange((Float) null, 1164.92F, (float) 2);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.FloatValidator"", e);
      }
  }"
1075,"    public boolean maxValue(float value, float max) {
        return (value <= max);
    }","  public void test35()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      boolean boolean0 = floatValidator0.maxValue(0.0F, 0.0F);
}"
1076,"    public boolean maxValue(float value, float max) {
        return (value <= max);
    }","  public void test36()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      boolean boolean0 = floatValidator0.maxValue(1284.692F, (-2501.0F));
}"
1077,"    public boolean minValue(float value, float min) {
        return (value >= min);
    }","  public void test37()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(true, 1192);
      boolean boolean0 = floatValidator0.minValue((float) 1192, (float) 1192);
}"
1078,"    public boolean minValue(float value, float min) {
        return (value >= min);
    }","  public void test38()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      boolean boolean0 = floatValidator0.minValue((-89.67F), 0.0F);
}"
1079,"    public boolean isInRange(float value, float min, float max) {
        return (value >= min && value <= max);
    }","  public void test39()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      boolean boolean0 = floatValidator0.isInRange((-900.8161F), 0.0F, 0.0F);
}"
1080,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test40()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(false, 562);
      Float float0 = floatValidator0.validate(""-2Pd?@1;`uT?"");
}"
1081,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test41()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(false, 562);
      Float float0 = floatValidator0.validate(""-2Pd?@1;`uT?"");
}"
1082,"    protected Object processParsedValue(Object value, Format formatter) {

        double doubleValue = ((Number)value).doubleValue();

        if (doubleValue > 0) {
            if (doubleValue < Float.MIN_VALUE) {
                return null;
            }
            if (doubleValue > Float.MAX_VALUE) {
                return null;
            }
        } else  if (doubleValue < 0){
            double posDouble = doubleValue * -1;
            if (posDouble < Float.MIN_VALUE) {
                return null;
            }
            if (posDouble > Float.MAX_VALUE) {
                return null;
            }
        }

        return Float.valueOf((float)doubleValue);

    }","  public void test42()  throws Throwable  {
      FloatValidator floatValidator0 = FloatValidator.getInstance();
      Double double0 = new Double(0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Float float0 = (Float)floatValidator0.processParsedValue(double0, mockSimpleDateFormat0);
}"
1083,"    public boolean maxValue(float value, float max) {
        return (value <= max);
    }","  public void test43()  throws Throwable  {
      FloatValidator floatValidator0 = FloatValidator.getInstance();
      Double double0 = new Double(0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Float float0 = (Float)floatValidator0.processParsedValue(double0, mockSimpleDateFormat0);
      boolean boolean0 = floatValidator0.maxValue(float0, (float) 2);
}"
1084,"    public boolean maxValue(float value, float max) {
        return (value <= max);
    }","  public void test44()  throws Throwable  {
      FloatValidator floatValidator0 = FloatValidator.getInstance();
      Float float0 = new Float((double) 2);
      boolean boolean0 = floatValidator0.maxValue(float0, 0.0F);
}"
1085,"    public boolean minValue(float value, float min) {
        return (value >= min);
    }","  public void test45()  throws Throwable  {
      FloatValidator floatValidator0 = FloatValidator.getInstance();
      Float float0 = new Float((double) 0);
      boolean boolean0 = floatValidator0.minValue(float0, (float) 1);
}"
1086,"    public boolean isInRange(float value, float min, float max) {
        return (value >= min && value <= max);
    }","  public void test46()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      boolean boolean0 = floatValidator0.isInRange(0.0F, 0.0F, 0.0F);
}"
1087,"    public boolean isInRange(float value, float min, float max) {
        return (value >= min && value <= max);
    }","  public void test47()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      boolean boolean0 = floatValidator0.isInRange((float) 1331, (float) 2, (float) 2);
}"
1088,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test48()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      Float float0 = floatValidator0.validate(""732.103"", (Locale) null);
}"
1089,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test49()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      Float float0 = floatValidator0.validate(""732.103"", (Locale) null);
}"
1090,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test50()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      Float float0 = floatValidator0.validate("""");
}"
1091,"    public boolean maxValue(float value, float max) {
        return (value <= max);
    }","  public void test51()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      // Undeclared exception!
      try { 
        floatValidator0.maxValue((Float) null, 494.0F);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.FloatValidator"", e);
      }
  }"
1092,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test52()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      Float float0 = floatValidator0.validate(""0aG[N(u{G5+Y"", ""0aG[N(u{G5+Y"");
}"
1093,"    public Float validate(String value) {
        return (Float)parse(value, (String)null, (Locale)null);
    }","  public void test53()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      Float float0 = floatValidator0.validate(""0aG[N(u{G5+Y"", ""0aG[N(u{G5+Y"");
}"
1094,"    public boolean isInRange(float value, float min, float max) {
        return (value >= min && value <= max);
    }","  public void test54()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      Float float0 = floatValidator0.validate(""0aG[N(u{G5+Y"", ""0aG[N(u{G5+Y"");
      boolean boolean0 = floatValidator0.isInRange(float0, (float) 1331, (float) 1331);
}"
1095,"    public boolean maxValue(long value, long max) {
        return (value <= max);
    }","  public void test0()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      boolean boolean0 = longValidator0.maxValue(0L, (long) 2);
}"
1096,"    public boolean minValue(long value, long min) {
        return (value >= min);
    }","  public void test1()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      boolean boolean0 = longValidator0.minValue(0L, 0L);
}"
1097,"    public boolean isInRange(long value, long min, long max) {
        return (value >= min && value <= max);
    }","  public void test2()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      Long long0 = new Long(0);
      boolean boolean0 = longValidator0.isInRange(long0, 0L, 0L);
}"
1098,"    public boolean isInRange(long value, long min, long max) {
        return (value >= min && value <= max);
    }","  public void test3()  throws Throwable  {
      LongValidator longValidator0 = new LongValidator();
      boolean boolean0 = longValidator0.isInRange(0L, (-683L), (-683L));
}"
1099,"    public Long validate(String value) {
        return (Long)parse(value, (String)null, (Locale)null);
    }","  public void test4()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      Locale locale0 = Locale.ITALIAN;
      Long long0 = longValidator0.validate(""A^CCtg_+"", locale0);
}"
1100,"    public Long validate(String value) {
        return (Long)parse(value, (String)null, (Locale)null);
    }","  public void test5()  throws Throwable  {
      LongValidator longValidator0 = new LongValidator();
      Locale locale0 = Locale.PRC;
      Long long0 = longValidator0.validate(""0"", locale0);
}"
1101,"    public Long validate(String value) {
        return (Long)parse(value, (String)null, (Locale)null);
    }","  public void test6()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      Locale locale0 = Locale.PRC;
      Long long0 = longValidator0.validate(""1,735"", locale0);
}"
1102,"    public Long validate(String value) {
        return (Long)parse(value, (String)null, (Locale)null);
    }","  public void test7()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      Locale locale0 = Locale.ENGLISH;
      Long long0 = longValidator0.validate(""-1,767"", """", locale0);
}"
1103,"    public Long validate(String value) {
        return (Long)parse(value, (String)null, (Locale)null);
    }","  public void test8()  throws Throwable  {
      LongValidator longValidator0 = new LongValidator();
      Locale locale0 = Locale.forLanguageTag(""Cu0B|x+"");
      Long long0 = longValidator0.validate(""Cu0B|x+"", ""Cu0B|x+"", locale0);
}"
1104,"    public Long validate(String value) {
        return (Long)parse(value, (String)null, (Locale)null);
    }","  public void test9()  throws Throwable  {
      LongValidator longValidator0 = new LongValidator(true, (-2141186040));
      Locale locale0 = Locale.PRC;
      Long long0 = longValidator0.validate(""8"", """", locale0);
}"
1105,"    public Long validate(String value) {
        return (Long)parse(value, (String)null, (Locale)null);
    }","  public void test10()  throws Throwable  {
      LongValidator longValidator0 = new LongValidator();
      Long long0 = longValidator0.validate(""Cu0B|x+"", ""Cu0B|x+"");
}"
1106,"    public Long validate(String value) {
        return (Long)parse(value, (String)null, (Locale)null);
    }","  public void test11()  throws Throwable  {
      LongValidator longValidator0 = new LongValidator(false, (-1));
      Long long0 = longValidator0.validate(""8 lDQ7>~#43Zbc"", """");
}"
1107,"    public Long validate(String value) {
        return (Long)parse(value, (String)null, (Locale)null);
    }","  public void test12()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      Long long0 = longValidator0.validate("""");
}"
1108,"    public Long validate(String value) {
        return (Long)parse(value, (String)null, (Locale)null);
    }","  public void test13()  throws Throwable  {
      LongValidator longValidator0 = new LongValidator();
      Long long0 = longValidator0.validate(""0"");
}"
1109,"    public Long validate(String value) {
        return (Long)parse(value, (String)null, (Locale)null);
    }","  public void test14()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      Long long0 = longValidator0.validate(""675"");
}"
1110,"    protected Object processParsedValue(Object value, Format formatter) {

        // Parsed value will be Long if it fits in a long and is not fractional
        if (value instanceof Long) {
            return value;
        }
        return null;

    }","  public void test15()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      Locale locale0 = Locale.FRANCE;
      Format format0 = longValidator0.getFormat((String) null, locale0);
      Long long0 = new Long(1);
      Object object0 = longValidator0.processParsedValue(long0, format0);
}"
1111,"    public boolean minValue(long value, long min) {
        return (value >= min);
    }","  public void test16()  throws Throwable  {
      LongValidator longValidator0 = new LongValidator();
      Long long0 = new Long(0);
      boolean boolean0 = longValidator0.minValue(long0, 964L);
}"
1112,"    public boolean maxValue(long value, long max) {
        return (value <= max);
    }","  public void test17()  throws Throwable  {
      LongValidator longValidator0 = new LongValidator();
      Long long0 = new Long((-1998L));
      boolean boolean0 = longValidator0.maxValue(long0, (-2229L));
}"
1113,"    public Long validate(String value) {
        return (Long)parse(value, (String)null, (Locale)null);
    }","  public void test18()  throws Throwable  {
      LongValidator longValidator0 = new LongValidator();
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        longValidator0.validate(""Wc<[Kh6J-c~S#FXw?(z"", ""Cpz.,$U/"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \""Cpz.,$U/\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1114,"    public Long validate(String value) {
        return (Long)parse(value, (String)null, (Locale)null);
    }","  public void test19()  throws Throwable  {
      LongValidator longValidator0 = new LongValidator();
      // Undeclared exception!
      try { 
        longValidator0.validate("")U:,%85>B[Xr"", "")U:,%85>B[Xr"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \"")U:,%85>B[Xr\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1115,"    public boolean minValue(long value, long min) {
        return (value >= min);
    }","  public void test20()  throws Throwable  {
      LongValidator longValidator0 = new LongValidator(false, 0);
      // Undeclared exception!
      try { 
        longValidator0.minValue((Long) null, 1L);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.LongValidator"", e);
      }
  }"
1116,"    public boolean maxValue(long value, long max) {
        return (value <= max);
    }","  public void test21()  throws Throwable  {
      LongValidator longValidator0 = new LongValidator();
      // Undeclared exception!
      try { 
        longValidator0.maxValue((Long) null, 4132L);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.LongValidator"", e);
      }
  }"
1117,"    public boolean isInRange(long value, long min, long max) {
        return (value >= min && value <= max);
    }","  public void test22()  throws Throwable  {
      LongValidator longValidator0 = new LongValidator(false, (-116));
      // Undeclared exception!
      try { 
        longValidator0.isInRange((Long) null, (long) (-116), 0L);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.LongValidator"", e);
      }
  }"
1118,"    public boolean maxValue(long value, long max) {
        return (value <= max);
    }","  public void test23()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      boolean boolean0 = longValidator0.maxValue(0L, 0L);
}"
1119,"    public boolean minValue(long value, long min) {
        return (value >= min);
    }","  public void test24()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      boolean boolean0 = longValidator0.minValue((-1L), (-1037L));
}"
1120,"    public boolean isInRange(long value, long min, long max) {
        return (value >= min && value <= max);
    }","  public void test25()  throws Throwable  {
      LongValidator longValidator0 = new LongValidator(false, (-1));
      boolean boolean0 = longValidator0.isInRange((long) (-1), (long) (-1), 0L);
}"
1121,"    public boolean isInRange(long value, long min, long max) {
        return (value >= min && value <= max);
    }","  public void test26()  throws Throwable  {
      LongValidator longValidator0 = new LongValidator(true, (-444));
      boolean boolean0 = longValidator0.isInRange((long) (-444), 0L, (-1L));
}"
1122,"    protected Object processParsedValue(Object value, Format formatter) {

        // Parsed value will be Long if it fits in a long and is not fractional
        if (value instanceof Long) {
            return value;
        }
        return null;

    }","  public void test27()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      Object object0 = longValidator0.processParsedValue(""1"", (Format) null);
}"
1123,"    public boolean maxValue(long value, long max) {
        return (value <= max);
    }","  public void test28()  throws Throwable  {
      LongValidator longValidator0 = new LongValidator();
      boolean boolean0 = longValidator0.maxValue((long) 2, (long) 1);
}"
1124,"    public boolean minValue(long value, long min) {
        return (value >= min);
    }","  public void test29()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      boolean boolean0 = longValidator0.minValue((long) 0, (long) 2);
}"
1125,"    public boolean isInRange(long value, long min, long max) {
        return (value >= min && value <= max);
    }","  public void test30()  throws Throwable  {
      LongValidator longValidator0 = new LongValidator();
      Long long0 = Long.getLong(""hUUMGl~"", (long) 1);
      boolean boolean0 = longValidator0.isInRange(long0, (long) 1, (long) 2);
}"
1126,"    public boolean minValue(long value, long min) {
        return (value >= min);
    }","  public void test31()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      Long long0 = new Long(1);
      boolean boolean0 = longValidator0.minValue(long0, (long) 0);
}"
1127,"    public Long validate(String value) {
        return (Long)parse(value, (String)null, (Locale)null);
    }","  public void test32()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      Long long0 = longValidator0.validate(""1"", ""1"");
}"
1128,"    public Long validate(String value) {
        return (Long)parse(value, (String)null, (Locale)null);
    }","  public void test33()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      Locale locale0 = Locale.GERMANY;
      Long long0 = longValidator0.validate(""1"", locale0);
}"
1129,"    public boolean isInRange(long value, long min, long max) {
        return (value >= min && value <= max);
    }","  public void test34()  throws Throwable  {
      LongValidator longValidator0 = new LongValidator();
      Long long0 = new Long(2);
      boolean boolean0 = longValidator0.isInRange(long0, 1966L, 1966L);
}"
1130,"    public Long validate(String value) {
        return (Long)parse(value, (String)null, (Locale)null);
    }","  public void test35()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      Long long0 = longValidator0.validate(""1"");
}"
1131,"    public boolean maxValue(long value, long max) {
        return (value <= max);
    }","  public void test36()  throws Throwable  {
      LongValidator longValidator0 = new LongValidator();
      Long long0 = new Long(2);
      boolean boolean0 = longValidator0.maxValue(long0, (long) 2);
}"
1132,"    public Long validate(String value) {
        return (Long)parse(value, (String)null, (Locale)null);
    }","  public void test37()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      Locale locale0 = Locale.GERMANY;
      Long long0 = longValidator0.validate(""1"", ""1"", locale0);
}"
1133,"    public String validate(String value) {
        if (value == null) {
            return null;
        }
        for (int i = 0; i < patterns.length; i++) {
            Matcher matcher = patterns[i].matcher(value);
            if (matcher.matches()) {
                int count = matcher.groupCount();
                if (count == 1) {
                    return matcher.group(1);
                }
                StringBuilder buffer = new StringBuilder();
                for (int j = 0; j < count; j++) {
                    String component = matcher.group(j+1);
                    if (component != null) {
                        buffer.append(component);
                    }
                }
                return buffer.toString();
            }
        }
        return null;
    }","  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""Y>>@+'=]"";
      stringArray0[1] = ""`#X"";
      stringArray0[2] = ""Regular expressions are missing"";
      stringArray0[3] = ""Regular expressions are missing"";
      stringArray0[4] = ""E6_=x\"" O"";
      RegexValidator regexValidator0 = new RegexValidator(stringArray0);
      String string0 = regexValidator0.validate(""E6_=x\"" O"");
}"
1134,"    public String[] match(String value) {
        if (value == null) {
            return null;
        }
        for (int i = 0; i < patterns.length; i++) {
            Matcher matcher = patterns[i].matcher(value);
            if (matcher.matches()) {
                int count = matcher.groupCount();
                String[] groups = new String[count];
                for (int j = 0; j < count; j++) {
                    groups[j] = matcher.group(j+1);
                }
                return groups;
            }
        }
        return null;
    }","  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""T"";
      stringArray0[1] = ""uJb\""B>T=P?;ky@aOyo-"";
      stringArray0[2] = ""\n@oW^i8"";
      stringArray0[3] = ""DyT;7Uo.]"";
      stringArray0[4] = ""|bN6"";
      stringArray0[5] = ""@"";
      stringArray0[6] = ""%y#8q]k1@i&r;r"";
      stringArray0[7] = ""] is missing"";
      RegexValidator regexValidator0 = new RegexValidator(stringArray0, false);
      String[] stringArray1 = regexValidator0.match(""%y#8q]k1@i&r;r"");
}"
1135,"    public String[] match(String value) {
        if (value == null) {
            return null;
        }
        for (int i = 0; i < patterns.length; i++) {
            Matcher matcher = patterns[i].matcher(value);
            if (matcher.matches()) {
                int count = matcher.groupCount();
                String[] groups = new String[count];
                for (int j = 0; j < count; j++) {
                    groups[j] = matcher.group(j+1);
                }
                return groups;
            }
        }
        return null;
    }","  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""T"";
      stringArray0[1] = ""uJb\""B>T=P?;ky@aOyo-"";
      stringArray0[2] = ""\n@oW^i8"";
      stringArray0[3] = ""DyT;7Uo.]"";
      stringArray0[4] = ""|bN6"";
      stringArray0[5] = ""@"";
      stringArray0[6] = ""%y#8q]k1@i&r;r"";
      stringArray0[7] = ""] is missing"";
      RegexValidator regexValidator0 = new RegexValidator(stringArray0, false);
      String[] stringArray1 = regexValidator0.match(""%y#8q]k1@i&r;r"");
}"
1136,"    public RegexValidator(String regex) {
        this(regex, true);
    }","  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ""IbnIfE*Q}(&jR"";
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator(stringArray0, true);
        fail(""Expecting exception: PatternSyntaxException"");
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 13
         // IbnIfE*Q}(&jR
         //
         verifyException(""java.util.regex.Pattern"", e);
      }
  }"
1137,"    public RegexValidator(String regex) {
        this(regex, true);
    }","  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""RegexValidator{"";
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator(stringArray0);
        fail(""Expecting exception: PatternSyntaxException"");
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 13
         // RegexValidator{
         //              ^
         //
         verifyException(""java.util.regex.Pattern"", e);
      }
  }"
1138,"    public RegexValidator(String regex) {
        this(regex, true);
    }","  public void test5()  throws Throwable  {
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator("""", true);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Regular expression[0] is missing
         //
         verifyException(""org.apache.commons.validator.routines.RegexValidator"", e);
      }
  }"
1139,"    public RegexValidator(String regex) {
        this(regex, true);
    }","  public void test6()  throws Throwable  {
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator("",4'(44P@5@S!*hf"");
        fail(""Expecting exception: PatternSyntaxException"");
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 15
         // ,4'(44P@5@S!*hf
         //
         verifyException(""java.util.regex.Pattern"", e);
      }
  }"
1140,"    public RegexValidator(String regex) {
        this(regex, true);
    }","  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = """";
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator(stringArray0, true);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Regular expression[0] is missing
         //
         verifyException(""org.apache.commons.validator.routines.RegexValidator"", e);
      }
  }"
1141,"    public RegexValidator(String regex) {
        this(regex, true);
    }","  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[1];
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator(stringArray0, true);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Regular expression[0] is missing
         //
         verifyException(""org.apache.commons.validator.routines.RegexValidator"", e);
      }
  }"
1142,"    public RegexValidator(String regex) {
        this(regex, true);
    }","  public void test9()  throws Throwable  {
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator((String[]) null, false);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Regular expressions are missing
         //
         verifyException(""org.apache.commons.validator.routines.RegexValidator"", e);
      }
  }"
1143,"    public RegexValidator(String regex) {
        this(regex, true);
    }","  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[0];
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator(stringArray0, true);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Regular expressions are missing
         //
         verifyException(""org.apache.commons.validator.routines.RegexValidator"", e);
      }
  }"
1144,"    public RegexValidator(String regex) {
        this(regex, true);
    }","  public void test11()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("";% Ih#Il"", false);
  }"
1145,"    public String toString() {
        StringBuilder buffer = new StringBuilder();
        buffer.append(""RegexValidator{"");
        for (int i = 0; i < patterns.length; i++) {
            if (i > 0) {
                buffer.append("","");
            }
            buffer.append(patterns[i].pattern());
        }
        buffer.append(""}"");
        return buffer.toString();
    }","  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""Y>>@+'=]"";
      stringArray0[1] = ""`#X"";
      stringArray0[2] = ""Regular expressions are missing"";
      stringArray0[3] = ""Regular expressions are missing"";
      stringArray0[4] = ""E6_=x\"" O"";
      RegexValidator regexValidator0 = new RegexValidator(stringArray0);
      String string0 = regexValidator0.toString();
}"
1146,"    public String toString() {
        StringBuilder buffer = new StringBuilder();
        buffer.append(""RegexValidator{"");
        for (int i = 0; i < patterns.length; i++) {
            if (i > 0) {
                buffer.append("","");
            }
            buffer.append(patterns[i].pattern());
        }
        buffer.append(""}"");
        return buffer.toString();
    }","  public void test13()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(""iiB\""=h.PD"");
      String string0 = regexValidator0.toString();
}"
1147,"    public String validate(String value) {
        if (value == null) {
            return null;
        }
        for (int i = 0; i < patterns.length; i++) {
            Matcher matcher = patterns[i].matcher(value);
            if (matcher.matches()) {
                int count = matcher.groupCount();
                if (count == 1) {
                    return matcher.group(1);
                }
                StringBuilder buffer = new StringBuilder();
                for (int j = 0; j < count; j++) {
                    String component = matcher.group(j+1);
                    if (component != null) {
                        buffer.append(component);
                    }
                }
                return buffer.toString();
            }
        }
        return null;
    }","  public void test14()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(""9\""kI"");
      String string0 = regexValidator0.validate(""2"");
}"
1148,"    public String validate(String value) {
        if (value == null) {
            return null;
        }
        for (int i = 0; i < patterns.length; i++) {
            Matcher matcher = patterns[i].matcher(value);
            if (matcher.matches()) {
                int count = matcher.groupCount();
                if (count == 1) {
                    return matcher.group(1);
                }
                StringBuilder buffer = new StringBuilder();
                for (int j = 0; j < count; j++) {
                    String component = matcher.group(j+1);
                    if (component != null) {
                        buffer.append(component);
                    }
                }
                return buffer.toString();
            }
        }
        return null;
    }","  public void test15()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(""9\""kI"");
      String string0 = regexValidator0.validate((String) null);
}"
1149,"    public String[] match(String value) {
        if (value == null) {
            return null;
        }
        for (int i = 0; i < patterns.length; i++) {
            Matcher matcher = patterns[i].matcher(value);
            if (matcher.matches()) {
                int count = matcher.groupCount();
                String[] groups = new String[count];
                for (int j = 0; j < count; j++) {
                    groups[j] = matcher.group(j+1);
                }
                return groups;
            }
        }
        return null;
    }","  public void test16()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(""9\""kI"");
      String[] stringArray0 = regexValidator0.match(""2"");
}"
1150,"    public String[] match(String value) {
        if (value == null) {
            return null;
        }
        for (int i = 0; i < patterns.length; i++) {
            Matcher matcher = patterns[i].matcher(value);
            if (matcher.matches()) {
                int count = matcher.groupCount();
                String[] groups = new String[count];
                for (int j = 0; j < count; j++) {
                    groups[j] = matcher.group(j+1);
                }
                return groups;
            }
        }
        return null;
    }","  public void test17()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(""9\""kI"");
      String[] stringArray0 = regexValidator0.match((String) null);
}"
1151,"    public boolean isValid(String value) {
        if (value == null) {
            return false;
        }
        for (int i = 0; i < patterns.length; i++) {
            if (patterns[i].matcher(value).matches()) {
                return true;
            }
        }
        return false;
    }","  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""] is missing"";
      stringArray0[1] = ""uJb\""B>T=P?;ky@aOyGo-"";
      stringArray0[2] = ""uJb\""B>T=P?;ky@aOyGo-"";
      stringArray0[3] = ""uJb\""B>T=P?;ky@aOyGo-"";
      stringArray0[4] = ""uJb\""B>T=P?;ky@aOyGo-"";
      RegexValidator regexValidator0 = new RegexValidator(stringArray0, false);
      boolean boolean0 = regexValidator0.isValid(""uJb\""B>T=P?;ky@aOyGo-"");
}"
1152,"    public boolean isValid(String value) {
        if (value == null) {
            return false;
        }
        for (int i = 0; i < patterns.length; i++) {
            if (patterns[i].matcher(value).matches()) {
                return true;
            }
        }
        return false;
    }","  public void test19()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(""9\""kI"");
      boolean boolean0 = regexValidator0.isValid((String) null);
}"
1153,"    public RegexValidator(String regex) {
        this(regex, true);
    }","  public void test20()  throws Throwable  {
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator("""");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Regular expression[0] is missing
         //
         verifyException(""org.apache.commons.validator.routines.RegexValidator"", e);
      }
  }"
1154,"    public RegexValidator(String regex) {
        this(regex, true);
    }","  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[0];
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator(stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Regular expressions are missing
         //
         verifyException(""org.apache.commons.validator.routines.RegexValidator"", e);
      }
  }"
1155,"    public boolean isValid(String value) {
        if (value == null) {
            return false;
        }
        for (int i = 0; i < patterns.length; i++) {
            if (patterns[i].matcher(value).matches()) {
                return true;
            }
        }
        return false;
    }","  public void test22()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(""0Qnl/Kqp"");
      boolean boolean0 = regexValidator0.isValid(""0Qnl/Kqp"");
}"
1156,"    public RegexValidator(String regex) {
        this(regex, true);
    }","  public void test23()  throws Throwable  {
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator(""-?>T{$?5c-{-1{"", true);
        fail(""Expecting exception: PatternSyntaxException"");
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 3
         // -?>T{$?5c-{-1{
         //    ^
         //
         verifyException(""java.util.regex.Pattern"", e);
      }
  }"
1157,"    protected Object processParsedValue(Object value, Format formatter) {

        // Parsed value will be Long if it fits in a long and is not fractional
        if (value instanceof Long) {
            long longValue = ((Long)value).longValue();
            if (longValue >= Byte.MIN_VALUE && 
                longValue <= Byte.MAX_VALUE) {
                return Byte.valueOf((byte)longValue);
            }
        }
        return null;
    }","  public void test0()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator();
      Locale locale0 = Locale.ITALY;
      Long long0 = new Long(127L);
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance(0, 0, locale0);
      Object object0 = byteValidator0.processParsedValue(long0, dateFormat0);
}"
1158,"    protected Object processParsedValue(Object value, Format formatter) {

        // Parsed value will be Long if it fits in a long and is not fractional
        if (value instanceof Long) {
            long longValue = ((Long)value).longValue();
            if (longValue >= Byte.MIN_VALUE && 
                longValue <= Byte.MAX_VALUE) {
                return Byte.valueOf((byte)longValue);
            }
        }
        return null;
    }","  public void test1()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator();
      Locale locale0 = Locale.ITALY;
      Long long0 = new Long(127L);
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance(0, 0, locale0);
      Object object0 = byteValidator0.processParsedValue(long0, dateFormat0);
}"
1159,"    protected Object processParsedValue(Object value, Format formatter) {

        // Parsed value will be Long if it fits in a long and is not fractional
        if (value instanceof Long) {
            long longValue = ((Long)value).longValue();
            if (longValue >= Byte.MIN_VALUE && 
                longValue <= Byte.MAX_VALUE) {
                return Byte.valueOf((byte)longValue);
            }
        }
        return null;
    }","  public void test2()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator();
      Locale locale0 = new Locale(""a"", ""J+t[O)_~U"");
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      Long long0 = new Long((-128L));
      Object object0 = byteValidator0.processParsedValue(long0, numberFormat0);
}"
1160,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test3()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator();
      Locale locale0 = Locale.CHINA;
      Byte byte0 = byteValidator0.validate(""0"", locale0);
}"
1161,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test4()  throws Throwable  {
      ByteValidator byteValidator0 = ByteValidator.getInstance();
      Locale locale0 = Locale.FRANCE;
      Byte byte0 = byteValidator0.validate(""-92"", locale0);
}"
1162,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test5()  throws Throwable  {
      ByteValidator byteValidator0 = ByteValidator.getInstance();
      Locale locale0 = Locale.FRANCE;
      Byte byte0 = byteValidator0.validate(""-92"", locale0);
}"
1163,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test6()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator();
      Locale locale0 = Locale.ITALIAN;
      Byte byte0 = byteValidator0.validate("""", """", locale0);
}"
1164,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test7()  throws Throwable  {
      ByteValidator byteValidator0 = ByteValidator.getInstance();
      Locale locale0 = Locale.PRC;
      Byte byte0 = byteValidator0.validate(""G6TiG?MNKq6oONz$W0]"", ""G6TiG?MNKq6oONz$W0]"", locale0);
}"
1165,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test8()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator();
      Locale locale0 = Locale.FRANCE;
      Byte byte0 = byteValidator0.validate(""7"", """", locale0);
}"
1166,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test9()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator();
      Locale locale0 = Locale.FRANCE;
      Byte byte0 = byteValidator0.validate(""7"", """", locale0);
}"
1167,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test10()  throws Throwable  {
      ByteValidator byteValidator0 = ByteValidator.getInstance();
      Locale locale0 = Locale.UK;
      Byte byte0 = byteValidator0.validate(""-30"", """", locale0);
}"
1168,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test11()  throws Throwable  {
      ByteValidator byteValidator0 = ByteValidator.getInstance();
      Locale locale0 = Locale.UK;
      Byte byte0 = byteValidator0.validate(""-30"", """", locale0);
}"
1169,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test12()  throws Throwable  {
      ByteValidator byteValidator0 = ByteValidator.getInstance();
      Byte byte0 = byteValidator0.validate(""G6TiG?MNKq6oONz$W0]"", ""G6TiG?MNKq6oONz$W0]"");
}"
1170,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test13()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator(false, (-1));
      Byte byte0 = byteValidator0.validate(""5|I#K5*jl#-CD/D6;*2"", (String) null);
}"
1171,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test14()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator(false, (-1));
      Byte byte0 = byteValidator0.validate(""5|I#K5*jl#-CD/D6;*2"", (String) null);
}"
1172,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test15()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator();
      Byte byte0 = byteValidator0.validate(""-ceXz1"", ""ceXz"");
}"
1173,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test16()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator();
      Byte byte0 = byteValidator0.validate(""-ceXz1"", ""ceXz"");
}"
1174,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test17()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator(true, (-5295));
      Byte byte0 = byteValidator0.validate(""0"");
}"
1175,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test18()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator(false, (-5295));
      Byte byte0 = byteValidator0.validate(""2.143"");
}"
1176,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test19()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator(false, (-5295));
      Byte byte0 = byteValidator0.validate(""2.143"");
}"
1177,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test20()  throws Throwable  {
      ByteValidator byteValidator0 = ByteValidator.getInstance();
      Byte byte0 = byteValidator0.validate(""-30"");
}"
1178,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test21()  throws Throwable  {
      ByteValidator byteValidator0 = ByteValidator.getInstance();
      Byte byte0 = byteValidator0.validate(""-30"");
}"
1179,"    public boolean minValue(byte value, byte min) {
        return (value >= min);
    }","  public void test22()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator();
      Byte byte0 = new Byte((byte) (-80));
      boolean boolean0 = byteValidator0.minValue(byte0, (byte)53);
}"
1180,"    public boolean maxValue(byte value, byte max) {
        return (value <= max);
    }","  public void test23()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator(true, 2985);
      Byte byte0 = new Byte((byte)119);
      boolean boolean0 = byteValidator0.maxValue(byte0, (byte) (-1));
}"
1181,"    public boolean isInRange(byte value, byte min, byte max) {
        return (value >= min && value <= max);
    }","  public void test24()  throws Throwable  {
      ByteValidator byteValidator0 = ByteValidator.getInstance();
      Byte byte0 = new Byte((byte) (-31));
      boolean boolean0 = byteValidator0.isInRange(byte0, (byte)1, (byte) (-31));
}"
1182,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test25()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator(false, 45);
      // Undeclared exception!
      try { 
        byteValidator0.validate(""KLRgst61iWTV~^G"", "",kAa[.9-"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \"",kAa[.9-\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1183,"    public boolean minValue(byte value, byte min) {
        return (value >= min);
    }","  public void test26()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator(true, 1);
      // Undeclared exception!
      try { 
        byteValidator0.minValue((Byte) null, (byte)2);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.ByteValidator"", e);
      }
  }"
1184,"    public boolean maxValue(byte value, byte max) {
        return (value <= max);
    }","  public void test27()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator(false, (-1));
      // Undeclared exception!
      try { 
        byteValidator0.maxValue((Byte) null, (byte) (-1));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.ByteValidator"", e);
      }
  }"
1185,"    public boolean isInRange(byte value, byte min, byte max) {
        return (value >= min && value <= max);
    }","  public void test28()  throws Throwable  {
      ByteValidator byteValidator0 = ByteValidator.getInstance();
      // Undeclared exception!
      try { 
        byteValidator0.isInRange((Byte) null, (byte) (-104), (byte) (-104));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.ByteValidator"", e);
      }
  }"
1186,"    public boolean maxValue(byte value, byte max) {
        return (value <= max);
    }","  public void test29()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator(true, 1);
      boolean boolean0 = byteValidator0.maxValue((byte)1, (byte)2);
}"
1187,"    public boolean minValue(byte value, byte min) {
        return (value >= min);
    }","  public void test30()  throws Throwable  {
      ByteValidator byteValidator0 = ByteValidator.getInstance();
      boolean boolean0 = byteValidator0.minValue((byte)1, (byte) (-1));
}"
1188,"    public boolean isInRange(byte value, byte min, byte max) {
        return (value >= min && value <= max);
    }","  public void test31()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator();
      boolean boolean0 = byteValidator0.isInRange((byte)0, (byte)0, (byte)102);
}"
1189,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test32()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator(true, (-5295));
      Locale locale0 = Locale.ITALIAN;
      Byte byte0 = byteValidator0.validate(""2.143"", locale0);
}"
1190,"    protected Object processParsedValue(Object value, Format formatter) {

        // Parsed value will be Long if it fits in a long and is not fractional
        if (value instanceof Long) {
            long longValue = ((Long)value).longValue();
            if (longValue >= Byte.MIN_VALUE && 
                longValue <= Byte.MAX_VALUE) {
                return Byte.valueOf((byte)longValue);
            }
        }
        return null;
    }","  public void test33()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Long long0 = new Long((-177L));
      Object object0 = byteValidator0.processParsedValue(long0, decimalFormat0);
}"
1191,"    protected Object processParsedValue(Object value, Format formatter) {

        // Parsed value will be Long if it fits in a long and is not fractional
        if (value instanceof Long) {
            long longValue = ((Long)value).longValue();
            if (longValue >= Byte.MIN_VALUE && 
                longValue <= Byte.MAX_VALUE) {
                return Byte.valueOf((byte)longValue);
            }
        }
        return null;
    }","  public void test34()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator(true, 1);
      Object object0 = byteValidator0.processParsedValue((Object) null, (Format) null);
}"
1192,"    public boolean maxValue(byte value, byte max) {
        return (value <= max);
    }","  public void test35()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator();
      boolean boolean0 = byteValidator0.maxValue((byte)127, (byte)6);
}"
1193,"    public boolean minValue(byte value, byte min) {
        return (value >= min);
    }","  public void test36()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator();
      boolean boolean0 = byteValidator0.minValue((byte) (-9), (byte)17);
}"
1194,"    public boolean isInRange(byte value, byte min, byte max) {
        return (value >= min && value <= max);
    }","  public void test37()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator(true, 1);
      boolean boolean0 = byteValidator0.isInRange((byte)59, (byte)2, (byte)1);
}"
1195,"    public boolean isInRange(byte value, byte min, byte max) {
        return (value >= min && value <= max);
    }","  public void test38()  throws Throwable  {
      ByteValidator byteValidator0 = ByteValidator.getInstance();
      boolean boolean0 = byteValidator0.isInRange((byte) (-17), (byte)42, (byte)42);
}"
1196,"    public boolean isInRange(byte value, byte min, byte max) {
        return (value >= min && value <= max);
    }","  public void test39()  throws Throwable  {
      ByteValidator byteValidator0 = ByteValidator.getInstance();
      Byte byte0 = new Byte((byte) (-57));
      boolean boolean0 = byteValidator0.isInRange(byte0, (byte) (-57), (byte) (-57));
}"
1197,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test40()  throws Throwable  {
      ByteValidator byteValidator0 = ByteValidator.getInstance();
      // Undeclared exception!
      try { 
        byteValidator0.validate(""33Mu "", ""org.apache.commons.validator.routines.AbstractNumberValidator"", (Locale) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \""org.apache.commons.validator.routines.AbstractNumberValidator\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1198,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test41()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator();
      Locale locale0 = Locale.GERMAN;
      Byte byte0 = byteValidator0.validate(""4"", locale0);
}"
1199,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test42()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator();
      Locale locale0 = Locale.GERMAN;
      Byte byte0 = byteValidator0.validate(""4"", locale0);
}"
1200,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test43()  throws Throwable  {
      ByteValidator byteValidator0 = ByteValidator.getInstance();
      Byte byte0 = byteValidator0.validate(""org.apache.commons.validator.routines.AbstractFormatValidator"");
}"
1201,"    public Byte validate(String value) {
        return (Byte)parse(value, (String)null, (Locale)null);
    }","  public void test44()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator(true, 1);
      Byte byte0 = byteValidator0.validate("""", "":@'B%G!z|B$0$vm)|u "");
}"
1202,"    public boolean minValue(byte value, byte min) {
        return (value >= min);
    }","  public void test45()  throws Throwable  {
      ByteValidator byteValidator0 = ByteValidator.getInstance();
      Byte byte0 = new Byte((byte) (-57));
      boolean boolean0 = byteValidator0.minValue(byte0, (byte) (-57));
}"
1203,"    public boolean maxValue(byte value, byte max) {
        return (value <= max);
    }","  public void test46()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator();
      Byte byte0 = new Byte((byte) (-107));
      boolean boolean0 = byteValidator0.maxValue(byte0, (byte) (-107));
}"
1204,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test0()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      Calendar calendar0 = timeValidator0.validate(""12:00 AM"", (Locale) null, (TimeZone) null);
}"
1205,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test1()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Calendar calendar0 = timeValidator0.validate("""", """", timeZone0);
}"
1206,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test2()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.CANADA;
      Calendar calendar0 = timeValidator0.validate("">"", "">"", locale0, (TimeZone) null);
}"
1207,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test3()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      Locale locale0 = Locale.TAIWAN;
      Calendar calendar0 = timeValidator0.validate((String) null, ""CkD"", locale0);
}"
1208,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test4()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(true, 1);
      Calendar calendar0 = timeValidator0.validate("""", """");
}"
1209,"    protected Object processParsedValue(Object value, Format formatter) {
        return ((DateFormat)formatter).getCalendar();
    }","  public void test5()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(true, 0);
      Locale locale0 = Locale.ITALY;
      Format format0 = timeValidator0.getFormat(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      mockSimpleDateFormat0.setCalendar((Calendar) null);
      Object object0 = timeValidator0.processParsedValue(format0, mockSimpleDateFormat0);
}"
1210,"    public int compareTime(Calendar value, Calendar compare) {
        return compareTime(value, compare, Calendar.MILLISECOND);
    }","  public void test6()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(false, 899);
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = timeValidator0.validate(""%#"", ""%#"", timeZone0);
      int int0 = timeValidator0.compareTime(calendar0, calendar0);
}"
1211,"    public int compareTime(Calendar value, Calendar compare) {
        return compareTime(value, compare, Calendar.MILLISECOND);
    }","  public void test7()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.CANADA;
      Calendar calendar0 = timeValidator0.validate("">"", "">"", locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = timeValidator0.compareTime(mockGregorianCalendar0, calendar0);
}"
1212,"    public int compareTime(Calendar value, Calendar compare) {
        return compareTime(value, compare, Calendar.MILLISECOND);
    }","  public void test8()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.CANADA;
      Calendar calendar0 = timeValidator0.validate("">"", "">"", locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = timeValidator0.compareTime(mockGregorianCalendar0, calendar0);
}"
1213,"    public int compareTime(Calendar value, Calendar compare) {
        return compareTime(value, compare, Calendar.MILLISECOND);
    }","  public void test9()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.CANADA;
      Calendar calendar0 = timeValidator0.validate("">"", "">"", locale0);
      Calendar calendar1 = MockCalendar.getInstance(locale0);
      int int0 = timeValidator0.compareTime(calendar0, calendar1);
}"
1214,"    public int compareTime(Calendar value, Calendar compare) {
        return compareTime(value, compare, Calendar.MILLISECOND);
    }","  public void test10()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.CANADA;
      Calendar calendar0 = timeValidator0.validate("">"", "">"", locale0);
      Calendar calendar1 = MockCalendar.getInstance(locale0);
      int int0 = timeValidator0.compareTime(calendar0, calendar1);
}"
1215,"    public int compareSeconds(Calendar value, Calendar compare) {
        return compareTime(value, compare, Calendar.SECOND);
    }","  public void test11()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(258, 258, 258, 258, 258, 258);
      Locale locale0 = Locale.CHINESE;
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
      int int0 = timeValidator0.compareSeconds(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1216,"    public int compareSeconds(Calendar value, Calendar compare) {
        return compareTime(value, compare, Calendar.SECOND);
    }","  public void test12()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      Locale locale0 = Locale.US;
      Calendar calendar0 = timeValidator0.validate("">"", "">"", locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(959, 959, 959, 959, 959);
      int int0 = timeValidator0.compareSeconds(calendar0, mockGregorianCalendar0);
}"
1217,"    public int compareSeconds(Calendar value, Calendar compare) {
        return compareTime(value, compare, Calendar.SECOND);
    }","  public void test13()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      Locale locale0 = Locale.US;
      Calendar calendar0 = timeValidator0.validate("">"", "">"", locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(959, 959, 959, 959, 959);
      int int0 = timeValidator0.compareSeconds(calendar0, mockGregorianCalendar0);
}"
1218,"    public int compareMinutes(Calendar value, Calendar compare) {
        return compareTime(value, compare, Calendar.MINUTE);
    }","  public void test14()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(258, 258, 258, 258, 258, 258);
      Locale locale0 = Locale.CHINESE;
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
      int int0 = timeValidator0.compareMinutes(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1219,"    public int compareMinutes(Calendar value, Calendar compare) {
        return compareTime(value, compare, Calendar.MINUTE);
    }","  public void test15()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(true, 1840);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4163, 4163, 1840, 0, 1217);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = timeValidator0.compareMinutes(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1220,"    public int compareHours(Calendar value, Calendar compare) {
        return compareTime(value, compare, Calendar.HOUR_OF_DAY);
    }","  public void test16()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(false, 0);
      Locale locale0 = Locale.forLanguageTag(""mt9{\""mEczW%5Vn^-?w"");
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)timeValidator0.processParsedValue(locale0, dateFormat0);
      int int0 = timeValidator0.compareHours(mockGregorianCalendar0, mockGregorianCalendar0);
}"
1221,"    public int compareHours(Calendar value, Calendar compare) {
        return compareTime(value, compare, Calendar.HOUR_OF_DAY);
    }","  public void test17()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, (-2721), (-2721), 1, 0, 1);
      int int0 = timeValidator0.compareHours(calendar0, mockGregorianCalendar0);
}"
1222,"    public int compareHours(Calendar value, Calendar compare) {
        return compareTime(value, compare, Calendar.HOUR_OF_DAY);
    }","  public void test18()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, (-1), 0, 0, (-1), 0);
      int int0 = timeValidator0.compareHours(calendar0, mockGregorianCalendar0);
}"
1223,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test19()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(true, 258);
      TimeZone timeZone0 = TimeZone.getTimeZone(""`ssA#X\t"");
      // Undeclared exception!
      try { 
        timeValidator0.validate(""`ssA#X\t"", timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 258
         //
         verifyException(""java.text.DateFormat"", e);
      }
  }"
1224,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test20()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(false, 899);
      Locale locale0 = Locale.GERMAN;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        timeValidator0.validate(""%#"", locale0, timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 899
         //
         verifyException(""java.text.DateFormat"", e);
      }
  }"
1225,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test21()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(false, 4);
      Locale locale0 = new Locale(""org.apache.commons.validator.routines.AbstractFormatValidator"", ""org.apache.commons.validator.routines.AbstractFormatValidator"");
      // Undeclared exception!
      try { 
        timeValidator0.validate(""D?9&o>YNwpKAIwj}"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 4
         //
         verifyException(""java.text.DateFormat"", e);
      }
  }"
1226,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test22()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(true, 6);
      // Undeclared exception!
      try { 
        timeValidator0.validate(""Rm]*"", ""org.apache.commons.validator.routines.AbstractFormatValidator"", (TimeZone) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
1227,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test23()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      Locale locale0 = new Locale(""m/kvN!R R6$-v|:"");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1993), ""AYy\""ho*T%Y3"");
      // Undeclared exception!
      try { 
        timeValidator0.validate("":|KjaLy"", ""AYy\""ho*T%Y3"", locale0, (TimeZone) simpleTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'A'
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
1228,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test24()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.UK;
      // Undeclared exception!
      try { 
        timeValidator0.validate(""ONK*J0"", ""Ix/MSkAN^KH<9%Pd-]^"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'I'
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
1229,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test25()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      // Undeclared exception!
      try { 
        timeValidator0.validate(""J2gh"", ""Invalid field: "");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'I'
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
1230,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test26()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(true, 12);
      // Undeclared exception!
      try { 
        timeValidator0.validate(""'J#2J sORkuN=w+;"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 12
         //
         verifyException(""java.text.DateFormat"", e);
      }
  }"
1231,"    protected Object processParsedValue(Object value, Format formatter) {
        return ((DateFormat)formatter).getCalendar();
    }","  public void test27()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 1481, (-941), (-941), (-941));
      // Undeclared exception!
      try { 
        timeValidator0.processParsedValue(mockGregorianCalendar0, (Format) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.TimeValidator"", e);
      }
  }"
1232,"    protected Object processParsedValue(Object value, Format formatter) {
        return ((DateFormat)formatter).getCalendar();
    }","  public void test28()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_TIME;
      TemporalQuery<Calendar> temporalQuery0 = (TemporalQuery<Calendar>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      Format format0 = dateTimeFormatter0.toFormat(temporalQuery0);
      // Undeclared exception!
      try { 
        timeValidator0.processParsedValue((Object) null, format0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.time.format.DateTimeFormatter$ClassicFormat cannot be cast to java.text.DateFormat
         //
         verifyException(""org.apache.commons.validator.routines.TimeValidator"", e);
      }
  }"
1233,"    public int compareTime(Calendar value, Calendar compare) {
        return compareTime(value, compare, Calendar.MILLISECOND);
    }","  public void test29()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 11, 0, 2580, 2580, 2580, 0, 11, 11, 11);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      mockGregorianCalendar0.set(0, 2580);
      // Undeclared exception!
      try { 
        timeValidator0.compareTime(mockGregorianCalendar0, mockGregorianCalendar0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException(""java.util.GregorianCalendar"", e);
      }
  }"
1234,"    public int compareSeconds(Calendar value, Calendar compare) {
        return compareTime(value, compare, Calendar.SECOND);
    }","  public void test30()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(true, 0);
      // Undeclared exception!
      try { 
        timeValidator0.compareSeconds((Calendar) null, (Calendar) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.AbstractCalendarValidator"", e);
      }
  }"
1235,"    public int compareMinutes(Calendar value, Calendar compare) {
        return compareTime(value, compare, Calendar.MINUTE);
    }","  public void test31()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.ROOT;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      calendar0.set(0, (-1591));
      // Undeclared exception!
      try { 
        timeValidator0.compareMinutes(calendar0, calendar0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException(""java.util.GregorianCalendar"", e);
      }
  }"
1236,"    public int compareMinutes(Calendar value, Calendar compare) {
        return compareTime(value, compare, Calendar.MINUTE);
    }","  public void test32()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(false, 0);
      // Undeclared exception!
      try { 
        timeValidator0.compareMinutes((Calendar) null, (Calendar) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.AbstractCalendarValidator"", e);
      }
  }"
1237,"    public int compareMinutes(Calendar value, Calendar compare) {
        return compareTime(value, compare, Calendar.MINUTE);
    }","  public void test33()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = timeValidator0.compareMinutes(mockGregorianCalendar0, mockGregorianCalendar0);
}"
1238,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test34()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Calendar calendar0 = timeValidator0.validate(""3"");
}"
1239,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test35()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = timeValidator0.validate(""3"", timeZone0);
}"
1240,"    public int compareTime(Calendar value, Calendar compare) {
        return compareTime(value, compare, Calendar.MILLISECOND);
    }","  public void test36()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      // Undeclared exception!
      try { 
        timeValidator0.compareTime((Calendar) null, (Calendar) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.AbstractCalendarValidator"", e);
      }
  }"
1241,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test37()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      Calendar calendar0 = timeValidator0.validate(""org.apache.comos.valieato.routines.TimeValdator"", (Locale) null);
}"
1242,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test38()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Calendar calendar0 = timeValidator0.validate(""3"", ""3"");
}"
1243,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test39()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      Locale locale0 = Locale.CHINA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, """");
      Calendar calendar0 = timeValidator0.validate("""", locale0, (TimeZone) simpleTimeZone0);
}"
1244,"    public int compareSeconds(Calendar value, Calendar compare) {
        return compareTime(value, compare, Calendar.SECOND);
    }","  public void test40()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = timeValidator0.compareSeconds(mockGregorianCalendar0, mockGregorianCalendar0);
}"
1245,"    public int compareHours(Calendar value, Calendar compare) {
        return compareTime(value, compare, Calendar.HOUR_OF_DAY);
    }","  public void test41()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        timeValidator0.compareHours((Calendar) null, mockGregorianCalendar0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.AbstractCalendarValidator"", e);
      }
  }"
1246,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test42()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      Locale locale0 = Locale.CHINA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, """");
      Calendar calendar0 = timeValidator0.validate("""", """", locale0, (TimeZone) simpleTimeZone0);
}"
1247,"    public boolean isValid(String inetAddress) {
        return isValidInet4Address(inetAddress) || isValidInet6Address(inetAddress);
    }","  public void test0()  throws Throwable  {
      InetAddressValidator inetAddressValidator0 = InetAddressValidator.getInstance();
      boolean boolean0 = inetAddressValidator0.isValid(""$Q"");
}"
1248,"    public boolean isValidInet6Address(String inet6Address) {
        String[] parts;
        // remove prefix size. This will appear after the zone id (if any)
        parts = inet6Address.split(""/"", -1);
        if (parts.length > 2) {
            return false; // can only have one prefix specifier
        }
        if (parts.length == 2) {
            if (parts[1].matches(""\\d{1,3}"")) { // Need to eliminate signs
                int bits = Integer.parseInt(parts[1]); // cannot fail because of RE check
                if (bits < 0 || bits > 128) {
                    return false; // out of range
                }
            } else {
                return false; // not a valid number
            }
        }
        // remove zone-id
        parts = parts[0].split(""%"", -1);
        if (parts.length > 2) {
            return false;
        } else if (parts.length == 2){
            // The id syntax is implemenatation independent, but it presumably cannot allow:
            // whitespace, '/' or '%'
            if (!parts[1].matches(""[^\\s/%]+"")) {
                return false; // invalid id
            }
        }
        inet6Address = parts[0];
        boolean containsCompressedZeroes = inet6Address.contains(""::"");
        if (containsCompressedZeroes && (inet6Address.indexOf(""::"") != inet6Address.lastIndexOf(""::""))) {
            return false;
        }
        if ((inet6Address.startsWith("":"") && !inet6Address.startsWith(""::""))
                || (inet6Address.endsWith("":"") && !inet6Address.endsWith(""::""))) {
            return false;
        }
        String[] octets = inet6Address.split("":"");
        if (containsCompressedZeroes) {
            List<String> octetList = new ArrayList<String>(Arrays.asList(octets));
            if (inet6Address.endsWith(""::"")) {
                // String.split() drops ending empty segments
                octetList.add("""");
            } else if (inet6Address.startsWith(""::"") && !octetList.isEmpty()) {
                octetList.remove(0);
            }
            octets = octetList.toArray(new String[octetList.size()]);
        }
        if (octets.length > IPV6_MAX_HEX_GROUPS) {
            return false;
        }
        int validOctets = 0;
        int emptyOctets = 0; // consecutive empty chunks
        for (int index = 0; index < octets.length; index++) {
            String octet = octets[index];
            if (octet.length() == 0) {
                emptyOctets++;
                if (emptyOctets > 1) {
                    return false;
                }
            } else {
                emptyOctets = 0;
                // Is last chunk an IPv4 address?
                if (index == octets.length - 1 && octet.contains(""."")) {
                    if (!isValidInet4Address(octet)) {
                        return false;
                    }
                    validOctets += 2;
                    continue;
                }
                if (octet.length() > IPV6_MAX_HEX_DIGITS_PER_GROUP) {
                    return false;
                }
                int octetInt = 0;
                try {
                    octetInt = Integer.parseInt(octet, BASE_16);
                } catch (NumberFormatException e) {
                    return false;
                }
                if (octetInt < 0 || octetInt > MAX_UNSIGNED_SHORT) {
                    return false;
                }
            }
            validOctets++;
        }
        if (validOctets > IPV6_MAX_HEX_GROUPS || (validOctets < IPV6_MAX_HEX_GROUPS && !containsCompressedZeroes)) {
            return false;
        }
        return true;
    }","  public void test1()  throws Throwable  {
      InetAddressValidator inetAddressValidator0 = new InetAddressValidator();
      // Undeclared exception!
      try { 
        inetAddressValidator0.isValidInet6Address((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.InetAddressValidator"", e);
      }
  }"
1249,"    public boolean isValid(String inetAddress) {
        return isValidInet4Address(inetAddress) || isValidInet6Address(inetAddress);
    }","  public void test2()  throws Throwable  {
      InetAddressValidator inetAddressValidator0 = new InetAddressValidator();
      // Undeclared exception!
      try { 
        inetAddressValidator0.isValid((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.InetAddressValidator"", e);
      }
  }"
1250,"    public boolean isValidInet6Address(String inet6Address) {
        String[] parts;
        // remove prefix size. This will appear after the zone id (if any)
        parts = inet6Address.split(""/"", -1);
        if (parts.length > 2) {
            return false; // can only have one prefix specifier
        }
        if (parts.length == 2) {
            if (parts[1].matches(""\\d{1,3}"")) { // Need to eliminate signs
                int bits = Integer.parseInt(parts[1]); // cannot fail because of RE check
                if (bits < 0 || bits > 128) {
                    return false; // out of range
                }
            } else {
                return false; // not a valid number
            }
        }
        // remove zone-id
        parts = parts[0].split(""%"", -1);
        if (parts.length > 2) {
            return false;
        } else if (parts.length == 2){
            // The id syntax is implemenatation independent, but it presumably cannot allow:
            // whitespace, '/' or '%'
            if (!parts[1].matches(""[^\\s/%]+"")) {
                return false; // invalid id
            }
        }
        inet6Address = parts[0];
        boolean containsCompressedZeroes = inet6Address.contains(""::"");
        if (containsCompressedZeroes && (inet6Address.indexOf(""::"") != inet6Address.lastIndexOf(""::""))) {
            return false;
        }
        if ((inet6Address.startsWith("":"") && !inet6Address.startsWith(""::""))
                || (inet6Address.endsWith("":"") && !inet6Address.endsWith(""::""))) {
            return false;
        }
        String[] octets = inet6Address.split("":"");
        if (containsCompressedZeroes) {
            List<String> octetList = new ArrayList<String>(Arrays.asList(octets));
            if (inet6Address.endsWith(""::"")) {
                // String.split() drops ending empty segments
                octetList.add("""");
            } else if (inet6Address.startsWith(""::"") && !octetList.isEmpty()) {
                octetList.remove(0);
            }
            octets = octetList.toArray(new String[octetList.size()]);
        }
        if (octets.length > IPV6_MAX_HEX_GROUPS) {
            return false;
        }
        int validOctets = 0;
        int emptyOctets = 0; // consecutive empty chunks
        for (int index = 0; index < octets.length; index++) {
            String octet = octets[index];
            if (octet.length() == 0) {
                emptyOctets++;
                if (emptyOctets > 1) {
                    return false;
                }
            } else {
                emptyOctets = 0;
                // Is last chunk an IPv4 address?
                if (index == octets.length - 1 && octet.contains(""."")) {
                    if (!isValidInet4Address(octet)) {
                        return false;
                    }
                    validOctets += 2;
                    continue;
                }
                if (octet.length() > IPV6_MAX_HEX_DIGITS_PER_GROUP) {
                    return false;
                }
                int octetInt = 0;
                try {
                    octetInt = Integer.parseInt(octet, BASE_16);
                } catch (NumberFormatException e) {
                    return false;
                }
                if (octetInt < 0 || octetInt > MAX_UNSIGNED_SHORT) {
                    return false;
                }
            }
            validOctets++;
        }
        if (validOctets > IPV6_MAX_HEX_GROUPS || (validOctets < IPV6_MAX_HEX_GROUPS && !containsCompressedZeroes)) {
            return false;
        }
        return true;
    }","  public void test3()  throws Throwable  {
      InetAddressValidator inetAddressValidator0 = new InetAddressValidator();
      boolean boolean0 = inetAddressValidator0.isValidInet6Address(""-e"");
}"
1251,"    public boolean isValidInet6Address(String inet6Address) {
        String[] parts;
        // remove prefix size. This will appear after the zone id (if any)
        parts = inet6Address.split(""/"", -1);
        if (parts.length > 2) {
            return false; // can only have one prefix specifier
        }
        if (parts.length == 2) {
            if (parts[1].matches(""\\d{1,3}"")) { // Need to eliminate signs
                int bits = Integer.parseInt(parts[1]); // cannot fail because of RE check
                if (bits < 0 || bits > 128) {
                    return false; // out of range
                }
            } else {
                return false; // not a valid number
            }
        }
        // remove zone-id
        parts = parts[0].split(""%"", -1);
        if (parts.length > 2) {
            return false;
        } else if (parts.length == 2){
            // The id syntax is implemenatation independent, but it presumably cannot allow:
            // whitespace, '/' or '%'
            if (!parts[1].matches(""[^\\s/%]+"")) {
                return false; // invalid id
            }
        }
        inet6Address = parts[0];
        boolean containsCompressedZeroes = inet6Address.contains(""::"");
        if (containsCompressedZeroes && (inet6Address.indexOf(""::"") != inet6Address.lastIndexOf(""::""))) {
            return false;
        }
        if ((inet6Address.startsWith("":"") && !inet6Address.startsWith(""::""))
                || (inet6Address.endsWith("":"") && !inet6Address.endsWith(""::""))) {
            return false;
        }
        String[] octets = inet6Address.split("":"");
        if (containsCompressedZeroes) {
            List<String> octetList = new ArrayList<String>(Arrays.asList(octets));
            if (inet6Address.endsWith(""::"")) {
                // String.split() drops ending empty segments
                octetList.add("""");
            } else if (inet6Address.startsWith(""::"") && !octetList.isEmpty()) {
                octetList.remove(0);
            }
            octets = octetList.toArray(new String[octetList.size()]);
        }
        if (octets.length > IPV6_MAX_HEX_GROUPS) {
            return false;
        }
        int validOctets = 0;
        int emptyOctets = 0; // consecutive empty chunks
        for (int index = 0; index < octets.length; index++) {
            String octet = octets[index];
            if (octet.length() == 0) {
                emptyOctets++;
                if (emptyOctets > 1) {
                    return false;
                }
            } else {
                emptyOctets = 0;
                // Is last chunk an IPv4 address?
                if (index == octets.length - 1 && octet.contains(""."")) {
                    if (!isValidInet4Address(octet)) {
                        return false;
                    }
                    validOctets += 2;
                    continue;
                }
                if (octet.length() > IPV6_MAX_HEX_DIGITS_PER_GROUP) {
                    return false;
                }
                int octetInt = 0;
                try {
                    octetInt = Integer.parseInt(octet, BASE_16);
                } catch (NumberFormatException e) {
                    return false;
                }
                if (octetInt < 0 || octetInt > MAX_UNSIGNED_SHORT) {
                    return false;
                }
            }
            validOctets++;
        }
        if (validOctets > IPV6_MAX_HEX_GROUPS || (validOctets < IPV6_MAX_HEX_GROUPS && !containsCompressedZeroes)) {
            return false;
        }
        return true;
    }","  public void test4()  throws Throwable  {
      InetAddressValidator inetAddressValidator0 = InetAddressValidator.getInstance();
      boolean boolean0 = inetAddressValidator0.isValidInet6Address(""^(d{1,3}).(d{1,3}).(d{1,3}).(d{1,3})$"");
}"
1252,"    public boolean isValidInet6Address(String inet6Address) {
        String[] parts;
        // remove prefix size. This will appear after the zone id (if any)
        parts = inet6Address.split(""/"", -1);
        if (parts.length > 2) {
            return false; // can only have one prefix specifier
        }
        if (parts.length == 2) {
            if (parts[1].matches(""\\d{1,3}"")) { // Need to eliminate signs
                int bits = Integer.parseInt(parts[1]); // cannot fail because of RE check
                if (bits < 0 || bits > 128) {
                    return false; // out of range
                }
            } else {
                return false; // not a valid number
            }
        }
        // remove zone-id
        parts = parts[0].split(""%"", -1);
        if (parts.length > 2) {
            return false;
        } else if (parts.length == 2){
            // The id syntax is implemenatation independent, but it presumably cannot allow:
            // whitespace, '/' or '%'
            if (!parts[1].matches(""[^\\s/%]+"")) {
                return false; // invalid id
            }
        }
        inet6Address = parts[0];
        boolean containsCompressedZeroes = inet6Address.contains(""::"");
        if (containsCompressedZeroes && (inet6Address.indexOf(""::"") != inet6Address.lastIndexOf(""::""))) {
            return false;
        }
        if ((inet6Address.startsWith("":"") && !inet6Address.startsWith(""::""))
                || (inet6Address.endsWith("":"") && !inet6Address.endsWith(""::""))) {
            return false;
        }
        String[] octets = inet6Address.split("":"");
        if (containsCompressedZeroes) {
            List<String> octetList = new ArrayList<String>(Arrays.asList(octets));
            if (inet6Address.endsWith(""::"")) {
                // String.split() drops ending empty segments
                octetList.add("""");
            } else if (inet6Address.startsWith(""::"") && !octetList.isEmpty()) {
                octetList.remove(0);
            }
            octets = octetList.toArray(new String[octetList.size()]);
        }
        if (octets.length > IPV6_MAX_HEX_GROUPS) {
            return false;
        }
        int validOctets = 0;
        int emptyOctets = 0; // consecutive empty chunks
        for (int index = 0; index < octets.length; index++) {
            String octet = octets[index];
            if (octet.length() == 0) {
                emptyOctets++;
                if (emptyOctets > 1) {
                    return false;
                }
            } else {
                emptyOctets = 0;
                // Is last chunk an IPv4 address?
                if (index == octets.length - 1 && octet.contains(""."")) {
                    if (!isValidInet4Address(octet)) {
                        return false;
                    }
                    validOctets += 2;
                    continue;
                }
                if (octet.length() > IPV6_MAX_HEX_DIGITS_PER_GROUP) {
                    return false;
                }
                int octetInt = 0;
                try {
                    octetInt = Integer.parseInt(octet, BASE_16);
                } catch (NumberFormatException e) {
                    return false;
                }
                if (octetInt < 0 || octetInt > MAX_UNSIGNED_SHORT) {
                    return false;
                }
            }
            validOctets++;
        }
        if (validOctets > IPV6_MAX_HEX_GROUPS || (validOctets < IPV6_MAX_HEX_GROUPS && !containsCompressedZeroes)) {
            return false;
        }
        return true;
    }","  public void test5()  throws Throwable  {
      InetAddressValidator inetAddressValidator0 = new InetAddressValidator();
      boolean boolean0 = inetAddressValidator0.isValidInet6Address(""b::PGIU\""$7fF5lJ^~"");
}"
1253,"    public boolean isValidInet6Address(String inet6Address) {
        String[] parts;
        // remove prefix size. This will appear after the zone id (if any)
        parts = inet6Address.split(""/"", -1);
        if (parts.length > 2) {
            return false; // can only have one prefix specifier
        }
        if (parts.length == 2) {
            if (parts[1].matches(""\\d{1,3}"")) { // Need to eliminate signs
                int bits = Integer.parseInt(parts[1]); // cannot fail because of RE check
                if (bits < 0 || bits > 128) {
                    return false; // out of range
                }
            } else {
                return false; // not a valid number
            }
        }
        // remove zone-id
        parts = parts[0].split(""%"", -1);
        if (parts.length > 2) {
            return false;
        } else if (parts.length == 2){
            // The id syntax is implemenatation independent, but it presumably cannot allow:
            // whitespace, '/' or '%'
            if (!parts[1].matches(""[^\\s/%]+"")) {
                return false; // invalid id
            }
        }
        inet6Address = parts[0];
        boolean containsCompressedZeroes = inet6Address.contains(""::"");
        if (containsCompressedZeroes && (inet6Address.indexOf(""::"") != inet6Address.lastIndexOf(""::""))) {
            return false;
        }
        if ((inet6Address.startsWith("":"") && !inet6Address.startsWith(""::""))
                || (inet6Address.endsWith("":"") && !inet6Address.endsWith(""::""))) {
            return false;
        }
        String[] octets = inet6Address.split("":"");
        if (containsCompressedZeroes) {
            List<String> octetList = new ArrayList<String>(Arrays.asList(octets));
            if (inet6Address.endsWith(""::"")) {
                // String.split() drops ending empty segments
                octetList.add("""");
            } else if (inet6Address.startsWith(""::"") && !octetList.isEmpty()) {
                octetList.remove(0);
            }
            octets = octetList.toArray(new String[octetList.size()]);
        }
        if (octets.length > IPV6_MAX_HEX_GROUPS) {
            return false;
        }
        int validOctets = 0;
        int emptyOctets = 0; // consecutive empty chunks
        for (int index = 0; index < octets.length; index++) {
            String octet = octets[index];
            if (octet.length() == 0) {
                emptyOctets++;
                if (emptyOctets > 1) {
                    return false;
                }
            } else {
                emptyOctets = 0;
                // Is last chunk an IPv4 address?
                if (index == octets.length - 1 && octet.contains(""."")) {
                    if (!isValidInet4Address(octet)) {
                        return false;
                    }
                    validOctets += 2;
                    continue;
                }
                if (octet.length() > IPV6_MAX_HEX_DIGITS_PER_GROUP) {
                    return false;
                }
                int octetInt = 0;
                try {
                    octetInt = Integer.parseInt(octet, BASE_16);
                } catch (NumberFormatException e) {
                    return false;
                }
                if (octetInt < 0 || octetInt > MAX_UNSIGNED_SHORT) {
                    return false;
                }
            }
            validOctets++;
        }
        if (validOctets > IPV6_MAX_HEX_GROUPS || (validOctets < IPV6_MAX_HEX_GROUPS && !containsCompressedZeroes)) {
            return false;
        }
        return true;
    }","  public void test6()  throws Throwable  {
      InetAddressValidator inetAddressValidator0 = InetAddressValidator.getInstance();
      boolean boolean0 = inetAddressValidator0.isValidInet6Address("".:"");
}"
1254,"    public boolean isValidInet6Address(String inet6Address) {
        String[] parts;
        // remove prefix size. This will appear after the zone id (if any)
        parts = inet6Address.split(""/"", -1);
        if (parts.length > 2) {
            return false; // can only have one prefix specifier
        }
        if (parts.length == 2) {
            if (parts[1].matches(""\\d{1,3}"")) { // Need to eliminate signs
                int bits = Integer.parseInt(parts[1]); // cannot fail because of RE check
                if (bits < 0 || bits > 128) {
                    return false; // out of range
                }
            } else {
                return false; // not a valid number
            }
        }
        // remove zone-id
        parts = parts[0].split(""%"", -1);
        if (parts.length > 2) {
            return false;
        } else if (parts.length == 2){
            // The id syntax is implemenatation independent, but it presumably cannot allow:
            // whitespace, '/' or '%'
            if (!parts[1].matches(""[^\\s/%]+"")) {
                return false; // invalid id
            }
        }
        inet6Address = parts[0];
        boolean containsCompressedZeroes = inet6Address.contains(""::"");
        if (containsCompressedZeroes && (inet6Address.indexOf(""::"") != inet6Address.lastIndexOf(""::""))) {
            return false;
        }
        if ((inet6Address.startsWith("":"") && !inet6Address.startsWith(""::""))
                || (inet6Address.endsWith("":"") && !inet6Address.endsWith(""::""))) {
            return false;
        }
        String[] octets = inet6Address.split("":"");
        if (containsCompressedZeroes) {
            List<String> octetList = new ArrayList<String>(Arrays.asList(octets));
            if (inet6Address.endsWith(""::"")) {
                // String.split() drops ending empty segments
                octetList.add("""");
            } else if (inet6Address.startsWith(""::"") && !octetList.isEmpty()) {
                octetList.remove(0);
            }
            octets = octetList.toArray(new String[octetList.size()]);
        }
        if (octets.length > IPV6_MAX_HEX_GROUPS) {
            return false;
        }
        int validOctets = 0;
        int emptyOctets = 0; // consecutive empty chunks
        for (int index = 0; index < octets.length; index++) {
            String octet = octets[index];
            if (octet.length() == 0) {
                emptyOctets++;
                if (emptyOctets > 1) {
                    return false;
                }
            } else {
                emptyOctets = 0;
                // Is last chunk an IPv4 address?
                if (index == octets.length - 1 && octet.contains(""."")) {
                    if (!isValidInet4Address(octet)) {
                        return false;
                    }
                    validOctets += 2;
                    continue;
                }
                if (octet.length() > IPV6_MAX_HEX_DIGITS_PER_GROUP) {
                    return false;
                }
                int octetInt = 0;
                try {
                    octetInt = Integer.parseInt(octet, BASE_16);
                } catch (NumberFormatException e) {
                    return false;
                }
                if (octetInt < 0 || octetInt > MAX_UNSIGNED_SHORT) {
                    return false;
                }
            }
            validOctets++;
        }
        if (validOctets > IPV6_MAX_HEX_GROUPS || (validOctets < IPV6_MAX_HEX_GROUPS && !containsCompressedZeroes)) {
            return false;
        }
        return true;
    }","  public void test7()  throws Throwable  {
      InetAddressValidator inetAddressValidator0 = new InetAddressValidator();
      boolean boolean0 = inetAddressValidator0.isValidInet6Address("":"");
}"
1255,"    public boolean isValidInet6Address(String inet6Address) {
        String[] parts;
        // remove prefix size. This will appear after the zone id (if any)
        parts = inet6Address.split(""/"", -1);
        if (parts.length > 2) {
            return false; // can only have one prefix specifier
        }
        if (parts.length == 2) {
            if (parts[1].matches(""\\d{1,3}"")) { // Need to eliminate signs
                int bits = Integer.parseInt(parts[1]); // cannot fail because of RE check
                if (bits < 0 || bits > 128) {
                    return false; // out of range
                }
            } else {
                return false; // not a valid number
            }
        }
        // remove zone-id
        parts = parts[0].split(""%"", -1);
        if (parts.length > 2) {
            return false;
        } else if (parts.length == 2){
            // The id syntax is implemenatation independent, but it presumably cannot allow:
            // whitespace, '/' or '%'
            if (!parts[1].matches(""[^\\s/%]+"")) {
                return false; // invalid id
            }
        }
        inet6Address = parts[0];
        boolean containsCompressedZeroes = inet6Address.contains(""::"");
        if (containsCompressedZeroes && (inet6Address.indexOf(""::"") != inet6Address.lastIndexOf(""::""))) {
            return false;
        }
        if ((inet6Address.startsWith("":"") && !inet6Address.startsWith(""::""))
                || (inet6Address.endsWith("":"") && !inet6Address.endsWith(""::""))) {
            return false;
        }
        String[] octets = inet6Address.split("":"");
        if (containsCompressedZeroes) {
            List<String> octetList = new ArrayList<String>(Arrays.asList(octets));
            if (inet6Address.endsWith(""::"")) {
                // String.split() drops ending empty segments
                octetList.add("""");
            } else if (inet6Address.startsWith(""::"") && !octetList.isEmpty()) {
                octetList.remove(0);
            }
            octets = octetList.toArray(new String[octetList.size()]);
        }
        if (octets.length > IPV6_MAX_HEX_GROUPS) {
            return false;
        }
        int validOctets = 0;
        int emptyOctets = 0; // consecutive empty chunks
        for (int index = 0; index < octets.length; index++) {
            String octet = octets[index];
            if (octet.length() == 0) {
                emptyOctets++;
                if (emptyOctets > 1) {
                    return false;
                }
            } else {
                emptyOctets = 0;
                // Is last chunk an IPv4 address?
                if (index == octets.length - 1 && octet.contains(""."")) {
                    if (!isValidInet4Address(octet)) {
                        return false;
                    }
                    validOctets += 2;
                    continue;
                }
                if (octet.length() > IPV6_MAX_HEX_DIGITS_PER_GROUP) {
                    return false;
                }
                int octetInt = 0;
                try {
                    octetInt = Integer.parseInt(octet, BASE_16);
                } catch (NumberFormatException e) {
                    return false;
                }
                if (octetInt < 0 || octetInt > MAX_UNSIGNED_SHORT) {
                    return false;
                }
            }
            validOctets++;
        }
        if (validOctets > IPV6_MAX_HEX_GROUPS || (validOctets < IPV6_MAX_HEX_GROUPS && !containsCompressedZeroes)) {
            return false;
        }
        return true;
    }","  public void test8()  throws Throwable  {
      InetAddressValidator inetAddressValidator0 = InetAddressValidator.getInstance();
      boolean boolean0 = inetAddressValidator0.isValidInet6Address(""wc6VIj{%6=]"");
}"
1256,"    public boolean isValidInet6Address(String inet6Address) {
        String[] parts;
        // remove prefix size. This will appear after the zone id (if any)
        parts = inet6Address.split(""/"", -1);
        if (parts.length > 2) {
            return false; // can only have one prefix specifier
        }
        if (parts.length == 2) {
            if (parts[1].matches(""\\d{1,3}"")) { // Need to eliminate signs
                int bits = Integer.parseInt(parts[1]); // cannot fail because of RE check
                if (bits < 0 || bits > 128) {
                    return false; // out of range
                }
            } else {
                return false; // not a valid number
            }
        }
        // remove zone-id
        parts = parts[0].split(""%"", -1);
        if (parts.length > 2) {
            return false;
        } else if (parts.length == 2){
            // The id syntax is implemenatation independent, but it presumably cannot allow:
            // whitespace, '/' or '%'
            if (!parts[1].matches(""[^\\s/%]+"")) {
                return false; // invalid id
            }
        }
        inet6Address = parts[0];
        boolean containsCompressedZeroes = inet6Address.contains(""::"");
        if (containsCompressedZeroes && (inet6Address.indexOf(""::"") != inet6Address.lastIndexOf(""::""))) {
            return false;
        }
        if ((inet6Address.startsWith("":"") && !inet6Address.startsWith(""::""))
                || (inet6Address.endsWith("":"") && !inet6Address.endsWith(""::""))) {
            return false;
        }
        String[] octets = inet6Address.split("":"");
        if (containsCompressedZeroes) {
            List<String> octetList = new ArrayList<String>(Arrays.asList(octets));
            if (inet6Address.endsWith(""::"")) {
                // String.split() drops ending empty segments
                octetList.add("""");
            } else if (inet6Address.startsWith(""::"") && !octetList.isEmpty()) {
                octetList.remove(0);
            }
            octets = octetList.toArray(new String[octetList.size()]);
        }
        if (octets.length > IPV6_MAX_HEX_GROUPS) {
            return false;
        }
        int validOctets = 0;
        int emptyOctets = 0; // consecutive empty chunks
        for (int index = 0; index < octets.length; index++) {
            String octet = octets[index];
            if (octet.length() == 0) {
                emptyOctets++;
                if (emptyOctets > 1) {
                    return false;
                }
            } else {
                emptyOctets = 0;
                // Is last chunk an IPv4 address?
                if (index == octets.length - 1 && octet.contains(""."")) {
                    if (!isValidInet4Address(octet)) {
                        return false;
                    }
                    validOctets += 2;
                    continue;
                }
                if (octet.length() > IPV6_MAX_HEX_DIGITS_PER_GROUP) {
                    return false;
                }
                int octetInt = 0;
                try {
                    octetInt = Integer.parseInt(octet, BASE_16);
                } catch (NumberFormatException e) {
                    return false;
                }
                if (octetInt < 0 || octetInt > MAX_UNSIGNED_SHORT) {
                    return false;
                }
            }
            validOctets++;
        }
        if (validOctets > IPV6_MAX_HEX_GROUPS || (validOctets < IPV6_MAX_HEX_GROUPS && !containsCompressedZeroes)) {
            return false;
        }
        return true;
    }","  public void test9()  throws Throwable  {
      InetAddressValidator inetAddressValidator0 = new InetAddressValidator();
      boolean boolean0 = inetAddressValidator0.isValidInet6Address(""I&./364"");
}"
1257,"    public boolean isValidInet6Address(String inet6Address) {
        String[] parts;
        // remove prefix size. This will appear after the zone id (if any)
        parts = inet6Address.split(""/"", -1);
        if (parts.length > 2) {
            return false; // can only have one prefix specifier
        }
        if (parts.length == 2) {
            if (parts[1].matches(""\\d{1,3}"")) { // Need to eliminate signs
                int bits = Integer.parseInt(parts[1]); // cannot fail because of RE check
                if (bits < 0 || bits > 128) {
                    return false; // out of range
                }
            } else {
                return false; // not a valid number
            }
        }
        // remove zone-id
        parts = parts[0].split(""%"", -1);
        if (parts.length > 2) {
            return false;
        } else if (parts.length == 2){
            // The id syntax is implemenatation independent, but it presumably cannot allow:
            // whitespace, '/' or '%'
            if (!parts[1].matches(""[^\\s/%]+"")) {
                return false; // invalid id
            }
        }
        inet6Address = parts[0];
        boolean containsCompressedZeroes = inet6Address.contains(""::"");
        if (containsCompressedZeroes && (inet6Address.indexOf(""::"") != inet6Address.lastIndexOf(""::""))) {
            return false;
        }
        if ((inet6Address.startsWith("":"") && !inet6Address.startsWith(""::""))
                || (inet6Address.endsWith("":"") && !inet6Address.endsWith(""::""))) {
            return false;
        }
        String[] octets = inet6Address.split("":"");
        if (containsCompressedZeroes) {
            List<String> octetList = new ArrayList<String>(Arrays.asList(octets));
            if (inet6Address.endsWith(""::"")) {
                // String.split() drops ending empty segments
                octetList.add("""");
            } else if (inet6Address.startsWith(""::"") && !octetList.isEmpty()) {
                octetList.remove(0);
            }
            octets = octetList.toArray(new String[octetList.size()]);
        }
        if (octets.length > IPV6_MAX_HEX_GROUPS) {
            return false;
        }
        int validOctets = 0;
        int emptyOctets = 0; // consecutive empty chunks
        for (int index = 0; index < octets.length; index++) {
            String octet = octets[index];
            if (octet.length() == 0) {
                emptyOctets++;
                if (emptyOctets > 1) {
                    return false;
                }
            } else {
                emptyOctets = 0;
                // Is last chunk an IPv4 address?
                if (index == octets.length - 1 && octet.contains(""."")) {
                    if (!isValidInet4Address(octet)) {
                        return false;
                    }
                    validOctets += 2;
                    continue;
                }
                if (octet.length() > IPV6_MAX_HEX_DIGITS_PER_GROUP) {
                    return false;
                }
                int octetInt = 0;
                try {
                    octetInt = Integer.parseInt(octet, BASE_16);
                } catch (NumberFormatException e) {
                    return false;
                }
                if (octetInt < 0 || octetInt > MAX_UNSIGNED_SHORT) {
                    return false;
                }
            }
            validOctets++;
        }
        if (validOctets > IPV6_MAX_HEX_GROUPS || (validOctets < IPV6_MAX_HEX_GROUPS && !containsCompressedZeroes)) {
            return false;
        }
        return true;
    }","  public void test10()  throws Throwable  {
      InetAddressValidator inetAddressValidator0 = new InetAddressValidator();
      boolean boolean0 = inetAddressValidator0.isValidInet6Address(""*oM6|/6"");
}"
1258,"    public boolean isValidInet6Address(String inet6Address) {
        String[] parts;
        // remove prefix size. This will appear after the zone id (if any)
        parts = inet6Address.split(""/"", -1);
        if (parts.length > 2) {
            return false; // can only have one prefix specifier
        }
        if (parts.length == 2) {
            if (parts[1].matches(""\\d{1,3}"")) { // Need to eliminate signs
                int bits = Integer.parseInt(parts[1]); // cannot fail because of RE check
                if (bits < 0 || bits > 128) {
                    return false; // out of range
                }
            } else {
                return false; // not a valid number
            }
        }
        // remove zone-id
        parts = parts[0].split(""%"", -1);
        if (parts.length > 2) {
            return false;
        } else if (parts.length == 2){
            // The id syntax is implemenatation independent, but it presumably cannot allow:
            // whitespace, '/' or '%'
            if (!parts[1].matches(""[^\\s/%]+"")) {
                return false; // invalid id
            }
        }
        inet6Address = parts[0];
        boolean containsCompressedZeroes = inet6Address.contains(""::"");
        if (containsCompressedZeroes && (inet6Address.indexOf(""::"") != inet6Address.lastIndexOf(""::""))) {
            return false;
        }
        if ((inet6Address.startsWith("":"") && !inet6Address.startsWith(""::""))
                || (inet6Address.endsWith("":"") && !inet6Address.endsWith(""::""))) {
            return false;
        }
        String[] octets = inet6Address.split("":"");
        if (containsCompressedZeroes) {
            List<String> octetList = new ArrayList<String>(Arrays.asList(octets));
            if (inet6Address.endsWith(""::"")) {
                // String.split() drops ending empty segments
                octetList.add("""");
            } else if (inet6Address.startsWith(""::"") && !octetList.isEmpty()) {
                octetList.remove(0);
            }
            octets = octetList.toArray(new String[octetList.size()]);
        }
        if (octets.length > IPV6_MAX_HEX_GROUPS) {
            return false;
        }
        int validOctets = 0;
        int emptyOctets = 0; // consecutive empty chunks
        for (int index = 0; index < octets.length; index++) {
            String octet = octets[index];
            if (octet.length() == 0) {
                emptyOctets++;
                if (emptyOctets > 1) {
                    return false;
                }
            } else {
                emptyOctets = 0;
                // Is last chunk an IPv4 address?
                if (index == octets.length - 1 && octet.contains(""."")) {
                    if (!isValidInet4Address(octet)) {
                        return false;
                    }
                    validOctets += 2;
                    continue;
                }
                if (octet.length() > IPV6_MAX_HEX_DIGITS_PER_GROUP) {
                    return false;
                }
                int octetInt = 0;
                try {
                    octetInt = Integer.parseInt(octet, BASE_16);
                } catch (NumberFormatException e) {
                    return false;
                }
                if (octetInt < 0 || octetInt > MAX_UNSIGNED_SHORT) {
                    return false;
                }
            }
            validOctets++;
        }
        if (validOctets > IPV6_MAX_HEX_GROUPS || (validOctets < IPV6_MAX_HEX_GROUPS && !containsCompressedZeroes)) {
            return false;
        }
        return true;
    }","  public void test11()  throws Throwable  {
      InetAddressValidator inetAddressValidator0 = new InetAddressValidator();
      boolean boolean0 = inetAddressValidator0.isValidInet6Address(""sy</}"");
}"
1259,"    public boolean isValidInet6Address(String inet6Address) {
        String[] parts;
        // remove prefix size. This will appear after the zone id (if any)
        parts = inet6Address.split(""/"", -1);
        if (parts.length > 2) {
            return false; // can only have one prefix specifier
        }
        if (parts.length == 2) {
            if (parts[1].matches(""\\d{1,3}"")) { // Need to eliminate signs
                int bits = Integer.parseInt(parts[1]); // cannot fail because of RE check
                if (bits < 0 || bits > 128) {
                    return false; // out of range
                }
            } else {
                return false; // not a valid number
            }
        }
        // remove zone-id
        parts = parts[0].split(""%"", -1);
        if (parts.length > 2) {
            return false;
        } else if (parts.length == 2){
            // The id syntax is implemenatation independent, but it presumably cannot allow:
            // whitespace, '/' or '%'
            if (!parts[1].matches(""[^\\s/%]+"")) {
                return false; // invalid id
            }
        }
        inet6Address = parts[0];
        boolean containsCompressedZeroes = inet6Address.contains(""::"");
        if (containsCompressedZeroes && (inet6Address.indexOf(""::"") != inet6Address.lastIndexOf(""::""))) {
            return false;
        }
        if ((inet6Address.startsWith("":"") && !inet6Address.startsWith(""::""))
                || (inet6Address.endsWith("":"") && !inet6Address.endsWith(""::""))) {
            return false;
        }
        String[] octets = inet6Address.split("":"");
        if (containsCompressedZeroes) {
            List<String> octetList = new ArrayList<String>(Arrays.asList(octets));
            if (inet6Address.endsWith(""::"")) {
                // String.split() drops ending empty segments
                octetList.add("""");
            } else if (inet6Address.startsWith(""::"") && !octetList.isEmpty()) {
                octetList.remove(0);
            }
            octets = octetList.toArray(new String[octetList.size()]);
        }
        if (octets.length > IPV6_MAX_HEX_GROUPS) {
            return false;
        }
        int validOctets = 0;
        int emptyOctets = 0; // consecutive empty chunks
        for (int index = 0; index < octets.length; index++) {
            String octet = octets[index];
            if (octet.length() == 0) {
                emptyOctets++;
                if (emptyOctets > 1) {
                    return false;
                }
            } else {
                emptyOctets = 0;
                // Is last chunk an IPv4 address?
                if (index == octets.length - 1 && octet.contains(""."")) {
                    if (!isValidInet4Address(octet)) {
                        return false;
                    }
                    validOctets += 2;
                    continue;
                }
                if (octet.length() > IPV6_MAX_HEX_DIGITS_PER_GROUP) {
                    return false;
                }
                int octetInt = 0;
                try {
                    octetInt = Integer.parseInt(octet, BASE_16);
                } catch (NumberFormatException e) {
                    return false;
                }
                if (octetInt < 0 || octetInt > MAX_UNSIGNED_SHORT) {
                    return false;
                }
            }
            validOctets++;
        }
        if (validOctets > IPV6_MAX_HEX_GROUPS || (validOctets < IPV6_MAX_HEX_GROUPS && !containsCompressedZeroes)) {
            return false;
        }
        return true;
    }","  public void test12()  throws Throwable  {
      InetAddressValidator inetAddressValidator0 = new InetAddressValidator();
      boolean boolean0 = inetAddressValidator0.isValidInet6Address(""Guc</`q3/!|+j?+X6v"");
}"
1260,"    public boolean isValidInet4Address(String inet4Address) {
        // verify that address conforms to generic IPv4 format
        String[] groups = ipv4Validator.match(inet4Address);

        if (groups == null) {
            return false;
        }

        // verify that address subgroups are legal
        for (String ipSegment : groups) {
            if (ipSegment == null || ipSegment.length() == 0) {
                return false;
            }

            int iIpSegment = 0;

            try {
                iIpSegment = Integer.parseInt(ipSegment);
            } catch(NumberFormatException e) {
                return false;
            }

            if (iIpSegment > IPV4_MAX_OCTET_VALUE) {
                return false;
            }

            if (ipSegment.length() > 1 && ipSegment.startsWith(""0"")) {
                return false;
            }

        }

        return true;
    }","  public void test13()  throws Throwable  {
      InetAddressValidator inetAddressValidator0 = new InetAddressValidator();
      boolean boolean0 = inetAddressValidator0.isValidInet4Address("""");
}"
1261,"    public boolean isValidInet6Address(String inet6Address) {
        String[] parts;
        // remove prefix size. This will appear after the zone id (if any)
        parts = inet6Address.split(""/"", -1);
        if (parts.length > 2) {
            return false; // can only have one prefix specifier
        }
        if (parts.length == 2) {
            if (parts[1].matches(""\\d{1,3}"")) { // Need to eliminate signs
                int bits = Integer.parseInt(parts[1]); // cannot fail because of RE check
                if (bits < 0 || bits > 128) {
                    return false; // out of range
                }
            } else {
                return false; // not a valid number
            }
        }
        // remove zone-id
        parts = parts[0].split(""%"", -1);
        if (parts.length > 2) {
            return false;
        } else if (parts.length == 2){
            // The id syntax is implemenatation independent, but it presumably cannot allow:
            // whitespace, '/' or '%'
            if (!parts[1].matches(""[^\\s/%]+"")) {
                return false; // invalid id
            }
        }
        inet6Address = parts[0];
        boolean containsCompressedZeroes = inet6Address.contains(""::"");
        if (containsCompressedZeroes && (inet6Address.indexOf(""::"") != inet6Address.lastIndexOf(""::""))) {
            return false;
        }
        if ((inet6Address.startsWith("":"") && !inet6Address.startsWith(""::""))
                || (inet6Address.endsWith("":"") && !inet6Address.endsWith(""::""))) {
            return false;
        }
        String[] octets = inet6Address.split("":"");
        if (containsCompressedZeroes) {
            List<String> octetList = new ArrayList<String>(Arrays.asList(octets));
            if (inet6Address.endsWith(""::"")) {
                // String.split() drops ending empty segments
                octetList.add("""");
            } else if (inet6Address.startsWith(""::"") && !octetList.isEmpty()) {
                octetList.remove(0);
            }
            octets = octetList.toArray(new String[octetList.size()]);
        }
        if (octets.length > IPV6_MAX_HEX_GROUPS) {
            return false;
        }
        int validOctets = 0;
        int emptyOctets = 0; // consecutive empty chunks
        for (int index = 0; index < octets.length; index++) {
            String octet = octets[index];
            if (octet.length() == 0) {
                emptyOctets++;
                if (emptyOctets > 1) {
                    return false;
                }
            } else {
                emptyOctets = 0;
                // Is last chunk an IPv4 address?
                if (index == octets.length - 1 && octet.contains(""."")) {
                    if (!isValidInet4Address(octet)) {
                        return false;
                    }
                    validOctets += 2;
                    continue;
                }
                if (octet.length() > IPV6_MAX_HEX_DIGITS_PER_GROUP) {
                    return false;
                }
                int octetInt = 0;
                try {
                    octetInt = Integer.parseInt(octet, BASE_16);
                } catch (NumberFormatException e) {
                    return false;
                }
                if (octetInt < 0 || octetInt > MAX_UNSIGNED_SHORT) {
                    return false;
                }
            }
            validOctets++;
        }
        if (validOctets > IPV6_MAX_HEX_GROUPS || (validOctets < IPV6_MAX_HEX_GROUPS && !containsCompressedZeroes)) {
            return false;
        }
        return true;
    }","  public void test14()  throws Throwable  {
      InetAddressValidator inetAddressValidator0 = new InetAddressValidator();
      boolean boolean0 = inetAddressValidator0.isValidInet6Address("""");
}"
1262,"    public boolean isValidInet6Address(String inet6Address) {
        String[] parts;
        // remove prefix size. This will appear after the zone id (if any)
        parts = inet6Address.split(""/"", -1);
        if (parts.length > 2) {
            return false; // can only have one prefix specifier
        }
        if (parts.length == 2) {
            if (parts[1].matches(""\\d{1,3}"")) { // Need to eliminate signs
                int bits = Integer.parseInt(parts[1]); // cannot fail because of RE check
                if (bits < 0 || bits > 128) {
                    return false; // out of range
                }
            } else {
                return false; // not a valid number
            }
        }
        // remove zone-id
        parts = parts[0].split(""%"", -1);
        if (parts.length > 2) {
            return false;
        } else if (parts.length == 2){
            // The id syntax is implemenatation independent, but it presumably cannot allow:
            // whitespace, '/' or '%'
            if (!parts[1].matches(""[^\\s/%]+"")) {
                return false; // invalid id
            }
        }
        inet6Address = parts[0];
        boolean containsCompressedZeroes = inet6Address.contains(""::"");
        if (containsCompressedZeroes && (inet6Address.indexOf(""::"") != inet6Address.lastIndexOf(""::""))) {
            return false;
        }
        if ((inet6Address.startsWith("":"") && !inet6Address.startsWith(""::""))
                || (inet6Address.endsWith("":"") && !inet6Address.endsWith(""::""))) {
            return false;
        }
        String[] octets = inet6Address.split("":"");
        if (containsCompressedZeroes) {
            List<String> octetList = new ArrayList<String>(Arrays.asList(octets));
            if (inet6Address.endsWith(""::"")) {
                // String.split() drops ending empty segments
                octetList.add("""");
            } else if (inet6Address.startsWith(""::"") && !octetList.isEmpty()) {
                octetList.remove(0);
            }
            octets = octetList.toArray(new String[octetList.size()]);
        }
        if (octets.length > IPV6_MAX_HEX_GROUPS) {
            return false;
        }
        int validOctets = 0;
        int emptyOctets = 0; // consecutive empty chunks
        for (int index = 0; index < octets.length; index++) {
            String octet = octets[index];
            if (octet.length() == 0) {
                emptyOctets++;
                if (emptyOctets > 1) {
                    return false;
                }
            } else {
                emptyOctets = 0;
                // Is last chunk an IPv4 address?
                if (index == octets.length - 1 && octet.contains(""."")) {
                    if (!isValidInet4Address(octet)) {
                        return false;
                    }
                    validOctets += 2;
                    continue;
                }
                if (octet.length() > IPV6_MAX_HEX_DIGITS_PER_GROUP) {
                    return false;
                }
                int octetInt = 0;
                try {
                    octetInt = Integer.parseInt(octet, BASE_16);
                } catch (NumberFormatException e) {
                    return false;
                }
                if (octetInt < 0 || octetInt > MAX_UNSIGNED_SHORT) {
                    return false;
                }
            }
            validOctets++;
        }
        if (validOctets > IPV6_MAX_HEX_GROUPS || (validOctets < IPV6_MAX_HEX_GROUPS && !containsCompressedZeroes)) {
            return false;
        }
        return true;
    }","  public void test15()  throws Throwable  {
      InetAddressValidator inetAddressValidator0 = InetAddressValidator.getInstance();
      boolean boolean0 = inetAddressValidator0.isValidInet6Address(""::"");
}"
1263,"    public boolean isValidInet6Address(String inet6Address) {
        String[] parts;
        // remove prefix size. This will appear after the zone id (if any)
        parts = inet6Address.split(""/"", -1);
        if (parts.length > 2) {
            return false; // can only have one prefix specifier
        }
        if (parts.length == 2) {
            if (parts[1].matches(""\\d{1,3}"")) { // Need to eliminate signs
                int bits = Integer.parseInt(parts[1]); // cannot fail because of RE check
                if (bits < 0 || bits > 128) {
                    return false; // out of range
                }
            } else {
                return false; // not a valid number
            }
        }
        // remove zone-id
        parts = parts[0].split(""%"", -1);
        if (parts.length > 2) {
            return false;
        } else if (parts.length == 2){
            // The id syntax is implemenatation independent, but it presumably cannot allow:
            // whitespace, '/' or '%'
            if (!parts[1].matches(""[^\\s/%]+"")) {
                return false; // invalid id
            }
        }
        inet6Address = parts[0];
        boolean containsCompressedZeroes = inet6Address.contains(""::"");
        if (containsCompressedZeroes && (inet6Address.indexOf(""::"") != inet6Address.lastIndexOf(""::""))) {
            return false;
        }
        if ((inet6Address.startsWith("":"") && !inet6Address.startsWith(""::""))
                || (inet6Address.endsWith("":"") && !inet6Address.endsWith(""::""))) {
            return false;
        }
        String[] octets = inet6Address.split("":"");
        if (containsCompressedZeroes) {
            List<String> octetList = new ArrayList<String>(Arrays.asList(octets));
            if (inet6Address.endsWith(""::"")) {
                // String.split() drops ending empty segments
                octetList.add("""");
            } else if (inet6Address.startsWith(""::"") && !octetList.isEmpty()) {
                octetList.remove(0);
            }
            octets = octetList.toArray(new String[octetList.size()]);
        }
        if (octets.length > IPV6_MAX_HEX_GROUPS) {
            return false;
        }
        int validOctets = 0;
        int emptyOctets = 0; // consecutive empty chunks
        for (int index = 0; index < octets.length; index++) {
            String octet = octets[index];
            if (octet.length() == 0) {
                emptyOctets++;
                if (emptyOctets > 1) {
                    return false;
                }
            } else {
                emptyOctets = 0;
                // Is last chunk an IPv4 address?
                if (index == octets.length - 1 && octet.contains(""."")) {
                    if (!isValidInet4Address(octet)) {
                        return false;
                    }
                    validOctets += 2;
                    continue;
                }
                if (octet.length() > IPV6_MAX_HEX_DIGITS_PER_GROUP) {
                    return false;
                }
                int octetInt = 0;
                try {
                    octetInt = Integer.parseInt(octet, BASE_16);
                } catch (NumberFormatException e) {
                    return false;
                }
                if (octetInt < 0 || octetInt > MAX_UNSIGNED_SHORT) {
                    return false;
                }
            }
            validOctets++;
        }
        if (validOctets > IPV6_MAX_HEX_GROUPS || (validOctets < IPV6_MAX_HEX_GROUPS && !containsCompressedZeroes)) {
            return false;
        }
        return true;
    }","  public void test16()  throws Throwable  {
      InetAddressValidator inetAddressValidator0 = new InetAddressValidator();
      boolean boolean0 = inetAddressValidator0.isValidInet6Address(""::5"");
}"
1264,"    public boolean isValidInet6Address(String inet6Address) {
        String[] parts;
        // remove prefix size. This will appear after the zone id (if any)
        parts = inet6Address.split(""/"", -1);
        if (parts.length > 2) {
            return false; // can only have one prefix specifier
        }
        if (parts.length == 2) {
            if (parts[1].matches(""\\d{1,3}"")) { // Need to eliminate signs
                int bits = Integer.parseInt(parts[1]); // cannot fail because of RE check
                if (bits < 0 || bits > 128) {
                    return false; // out of range
                }
            } else {
                return false; // not a valid number
            }
        }
        // remove zone-id
        parts = parts[0].split(""%"", -1);
        if (parts.length > 2) {
            return false;
        } else if (parts.length == 2){
            // The id syntax is implemenatation independent, but it presumably cannot allow:
            // whitespace, '/' or '%'
            if (!parts[1].matches(""[^\\s/%]+"")) {
                return false; // invalid id
            }
        }
        inet6Address = parts[0];
        boolean containsCompressedZeroes = inet6Address.contains(""::"");
        if (containsCompressedZeroes && (inet6Address.indexOf(""::"") != inet6Address.lastIndexOf(""::""))) {
            return false;
        }
        if ((inet6Address.startsWith("":"") && !inet6Address.startsWith(""::""))
                || (inet6Address.endsWith("":"") && !inet6Address.endsWith(""::""))) {
            return false;
        }
        String[] octets = inet6Address.split("":"");
        if (containsCompressedZeroes) {
            List<String> octetList = new ArrayList<String>(Arrays.asList(octets));
            if (inet6Address.endsWith(""::"")) {
                // String.split() drops ending empty segments
                octetList.add("""");
            } else if (inet6Address.startsWith(""::"") && !octetList.isEmpty()) {
                octetList.remove(0);
            }
            octets = octetList.toArray(new String[octetList.size()]);
        }
        if (octets.length > IPV6_MAX_HEX_GROUPS) {
            return false;
        }
        int validOctets = 0;
        int emptyOctets = 0; // consecutive empty chunks
        for (int index = 0; index < octets.length; index++) {
            String octet = octets[index];
            if (octet.length() == 0) {
                emptyOctets++;
                if (emptyOctets > 1) {
                    return false;
                }
            } else {
                emptyOctets = 0;
                // Is last chunk an IPv4 address?
                if (index == octets.length - 1 && octet.contains(""."")) {
                    if (!isValidInet4Address(octet)) {
                        return false;
                    }
                    validOctets += 2;
                    continue;
                }
                if (octet.length() > IPV6_MAX_HEX_DIGITS_PER_GROUP) {
                    return false;
                }
                int octetInt = 0;
                try {
                    octetInt = Integer.parseInt(octet, BASE_16);
                } catch (NumberFormatException e) {
                    return false;
                }
                if (octetInt < 0 || octetInt > MAX_UNSIGNED_SHORT) {
                    return false;
                }
            }
            validOctets++;
        }
        if (validOctets > IPV6_MAX_HEX_GROUPS || (validOctets < IPV6_MAX_HEX_GROUPS && !containsCompressedZeroes)) {
            return false;
        }
        return true;
    }","  public void test17()  throws Throwable  {
      InetAddressValidator inetAddressValidator0 = new InetAddressValidator();
      boolean boolean0 = inetAddressValidator0.isValidInet6Address("":::;KxS"");
}"
1265,"    public boolean isValidInet6Address(String inet6Address) {
        String[] parts;
        // remove prefix size. This will appear after the zone id (if any)
        parts = inet6Address.split(""/"", -1);
        if (parts.length > 2) {
            return false; // can only have one prefix specifier
        }
        if (parts.length == 2) {
            if (parts[1].matches(""\\d{1,3}"")) { // Need to eliminate signs
                int bits = Integer.parseInt(parts[1]); // cannot fail because of RE check
                if (bits < 0 || bits > 128) {
                    return false; // out of range
                }
            } else {
                return false; // not a valid number
            }
        }
        // remove zone-id
        parts = parts[0].split(""%"", -1);
        if (parts.length > 2) {
            return false;
        } else if (parts.length == 2){
            // The id syntax is implemenatation independent, but it presumably cannot allow:
            // whitespace, '/' or '%'
            if (!parts[1].matches(""[^\\s/%]+"")) {
                return false; // invalid id
            }
        }
        inet6Address = parts[0];
        boolean containsCompressedZeroes = inet6Address.contains(""::"");
        if (containsCompressedZeroes && (inet6Address.indexOf(""::"") != inet6Address.lastIndexOf(""::""))) {
            return false;
        }
        if ((inet6Address.startsWith("":"") && !inet6Address.startsWith(""::""))
                || (inet6Address.endsWith("":"") && !inet6Address.endsWith(""::""))) {
            return false;
        }
        String[] octets = inet6Address.split("":"");
        if (containsCompressedZeroes) {
            List<String> octetList = new ArrayList<String>(Arrays.asList(octets));
            if (inet6Address.endsWith(""::"")) {
                // String.split() drops ending empty segments
                octetList.add("""");
            } else if (inet6Address.startsWith(""::"") && !octetList.isEmpty()) {
                octetList.remove(0);
            }
            octets = octetList.toArray(new String[octetList.size()]);
        }
        if (octets.length > IPV6_MAX_HEX_GROUPS) {
            return false;
        }
        int validOctets = 0;
        int emptyOctets = 0; // consecutive empty chunks
        for (int index = 0; index < octets.length; index++) {
            String octet = octets[index];
            if (octet.length() == 0) {
                emptyOctets++;
                if (emptyOctets > 1) {
                    return false;
                }
            } else {
                emptyOctets = 0;
                // Is last chunk an IPv4 address?
                if (index == octets.length - 1 && octet.contains(""."")) {
                    if (!isValidInet4Address(octet)) {
                        return false;
                    }
                    validOctets += 2;
                    continue;
                }
                if (octet.length() > IPV6_MAX_HEX_DIGITS_PER_GROUP) {
                    return false;
                }
                int octetInt = 0;
                try {
                    octetInt = Integer.parseInt(octet, BASE_16);
                } catch (NumberFormatException e) {
                    return false;
                }
                if (octetInt < 0 || octetInt > MAX_UNSIGNED_SHORT) {
                    return false;
                }
            }
            validOctets++;
        }
        if (validOctets > IPV6_MAX_HEX_GROUPS || (validOctets < IPV6_MAX_HEX_GROUPS && !containsCompressedZeroes)) {
            return false;
        }
        return true;
    }","  public void test18()  throws Throwable  {
      InetAddressValidator inetAddressValidator0 = new InetAddressValidator();
      boolean boolean0 = inetAddressValidator0.isValidInet6Address(""~%KGE;H[#}vvpP-%"");
}"
1266,"    public boolean isValid(String inetAddress) {
        return isValidInet4Address(inetAddress) || isValidInet6Address(inetAddress);
    }","  public void test19()  throws Throwable  {
      InetAddressValidator inetAddressValidator0 = new InetAddressValidator();
      boolean boolean0 = inetAddressValidator0.isValid(""O'xES/0"");
}"
1267,"    public boolean isValid(String inetAddress) {
        return isValidInet4Address(inetAddress) || isValidInet6Address(inetAddress);
    }","  public void test20()  throws Throwable  {
      InetAddressValidator inetAddressValidator0 = new InetAddressValidator();
      boolean boolean0 = inetAddressValidator0.isValid(""d::5"");
}"
1268,"    public int getMaxLength() {
        return maxLength;
    }","  public void test0()  throws Throwable  {
      ISBNCheckDigit iSBNCheckDigit0 = (ISBNCheckDigit)ISBNCheckDigit.ISBN_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator(""org.apache.commons.validator.routines.CodeValidator"", iSBNCheckDigit0);
      Object object0 = codeValidator0.validate(""org.apache.commons.validator.routines.CodeValidator"");
}"
1269,"    public Object validate(String input) {

        if (input == null) {
            return null;
        }

        String code = input.trim();
        if (code.length() == 0) {
            return null;
        }

        // validate/reformat using regular expression
        if (regexValidator != null) {
            code = regexValidator.validate(code);
            if (code == null) {
                return null;
            }
        }

        // check the length (must be done after validate as that can change the code)
        if ((minLength >= 0 && code.length() < minLength) ||
            (maxLength >= 0 && code.length() > maxLength)) {
            return null;
        }

        // validate the check digit
        if (checkdigit != null && !checkdigit.isValid(code)) {
            return null;
        }

        return code;

    }","  public void test1()  throws Throwable  {
      ISBNCheckDigit iSBNCheckDigit0 = (ISBNCheckDigit)ISBNCheckDigit.ISBN_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator(""org.apache.commons.validator.routines.CodeValidator"", iSBNCheckDigit0);
      Object object0 = codeValidator0.validate(""org.apache.commons.validator.routines.CodeValidator"");
}"
1270,"    public int getMinLength() {
        return minLength;
    }","  public void test2()  throws Throwable  {
      ISBNCheckDigit iSBNCheckDigit0 = (ISBNCheckDigit)ISBNCheckDigit.ISBN_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator(""org.apache.commons.validator.routines.CodeValidator"", iSBNCheckDigit0);
      Object object0 = codeValidator0.validate(""org.apache.commons.validator.routines.CodeValidator"");
}"
1271,"    public boolean isValid(String input) {
        return (validate(input) != null);
    }","  public void test3()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(""org.apache.commons.validator.routines.checkdigit.ISBNCheckDigit"");
      ABANumberCheckDigit aBANumberCheckDigit0 = new ABANumberCheckDigit();
      CodeValidator codeValidator0 = new CodeValidator(regexValidator0, aBANumberCheckDigit0);
      boolean boolean0 = codeValidator0.isValid(""' out of range 0 to "");
}"
1272,"    public int getMaxLength() {
        return maxLength;
    }","  public void test4()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(""org.apache.commons.validator.routines.checkdigit.ISBNCheckDigit"");
      ABANumberCheckDigit aBANumberCheckDigit0 = new ABANumberCheckDigit();
      CodeValidator codeValidator0 = new CodeValidator(regexValidator0, aBANumberCheckDigit0);
      boolean boolean0 = codeValidator0.isValid(""' out of range 0 to "");
}"
1273,"    public int getMinLength() {
        return minLength;
    }","  public void test5()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(""org.apache.commons.validator.routines.checkdigit.ISBNCheckDigit"");
      ABANumberCheckDigit aBANumberCheckDigit0 = new ABANumberCheckDigit();
      CodeValidator codeValidator0 = new CodeValidator(regexValidator0, aBANumberCheckDigit0);
      boolean boolean0 = codeValidator0.isValid(""' out of range 0 to "");
}"
1274,"    public RegexValidator getRegexValidator() {
        return regexValidator;
    }","  public void test6()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator(""53Lk+a-,}Ir"", (CheckDigit) null);
      RegexValidator regexValidator0 = codeValidator0.getRegexValidator();
}"
1275,"    public int getMaxLength() {
        return maxLength;
    }","  public void test7()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator(""53Lk+a-,}Ir"", (CheckDigit) null);
      RegexValidator regexValidator0 = codeValidator0.getRegexValidator();
}"
1276,"    public int getMinLength() {
        return minLength;
    }","  public void test8()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator(""53Lk+a-,}Ir"", (CheckDigit) null);
      RegexValidator regexValidator0 = codeValidator0.getRegexValidator();
}"
1277,"    public int getMinLength() {
        return minLength;
    }","  public void test9()  throws Throwable  {
      ISBNCheckDigit iSBNCheckDigit0 = new ISBNCheckDigit();
      CodeValidator codeValidator0 = new CodeValidator((String) null, iSBNCheckDigit0);
      int int0 = codeValidator0.getMinLength();
}"
1278,"    public int getMaxLength() {
        return maxLength;
    }","  public void test10()  throws Throwable  {
      ISBNCheckDigit iSBNCheckDigit0 = new ISBNCheckDigit();
      CodeValidator codeValidator0 = new CodeValidator((String) null, iSBNCheckDigit0);
      int int0 = codeValidator0.getMinLength();
}"
1279,"    public int getMaxLength() {
        return maxLength;
    }","  public void test11()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator("""", (CheckDigit) null);
      int int0 = codeValidator0.getMaxLength();
}"
1280,"    public int getMinLength() {
        return minLength;
    }","  public void test12()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator("""", (CheckDigit) null);
      int int0 = codeValidator0.getMaxLength();
}"
1281,"    public int getMaxLength() {
        return maxLength;
    }","  public void test13()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator("""", (CheckDigit) null);
      codeValidator0.getCheckDigit();
}"
1282,"    public int getMinLength() {
        return minLength;
    }","  public void test14()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator("""", (CheckDigit) null);
      codeValidator0.getCheckDigit();
}"
1283,"    public Object validate(String input) {

        if (input == null) {
            return null;
        }

        String code = input.trim();
        if (code.length() == 0) {
            return null;
        }

        // validate/reformat using regular expression
        if (regexValidator != null) {
            code = regexValidator.validate(code);
            if (code == null) {
                return null;
            }
        }

        // check the length (must be done after validate as that can change the code)
        if ((minLength >= 0 && code.length() < minLength) ||
            (maxLength >= 0 && code.length() > maxLength)) {
            return null;
        }

        // validate the check digit
        if (checkdigit != null && !checkdigit.isValid(code)) {
            return null;
        }

        return code;

    }","  public void test15()  throws Throwable  {
      int[] intArray0 = new int[0];
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0, true);
      CodeValidator codeValidator0 = new CodeValidator("""", (-1), (-1114), modulusTenCheckDigit0);
      // Undeclared exception!
      try { 
        codeValidator0.validate(""00"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusTenCheckDigit"", e);
      }
  }"
1284,"    public boolean isValid(String input) {
        return (validate(input) != null);
    }","  public void test16()  throws Throwable  {
      int[] intArray0 = new int[0];
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0);
      CodeValidator codeValidator0 = new CodeValidator((String) null, (-3913), 7, modulusTenCheckDigit0);
      // Undeclared exception!
      try { 
        codeValidator0.isValid(""CfC8"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusTenCheckDigit"", e);
      }
  }"
1285,"    public CodeValidator(String regex, CheckDigit checkdigit) {
        this(regex, -1, -1, checkdigit);
    }","  public void test17()  throws Throwable  {
      SedolCheckDigit sedolCheckDigit0 = (SedolCheckDigit)SedolCheckDigit.SEDOL_CHECK_DIGIT;
      CodeValidator codeValidator0 = null;
      try {
        codeValidator0 = new CodeValidator(""`{aVCv"", sedolCheckDigit0);
        fail(""Expecting exception: PatternSyntaxException"");
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 0
         // `{aVCv
         // ^
         //
         verifyException(""java.util.regex.Pattern"", e);
      }
  }"
1286,"    public CodeValidator(String regex, CheckDigit checkdigit) {
        this(regex, -1, -1, checkdigit);
    }","  public void test18()  throws Throwable  {
      ISBNCheckDigit iSBNCheckDigit0 = (ISBNCheckDigit)ISBNCheckDigit.ISBN_CHECK_DIGIT;
      CodeValidator codeValidator0 = null;
      try {
        codeValidator0 = new CodeValidator(""qBq?}ju|4{e"", 35, iSBNCheckDigit0);
        fail(""Expecting exception: PatternSyntaxException"");
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 8
         // qBq?}ju|4{e
         //         ^
         //
         verifyException(""java.util.regex.Pattern"", e);
      }
  }"
1287,"    public CodeValidator(String regex, CheckDigit checkdigit) {
        this(regex, -1, -1, checkdigit);
    }","  public void test19()  throws Throwable  {
      SedolCheckDigit sedolCheckDigit0 = (SedolCheckDigit)SedolCheckDigit.SEDOL_CHECK_DIGIT;
      CodeValidator codeValidator0 = null;
      try {
        codeValidator0 = new CodeValidator(""^y@J'j>0Gw0{"", (-1), (-1), sedolCheckDigit0);
        fail(""Expecting exception: PatternSyntaxException"");
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 10
         // ^y@J'j>0Gw0{
         //           ^
         //
         verifyException(""java.util.regex.Pattern"", e);
      }
  }"
1288,"    public int getMaxLength() {
        return maxLength;
    }","  public void test20()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator("""", (CheckDigit) null);
      Object object0 = codeValidator0.validate(""T1c5T"");
}"
1289,"    public int getMinLength() {
        return minLength;
    }","  public void test21()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator("""", (CheckDigit) null);
      Object object0 = codeValidator0.validate(""T1c5T"");
}"
1290,"    public Object validate(String input) {

        if (input == null) {
            return null;
        }

        String code = input.trim();
        if (code.length() == 0) {
            return null;
        }

        // validate/reformat using regular expression
        if (regexValidator != null) {
            code = regexValidator.validate(code);
            if (code == null) {
                return null;
            }
        }

        // check the length (must be done after validate as that can change the code)
        if ((minLength >= 0 && code.length() < minLength) ||
            (maxLength >= 0 && code.length() > maxLength)) {
            return null;
        }

        // validate the check digit
        if (checkdigit != null && !checkdigit.isValid(code)) {
            return null;
        }

        return code;

    }","  public void test22()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator("""", (CheckDigit) null);
      Object object0 = codeValidator0.validate(""T1c5T"");
}"
1291,"    public int getMaxLength() {
        return maxLength;
    }","  public void test23()  throws Throwable  {
      CUSIPCheckDigit cUSIPCheckDigit0 = (CUSIPCheckDigit)CUSIPCheckDigit.CUSIP_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator("""", (-383), 2124, cUSIPCheckDigit0);
      Object object0 = codeValidator0.validate(""org.apache.commons.validator.routines.CodeValidator"");
}"
1292,"    public Object validate(String input) {

        if (input == null) {
            return null;
        }

        String code = input.trim();
        if (code.length() == 0) {
            return null;
        }

        // validate/reformat using regular expression
        if (regexValidator != null) {
            code = regexValidator.validate(code);
            if (code == null) {
                return null;
            }
        }

        // check the length (must be done after validate as that can change the code)
        if ((minLength >= 0 && code.length() < minLength) ||
            (maxLength >= 0 && code.length() > maxLength)) {
            return null;
        }

        // validate the check digit
        if (checkdigit != null && !checkdigit.isValid(code)) {
            return null;
        }

        return code;

    }","  public void test24()  throws Throwable  {
      CUSIPCheckDigit cUSIPCheckDigit0 = (CUSIPCheckDigit)CUSIPCheckDigit.CUSIP_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator("""", (-383), 2124, cUSIPCheckDigit0);
      Object object0 = codeValidator0.validate(""org.apache.commons.validator.routines.CodeValidator"");
}"
1293,"    public int getMinLength() {
        return minLength;
    }","  public void test25()  throws Throwable  {
      CUSIPCheckDigit cUSIPCheckDigit0 = (CUSIPCheckDigit)CUSIPCheckDigit.CUSIP_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator("""", (-383), 2124, cUSIPCheckDigit0);
      Object object0 = codeValidator0.validate(""org.apache.commons.validator.routines.CodeValidator"");
}"
1294,"    public int getMaxLength() {
        return maxLength;
    }","  public void test26()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator(""org.apache.commons.validator.routines.CodeValidator"", 6, 6, (CheckDigit) null);
      Object object0 = codeValidator0.validate(""org.apache.commons.validator.routines.CodeValidator"");
}"
1295,"    public int getMinLength() {
        return minLength;
    }","  public void test27()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator(""org.apache.commons.validator.routines.CodeValidator"", 6, 6, (CheckDigit) null);
      Object object0 = codeValidator0.validate(""org.apache.commons.validator.routines.CodeValidator"");
}"
1296,"    public Object validate(String input) {

        if (input == null) {
            return null;
        }

        String code = input.trim();
        if (code.length() == 0) {
            return null;
        }

        // validate/reformat using regular expression
        if (regexValidator != null) {
            code = regexValidator.validate(code);
            if (code == null) {
                return null;
            }
        }

        // check the length (must be done after validate as that can change the code)
        if ((minLength >= 0 && code.length() < minLength) ||
            (maxLength >= 0 && code.length() > maxLength)) {
            return null;
        }

        // validate the check digit
        if (checkdigit != null && !checkdigit.isValid(code)) {
            return null;
        }

        return code;

    }","  public void test28()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator(""org.apache.commons.validator.routines.CodeValidator"", 6, 6, (CheckDigit) null);
      Object object0 = codeValidator0.validate(""org.apache.commons.validator.routines.CodeValidator"");
}"
1297,"    public int getMaxLength() {
        return maxLength;
    }","  public void test29()  throws Throwable  {
      EAN13CheckDigit eAN13CheckDigit0 = (EAN13CheckDigit)ISBNCheckDigit.ISBN13_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator("""", eAN13CheckDigit0);
      codeValidator0.validate((String) null);
}"
1298,"    public int getMinLength() {
        return minLength;
    }","  public void test30()  throws Throwable  {
      EAN13CheckDigit eAN13CheckDigit0 = (EAN13CheckDigit)ISBNCheckDigit.ISBN13_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator("""", eAN13CheckDigit0);
      codeValidator0.validate((String) null);
}"
1299,"    public int getMinLength() {
        return minLength;
    }","  public void test31()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator("""", 1, 1, (CheckDigit) null);
      int int0 = codeValidator0.getMaxLength();
}"
1300,"    public int getMaxLength() {
        return maxLength;
    }","  public void test32()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator("""", 1, 1, (CheckDigit) null);
      int int0 = codeValidator0.getMaxLength();
}"
1301,"    public int getMinLength() {
        return minLength;
    }","  public void test33()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(""nt"");
      ABANumberCheckDigit aBANumberCheckDigit0 = (ABANumberCheckDigit)ABANumberCheckDigit.ABAN_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator(regexValidator0, 696, 0, aBANumberCheckDigit0);
      int int0 = codeValidator0.getMinLength();
}"
1302,"    public int getMaxLength() {
        return maxLength;
    }","  public void test34()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(""nt"");
      ABANumberCheckDigit aBANumberCheckDigit0 = (ABANumberCheckDigit)ABANumberCheckDigit.ABAN_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator(regexValidator0, 696, 0, aBANumberCheckDigit0);
      int int0 = codeValidator0.getMinLength();
}"
1303,"    public Object validate(String input) {

        if (input == null) {
            return null;
        }

        String code = input.trim();
        if (code.length() == 0) {
            return null;
        }

        // validate/reformat using regular expression
        if (regexValidator != null) {
            code = regexValidator.validate(code);
            if (code == null) {
                return null;
            }
        }

        // check the length (must be done after validate as that can change the code)
        if ((minLength >= 0 && code.length() < minLength) ||
            (maxLength >= 0 && code.length() > maxLength)) {
            return null;
        }

        // validate the check digit
        if (checkdigit != null && !checkdigit.isValid(code)) {
            return null;
        }

        return code;

    }","  public void test35()  throws Throwable  {
      SedolCheckDigit sedolCheckDigit0 = new SedolCheckDigit();
      CodeValidator codeValidator0 = new CodeValidator((RegexValidator) null, (-2704), sedolCheckDigit0);
      Object object0 = codeValidator0.validate(""vN0"");
}"
1304,"    public int getMaxLength() {
        return maxLength;
    }","  public void test36()  throws Throwable  {
      SedolCheckDigit sedolCheckDigit0 = new SedolCheckDigit();
      CodeValidator codeValidator0 = new CodeValidator((RegexValidator) null, (-2704), sedolCheckDigit0);
      Object object0 = codeValidator0.validate(""vN0"");
}"
1305,"    public int getMinLength() {
        return minLength;
    }","  public void test37()  throws Throwable  {
      SedolCheckDigit sedolCheckDigit0 = new SedolCheckDigit();
      CodeValidator codeValidator0 = new CodeValidator((RegexValidator) null, (-2704), sedolCheckDigit0);
      Object object0 = codeValidator0.validate(""vN0"");
}"
1306,"    public int getMinLength() {
        return minLength;
    }","  public void test38()  throws Throwable  {
      EAN13CheckDigit eAN13CheckDigit0 = (EAN13CheckDigit)EAN13CheckDigit.EAN13_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator((RegexValidator) null, 0, eAN13CheckDigit0);
      codeValidator0.validate(""[postitionWeight="");
}"
1307,"    public int getMaxLength() {
        return maxLength;
    }","  public void test39()  throws Throwable  {
      EAN13CheckDigit eAN13CheckDigit0 = (EAN13CheckDigit)EAN13CheckDigit.EAN13_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator((RegexValidator) null, 0, eAN13CheckDigit0);
      codeValidator0.validate(""[postitionWeight="");
}"
1308,"    public int getMinLength() {
        return minLength;
    }","  public void test40()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator(""M"", 0, 0, (CheckDigit) null);
      codeValidator0.validate(""org.apache.commons.validator.routines.che+kdigit.EAN13CheckDigit"");
}"
1309,"    public int getMaxLength() {
        return maxLength;
    }","  public void test41()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator(""M"", 0, 0, (CheckDigit) null);
      codeValidator0.validate(""org.apache.commons.validator.routines.che+kdigit.EAN13CheckDigit"");
}"
1310,"    public int getMaxLength() {
        return maxLength;
    }","  public void test42()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator(""M"", 0, 0, (CheckDigit) null);
      boolean boolean0 = codeValidator0.isValid(""M"");
}"
1311,"    public int getMinLength() {
        return minLength;
    }","  public void test43()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator(""M"", 0, 0, (CheckDigit) null);
      boolean boolean0 = codeValidator0.isValid(""M"");
}"
1312,"    public boolean isValid(String input) {
        return (validate(input) != null);
    }","  public void test44()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator(""M"", 0, 0, (CheckDigit) null);
      boolean boolean0 = codeValidator0.isValid(""M"");
}"
1313,"    public Object validate(String input) {

        if (input == null) {
            return null;
        }

        String code = input.trim();
        if (code.length() == 0) {
            return null;
        }

        // validate/reformat using regular expression
        if (regexValidator != null) {
            code = regexValidator.validate(code);
            if (code == null) {
                return null;
            }
        }

        // check the length (must be done after validate as that can change the code)
        if ((minLength >= 0 && code.length() < minLength) ||
            (maxLength >= 0 && code.length() > maxLength)) {
            return null;
        }

        // validate the check digit
        if (checkdigit != null && !checkdigit.isValid(code)) {
            return null;
        }

        return code;

    }","  public void test45()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator("""", (CheckDigit) null);
      Object object0 = codeValidator0.validate("""");
}"
1314,"    public int getMinLength() {
        return minLength;
    }","  public void test46()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator("""", (CheckDigit) null);
      Object object0 = codeValidator0.validate("""");
}"
1315,"    public int getMaxLength() {
        return maxLength;
    }","  public void test47()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator("""", (CheckDigit) null);
      Object object0 = codeValidator0.validate("""");
}"
1316,"    public int getMinLength() {
        return minLength;
    }","  public void test48()  throws Throwable  {
      EAN13CheckDigit eAN13CheckDigit0 = (EAN13CheckDigit)EAN13CheckDigit.EAN13_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator((RegexValidator) null, 0, eAN13CheckDigit0);
      int int0 = codeValidator0.getMinLength();
}"
1317,"    public int getMaxLength() {
        return maxLength;
    }","  public void test49()  throws Throwable  {
      EAN13CheckDigit eAN13CheckDigit0 = (EAN13CheckDigit)EAN13CheckDigit.EAN13_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator((RegexValidator) null, 0, eAN13CheckDigit0);
      int int0 = codeValidator0.getMinLength();
}"
1318,"    public int getMaxLength() {
        return maxLength;
    }","  public void test50()  throws Throwable  {
      EAN13CheckDigit eAN13CheckDigit0 = (EAN13CheckDigit)EAN13CheckDigit.EAN13_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator((RegexValidator) null, 0, eAN13CheckDigit0);
      codeValidator0.getRegexValidator();
}"
1319,"    public int getMinLength() {
        return minLength;
    }","  public void test51()  throws Throwable  {
      EAN13CheckDigit eAN13CheckDigit0 = (EAN13CheckDigit)EAN13CheckDigit.EAN13_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator((RegexValidator) null, 0, eAN13CheckDigit0);
      codeValidator0.getRegexValidator();
}"
1320,"    public int getMaxLength() {
        return maxLength;
    }","  public void test52()  throws Throwable  {
      EAN13CheckDigit eAN13CheckDigit0 = (EAN13CheckDigit)EAN13CheckDigit.EAN13_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator((RegexValidator) null, 0, eAN13CheckDigit0);
      int int0 = codeValidator0.getMaxLength();
}"
1321,"    public int getMinLength() {
        return minLength;
    }","  public void test53()  throws Throwable  {
      EAN13CheckDigit eAN13CheckDigit0 = (EAN13CheckDigit)EAN13CheckDigit.EAN13_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator((RegexValidator) null, 0, eAN13CheckDigit0);
      int int0 = codeValidator0.getMaxLength();
}"
1322,"    public int getMinLength() {
        return minLength;
    }","  public void test54()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator("""", 24, (CheckDigit) null);
}"
1323,"    public int getMaxLength() {
        return maxLength;
    }","  public void test55()  throws Throwable  {
      CodeValidator codeValidator0 = new CodeValidator("""", 24, (CheckDigit) null);
}"
1324,"    public int getMinLength() {
        return minLength;
    }","  public void test56()  throws Throwable  {
      EAN13CheckDigit eAN13CheckDigit0 = (EAN13CheckDigit)EAN13CheckDigit.EAN13_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator((RegexValidator) null, 0, eAN13CheckDigit0);
      codeValidator0.getCheckDigit();
}"
1325,"    public int getMaxLength() {
        return maxLength;
    }","  public void test57()  throws Throwable  {
      EAN13CheckDigit eAN13CheckDigit0 = (EAN13CheckDigit)EAN13CheckDigit.EAN13_CHECK_DIGIT;
      CodeValidator codeValidator0 = new CodeValidator((RegexValidator) null, 0, eAN13CheckDigit0);
      codeValidator0.getCheckDigit();
}"
1326,"    protected int determineScale(NumberFormat format) {
        if (!isStrict()) {
            return -1;
        }
        if (!isAllowFractions() || format.isParseIntegerOnly()) {
            return 0;
        }
        int minimumFraction = format.getMinimumFractionDigits();
        int maximumFraction = format.getMaximumFractionDigits();
        if (minimumFraction != maximumFraction) {
            return -1;
        }
        int scale = minimumFraction;
        if (format instanceof DecimalFormat) {
            int multiplier = ((DecimalFormat)format).getMultiplier();
            if (multiplier == 100) { // CHECKSTYLE IGNORE MagicNumber
                scale += 2; // CHECKSTYLE IGNORE MagicNumber
            } else if (multiplier == 1000) { // CHECKSTYLE IGNORE MagicNumber
                scale += 3; // CHECKSTYLE IGNORE MagicNumber
            }
        } else if (formatType == PERCENT_FORMAT) {
            scale += 2; // CHECKSTYLE IGNORE MagicNumber
        }
        return scale;
    }","  public void test0()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      decimalFormat0.setMultiplier(1394);
      int int0 = currencyValidator0.determineScale(decimalFormat0);
}"
1327,"    public int getFormatType() {
        return formatType;
    }","  public void test1()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      decimalFormat0.setMultiplier(1394);
      int int0 = currencyValidator0.determineScale(decimalFormat0);
}"
1328,"    public boolean isAllowFractions() {
        return allowFractions;
    }","  public void test2()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      decimalFormat0.setMultiplier(1394);
      int int0 = currencyValidator0.determineScale(decimalFormat0);
}"
1329,"    protected int determineScale(NumberFormat format) {
        if (!isStrict()) {
            return -1;
        }
        if (!isAllowFractions() || format.isParseIntegerOnly()) {
            return 0;
        }
        int minimumFraction = format.getMinimumFractionDigits();
        int maximumFraction = format.getMaximumFractionDigits();
        if (minimumFraction != maximumFraction) {
            return -1;
        }
        int scale = minimumFraction;
        if (format instanceof DecimalFormat) {
            int multiplier = ((DecimalFormat)format).getMultiplier();
            if (multiplier == 100) { // CHECKSTYLE IGNORE MagicNumber
                scale += 2; // CHECKSTYLE IGNORE MagicNumber
            } else if (multiplier == 1000) { // CHECKSTYLE IGNORE MagicNumber
                scale += 3; // CHECKSTYLE IGNORE MagicNumber
            }
        } else if (formatType == PERCENT_FORMAT) {
            scale += 2; // CHECKSTYLE IGNORE MagicNumber
        }
        return scale;
    }","  public void test3()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      DecimalFormat decimalFormat0 = (DecimalFormat)currencyValidator0.getFormat((Locale) null);
      int int0 = currencyValidator0.determineScale(decimalFormat0);
}"
1330,"    protected int determineScale(NumberFormat format) {
        if (!isStrict()) {
            return -1;
        }
        if (!isAllowFractions() || format.isParseIntegerOnly()) {
            return 0;
        }
        int minimumFraction = format.getMinimumFractionDigits();
        int maximumFraction = format.getMaximumFractionDigits();
        if (minimumFraction != maximumFraction) {
            return -1;
        }
        int scale = minimumFraction;
        if (format instanceof DecimalFormat) {
            int multiplier = ((DecimalFormat)format).getMultiplier();
            if (multiplier == 100) { // CHECKSTYLE IGNORE MagicNumber
                scale += 2; // CHECKSTYLE IGNORE MagicNumber
            } else if (multiplier == 1000) { // CHECKSTYLE IGNORE MagicNumber
                scale += 3; // CHECKSTYLE IGNORE MagicNumber
            }
        } else if (formatType == PERCENT_FORMAT) {
            scale += 2; // CHECKSTYLE IGNORE MagicNumber
        }
        return scale;
    }","  public void test4()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      DecimalFormat decimalFormat0 = (DecimalFormat)currencyValidator0.getFormat((Locale) null);
      int int0 = currencyValidator0.determineScale(decimalFormat0);
}"
1331,"    public boolean maxValue(Number value, Number max) {
        if (isAllowFractions()) {
            return (value.doubleValue() <= max.doubleValue());
        }
        return (value.longValue() <= max.longValue());
    }","  public void test5()  throws Throwable  {
      ByteValidator byteValidator0 = ByteValidator.getInstance();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = byteValidator0.maxValue(bigInteger0, bigDecimal0);
}"
1332,"    public boolean maxValue(Number value, Number max) {
        if (isAllowFractions()) {
            return (value.doubleValue() <= max.doubleValue());
        }
        return (value.longValue() <= max.longValue());
    }","  public void test6()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator(false, true);
      boolean boolean0 = currencyValidator0.maxValue(0, 1);
}"
1333,"    public boolean isAllowFractions() {
        return allowFractions;
    }","  public void test7()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator(false, true);
      boolean boolean0 = currencyValidator0.maxValue(0, 1);
}"
1334,"    public int getFormatType() {
        return formatType;
    }","  public void test8()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator(false, true);
      boolean boolean0 = currencyValidator0.maxValue(0, 1);
}"
1335,"    public boolean minValue(Number value, Number min) {
        if (isAllowFractions()) {
            return (value.doubleValue() >= min.doubleValue());
        }
        return (value.longValue() >= min.longValue());
    }","  public void test9()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = bigIntegerValidator0.minValue(bigInteger0, 0);
}"
1336,"    public boolean isAllowFractions() {
        return allowFractions;
    }","  public void test10()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = bigIntegerValidator0.minValue(bigInteger0, 0);
}"
1337,"    public int getFormatType() {
        return formatType;
    }","  public void test11()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = bigIntegerValidator0.minValue(bigInteger0, 0);
}"
1338,"    public boolean isInRange(Number value, Number min, Number max) {
        return (minValue(value, min) && maxValue(value, max));
    }","  public void test12()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      LongValidator longValidator0 = LongValidator.getInstance();
      boolean boolean0 = longValidator0.isInRange(bigInteger0, bigInteger0, 0);
}"
1339,"    public int getFormatType() {
        return formatType;
    }","  public void test13()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      Locale locale0 = Locale.UK;
      currencyValidator0.parse("""", ""(,~,?C[+."", locale0);
}"
1340,"    public boolean isAllowFractions() {
        return allowFractions;
    }","  public void test14()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      Locale locale0 = Locale.UK;
      currencyValidator0.parse("""", ""(,~,?C[+."", locale0);
}"
1341,"    public boolean isAllowFractions() {
        return allowFractions;
    }","  public void test15()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      boolean boolean0 = shortValidator0.isAllowFractions();
}"
1342,"    public int getFormatType() {
        return formatType;
    }","  public void test16()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      boolean boolean0 = shortValidator0.isAllowFractions();
}"
1343,"    public int getFormatType() {
        return formatType;
    }","  public void test17()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = BigDecimalValidator.getInstance();
      int int0 = bigDecimalValidator0.getFormatType();
}"
1344,"    public boolean isAllowFractions() {
        return allowFractions;
    }","  public void test18()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(false, (-3702));
      int int0 = integerValidator0.getFormatType();
}"
1345,"    public int getFormatType() {
        return formatType;
    }","  public void test19()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(false, (-3702));
      int int0 = integerValidator0.getFormatType();
}"
1346,"    protected Format getFormat(String pattern, Locale locale) {

        NumberFormat formatter = null;
        boolean usePattern = (pattern != null && pattern.length() > 0);
        if (!usePattern) {
            formatter = (NumberFormat)getFormat(locale);
        } else if (locale == null) {
            formatter =  new DecimalFormat(pattern);
        } else {
            DecimalFormatSymbols symbols = new DecimalFormatSymbols(locale);
            formatter = new DecimalFormat(pattern, symbols);
        }

        if (!isAllowFractions()) {
            formatter.setParseIntegerOnly(true);
        }
        return formatter;
    }","  public void test20()  throws Throwable  {
      Locale locale0 = Locale.US;
      BigIntegerValidator bigIntegerValidator0 = BigIntegerValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)bigIntegerValidator0.getFormat((String) null, locale0);
}"
1347,"    protected Format getFormat(String pattern, Locale locale) {

        NumberFormat formatter = null;
        boolean usePattern = (pattern != null && pattern.length() > 0);
        if (!usePattern) {
            formatter = (NumberFormat)getFormat(locale);
        } else if (locale == null) {
            formatter =  new DecimalFormat(pattern);
        } else {
            DecimalFormatSymbols symbols = new DecimalFormatSymbols(locale);
            formatter = new DecimalFormat(pattern, symbols);
        }

        if (!isAllowFractions()) {
            formatter.setParseIntegerOnly(true);
        }
        return formatter;
    }","  public void test21()  throws Throwable  {
      Locale locale0 = Locale.US;
      BigIntegerValidator bigIntegerValidator0 = BigIntegerValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)bigIntegerValidator0.getFormat((String) null, locale0);
}"
1348,"    public boolean maxValue(Number value, Number max) {
        if (isAllowFractions()) {
            return (value.doubleValue() <= max.doubleValue());
        }
        return (value.longValue() <= max.longValue());
    }","  public void test22()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      // Undeclared exception!
      try { 
        bigIntegerValidator0.maxValue((Number) null, 1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.AbstractNumberValidator"", e);
      }
  }"
1349,"    public boolean isValid(String value, String pattern, Locale locale) {
        Object parsedValue = parse(value, pattern, locale);
        return (parsedValue == null ? false : true);
    }","  public void test23()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(false, 0);
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        integerValidator0.isValid(""org.apache.commons.validator.routines.AbstractNumberValidator"", ""org.apache.commons.validator.routines.AbstractNumberValidator"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \""org.apache.commons.validator.routines.AbstractNumberValidator\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1350,"    public boolean isInRange(Number value, Number min, Number max) {
        return (minValue(value, min) && maxValue(value, max));
    }","  public void test24()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      // Undeclared exception!
      try { 
        currencyValidator0.isInRange((Number) null, (Number) null, (Number) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.AbstractNumberValidator"", e);
      }
  }"
1351,"    protected Format getFormat(String pattern, Locale locale) {

        NumberFormat formatter = null;
        boolean usePattern = (pattern != null && pattern.length() > 0);
        if (!usePattern) {
            formatter = (NumberFormat)getFormat(locale);
        } else if (locale == null) {
            formatter =  new DecimalFormat(pattern);
        } else {
            DecimalFormatSymbols symbols = new DecimalFormatSymbols(locale);
            formatter = new DecimalFormat(pattern, symbols);
        }

        if (!isAllowFractions()) {
            formatter.setParseIntegerOnly(true);
        }
        return formatter;
    }","  public void test25()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        shortValidator0.getFormat(""org.apache.commons.validator.routines.AbstractNumberValidator"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \""org.apache.commons.validator.routines.AbstractNumberValidator\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1352,"    protected int determineScale(NumberFormat format) {
        if (!isStrict()) {
            return -1;
        }
        if (!isAllowFractions() || format.isParseIntegerOnly()) {
            return 0;
        }
        int minimumFraction = format.getMinimumFractionDigits();
        int maximumFraction = format.getMaximumFractionDigits();
        if (minimumFraction != maximumFraction) {
            return -1;
        }
        int scale = minimumFraction;
        if (format instanceof DecimalFormat) {
            int multiplier = ((DecimalFormat)format).getMultiplier();
            if (multiplier == 100) { // CHECKSTYLE IGNORE MagicNumber
                scale += 2; // CHECKSTYLE IGNORE MagicNumber
            } else if (multiplier == 1000) { // CHECKSTYLE IGNORE MagicNumber
                scale += 3; // CHECKSTYLE IGNORE MagicNumber
            }
        } else if (formatType == PERCENT_FORMAT) {
            scale += 2; // CHECKSTYLE IGNORE MagicNumber
        }
        return scale;
    }","  public void test26()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      // Undeclared exception!
      try { 
        doubleValidator0.determineScale((NumberFormat) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.AbstractNumberValidator"", e);
      }
  }"
1353,"    public boolean isAllowFractions() {
        return allowFractions;
    }","  public void test27()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(false, 37);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = floatValidator0.maxValue(bigDecimal0, bigDecimal0);
}"
1354,"    public int getFormatType() {
        return formatType;
    }","  public void test28()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(false, 37);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = floatValidator0.maxValue(bigDecimal0, bigDecimal0);
}"
1355,"    public boolean maxValue(Number value, Number max) {
        if (isAllowFractions()) {
            return (value.doubleValue() <= max.doubleValue());
        }
        return (value.longValue() <= max.longValue());
    }","  public void test29()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(false, 37);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = floatValidator0.maxValue(bigDecimal0, bigDecimal0);
}"
1356,"    public boolean minValue(Number value, Number min) {
        if (isAllowFractions()) {
            return (value.doubleValue() >= min.doubleValue());
        }
        return (value.longValue() >= min.longValue());
    }","  public void test30()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = BigDecimalValidator.getInstance();
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = bigDecimalValidator0.minValue(bigInteger0, bigInteger0);
}"
1357,"    public boolean minValue(Number value, Number min) {
        if (isAllowFractions()) {
            return (value.doubleValue() >= min.doubleValue());
        }
        return (value.longValue() >= min.longValue());
    }","  public void test31()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = CurrencyValidator.getInstance();
      boolean boolean0 = bigDecimalValidator0.minValue(0, 2);
}"
1358,"    public boolean minValue(Number value, Number min) {
        if (isAllowFractions()) {
            return (value.doubleValue() >= min.doubleValue());
        }
        return (value.longValue() >= min.longValue());
    }","  public void test32()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = BigDecimalValidator.getInstance();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigDecimalValidator0.minValue(bigInteger0, (Number) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.AbstractNumberValidator"", e);
      }
  }"
1359,"    public boolean isValid(String value, String pattern, Locale locale) {
        Object parsedValue = parse(value, pattern, locale);
        return (parsedValue == null ? false : true);
    }","  public void test33()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      boolean boolean0 = bigDecimalValidator0.isValid("""", """", (Locale) null);
}"
1360,"    public boolean isAllowFractions() {
        return allowFractions;
    }","  public void test34()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      boolean boolean0 = bigDecimalValidator0.isValid("""", """", (Locale) null);
}"
1361,"    public int getFormatType() {
        return formatType;
    }","  public void test35()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      boolean boolean0 = bigDecimalValidator0.isValid("""", """", (Locale) null);
}"
1362,"    public boolean isAllowFractions() {
        return allowFractions;
    }","  public void test36()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(true);
      boolean boolean0 = bigDecimalValidator0.isAllowFractions();
}"
1363,"    public int getFormatType() {
        return formatType;
    }","  public void test37()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(true);
      boolean boolean0 = bigDecimalValidator0.isAllowFractions();
}"
1364,"    public boolean isAllowFractions() {
        return allowFractions;
    }","  public void test38()  throws Throwable  {
      PercentValidator percentValidator0 = new PercentValidator();
      Locale locale0 = Locale.CHINESE;
      DecimalFormat decimalFormat0 = (DecimalFormat)percentValidator0.getFormat(locale0);
}"
1365,"    protected Format getFormat(String pattern, Locale locale) {

        NumberFormat formatter = null;
        boolean usePattern = (pattern != null && pattern.length() > 0);
        if (!usePattern) {
            formatter = (NumberFormat)getFormat(locale);
        } else if (locale == null) {
            formatter =  new DecimalFormat(pattern);
        } else {
            DecimalFormatSymbols symbols = new DecimalFormatSymbols(locale);
            formatter = new DecimalFormat(pattern, symbols);
        }

        if (!isAllowFractions()) {
            formatter.setParseIntegerOnly(true);
        }
        return formatter;
    }","  public void test39()  throws Throwable  {
      PercentValidator percentValidator0 = new PercentValidator();
      Locale locale0 = Locale.CHINESE;
      DecimalFormat decimalFormat0 = (DecimalFormat)percentValidator0.getFormat(locale0);
}"
1366,"    public int getFormatType() {
        return formatType;
    }","  public void test40()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      Locale locale0 = Locale.GERMAN;
      currencyValidator0.validate(""'V$@(bEJPh["", """", locale0);
}"
1367,"    public boolean isAllowFractions() {
        return allowFractions;
    }","  public void test41()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      Locale locale0 = Locale.GERMAN;
      currencyValidator0.validate(""'V$@(bEJPh["", """", locale0);
}"
1368,"    public boolean isAllowFractions() {
        return allowFractions;
    }","  public void test42()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator(true, 2);
      byteValidator0.validate(""Q0.01"");
}"
1369,"    public int getFormatType() {
        return formatType;
    }","  public void test43()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator(true, 2);
      byteValidator0.validate(""Q0.01"");
}"
1370,"    protected int determineScale(NumberFormat format) {
        if (!isStrict()) {
            return -1;
        }
        if (!isAllowFractions() || format.isParseIntegerOnly()) {
            return 0;
        }
        int minimumFraction = format.getMinimumFractionDigits();
        int maximumFraction = format.getMaximumFractionDigits();
        if (minimumFraction != maximumFraction) {
            return -1;
        }
        int scale = minimumFraction;
        if (format instanceof DecimalFormat) {
            int multiplier = ((DecimalFormat)format).getMultiplier();
            if (multiplier == 100) { // CHECKSTYLE IGNORE MagicNumber
                scale += 2; // CHECKSTYLE IGNORE MagicNumber
            } else if (multiplier == 1000) { // CHECKSTYLE IGNORE MagicNumber
                scale += 3; // CHECKSTYLE IGNORE MagicNumber
            }
        } else if (formatType == PERCENT_FORMAT) {
            scale += 2; // CHECKSTYLE IGNORE MagicNumber
        }
        return scale;
    }","  public void test44()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      decimalFormat0.setMultiplier(1000);
      int int0 = currencyValidator0.determineScale(decimalFormat0);
}"
1371,"    public int getFormatType() {
        return formatType;
    }","  public void test45()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      decimalFormat0.setMultiplier(1000);
      int int0 = currencyValidator0.determineScale(decimalFormat0);
}"
1372,"    public int getFormatType() {
        return formatType;
    }","  public void test46()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      int int0 = currencyValidator0.determineScale(numberFormat0);
}"
1373,"    protected int determineScale(NumberFormat format) {
        if (!isStrict()) {
            return -1;
        }
        if (!isAllowFractions() || format.isParseIntegerOnly()) {
            return 0;
        }
        int minimumFraction = format.getMinimumFractionDigits();
        int maximumFraction = format.getMaximumFractionDigits();
        if (minimumFraction != maximumFraction) {
            return -1;
        }
        int scale = minimumFraction;
        if (format instanceof DecimalFormat) {
            int multiplier = ((DecimalFormat)format).getMultiplier();
            if (multiplier == 100) { // CHECKSTYLE IGNORE MagicNumber
                scale += 2; // CHECKSTYLE IGNORE MagicNumber
            } else if (multiplier == 1000) { // CHECKSTYLE IGNORE MagicNumber
                scale += 3; // CHECKSTYLE IGNORE MagicNumber
            }
        } else if (formatType == PERCENT_FORMAT) {
            scale += 2; // CHECKSTYLE IGNORE MagicNumber
        }
        return scale;
    }","  public void test47()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      int int0 = currencyValidator0.determineScale(numberFormat0);
}"
1374,"    public int getFormatType() {
        return formatType;
    }","  public void test48()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object object0 = currencyValidator0.parse(""7)`1m6<_dHF~0<{[vl"", ""7)`1m6<_dHF~0<{[vl"", locale0);
}"
1375,"    protected Object parse(String value, String pattern, Locale locale) {

        value = (value == null ? null : value.trim());
        if (value == null || value.length() == 0) {
            return null;
        }
        Format formatter = getFormat(pattern, locale);
        return parse(value, formatter);

    }","  public void test49()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object object0 = currencyValidator0.parse(""7)`1m6<_dHF~0<{[vl"", ""7)`1m6<_dHF~0<{[vl"", locale0);
}"
1376,"    public boolean isAllowFractions() {
        return allowFractions;
    }","  public void test50()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object object0 = currencyValidator0.parse(""7)`1m6<_dHF~0<{[vl"", ""7)`1m6<_dHF~0<{[vl"", locale0);
}"
1377,"    public int getFormatType() {
        return formatType;
    }","  public void test51()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      numberFormat0.setParseIntegerOnly(true);
      int int0 = bigDecimalValidator0.determineScale(numberFormat0);
}"
1378,"    public boolean isAllowFractions() {
        return allowFractions;
    }","  public void test52()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      numberFormat0.setParseIntegerOnly(true);
      int int0 = bigDecimalValidator0.determineScale(numberFormat0);
}"
1379,"    protected int determineScale(NumberFormat format) {
        if (!isStrict()) {
            return -1;
        }
        if (!isAllowFractions() || format.isParseIntegerOnly()) {
            return 0;
        }
        int minimumFraction = format.getMinimumFractionDigits();
        int maximumFraction = format.getMaximumFractionDigits();
        if (minimumFraction != maximumFraction) {
            return -1;
        }
        int scale = minimumFraction;
        if (format instanceof DecimalFormat) {
            int multiplier = ((DecimalFormat)format).getMultiplier();
            if (multiplier == 100) { // CHECKSTYLE IGNORE MagicNumber
                scale += 2; // CHECKSTYLE IGNORE MagicNumber
            } else if (multiplier == 1000) { // CHECKSTYLE IGNORE MagicNumber
                scale += 3; // CHECKSTYLE IGNORE MagicNumber
            }
        } else if (formatType == PERCENT_FORMAT) {
            scale += 2; // CHECKSTYLE IGNORE MagicNumber
        }
        return scale;
    }","  public void test53()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      numberFormat0.setParseIntegerOnly(true);
      int int0 = bigDecimalValidator0.determineScale(numberFormat0);
}"
1380,"    protected int determineScale(NumberFormat format) {
        if (!isStrict()) {
            return -1;
        }
        if (!isAllowFractions() || format.isParseIntegerOnly()) {
            return 0;
        }
        int minimumFraction = format.getMinimumFractionDigits();
        int maximumFraction = format.getMaximumFractionDigits();
        if (minimumFraction != maximumFraction) {
            return -1;
        }
        int scale = minimumFraction;
        if (format instanceof DecimalFormat) {
            int multiplier = ((DecimalFormat)format).getMultiplier();
            if (multiplier == 100) { // CHECKSTYLE IGNORE MagicNumber
                scale += 2; // CHECKSTYLE IGNORE MagicNumber
            } else if (multiplier == 1000) { // CHECKSTYLE IGNORE MagicNumber
                scale += 3; // CHECKSTYLE IGNORE MagicNumber
            }
        } else if (formatType == PERCENT_FORMAT) {
            scale += 2; // CHECKSTYLE IGNORE MagicNumber
        }
        return scale;
    }","  public void test54()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(true, 1);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      int int0 = shortValidator0.determineScale(numberFormat0);
}"
1381,"    public int getFormatType() {
        return formatType;
    }","  public void test55()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(true, 1);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      int int0 = shortValidator0.determineScale(numberFormat0);
}"
1382,"    protected Object parse(String value, String pattern, Locale locale) {

        value = (value == null ? null : value.trim());
        if (value == null || value.length() == 0) {
            return null;
        }
        Format formatter = getFormat(pattern, locale);
        return parse(value, formatter);

    }","  public void test56()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        longValidator0.parse(""org.apache.commons.validator.routines.AbstractNumberValidator"", ""org.apache.commons.validator.routines.AbstractNumberValidator"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \""org.apache.commons.validator.routines.AbstractNumberValidator\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1383,"    public int getFormatType() {
        return formatType;
    }","  public void test57()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(true, (-500));
      boolean boolean0 = floatValidator0.isValid(""1"", """", (Locale) null);
}"
1384,"    public boolean isValid(String value, String pattern, Locale locale) {
        Object parsedValue = parse(value, pattern, locale);
        return (parsedValue == null ? false : true);
    }","  public void test58()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(true, (-500));
      boolean boolean0 = floatValidator0.isValid(""1"", """", (Locale) null);
}"
1385,"    public boolean isAllowFractions() {
        return allowFractions;
    }","  public void test59()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator(true, (-500));
      boolean boolean0 = floatValidator0.isValid(""1"", """", (Locale) null);
}"
1386,"    protected Object parse(String value, String pattern, Locale locale) {

        value = (value == null ? null : value.trim());
        if (value == null || value.length() == 0) {
            return null;
        }
        Format formatter = getFormat(pattern, locale);
        return parse(value, formatter);

    }","  public void test60()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Object object0 = shortValidator0.parse(""FmC_y\""fV2r0I3"", ""FmC_y\""fV2r0I3"", (Locale) null);
}"
1387,"    public boolean isValid(String value, String pattern, Locale locale) {
        Object parsedValue = parse(value, pattern, locale);
        return (parsedValue == null ? false : true);
    }","  public void test61()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      boolean boolean0 = shortValidator0.isValid((String) null, ""cf?H7K1!`I%h}"");
}"
1388,"    public boolean maxValue(Number value, Number max) {
        if (isAllowFractions()) {
            return (value.doubleValue() <= max.doubleValue());
        }
        return (value.longValue() <= max.longValue());
    }","  public void test62()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = integerValidator0.maxValue(bigInteger0, (byte)57);
}"
1389,"    public int getFormatType() {
        return formatType;
    }","  public void test63()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = bigIntegerValidator0.maxValue(bigInteger0, bigInteger0);
}"
1390,"    public boolean isAllowFractions() {
        return allowFractions;
    }","  public void test64()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = bigIntegerValidator0.maxValue(bigInteger0, bigInteger0);
}"
1391,"    public boolean maxValue(Number value, Number max) {
        if (isAllowFractions()) {
            return (value.doubleValue() <= max.doubleValue());
        }
        return (value.longValue() <= max.longValue());
    }","  public void test65()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = bigIntegerValidator0.maxValue(bigInteger0, bigInteger0);
}"
1392,"    public boolean isAllowFractions() {
        return allowFractions;
    }","  public void test66()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Byte byte0 = new Byte((byte)54);
      boolean boolean0 = shortValidator0.minValue(2, byte0);
}"
1393,"    public int getFormatType() {
        return formatType;
    }","  public void test67()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Byte byte0 = new Byte((byte)54);
      boolean boolean0 = shortValidator0.minValue(2, byte0);
}"
1394,"    public boolean minValue(Number value, Number min) {
        if (isAllowFractions()) {
            return (value.doubleValue() >= min.doubleValue());
        }
        return (value.longValue() >= min.longValue());
    }","  public void test68()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Byte byte0 = new Byte((byte)54);
      boolean boolean0 = shortValidator0.minValue(2, byte0);
}"
1395,"    public boolean isAllowFractions() {
        return allowFractions;
    }","  public void test69()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      boolean boolean0 = currencyValidator0.isInRange(bigInteger0, bigDecimal0, bigDecimal0);
}"
1396,"    public boolean isInRange(Number value, Number min, Number max) {
        return (minValue(value, min) && maxValue(value, max));
    }","  public void test70()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      boolean boolean0 = currencyValidator0.isInRange(bigInteger0, bigDecimal0, bigDecimal0);
}"
1397,"    public int getFormatType() {
        return formatType;
    }","  public void test71()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      boolean boolean0 = currencyValidator0.isInRange(bigInteger0, bigDecimal0, bigDecimal0);
}"
1398,"    public int getFormatType() {
        return formatType;
    }","  public void test72()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = bigDecimalValidator0.isInRange(bigInteger0, bigDecimal0, bigDecimal0);
}"
1399,"    public boolean isInRange(Number value, Number min, Number max) {
        return (minValue(value, min) && maxValue(value, max));
    }","  public void test73()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = bigDecimalValidator0.isInRange(bigInteger0, bigDecimal0, bigDecimal0);
}"
1400,"    public boolean isAllowFractions() {
        return allowFractions;
    }","  public void test74()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = bigDecimalValidator0.isInRange(bigInteger0, bigDecimal0, bigDecimal0);
}"
1401,"    public int getFormatType() {
        return formatType;
    }","  public void test75()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      boolean boolean0 = currencyValidator0.isInRange(bigInteger0, bigDecimal0, bigDecimal0);
}"
1402,"    public boolean isAllowFractions() {
        return allowFractions;
    }","  public void test76()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      boolean boolean0 = currencyValidator0.isInRange(bigInteger0, bigDecimal0, bigDecimal0);
}"
1403,"    public boolean isInRange(Number value, Number min, Number max) {
        return (minValue(value, min) && maxValue(value, max));
    }","  public void test77()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      boolean boolean0 = currencyValidator0.isInRange(bigInteger0, bigDecimal0, bigDecimal0);
}"
1404,"    public int getFormatType() {
        return formatType;
    }","  public void test78()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(false, 237, false);
      Locale locale0 = Locale.KOREA;
      boolean boolean0 = bigDecimalValidator0.isValid(""68LBe,?lrK{H%u4"", locale0);
}"
1405,"    public boolean isValid(String value, String pattern, Locale locale) {
        Object parsedValue = parse(value, pattern, locale);
        return (parsedValue == null ? false : true);
    }","  public void test79()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(false, 237, false);
      Locale locale0 = Locale.KOREA;
      boolean boolean0 = bigDecimalValidator0.isValid(""68LBe,?lrK{H%u4"", locale0);
}"
1406,"    public boolean isAllowFractions() {
        return allowFractions;
    }","  public void test80()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(false, 237, false);
      Locale locale0 = Locale.KOREA;
      boolean boolean0 = bigDecimalValidator0.isValid(""68LBe,?lrK{H%u4"", locale0);
}"
1407,"    public int getFormatType() {
        return formatType;
    }","  public void test81()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      boolean boolean0 = floatValidator0.maxValue(1, 0);
}"
1408,"    public boolean isAllowFractions() {
        return allowFractions;
    }","  public void test82()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      boolean boolean0 = floatValidator0.maxValue(1, 0);
}"
1409,"    public boolean maxValue(Number value, Number max) {
        if (isAllowFractions()) {
            return (value.doubleValue() <= max.doubleValue());
        }
        return (value.longValue() <= max.longValue());
    }","  public void test83()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      boolean boolean0 = floatValidator0.maxValue(1, 0);
}"
1410,"    public boolean isAllowFractions() {
        return allowFractions;
    }","  public void test84()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator(false, 100);
      int int0 = byteValidator0.getFormatType();
}"
1411,"    public int getFormatType() {
        return formatType;
    }","  public void test85()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator(false, 100);
      int int0 = byteValidator0.getFormatType();
}"
1412,"    public int getFormatType() {
        return formatType;
    }","  public void test86()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      int int0 = bigDecimalValidator0.determineScale(numberFormat0);
}"
1413,"    protected int determineScale(NumberFormat format) {
        if (!isStrict()) {
            return -1;
        }
        if (!isAllowFractions() || format.isParseIntegerOnly()) {
            return 0;
        }
        int minimumFraction = format.getMinimumFractionDigits();
        int maximumFraction = format.getMaximumFractionDigits();
        if (minimumFraction != maximumFraction) {
            return -1;
        }
        int scale = minimumFraction;
        if (format instanceof DecimalFormat) {
            int multiplier = ((DecimalFormat)format).getMultiplier();
            if (multiplier == 100) { // CHECKSTYLE IGNORE MagicNumber
                scale += 2; // CHECKSTYLE IGNORE MagicNumber
            } else if (multiplier == 1000) { // CHECKSTYLE IGNORE MagicNumber
                scale += 3; // CHECKSTYLE IGNORE MagicNumber
            }
        } else if (formatType == PERCENT_FORMAT) {
            scale += 2; // CHECKSTYLE IGNORE MagicNumber
        }
        return scale;
    }","  public void test87()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      int int0 = bigDecimalValidator0.determineScale(numberFormat0);
}"
1414,"    public PercentValidator() {
        this(true);
    }","  public void test0()  throws Throwable  {
      PercentValidator percentValidator0 = new PercentValidator();
}"
1415,"    protected Object parse(String value, Format formatter) {

        // Initial parse of the value
        BigDecimal parsedValue = (BigDecimal)super.parse(value, formatter);
        if (parsedValue != null || !(formatter instanceof DecimalFormat)) {
            return parsedValue;
        }

        // Re-parse using a pattern without the percent symbol
        DecimalFormat decimalFormat = (DecimalFormat)formatter;
        String pattern = decimalFormat.toPattern();
        if (pattern.indexOf(PERCENT_SYMBOL) >= 0) {
            StringBuilder buffer = new StringBuilder(pattern.length());
            for (int i = 0; i < pattern.length(); i++) {
                if (pattern.charAt(i) != PERCENT_SYMBOL) {
                    buffer.append(pattern.charAt(i));
                }
            }
            decimalFormat.applyPattern(buffer.toString());
            parsedValue = (BigDecimal)super.parse(value, decimalFormat);

            // If parsed OK, divide by 100 to get percent
            if (parsedValue != null) {
                parsedValue = parsedValue.multiply(POINT_ZERO_ONE);
            }

        }
        return parsedValue;
    }","  public void test1()  throws Throwable  {
      PercentValidator percentValidator0 = new PercentValidator();
      Locale locale0 = Locale.CANADA_FRENCH;
      percentValidator0.validate("""", locale0);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat(""%y0*z8\""Nasb~"", decimalFormatSymbols0);
      percentValidator0.parse("":<i`^+"", decimalFormat0);
      percentValidator0.parse(""u(0"", decimalFormat0);
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis(0L);
      percentValidator0.parse("""", decimalFormat0);
      PercentValidator.getInstance();
      PercentValidator.getInstance();
      System.setCurrentTimeMillis(1);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      percentValidator0.parse("""", decimalFormat0);
      System.setCurrentTimeMillis(401L);
      percentValidator0.parse(""u(0"", decimalFormat0);
}"
1416,"    protected Object parse(String value, Format formatter) {

        // Initial parse of the value
        BigDecimal parsedValue = (BigDecimal)super.parse(value, formatter);
        if (parsedValue != null || !(formatter instanceof DecimalFormat)) {
            return parsedValue;
        }

        // Re-parse using a pattern without the percent symbol
        DecimalFormat decimalFormat = (DecimalFormat)formatter;
        String pattern = decimalFormat.toPattern();
        if (pattern.indexOf(PERCENT_SYMBOL) >= 0) {
            StringBuilder buffer = new StringBuilder(pattern.length());
            for (int i = 0; i < pattern.length(); i++) {
                if (pattern.charAt(i) != PERCENT_SYMBOL) {
                    buffer.append(pattern.charAt(i));
                }
            }
            decimalFormat.applyPattern(buffer.toString());
            parsedValue = (BigDecimal)super.parse(value, decimalFormat);

            // If parsed OK, divide by 100 to get percent
            if (parsedValue != null) {
                parsedValue = parsedValue.multiply(POINT_ZERO_ONE);
            }

        }
        return parsedValue;
    }","  public void test2()  throws Throwable  {
      PercentValidator percentValidator0 = new PercentValidator();
      Locale locale0 = Locale.CANADA_FRENCH;
      percentValidator0.validate("""", locale0);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat(""%y0*z8\""Nasb~"", decimalFormatSymbols0);
      percentValidator0.parse("":<i`^+"", decimalFormat0);
      percentValidator0.parse(""u(0"", decimalFormat0);
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis(0L);
      percentValidator0.parse("""", decimalFormat0);
      PercentValidator.getInstance();
      PercentValidator.getInstance();
      System.setCurrentTimeMillis(1);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      percentValidator0.parse("""", decimalFormat0);
      System.setCurrentTimeMillis(401L);
      percentValidator0.parse(""u(0"", decimalFormat0);
}"
1417,"    public PercentValidator() {
        this(true);
    }","  public void test3()  throws Throwable  {
      PercentValidator percentValidator0 = new PercentValidator(false);
}"
1418,"    protected Object parse(String value, Format formatter) {

        // Initial parse of the value
        BigDecimal parsedValue = (BigDecimal)super.parse(value, formatter);
        if (parsedValue != null || !(formatter instanceof DecimalFormat)) {
            return parsedValue;
        }

        // Re-parse using a pattern without the percent symbol
        DecimalFormat decimalFormat = (DecimalFormat)formatter;
        String pattern = decimalFormat.toPattern();
        if (pattern.indexOf(PERCENT_SYMBOL) >= 0) {
            StringBuilder buffer = new StringBuilder(pattern.length());
            for (int i = 0; i < pattern.length(); i++) {
                if (pattern.charAt(i) != PERCENT_SYMBOL) {
                    buffer.append(pattern.charAt(i));
                }
            }
            decimalFormat.applyPattern(buffer.toString());
            parsedValue = (BigDecimal)super.parse(value, decimalFormat);

            // If parsed OK, divide by 100 to get percent
            if (parsedValue != null) {
                parsedValue = parsedValue.multiply(POINT_ZERO_ONE);
            }

        }
        return parsedValue;
    }","  public void test4()  throws Throwable  {
      PercentValidator percentValidator0 = new PercentValidator(false);
      Locale locale0 = Locale.JAPANESE;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      percentValidator0.parse(""org.apache.commons.validator.routines.PercentValidator"", numberFormat0);
      BigDecimal bigDecimal0 = (BigDecimal)percentValidator0.parse(""0\""-YpWg6\""L"", numberFormat0);
}"
1419,"    public static BigDecimalValidator getInstance() {
        return VALIDATOR;
    }","  public void test5()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = PercentValidator.getInstance();
}"
1420,"    protected Object parse(String value, Format formatter) {

        // Initial parse of the value
        BigDecimal parsedValue = (BigDecimal)super.parse(value, formatter);
        if (parsedValue != null || !(formatter instanceof DecimalFormat)) {
            return parsedValue;
        }

        // Re-parse using a pattern without the percent symbol
        DecimalFormat decimalFormat = (DecimalFormat)formatter;
        String pattern = decimalFormat.toPattern();
        if (pattern.indexOf(PERCENT_SYMBOL) >= 0) {
            StringBuilder buffer = new StringBuilder(pattern.length());
            for (int i = 0; i < pattern.length(); i++) {
                if (pattern.charAt(i) != PERCENT_SYMBOL) {
                    buffer.append(pattern.charAt(i));
                }
            }
            decimalFormat.applyPattern(buffer.toString());
            parsedValue = (BigDecimal)super.parse(value, decimalFormat);

            // If parsed OK, divide by 100 to get percent
            if (parsedValue != null) {
                parsedValue = parsedValue.multiply(POINT_ZERO_ONE);
            }

        }
        return parsedValue;
    }","  public void test6()  throws Throwable  {
      PercentValidator percentValidator0 = new PercentValidator(false);
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      BigDecimal bigDecimal0 = percentValidator0.validate(""aoH?.0<"", ""aoH?.0<"");
      percentValidator0.maxValue(bigDecimal0, (-269.1928));
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      locale0.getDisplayCountry();
      Format format0 = percentValidator0.getFormat(""aoH?.0<"", locale0);
      percentValidator0.parse("""", dateFormat0);
      percentValidator0.parse("""", dateFormat0);
      PercentValidator.getInstance();
      percentValidator0.parse(""Taiwan"", format0);
      DateFormat dateFormat1 = DateFormat.getTimeInstance();
      Object object0 = percentValidator0.parse(""aoH?.0<"", dateFormat1);
}"
1421,"    protected Object parse(String value, Format formatter) {

        // Initial parse of the value
        BigDecimal parsedValue = (BigDecimal)super.parse(value, formatter);
        if (parsedValue != null || !(formatter instanceof DecimalFormat)) {
            return parsedValue;
        }

        // Re-parse using a pattern without the percent symbol
        DecimalFormat decimalFormat = (DecimalFormat)formatter;
        String pattern = decimalFormat.toPattern();
        if (pattern.indexOf(PERCENT_SYMBOL) >= 0) {
            StringBuilder buffer = new StringBuilder(pattern.length());
            for (int i = 0; i < pattern.length(); i++) {
                if (pattern.charAt(i) != PERCENT_SYMBOL) {
                    buffer.append(pattern.charAt(i));
                }
            }
            decimalFormat.applyPattern(buffer.toString());
            parsedValue = (BigDecimal)super.parse(value, decimalFormat);

            // If parsed OK, divide by 100 to get percent
            if (parsedValue != null) {
                parsedValue = parsedValue.multiply(POINT_ZERO_ONE);
            }

        }
        return parsedValue;
    }","  public void test7()  throws Throwable  {
      PercentValidator.getInstance();
      PercentValidator percentValidator0 = new PercentValidator(false);
      String string0 = """";
      Locale locale0 = Locale.CHINA;
      Locale locale1 = locale0.stripExtensions();
      percentValidator0.getFormat("""", locale0);
      PercentValidator.getInstance();
      PercentValidator.getInstance();
      String string1 = """";
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale1);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", dateFormatSymbols0);
      DateFormat.getDateTimeInstance(1, 1, locale1);
      // Undeclared exception!
      try { 
        percentValidator0.parse("""", mockSimpleDateFormat0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
1422,"    protected Object parse(String value, Format formatter) {

        // Initial parse of the value
        BigDecimal parsedValue = (BigDecimal)super.parse(value, formatter);
        if (parsedValue != null || !(formatter instanceof DecimalFormat)) {
            return parsedValue;
        }

        // Re-parse using a pattern without the percent symbol
        DecimalFormat decimalFormat = (DecimalFormat)formatter;
        String pattern = decimalFormat.toPattern();
        if (pattern.indexOf(PERCENT_SYMBOL) >= 0) {
            StringBuilder buffer = new StringBuilder(pattern.length());
            for (int i = 0; i < pattern.length(); i++) {
                if (pattern.charAt(i) != PERCENT_SYMBOL) {
                    buffer.append(pattern.charAt(i));
                }
            }
            decimalFormat.applyPattern(buffer.toString());
            parsedValue = (BigDecimal)super.parse(value, decimalFormat);

            // If parsed OK, divide by 100 to get percent
            if (parsedValue != null) {
                parsedValue = parsedValue.multiply(POINT_ZERO_ONE);
            }

        }
        return parsedValue;
    }","  public void test8()  throws Throwable  {
      PercentValidator percentValidator0 = new PercentValidator();
      BigDecimal bigDecimal0 = new BigDecimal((-4981));
      percentValidator0.isValid((String) null);
      percentValidator0.maxValue(bigDecimal0, (double) (-4981));
      PercentValidator.getInstance();
      percentValidator0.validate((String) null);
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      percentValidator0.parse("",/OKF6|V=0J8uH\""k<-"", dateFormat0);
      PercentValidator.getInstance();
      PercentValidator.getInstance();
      percentValidator0.parse("",/OKF6|V=0J8uH\""k<-"", dateFormat0);
      // Undeclared exception!
      try { 
        percentValidator0.parse((String) null, dateFormat0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1423,"    protected Object parse(String value, Format formatter) {

        // Initial parse of the value
        BigDecimal parsedValue = (BigDecimal)super.parse(value, formatter);
        if (parsedValue != null || !(formatter instanceof DecimalFormat)) {
            return parsedValue;
        }

        // Re-parse using a pattern without the percent symbol
        DecimalFormat decimalFormat = (DecimalFormat)formatter;
        String pattern = decimalFormat.toPattern();
        if (pattern.indexOf(PERCENT_SYMBOL) >= 0) {
            StringBuilder buffer = new StringBuilder(pattern.length());
            for (int i = 0; i < pattern.length(); i++) {
                if (pattern.charAt(i) != PERCENT_SYMBOL) {
                    buffer.append(pattern.charAt(i));
                }
            }
            decimalFormat.applyPattern(buffer.toString());
            parsedValue = (BigDecimal)super.parse(value, decimalFormat);

            // If parsed OK, divide by 100 to get percent
            if (parsedValue != null) {
                parsedValue = parsedValue.multiply(POINT_ZERO_ONE);
            }

        }
        return parsedValue;
    }","  public void test9()  throws Throwable  {
      PercentValidator percentValidator0 = new PercentValidator();
      Locale locale0 = Locale.TAIWAN;
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(2, locale0);
      Object object0 = percentValidator0.parse("""", dateFormat0);
}"
1424,"    protected Object parse(String value, Format formatter) {

        // Initial parse of the value
        BigDecimal parsedValue = (BigDecimal)super.parse(value, formatter);
        if (parsedValue != null || !(formatter instanceof DecimalFormat)) {
            return parsedValue;
        }

        // Re-parse using a pattern without the percent symbol
        DecimalFormat decimalFormat = (DecimalFormat)formatter;
        String pattern = decimalFormat.toPattern();
        if (pattern.indexOf(PERCENT_SYMBOL) >= 0) {
            StringBuilder buffer = new StringBuilder(pattern.length());
            for (int i = 0; i < pattern.length(); i++) {
                if (pattern.charAt(i) != PERCENT_SYMBOL) {
                    buffer.append(pattern.charAt(i));
                }
            }
            decimalFormat.applyPattern(buffer.toString());
            parsedValue = (BigDecimal)super.parse(value, decimalFormat);

            // If parsed OK, divide by 100 to get percent
            if (parsedValue != null) {
                parsedValue = parsedValue.multiply(POINT_ZERO_ONE);
            }

        }
        return parsedValue;
    }","  public void test10()  throws Throwable  {
      PercentValidator percentValidator0 = new PercentValidator();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      percentValidator0.parse("""", decimalFormat0);
}"
1425,"    protected Object parse(String value, Format formatter) {

        // Initial parse of the value
        BigDecimal parsedValue = (BigDecimal)super.parse(value, formatter);
        if (parsedValue != null || !(formatter instanceof DecimalFormat)) {
            return parsedValue;
        }

        // Re-parse using a pattern without the percent symbol
        DecimalFormat decimalFormat = (DecimalFormat)formatter;
        String pattern = decimalFormat.toPattern();
        if (pattern.indexOf(PERCENT_SYMBOL) >= 0) {
            StringBuilder buffer = new StringBuilder(pattern.length());
            for (int i = 0; i < pattern.length(); i++) {
                if (pattern.charAt(i) != PERCENT_SYMBOL) {
                    buffer.append(pattern.charAt(i));
                }
            }
            decimalFormat.applyPattern(buffer.toString());
            parsedValue = (BigDecimal)super.parse(value, decimalFormat);

            // If parsed OK, divide by 100 to get percent
            if (parsedValue != null) {
                parsedValue = parsedValue.multiply(POINT_ZERO_ONE);
            }

        }
        return parsedValue;
    }","  public void test11()  throws Throwable  {
      PercentValidator percentValidator0 = new PercentValidator();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      percentValidator0.parse("""", decimalFormat0);
}"
1426,"    protected Object parse(String value, Format formatter) {

        // Initial parse of the value
        BigDecimal parsedValue = (BigDecimal)super.parse(value, formatter);
        if (parsedValue != null || !(formatter instanceof DecimalFormat)) {
            return parsedValue;
        }

        // Re-parse using a pattern without the percent symbol
        DecimalFormat decimalFormat = (DecimalFormat)formatter;
        String pattern = decimalFormat.toPattern();
        if (pattern.indexOf(PERCENT_SYMBOL) >= 0) {
            StringBuilder buffer = new StringBuilder(pattern.length());
            for (int i = 0; i < pattern.length(); i++) {
                if (pattern.charAt(i) != PERCENT_SYMBOL) {
                    buffer.append(pattern.charAt(i));
                }
            }
            decimalFormat.applyPattern(buffer.toString());
            parsedValue = (BigDecimal)super.parse(value, decimalFormat);

            // If parsed OK, divide by 100 to get percent
            if (parsedValue != null) {
                parsedValue = parsedValue.multiply(POINT_ZERO_ONE);
            }

        }
        return parsedValue;
    }","  public void test12()  throws Throwable  {
      PercentValidator percentValidator0 = new PercentValidator();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      Object object0 = percentValidator0.parse(""E'X3=i.bA7i"", numberFormat0);
}"
1427,"    protected Object parse(String value, Format formatter) {

        // Initial parse of the value
        BigDecimal parsedValue = (BigDecimal)super.parse(value, formatter);
        if (parsedValue != null || !(formatter instanceof DecimalFormat)) {
            return parsedValue;
        }

        // Re-parse using a pattern without the percent symbol
        DecimalFormat decimalFormat = (DecimalFormat)formatter;
        String pattern = decimalFormat.toPattern();
        if (pattern.indexOf(PERCENT_SYMBOL) >= 0) {
            StringBuilder buffer = new StringBuilder(pattern.length());
            for (int i = 0; i < pattern.length(); i++) {
                if (pattern.charAt(i) != PERCENT_SYMBOL) {
                    buffer.append(pattern.charAt(i));
                }
            }
            decimalFormat.applyPattern(buffer.toString());
            parsedValue = (BigDecimal)super.parse(value, decimalFormat);

            // If parsed OK, divide by 100 to get percent
            if (parsedValue != null) {
                parsedValue = parsedValue.multiply(POINT_ZERO_ONE);
            }

        }
        return parsedValue;
    }","  public void test13()  throws Throwable  {
      PercentValidator percentValidator0 = new PercentValidator();
      percentValidator0.validate(""aHoH?.0"", ""aHoH?.0"");
      percentValidator0.validate(""0.01"", ""aHoH?.0"", (Locale) null);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Object object0 = percentValidator0.parse(""aHoH?.0"", mockSimpleDateFormat0);
}"
1428,"    protected Object parse(String value, Format formatter) {

        // Initial parse of the value
        BigDecimal parsedValue = (BigDecimal)super.parse(value, formatter);
        if (parsedValue != null || !(formatter instanceof DecimalFormat)) {
            return parsedValue;
        }

        // Re-parse using a pattern without the percent symbol
        DecimalFormat decimalFormat = (DecimalFormat)formatter;
        String pattern = decimalFormat.toPattern();
        if (pattern.indexOf(PERCENT_SYMBOL) >= 0) {
            StringBuilder buffer = new StringBuilder(pattern.length());
            for (int i = 0; i < pattern.length(); i++) {
                if (pattern.charAt(i) != PERCENT_SYMBOL) {
                    buffer.append(pattern.charAt(i));
                }
            }
            decimalFormat.applyPattern(buffer.toString());
            parsedValue = (BigDecimal)super.parse(value, decimalFormat);

            // If parsed OK, divide by 100 to get percent
            if (parsedValue != null) {
                parsedValue = parsedValue.multiply(POINT_ZERO_ONE);
            }

        }
        return parsedValue;
    }","  public void test14()  throws Throwable  {
      PercentValidator percentValidator0 = (PercentValidator)PercentValidator.getInstance();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      percentValidator0.parse(""6"", """", locale0);
      BigDecimal bigDecimal0 = percentValidator0.validate(""org.apache.commons.validator.routines.PercentValidator"");
}"
1429,"    public boolean maxValue(BigDecimal value, double max) {
        return (value.doubleValue() <= max);
    }","  public void test0()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      BigDecimal bigDecimal0 = new BigDecimal((-3506L));
      boolean boolean0 = bigDecimalValidator0.maxValue(bigDecimal0, (double) (-3506L));
}"
1430,"    public boolean minValue(BigDecimal value, double min) {
        return (value.doubleValue() >= min);
    }","  public void test1()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = BigDecimalValidator.getInstance();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      boolean boolean0 = bigDecimalValidator0.minValue(bigDecimal0, 0.0);
}"
1431,"    public boolean isInRange(BigDecimal value, double min, double max) {
        return (value.doubleValue() >= min && value.doubleValue() <= max);
    }","  public void test2()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(false, (-1064), false);
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      boolean boolean0 = bigDecimalValidator0.isInRange(bigDecimal0, (double) (-1064), 134.9162554954775);
}"
1432,"    public BigDecimal validate(String value) {
        return (BigDecimal)parse(value, (String)null, (Locale)null);
    }","  public void test3()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      Locale locale0 = Locale.FRENCH;
      BigDecimal bigDecimal0 = bigDecimalValidator0.validate(""0"", locale0);
}"
1433,"    public BigDecimal validate(String value) {
        return (BigDecimal)parse(value, (String)null, (Locale)null);
    }","  public void test4()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(false, (-3615), false);
      Locale locale0 = Locale.FRANCE;
      BigDecimal bigDecimal0 = bigDecimalValidator0.validate(""2AC#;V%ZV&oVEH:I5hl"", locale0);
}"
1434,"    public BigDecimal validate(String value) {
        return (BigDecimal)parse(value, (String)null, (Locale)null);
    }","  public void test5()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = BigDecimalValidator.getInstance();
      BigDecimal bigDecimal0 = bigDecimalValidator0.validate(""m0X2I1+f"", ""m0X2I1+f"", (Locale) null);
}"
1435,"    public BigDecimal validate(String value) {
        return (BigDecimal)parse(value, (String)null, (Locale)null);
    }","  public void test6()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(false);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      BigDecimal bigDecimal0 = bigDecimalValidator0.validate(""9Qz`@25:G"", (String) null, locale0);
}"
1436,"    public BigDecimal validate(String value) {
        return (BigDecimal)parse(value, (String)null, (Locale)null);
    }","  public void test7()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(false);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      BigDecimal bigDecimal0 = bigDecimalValidator0.validate(""9Qz`@25:G"", (String) null, locale0);
}"
1437,"    public BigDecimal validate(String value) {
        return (BigDecimal)parse(value, (String)null, (Locale)null);
    }","  public void test8()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = BigDecimalValidator.getInstance();
      BigDecimal bigDecimal0 = bigDecimalValidator0.validate(""*w)KR'cVb_5B^+4$"", """");
}"
1438,"    public BigDecimal validate(String value) {
        return (BigDecimal)parse(value, (String)null, (Locale)null);
    }","  public void test9()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      BigDecimal bigDecimal0 = bigDecimalValidator0.validate(""1"", """");
}"
1439,"    public BigDecimal validate(String value) {
        return (BigDecimal)parse(value, (String)null, (Locale)null);
    }","  public void test10()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      BigDecimal bigDecimal0 = bigDecimalValidator0.validate(""1"", """");
}"
1440,"    public BigDecimal validate(String value) {
        return (BigDecimal)parse(value, (String)null, (Locale)null);
    }","  public void test11()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = BigDecimalValidator.getInstance();
      BigDecimal bigDecimal0 = bigDecimalValidator0.validate(""-672"");
}"
1441,"    public BigDecimal validate(String value) {
        return (BigDecimal)parse(value, (String)null, (Locale)null);
    }","  public void test12()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      BigDecimal bigDecimal0 = bigDecimalValidator0.validate(""0"");
}"
1442,"    public BigDecimal validate(String value) {
        return (BigDecimal)parse(value, (String)null, (Locale)null);
    }","  public void test13()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(false, 583, false);
      BigDecimal bigDecimal0 = bigDecimalValidator0.validate(""7,-GMf"");
}"
1443,"    protected Object processParsedValue(Object value, Format formatter) {
        BigDecimal decimal = null;
        if (value instanceof Long) {
            decimal = BigDecimal.valueOf(((Long)value).longValue());
        } else {
            decimal = new BigDecimal(value.toString());
        }

        int scale = determineScale((NumberFormat)formatter);
        if (scale >= 0) {
            decimal = decimal.setScale(scale, BigDecimal.ROUND_DOWN);
        }

        return decimal;
    }","  public void test14()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      Long long0 = new Long(0);
      Locale locale0 = Locale.CANADA_FRENCH;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      BigDecimal bigDecimal0 = (BigDecimal)bigDecimalValidator0.processParsedValue(long0, numberFormat0);
}"
1444,"    public BigDecimal validate(String value) {
        return (BigDecimal)parse(value, (String)null, (Locale)null);
    }","  public void test15()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        bigDecimalValidator0.validate(""M?g&/frA8Ye"", ""'4LeeR#~I^J5s}OoS"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \""'4LeeR#~I^J5s}OoS\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1445,"    public BigDecimal validate(String value) {
        return (BigDecimal)parse(value, (String)null, (Locale)null);
    }","  public void test16()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(false);
      // Undeclared exception!
      try { 
        bigDecimalValidator0.validate(""~YfENG+KU"", ""org.apache.commons.validator.routines.AbstractFormatValidator"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \""org.apache.commons.validator.routines.AbstractFormatValidator\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1446,"    protected Object processParsedValue(Object value, Format formatter) {
        BigDecimal decimal = null;
        if (value instanceof Long) {
            decimal = BigDecimal.valueOf(((Long)value).longValue());
        } else {
            decimal = new BigDecimal(value.toString());
        }

        int scale = determineScale((NumberFormat)formatter);
        if (scale >= 0) {
            decimal = decimal.setScale(scale, BigDecimal.ROUND_DOWN);
        }

        return decimal;
    }","  public void test17()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(false, (-1064), false);
      Locale locale0 = Locale.PRC;
      Format format0 = bigDecimalValidator0.getFormat(locale0);
      // Undeclared exception!
      try { 
        bigDecimalValidator0.processParsedValue(bigDecimalValidator0, format0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
1447,"    protected Object processParsedValue(Object value, Format formatter) {
        BigDecimal decimal = null;
        if (value instanceof Long) {
            decimal = BigDecimal.valueOf(((Long)value).longValue());
        } else {
            decimal = new BigDecimal(value.toString());
        }

        int scale = determineScale((NumberFormat)formatter);
        if (scale >= 0) {
            decimal = decimal.setScale(scale, BigDecimal.ROUND_DOWN);
        }

        return decimal;
    }","  public void test18()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(false, 0, true);
      Locale locale0 = new Locale(""pAl5.^w5wOJ|3F>"", """");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
      // Undeclared exception!
      try { 
        bigDecimalValidator0.processParsedValue((Object) null, mockSimpleDateFormat0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1448,"    protected Object processParsedValue(Object value, Format formatter) {
        BigDecimal decimal = null;
        if (value instanceof Long) {
            decimal = BigDecimal.valueOf(((Long)value).longValue());
        } else {
            decimal = new BigDecimal(value.toString());
        }

        int scale = determineScale((NumberFormat)formatter);
        if (scale >= 0) {
            decimal = decimal.setScale(scale, BigDecimal.ROUND_DOWN);
        }

        return decimal;
    }","  public void test19()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(true, 1581, true);
      Long long0 = new Long((-2878L));
      Locale locale0 = Locale.CHINESE;
      MessageFormat messageFormat0 = new MessageFormat(""org.apache.commons.validator.routines.AbstractFormatValidator"", locale0);
      // Undeclared exception!
      try { 
        bigDecimalValidator0.processParsedValue(long0, messageFormat0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.text.MessageFormat cannot be cast to java.text.NumberFormat
         //
         verifyException(""org.apache.commons.validator.routines.BigDecimalValidator"", e);
      }
  }"
1449,"    public boolean maxValue(BigDecimal value, double max) {
        return (value.doubleValue() <= max);
    }","  public void test20()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = BigDecimalValidator.getInstance();
      // Undeclared exception!
      try { 
        bigDecimalValidator0.maxValue((BigDecimal) null, 1886.9841);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.BigDecimalValidator"", e);
      }
  }"
1450,"    public boolean isInRange(BigDecimal value, double min, double max) {
        return (value.doubleValue() >= min && value.doubleValue() <= max);
    }","  public void test21()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = BigDecimalValidator.getInstance();
      // Undeclared exception!
      try { 
        bigDecimalValidator0.isInRange((BigDecimal) null, (double) 2, 0.0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.BigDecimalValidator"", e);
      }
  }"
1451,"    public boolean minValue(BigDecimal value, double min) {
        return (value.doubleValue() >= min);
    }","  public void test22()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(false, (-1949), true);
      // Undeclared exception!
      try { 
        bigDecimalValidator0.minValue((BigDecimal) null, (-1.0));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.BigDecimalValidator"", e);
      }
  }"
1452,"    public BigDecimal validate(String value) {
        return (BigDecimal)parse(value, (String)null, (Locale)null);
    }","  public void test23()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      Locale locale0 = Locale.FRENCH;
      BigDecimal bigDecimal0 = bigDecimalValidator0.validate(""-43"", locale0);
}"
1453,"    public BigDecimal validate(String value) {
        return (BigDecimal)parse(value, (String)null, (Locale)null);
    }","  public void test24()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      // Undeclared exception!
      try { 
        bigDecimalValidator0.validate(""-2.211"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
1454,"    public boolean maxValue(BigDecimal value, double max) {
        return (value.doubleValue() <= max);
    }","  public void test25()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = bigDecimalValidator0.maxValue(bigDecimal0, (double) 2);
}"
1455,"    public boolean maxValue(BigDecimal value, double max) {
        return (value.doubleValue() <= max);
    }","  public void test26()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = BigDecimalValidator.getInstance();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = bigDecimalValidator0.maxValue(bigDecimal0, (double) 1);
}"
1456,"    public boolean minValue(BigDecimal value, double min) {
        return (value.doubleValue() >= min);
    }","  public void test27()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      BigDecimal bigDecimal0 = new BigDecimal((long) 1);
      boolean boolean0 = bigDecimalValidator0.minValue(bigDecimal0, (double) 2);
}"
1457,"    public boolean isInRange(BigDecimal value, double min, double max) {
        return (value.doubleValue() >= min && value.doubleValue() <= max);
    }","  public void test28()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      BigDecimal bigDecimal0 = new BigDecimal((long) 1);
      boolean boolean0 = bigDecimalValidator0.isInRange(bigDecimal0, (double) 1, (double) 1);
}"
1458,"    public boolean isInRange(BigDecimal value, double min, double max) {
        return (value.doubleValue() >= min && value.doubleValue() <= max);
    }","  public void test29()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = bigDecimalValidator0.isInRange(bigDecimal0, (double) 0, (double) 0);
}"
1459,"    public boolean isInRange(BigDecimal value, double min, double max) {
        return (value.doubleValue() >= min && value.doubleValue() <= max);
    }","  public void test30()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = bigDecimalValidator0.isInRange(bigDecimal0, (double) 2, (double) 1);
}"
1460,"    public BigDecimal validate(String value) {
        return (BigDecimal)parse(value, (String)null, (Locale)null);
    }","  public void test31()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(false);
      BigDecimal bigDecimal0 = bigDecimalValidator0.validate(""org.apache.commons.validator.routines.BigDecimalValidator"");
}"
1461,"    public BigDecimal validate(String value) {
        return (BigDecimal)parse(value, (String)null, (Locale)null);
    }","  public void test32()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator(false);
      Locale locale0 = Locale.CANADA_FRENCH;
      BigDecimal bigDecimal0 = bigDecimalValidator0.validate((String) null, (String) null, locale0);
}"
1462,"    public BigDecimal validate(String value) {
        return (BigDecimal)parse(value, (String)null, (Locale)null);
    }","  public void test33()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      BigDecimal bigDecimal0 = bigDecimalValidator0.validate(""0)9\""$e31b"", ""0)9\""$e31b"");
}"
1463,"    public boolean minValue(BigDecimal value, double min) {
        return (value.doubleValue() >= min);
    }","  public void test34()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = BigDecimalValidator.getInstance();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = bigDecimalValidator0.minValue(bigDecimal0, (double) 0);
}"
1464,"    public BigDecimal validate(String value) {
        return (BigDecimal)parse(value, (String)null, (Locale)null);
    }","  public void test35()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = new BigDecimalValidator();
      Locale locale0 = Locale.US;
      BigDecimal bigDecimal0 = bigDecimalValidator0.validate(""0)9\""$e31b"", locale0);
}"
1465,"    public Object validate(String card) {
        if (card == null || card.length() == 0) {
            return null;
        }
        Object result = null;
        for (CodeValidator cardType : cardTypes) {
            result = cardType.validate(card);
            if (result != null) {
                return result;
            }
        }
        return null;

    }","  public void test0()  throws Throwable  {
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange0 = new CreditCardValidator.CreditCardRange(""TS\""i5"", ""org.apache.commons.validator.routines.checkdigit.ISINCheckDigit"", (-2182), (-2182));
      CodeValidator[] codeValidatorArray0 = new CodeValidator[4];
      CodeValidator codeValidator0 = CreditCardValidator.MASTERCARD_VALIDATOR_PRE_OCT2016;
      codeValidatorArray0[0] = codeValidator0;
      codeValidatorArray0[1] = codeValidatorArray0[0];
      codeValidatorArray0[2] = codeValidatorArray0[0];
      codeValidatorArray0[3] = codeValidator0;
      CreditCardValidator.CreditCardRange[] creditCardValidator_CreditCardRangeArray0 = new CreditCardValidator.CreditCardRange[6];
      creditCardValidator_CreditCardRangeArray0[0] = creditCardValidator_CreditCardRange0;
      creditCardValidator_CreditCardRangeArray0[1] = creditCardValidator_CreditCardRange0;
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange1 = new CreditCardValidator.CreditCardRange("""", ""K"", (-2182), 994);
      creditCardValidator_CreditCardRangeArray0[2] = creditCardValidator_CreditCardRange1;
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(codeValidatorArray0, creditCardValidator_CreditCardRangeArray0);
      Object object0 = creditCardValidator0.validate(""00"");
}"
1466,"    public boolean isValid(String card) {
        if (card == null || card.length() == 0) {
            return false;
        }
        for (CodeValidator cardType : cardTypes) {
            if (cardType.isValid(card)) {
                return true;
            }
        }
        return false;
    }","  public void test1()  throws Throwable  {
      CreditCardValidator.CreditCardRange[] creditCardValidator_CreditCardRangeArray0 = new CreditCardValidator.CreditCardRange[3];
      int[] intArray0 = new int[5];
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange0 = new CreditCardValidator.CreditCardRange(""00"", ""00"", intArray0);
      creditCardValidator_CreditCardRangeArray0[0] = creditCardValidator_CreditCardRange0;
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange1 = new CreditCardValidator.CreditCardRange(""00"", ""Invalid code, sum is zero"", (-224), 1337);
      creditCardValidator_CreditCardRangeArray0[1] = creditCardValidator_CreditCardRange1;
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(creditCardValidator_CreditCardRangeArray0);
      // Undeclared exception!
      try { 
        creditCardValidator0.isValid(""00"");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
1467,"    static boolean validLength(int valueLength, CreditCardRange range) {
        if (range.lengths != null) {
            for(int length : range.lengths) {
                if (valueLength == length) {
                    return true;
                }
            }
            return false;
        }
        return valueLength >= range.minLen && valueLength <= range.maxLen;
    }","  public void test2()  throws Throwable  {
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange0 = new CreditCardValidator.CreditCardRange(""_iV_-()C"", "".;nj;"", (-1913), 834);
      boolean boolean0 = CreditCardValidator.validLength(834, creditCardValidator_CreditCardRange0);
}"
1468,"    static boolean validLength(int valueLength, CreditCardRange range) {
        if (range.lengths != null) {
            for(int length : range.lengths) {
                if (valueLength == length) {
                    return true;
                }
            }
            return false;
        }
        return valueLength >= range.minLen && valueLength <= range.maxLen;
    }","  public void test3()  throws Throwable  {
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange0 = new CreditCardValidator.CreditCardRange(""f.B>)"", ""XGbD "", (-2144), 619);
      boolean boolean0 = CreditCardValidator.validLength((-2144), creditCardValidator_CreditCardRange0);
}"
1469,"    static boolean validLength(int valueLength, CreditCardRange range) {
        if (range.lengths != null) {
            for(int length : range.lengths) {
                if (valueLength == length) {
                    return true;
                }
            }
            return false;
        }
        return valueLength >= range.minLen && valueLength <= range.maxLen;
    }","  public void test4()  throws Throwable  {
      int[] intArray0 = new int[7];
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange0 = new CreditCardValidator.CreditCardRange("""", ""2Fc:?"", intArray0);
      boolean boolean0 = CreditCardValidator.validLength(2302, creditCardValidator_CreditCardRange0);
}"
1470,"    static CodeValidator createRangeValidator(final CreditCardRange[] creditCardRanges, final CheckDigit digitCheck ) {
        return new CodeValidator(
                // must be numeric (rest of validation is done later)
                new RegexValidator(""(\\d+)"") {
                    private static final long serialVersionUID = 1L;
                    private CreditCardRange[] ccr = creditCardRanges.clone();
                    @Override
                    // must return full string
                    public String validate(String value) {
                        if (super.match(value) != null) {
                            int length = value.length();
                            for(CreditCardRange range : ccr) {
                                if (validLength(length, range)) {
                                    if (range.high == null) { // single prefix only
                                        if (value.startsWith(range.low)) {
                                            return value;
                                        }
                                    } else if (range.low.compareTo(value) <= 0 // no need to trim value here
                                                &&
                                                // here we have to ignore digits beyond the prefix
                                                range.high.compareTo(value.substring(0, range.high.length())) >= 0) {
                                               return value;
                                    }
                                }
                            }
                        }
                        return null;
                    }
                    @Override
                    public boolean isValid(String value) {
                        return validate(value) != null;
                    }
                    @Override
                    public String[] match(String value) {
                        return new String[]{validate(value)};
                    }
                }, digitCheck);
    }","  public void test5()  throws Throwable  {
      CreditCardValidator.CreditCardRange[] creditCardValidator_CreditCardRangeArray0 = new CreditCardValidator.CreditCardRange[0];
      ABANumberCheckDigit aBANumberCheckDigit0 = new ABANumberCheckDigit();
      CodeValidator codeValidator0 = CreditCardValidator.createRangeValidator(creditCardValidator_CreditCardRangeArray0, aBANumberCheckDigit0);
}"
1471,"    public Object validate(String card) {
        if (card == null || card.length() == 0) {
            return null;
        }
        Object result = null;
        for (CodeValidator cardType : cardTypes) {
            result = cardType.validate(card);
            if (result != null) {
                return result;
            }
        }
        return null;

    }","  public void test6()  throws Throwable  {
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange0 = new CreditCardValidator.CreditCardRange(""TS\""i5"", ""org.apache.commons.validator.routines.checkdigit.ISINCheckDigit"", (-2182), (-2182));
      CodeValidator[] codeValidatorArray0 = new CodeValidator[4];
      CodeValidator codeValidator0 = CreditCardValidator.MASTERCARD_VALIDATOR_PRE_OCT2016;
      codeValidatorArray0[0] = codeValidator0;
      codeValidatorArray0[1] = codeValidator0;
      codeValidatorArray0[2] = codeValidatorArray0[0];
      codeValidatorArray0[3] = codeValidator0;
      CreditCardValidator.CreditCardRange[] creditCardValidator_CreditCardRangeArray0 = new CreditCardValidator.CreditCardRange[6];
      creditCardValidator_CreditCardRangeArray0[0] = creditCardValidator_CreditCardRange0;
      creditCardValidator_CreditCardRangeArray0[1] = creditCardValidator_CreditCardRangeArray0[0];
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange1 = new CreditCardValidator.CreditCardRange("""", ""org.apache.commons.validator.routines.checkdigit.ISINCheckDigit"", (-2182), 994);
      creditCardValidator_CreditCardRangeArray0[2] = creditCardValidator_CreditCardRange1;
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(codeValidatorArray0, creditCardValidator_CreditCardRangeArray0);
      // Undeclared exception!
      try { 
        creditCardValidator0.validate(""00"");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
1472,"    static boolean validLength(int valueLength, CreditCardRange range) {
        if (range.lengths != null) {
            for(int length : range.lengths) {
                if (valueLength == length) {
                    return true;
                }
            }
            return false;
        }
        return valueLength >= range.minLen && valueLength <= range.maxLen;
    }","  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        CreditCardValidator.validLength(1342, (CreditCardValidator.CreditCardRange) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.CreditCardValidator"", e);
      }
  }"
1473,"    public CreditCardValidator() {
        this(AMEX + VISA + MASTERCARD + DISCOVER);
    }","  public void test8()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = new CreditCardValidator((-2484L));
}"
1474,"    public CreditCardValidator() {
        this(AMEX + VISA + MASTERCARD + DISCOVER);
    }","  public void test9()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = new CreditCardValidator((-77L));
}"
1475,"    public static CreditCardValidator genericCreditCardValidator(int minLen, int maxLen) {
        return new CreditCardValidator(new CodeValidator[] {new CodeValidator(""(\\d+)"", minLen, maxLen, LUHN_VALIDATOR)});
    }","  public void test10()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = CreditCardValidator.genericCreditCardValidator(12, 12);
}"
1476,"    public Object validate(String card) {
        if (card == null || card.length() == 0) {
            return null;
        }
        Object result = null;
        for (CodeValidator cardType : cardTypes) {
            result = cardType.validate(card);
            if (result != null) {
                return result;
            }
        }
        return null;

    }","  public void test11()  throws Throwable  {
      CodeValidator[] codeValidatorArray0 = new CodeValidator[4];
      CodeValidator codeValidator0 = CreditCardValidator.DISCOVER_VALIDATOR;
      codeValidatorArray0[0] = codeValidator0;
      codeValidatorArray0[1] = codeValidator0;
      codeValidatorArray0[2] = codeValidator0;
      codeValidatorArray0[3] = codeValidator0;
      CreditCardValidator.CreditCardRange[] creditCardValidator_CreditCardRangeArray0 = new CreditCardValidator.CreditCardRange[4];
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange0 = new CreditCardValidator.CreditCardRange("""", """", (-2182), 994);
      creditCardValidator_CreditCardRangeArray0[0] = creditCardValidator_CreditCardRange0;
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(codeValidatorArray0, creditCardValidator_CreditCardRangeArray0);
      Object object0 = creditCardValidator0.validate(""00"");
}"
1477,"    public Object validate(String card) {
        if (card == null || card.length() == 0) {
            return null;
        }
        Object result = null;
        for (CodeValidator cardType : cardTypes) {
            result = cardType.validate(card);
            if (result != null) {
                return result;
            }
        }
        return null;

    }","  public void test12()  throws Throwable  {
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange0 = new CreditCardValidator.CreditCardRange(""(H]##["", ""(H]##["", (-2182), (-2182));
      CodeValidator[] codeValidatorArray0 = new CodeValidator[4];
      CodeValidator codeValidator0 = CreditCardValidator.MASTERCARD_VALIDATOR_PRE_OCT2016;
      codeValidatorArray0[0] = codeValidator0;
      codeValidatorArray0[1] = codeValidator0;
      codeValidatorArray0[2] = codeValidator0;
      codeValidatorArray0[3] = codeValidator0;
      CreditCardValidator.CreditCardRange[] creditCardValidator_CreditCardRangeArray0 = new CreditCardValidator.CreditCardRange[6];
      creditCardValidator_CreditCardRangeArray0[0] = creditCardValidator_CreditCardRange0;
      creditCardValidator_CreditCardRangeArray0[1] = creditCardValidator_CreditCardRange0;
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange1 = new CreditCardValidator.CreditCardRange(""/"", ""/"", (-2182), 968);
      creditCardValidator_CreditCardRangeArray0[2] = creditCardValidator_CreditCardRange1;
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(codeValidatorArray0, creditCardValidator_CreditCardRangeArray0);
      // Undeclared exception!
      try { 
        creditCardValidator0.validate(""00"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.CreditCardValidator"", e);
      }
  }"
1478,"    public Object validate(String card) {
        if (card == null || card.length() == 0) {
            return null;
        }
        Object result = null;
        for (CodeValidator cardType : cardTypes) {
            result = cardType.validate(card);
            if (result != null) {
                return result;
            }
        }
        return null;

    }","  public void test13()  throws Throwable  {
      CodeValidator[] codeValidatorArray0 = new CodeValidator[4];
      CodeValidator codeValidator0 = CreditCardValidator.AMEX_VALIDATOR;
      codeValidatorArray0[0] = codeValidator0;
      codeValidatorArray0[1] = codeValidator0;
      codeValidatorArray0[2] = codeValidator0;
      codeValidatorArray0[3] = codeValidator0;
      CreditCardValidator.CreditCardRange[] creditCardValidator_CreditCardRangeArray0 = new CreditCardValidator.CreditCardRange[6];
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange0 = new CreditCardValidator.CreditCardRange(""TS\""oi5"", ""TS\""oi5"", (-2182), (-2182));
      creditCardValidator_CreditCardRangeArray0[0] = creditCardValidator_CreditCardRange0;
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange1 = new CreditCardValidator.CreditCardRange(""TS\""oi5"", ""TS\""oi5"", (-2182), 994);
      creditCardValidator_CreditCardRangeArray0[1] = creditCardValidator_CreditCardRange1;
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(codeValidatorArray0, creditCardValidator_CreditCardRangeArray0);
      // Undeclared exception!
      try { 
        creditCardValidator0.validate(""00"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.CreditCardValidator"", e);
      }
  }"
1479,"    public Object validate(String card) {
        if (card == null || card.length() == 0) {
            return null;
        }
        Object result = null;
        for (CodeValidator cardType : cardTypes) {
            result = cardType.validate(card);
            if (result != null) {
                return result;
            }
        }
        return null;

    }","  public void test14()  throws Throwable  {
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange0 = new CreditCardValidator.CreditCardRange(""+"", ""+"", (-2182), (-2182));
      CreditCardValidator.CreditCardRange[] creditCardValidator_CreditCardRangeArray0 = new CreditCardValidator.CreditCardRange[6];
      creditCardValidator_CreditCardRangeArray0[0] = creditCardValidator_CreditCardRange0;
      creditCardValidator_CreditCardRangeArray0[1] = creditCardValidator_CreditCardRange0;
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange1 = new CreditCardValidator.CreditCardRange(""+"", (String) null, (-2182), 986);
      creditCardValidator_CreditCardRangeArray0[2] = creditCardValidator_CreditCardRange1;
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(creditCardValidator_CreditCardRangeArray0);
      // Undeclared exception!
      try { 
        creditCardValidator0.validate(""00"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.CreditCardValidator"", e);
      }
  }"
1480,"    public boolean isValid(String card) {
        if (card == null || card.length() == 0) {
            return false;
        }
        for (CodeValidator cardType : cardTypes) {
            if (cardType.isValid(card)) {
                return true;
            }
        }
        return false;
    }","  public void test15()  throws Throwable  {
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange0 = new CreditCardValidator.CreditCardRange(""-J5"", ""-J5"", (-2175), (-2175));
      CodeValidator[] codeValidatorArray0 = new CodeValidator[4];
      CodeValidator codeValidator0 = CreditCardValidator.MASTERCARD_VALIDATOR_PRE_OCT2016;
      codeValidatorArray0[0] = codeValidator0;
      codeValidatorArray0[1] = codeValidator0;
      codeValidatorArray0[2] = codeValidator0;
      codeValidatorArray0[3] = codeValidator0;
      CreditCardValidator.CreditCardRange[] creditCardValidator_CreditCardRangeArray0 = new CreditCardValidator.CreditCardRange[6];
      creditCardValidator_CreditCardRangeArray0[0] = creditCardValidator_CreditCardRange0;
      creditCardValidator_CreditCardRangeArray0[1] = creditCardValidator_CreditCardRange0;
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange1 = new CreditCardValidator.CreditCardRange(""-J5"", ""-J5"", (-2175), 994);
      creditCardValidator_CreditCardRangeArray0[2] = creditCardValidator_CreditCardRange1;
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(codeValidatorArray0, creditCardValidator_CreditCardRangeArray0);
      // Undeclared exception!
      try { 
        creditCardValidator0.isValid(""00"");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
1481,"    public boolean isValid(String card) {
        if (card == null || card.length() == 0) {
            return false;
        }
        for (CodeValidator cardType : cardTypes) {
            if (cardType.isValid(card)) {
                return true;
            }
        }
        return false;
    }","  public void test16()  throws Throwable  {
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange0 = new CreditCardValidator.CreditCardRange(""-J5"", ""-J5"", (-2175), (-2175));
      CodeValidator[] codeValidatorArray0 = new CodeValidator[4];
      CodeValidator codeValidator0 = CreditCardValidator.MASTERCARD_VALIDATOR_PRE_OCT2016;
      codeValidatorArray0[0] = codeValidator0;
      codeValidatorArray0[1] = codeValidator0;
      codeValidatorArray0[2] = codeValidator0;
      codeValidatorArray0[3] = codeValidator0;
      CreditCardValidator.CreditCardRange[] creditCardValidator_CreditCardRangeArray0 = new CreditCardValidator.CreditCardRange[6];
      creditCardValidator_CreditCardRangeArray0[0] = creditCardValidator_CreditCardRange0;
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(codeValidatorArray0, creditCardValidator_CreditCardRangeArray0);
      // Undeclared exception!
      try { 
        creditCardValidator0.isValid(""00"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.CreditCardValidator"", e);
      }
  }"
1482,"    static boolean validLength(int valueLength, CreditCardRange range) {
        if (range.lengths != null) {
            for(int length : range.lengths) {
                if (valueLength == length) {
                    return true;
                }
            }
            return false;
        }
        return valueLength >= range.minLen && valueLength <= range.maxLen;
    }","  public void test17()  throws Throwable  {
      int[] intArray0 = new int[25];
      intArray0[3] = (-1506);
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange0 = new CreditCardValidator.CreditCardRange(""00"", ""-J5"", intArray0);
      boolean boolean0 = CreditCardValidator.validLength((-1506), creditCardValidator_CreditCardRange0);
}"
1483,"    static boolean validLength(int valueLength, CreditCardRange range) {
        if (range.lengths != null) {
            for(int length : range.lengths) {
                if (valueLength == length) {
                    return true;
                }
            }
            return false;
        }
        return valueLength >= range.minLen && valueLength <= range.maxLen;
    }","  public void test18()  throws Throwable  {
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange0 = new CreditCardValidator.CreditCardRange((String) null, """", 12, (-1));
      boolean boolean0 = CreditCardValidator.validLength(8, creditCardValidator_CreditCardRange0);
}"
1484,"    public Object validate(String card) {
        if (card == null || card.length() == 0) {
            return null;
        }
        Object result = null;
        for (CodeValidator cardType : cardTypes) {
            result = cardType.validate(card);
            if (result != null) {
                return result;
            }
        }
        return null;

    }","  public void test19()  throws Throwable  {
      CodeValidator[] codeValidatorArray0 = new CodeValidator[7];
      CodeValidator codeValidator0 = new CodeValidator((RegexValidator) null, (-2144), (CheckDigit) null);
      codeValidatorArray0[0] = codeValidator0;
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(codeValidatorArray0);
      Object object0 = creditCardValidator0.validate(""f*B>)"");
}"
1485,"    public Object validate(String card) {
        if (card == null || card.length() == 0) {
            return null;
        }
        Object result = null;
        for (CodeValidator cardType : cardTypes) {
            result = cardType.validate(card);
            if (result != null) {
                return result;
            }
        }
        return null;

    }","  public void test20()  throws Throwable  {
      CreditCardValidator.CreditCardRange[] creditCardValidator_CreditCardRangeArray0 = new CreditCardValidator.CreditCardRange[0];
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(creditCardValidator_CreditCardRangeArray0);
      Object object0 = creditCardValidator0.validate(""AyY''|:>W*_LDSr&<"");
}"
1486,"    public Object validate(String card) {
        if (card == null || card.length() == 0) {
            return null;
        }
        Object result = null;
        for (CodeValidator cardType : cardTypes) {
            result = cardType.validate(card);
            if (result != null) {
                return result;
            }
        }
        return null;

    }","  public void test21()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = new CreditCardValidator();
      Object object0 = creditCardValidator0.validate("""");
}"
1487,"    public Object validate(String card) {
        if (card == null || card.length() == 0) {
            return null;
        }
        Object result = null;
        for (CodeValidator cardType : cardTypes) {
            result = cardType.validate(card);
            if (result != null) {
                return result;
            }
        }
        return null;

    }","  public void test22()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = new CreditCardValidator();
      Object object0 = creditCardValidator0.validate((String) null);
}"
1488,"    public boolean isValid(String card) {
        if (card == null || card.length() == 0) {
            return false;
        }
        for (CodeValidator cardType : cardTypes) {
            if (cardType.isValid(card)) {
                return true;
            }
        }
        return false;
    }","  public void test23()  throws Throwable  {
      CodeValidator[] codeValidatorArray0 = new CodeValidator[7];
      CodeValidator codeValidator0 = new CodeValidator((RegexValidator) null, (-2144), (CheckDigit) null);
      codeValidatorArray0[0] = codeValidator0;
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(codeValidatorArray0);
      boolean boolean0 = creditCardValidator0.isValid(""f*B>)"");
}"
1489,"    public boolean isValid(String card) {
        if (card == null || card.length() == 0) {
            return false;
        }
        for (CodeValidator cardType : cardTypes) {
            if (cardType.isValid(card)) {
                return true;
            }
        }
        return false;
    }","  public void test24()  throws Throwable  {
      CreditCardValidator.CreditCardRange[] creditCardValidator_CreditCardRangeArray0 = new CreditCardValidator.CreditCardRange[0];
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(creditCardValidator_CreditCardRangeArray0);
      boolean boolean0 = creditCardValidator0.isValid(""01"");
}"
1490,"    public boolean isValid(String card) {
        if (card == null || card.length() == 0) {
            return false;
        }
        for (CodeValidator cardType : cardTypes) {
            if (cardType.isValid(card)) {
                return true;
            }
        }
        return false;
    }","  public void test25()  throws Throwable  {
      CodeValidator[] codeValidatorArray0 = new CodeValidator[7];
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(codeValidatorArray0);
      boolean boolean0 = creditCardValidator0.isValid("""");
}"
1491,"    public CreditCardValidator() {
        this(AMEX + VISA + MASTERCARD + DISCOVER);
    }","  public void test26()  throws Throwable  {
      CodeValidator[] codeValidatorArray0 = new CodeValidator[5];
      CreditCardValidator creditCardValidator0 = null;
      try {
        creditCardValidator0 = new CreditCardValidator(codeValidatorArray0, (CreditCardValidator.CreditCardRange[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Card ranges are missing
         //
         verifyException(""org.apache.commons.validator.routines.CreditCardValidator"", e);
      }
  }"
1492,"    public CreditCardValidator() {
        this(AMEX + VISA + MASTERCARD + DISCOVER);
    }","  public void test27()  throws Throwable  {
      CreditCardValidator.CreditCardRange[] creditCardValidator_CreditCardRangeArray0 = new CreditCardValidator.CreditCardRange[11];
      CreditCardValidator creditCardValidator0 = null;
      try {
        creditCardValidator0 = new CreditCardValidator((CodeValidator[]) null, creditCardValidator_CreditCardRangeArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Card validators are missing
         //
         verifyException(""org.apache.commons.validator.routines.CreditCardValidator"", e);
      }
  }"
1493,"    public CreditCardValidator() {
        this(AMEX + VISA + MASTERCARD + DISCOVER);
    }","  public void test28()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = null;
      try {
        creditCardValidator0 = new CreditCardValidator((CreditCardValidator.CreditCardRange[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Card ranges are missing
         //
         verifyException(""org.apache.commons.validator.routines.CreditCardValidator"", e);
      }
  }"
1494,"    public CreditCardValidator() {
        this(AMEX + VISA + MASTERCARD + DISCOVER);
    }","  public void test29()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = null;
      try {
        creditCardValidator0 = new CreditCardValidator((CodeValidator[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Card validators are missing
         //
         verifyException(""org.apache.commons.validator.routines.CreditCardValidator"", e);
      }
  }"
1495,"    public Object validate(String card) {
        if (card == null || card.length() == 0) {
            return null;
        }
        Object result = null;
        for (CodeValidator cardType : cardTypes) {
            result = cardType.validate(card);
            if (result != null) {
                return result;
            }
        }
        return null;

    }","  public void test30()  throws Throwable  {
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange0 = new CreditCardValidator.CreditCardRange("""", """", (-2182), (-2182));
      CreditCardValidator.CreditCardRange[] creditCardValidator_CreditCardRangeArray0 = new CreditCardValidator.CreditCardRange[6];
      creditCardValidator_CreditCardRangeArray0[0] = creditCardValidator_CreditCardRange0;
      creditCardValidator_CreditCardRangeArray0[1] = creditCardValidator_CreditCardRange0;
      CreditCardValidator.CreditCardRange creditCardValidator_CreditCardRange1 = new CreditCardValidator.CreditCardRange("""", (String) null, (-2182), 986);
      creditCardValidator_CreditCardRangeArray0[2] = creditCardValidator_CreditCardRange1;
      CreditCardValidator creditCardValidator0 = new CreditCardValidator(creditCardValidator_CreditCardRangeArray0);
      Object object0 = creditCardValidator0.validate(""00"");
}"
1496,"    public static CreditCardValidator genericCreditCardValidator(int minLen, int maxLen) {
        return new CreditCardValidator(new CodeValidator[] {new CodeValidator(""(\\d+)"", minLen, maxLen, LUHN_VALIDATOR)});
    }","  public void test31()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = CreditCardValidator.genericCreditCardValidator((-2182));
}"
1497,"    public boolean isValid(String card) {
        if (card == null || card.length() == 0) {
            return false;
        }
        for (CodeValidator cardType : cardTypes) {
            if (cardType.isValid(card)) {
                return true;
            }
        }
        return false;
    }","  public void test32()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = new CreditCardValidator();
      boolean boolean0 = creditCardValidator0.isValid((String) null);
}"
1498,"    static CodeValidator createRangeValidator(final CreditCardRange[] creditCardRanges, final CheckDigit digitCheck ) {
        return new CodeValidator(
                // must be numeric (rest of validation is done later)
                new RegexValidator(""(\\d+)"") {
                    private static final long serialVersionUID = 1L;
                    private CreditCardRange[] ccr = creditCardRanges.clone();
                    @Override
                    // must return full string
                    public String validate(String value) {
                        if (super.match(value) != null) {
                            int length = value.length();
                            for(CreditCardRange range : ccr) {
                                if (validLength(length, range)) {
                                    if (range.high == null) { // single prefix only
                                        if (value.startsWith(range.low)) {
                                            return value;
                                        }
                                    } else if (range.low.compareTo(value) <= 0 // no need to trim value here
                                                &&
                                                // here we have to ignore digits beyond the prefix
                                                range.high.compareTo(value.substring(0, range.high.length())) >= 0) {
                                               return value;
                                    }
                                }
                            }
                        }
                        return null;
                    }
                    @Override
                    public boolean isValid(String value) {
                        return validate(value) != null;
                    }
                    @Override
                    public String[] match(String value) {
                        return new String[]{validate(value)};
                    }
                }, digitCheck);
    }","  public void test33()  throws Throwable  {
      IBANCheckDigit iBANCheckDigit0 = (IBANCheckDigit)IBANCheckDigit.IBAN_CHECK_DIGIT;
      // Undeclared exception!
      try { 
        CreditCardValidator.createRangeValidator((CreditCardValidator.CreditCardRange[]) null, iBANCheckDigit0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.CreditCardValidator$1"", e);
      }
  }"
1499,"    public static CreditCardValidator genericCreditCardValidator(int minLen, int maxLen) {
        return new CreditCardValidator(new CodeValidator[] {new CodeValidator(""(\\d+)"", minLen, maxLen, LUHN_VALIDATOR)});
    }","  public void test34()  throws Throwable  {
      CreditCardValidator creditCardValidator0 = CreditCardValidator.genericCreditCardValidator();
}"
1500,"    protected int compareQuarters(Calendar value, Calendar compare, int monthOfFirstQuarter) {
        int valueQuarter   = calculateQuarter(value, monthOfFirstQuarter);
        int compareQuarter = calculateQuarter(compare, monthOfFirstQuarter);
        if (valueQuarter < compareQuarter) {
            return -1;
        } else if (valueQuarter > compareQuarter) {
            return 1;
        } else {
            return 0;
        }
    }","  public void test0()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateValidator dateValidator0 = DateValidator.getInstance();
      MockDate mockDate0 = new MockDate(2035);
      dateValidator0.compareQuarters((Date) mockDate0, (Date) mockDate0, timeZone0);
  }"
1501,"    protected int compareTime(Calendar value, Calendar compare, int field) {

        int result = 0;

        // Compare Hour
        result = calculateCompareResult(value, compare, Calendar.HOUR_OF_DAY);
        if (result != 0 || (field == Calendar.HOUR || field == Calendar.HOUR_OF_DAY)) {
            return result;
        }

        // Compare Minute
        result = calculateCompareResult(value, compare, Calendar.MINUTE);
        if (result != 0 || field == Calendar.MINUTE) {
            return result;
        }

        // Compare Second
        result = calculateCompareResult(value, compare, Calendar.SECOND);
        if (result != 0 || field == Calendar.SECOND) {
            return result;
        }

        // Compare Milliseconds
        if (field == Calendar.MILLISECOND) {
            return calculateCompareResult(value, compare, Calendar.MILLISECOND);
        }

        throw new IllegalArgumentException(""Invalid field: "" + field);

    }","  public void test1()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.ROOT;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
      TimeValidator timeValidator0 = new TimeValidator();
      timeValidator0.compareTime(mockGregorianCalendar1, mockGregorianCalendar0);
  }"
1502,"    protected int compareTime(Calendar value, Calendar compare, int field) {

        int result = 0;

        // Compare Hour
        result = calculateCompareResult(value, compare, Calendar.HOUR_OF_DAY);
        if (result != 0 || (field == Calendar.HOUR || field == Calendar.HOUR_OF_DAY)) {
            return result;
        }

        // Compare Minute
        result = calculateCompareResult(value, compare, Calendar.MINUTE);
        if (result != 0 || field == Calendar.MINUTE) {
            return result;
        }

        // Compare Second
        result = calculateCompareResult(value, compare, Calendar.SECOND);
        if (result != 0 || field == Calendar.SECOND) {
            return result;
        }

        // Compare Milliseconds
        if (field == Calendar.MILLISECOND) {
            return calculateCompareResult(value, compare, Calendar.MILLISECOND);
        }

        throw new IllegalArgumentException(""Invalid field: "" + field);

    }","  public void test2()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), (-1), (-1), (-1), (-1), (-1));
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1), (-1), (-1), (-1), (-1));
      timeValidator0.compareTime(mockGregorianCalendar1, mockGregorianCalendar0);
  }"
1503,,"  public void test3()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(false, 0);
      Locale locale0 = Locale.JAPANESE;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      calendar0.setTimeInMillis(0L);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      timeValidator0.compareHours(calendar0, mockGregorianCalendar0);
  }"
1504,"    protected int compare(Calendar value, Calendar compare, int field) {

        int result = 0;

        // Compare Year
        result = calculateCompareResult(value, compare, Calendar.YEAR);
        if (result != 0 || field == Calendar.YEAR) {
            return result;
        }

        // Compare Week of Year
        if (field == Calendar.WEEK_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_YEAR);
        }

        // Compare Day of the Year
        if (field == Calendar.DAY_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.DAY_OF_YEAR);
        }

        // Compare Month
        result = calculateCompareResult(value, compare, Calendar.MONTH);
        if (result != 0 || field == Calendar.MONTH) {
            return result;
        }

        // Compare Week of Month
        if (field == Calendar.WEEK_OF_MONTH) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_MONTH);
        }

        // Compare Date
        result = calculateCompareResult(value, compare, Calendar.DATE);
        if (result != 0 || (field == Calendar.DATE ||
                          field == Calendar.DAY_OF_WEEK ||
                          field == Calendar.DAY_OF_WEEK_IN_MONTH)) {
            return result;
        }

        // Compare Time fields
        return compareTime(value, compare, field);

    }","  public void test4()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = new Locale(""org.apache.commons.validator.routines.AbstractCalendarValidator"");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.set(0, 5, 0, 1282, 12, (-1101));
      mockGregorianCalendar1.set(12, 0, (-2241));
      mockGregorianCalendar0.set(0, 0, (-1179));
      int int0 = timeValidator0.compare(mockGregorianCalendar0, mockGregorianCalendar1, (-2241));
}"
1505,"    protected int compare(Calendar value, Calendar compare, int field) {

        int result = 0;

        // Compare Year
        result = calculateCompareResult(value, compare, Calendar.YEAR);
        if (result != 0 || field == Calendar.YEAR) {
            return result;
        }

        // Compare Week of Year
        if (field == Calendar.WEEK_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_YEAR);
        }

        // Compare Day of the Year
        if (field == Calendar.DAY_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.DAY_OF_YEAR);
        }

        // Compare Month
        result = calculateCompareResult(value, compare, Calendar.MONTH);
        if (result != 0 || field == Calendar.MONTH) {
            return result;
        }

        // Compare Week of Month
        if (field == Calendar.WEEK_OF_MONTH) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_MONTH);
        }

        // Compare Date
        result = calculateCompareResult(value, compare, Calendar.DATE);
        if (result != 0 || (field == Calendar.DATE ||
                          field == Calendar.DAY_OF_WEEK ||
                          field == Calendar.DAY_OF_WEEK_IN_MONTH)) {
            return result;
        }

        // Compare Time fields
        return compareTime(value, compare, field);

    }","  public void test5()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 4, 4, 4, 4, 4);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(4, 4, 4, 4, 4);
      int int0 = timeValidator0.compare(mockGregorianCalendar0, mockGregorianCalendar1, 4);
}"
1506,"    protected int compare(Calendar value, Calendar compare, int field) {

        int result = 0;

        // Compare Year
        result = calculateCompareResult(value, compare, Calendar.YEAR);
        if (result != 0 || field == Calendar.YEAR) {
            return result;
        }

        // Compare Week of Year
        if (field == Calendar.WEEK_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_YEAR);
        }

        // Compare Day of the Year
        if (field == Calendar.DAY_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.DAY_OF_YEAR);
        }

        // Compare Month
        result = calculateCompareResult(value, compare, Calendar.MONTH);
        if (result != 0 || field == Calendar.MONTH) {
            return result;
        }

        // Compare Week of Month
        if (field == Calendar.WEEK_OF_MONTH) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_MONTH);
        }

        // Compare Date
        result = calculateCompareResult(value, compare, Calendar.DATE);
        if (result != 0 || (field == Calendar.DATE ||
                          field == Calendar.DAY_OF_WEEK ||
                          field == Calendar.DAY_OF_WEEK_IN_MONTH)) {
            return result;
        }

        // Compare Time fields
        return compareTime(value, compare, field);

    }","  public void test6()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = new Locale(""org.apache.commons.validator.routines.AbstractCalendarValidator"");
      Calendar calendar0 = MockCalendar.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.set(12, 0, (-2241));
      calendar0.set(0, 0, (-1185));
      int int0 = timeValidator0.compare(calendar0, mockGregorianCalendar0, 2640);
}"
1507,"    protected int compare(Calendar value, Calendar compare, int field) {

        int result = 0;

        // Compare Year
        result = calculateCompareResult(value, compare, Calendar.YEAR);
        if (result != 0 || field == Calendar.YEAR) {
            return result;
        }

        // Compare Week of Year
        if (field == Calendar.WEEK_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_YEAR);
        }

        // Compare Day of the Year
        if (field == Calendar.DAY_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.DAY_OF_YEAR);
        }

        // Compare Month
        result = calculateCompareResult(value, compare, Calendar.MONTH);
        if (result != 0 || field == Calendar.MONTH) {
            return result;
        }

        // Compare Week of Month
        if (field == Calendar.WEEK_OF_MONTH) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_MONTH);
        }

        // Compare Date
        result = calculateCompareResult(value, compare, Calendar.DATE);
        if (result != 0 || (field == Calendar.DATE ||
                          field == Calendar.DAY_OF_WEEK ||
                          field == Calendar.DAY_OF_WEEK_IN_MONTH)) {
            return result;
        }

        // Compare Time fields
        return compareTime(value, compare, field);

    }","  public void test7()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(6, 6, 6, 6, 6, 6);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(6, 6, 6, 6, 6);
      int int0 = timeValidator0.compare(mockGregorianCalendar0, mockGregorianCalendar1, 6);
}"
1508,"    protected Object parse(String value, String pattern, Locale locale, TimeZone timeZone) {

        value = (value == null ? null : value.trim());
        if (value == null || value.length() == 0) {
            return null;
        }
        DateFormat formatter = (DateFormat)getFormat(pattern, locale);
        if (timeZone != null) {
            formatter.setTimeZone(timeZone);
        }
        return parse(value, formatter);

    }","  public void test8()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 610);
      MockDate mockDate0 = new MockDate(0, (-1), 5);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = mockSimpleDateFormat0.parse(""nH0-X6kP6a[{"", parsePosition0);
      TimeZone timeZone0 = TimeZone.getTimeZone(""org.apache.commons.validator.routines.TimeValidator"");
      int int0 = dateValidator0.compareMonths(mockDate0, date0, timeZone0);
}"
1509,"    public String format(Object value, TimeZone timeZone) {
        return format(value, (String)null, (Locale)null, timeZone);
    }","  public void test9()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      TimeValidator timeValidator0 = new TimeValidator(true, 0);
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        timeValidator0.format((Object) calendarValidator0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
         verifyException(""java.text.DateFormat"", e);
      }
  }"
1510,,"  public void test10()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""R'H*+r8b5ka#tQ8ju"");
      Calendar calendar0 = calendarValidator0.validate(""6b@A'>/t"", (TimeZone) simpleTimeZone0);
}"
1511,"    public boolean isValid(String value, String pattern, Locale locale) {
        Object parsedValue = parse(value, pattern, locale, (TimeZone)null);
        return (parsedValue == null ? false : true);
    }","  public void test11()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      boolean boolean0 = timeValidator0.isValid("""");
}"
1512,"    protected Object parse(String value, String pattern, Locale locale, TimeZone timeZone) {

        value = (value == null ? null : value.trim());
        if (value == null || value.length() == 0) {
            return null;
        }
        DateFormat formatter = (DateFormat)getFormat(pattern, locale);
        if (timeZone != null) {
            formatter.setTimeZone(timeZone);
        }
        return parse(value, formatter);

    }","  public void test12()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""R'H*+r8b5ka#tQ8ju"");
      Locale locale0 = new Locale(""org.apache.commons.validator.routines.AbstractCalendarValidator"");
      Object object0 = timeValidator0.parse(""iDwv:vh;?Y j"", (String) null, locale0, simpleTimeZone0);
}"
1513,"    protected Object parse(String value, String pattern, Locale locale, TimeZone timeZone) {

        value = (value == null ? null : value.trim());
        if (value == null || value.length() == 0) {
            return null;
        }
        DateFormat formatter = (DateFormat)getFormat(pattern, locale);
        if (timeZone != null) {
            formatter.setTimeZone(timeZone);
        }
        return parse(value, formatter);

    }","  public void test13()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getTimeZone(""2/14/14"");
      Object object0 = calendarValidator0.parse(""2/14/14"", ""2/14/14"", locale0, timeZone0);
}"
1514,"    protected Object parse(String value, String pattern, Locale locale, TimeZone timeZone) {

        value = (value == null ? null : value.trim());
        if (value == null || value.length() == 0) {
            return null;
        }
        DateFormat formatter = (DateFormat)getFormat(pattern, locale);
        if (timeZone != null) {
            formatter.setTimeZone(timeZone);
        }
        return parse(value, formatter);

    }","  public void test14()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getTimeZone(""2/14/14"");
      Object object0 = calendarValidator0.parse(""2/14/14"", ""2/14/14"", locale0, timeZone0);
}"
1515,"    protected Format getFormat(String pattern, Locale locale) {
        DateFormat formatter = null;
        boolean usePattern = (pattern != null && pattern.length() > 0);
        if (!usePattern) {
            formatter = (DateFormat)getFormat(locale);
        } else if (locale == null) {
            formatter = new SimpleDateFormat(pattern);
        } else {
            DateFormatSymbols symbols = new DateFormatSymbols(locale);
            formatter = new SimpleDateFormat(pattern, symbols);
        }
        formatter.setLenient(false);
        return formatter;
    }","  public void test15()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.GERMAN;
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)timeValidator0.getFormat("""", locale0);
}"
1516,"    protected Format getFormat(String pattern, Locale locale) {
        DateFormat formatter = null;
        boolean usePattern = (pattern != null && pattern.length() > 0);
        if (!usePattern) {
            formatter = (DateFormat)getFormat(locale);
        } else if (locale == null) {
            formatter = new SimpleDateFormat(pattern);
        } else {
            DateFormatSymbols symbols = new DateFormatSymbols(locale);
            formatter = new SimpleDateFormat(pattern, symbols);
        }
        formatter.setLenient(false);
        return formatter;
    }","  public void test16()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.GERMAN;
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)timeValidator0.getFormat("""", locale0);
}"
1517,"    public String format(Object value, TimeZone timeZone) {
        return format(value, (String)null, (Locale)null, timeZone);
    }","  public void test17()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, (-2901));
      TimeZone timeZone0 = TimeZone.getDefault();
      String string0 = calendarValidator0.format((Object) null, timeZone0);
}"
1518,"    public String format(Object value, TimeZone timeZone) {
        return format(value, (String)null, (Locale)null, timeZone);
    }","  public void test18()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      String string0 = calendarValidator0.format((Object) calendar0, timeZone0);
}"
1519,"    public String format(Object value, TimeZone timeZone) {
        return format(value, (String)null, (Locale)null, timeZone);
    }","  public void test19()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.CANADA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      String string0 = timeValidator0.format((Object) mockGregorianCalendar0, locale0, (TimeZone) null);
}"
1520,"    public String format(Object value, TimeZone timeZone) {
        return format(value, (String)null, (Locale)null, timeZone);
    }","  public void test20()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
      Object object0 = timeValidator0.processParsedValue(mockSimpleDateFormat0, mockSimpleDateFormat0);
      String string0 = timeValidator0.format(object0, (Format) mockSimpleDateFormat0);
}"
1521,"    public String format(Object value, TimeZone timeZone) {
        return format(value, (String)null, (Locale)null, timeZone);
    }","  public void test21()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      TimeZone timeZone0 = TimeZone.getDefault();
      String string0 = calendarValidator0.format((Object) null, """", timeZone0);
}"
1522,"    public String format(Object value, TimeZone timeZone) {
        return format(value, (String)null, (Locale)null, timeZone);
    }","  public void test22()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      MockDate mockDate0 = new MockDate(5, 1641, 1641, (-296), 2634);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      String string0 = dateValidator0.format((Object) mockDate0, (String) null, timeZone0);
}"
1523,"    public String format(Object value, TimeZone timeZone) {
        return format(value, (String)null, (Locale)null, timeZone);
    }","  public void test23()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      Locale locale0 = Locale.JAPAN;
      String string0 = dateValidator0.format((Object) null, """", locale0);
}"
1524,"    public String format(Object value, TimeZone timeZone) {
        return format(value, (String)null, (Locale)null, timeZone);
    }","  public void test24()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String string0 = calendarValidator0.format((Object) mockGregorianCalendar0, ""^]M"", (Locale) null);
}"
1525,"    protected int compareTime(Calendar value, Calendar compare, int field) {

        int result = 0;

        // Compare Hour
        result = calculateCompareResult(value, compare, Calendar.HOUR_OF_DAY);
        if (result != 0 || (field == Calendar.HOUR || field == Calendar.HOUR_OF_DAY)) {
            return result;
        }

        // Compare Minute
        result = calculateCompareResult(value, compare, Calendar.MINUTE);
        if (result != 0 || field == Calendar.MINUTE) {
            return result;
        }

        // Compare Second
        result = calculateCompareResult(value, compare, Calendar.SECOND);
        if (result != 0 || field == Calendar.SECOND) {
            return result;
        }

        // Compare Milliseconds
        if (field == Calendar.MILLISECOND) {
            return calculateCompareResult(value, compare, Calendar.MILLISECOND);
        }

        throw new IllegalArgumentException(""Invalid field: "" + field);

    }","  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      TimeValidator timeValidator0 = new TimeValidator(false, (-1));
      int int0 = timeValidator0.compareTime(calendar0, calendar0, 14);
}"
1526,"    protected int compareTime(Calendar value, Calendar compare, int field) {

        int result = 0;

        // Compare Hour
        result = calculateCompareResult(value, compare, Calendar.HOUR_OF_DAY);
        if (result != 0 || (field == Calendar.HOUR || field == Calendar.HOUR_OF_DAY)) {
            return result;
        }

        // Compare Minute
        result = calculateCompareResult(value, compare, Calendar.MINUTE);
        if (result != 0 || field == Calendar.MINUTE) {
            return result;
        }

        // Compare Second
        result = calculateCompareResult(value, compare, Calendar.SECOND);
        if (result != 0 || field == Calendar.SECOND) {
            return result;
        }

        // Compare Milliseconds
        if (field == Calendar.MILLISECOND) {
            return calculateCompareResult(value, compare, Calendar.MILLISECOND);
        }

        throw new IllegalArgumentException(""Invalid field: "" + field);

    }","  public void test26()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(59, 59, 59, 59, 59, 59);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(59, 59, 59, 59, 59);
      int int0 = timeValidator0.compareTime(mockGregorianCalendar1, mockGregorianCalendar0, 1);
}"
1527,"    protected int compareQuarters(Calendar value, Calendar compare, int monthOfFirstQuarter) {
        int valueQuarter   = calculateQuarter(value, monthOfFirstQuarter);
        int compareQuarter = calculateQuarter(compare, monthOfFirstQuarter);
        if (valueQuarter < compareQuarter) {
            return -1;
        } else if (valueQuarter > compareQuarter) {
            return 1;
        } else {
            return 0;
        }
    }","  public void test27()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 11, (-3914), (-3914), (-3914));
      int int0 = timeValidator0.compareQuarters(mockGregorianCalendar0, mockGregorianCalendar0, 0);
}"
1528,"    protected int compareQuarters(Calendar value, Calendar compare, int monthOfFirstQuarter) {
        int valueQuarter   = calculateQuarter(value, monthOfFirstQuarter);
        int compareQuarter = calculateQuarter(compare, monthOfFirstQuarter);
        if (valueQuarter < compareQuarter) {
            return -1;
        } else if (valueQuarter > compareQuarter) {
            return 1;
        } else {
            return 0;
        }
    }","  public void test28()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = new Locale(""org.apache.commons.validator.routines.AbstractCalendarValidator"");
      Calendar calendar0 = MockCalendar.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.set((-1846), 0, (-2241));
      int int0 = timeValidator0.compareQuarters(mockGregorianCalendar0, calendar0, 704);
}"
1529,"    protected int compareQuarters(Calendar value, Calendar compare, int monthOfFirstQuarter) {
        int valueQuarter   = calculateQuarter(value, monthOfFirstQuarter);
        int compareQuarter = calculateQuarter(compare, monthOfFirstQuarter);
        if (valueQuarter < compareQuarter) {
            return -1;
        } else if (valueQuarter > compareQuarter) {
            return 1;
        } else {
            return 0;
        }
    }","  public void test29()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = new Locale(""org.apache.commons.validator.routines.AbstractCalendarValidator"");
      Calendar calendar0 = MockCalendar.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.set((-1846), 0, (-2241));
      int int0 = timeValidator0.compareQuarters(mockGregorianCalendar0, calendar0, 704);
}"
1530,"    protected Object parse(String value, String pattern, Locale locale, TimeZone timeZone) {

        value = (value == null ? null : value.trim());
        if (value == null || value.length() == 0) {
            return null;
        }
        DateFormat formatter = (DateFormat)getFormat(pattern, locale);
        if (timeZone != null) {
            formatter.setTimeZone(timeZone);
        }
        return parse(value, formatter);

    }","  public void test30()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      TimeZone timeZone0 = TimeZone.getDefault();
      DateValidator dateValidator0 = DateValidator.getInstance();
      // Undeclared exception!
      try { 
        dateValidator0.parse(""/#XnG."", ""X*m]{?_t^ZM44n}_(J"", locale0, timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 't'
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
1531,"    public boolean isValid(String value, String pattern, Locale locale) {
        Object parsedValue = parse(value, pattern, locale, (TimeZone)null);
        return (parsedValue == null ? false : true);
    }","  public void test31()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        calendarValidator0.isValid(""org.apache.commons.validator.routines.TimeValidator"", ""org.apache.commons.validator.routines.TimeValidator"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
1532,"    protected Format getFormat(String pattern, Locale locale) {
        DateFormat formatter = null;
        boolean usePattern = (pattern != null && pattern.length() > 0);
        if (!usePattern) {
            formatter = (DateFormat)getFormat(locale);
        } else if (locale == null) {
            formatter = new SimpleDateFormat(pattern);
        } else {
            DateFormatSymbols symbols = new DateFormatSymbols(locale);
            formatter = new SimpleDateFormat(pattern, symbols);
        }
        formatter.setLenient(false);
        return formatter;
    }","  public void test32()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(false, 54);
      Locale locale0 = new Locale(""Z<"", ""Z<"", ""Z<"");
      // Undeclared exception!
      try { 
        timeValidator0.getFormat(locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 54
         //
         verifyException(""java.text.DateFormat"", e);
      }
  }"
1533,"    protected Format getFormat(String pattern, Locale locale) {
        DateFormat formatter = null;
        boolean usePattern = (pattern != null && pattern.length() > 0);
        if (!usePattern) {
            formatter = (DateFormat)getFormat(locale);
        } else if (locale == null) {
            formatter = new SimpleDateFormat(pattern);
        } else {
            DateFormatSymbols symbols = new DateFormatSymbols(locale);
            formatter = new SimpleDateFormat(pattern, symbols);
        }
        formatter.setLenient(false);
        return formatter;
    }","  public void test33()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        calendarValidator0.getFormat(""X*m]{?_t^ZM44n}_(J"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 't'
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
1534,"    public String format(Object value, TimeZone timeZone) {
        return format(value, (String)null, (Locale)null, timeZone);
    }","  public void test34()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        timeValidator0.format(object0, (Format) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.AbstractCalendarValidator"", e);
      }
  }"
1535,"    public String format(Object value, TimeZone timeZone) {
        return format(value, (String)null, (Locale)null, timeZone);
    }","  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      DateValidator dateValidator0 = DateValidator.getInstance();
      MessageFormat messageFormat0 = new MessageFormat("""");
      // Undeclared exception!
      try { 
        dateValidator0.format((Object) calendar0, (Format) messageFormat0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.util.Date cannot be cast to [Ljava.lang.Object;
         //
         verifyException(""java.text.MessageFormat"", e);
      }
  }"
1536,"    public String format(Object value, TimeZone timeZone) {
        return format(value, (String)null, (Locale)null, timeZone);
    }","  public void test36()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Locale locale0 = Locale.FRENCH;
      TimeZone timeZone0 = TimeZone.getTimeZone(""8=eFpLb!&g"");
      // Undeclared exception!
      try { 
        dateValidator0.format((Object) mockDateFormat0, (String) null, locale0, timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
         verifyException(""java.text.DateFormat"", e);
      }
  }"
1537,"    protected int compareTime(Calendar value, Calendar compare, int field) {

        int result = 0;

        // Compare Hour
        result = calculateCompareResult(value, compare, Calendar.HOUR_OF_DAY);
        if (result != 0 || (field == Calendar.HOUR || field == Calendar.HOUR_OF_DAY)) {
            return result;
        }

        // Compare Minute
        result = calculateCompareResult(value, compare, Calendar.MINUTE);
        if (result != 0 || field == Calendar.MINUTE) {
            return result;
        }

        // Compare Second
        result = calculateCompareResult(value, compare, Calendar.SECOND);
        if (result != 0 || field == Calendar.SECOND) {
            return result;
        }

        // Compare Milliseconds
        if (field == Calendar.MILLISECOND) {
            return calculateCompareResult(value, compare, Calendar.MILLISECOND);
        }

        throw new IllegalArgumentException(""Invalid field: "" + field);

    }","  public void test37()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      // Undeclared exception!
      try { 
        calendarValidator0.compareTime((Calendar) null, (Calendar) null, 8);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.AbstractCalendarValidator"", e);
      }
  }"
1538,"    protected int compareTime(Calendar value, Calendar compare, int field) {

        int result = 0;

        // Compare Hour
        result = calculateCompareResult(value, compare, Calendar.HOUR_OF_DAY);
        if (result != 0 || (field == Calendar.HOUR || field == Calendar.HOUR_OF_DAY)) {
            return result;
        }

        // Compare Minute
        result = calculateCompareResult(value, compare, Calendar.MINUTE);
        if (result != 0 || field == Calendar.MINUTE) {
            return result;
        }

        // Compare Second
        result = calculateCompareResult(value, compare, Calendar.SECOND);
        if (result != 0 || field == Calendar.SECOND) {
            return result;
        }

        // Compare Milliseconds
        if (field == Calendar.MILLISECOND) {
            return calculateCompareResult(value, compare, Calendar.MILLISECOND);
        }

        throw new IllegalArgumentException(""Invalid field: "" + field);

    }","  public void test38()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 152);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        calendarValidator0.compareTime(mockGregorianCalendar0, mockGregorianCalendar0, 152);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid field: 152
         //
         verifyException(""org.apache.commons.validator.routines.AbstractCalendarValidator"", e);
      }
  }"
1539,"    protected int compareQuarters(Calendar value, Calendar compare, int monthOfFirstQuarter) {
        int valueQuarter   = calculateQuarter(value, monthOfFirstQuarter);
        int compareQuarter = calculateQuarter(compare, monthOfFirstQuarter);
        if (valueQuarter < compareQuarter) {
            return -1;
        } else if (valueQuarter > compareQuarter) {
            return 1;
        } else {
            return 0;
        }
    }","  public void test39()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      // Undeclared exception!
      try { 
        calendarValidator0.compareQuarters((Calendar) null, (Calendar) null, 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.AbstractCalendarValidator"", e);
      }
  }"
1540,"    protected int compareQuarters(Calendar value, Calendar compare, int monthOfFirstQuarter) {
        int valueQuarter   = calculateQuarter(value, monthOfFirstQuarter);
        int compareQuarter = calculateQuarter(compare, monthOfFirstQuarter);
        if (valueQuarter < compareQuarter) {
            return -1;
        } else if (valueQuarter > compareQuarter) {
            return 1;
        } else {
            return 0;
        }
    }","  public void test40()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 1283);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(422, (-946), (-946));
      mockGregorianCalendar0.setLenient(false);
      // Undeclared exception!
      try { 
        dateValidator0.compareQuarters(mockGregorianCalendar0, (Calendar) null, (-946));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // MONTH
         //
         verifyException(""java.util.GregorianCalendar"", e);
      }
  }"
1541,"    protected int compare(Calendar value, Calendar compare, int field) {

        int result = 0;

        // Compare Year
        result = calculateCompareResult(value, compare, Calendar.YEAR);
        if (result != 0 || field == Calendar.YEAR) {
            return result;
        }

        // Compare Week of Year
        if (field == Calendar.WEEK_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_YEAR);
        }

        // Compare Day of the Year
        if (field == Calendar.DAY_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.DAY_OF_YEAR);
        }

        // Compare Month
        result = calculateCompareResult(value, compare, Calendar.MONTH);
        if (result != 0 || field == Calendar.MONTH) {
            return result;
        }

        // Compare Week of Month
        if (field == Calendar.WEEK_OF_MONTH) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_MONTH);
        }

        // Compare Date
        result = calculateCompareResult(value, compare, Calendar.DATE);
        if (result != 0 || (field == Calendar.DATE ||
                          field == Calendar.DAY_OF_WEEK ||
                          field == Calendar.DAY_OF_WEEK_IN_MONTH)) {
            return result;
        }

        // Compare Time fields
        return compareTime(value, compare, field);

    }","  public void test41()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      // Undeclared exception!
      try { 
        timeValidator0.compare((Calendar) null, (Calendar) null, 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.AbstractCalendarValidator"", e);
      }
  }"
1542,"    protected int compare(Calendar value, Calendar compare, int field) {

        int result = 0;

        // Compare Year
        result = calculateCompareResult(value, compare, Calendar.YEAR);
        if (result != 0 || field == Calendar.YEAR) {
            return result;
        }

        // Compare Week of Year
        if (field == Calendar.WEEK_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_YEAR);
        }

        // Compare Day of the Year
        if (field == Calendar.DAY_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.DAY_OF_YEAR);
        }

        // Compare Month
        result = calculateCompareResult(value, compare, Calendar.MONTH);
        if (result != 0 || field == Calendar.MONTH) {
            return result;
        }

        // Compare Week of Month
        if (field == Calendar.WEEK_OF_MONTH) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_MONTH);
        }

        // Compare Date
        result = calculateCompareResult(value, compare, Calendar.DATE);
        if (result != 0 || (field == Calendar.DATE ||
                          field == Calendar.DAY_OF_WEEK ||
                          field == Calendar.DAY_OF_WEEK_IN_MONTH)) {
            return result;
        }

        // Compare Time fields
        return compareTime(value, compare, field);

    }","  public void test42()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      calendar0.set(0, 486);
      // Undeclared exception!
      try { 
        timeValidator0.compare(calendar0, calendar0, 2640);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException(""java.util.GregorianCalendar"", e);
      }
  }"
1543,"    public String format(Object value, TimeZone timeZone) {
        return format(value, (String)null, (Locale)null, timeZone);
    }","  public void test43()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance(1, 0);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      // Undeclared exception!
      try { 
        calendarValidator0.format((Object) dateFormat0, (Format) numberFormat0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1544,"    public String format(Object value, TimeZone timeZone) {
        return format(value, (String)null, (Locale)null, timeZone);
    }","  public void test44()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Locale locale0 = Locale.PRC;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      DateFormat dateFormat0 = DateFormat.getInstance();
      String string0 = calendarValidator0.format((Object) calendar0, (Format) dateFormat0);
}"
1545,"    public String format(Object value, TimeZone timeZone) {
        return format(value, (String)null, (Locale)null, timeZone);
    }","  public void test45()  throws Throwable  {
      MessageFormat messageFormat0 = new MessageFormat("""");
      CalendarValidator calendarValidator0 = new CalendarValidator();
      String string0 = calendarValidator0.format((Object) null, (Format) messageFormat0);
}"
1546,"    public String format(Object value, TimeZone timeZone) {
        return format(value, (String)null, (Locale)null, timeZone);
    }","  public void test46()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.GERMAN;
      String string0 = timeValidator0.format((Object) null, """", locale0, (TimeZone) null);
}"
1547,"    public String format(Object value, TimeZone timeZone) {
        return format(value, (String)null, (Locale)null, timeZone);
    }","  public void test47()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.CHINA;
      CalendarValidator calendarValidator0 = new CalendarValidator();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)dateValidator0.getFormat(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)calendarValidator0.processParsedValue((Object) null, simpleDateFormat0);
      TimeValidator timeValidator0 = new TimeValidator(true, 0);
      String string0 = timeValidator0.format((Object) mockGregorianCalendar0, ""2/14/14"", locale0, (TimeZone) null);
}"
1548,"    public String format(Object value, TimeZone timeZone) {
        return format(value, (String)null, (Locale)null, timeZone);
    }","  public void test48()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.CHINA;
      CalendarValidator calendarValidator0 = new CalendarValidator();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)dateValidator0.getFormat(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)calendarValidator0.processParsedValue((Object) null, simpleDateFormat0);
      TimeValidator timeValidator0 = new TimeValidator(true, 0);
      String string0 = timeValidator0.format((Object) mockGregorianCalendar0, ""2/14/14"", locale0, (TimeZone) null);
}"
1549,"    public boolean isValid(String value, String pattern, Locale locale) {
        Object parsedValue = parse(value, pattern, locale, (TimeZone)null);
        return (parsedValue == null ? false : true);
    }","  public void test49()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      CalendarValidator calendarValidator0 = new CalendarValidator();
      boolean boolean0 = calendarValidator0.isValid("";?"", "";?"", locale0);
}"
1550,"    protected int compareQuarters(Calendar value, Calendar compare, int monthOfFirstQuarter) {
        int valueQuarter   = calculateQuarter(value, monthOfFirstQuarter);
        int compareQuarter = calculateQuarter(compare, monthOfFirstQuarter);
        if (valueQuarter < compareQuarter) {
            return -1;
        } else if (valueQuarter > compareQuarter) {
            return 1;
        } else {
            return 0;
        }
    }","  public void test50()  throws Throwable  {
      Locale locale0 = new Locale(""org.apache.commons.validator.routines.AbstractCalendarValidator"");
      TimeValidator timeValidator0 = new TimeValidator();
      Calendar calendar0 = MockCalendar.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.set(12, 0, (-2254));
      int int0 = timeValidator0.compareQuarters(calendar0, mockGregorianCalendar0, 311);
}"
1551,"    protected int compare(Calendar value, Calendar compare, int field) {

        int result = 0;

        // Compare Year
        result = calculateCompareResult(value, compare, Calendar.YEAR);
        if (result != 0 || field == Calendar.YEAR) {
            return result;
        }

        // Compare Week of Year
        if (field == Calendar.WEEK_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_YEAR);
        }

        // Compare Day of the Year
        if (field == Calendar.DAY_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.DAY_OF_YEAR);
        }

        // Compare Month
        result = calculateCompareResult(value, compare, Calendar.MONTH);
        if (result != 0 || field == Calendar.MONTH) {
            return result;
        }

        // Compare Week of Month
        if (field == Calendar.WEEK_OF_MONTH) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_MONTH);
        }

        // Compare Date
        result = calculateCompareResult(value, compare, Calendar.DATE);
        if (result != 0 || (field == Calendar.DATE ||
                          field == Calendar.DAY_OF_WEEK ||
                          field == Calendar.DAY_OF_WEEK_IN_MONTH)) {
            return result;
        }

        // Compare Time fields
        return compareTime(value, compare, field);

    }","  public void test51()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1050), (-1050), (-1050), (-1050), (-1050), (-1050));
      // Undeclared exception!
      try { 
        timeValidator0.compare(mockGregorianCalendar0, mockGregorianCalendar0, (-1050));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid field: -1050
         //
         verifyException(""org.apache.commons.validator.routines.AbstractCalendarValidator"", e);
      }
  }"
1552,,"  public void test52()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      int int0 = timeValidator0.compareSeconds(calendar0, calendar0);
}"
1553,"    protected int compare(Calendar value, Calendar compare, int field) {

        int result = 0;

        // Compare Year
        result = calculateCompareResult(value, compare, Calendar.YEAR);
        if (result != 0 || field == Calendar.YEAR) {
            return result;
        }

        // Compare Week of Year
        if (field == Calendar.WEEK_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_YEAR);
        }

        // Compare Day of the Year
        if (field == Calendar.DAY_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.DAY_OF_YEAR);
        }

        // Compare Month
        result = calculateCompareResult(value, compare, Calendar.MONTH);
        if (result != 0 || field == Calendar.MONTH) {
            return result;
        }

        // Compare Week of Month
        if (field == Calendar.WEEK_OF_MONTH) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_MONTH);
        }

        // Compare Date
        result = calculateCompareResult(value, compare, Calendar.DATE);
        if (result != 0 || (field == Calendar.DATE ||
                          field == Calendar.DAY_OF_WEEK ||
                          field == Calendar.DAY_OF_WEEK_IN_MONTH)) {
            return result;
        }

        // Compare Time fields
        return compareTime(value, compare, field);

    }","  public void test53()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(54, 54, 54, 54, 54, 54);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(54, 54, 54, 54, 54);
      int int0 = timeValidator0.compare(mockGregorianCalendar0, mockGregorianCalendar1, 54);
}"
1554,,"  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      TimeValidator timeValidator0 = new TimeValidator(false, 0);
      int int0 = timeValidator0.compareMinutes(calendar0, calendar0);
}"
1555,"    protected int compare(Calendar value, Calendar compare, int field) {

        int result = 0;

        // Compare Year
        result = calculateCompareResult(value, compare, Calendar.YEAR);
        if (result != 0 || field == Calendar.YEAR) {
            return result;
        }

        // Compare Week of Year
        if (field == Calendar.WEEK_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_YEAR);
        }

        // Compare Day of the Year
        if (field == Calendar.DAY_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.DAY_OF_YEAR);
        }

        // Compare Month
        result = calculateCompareResult(value, compare, Calendar.MONTH);
        if (result != 0 || field == Calendar.MONTH) {
            return result;
        }

        // Compare Week of Month
        if (field == Calendar.WEEK_OF_MONTH) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_MONTH);
        }

        // Compare Date
        result = calculateCompareResult(value, compare, Calendar.DATE);
        if (result != 0 || (field == Calendar.DATE ||
                          field == Calendar.DAY_OF_WEEK ||
                          field == Calendar.DAY_OF_WEEK_IN_MONTH)) {
            return result;
        }

        // Compare Time fields
        return compareTime(value, compare, field);

    }","  public void test55()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-11), (-11), (-11), (-11), (-11), (-11));
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-11), (-11), (-11), (-11), (-11));
      int int0 = timeValidator0.compare(mockGregorianCalendar0, mockGregorianCalendar1, (-11));
}"
1556,"    protected abstract Object processParsedValue(Object value, Format formatter);

    /**
     * <p>Returns a <code>DateFormat</code> for the specified <i>pattern</i>
     *    and/or <code>Locale</code>.</p>
     *
     * @param pattern The pattern used to validate the value against or
     *        <code>null</code> to use the default for the <code>Locale</code>.
     * @param locale The locale to use for the currency format, system default if null.
     * @return The <code>DateFormat</code> to created.
     */
    @Override
    protected Format getFormat(String pattern, Locale locale) {
        DateFormat formatter = null;
        boolean usePattern = (pattern != null && pattern.length() > 0);
        if (!usePattern) {
            formatter = (DateFormat)getFormat(locale);
        } else if (locale == null) {
            formatter = new SimpleDateFormat(pattern);
        } else {
            DateFormatSymbols symbols = new DateFormatSymbols(locale);
            formatter = new SimpleDateFormat(pattern, symbols);
        }
        formatter.setLenient(false);
        return formatter;
    }","  public void test56()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.CHINA;
      CalendarValidator calendarValidator0 = new CalendarValidator();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)dateValidator0.getFormat(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)calendarValidator0.processParsedValue((Object) null, simpleDateFormat0);
      TimeValidator timeValidator0 = new TimeValidator(true, (-1597));
      int int0 = timeValidator0.compareHours(mockGregorianCalendar0, mockGregorianCalendar0);
}"
1557,"    protected abstract Object processParsedValue(Object value, Format formatter);

    /**
     * <p>Returns a <code>DateFormat</code> for the specified <i>pattern</i>
     *    and/or <code>Locale</code>.</p>
     *
     * @param pattern The pattern used to validate the value against or
     *        <code>null</code> to use the default for the <code>Locale</code>.
     * @param locale The locale to use for the currency format, system default if null.
     * @return The <code>DateFormat</code> to created.
     */
    @Override
    protected Format getFormat(String pattern, Locale locale) {
        DateFormat formatter = null;
        boolean usePattern = (pattern != null && pattern.length() > 0);
        if (!usePattern) {
            formatter = (DateFormat)getFormat(locale);
        } else if (locale == null) {
            formatter = new SimpleDateFormat(pattern);
        } else {
            DateFormatSymbols symbols = new DateFormatSymbols(locale);
            formatter = new SimpleDateFormat(pattern, symbols);
        }
        formatter.setLenient(false);
        return formatter;
    }","  public void test57()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.CHINA;
      CalendarValidator calendarValidator0 = new CalendarValidator();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)dateValidator0.getFormat(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)calendarValidator0.processParsedValue((Object) null, simpleDateFormat0);
      TimeValidator timeValidator0 = new TimeValidator(true, (-1597));
      int int0 = timeValidator0.compareHours(mockGregorianCalendar0, mockGregorianCalendar0);
}"
1558,"    protected int compareTime(Calendar value, Calendar compare, int field) {

        int result = 0;

        // Compare Hour
        result = calculateCompareResult(value, compare, Calendar.HOUR_OF_DAY);
        if (result != 0 || (field == Calendar.HOUR || field == Calendar.HOUR_OF_DAY)) {
            return result;
        }

        // Compare Minute
        result = calculateCompareResult(value, compare, Calendar.MINUTE);
        if (result != 0 || field == Calendar.MINUTE) {
            return result;
        }

        // Compare Second
        result = calculateCompareResult(value, compare, Calendar.SECOND);
        if (result != 0 || field == Calendar.SECOND) {
            return result;
        }

        // Compare Milliseconds
        if (field == Calendar.MILLISECOND) {
            return calculateCompareResult(value, compare, Calendar.MILLISECOND);
        }

        throw new IllegalArgumentException(""Invalid field: "" + field);

    }","  public void test58()  throws Throwable  {
      Locale locale0 = new Locale(""org.apache.commons.validator.routines.AbstractCalendarValidatoh"");
      TimeValidator timeValidator0 = new TimeValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-216), (-1), (-216), (-1), (-1), (-1));
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
      int int0 = timeValidator0.compareTime(mockGregorianCalendar0, mockGregorianCalendar1, 1237);
}"
1559,"    protected int compare(Calendar value, Calendar compare, int field) {

        int result = 0;

        // Compare Year
        result = calculateCompareResult(value, compare, Calendar.YEAR);
        if (result != 0 || field == Calendar.YEAR) {
            return result;
        }

        // Compare Week of Year
        if (field == Calendar.WEEK_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_YEAR);
        }

        // Compare Day of the Year
        if (field == Calendar.DAY_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.DAY_OF_YEAR);
        }

        // Compare Month
        result = calculateCompareResult(value, compare, Calendar.MONTH);
        if (result != 0 || field == Calendar.MONTH) {
            return result;
        }

        // Compare Week of Month
        if (field == Calendar.WEEK_OF_MONTH) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_MONTH);
        }

        // Compare Date
        result = calculateCompareResult(value, compare, Calendar.DATE);
        if (result != 0 || (field == Calendar.DATE ||
                          field == Calendar.DAY_OF_WEEK ||
                          field == Calendar.DAY_OF_WEEK_IN_MONTH)) {
            return result;
        }

        // Compare Time fields
        return compareTime(value, compare, field);

    }","  public void test59()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      int int0 = calendarValidator0.compare(mockGregorianCalendar0, mockGregorianCalendar0, 8);
}"
1560,"    protected int compare(Calendar value, Calendar compare, int field) {

        int result = 0;

        // Compare Year
        result = calculateCompareResult(value, compare, Calendar.YEAR);
        if (result != 0 || field == Calendar.YEAR) {
            return result;
        }

        // Compare Week of Year
        if (field == Calendar.WEEK_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_YEAR);
        }

        // Compare Day of the Year
        if (field == Calendar.DAY_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.DAY_OF_YEAR);
        }

        // Compare Month
        result = calculateCompareResult(value, compare, Calendar.MONTH);
        if (result != 0 || field == Calendar.MONTH) {
            return result;
        }

        // Compare Week of Month
        if (field == Calendar.WEEK_OF_MONTH) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_MONTH);
        }

        // Compare Date
        result = calculateCompareResult(value, compare, Calendar.DATE);
        if (result != 0 || (field == Calendar.DATE ||
                          field == Calendar.DAY_OF_WEEK ||
                          field == Calendar.DAY_OF_WEEK_IN_MONTH)) {
            return result;
        }

        // Compare Time fields
        return compareTime(value, compare, field);

    }","  public void test60()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compare(mockGregorianCalendar0, mockGregorianCalendar0, 7);
}"
1561,"    protected int compare(Calendar value, Calendar compare, int field) {

        int result = 0;

        // Compare Year
        result = calculateCompareResult(value, compare, Calendar.YEAR);
        if (result != 0 || field == Calendar.YEAR) {
            return result;
        }

        // Compare Week of Year
        if (field == Calendar.WEEK_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_YEAR);
        }

        // Compare Day of the Year
        if (field == Calendar.DAY_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.DAY_OF_YEAR);
        }

        // Compare Month
        result = calculateCompareResult(value, compare, Calendar.MONTH);
        if (result != 0 || field == Calendar.MONTH) {
            return result;
        }

        // Compare Week of Month
        if (field == Calendar.WEEK_OF_MONTH) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_MONTH);
        }

        // Compare Date
        result = calculateCompareResult(value, compare, Calendar.DATE);
        if (result != 0 || (field == Calendar.DATE ||
                          field == Calendar.DAY_OF_WEEK ||
                          field == Calendar.DAY_OF_WEEK_IN_MONTH)) {
            return result;
        }

        // Compare Time fields
        return compareTime(value, compare, field);

    }","  public void test61()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeValidator timeValidator0 = new TimeValidator();
      int int0 = timeValidator0.compare(mockGregorianCalendar0, mockGregorianCalendar0, 10);
}"
1562,"    protected int compare(Calendar value, Calendar compare, int field) {

        int result = 0;

        // Compare Year
        result = calculateCompareResult(value, compare, Calendar.YEAR);
        if (result != 0 || field == Calendar.YEAR) {
            return result;
        }

        // Compare Week of Year
        if (field == Calendar.WEEK_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_YEAR);
        }

        // Compare Day of the Year
        if (field == Calendar.DAY_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.DAY_OF_YEAR);
        }

        // Compare Month
        result = calculateCompareResult(value, compare, Calendar.MONTH);
        if (result != 0 || field == Calendar.MONTH) {
            return result;
        }

        // Compare Week of Month
        if (field == Calendar.WEEK_OF_MONTH) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_MONTH);
        }

        // Compare Date
        result = calculateCompareResult(value, compare, Calendar.DATE);
        if (result != 0 || (field == Calendar.DATE ||
                          field == Calendar.DAY_OF_WEEK ||
                          field == Calendar.DAY_OF_WEEK_IN_MONTH)) {
            return result;
        }

        // Compare Time fields
        return compareTime(value, compare, field);

    }","  public void test62()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      Calendar calendar0 = MockCalendar.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-2257), 0);
      mockGregorianCalendar0.set(3, 0, (-2257));
      calendar0.set(0, 0, (-1182));
      int int0 = timeValidator0.compare(calendar0, mockGregorianCalendar0, 0);
}"
1563,,"  public void test63()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.ROOT;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar0);
}"
1564,"    protected int compare(Calendar value, Calendar compare, int field) {

        int result = 0;

        // Compare Year
        result = calculateCompareResult(value, compare, Calendar.YEAR);
        if (result != 0 || field == Calendar.YEAR) {
            return result;
        }

        // Compare Week of Year
        if (field == Calendar.WEEK_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_YEAR);
        }

        // Compare Day of the Year
        if (field == Calendar.DAY_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.DAY_OF_YEAR);
        }

        // Compare Month
        result = calculateCompareResult(value, compare, Calendar.MONTH);
        if (result != 0 || field == Calendar.MONTH) {
            return result;
        }

        // Compare Week of Month
        if (field == Calendar.WEEK_OF_MONTH) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_MONTH);
        }

        // Compare Date
        result = calculateCompareResult(value, compare, Calendar.DATE);
        if (result != 0 || (field == Calendar.DATE ||
                          field == Calendar.DAY_OF_WEEK ||
                          field == Calendar.DAY_OF_WEEK_IN_MONTH)) {
            return result;
        }

        // Compare Time fields
        return compareTime(value, compare, field);

    }","  public void test64()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(12, 12, 0, (-2234), 12, 12);
      mockGregorianCalendar1.set(12, 0, (-2234));
      mockGregorianCalendar0.set(0, 0, (-1179));
      int int0 = timeValidator0.compare(mockGregorianCalendar0, mockGregorianCalendar1, (-2234));
}"
1565,,"  public void test65()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateValidator dateValidator0 = DateValidator.getInstance();
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      int int0 = dateValidator0.compareWeeks(mockDate0, mockDate0, timeZone0);
}"
1566,"    protected abstract Object processParsedValue(Object value, Format formatter);

    /**
     * <p>Returns a <code>DateFormat</code> for the specified <i>pattern</i>
     *    and/or <code>Locale</code>.</p>
     *
     * @param pattern The pattern used to validate the value against or
     *        <code>null</code> to use the default for the <code>Locale</code>.
     * @param locale The locale to use for the currency format, system default if null.
     * @return The <code>DateFormat</code> to created.
     */
    @Override
    protected Format getFormat(String pattern, Locale locale) {
        DateFormat formatter = null;
        boolean usePattern = (pattern != null && pattern.length() > 0);
        if (!usePattern) {
            formatter = (DateFormat)getFormat(locale);
        } else if (locale == null) {
            formatter = new SimpleDateFormat(pattern);
        } else {
            DateFormatSymbols symbols = new DateFormatSymbols(locale);
            formatter = new SimpleDateFormat(pattern, symbols);
        }
        formatter.setLenient(false);
        return formatter;
    }","  public void test66()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.CHINA;
      CalendarValidator calendarValidator0 = new CalendarValidator();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)dateValidator0.getFormat(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)calendarValidator0.processParsedValue((Object) null, simpleDateFormat0);
      int int0 = calendarValidator0.compareYears(mockGregorianCalendar0, mockGregorianCalendar0);
}"
1567,"    protected abstract Object processParsedValue(Object value, Format formatter);

    /**
     * <p>Returns a <code>DateFormat</code> for the specified <i>pattern</i>
     *    and/or <code>Locale</code>.</p>
     *
     * @param pattern The pattern used to validate the value against or
     *        <code>null</code> to use the default for the <code>Locale</code>.
     * @param locale The locale to use for the currency format, system default if null.
     * @return The <code>DateFormat</code> to created.
     */
    @Override
    protected Format getFormat(String pattern, Locale locale) {
        DateFormat formatter = null;
        boolean usePattern = (pattern != null && pattern.length() > 0);
        if (!usePattern) {
            formatter = (DateFormat)getFormat(locale);
        } else if (locale == null) {
            formatter = new SimpleDateFormat(pattern);
        } else {
            DateFormatSymbols symbols = new DateFormatSymbols(locale);
            formatter = new SimpleDateFormat(pattern, symbols);
        }
        formatter.setLenient(false);
        return formatter;
    }","  public void test67()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.CHINA;
      CalendarValidator calendarValidator0 = new CalendarValidator();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)dateValidator0.getFormat(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)calendarValidator0.processParsedValue((Object) null, simpleDateFormat0);
      int int0 = calendarValidator0.compareYears(mockGregorianCalendar0, mockGregorianCalendar0);
}"
1568,"    protected abstract Object processParsedValue(Object value, Format formatter);

    /**
     * <p>Returns a <code>DateFormat</code> for the specified <i>pattern</i>
     *    and/or <code>Locale</code>.</p>
     *
     * @param pattern The pattern used to validate the value against or
     *        <code>null</code> to use the default for the <code>Locale</code>.
     * @param locale The locale to use for the currency format, system default if null.
     * @return The <code>DateFormat</code> to created.
     */
    @Override
    protected Format getFormat(String pattern, Locale locale) {
        DateFormat formatter = null;
        boolean usePattern = (pattern != null && pattern.length() > 0);
        if (!usePattern) {
            formatter = (DateFormat)getFormat(locale);
        } else if (locale == null) {
            formatter = new SimpleDateFormat(pattern);
        } else {
            DateFormatSymbols symbols = new DateFormatSymbols(locale);
            formatter = new SimpleDateFormat(pattern, symbols);
        }
        formatter.setLenient(false);
        return formatter;
    }","  public void test68()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.CHINA;
      CalendarValidator calendarValidator0 = new CalendarValidator();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)dateValidator0.getFormat(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)calendarValidator0.processParsedValue((Object) null, simpleDateFormat0);
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar0);
}"
1569,"    protected abstract Object processParsedValue(Object value, Format formatter);

    /**
     * <p>Returns a <code>DateFormat</code> for the specified <i>pattern</i>
     *    and/or <code>Locale</code>.</p>
     *
     * @param pattern The pattern used to validate the value against or
     *        <code>null</code> to use the default for the <code>Locale</code>.
     * @param locale The locale to use for the currency format, system default if null.
     * @return The <code>DateFormat</code> to created.
     */
    @Override
    protected Format getFormat(String pattern, Locale locale) {
        DateFormat formatter = null;
        boolean usePattern = (pattern != null && pattern.length() > 0);
        if (!usePattern) {
            formatter = (DateFormat)getFormat(locale);
        } else if (locale == null) {
            formatter = new SimpleDateFormat(pattern);
        } else {
            DateFormatSymbols symbols = new DateFormatSymbols(locale);
            formatter = new SimpleDateFormat(pattern, symbols);
        }
        formatter.setLenient(false);
        return formatter;
    }","  public void test69()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.CHINA;
      CalendarValidator calendarValidator0 = new CalendarValidator();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)dateValidator0.getFormat(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)calendarValidator0.processParsedValue((Object) null, simpleDateFormat0);
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar0);
}"
1570,"    protected int compare(Calendar value, Calendar compare, int field) {

        int result = 0;

        // Compare Year
        result = calculateCompareResult(value, compare, Calendar.YEAR);
        if (result != 0 || field == Calendar.YEAR) {
            return result;
        }

        // Compare Week of Year
        if (field == Calendar.WEEK_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_YEAR);
        }

        // Compare Day of the Year
        if (field == Calendar.DAY_OF_YEAR) {
            return calculateCompareResult(value, compare, Calendar.DAY_OF_YEAR);
        }

        // Compare Month
        result = calculateCompareResult(value, compare, Calendar.MONTH);
        if (result != 0 || field == Calendar.MONTH) {
            return result;
        }

        // Compare Week of Month
        if (field == Calendar.WEEK_OF_MONTH) {
            return calculateCompareResult(value, compare, Calendar.WEEK_OF_MONTH);
        }

        // Compare Date
        result = calculateCompareResult(value, compare, Calendar.DATE);
        if (result != 0 || (field == Calendar.DATE ||
                          field == Calendar.DAY_OF_WEEK ||
                          field == Calendar.DAY_OF_WEEK_IN_MONTH)) {
            return result;
        }

        // Compare Time fields
        return compareTime(value, compare, field);

    }","  public void test70()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = new Locale(""org.apache.commons.validator.routines.AbstractCalendarValidator"");
      Calendar calendar0 = MockCalendar.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.set((-1846), 0, (-2241));
      int int0 = timeValidator0.compare(calendar0, mockGregorianCalendar0, 2640);
}"
1571,,"  public void test71()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = new Locale(""org.apache.commons.validator.routines.AbstractCalendarValidator"");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.validator.routines.AbstractCalendarValidator"");
      Calendar calendar0 = timeValidator0.validate((String) null, locale0, (TimeZone) simpleTimeZone0);
}"
1572,"    public String format(Object value, TimeZone timeZone) {
        return format(value, (String)null, (Locale)null, timeZone);
    }","  public void test72()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      Locale locale0 = Locale.JAPAN;
      String string0 = timeValidator0.format((Object) null, locale0, (TimeZone) null);
}"
1573,"    public String format(Object value, TimeZone timeZone) {
        return format(value, (String)null, (Locale)null, timeZone);
    }","  public void test73()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      // Undeclared exception!
      try { 
        timeValidator0.format((Object) timeValidator0, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
         verifyException(""java.text.DateFormat"", e);
      }
  }"
1574,"    public boolean isValid(String value, String pattern, Locale locale) {
        Object parsedValue = parse(value, pattern, locale, (TimeZone)null);
        return (parsedValue == null ? false : true);
    }","  public void test74()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.CANADA;
      boolean boolean0 = calendarValidator0.isValid("""", """", locale0);
}"
1575,"    public String format(Object value, TimeZone timeZone) {
        return format(value, (String)null, (Locale)null, timeZone);
    }","  public void test75()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = new Locale(""org.apache.commons.validator.routines.AbstractFormatValidator"", ""X3V{2^+'h8|*wxUfa?"");
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        timeValidator0.format((Object) locale0, locale0, timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
         verifyException(""java.text.DateFormat"", e);
      }
  }"
1576,"    public String format(Object value, TimeZone timeZone) {
        return format(value, (String)null, (Locale)null, timeZone);
    }","  public void test76()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(false, (-25));
      Locale locale0 = Locale.CANADA_FRENCH;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("";?"", locale0);
      TimeZone timeZone0 = TimeZone.getTimeZone("";?"");
      // Undeclared exception!
      try { 
        timeValidator0.format((Object) mockSimpleDateFormat0, timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
         verifyException(""java.text.DateFormat"", e);
      }
  }"
1577,"    public String format(Object value, TimeZone timeZone) {
        return format(value, (String)null, (Locale)null, timeZone);
    }","  public void test77()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        calendarValidator0.format((Object) ""V7/'(Di{TsQn"", ""V7/'(Di{TsQn"", timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'V'
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
1578,"    public String format(Object value, TimeZone timeZone) {
        return format(value, (String)null, (Locale)null, timeZone);
    }","  public void test78()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        dateValidator0.format((Object) ""_O'9Y"", ""-MF[V%Tfs13=HtM"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'V'
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
1579,"    protected boolean isValidUser(String user) {
        
        if (user == null || user.length() > MAX_USERNAME_LEN) {
            return false;
        }
        
        return USER_PATTERN.matcher(user).matches();
    }","  public void test0()  throws Throwable  {
      EmailValidator emailValidator0 = new EmailValidator(false, false);
      boolean boolean0 = emailValidator0.isValidUser(""(((\\.)|[^sp{Cntrl}()<>@,;:'\\\"".[]]|')+|(\""(\\\""|[^\""])*\""))"");
}"
1580,"    protected boolean isValidUser(String user) {
        
        if (user == null || user.length() > MAX_USERNAME_LEN) {
            return false;
        }
        
        return USER_PATTERN.matcher(user).matches();
    }","  public void test1()  throws Throwable  {
      EmailValidator emailValidator0 = new EmailValidator(false, false);
      boolean boolean0 = emailValidator0.isValidUser(""beats"");
}"
1581,"    protected boolean isValidDomain(String domain) {
        // see if domain is an IP address in brackets
        Matcher ipDomainMatcher = IP_DOMAIN_PATTERN.matcher(domain);

        if (ipDomainMatcher.matches()) {
            InetAddressValidator inetAddressValidator =
                    InetAddressValidator.getInstance();
            return inetAddressValidator.isValid(ipDomainMatcher.group(1));
        }
        // Domain is symbolic name
        if (allowTld) {
            return domainValidator.isValid(domain) || (!domain.startsWith(""."") && domainValidator.isValidTld(domain));
        } else {
            return domainValidator.isValid(domain);
        }
    }","  public void test2()  throws Throwable  {
      EmailValidator emailValidator0 = new EmailValidator(true, false);
      // Undeclared exception!
      try { 
        emailValidator0.isValidDomain((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1582,"    public static EmailValidator getInstance() {
        return EMAIL_VALIDATOR;
    }","  public void test3()  throws Throwable  {
      EmailValidator emailValidator0 = EmailValidator.getInstance(false, false);
}"
1583,"    public static EmailValidator getInstance() {
        return EMAIL_VALIDATOR;
    }","  public void test4()  throws Throwable  {
      EmailValidator emailValidator0 = EmailValidator.getInstance(true, false);
}"
1584,"    protected boolean isValidUser(String user) {
        
        if (user == null || user.length() > MAX_USERNAME_LEN) {
            return false;
        }
        
        return USER_PATTERN.matcher(user).matches();
    }","  public void test5()  throws Throwable  {
      EmailValidator emailValidator0 = new EmailValidator(true);
      boolean boolean0 = emailValidator0.isValidUser("""");
}"
1585,"    protected boolean isValidUser(String user) {
        
        if (user == null || user.length() > MAX_USERNAME_LEN) {
            return false;
        }
        
        return USER_PATTERN.matcher(user).matches();
    }","  public void test6()  throws Throwable  {
      EmailValidator emailValidator0 = EmailValidator.getInstance(true, true);
      boolean boolean0 = emailValidator0.isValidUser((String) null);
}"
1586,"    protected boolean isValidDomain(String domain) {
        // see if domain is an IP address in brackets
        Matcher ipDomainMatcher = IP_DOMAIN_PATTERN.matcher(domain);

        if (ipDomainMatcher.matches()) {
            InetAddressValidator inetAddressValidator =
                    InetAddressValidator.getInstance();
            return inetAddressValidator.isValid(ipDomainMatcher.group(1));
        }
        // Domain is symbolic name
        if (allowTld) {
            return domainValidator.isValid(domain) || (!domain.startsWith(""."") && domainValidator.isValidTld(domain));
        } else {
            return domainValidator.isValid(domain);
        }
    }","  public void test7()  throws Throwable  {
      EmailValidator emailValidator0 = EmailValidator.getInstance(false, true);
      boolean boolean0 = emailValidator0.isValidDomain(""N9=}.rXY"");
}"
1587,"    protected boolean isValidDomain(String domain) {
        // see if domain is an IP address in brackets
        Matcher ipDomainMatcher = IP_DOMAIN_PATTERN.matcher(domain);

        if (ipDomainMatcher.matches()) {
            InetAddressValidator inetAddressValidator =
                    InetAddressValidator.getInstance();
            return inetAddressValidator.isValid(ipDomainMatcher.group(1));
        }
        // Domain is symbolic name
        if (allowTld) {
            return domainValidator.isValid(domain) || (!domain.startsWith(""."") && domainValidator.isValidTld(domain));
        } else {
            return domainValidator.isValid(domain);
        }
    }","  public void test8()  throws Throwable  {
      EmailValidator emailValidator0 = EmailValidator.getInstance(false, true);
      boolean boolean0 = emailValidator0.isValidDomain(""."");
}"
1588,"    protected boolean isValidDomain(String domain) {
        // see if domain is an IP address in brackets
        Matcher ipDomainMatcher = IP_DOMAIN_PATTERN.matcher(domain);

        if (ipDomainMatcher.matches()) {
            InetAddressValidator inetAddressValidator =
                    InetAddressValidator.getInstance();
            return inetAddressValidator.isValid(ipDomainMatcher.group(1));
        }
        // Domain is symbolic name
        if (allowTld) {
            return domainValidator.isValid(domain) || (!domain.startsWith(""."") && domainValidator.isValidTld(domain));
        } else {
            return domainValidator.isValid(domain);
        }
    }","  public void test9()  throws Throwable  {
      EmailValidator emailValidator0 = EmailValidator.getInstance(false, true);
      boolean boolean0 = emailValidator0.isValidDomain(""dance"");
}"
1589,"    public EmailValidator(boolean allowLocal, boolean allowTld, DomainValidator domainValidator) {
        super();
        this.allowTld = allowTld;
        if (domainValidator == null) {
            throw new IllegalArgumentException(""DomainValidator cannot be null"");
        } else {
            if (domainValidator.isAllowLocal() != allowLocal) {
                throw new IllegalArgumentException(""DomainValidator must agree with allowLocal setting"");
            }
            this.domainValidator = domainValidator;
        }
    }","  public void test10()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      EmailValidator emailValidator0 = null;
      try {
        emailValidator0 = new EmailValidator(true, true, domainValidator0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // DomainValidator must agree with allowLocal setting
         //
         verifyException(""org.apache.commons.validator.routines.EmailValidator"", e);
      }
  }"
1590,"    public EmailValidator(boolean allowLocal, boolean allowTld, DomainValidator domainValidator) {
        super();
        this.allowTld = allowTld;
        if (domainValidator == null) {
            throw new IllegalArgumentException(""DomainValidator cannot be null"");
        } else {
            if (domainValidator.isAllowLocal() != allowLocal) {
                throw new IllegalArgumentException(""DomainValidator must agree with allowLocal setting"");
            }
            this.domainValidator = domainValidator;
        }
    }","  public void test11()  throws Throwable  {
      EmailValidator emailValidator0 = null;
      try {
        emailValidator0 = new EmailValidator(false, false, (DomainValidator) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // DomainValidator cannot be null
         //
         verifyException(""org.apache.commons.validator.routines.EmailValidator"", e);
      }
  }"
1591,"    public boolean isValid(String email) {
        if (email == null) {
            return false;
        }

        if (email.endsWith(""."")) { // check this first - it's cheap!
            return false;
        }

        // Check the whole email address structure
        Matcher emailMatcher = EMAIL_PATTERN.matcher(email);
        if (!emailMatcher.matches()) {
            return false;
        }

        if (!isValidUser(emailMatcher.group(1))) {
            return false;
        }

        if (!isValidDomain(emailMatcher.group(2))) {
            return false;
        }

        return true;
    }","  public void test12()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      EmailValidator emailValidator0 = new EmailValidator(false, false, domainValidator0);
      boolean boolean0 = emailValidator0.isValid(""8KG]/"");
}"
1592,"    public static EmailValidator getInstance() {
        return EMAIL_VALIDATOR;
    }","  public void test13()  throws Throwable  {
      EmailValidator emailValidator0 = EmailValidator.getInstance(false);
}"
1593,"    protected boolean isValidDomain(String domain) {
        // see if domain is an IP address in brackets
        Matcher ipDomainMatcher = IP_DOMAIN_PATTERN.matcher(domain);

        if (ipDomainMatcher.matches()) {
            InetAddressValidator inetAddressValidator =
                    InetAddressValidator.getInstance();
            return inetAddressValidator.isValid(ipDomainMatcher.group(1));
        }
        // Domain is symbolic name
        if (allowTld) {
            return domainValidator.isValid(domain) || (!domain.startsWith(""."") && domainValidator.isValidTld(domain));
        } else {
            return domainValidator.isValid(domain);
        }
    }","  public void test14()  throws Throwable  {
      EmailValidator emailValidator0 = EmailValidator.getInstance(true, true);
      boolean boolean0 = emailValidator0.isValidDomain(""Lo"");
}"
1594,"    public boolean isValid(String email) {
        if (email == null) {
            return false;
        }

        if (email.endsWith(""."")) { // check this first - it's cheap!
            return false;
        }

        // Check the whole email address structure
        Matcher emailMatcher = EMAIL_PATTERN.matcher(email);
        if (!emailMatcher.matches()) {
            return false;
        }

        if (!isValidUser(emailMatcher.group(1))) {
            return false;
        }

        if (!isValidDomain(emailMatcher.group(2))) {
            return false;
        }

        return true;
    }","  public void test15()  throws Throwable  {
      EmailValidator emailValidator0 = EmailValidator.getInstance(false, true);
      boolean boolean0 = emailValidator0.isValid((String) null);
}"
1595,"    protected boolean isValidUser(String user) {
        
        if (user == null || user.length() > MAX_USERNAME_LEN) {
            return false;
        }
        
        return USER_PATTERN.matcher(user).matches();
    }","  public void test16()  throws Throwable  {
      EmailValidator emailValidator0 = EmailValidator.getInstance(true);
      boolean boolean0 = emailValidator0.isValidUser(""^(((\\.)|[^sp{Cntrl}()<>@,;:'\\\\.\\]|')+|(\""(\\\""|[^\""])*\""))(.(((\\.)|[^sp{Cntrl}()<>@,;:'\\\""\\[]]|')+|(\""(\\\""|[^\""])*\"")))*$"");
}"
1596,"    public boolean isValid(String email) {
        if (email == null) {
            return false;
        }

        if (email.endsWith(""."")) { // check this first - it's cheap!
            return false;
        }

        // Check the whole email address structure
        Matcher emailMatcher = EMAIL_PATTERN.matcher(email);
        if (!emailMatcher.matches()) {
            return false;
        }

        if (!isValidUser(emailMatcher.group(1))) {
            return false;
        }

        if (!isValidDomain(emailMatcher.group(2))) {
            return false;
        }

        return true;
    }","  public void test17()  throws Throwable  {
      EmailValidator emailValidator0 = EmailValidator.getInstance();
      String string0 = ""V\\\\.)|[^\\s\\p{kntl}\\(\\)<>@,;:\\%\\u\\.\\[\\].."";
      boolean boolean0 = emailValidator0.isValid(string0);
}"
1597,"    protected boolean isValidDomain(String domain) {
        // see if domain is an IP address in brackets
        Matcher ipDomainMatcher = IP_DOMAIN_PATTERN.matcher(domain);

        if (ipDomainMatcher.matches()) {
            InetAddressValidator inetAddressValidator =
                    InetAddressValidator.getInstance();
            return inetAddressValidator.isValid(ipDomainMatcher.group(1));
        }
        // Domain is symbolic name
        if (allowTld) {
            return domainValidator.isValid(domain) || (!domain.startsWith(""."") && domainValidator.isValidTld(domain));
        } else {
            return domainValidator.isValid(domain);
        }
    }","  public void test18()  throws Throwable  {
      EmailValidator emailValidator0 = new EmailValidator(true);
      boolean boolean0 = emailValidator0.isValidDomain("""");
}"
1598,"    protected Object parse(String value, Format formatter) {

        // Initial parse of the value
        Object parsedValue = super.parse(value, formatter);
        if (parsedValue != null || !(formatter instanceof DecimalFormat)) {
            return parsedValue;
        }

        // Re-parse using a pattern without the currency symbol
        DecimalFormat decimalFormat = (DecimalFormat)formatter;
        String pattern = decimalFormat.toPattern();
        if (pattern.indexOf(CURRENCY_SYMBOL) >= 0) {
            StringBuilder buffer = new StringBuilder(pattern.length());
            for (int i = 0; i < pattern.length(); i++) {
                if (pattern.charAt(i) != CURRENCY_SYMBOL) {
                    buffer.append(pattern.charAt(i));
                }
            }
            decimalFormat.applyPattern(buffer.toString());
            parsedValue = super.parse(value, decimalFormat);
        }
        return parsedValue;
    }","  public void test0()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator(false, false);
      Locale locale0 = Locale.FRENCH;
      DecimalFormat decimalFormat0 = (DecimalFormat)currencyValidator0.getFormat(locale0);
      currencyValidator0.parse(""(1%JKm-$PL\""^"", decimalFormat0);
}"
1599,"    protected Object parse(String value, Format formatter) {

        // Initial parse of the value
        Object parsedValue = super.parse(value, formatter);
        if (parsedValue != null || !(formatter instanceof DecimalFormat)) {
            return parsedValue;
        }

        // Re-parse using a pattern without the currency symbol
        DecimalFormat decimalFormat = (DecimalFormat)formatter;
        String pattern = decimalFormat.toPattern();
        if (pattern.indexOf(CURRENCY_SYMBOL) >= 0) {
            StringBuilder buffer = new StringBuilder(pattern.length());
            for (int i = 0; i < pattern.length(); i++) {
                if (pattern.charAt(i) != CURRENCY_SYMBOL) {
                    buffer.append(pattern.charAt(i));
                }
            }
            decimalFormat.applyPattern(buffer.toString());
            parsedValue = super.parse(value, decimalFormat);
        }
        return parsedValue;
    }","  public void test1()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator(false, false);
      Locale locale0 = Locale.FRENCH;
      DecimalFormat decimalFormat0 = (DecimalFormat)currencyValidator0.getFormat(locale0);
      currencyValidator0.parse(""(1%JKm-$PL\""^"", decimalFormat0);
}"
1600,"    protected Object parse(String value, Format formatter) {

        // Initial parse of the value
        Object parsedValue = super.parse(value, formatter);
        if (parsedValue != null || !(formatter instanceof DecimalFormat)) {
            return parsedValue;
        }

        // Re-parse using a pattern without the currency symbol
        DecimalFormat decimalFormat = (DecimalFormat)formatter;
        String pattern = decimalFormat.toPattern();
        if (pattern.indexOf(CURRENCY_SYMBOL) >= 0) {
            StringBuilder buffer = new StringBuilder(pattern.length());
            for (int i = 0; i < pattern.length(); i++) {
                if (pattern.charAt(i) != CURRENCY_SYMBOL) {
                    buffer.append(pattern.charAt(i));
                }
            }
            decimalFormat.applyPattern(buffer.toString());
            parsedValue = super.parse(value, decimalFormat);
        }
        return parsedValue;
    }","  public void test2()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", dateFormatSymbols0);
      // Undeclared exception!
      try { 
        currencyValidator0.parse("""", mockSimpleDateFormat0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
1601,"    protected Object parse(String value, Format formatter) {

        // Initial parse of the value
        Object parsedValue = super.parse(value, formatter);
        if (parsedValue != null || !(formatter instanceof DecimalFormat)) {
            return parsedValue;
        }

        // Re-parse using a pattern without the currency symbol
        DecimalFormat decimalFormat = (DecimalFormat)formatter;
        String pattern = decimalFormat.toPattern();
        if (pattern.indexOf(CURRENCY_SYMBOL) >= 0) {
            StringBuilder buffer = new StringBuilder(pattern.length());
            for (int i = 0; i < pattern.length(); i++) {
                if (pattern.charAt(i) != CURRENCY_SYMBOL) {
                    buffer.append(pattern.charAt(i));
                }
            }
            decimalFormat.applyPattern(buffer.toString());
            parsedValue = super.parse(value, decimalFormat);
        }
        return parsedValue;
    }","  public void test3()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator(false, false);
      Locale locale0 = Locale.JAPAN;
      Object object0 = currencyValidator0.parse(""6Ct9fA"", ""6Ct9fA"", locale0);
}"
1602,"    protected Object parse(String value, Format formatter) {

        // Initial parse of the value
        Object parsedValue = super.parse(value, formatter);
        if (parsedValue != null || !(formatter instanceof DecimalFormat)) {
            return parsedValue;
        }

        // Re-parse using a pattern without the currency symbol
        DecimalFormat decimalFormat = (DecimalFormat)formatter;
        String pattern = decimalFormat.toPattern();
        if (pattern.indexOf(CURRENCY_SYMBOL) >= 0) {
            StringBuilder buffer = new StringBuilder(pattern.length());
            for (int i = 0; i < pattern.length(); i++) {
                if (pattern.charAt(i) != CURRENCY_SYMBOL) {
                    buffer.append(pattern.charAt(i));
                }
            }
            decimalFormat.applyPattern(buffer.toString());
            parsedValue = super.parse(value, decimalFormat);
        }
        return parsedValue;
    }","  public void test4()  throws Throwable  {
      CurrencyValidator currencyValidator0 = (CurrencyValidator)CurrencyValidator.getInstance();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getDateInstance(2);
      Object object0 = currencyValidator0.parse(""C5+H5(1:g)\"""", simpleDateFormat0);
}"
1603,"    protected Object parse(String value, Format formatter) {

        // Initial parse of the value
        Object parsedValue = super.parse(value, formatter);
        if (parsedValue != null || !(formatter instanceof DecimalFormat)) {
            return parsedValue;
        }

        // Re-parse using a pattern without the currency symbol
        DecimalFormat decimalFormat = (DecimalFormat)formatter;
        String pattern = decimalFormat.toPattern();
        if (pattern.indexOf(CURRENCY_SYMBOL) >= 0) {
            StringBuilder buffer = new StringBuilder(pattern.length());
            for (int i = 0; i < pattern.length(); i++) {
                if (pattern.charAt(i) != CURRENCY_SYMBOL) {
                    buffer.append(pattern.charAt(i));
                }
            }
            decimalFormat.applyPattern(buffer.toString());
            parsedValue = super.parse(value, decimalFormat);
        }
        return parsedValue;
    }","  public void test5()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator(false, false);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      BigDecimal bigDecimal0 = (BigDecimal)currencyValidator0.parse(""6Ct9fA"", decimalFormat0);
}"
1604,"    public static BigDecimalValidator getInstance() {
        return VALIDATOR;
    }","  public void test6()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = CurrencyValidator.getInstance();
      BigDecimal bigDecimal0 = bigDecimalValidator0.validate(""C5+H5(1:g)\"""");
}"
1605,"    protected Object parse(String value, Format formatter) {

        // Initial parse of the value
        Object parsedValue = super.parse(value, formatter);
        if (parsedValue != null || !(formatter instanceof DecimalFormat)) {
            return parsedValue;
        }

        // Re-parse using a pattern without the currency symbol
        DecimalFormat decimalFormat = (DecimalFormat)formatter;
        String pattern = decimalFormat.toPattern();
        if (pattern.indexOf(CURRENCY_SYMBOL) >= 0) {
            StringBuilder buffer = new StringBuilder(pattern.length());
            for (int i = 0; i < pattern.length(); i++) {
                if (pattern.charAt(i) != CURRENCY_SYMBOL) {
                    buffer.append(pattern.charAt(i));
                }
            }
            decimalFormat.applyPattern(buffer.toString());
            parsedValue = super.parse(value, decimalFormat);
        }
        return parsedValue;
    }","  public void test7()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      // Undeclared exception!
      try { 
        currencyValidator0.parse((String) null, numberFormat0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1606,"    public Object validate(String code) {
        final Object validate = VALIDATOR.validate(code);
        if (validate != null && checkCountryCode) {
            return checkCode(code.substring(0,2)) ? validate : null;
        }
        return validate;
    }","  public void test0()  throws Throwable  {
      ISINValidator iSINValidator0 = ISINValidator.getInstance(true);
      Object object0 = iSINValidator0.validate(""+BWlh$yI-T!BY-$#"");
}"
1607,"    public boolean isValid(String code) {
        final boolean valid = VALIDATOR.isValid(code);
        if (valid && checkCountryCode) {
            return checkCode(code.substring(0,2));
        }
        return valid;
    }","  public void test1()  throws Throwable  {
      ISINValidator iSINValidator0 = ISINValidator.getInstance(true);
      boolean boolean0 = iSINValidator0.isValid(""+BWlh$yI-T!BY-$#"");
}"
1608,"    public static ISINValidator getInstance(boolean checkCountryCode) {
        return checkCountryCode ? ISIN_VALIDATOR_TRUE : ISIN_VALIDATOR_FALSE;
    }","  public void test2()  throws Throwable  {
      ISINValidator iSINValidator0 = ISINValidator.getInstance(false);
}"
1609,"    public boolean isStrict() {
        return strict;
    }","  public void test0()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      ShortValidator shortValidator0 = new ShortValidator();
      DateFormat dateFormat0 = DateFormat.getDateInstance((int) (short)0, locale0);
      shortValidator0.parse("""", dateFormat0);
}"
1610,"    protected Object parse(String value, Format formatter) {

        ParsePosition pos = new ParsePosition(0);
        Object parsedValue = formatter.parseObject(value, pos);
        if (pos.getErrorIndex() > -1) {
            return null;
        }

        if (isStrict() && pos.getIndex() < value.length()) {
            return null;
        }

        if (parsedValue != null) {
            parsedValue = processParsedValue(parsedValue, formatter);
        }

        return parsedValue;

    }","  public void test1()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(false, (-2493));
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Object object0 = shortValidator0.parse(""1+W-kCWQ?^:f$"", decimalFormat0);
}"
1611,"    public boolean isStrict() {
        return strict;
    }","  public void test2()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(false, (-2493));
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Object object0 = shortValidator0.parse(""1+W-kCWQ?^:f$"", decimalFormat0);
}"
1612,"    public boolean isValid(String value) {
        return isValid(value, (String)null, (Locale)null);
    }","  public void test3()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(false, (-2481));
      Locale locale0 = Locale.GERMAN;
      boolean boolean0 = shortValidator0.isValid(""9%_p+6MvGF*Dz]P-DV"", locale0);
}"
1613,"    public boolean isStrict() {
        return strict;
    }","  public void test4()  throws Throwable  {
      LongValidator longValidator0 = new LongValidator(false, (-199));
      Locale locale0 = Locale.FRENCH;
      longValidator0.isValid("""", "",@iNZ5,T)c=iV|e-"", locale0);
}"
1614,"    public boolean isValid(String value) {
        return isValid(value, (String)null, (Locale)null);
    }","  public void test5()  throws Throwable  {
      LongValidator longValidator0 = LongValidator.getInstance();
      boolean boolean0 = longValidator0.isValid(""L0f_O6-+hQ8>"", ""L0f_O6-+hQ8>"");
}"
1615,"    public boolean isValid(String value) {
        return isValid(value, (String)null, (Locale)null);
    }","  public void test6()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(false, (-2481));
      boolean boolean0 = shortValidator0.isValid(""6IKpXjdWn:d NC>jLP"");
}"
1616,"    public boolean isStrict() {
        return strict;
    }","  public void test7()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator(false, (-2272));
      boolean boolean0 = doubleValidator0.isStrict();
}"
1617,"    public boolean isStrict() {
        return strict;
    }","  public void test8()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.GERMANY;
      calendarValidator0.format((Object) null, locale0);
}"
1618,"    public String format(Object value) {
        return format(value, (String)null, (Locale)null);
    }","  public void test9()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Locale locale0 = Locale.US;
      String string0 = integerValidator0.format((Object) integerValidator0.PERCENT_FORMAT, locale0);
}"
1619,"    public String format(Object value) {
        return format(value, (String)null, (Locale)null);
    }","  public void test10()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      String string0 = timeValidator0.format((Object) null, (Format) mockSimpleDateFormat0);
}"
1620,"    public String format(Object value) {
        return format(value, (String)null, (Locale)null);
    }","  public void test11()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.ENGLISH;
      String string0 = timeValidator0.format((Object) null, """", locale0);
}"
1621,"    public boolean isStrict() {
        return strict;
    }","  public void test12()  throws Throwable  {
      PercentValidator percentValidator0 = new PercentValidator(true);
      percentValidator0.format((Object) percentValidator0.STANDARD_FORMAT, (String) null, (Locale) null);
}"
1622,"    public boolean isStrict() {
        return strict;
    }","  public void test13()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      calendarValidator0.format((Object) null, (String) null);
}"
1623,"    public String format(Object value) {
        return format(value, (String)null, (Locale)null);
    }","  public void test14()  throws Throwable  {
      BigDecimalValidator bigDecimalValidator0 = CurrencyValidator.getInstance();
      Long long0 = new Long(0L);
      String string0 = bigDecimalValidator0.format((Object) long0, ""L0f_O6-+hQ8>"");
}"
1624,"    public String format(Object value) {
        return format(value, (String)null, (Locale)null);
    }","  public void test15()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      String string0 = calendarValidator0.format((Object) null);
}"
1625,"    public String format(Object value) {
        return format(value, (String)null, (Locale)null);
    }","  public void test16()  throws Throwable  {
      FloatValidator floatValidator0 = FloatValidator.getInstance();
      Float float0 = new Float((-1.0));
      String string0 = floatValidator0.format((Object) float0);
}"
1626,"    protected Object parse(String value, Format formatter) {

        ParsePosition pos = new ParsePosition(0);
        Object parsedValue = formatter.parseObject(value, pos);
        if (pos.getErrorIndex() > -1) {
            return null;
        }

        if (isStrict() && pos.getIndex() < value.length()) {
            return null;
        }

        if (parsedValue != null) {
            parsedValue = processParsedValue(parsedValue, formatter);
        }

        return parsedValue;

    }","  public void test17()  throws Throwable  {
      LongValidator longValidator0 = new LongValidator();
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Locale locale0 = Locale.CHINA;
      Format format0 = calendarValidator0.getFormat(locale0);
      // Undeclared exception!
      try { 
        longValidator0.parse((String) null, format0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
1627,"    public boolean isValid(String value) {
        return isValid(value, (String)null, (Locale)null);
    }","  public void test18()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(false, 12);
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        timeValidator0.isValid(""|"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 12
         //
         verifyException(""java.text.DateFormat"", e);
      }
  }"
1628,"    public boolean isValid(String value) {
        return isValid(value, (String)null, (Locale)null);
    }","  public void test19()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        dateValidator0.isValid(""fDk<7:nX=Cy8^"", ""v"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'v'
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
1629,"    public boolean isValid(String value) {
        return isValid(value, (String)null, (Locale)null);
    }","  public void test20()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      // Undeclared exception!
      try { 
        shortValidator0.isValid(""org.apache.commons.validator.routines.PercentValidator"", ""org.apache.commons.validator.routines.PercentValidator"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \""org.apache.commons.validator.routines.PercentValidator\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1630,"    public String format(Object value) {
        return format(value, (String)null, (Locale)null);
    }","  public void test21()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      // Undeclared exception!
      try { 
        integerValidator0.format((Object) ""zh-TW"", (Format) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.AbstractFormatValidator"", e);
      }
  }"
1631,"    public String format(Object value) {
        return format(value, (String)null, (Locale)null);
    }","  public void test22()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      // Undeclared exception!
      try { 
        shortValidator0.format((Object) integerValidator0, (Format) dateFormat0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
         verifyException(""java.text.DateFormat"", e);
      }
  }"
1632,"    public String format(Object value) {
        return format(value, (String)null, (Locale)null);
    }","  public void test23()  throws Throwable  {
      ByteValidator byteValidator0 = ByteValidator.getInstance();
      MessageFormat messageFormat0 = new MessageFormat(""2"");
      // Undeclared exception!
      try { 
        byteValidator0.format((Object) ""2"", (Format) messageFormat0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to [Ljava.lang.Object;
         //
         verifyException(""java.text.MessageFormat"", e);
      }
  }"
1633,"    public String format(Object value) {
        return format(value, (String)null, (Locale)null);
    }","  public void test24()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = BigIntegerValidator.getInstance();
      BigInteger bigInteger0 = BigInteger.TEN;
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      String string0 = bigIntegerValidator0.format((Object) bigInteger0, (Format) dateFormat0);
}"
1634,"    public String format(Object value) {
        return format(value, (String)null, (Locale)null);
    }","  public void test25()  throws Throwable  {
      FloatValidator floatValidator0 = new FloatValidator();
      CalendarValidator calendarValidator0 = new CalendarValidator();
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      Object object0 = calendarValidator0.processParsedValue(floatValidator0, dateFormat0);
      Locale locale0 = Locale.UK;
      // Undeclared exception!
      try { 
        floatValidator0.format(object0, ""hF7u>LHE-%Y$,DZ"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \""hF7u>LHE-%Y$,DZ\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1635,"    public boolean isStrict() {
        return strict;
    }","  public void test26()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = BigIntegerValidator.getInstance();
      boolean boolean0 = bigIntegerValidator0.isStrict();
}"
1636,"    public boolean isStrict() {
        return strict;
    }","  public void test27()  throws Throwable  {
      PercentValidator percentValidator0 = new PercentValidator();
      Locale locale0 = Locale.CANADA_FRENCH;
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofPattern("""", locale0);
      TemporalQuery<Object> temporalQuery0 = (TemporalQuery<Object>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(temporalQuery0).queryFrom(any(java.time.temporal.TemporalAccessor.class));
      Format format0 = dateTimeFormatter0.toFormat(temporalQuery0);
      percentValidator0.parse("""", format0);
}"
1637,"    protected Object parse(String value, Format formatter) {

        ParsePosition pos = new ParsePosition(0);
        Object parsedValue = formatter.parseObject(value, pos);
        if (pos.getErrorIndex() > -1) {
            return null;
        }

        if (isStrict() && pos.getIndex() < value.length()) {
            return null;
        }

        if (parsedValue != null) {
            parsedValue = processParsedValue(parsedValue, formatter);
        }

        return parsedValue;

    }","  public void test28()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      ShortValidator shortValidator0 = new ShortValidator();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
      // Undeclared exception!
      try { 
        shortValidator0.parse("""", mockSimpleDateFormat0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.util.Date cannot be cast to java.lang.Number
         //
         verifyException(""org.apache.commons.validator.routines.ShortValidator"", e);
      }
  }"
1638,"    public String format(Object value) {
        return format(value, (String)null, (Locale)null);
    }","  public void test29()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator();
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        byteValidator0.format((Object) """", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1639,"    public String format(Object value) {
        return format(value, (String)null, (Locale)null);
    }","  public void test30()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange(""b"");
      // Undeclared exception!
      try { 
        shortValidator0.format((Object) locale_LanguageRange0, ""b"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1640,"    public boolean isValid(String value) {
        return isValid(value, (String)null, (Locale)null);
    }","  public void test31()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Locale locale0 = Locale.GERMANY;
      boolean boolean0 = calendarValidator0.isValid((String) null, locale0);
}"
1641,"    public boolean isValid(String value) {
        return isValid(value, (String)null, (Locale)null);
    }","  public void test32()  throws Throwable  {
      ByteValidator byteValidator0 = new ByteValidator();
      Locale locale0 = Locale.ITALIAN;
      boolean boolean0 = byteValidator0.isValid(""67^KM1+&Y"", """", locale0);
}"
1642,"    public String format(Object value) {
        return format(value, (String)null, (Locale)null);
    }","  public void test33()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      // Undeclared exception!
      try { 
        currencyValidator0.format((Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1643,"    public boolean isStrict() {
        return strict;
    }","  public void test34()  throws Throwable  {
      CurrencyValidator currencyValidator0 = new CurrencyValidator();
      currencyValidator0.isValid(""L0f_O6-hQ8V"");
}"
1644,"    public boolean isStrict() {
        return strict;
    }","  public void test35()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      integerValidator0.isValid("""", ""JwQ675|En?KNX)+76"");
}"
1645,"    public String extractFromEAN13(String ean13) {
        String input = ean13.trim();
        if (input.length() != EAN_ISSN_LEN ) {
            throw new IllegalArgumentException(""Invalid length "" + input.length() + "" for '"" + input + ""'"");
        }
        if (!input.startsWith(ISSN_PREFIX)) {
            throw new IllegalArgumentException(""Prefix must be "" + ISSN_PREFIX + "" to contain an ISSN: '"" + ean13 + ""'"");
        }
        Object result = validateEan(input);
        if (result == null) {
            return null;
        }
        // Calculate the ISSN code
        input = result.toString();
        try {
            //CHECKSTYLE:OFF: MagicNumber
            String issnBase = input.substring(3,10); // TODO: how to derive these
            //CHECKSTYLE:ON: MagicNumber
            String checkDigit = ISSNCheckDigit.ISSN_CHECK_DIGIT.calculate(issnBase);
            String issn = issnBase + checkDigit;
            return issn;
        } catch (CheckDigitException e) { // Should not happen
            throw new IllegalArgumentException(""Check digit error for '"" + ean13 + ""' - "" + e.getMessage());
        }
    }","  public void test0()  throws Throwable  {
      ISSNValidator iSSNValidator0 = new ISSNValidator();
      // Undeclared exception!
      try { 
        iSSNValidator0.extractFromEAN13("" c&I_L$cweZ9/E"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Prefix must be 977 to contain an ISSN: ' c&I_L$cweZ9/E'
         //
         verifyException(""org.apache.commons.validator.routines.ISSNValidator"", e);
      }
  }"
1646,"    public String extractFromEAN13(String ean13) {
        String input = ean13.trim();
        if (input.length() != EAN_ISSN_LEN ) {
            throw new IllegalArgumentException(""Invalid length "" + input.length() + "" for '"" + input + ""'"");
        }
        if (!input.startsWith(ISSN_PREFIX)) {
            throw new IllegalArgumentException(""Prefix must be "" + ISSN_PREFIX + "" to contain an ISSN: '"" + ean13 + ""'"");
        }
        Object result = validateEan(input);
        if (result == null) {
            return null;
        }
        // Calculate the ISSN code
        input = result.toString();
        try {
            //CHECKSTYLE:OFF: MagicNumber
            String issnBase = input.substring(3,10); // TODO: how to derive these
            //CHECKSTYLE:ON: MagicNumber
            String checkDigit = ISSNCheckDigit.ISSN_CHECK_DIGIT.calculate(issnBase);
            String issn = issnBase + checkDigit;
            return issn;
        } catch (CheckDigitException e) { // Should not happen
            throw new IllegalArgumentException(""Check digit error for '"" + ean13 + ""' - "" + e.getMessage());
        }
    }","  public void test1()  throws Throwable  {
      ISSNValidator iSSNValidator0 = new ISSNValidator();
      // Undeclared exception!
      try { 
        iSSNValidator0.extractFromEAN13(""/,]U0)_>)6Q)hvVePB"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid length 18 for '/,]U0)_>)6Q)hvVePB'
         //
         verifyException(""org.apache.commons.validator.routines.ISSNValidator"", e);
      }
  }"
1647,"    public String extractFromEAN13(String ean13) {
        String input = ean13.trim();
        if (input.length() != EAN_ISSN_LEN ) {
            throw new IllegalArgumentException(""Invalid length "" + input.length() + "" for '"" + input + ""'"");
        }
        if (!input.startsWith(ISSN_PREFIX)) {
            throw new IllegalArgumentException(""Prefix must be "" + ISSN_PREFIX + "" to contain an ISSN: '"" + ean13 + ""'"");
        }
        Object result = validateEan(input);
        if (result == null) {
            return null;
        }
        // Calculate the ISSN code
        input = result.toString();
        try {
            //CHECKSTYLE:OFF: MagicNumber
            String issnBase = input.substring(3,10); // TODO: how to derive these
            //CHECKSTYLE:ON: MagicNumber
            String checkDigit = ISSNCheckDigit.ISSN_CHECK_DIGIT.calculate(issnBase);
            String issn = issnBase + checkDigit;
            return issn;
        } catch (CheckDigitException e) { // Should not happen
            throw new IllegalArgumentException(""Check digit error for '"" + ean13 + ""' - "" + e.getMessage());
        }
    }","  public void test2()  throws Throwable  {
      ISSNValidator iSSNValidator0 = new ISSNValidator();
      // Undeclared exception!
      try { 
        iSSNValidator0.extractFromEAN13(""' - "");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid length 3 for '' -'
         //
         verifyException(""org.apache.commons.validator.routines.ISSNValidator"", e);
      }
  }"
1648,"    public String convertToEAN13(String issn, String suffix) {

        if (suffix == null || !suffix.matches(""\\d\\d"")) {
            throw new IllegalArgumentException(""Suffix must be two digits: '"" + suffix + ""'"");            
        }

        Object result = validate(issn);
        if (result == null) {
            return null;
        }

        // Calculate the new EAN-13 code
        final String input = result.toString();
        String ean13 = ISSN_PREFIX + input.substring(0, input.length() -1) + suffix;
        try {
            String checkDigit = EAN13CheckDigit.EAN13_CHECK_DIGIT.calculate(ean13);
            ean13 += checkDigit;
            return ean13;
        } catch (CheckDigitException e) { // Should not happen
            throw new IllegalArgumentException(""Check digit error for '"" + ean13 + ""' - "" + e.getMessage());
        }

    }","  public void test3()  throws Throwable  {
      ISSNValidator iSSNValidator0 = ISSNValidator.getInstance();
      String string0 = iSSNValidator0.convertToEAN13((String) null, ""00"");
}"
1649,"    public String extractFromEAN13(String ean13) {
        String input = ean13.trim();
        if (input.length() != EAN_ISSN_LEN ) {
            throw new IllegalArgumentException(""Invalid length "" + input.length() + "" for '"" + input + ""'"");
        }
        if (!input.startsWith(ISSN_PREFIX)) {
            throw new IllegalArgumentException(""Prefix must be "" + ISSN_PREFIX + "" to contain an ISSN: '"" + ean13 + ""'"");
        }
        Object result = validateEan(input);
        if (result == null) {
            return null;
        }
        // Calculate the ISSN code
        input = result.toString();
        try {
            //CHECKSTYLE:OFF: MagicNumber
            String issnBase = input.substring(3,10); // TODO: how to derive these
            //CHECKSTYLE:ON: MagicNumber
            String checkDigit = ISSNCheckDigit.ISSN_CHECK_DIGIT.calculate(issnBase);
            String issn = issnBase + checkDigit;
            return issn;
        } catch (CheckDigitException e) { // Should not happen
            throw new IllegalArgumentException(""Check digit error for '"" + ean13 + ""' - "" + e.getMessage());
        }
    }","  public void test4()  throws Throwable  {
      ISSNValidator iSSNValidator0 = new ISSNValidator();
      // Undeclared exception!
      try { 
        iSSNValidator0.extractFromEAN13((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.ISSNValidator"", e);
      }
  }"
1650,"    public String convertToEAN13(String issn, String suffix) {

        if (suffix == null || !suffix.matches(""\\d\\d"")) {
            throw new IllegalArgumentException(""Suffix must be two digits: '"" + suffix + ""'"");            
        }

        Object result = validate(issn);
        if (result == null) {
            return null;
        }

        // Calculate the new EAN-13 code
        final String input = result.toString();
        String ean13 = ISSN_PREFIX + input.substring(0, input.length() -1) + suffix;
        try {
            String checkDigit = EAN13CheckDigit.EAN13_CHECK_DIGIT.calculate(ean13);
            ean13 += checkDigit;
            return ean13;
        } catch (CheckDigitException e) { // Should not happen
            throw new IllegalArgumentException(""Check digit error for '"" + ean13 + ""' - "" + e.getMessage());
        }

    }","  public void test5()  throws Throwable  {
      ISSNValidator iSSNValidator0 = new ISSNValidator();
      // Undeclared exception!
      try { 
        iSSNValidator0.convertToEAN13("""", """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Suffix must be two digits: ''
         //
         verifyException(""org.apache.commons.validator.routines.ISSNValidator"", e);
      }
  }"
1651,"    public Object validateEan(String code) {
        return EAN_VALIDATOR.validate(code);
    }","  public void test6()  throws Throwable  {
      ISSNValidator iSSNValidator0 = new ISSNValidator();
      Object object0 = iSSNValidator0.validateEan(""#'8&8E"");
}"
1652,"    public String convertToEAN13(String issn, String suffix) {

        if (suffix == null || !suffix.matches(""\\d\\d"")) {
            throw new IllegalArgumentException(""Suffix must be two digits: '"" + suffix + ""'"");            
        }

        Object result = validate(issn);
        if (result == null) {
            return null;
        }

        // Calculate the new EAN-13 code
        final String input = result.toString();
        String ean13 = ISSN_PREFIX + input.substring(0, input.length() -1) + suffix;
        try {
            String checkDigit = EAN13CheckDigit.EAN13_CHECK_DIGIT.calculate(ean13);
            ean13 += checkDigit;
            return ean13;
        } catch (CheckDigitException e) { // Should not happen
            throw new IllegalArgumentException(""Check digit error for '"" + ean13 + ""' - "" + e.getMessage());
        }

    }","  public void test7()  throws Throwable  {
      ISSNValidator iSSNValidator0 = ISSNValidator.getInstance();
      // Undeclared exception!
      try { 
        iSSNValidator0.convertToEAN13((String) null, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Suffix must be two digits: 'null'
         //
         verifyException(""org.apache.commons.validator.routines.ISSNValidator"", e);
      }
  }"
1653,"    public boolean isValid(String code) {
        return VALIDATOR.isValid(code);
    }","  public void test8()  throws Throwable  {
      ISSNValidator iSSNValidator0 = new ISSNValidator();
      boolean boolean0 = iSSNValidator0.isValid(""Invalid length "");
}"
1654,"    public Object validate(String code) {
        return VALIDATOR.validate(code);
    }","  public void test9()  throws Throwable  {
      ISSNValidator iSSNValidator0 = new ISSNValidator();
      Object object0 = iSSNValidator0.validate("""");
}"
1655,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test0()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      calendarValidator0.validate(""English"", (String) null);
  }"
1656,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test1()  throws Throwable  {
      Locale locale0 = new Locale(""IN'R?KDqs.nmk$c"");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""3"", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      calendarValidator0.validate(""Thursday, January 1, 1970"", locale0, timeZone0);
  }"
1657,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test2()  throws Throwable  {
      Locale locale0 = new Locale(""IN'R?KDqnmk$c"");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""3"", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      calendarValidator0.validate(""3"", ""3"", timeZone0);
  }"
1658,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test3()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.GERMANY;
      calendarValidator0.validate("":"", "":"", locale0);
  }"
1659,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test4()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, (-1110));
      calendarValidator0.validate(""?&."", ""?&."");
  }"
1660,"    protected Object processParsedValue(Object value, Format formatter) {
        return ((DateFormat)formatter).getCalendar();
    }","  public void test5()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, (-2024));
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      calendarValidator0.processParsedValue(mockSimpleDateFormat0, mockSimpleDateFormat0);
  }"
1661,"    public int compareYears(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.YEAR);
    }","  public void test6()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      calendarValidator0.compareYears(mockGregorianCalendar0, mockGregorianCalendar0);
  }"
1662,"    public int compareYears(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.YEAR);
    }","  public void test7()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(0, 0, 0, 1322, 0, 0);
      calendarValidator0.compareYears(mockGregorianCalendar0, mockGregorianCalendar1);
  }"
1663,"    public int compareYears(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.YEAR);
    }","  public void test8()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1731, 2517, 1731);
      Locale locale0 = Locale.CANADA;
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
      calendarValidator0.compareYears(mockGregorianCalendar0, mockGregorianCalendar1);
  }"
1664,,"  public void test9()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
}"
1665,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test10()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
}"
1666,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test11()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
}"
1667,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test12()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
}"
1668,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test13()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
}"
1669,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test14()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1670,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test15()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1671,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test16()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1672,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test17()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1673,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test18()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1674,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test19()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1675,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test20()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1676,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test21()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1677,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test22()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1678,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test23()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1679,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test24()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1680,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test25()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1681,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test26()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1682,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test27()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 37);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(723, 0, 570, 570, 0, 11);
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1683,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test28()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
}"
1684,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test29()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
}"
1685,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test30()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
}"
1686,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test31()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
}"
1687,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test32()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
}"
1688,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test33()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1689,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test34()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1690,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test35()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1691,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test36()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1692,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test37()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1693,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test38()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1694,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test39()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1695,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test40()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1696,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test41()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1697,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test42()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1698,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test43()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1699,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test44()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1700,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test45()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1701,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test46()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 14, 14, 0, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareWeeks(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1702,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test47()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
}"
1703,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test48()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
}"
1704,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test49()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
}"
1705,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test50()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
}"
1706,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test51()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
}"
1707,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test52()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
}"
1708,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test53()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
}"
1709,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test54()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
}"
1710,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test55()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
}"
1711,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test56()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
}"
1712,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test57()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
}"
1713,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test58()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
}"
1714,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test59()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
}"
1715,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test60()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
}"
1716,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test61()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
}"
1717,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test62()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
}"
1718,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test63()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
}"
1719,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test64()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
}"
1720,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test65()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
}"
1721,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test66()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
}"
1722,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test67()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
}"
1723,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test68()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
}"
1724,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test69()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
}"
1725,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test70()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
}"
1726,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test71()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
}"
1727,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test72()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
}"
1728,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test73()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1092), 1, 1);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 0);
}"
1729,,"  public void test74()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
}"
1730,,"  public void test75()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
}"
1731,,"  public void test76()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
}"
1732,,"  public void test77()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
}"
1733,,"  public void test78()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
}"
1734,,"  public void test79()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
}"
1735,,"  public void test80()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
}"
1736,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test81()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
}"
1737,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test82()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
}"
1738,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test83()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
}"
1739,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test84()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
}"
1740,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test85()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
}"
1741,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test86()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
}"
1742,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test87()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
}"
1743,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test88()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
}"
1744,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test89()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
}"
1745,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test90()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
}"
1746,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test91()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
}"
1747,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test92()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
}"
1748,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test93()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
}"
1749,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test94()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
}"
1750,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test95()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
}"
1751,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test96()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
}"
1752,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test97()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
}"
1753,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test98()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
}"
1754,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test99()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
}"
1755,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test100()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
}"
1756,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test101()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
}"
1757,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test102()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
}"
1758,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test103()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
}"
1759,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test104()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
}"
1760,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test105()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
}"
1761,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test106()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
}"
1762,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test107()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
}"
1763,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test108()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
}"
1764,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test109()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
}"
1765,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test110()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
}"
1766,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test111()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
}"
1767,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test112()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
}"
1768,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test113()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
}"
1769,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test114()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
}"
1770,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test115()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 2649);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4660), (-4660), 0);
      int int0 = calendarValidator0.compareQuarters(calendar0, (Calendar) mockGregorianCalendar0, 1739);
}"
1771,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test116()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
}"
1772,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test117()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
}"
1773,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test118()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
}"
1774,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test119()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
}"
1775,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test120()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
}"
1776,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test121()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
}"
1777,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test122()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
}"
1778,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test123()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
}"
1779,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test124()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
}"
1780,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test125()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
}"
1781,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test126()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      int int0 = calendarValidator0.compareQuarters((Calendar) gregorianCalendar0, (Calendar) gregorianCalendar0);
}"
1782,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test127()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      int int0 = calendarValidator0.compareQuarters((Calendar) gregorianCalendar0, (Calendar) gregorianCalendar0);
}"
1783,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test128()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      int int0 = calendarValidator0.compareQuarters((Calendar) gregorianCalendar0, (Calendar) gregorianCalendar0);
}"
1784,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test129()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      int int0 = calendarValidator0.compareQuarters((Calendar) gregorianCalendar0, (Calendar) gregorianCalendar0);
}"
1785,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test130()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      int int0 = calendarValidator0.compareQuarters((Calendar) gregorianCalendar0, (Calendar) gregorianCalendar0);
}"
1786,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test131()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofLocal(localDateTime0, zoneOffset0, zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      int int0 = calendarValidator0.compareQuarters((Calendar) gregorianCalendar0, (Calendar) gregorianCalendar0);
}"
1787,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test132()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
}"
1788,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test133()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
}"
1789,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test134()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
}"
1790,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test135()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
}"
1791,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test136()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
}"
1792,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test137()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
}"
1793,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test138()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
}"
1794,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test139()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
}"
1795,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test140()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
}"
1796,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test141()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
}"
1797,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test142()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
}"
1798,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test143()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
}"
1799,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test144()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
}"
1800,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test145()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
}"
1801,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test146()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
}"
1802,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test147()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
}"
1803,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test148()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
}"
1804,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test149()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
}"
1805,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test150()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1756), 12, (-1756), 12, 0, 0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
}"
1806,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test151()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
}"
1807,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test152()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
}"
1808,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test153()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
}"
1809,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test154()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone(""e@Phh%`ikRc"");
}"
1810,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test155()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone(""e@Phh%`ikRc"");
}"
1811,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test156()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone(""e@Phh%`ikRc"");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
}"
1812,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test157()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone(""e@Phh%`ikRc"");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
}"
1813,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test158()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone(""e@Phh%`ikRc"");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
}"
1814,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test159()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone(""e@Phh%`ikRc"");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
}"
1815,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test160()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone(""e@Phh%`ikRc"");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
}"
1816,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test161()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone(""e@Phh%`ikRc"");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
}"
1817,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test162()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone(""e@Phh%`ikRc"");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
}"
1818,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test163()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone(""e@Phh%`ikRc"");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
}"
1819,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test164()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone(""e@Phh%`ikRc"");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
}"
1820,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test165()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone(""e@Phh%`ikRc"");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
}"
1821,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test166()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone(""e@Phh%`ikRc"");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
}"
1822,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test167()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone(""e@Phh%`ikRc"");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
}"
1823,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test168()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone(""e@Phh%`ikRc"");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
}"
1824,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test169()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone(""e@Phh%`ikRc"");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
}"
1825,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test170()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone(""e@Phh%`ikRc"");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
}"
1826,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test171()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone(""e@Phh%`ikRc"");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
}"
1827,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test172()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone(""e@Phh%`ikRc"");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
}"
1828,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test173()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone(""e@Phh%`ikRc"");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
}"
1829,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test174()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone(""e@Phh%`ikRc"");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
}"
1830,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test175()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone(""e@Phh%`ikRc"");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
}"
1831,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test176()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone(""e@Phh%`ikRc"");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
}"
1832,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test177()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone(""e@Phh%`ikRc"");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
}"
1833,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test178()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2895, 13);
      TimeZone timeZone0 = TimeZone.getTimeZone(""e@Phh%`ikRc"");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      int int0 = calendarValidator0.compareQuarters((Calendar) mockGregorianCalendar0, calendar0);
}"
1834,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test179()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
}"
1835,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test180()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
}"
1836,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test181()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 0, 0, 0, 636);
}"
1837,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test182()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 0, 0, 0, 636);
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar0);
}"
1838,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test183()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 0, 0, 0, 636);
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar0);
}"
1839,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test184()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 0, 0, 0, 636);
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar0);
}"
1840,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test185()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 0, 0, 0, 636);
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar0);
}"
1841,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test186()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 0, 0, 0, 636);
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar0);
}"
1842,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test187()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 0, 0, 0, 636);
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar0);
}"
1843,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test188()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
}"
1844,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test189()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
}"
1845,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test190()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
}"
1846,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test191()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
}"
1847,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test192()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
}"
1848,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test193()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
}"
1849,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test194()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
}"
1850,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test195()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
}"
1851,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test196()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
}"
1852,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test197()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
}"
1853,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test198()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
}"
1854,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test199()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
}"
1855,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test200()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
}"
1856,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test201()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
}"
1857,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test202()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
}"
1858,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test203()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
}"
1859,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test204()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
}"
1860,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test205()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
}"
1861,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test206()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
}"
1862,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test207()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
}"
1863,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test208()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
}"
1864,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test209()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
}"
1865,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test210()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
}"
1866,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test211()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
}"
1867,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test212()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
}"
1868,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test213()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
}"
1869,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test214()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
}"
1870,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test215()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
}"
1871,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test216()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
}"
1872,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test217()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 910, 0);
      int int0 = calendarValidator0.compareMonths(calendar0, mockGregorianCalendar0);
}"
1873,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test218()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
}"
1874,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test219()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
}"
1875,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test220()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
}"
1876,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test221()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
}"
1877,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test222()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
}"
1878,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test223()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
}"
1879,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test224()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
}"
1880,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test225()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
}"
1881,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test226()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
}"
1882,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test227()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1883,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test228()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1884,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test229()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1885,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test230()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1886,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test231()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1887,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test232()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1888,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test233()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1889,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test234()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1890,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test235()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1891,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test236()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1892,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test237()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1893,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test238()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1894,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test239()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1895,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test240()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1888, 1888, 1888);
      mockGregorianCalendar0.set(1888, 1104, 1888, 1888, 1888);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      int int0 = calendarValidator0.compareMonths(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1896,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test241()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
}"
1897,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test242()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
}"
1898,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test243()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
}"
1899,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test244()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
}"
1900,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test245()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
}"
1901,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test246()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1902,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test247()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1903,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test248()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1904,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test249()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1905,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test250()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1906,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test251()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1907,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test252()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1908,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test253()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1909,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test254()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1910,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test255()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1911,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test256()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1912,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test257()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1913,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test258()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1914,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test259()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(14, 0, 14);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1915,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test260()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
}"
1916,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test261()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
}"
1917,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test262()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
}"
1918,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test263()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
}"
1919,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test264()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
}"
1920,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test265()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
}"
1921,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test266()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
}"
1922,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test267()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
}"
1923,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test268()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
}"
1924,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test269()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
}"
1925,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test270()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
}"
1926,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test271()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
}"
1927,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test272()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
}"
1928,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test273()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1929,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test274()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1930,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test275()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1931,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test276()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1932,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test277()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1933,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test278()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1934,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test279()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1935,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test280()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1936,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test281()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1937,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test282()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1938,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test283()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1939,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test284()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1940,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test285()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1941,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test286()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1942,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test287()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1943,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test288()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1944,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test289()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1945,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test290()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1946,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test291()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale(""kvN}T$OA~"", ""org.apache.commons.validator.routines.CalendarValidator"", ""org.apache.commons.validator.routines.CalendarValidator"");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-3037), (-3037), (-3037));
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar1);
}"
1947,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test292()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 1384);
}"
1948,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test293()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 1384);
}"
1949,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test294()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 1384);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(241, ""\""EHi=FWV"");
}"
1950,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test295()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 1384);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(241, ""\""EHi=FWV"");
}"
1951,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test296()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 1384);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(241, ""\""EHi=FWV"");
}"
1952,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test297()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 1384);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(241, ""\""EHi=FWV"");
}"
1953,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test298()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 1384);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(241, ""\""EHi=FWV"");
}"
1954,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test299()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 1384);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(241, ""\""EHi=FWV"");
}"
1955,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test300()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 16);
}"
1956,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test301()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 16);
}"
1957,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test302()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 16);
      Locale locale0 = Locale.CANADA;
}"
1958,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test303()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 16);
      Locale locale0 = Locale.CANADA;
}"
1959,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test304()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 16);
      Locale locale0 = Locale.CANADA;
}"
1960,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test305()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 16);
      Locale locale0 = Locale.CANADA;
}"
1961,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test306()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 16);
      Locale locale0 = Locale.CANADA;
}"
1962,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test307()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 16);
      Locale locale0 = Locale.CANADA;
}"
1963,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test308()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 16);
      Locale locale0 = Locale.CANADA;
}"
1964,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test309()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 4417);
}"
1965,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test310()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 4417);
}"
1966,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test311()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 4417);
      Locale locale0 = Locale.GERMANY;
}"
1967,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test312()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 4417);
      Locale locale0 = Locale.GERMANY;
}"
1968,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test313()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 4417);
      Locale locale0 = Locale.GERMANY;
}"
1969,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test314()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 4417);
      Locale locale0 = Locale.GERMANY;
}"
1970,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test315()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 4417);
      Locale locale0 = Locale.GERMANY;
}"
1971,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test316()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 4417);
      Locale locale0 = Locale.GERMANY;
}"
1972,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test317()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(false, 4417);
      Locale locale0 = Locale.GERMANY;
}"
1973,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test318()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
}"
1974,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test319()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
}"
1975,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test320()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""YjS:[ES0W4[ Afs(fE/"");
}"
1976,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test321()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""YjS:[ES0W4[ Afs(fE/"");
}"
1977,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test322()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""YjS:[ES0W4[ Afs(fE/"");
}"
1978,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test323()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""YjS:[ES0W4[ Afs(fE/"");
}"
1979,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test324()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""YjS:[ES0W4[ Afs(fE/"");
}"
1980,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test325()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""YjS:[ES0W4[ Afs(fE/"");
}"
1981,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test326()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
}"
1982,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test327()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
}"
1983,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test328()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale(""IN'R?KDqnmk$c"");
}"
1984,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test329()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale(""IN'R?KDqnmk$c"");
}"
1985,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test330()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale(""IN'R?KDqnmk$c"");
}"
1986,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test331()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale(""IN'R?KDqnmk$c"");
}"
1987,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test332()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale(""IN'R?KDqnmk$c"");
}"
1988,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test333()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale(""IN'R?KDqnmk$c"");
}"
1989,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test334()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale(""IN'R?KDqnmk$c"");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""3"", locale0);
}"
1990,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test335()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale(""IN'R?KDqnmk$c"");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""3"", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
}"
1991,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test336()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale(""IN'R?KDqnmk$c"");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""3"", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
}"
1992,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test337()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale(""IN'R?KDqnmk$c"");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""3"", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
}"
1993,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test338()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale(""IN'R?KDqnmk$c"");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""3"", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
}"
1994,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test339()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale(""IN'R?KDqnmk$c"");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""3"", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
}"
1995,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test340()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale(""IN'R?KDqnmk$c"");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""3"", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
}"
1996,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test341()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale(""IN'R?KDqnmk$c"");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""3"", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
}"
1997,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test342()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale(""IN'R?KDqnmk$c"");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""3"", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
}"
1998,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test343()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale(""IN'R?KDqnmk$c"");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""3"", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
}"
1999,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test344()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = new Locale(""IN'R?KDqnmk$c"");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""3"", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
}"
2000,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test345()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
}"
2001,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test346()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
}"
2002,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test347()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.ITALIAN;
}"
2003,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test348()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.ITALIAN;
}"
2004,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test349()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.ITALIAN;
}"
2005,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test350()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.ITALIAN;
}"
2006,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test351()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.ITALIAN;
}"
2007,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test352()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.ITALIAN;
}"
2008,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test353()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.ITALIAN;
}"
2009,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test354()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
}"
2010,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test355()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
}"
2011,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test356()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 5);
}"
2012,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test357()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 5);
}"
2013,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test358()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
}"
2014,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test359()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
}"
2015,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test360()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
}"
2016,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test361()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
}"
2017,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test362()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
}"
2018,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test363()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
}"
2019,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test364()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
}"
2020,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test365()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
}"
2021,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test366()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
}"
2022,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test367()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
}"
2023,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test368()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
}"
2024,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test369()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
}"
2025,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test370()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
}"
2026,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test371()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
}"
2027,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test372()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
}"
2028,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test373()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      calendar0.set(0, (-3847));
}"
2029,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test374()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      calendar0.set(0, (-3847));
}"
2030,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test375()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      calendar0.set(0, (-3847));
}"
2031,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test376()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      calendar0.set(0, (-3847));
}"
2032,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test377()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
}"
2033,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test378()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
}"
2034,,"  public void test379()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
}"
2035,,"  public void test380()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
}"
2036,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test381()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
}"
2037,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test382()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
}"
2038,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test383()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
}"
2039,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test384()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
}"
2040,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test385()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
}"
2041,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test386()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
}"
2042,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test387()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
}"
2043,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test388()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
}"
2044,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test389()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
}"
2045,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test390()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
}"
2046,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test391()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
}"
2047,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test392()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
}"
2048,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test393()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
}"
2049,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test394()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
}"
2050,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test395()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
}"
2051,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test396()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
}"
2052,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test397()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
}"
2053,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test398()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
}"
2054,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test399()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
}"
2055,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test400()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
}"
2056,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test401()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
}"
2057,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test402()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
}"
2058,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test403()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
}"
2059,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test404()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
}"
2060,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test405()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
}"
2061,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test406()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
}"
2062,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test407()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
}"
2063,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test408()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
}"
2064,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test409()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
}"
2065,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test410()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
}"
2066,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test411()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
}"
2067,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test412()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
}"
2068,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test413()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
}"
2069,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test414()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
}"
2070,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test415()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
}"
2071,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test416()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
}"
2072,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test417()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
}"
2073,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test418()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = calendarValidator0.validate(""["", ""["", locale0, timeZone0);
      int int0 = calendarValidator0.compareQuarters(calendar0, calendar0, 2);
}"
2074,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test419()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
}"
2075,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test420()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
}"
2076,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test421()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
}"
2077,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test422()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
}"
2078,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test423()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
}"
2079,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test424()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
}"
2080,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test425()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
}"
2081,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test426()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
}"
2082,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test427()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
}"
2083,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test428()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
}"
2084,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test429()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
}"
2085,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test430()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      calendar0.set(0, 1389);
}"
2086,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test431()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      calendar0.set(0, 1389);
}"
2087,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test432()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      calendar0.set(0, 1389);
}"
2088,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test433()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      calendar0.set(0, 1389);
}"
2089,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test434()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      calendar0.set(0, 1389);
}"
2090,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test435()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      calendar0.set(0, 1389);
}"
2091,"    public CalendarValidator() {
        this(true, DateFormat.SHORT);
    }","  public void test436()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator(true, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      calendar0.set(0, 1389);
}"
2092,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test437()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
}"
2093,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test438()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
}"
2094,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test439()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
}"
2095,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test440()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
}"
2096,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test441()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
}"
2097,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test442()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
}"
2098,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test443()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
}"
2099,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test444()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
}"
2100,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test445()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
}"
2101,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test446()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
}"
2102,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test447()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
}"
2103,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test448()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
}"
2104,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test449()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
}"
2105,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test450()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
}"
2106,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test451()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
}"
2107,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test452()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
}"
2108,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test453()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
}"
2109,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test454()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
}"
2110,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test455()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
}"
2111,"    public static CalendarValidator getInstance() {
        return VALIDATOR;
    }","  public void test456()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
}"
2112,,"  public void test457()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
}"
2113,,"  public void test458()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeZone timeZone0 = TimeZone.getDefault();
}"
2114,,"  public void test459()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeZone timeZone0 = TimeZone.getDefault();
}"
2115,"    public static void adjustToTimeZone(Calendar value, TimeZone timeZone) {
        if (value.getTimeZone().hasSameRules(timeZone)) {
            value.setTimeZone(timeZone);
        } else {
            int year   = value.get(Calendar.YEAR);
            int month  = value.get(Calendar.MONTH);
            int date   = value.get(Calendar.DATE);
            int hour   = value.get(Calendar.HOUR_OF_DAY);
            int minute = value.get(Calendar.MINUTE);
            value.setTimeZone(timeZone);
            value.set(year, month, date, hour, minute);
        }
    }","  public void test460()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeZone timeZone0 = TimeZone.getDefault();
      CalendarValidator.adjustToTimeZone(mockGregorianCalendar0, timeZone0);
}"
2116,"    public static void adjustToTimeZone(Calendar value, TimeZone timeZone) {
        if (value.getTimeZone().hasSameRules(timeZone)) {
            value.setTimeZone(timeZone);
        } else {
            int year   = value.get(Calendar.YEAR);
            int month  = value.get(Calendar.MONTH);
            int date   = value.get(Calendar.DATE);
            int hour   = value.get(Calendar.HOUR_OF_DAY);
            int minute = value.get(Calendar.MINUTE);
            value.setTimeZone(timeZone);
            value.set(year, month, date, hour, minute);
        }
    }","  public void test461()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeZone timeZone0 = TimeZone.getDefault();
      CalendarValidator.adjustToTimeZone(mockGregorianCalendar0, timeZone0);
}"
2117,"    public static void adjustToTimeZone(Calendar value, TimeZone timeZone) {
        if (value.getTimeZone().hasSameRules(timeZone)) {
            value.setTimeZone(timeZone);
        } else {
            int year   = value.get(Calendar.YEAR);
            int month  = value.get(Calendar.MONTH);
            int date   = value.get(Calendar.DATE);
            int hour   = value.get(Calendar.HOUR_OF_DAY);
            int minute = value.get(Calendar.MINUTE);
            value.setTimeZone(timeZone);
            value.set(year, month, date, hour, minute);
        }
    }","  public void test462()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeZone timeZone0 = TimeZone.getDefault();
      CalendarValidator.adjustToTimeZone(mockGregorianCalendar0, timeZone0);
}"
2118,"    public static void adjustToTimeZone(Calendar value, TimeZone timeZone) {
        if (value.getTimeZone().hasSameRules(timeZone)) {
            value.setTimeZone(timeZone);
        } else {
            int year   = value.get(Calendar.YEAR);
            int month  = value.get(Calendar.MONTH);
            int date   = value.get(Calendar.DATE);
            int hour   = value.get(Calendar.HOUR_OF_DAY);
            int minute = value.get(Calendar.MINUTE);
            value.setTimeZone(timeZone);
            value.set(year, month, date, hour, minute);
        }
    }","  public void test463()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeZone timeZone0 = TimeZone.getDefault();
      CalendarValidator.adjustToTimeZone(mockGregorianCalendar0, timeZone0);
}"
2119,"    public static void adjustToTimeZone(Calendar value, TimeZone timeZone) {
        if (value.getTimeZone().hasSameRules(timeZone)) {
            value.setTimeZone(timeZone);
        } else {
            int year   = value.get(Calendar.YEAR);
            int month  = value.get(Calendar.MONTH);
            int date   = value.get(Calendar.DATE);
            int hour   = value.get(Calendar.HOUR_OF_DAY);
            int minute = value.get(Calendar.MINUTE);
            value.setTimeZone(timeZone);
            value.set(year, month, date, hour, minute);
        }
    }","  public void test464()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeZone timeZone0 = TimeZone.getDefault();
      CalendarValidator.adjustToTimeZone(mockGregorianCalendar0, timeZone0);
}"
2120,"    public static void adjustToTimeZone(Calendar value, TimeZone timeZone) {
        if (value.getTimeZone().hasSameRules(timeZone)) {
            value.setTimeZone(timeZone);
        } else {
            int year   = value.get(Calendar.YEAR);
            int month  = value.get(Calendar.MONTH);
            int date   = value.get(Calendar.DATE);
            int hour   = value.get(Calendar.HOUR_OF_DAY);
            int minute = value.get(Calendar.MINUTE);
            value.setTimeZone(timeZone);
            value.set(year, month, date, hour, minute);
        }
    }","  public void test465()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1072, ""[h`3b251JpW{`wsrrNP"");
      CalendarValidator.adjustToTimeZone(calendar0, simpleTimeZone0);
}"
2121,"    public int compareWeeks(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.WEEK_OF_YEAR);
    }","  public void test466()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator();
      int int0 = calendarValidator0.compareWeeks(calendar0, calendar0);
}"
2122,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test467()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Calendar calendar0 = calendarValidator0.validate("""");
}"
2123,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test468()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1072, ""[h`3b251JpW{`wsrrNP"");
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Calendar calendar0 = calendarValidator0.validate(""Gx'TS3d*bMu{"", (String) null, (TimeZone) simpleTimeZone0);
}"
2124,"    public int compareYears(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.YEAR);
    }","  public void test469()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 1322, 0, 0);
      // Undeclared exception!
      try { 
        calendarValidator0.compareYears((Calendar) null, mockGregorianCalendar0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.AbstractCalendarValidator"", e);
      }
  }"
2125,"    public int compareDates(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.DATE);
    }","  public void test470()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-2983), (-3262), 619);
      int int0 = calendarValidator0.compareDates(mockGregorianCalendar0, mockGregorianCalendar0);
}"
2126,"    public int compareMonths(Calendar value, Calendar compare) {
        return compare(value, compare, Calendar.MONTH);
    }","  public void test471()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      CalendarValidator calendarValidator0 = new CalendarValidator();
      // Undeclared exception!
      try { 
        calendarValidator0.compareMonths(calendar0, (Calendar) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.AbstractCalendarValidator"", e);
      }
  }"
2127,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test472()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.CANADA;
      Calendar calendar0 = calendarValidator0.validate("""", ""org.apache.commons.validator.routines.CalendarValidator"", locale0);
}"
2128,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test473()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
      Locale locale0 = Locale.CANADA_FRENCH;
      Calendar calendar0 = calendarValidator0.validate("""", locale0, (TimeZone) simpleTimeZone0);
}"
2129,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test474()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
      Calendar calendar0 = calendarValidator0.validate("""", (TimeZone) simpleTimeZone0);
}"
2130,"    public int compareQuarters(Calendar value, Calendar compare) {
        return compareQuarters(value, compare, 1);
    }","  public void test475()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      // Undeclared exception!
      try { 
        calendarValidator0.compareQuarters((Calendar) null, (Calendar) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.AbstractCalendarValidator"", e);
      }
  }"
2131,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test476()  throws Throwable  {
      CalendarValidator calendarValidator0 = CalendarValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
      Locale locale0 = Locale.CANADA_FRENCH;
      Calendar calendar0 = calendarValidator0.validate("""", ""GMT+00:00"", locale0, (TimeZone) simpleTimeZone0);
}"
2132,"    public Calendar validate(String value) {
        return (Calendar)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test477()  throws Throwable  {
      CalendarValidator calendarValidator0 = new CalendarValidator();
      Locale locale0 = Locale.PRC;
      Calendar calendar0 = calendarValidator0.validate("""", locale0);
}"
2133,"    public boolean isValidTld(String tld) {
        if(allowLocal && isValidLocalTld(tld)) {
            return true;
        }
        return isValidInfrastructureTld(tld)
                || isValidGenericTld(tld)
                || isValidCountryCodeTld(tld);
    }","  public void test0()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_PLUS;
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""leclerc"";
      stringArray0[1] = ""dzbujL6EUO(7K/2pv"";
      stringArray0[2] = ""leclerc"";
      stringArray0[3] = ""leclerc"";
      stringArray0[4] = ""leclerc"";
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidTld(""dzbujL6EUO(7K/2pv"");
}"
2134,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test1()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_PLUS;
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""leclerc"";
      stringArray0[1] = ""dzbujL6EUO(7K/2pv"";
      stringArray0[2] = ""leclerc"";
      stringArray0[3] = ""leclerc"";
      stringArray0[4] = ""leclerc"";
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidTld(""dzbujL6EUO(7K/2pv"");
}"
2135,"    public boolean isValidGenericTld(String gTld) {
        final String key = chompLeadingDot(unicodeToASCII(gTld).toLowerCase(Locale.ENGLISH));
        return (arrayContains(GENERIC_TLDS, key) || arrayContains(mygenericTLDsPlus, key))
                && !arrayContains(mygenericTLDsMinus, key);
    }","  public void test2()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidGenericTld(""NmVcjiSkg6XE(t]"");
}"
2136,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test3()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidGenericTld(""NmVcjiSkg6XE(t]"");
}"
2137,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test4()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_PLUS;
      String[] stringArray0 = new String[0];
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      domainValidator0.getOverrides(domainValidator_ArrayType0);
}"
2138,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test5()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_MINUS;
      String[] stringArray0 = new String[0];
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      domainValidator0.getOverrides(domainValidator_ArrayType0);
}"
2139,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test6()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ""p"";
      stringArray0[1] = ""T"";
      stringArray0[2] = ""1O|"";
      stringArray0[3] = ""gf< ,M"";
      stringArray0[4] = ""gEv\""<#FS@K0%\"",&"";
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_PLUS;
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.addLast(domainValidator_Item0);
      stringArray0[5] = ""{:fMd{"";
      stringArray0[6] = "".contractors"";
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      DomainValidator.ArrayType domainValidator_ArrayType1 = DomainValidator.ArrayType.GENERIC_MINUS;
      String[] stringArray1 = domainValidator0.getOverrides(domainValidator_ArrayType1);
}"
2140,"    public String [] getOverrides(ArrayType table) {
        final String[] array;
        switch(table) {
        case COUNTRY_CODE_MINUS:
            array = mycountryCodeTLDsMinus;
            break;
        case COUNTRY_CODE_PLUS:
            array = mycountryCodeTLDsPlus;
            break;
        case GENERIC_MINUS:
            array = mygenericTLDsMinus;
            break;
        case GENERIC_PLUS:
            array = mygenericTLDsPlus;
            break;
        case LOCAL_MINUS:
            array = mylocalTLDsMinus;
            break;
        case LOCAL_PLUS:
            array = mylocalTLDsPlus;
            break;
        default:
            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);
        }
        return Arrays.copyOf(array, array.length); // clone the array
    }","  public void test7()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ""p"";
      stringArray0[1] = ""T"";
      stringArray0[2] = ""1O|"";
      stringArray0[3] = ""gf< ,M"";
      stringArray0[4] = ""gEv\""<#FS@K0%\"",&"";
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_PLUS;
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.addLast(domainValidator_Item0);
      stringArray0[5] = ""{:fMd{"";
      stringArray0[6] = "".contractors"";
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      DomainValidator.ArrayType domainValidator_ArrayType1 = DomainValidator.ArrayType.GENERIC_MINUS;
      String[] stringArray1 = domainValidator0.getOverrides(domainValidator_ArrayType1);
}"
2141,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test8()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_PLUS;
      String[] stringArray0 = new String[6];
      stringArray0[0] = ""p"";
      stringArray0[1] = ""(nf52trJN8"";
      stringArray0[2] = ""_=$aI.NcW"";
      stringArray0[3] = ""wMKX`jh="";
      stringArray0[4] = ""(nf52trJN8"";
      stringArray0[5] = ""_=$aI.NcW"";
      DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      String[] stringArray1 = domainValidator0.getOverrides(domainValidator_ArrayType0);
}"
2142,"    public String [] getOverrides(ArrayType table) {
        final String[] array;
        switch(table) {
        case COUNTRY_CODE_MINUS:
            array = mycountryCodeTLDsMinus;
            break;
        case COUNTRY_CODE_PLUS:
            array = mycountryCodeTLDsPlus;
            break;
        case GENERIC_MINUS:
            array = mygenericTLDsMinus;
            break;
        case GENERIC_PLUS:
            array = mygenericTLDsPlus;
            break;
        case LOCAL_MINUS:
            array = mylocalTLDsMinus;
            break;
        case LOCAL_PLUS:
            array = mylocalTLDsPlus;
            break;
        default:
            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);
        }
        return Arrays.copyOf(array, array.length); // clone the array
    }","  public void test9()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_PLUS;
      String[] stringArray0 = new String[6];
      stringArray0[0] = ""p"";
      stringArray0[1] = ""(nf52trJN8"";
      stringArray0[2] = ""_=$aI.NcW"";
      stringArray0[3] = ""wMKX`jh="";
      stringArray0[4] = ""(nf52trJN8"";
      stringArray0[5] = ""_=$aI.NcW"";
      DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      String[] stringArray1 = domainValidator0.getOverrides(domainValidator_ArrayType0);
}"
2143,"    public boolean isValidTld(String tld) {
        if(allowLocal && isValidLocalTld(tld)) {
            return true;
        }
        return isValidInfrastructureTld(tld)
                || isValidGenericTld(tld)
                || isValidCountryCodeTld(tld);
    }","  public void test10()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      boolean boolean0 = domainValidator0.isValidTld("".ca"");
}"
2144,"    static String unicodeToASCII(String input) {
        if (isOnlyASCII(input)) { // skip possibly expensive processing
            return input;
        }
        try {
            final String ascii = IDN.toASCII(input);
            if (IDNBUGHOLDER.IDN_TOASCII_PRESERVES_TRAILING_DOTS) {
                return ascii;
            }
            final int length = input.length();
            if (length == 0) {// check there is a last character
                return input;
            }
            // RFC3490 3.1. 1)
            //            Whenever dots are used as label separators, the following
            //            characters MUST be recognized as dots: U+002E (full stop), U+3002
            //            (ideographic full stop), U+FF0E (fullwidth full stop), U+FF61
            //            (halfwidth ideographic full stop).
            char lastChar = input.charAt(length-1);// fetch original last char
            switch(lastChar) {
                case '\u002E': // ""."" full stop
                case '\u3002': // ideographic full stop
                case '\uFF0E': // fullwidth full stop
                case '\uFF61': // halfwidth ideographic full stop
                    return ascii + "".""; // restore the missing stop
                default:
                    return ascii;
            }
        } catch (IllegalArgumentException e) { // input is not valid
            return input;
        }
    }","  public void test11()  throws Throwable  {
      String string0 = DomainValidator.unicodeToASCII((String) null);
}"
2145,"    static String unicodeToASCII(String input) {
        if (isOnlyASCII(input)) { // skip possibly expensive processing
            return input;
        }
        try {
            final String ascii = IDN.toASCII(input);
            if (IDNBUGHOLDER.IDN_TOASCII_PRESERVES_TRAILING_DOTS) {
                return ascii;
            }
            final int length = input.length();
            if (length == 0) {// check there is a last character
                return input;
            }
            // RFC3490 3.1. 1)
            //            Whenever dots are used as label separators, the following
            //            characters MUST be recognized as dots: U+002E (full stop), U+3002
            //            (ideographic full stop), U+FF0E (fullwidth full stop), U+FF61
            //            (halfwidth ideographic full stop).
            char lastChar = input.charAt(length-1);// fetch original last char
            switch(lastChar) {
                case '\u002E': // ""."" full stop
                case '\u3002': // ideographic full stop
                case '\uFF0E': // fullwidth full stop
                case '\uFF61': // halfwidth ideographic full stop
                    return ascii + "".""; // restore the missing stop
                default:
                    return ascii;
            }
        } catch (IllegalArgumentException e) { // input is not valid
            return input;
        }
    }","  public void test12()  throws Throwable  {
      String string0 = DomainValidator.unicodeToASCII(""2]lyy&DA-_Hi'=JDK"");
}"
2146,"    static String unicodeToASCII(String input) {
        if (isOnlyASCII(input)) { // skip possibly expensive processing
            return input;
        }
        try {
            final String ascii = IDN.toASCII(input);
            if (IDNBUGHOLDER.IDN_TOASCII_PRESERVES_TRAILING_DOTS) {
                return ascii;
            }
            final int length = input.length();
            if (length == 0) {// check there is a last character
                return input;
            }
            // RFC3490 3.1. 1)
            //            Whenever dots are used as label separators, the following
            //            characters MUST be recognized as dots: U+002E (full stop), U+3002
            //            (ideographic full stop), U+FF0E (fullwidth full stop), U+FF61
            //            (halfwidth ideographic full stop).
            char lastChar = input.charAt(length-1);// fetch original last char
            switch(lastChar) {
                case '\u002E': // ""."" full stop
                case '\u3002': // ideographic full stop
                case '\uFF0E': // fullwidth full stop
                case '\uFF61': // halfwidth ideographic full stop
                    return ascii + "".""; // restore the missing stop
                default:
                    return ascii;
            }
        } catch (IllegalArgumentException e) { // input is not valid
            return input;
        }
    }","  public void test13()  throws Throwable  {
      String string0 = DomainValidator.unicodeToASCII("""");
}"
2147,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test14()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(true);
      boolean boolean0 = domainValidator0.isAllowLocal();
}"
2148,"    public String [] getOverrides(ArrayType table) {
        final String[] array;
        switch(table) {
        case COUNTRY_CODE_MINUS:
            array = mycountryCodeTLDsMinus;
            break;
        case COUNTRY_CODE_PLUS:
            array = mycountryCodeTLDsPlus;
            break;
        case GENERIC_MINUS:
            array = mygenericTLDsMinus;
            break;
        case GENERIC_PLUS:
            array = mygenericTLDsPlus;
            break;
        case LOCAL_MINUS:
            array = mylocalTLDsMinus;
            break;
        case LOCAL_PLUS:
            array = mylocalTLDsPlus;
            break;
        default:
            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);
        }
        return Arrays.copyOf(array, array.length); // clone the array
    }","  public void test15()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_MINUS;
      String[] stringArray0 = new String[3];
      stringArray0[0] = ""^~XNC|E"";
      stringArray0[1] = ""^~XNC|E"";
      stringArray0[2] = ""^~XNC|E"";
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      String[] stringArray1 = domainValidator0.getOverrides(domainValidator_ArrayType0);
}"
2149,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test16()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_MINUS;
      String[] stringArray0 = new String[3];
      stringArray0[0] = ""^~XNC|E"";
      stringArray0[1] = ""^~XNC|E"";
      stringArray0[2] = ""^~XNC|E"";
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      String[] stringArray1 = domainValidator0.getOverrides(domainValidator_ArrayType0);
}"
2150,"    public boolean isValidTld(String tld) {
        if(allowLocal && isValidLocalTld(tld)) {
            return true;
        }
        return isValidInfrastructureTld(tld)
                || isValidGenericTld(tld)
                || isValidCountryCodeTld(tld);
    }","  public void test17()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      // Undeclared exception!
      try { 
        domainValidator0.isValidTld((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.DomainValidator"", e);
      }
  }"
2151,"    public boolean isValidInfrastructureTld(String iTld) {
        final String key = chompLeadingDot(unicodeToASCII(iTld).toLowerCase(Locale.ENGLISH));
        return arrayContains(INFRASTRUCTURE_TLDS, key);
    }","  public void test18()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      // Undeclared exception!
      try { 
        domainValidator0.isValidInfrastructureTld((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.DomainValidator"", e);
      }
  }"
2152,"    public boolean isValidGenericTld(String gTld) {
        final String key = chompLeadingDot(unicodeToASCII(gTld).toLowerCase(Locale.ENGLISH));
        return (arrayContains(GENERIC_TLDS, key) || arrayContains(mygenericTLDsPlus, key))
                && !arrayContains(mygenericTLDsMinus, key);
    }","  public void test19()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(false);
      // Undeclared exception!
      try { 
        domainValidator0.isValidGenericTld((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.DomainValidator"", e);
      }
  }"
2153,"    public boolean isValidCountryCodeTld(String ccTld) {
        final String key = chompLeadingDot(unicodeToASCII(ccTld).toLowerCase(Locale.ENGLISH));
        return (arrayContains(COUNTRY_CODE_TLDS, key) || arrayContains(mycountryCodeTLDsPlus, key))
                && !arrayContains(mycountryCodeTLDsMinus, key);
    }","  public void test20()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      // Undeclared exception!
      try { 
        domainValidator0.isValidCountryCodeTld((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.DomainValidator"", e);
      }
  }"
2154,"    public static synchronized String [] getTLDEntries(ArrayType table) {
        final String[] array;
        switch(table) {
        case COUNTRY_CODE_MINUS:
            array = countryCodeTLDsMinus;
            break;
        case COUNTRY_CODE_PLUS:
            array = countryCodeTLDsPlus;
            break;
        case GENERIC_MINUS:
            array = genericTLDsMinus;
            break;
        case GENERIC_PLUS:
            array = genericTLDsPlus;
            break;
        case LOCAL_MINUS:
            array = localTLDsMinus;
            break;
        case LOCAL_PLUS:
            array = localTLDsPlus;
            break;
        case GENERIC_RO:
            array = GENERIC_TLDS;
            break;
        case COUNTRY_CODE_RO:
            array = COUNTRY_CODE_TLDS;
            break;
        case INFRASTRUCTURE_RO:
            array = INFRASTRUCTURE_TLDS;
            break;
        case LOCAL_RO:
            array = LOCAL_TLDS;
            break;
        default:
            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);
        }
        return Arrays.copyOf(array, array.length); // clone the array
    }","  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        DomainValidator.getTLDEntries((DomainValidator.ArrayType) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.DomainValidator"", e);
      }
  }"
2155,"    public String [] getOverrides(ArrayType table) {
        final String[] array;
        switch(table) {
        case COUNTRY_CODE_MINUS:
            array = mycountryCodeTLDsMinus;
            break;
        case COUNTRY_CODE_PLUS:
            array = mycountryCodeTLDsPlus;
            break;
        case GENERIC_MINUS:
            array = mygenericTLDsMinus;
            break;
        case GENERIC_PLUS:
            array = mygenericTLDsPlus;
            break;
        case LOCAL_MINUS:
            array = mylocalTLDsMinus;
            break;
        case LOCAL_PLUS:
            array = mylocalTLDsPlus;
            break;
        default:
            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);
        }
        return Arrays.copyOf(array, array.length); // clone the array
    }","  public void test22()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(false);
      // Undeclared exception!
      try { 
        domainValidator0.getOverrides((DomainValidator.ArrayType) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.DomainValidator"", e);
      }
  }"
2156,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test23()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_PLUS;
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""/{!g:vyR\""|"";
      stringArray0[1] = "">{la0>qSO"";
      stringArray0[2] = ""%cY0"";
      stringArray0[3] = ""-*i}S0tj"";
      stringArray0[4] = ""/{!g:vyR\""|"";
      stringArray0[5] = "".}"";
      stringArray0[6] = ""ricoh"";
      stringArray0[7] = ""V^Yp9HzNo\""8"";
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.offerLast(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidLocalTld("">{la0>qSO"");
}"
2157,"    public boolean isValidLocalTld(String lTld) {
        final String key = chompLeadingDot(unicodeToASCII(lTld).toLowerCase(Locale.ENGLISH));
        return (arrayContains(LOCAL_TLDS, key) || arrayContains(mylocalTLDsPlus, key))
                && !arrayContains(mylocalTLDsMinus, key);
    }","  public void test24()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_PLUS;
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""/{!g:vyR\""|"";
      stringArray0[1] = "">{la0>qSO"";
      stringArray0[2] = ""%cY0"";
      stringArray0[3] = ""-*i}S0tj"";
      stringArray0[4] = ""/{!g:vyR\""|"";
      stringArray0[5] = "".}"";
      stringArray0[6] = ""ricoh"";
      stringArray0[7] = ""V^Yp9HzNo\""8"";
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.offerLast(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidLocalTld("">{la0>qSO"");
}"
2158,"    public boolean isValidLocalTld(String lTld) {
        final String key = chompLeadingDot(unicodeToASCII(lTld).toLowerCase(Locale.ENGLISH));
        return (arrayContains(LOCAL_TLDS, key) || arrayContains(mylocalTLDsPlus, key))
                && !arrayContains(mylocalTLDsMinus, key);
    }","  public void test25()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      boolean boolean0 = domainValidator0.isValidLocalTld("""");
}"
2159,"    public boolean isValidCountryCodeTld(String ccTld) {
        final String key = chompLeadingDot(unicodeToASCII(ccTld).toLowerCase(Locale.ENGLISH));
        return (arrayContains(COUNTRY_CODE_TLDS, key) || arrayContains(mycountryCodeTLDsPlus, key))
                && !arrayContains(mycountryCodeTLDsMinus, key);
    }","  public void test26()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      boolean boolean0 = domainValidator0.isValidCountryCodeTld(""stc"");
}"
2160,"    public boolean isValidCountryCodeTld(String ccTld) {
        final String key = chompLeadingDot(unicodeToASCII(ccTld).toLowerCase(Locale.ENGLISH));
        return (arrayContains(COUNTRY_CODE_TLDS, key) || arrayContains(mycountryCodeTLDsPlus, key))
                && !arrayContains(mycountryCodeTLDsMinus, key);
    }","  public void test27()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(false);
      boolean boolean0 = domainValidator0.isValidCountryCodeTld(""xn--yfro4i67o"");
}"
2161,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test28()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(false);
      boolean boolean0 = domainValidator0.isValidCountryCodeTld(""xn--yfro4i67o"");
}"
2162,"    public boolean isValidTld(String tld) {
        if(allowLocal && isValidLocalTld(tld)) {
            return true;
        }
        return isValidInfrastructureTld(tld)
                || isValidGenericTld(tld)
                || isValidCountryCodeTld(tld);
    }","  public void test29()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      boolean boolean0 = domainValidator0.isValidTld(""w"");
}"
2163,"    public boolean isValidInfrastructureTld(String iTld) {
        final String key = chompLeadingDot(unicodeToASCII(iTld).toLowerCase(Locale.ENGLISH));
        return arrayContains(INFRASTRUCTURE_TLDS, key);
    }","  public void test30()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(true);
      boolean boolean0 = domainValidator0.isValidInfrastructureTld("""");
}"
2164,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test31()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(true);
      boolean boolean0 = domainValidator0.isValidInfrastructureTld("""");
}"
2165,"    public boolean isValidLocalTld(String lTld) {
        final String key = chompLeadingDot(unicodeToASCII(lTld).toLowerCase(Locale.ENGLISH));
        return (arrayContains(LOCAL_TLDS, key) || arrayContains(mylocalTLDsPlus, key))
                && !arrayContains(mylocalTLDsMinus, key);
    }","  public void test32()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(true);
      // Undeclared exception!
      try { 
        domainValidator0.isValidLocalTld((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.DomainValidator"", e);
      }
  }"
2166,"    public String [] getOverrides(ArrayType table) {
        final String[] array;
        switch(table) {
        case COUNTRY_CODE_MINUS:
            array = mycountryCodeTLDsMinus;
            break;
        case COUNTRY_CODE_PLUS:
            array = mycountryCodeTLDsPlus;
            break;
        case GENERIC_MINUS:
            array = mygenericTLDsMinus;
            break;
        case GENERIC_PLUS:
            array = mygenericTLDsPlus;
            break;
        case LOCAL_MINUS:
            array = mylocalTLDsMinus;
            break;
        case LOCAL_PLUS:
            array = mylocalTLDsPlus;
            break;
        default:
            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);
        }
        return Arrays.copyOf(array, array.length); // clone the array
    }","  public void test33()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(false);
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_RO;
      // Undeclared exception!
      try { 
        domainValidator0.getOverrides(domainValidator_ArrayType0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected enum value: COUNTRY_CODE_RO
         //
         verifyException(""org.apache.commons.validator.routines.DomainValidator"", e);
      }
  }"
2167,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test34()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(false);
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_PLUS;
      domainValidator0.getOverrides(domainValidator_ArrayType0);
}"
2168,"    public static synchronized String [] getTLDEntries(ArrayType table) {
        final String[] array;
        switch(table) {
        case COUNTRY_CODE_MINUS:
            array = countryCodeTLDsMinus;
            break;
        case COUNTRY_CODE_PLUS:
            array = countryCodeTLDsPlus;
            break;
        case GENERIC_MINUS:
            array = genericTLDsMinus;
            break;
        case GENERIC_PLUS:
            array = genericTLDsPlus;
            break;
        case LOCAL_MINUS:
            array = localTLDsMinus;
            break;
        case LOCAL_PLUS:
            array = localTLDsPlus;
            break;
        case GENERIC_RO:
            array = GENERIC_TLDS;
            break;
        case COUNTRY_CODE_RO:
            array = COUNTRY_CODE_TLDS;
            break;
        case INFRASTRUCTURE_RO:
            array = INFRASTRUCTURE_TLDS;
            break;
        case LOCAL_RO:
            array = LOCAL_TLDS;
            break;
        default:
            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);
        }
        return Arrays.copyOf(array, array.length); // clone the array
    }","  public void test35()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_RO;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
}"
2169,"    public static synchronized String [] getTLDEntries(ArrayType table) {
        final String[] array;
        switch(table) {
        case COUNTRY_CODE_MINUS:
            array = countryCodeTLDsMinus;
            break;
        case COUNTRY_CODE_PLUS:
            array = countryCodeTLDsPlus;
            break;
        case GENERIC_MINUS:
            array = genericTLDsMinus;
            break;
        case GENERIC_PLUS:
            array = genericTLDsPlus;
            break;
        case LOCAL_MINUS:
            array = localTLDsMinus;
            break;
        case LOCAL_PLUS:
            array = localTLDsPlus;
            break;
        case GENERIC_RO:
            array = GENERIC_TLDS;
            break;
        case COUNTRY_CODE_RO:
            array = COUNTRY_CODE_TLDS;
            break;
        case INFRASTRUCTURE_RO:
            array = INFRASTRUCTURE_TLDS;
            break;
        case LOCAL_RO:
            array = LOCAL_TLDS;
            break;
        default:
            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);
        }
        return Arrays.copyOf(array, array.length); // clone the array
    }","  public void test36()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.INFRASTRUCTURE_RO;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
}"
2170,"    public static synchronized String [] getTLDEntries(ArrayType table) {
        final String[] array;
        switch(table) {
        case COUNTRY_CODE_MINUS:
            array = countryCodeTLDsMinus;
            break;
        case COUNTRY_CODE_PLUS:
            array = countryCodeTLDsPlus;
            break;
        case GENERIC_MINUS:
            array = genericTLDsMinus;
            break;
        case GENERIC_PLUS:
            array = genericTLDsPlus;
            break;
        case LOCAL_MINUS:
            array = localTLDsMinus;
            break;
        case LOCAL_PLUS:
            array = localTLDsPlus;
            break;
        case GENERIC_RO:
            array = GENERIC_TLDS;
            break;
        case COUNTRY_CODE_RO:
            array = COUNTRY_CODE_TLDS;
            break;
        case INFRASTRUCTURE_RO:
            array = INFRASTRUCTURE_TLDS;
            break;
        case LOCAL_RO:
            array = LOCAL_TLDS;
            break;
        default:
            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);
        }
        return Arrays.copyOf(array, array.length); // clone the array
    }","  public void test37()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_RO;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
}"
2171,"    public static synchronized String [] getTLDEntries(ArrayType table) {
        final String[] array;
        switch(table) {
        case COUNTRY_CODE_MINUS:
            array = countryCodeTLDsMinus;
            break;
        case COUNTRY_CODE_PLUS:
            array = countryCodeTLDsPlus;
            break;
        case GENERIC_MINUS:
            array = genericTLDsMinus;
            break;
        case GENERIC_PLUS:
            array = genericTLDsPlus;
            break;
        case LOCAL_MINUS:
            array = localTLDsMinus;
            break;
        case LOCAL_PLUS:
            array = localTLDsPlus;
            break;
        case GENERIC_RO:
            array = GENERIC_TLDS;
            break;
        case COUNTRY_CODE_RO:
            array = COUNTRY_CODE_TLDS;
            break;
        case INFRASTRUCTURE_RO:
            array = INFRASTRUCTURE_TLDS;
            break;
        case LOCAL_RO:
            array = LOCAL_TLDS;
            break;
        default:
            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);
        }
        return Arrays.copyOf(array, array.length); // clone the array
    }","  public void test38()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_RO;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
}"
2172,"    public static synchronized String [] getTLDEntries(ArrayType table) {
        final String[] array;
        switch(table) {
        case COUNTRY_CODE_MINUS:
            array = countryCodeTLDsMinus;
            break;
        case COUNTRY_CODE_PLUS:
            array = countryCodeTLDsPlus;
            break;
        case GENERIC_MINUS:
            array = genericTLDsMinus;
            break;
        case GENERIC_PLUS:
            array = genericTLDsPlus;
            break;
        case LOCAL_MINUS:
            array = localTLDsMinus;
            break;
        case LOCAL_PLUS:
            array = localTLDsPlus;
            break;
        case GENERIC_RO:
            array = GENERIC_TLDS;
            break;
        case COUNTRY_CODE_RO:
            array = COUNTRY_CODE_TLDS;
            break;
        case INFRASTRUCTURE_RO:
            array = INFRASTRUCTURE_TLDS;
            break;
        case LOCAL_RO:
            array = LOCAL_TLDS;
            break;
        default:
            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);
        }
        return Arrays.copyOf(array, array.length); // clone the array
    }","  public void test39()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_MINUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
}"
2173,"    public static synchronized String [] getTLDEntries(ArrayType table) {
        final String[] array;
        switch(table) {
        case COUNTRY_CODE_MINUS:
            array = countryCodeTLDsMinus;
            break;
        case COUNTRY_CODE_PLUS:
            array = countryCodeTLDsPlus;
            break;
        case GENERIC_MINUS:
            array = genericTLDsMinus;
            break;
        case GENERIC_PLUS:
            array = genericTLDsPlus;
            break;
        case LOCAL_MINUS:
            array = localTLDsMinus;
            break;
        case LOCAL_PLUS:
            array = localTLDsPlus;
            break;
        case GENERIC_RO:
            array = GENERIC_TLDS;
            break;
        case COUNTRY_CODE_RO:
            array = COUNTRY_CODE_TLDS;
            break;
        case INFRASTRUCTURE_RO:
            array = INFRASTRUCTURE_TLDS;
            break;
        case LOCAL_RO:
            array = LOCAL_TLDS;
            break;
        default:
            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);
        }
        return Arrays.copyOf(array, array.length); // clone the array
    }","  public void test40()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_PLUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
}"
2174,"    public static synchronized void updateTLDOverride(ArrayType table, String [] tlds) {
        if (inUse) {
            throw new IllegalStateException(""Can only invoke this method before calling getInstance"");
        }
        String [] copy = new String[tlds.length];
        // Comparisons are always done with lower-case entries
        for (int i = 0; i < tlds.length; i++) {
            copy[i] = tlds[i].toLowerCase(Locale.ENGLISH);
        }
        Arrays.sort(copy);
        switch(table) {
        case COUNTRY_CODE_MINUS:
            countryCodeTLDsMinus = copy;
            break;
        case COUNTRY_CODE_PLUS:
            countryCodeTLDsPlus = copy;
            break;
        case GENERIC_MINUS:
            genericTLDsMinus = copy;
            break;
        case GENERIC_PLUS:
            genericTLDsPlus = copy;
            break;
        case LOCAL_MINUS:
            localTLDsMinus = copy;
            break;
        case LOCAL_PLUS:
            localTLDsPlus = copy;
            break;
        case COUNTRY_CODE_RO:
        case GENERIC_RO:
        case INFRASTRUCTURE_RO:
        case LOCAL_RO:
            throw new IllegalArgumentException(""Cannot update the table: "" + table);
        default:
            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);
        }
    }","  public void test41()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_RO;
      String[] stringArray0 = new String[6];
      stringArray0[0] = ""p6"";
      stringArray0[1] = ""p6"";
      stringArray0[2] = ""p6"";
      stringArray0[3] = ""p6"";
      stringArray0[4] = ""p6"";
      stringArray0[5] = ""p6"";
      // Undeclared exception!
      try { 
        DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot update the table: LOCAL_RO
         //
         verifyException(""org.apache.commons.validator.routines.DomainValidator"", e);
      }
  }"
2175,"    public static synchronized void updateTLDOverride(ArrayType table, String [] tlds) {
        if (inUse) {
            throw new IllegalStateException(""Can only invoke this method before calling getInstance"");
        }
        String [] copy = new String[tlds.length];
        // Comparisons are always done with lower-case entries
        for (int i = 0; i < tlds.length; i++) {
            copy[i] = tlds[i].toLowerCase(Locale.ENGLISH);
        }
        Arrays.sort(copy);
        switch(table) {
        case COUNTRY_CODE_MINUS:
            countryCodeTLDsMinus = copy;
            break;
        case COUNTRY_CODE_PLUS:
            countryCodeTLDsPlus = copy;
            break;
        case GENERIC_MINUS:
            genericTLDsMinus = copy;
            break;
        case GENERIC_PLUS:
            genericTLDsPlus = copy;
            break;
        case LOCAL_MINUS:
            localTLDsMinus = copy;
            break;
        case LOCAL_PLUS:
            localTLDsPlus = copy;
            break;
        case COUNTRY_CODE_RO:
        case GENERIC_RO:
        case INFRASTRUCTURE_RO:
        case LOCAL_RO:
            throw new IllegalArgumentException(""Cannot update the table: "" + table);
        default:
            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);
        }
    }","  public void test42()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.INFRASTRUCTURE_RO;
      String[] stringArray0 = new String[2];
      stringArray0[0] = """";
      stringArray0[1] = ""-uhw4oz$jwej@1"";
      // Undeclared exception!
      try { 
        DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot update the table: INFRASTRUCTURE_RO
         //
         verifyException(""org.apache.commons.validator.routines.DomainValidator"", e);
      }
  }"
2176,"    public static synchronized void updateTLDOverride(ArrayType table, String [] tlds) {
        if (inUse) {
            throw new IllegalStateException(""Can only invoke this method before calling getInstance"");
        }
        String [] copy = new String[tlds.length];
        // Comparisons are always done with lower-case entries
        for (int i = 0; i < tlds.length; i++) {
            copy[i] = tlds[i].toLowerCase(Locale.ENGLISH);
        }
        Arrays.sort(copy);
        switch(table) {
        case COUNTRY_CODE_MINUS:
            countryCodeTLDsMinus = copy;
            break;
        case COUNTRY_CODE_PLUS:
            countryCodeTLDsPlus = copy;
            break;
        case GENERIC_MINUS:
            genericTLDsMinus = copy;
            break;
        case GENERIC_PLUS:
            genericTLDsPlus = copy;
            break;
        case LOCAL_MINUS:
            localTLDsMinus = copy;
            break;
        case LOCAL_PLUS:
            localTLDsPlus = copy;
            break;
        case COUNTRY_CODE_RO:
        case GENERIC_RO:
        case INFRASTRUCTURE_RO:
        case LOCAL_RO:
            throw new IllegalArgumentException(""Cannot update the table: "" + table);
        default:
            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);
        }
    }","  public void test43()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_MINUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      DomainValidator.ArrayType domainValidator_ArrayType1 = DomainValidator.ArrayType.GENERIC_RO;
      // Undeclared exception!
      try { 
        DomainValidator.updateTLDOverride(domainValidator_ArrayType1, stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot update the table: GENERIC_RO
         //
         verifyException(""org.apache.commons.validator.routines.DomainValidator"", e);
      }
  }"
2177,"    public static synchronized void updateTLDOverride(ArrayType table, String [] tlds) {
        if (inUse) {
            throw new IllegalStateException(""Can only invoke this method before calling getInstance"");
        }
        String [] copy = new String[tlds.length];
        // Comparisons are always done with lower-case entries
        for (int i = 0; i < tlds.length; i++) {
            copy[i] = tlds[i].toLowerCase(Locale.ENGLISH);
        }
        Arrays.sort(copy);
        switch(table) {
        case COUNTRY_CODE_MINUS:
            countryCodeTLDsMinus = copy;
            break;
        case COUNTRY_CODE_PLUS:
            countryCodeTLDsPlus = copy;
            break;
        case GENERIC_MINUS:
            genericTLDsMinus = copy;
            break;
        case GENERIC_PLUS:
            genericTLDsPlus = copy;
            break;
        case LOCAL_MINUS:
            localTLDsMinus = copy;
            break;
        case LOCAL_PLUS:
            localTLDsPlus = copy;
            break;
        case COUNTRY_CODE_RO:
        case GENERIC_RO:
        case INFRASTRUCTURE_RO:
        case LOCAL_RO:
            throw new IllegalArgumentException(""Cannot update the table: "" + table);
        default:
            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);
        }
    }","  public void test44()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_PLUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      DomainValidator.ArrayType domainValidator_ArrayType1 = DomainValidator.ArrayType.COUNTRY_CODE_RO;
      // Undeclared exception!
      try { 
        DomainValidator.updateTLDOverride(domainValidator_ArrayType1, stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot update the table: COUNTRY_CODE_RO
         //
         verifyException(""org.apache.commons.validator.routines.DomainValidator"", e);
      }
  }"
2178,"    public static synchronized void updateTLDOverride(ArrayType table, String [] tlds) {
        if (inUse) {
            throw new IllegalStateException(""Can only invoke this method before calling getInstance"");
        }
        String [] copy = new String[tlds.length];
        // Comparisons are always done with lower-case entries
        for (int i = 0; i < tlds.length; i++) {
            copy[i] = tlds[i].toLowerCase(Locale.ENGLISH);
        }
        Arrays.sort(copy);
        switch(table) {
        case COUNTRY_CODE_MINUS:
            countryCodeTLDsMinus = copy;
            break;
        case COUNTRY_CODE_PLUS:
            countryCodeTLDsPlus = copy;
            break;
        case GENERIC_MINUS:
            genericTLDsMinus = copy;
            break;
        case GENERIC_PLUS:
            genericTLDsPlus = copy;
            break;
        case LOCAL_MINUS:
            localTLDsMinus = copy;
            break;
        case LOCAL_PLUS:
            localTLDsPlus = copy;
            break;
        case COUNTRY_CODE_RO:
        case GENERIC_RO:
        case INFRASTRUCTURE_RO:
        case LOCAL_RO:
            throw new IllegalArgumentException(""Cannot update the table: "" + table);
        default:
            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);
        }
    }","  public void test45()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_PLUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
}"
2179,"    public static synchronized void updateTLDOverride(ArrayType table, String [] tlds) {
        if (inUse) {
            throw new IllegalStateException(""Can only invoke this method before calling getInstance"");
        }
        String [] copy = new String[tlds.length];
        // Comparisons are always done with lower-case entries
        for (int i = 0; i < tlds.length; i++) {
            copy[i] = tlds[i].toLowerCase(Locale.ENGLISH);
        }
        Arrays.sort(copy);
        switch(table) {
        case COUNTRY_CODE_MINUS:
            countryCodeTLDsMinus = copy;
            break;
        case COUNTRY_CODE_PLUS:
            countryCodeTLDsPlus = copy;
            break;
        case GENERIC_MINUS:
            genericTLDsMinus = copy;
            break;
        case GENERIC_PLUS:
            genericTLDsPlus = copy;
            break;
        case LOCAL_MINUS:
            localTLDsMinus = copy;
            break;
        case LOCAL_PLUS:
            localTLDsPlus = copy;
            break;
        case COUNTRY_CODE_RO:
        case GENERIC_RO:
        case INFRASTRUCTURE_RO:
        case LOCAL_RO:
            throw new IllegalArgumentException(""Cannot update the table: "" + table);
        default:
            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);
        }
    }","  public void test46()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_MINUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      DomainValidator.ArrayType domainValidator_ArrayType1 = DomainValidator.ArrayType.LOCAL_MINUS;
      DomainValidator.updateTLDOverride(domainValidator_ArrayType1, stringArray0);
}"
2180,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test47()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_MINUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      DomainValidator.ArrayType domainValidator_ArrayType1 = DomainValidator.ArrayType.GENERIC_PLUS;
      DomainValidator.updateTLDOverride(domainValidator_ArrayType1, stringArray0);
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      domainValidator0.getOverrides(domainValidator_ArrayType1);
}"
2181,"    public static synchronized void updateTLDOverride(ArrayType table, String [] tlds) {
        if (inUse) {
            throw new IllegalStateException(""Can only invoke this method before calling getInstance"");
        }
        String [] copy = new String[tlds.length];
        // Comparisons are always done with lower-case entries
        for (int i = 0; i < tlds.length; i++) {
            copy[i] = tlds[i].toLowerCase(Locale.ENGLISH);
        }
        Arrays.sort(copy);
        switch(table) {
        case COUNTRY_CODE_MINUS:
            countryCodeTLDsMinus = copy;
            break;
        case COUNTRY_CODE_PLUS:
            countryCodeTLDsPlus = copy;
            break;
        case GENERIC_MINUS:
            genericTLDsMinus = copy;
            break;
        case GENERIC_PLUS:
            genericTLDsPlus = copy;
            break;
        case LOCAL_MINUS:
            localTLDsMinus = copy;
            break;
        case LOCAL_PLUS:
            localTLDsPlus = copy;
            break;
        case COUNTRY_CODE_RO:
        case GENERIC_RO:
        case INFRASTRUCTURE_RO:
        case LOCAL_RO:
            throw new IllegalArgumentException(""Cannot update the table: "" + table);
        default:
            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);
        }
    }","  public void test48()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_PLUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      DomainValidator.ArrayType domainValidator_ArrayType1 = DomainValidator.ArrayType.COUNTRY_CODE_MINUS;
      DomainValidator.updateTLDOverride(domainValidator_ArrayType1, stringArray0);
}"
2182,"    public static synchronized void updateTLDOverride(ArrayType table, String [] tlds) {
        if (inUse) {
            throw new IllegalStateException(""Can only invoke this method before calling getInstance"");
        }
        String [] copy = new String[tlds.length];
        // Comparisons are always done with lower-case entries
        for (int i = 0; i < tlds.length; i++) {
            copy[i] = tlds[i].toLowerCase(Locale.ENGLISH);
        }
        Arrays.sort(copy);
        switch(table) {
        case COUNTRY_CODE_MINUS:
            countryCodeTLDsMinus = copy;
            break;
        case COUNTRY_CODE_PLUS:
            countryCodeTLDsPlus = copy;
            break;
        case GENERIC_MINUS:
            genericTLDsMinus = copy;
            break;
        case GENERIC_PLUS:
            genericTLDsPlus = copy;
            break;
        case LOCAL_MINUS:
            localTLDsMinus = copy;
            break;
        case LOCAL_PLUS:
            localTLDsPlus = copy;
            break;
        case COUNTRY_CODE_RO:
        case GENERIC_RO:
        case INFRASTRUCTURE_RO:
        case LOCAL_RO:
            throw new IllegalArgumentException(""Cannot update the table: "" + table);
        default:
            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);
        }
    }","  public void test49()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_RO;
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.DomainValidator"", e);
      }
  }"
2183,"    public static synchronized void updateTLDOverride(ArrayType table, String [] tlds) {
        if (inUse) {
            throw new IllegalStateException(""Can only invoke this method before calling getInstance"");
        }
        String [] copy = new String[tlds.length];
        // Comparisons are always done with lower-case entries
        for (int i = 0; i < tlds.length; i++) {
            copy[i] = tlds[i].toLowerCase(Locale.ENGLISH);
        }
        Arrays.sort(copy);
        switch(table) {
        case COUNTRY_CODE_MINUS:
            countryCodeTLDsMinus = copy;
            break;
        case COUNTRY_CODE_PLUS:
            countryCodeTLDsPlus = copy;
            break;
        case GENERIC_MINUS:
            genericTLDsMinus = copy;
            break;
        case GENERIC_PLUS:
            genericTLDsPlus = copy;
            break;
        case LOCAL_MINUS:
            localTLDsMinus = copy;
            break;
        case LOCAL_PLUS:
            localTLDsPlus = copy;
            break;
        case COUNTRY_CODE_RO:
        case GENERIC_RO:
        case INFRASTRUCTURE_RO:
        case LOCAL_RO:
            throw new IllegalArgumentException(""Cannot update the table: "" + table);
        default:
            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);
        }
    }","  public void test50()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_MINUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      // Undeclared exception!
      try { 
        DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Can only invoke this method before calling getInstance
         //
         verifyException(""org.apache.commons.validator.routines.DomainValidator"", e);
      }
  }"
2184,"    public static synchronized void updateTLDOverride(ArrayType table, String [] tlds) {
        if (inUse) {
            throw new IllegalStateException(""Can only invoke this method before calling getInstance"");
        }
        String [] copy = new String[tlds.length];
        // Comparisons are always done with lower-case entries
        for (int i = 0; i < tlds.length; i++) {
            copy[i] = tlds[i].toLowerCase(Locale.ENGLISH);
        }
        Arrays.sort(copy);
        switch(table) {
        case COUNTRY_CODE_MINUS:
            countryCodeTLDsMinus = copy;
            break;
        case COUNTRY_CODE_PLUS:
            countryCodeTLDsPlus = copy;
            break;
        case GENERIC_MINUS:
            genericTLDsMinus = copy;
            break;
        case GENERIC_PLUS:
            genericTLDsPlus = copy;
            break;
        case LOCAL_MINUS:
            localTLDsMinus = copy;
            break;
        case LOCAL_PLUS:
            localTLDsPlus = copy;
            break;
        case COUNTRY_CODE_RO:
        case GENERIC_RO:
        case INFRASTRUCTURE_RO:
        case LOCAL_RO:
            throw new IllegalArgumentException(""Cannot update the table: "" + table);
        default:
            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);
        }
    }","  public void test51()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_MINUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      DomainValidator.updateTLDOverride(domainValidator_ArrayType0, stringArray0);
}"
2185,"    public boolean isValidLocalTld(String lTld) {
        final String key = chompLeadingDot(unicodeToASCII(lTld).toLowerCase(Locale.ENGLISH));
        return (arrayContains(LOCAL_TLDS, key) || arrayContains(mylocalTLDsPlus, key))
                && !arrayContains(mylocalTLDsMinus, key);
    }","  public void test52()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_PLUS;
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""/{!g:vyR\""|"";
      stringArray0[1] = ""/{!g:vyR\""|"";
      DomainValidator.ArrayType domainValidator_ArrayType1 = DomainValidator.ArrayType.LOCAL_MINUS;
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType1, stringArray0);
      linkedList0.add(domainValidator_Item0);
      stringArray0[2] = ""/{!g:vyR\""|"";
      stringArray0[3] = ""/{!g:vyR\""|"";
      stringArray0[4] = ""/{!g:vyR\""|"";
      stringArray0[5] = ""/{!g:vyR\""|"";
      stringArray0[6] = ""ri%oh"";
      stringArray0[7] = ""/{!g:vyR\""|"";
      DomainValidator.Item domainValidator_Item1 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.offerLast(domainValidator_Item1);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidLocalTld(""/{!g:vyR\""|"");
}"
2186,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test53()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_PLUS;
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""/{!g:vyR\""|"";
      stringArray0[1] = ""/{!g:vyR\""|"";
      DomainValidator.ArrayType domainValidator_ArrayType1 = DomainValidator.ArrayType.LOCAL_MINUS;
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType1, stringArray0);
      linkedList0.add(domainValidator_Item0);
      stringArray0[2] = ""/{!g:vyR\""|"";
      stringArray0[3] = ""/{!g:vyR\""|"";
      stringArray0[4] = ""/{!g:vyR\""|"";
      stringArray0[5] = ""/{!g:vyR\""|"";
      stringArray0[6] = ""ri%oh"";
      stringArray0[7] = ""/{!g:vyR\""|"";
      DomainValidator.Item domainValidator_Item1 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.offerLast(domainValidator_Item1);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidLocalTld(""/{!g:vyR\""|"");
}"
2187,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test54()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ""p"";
      stringArray0[1] = ""p"";
      stringArray0[2] = ""p"";
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_MINUS;
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      stringArray0[3] = ""p"";
      stringArray0[4] = ""p"";
      DomainValidator.ArrayType domainValidator_ArrayType1 = DomainValidator.ArrayType.COUNTRY_CODE_PLUS;
      DomainValidator.Item domainValidator_Item1 = new DomainValidator.Item(domainValidator_ArrayType1, stringArray0);
      stringArray0[5] = ""p"";
      stringArray0[6] = ""p"";
      linkedList0.add(domainValidator_Item1);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidCountryCodeTld(""p"");
}"
2188,"    public boolean isValidCountryCodeTld(String ccTld) {
        final String key = chompLeadingDot(unicodeToASCII(ccTld).toLowerCase(Locale.ENGLISH));
        return (arrayContains(COUNTRY_CODE_TLDS, key) || arrayContains(mycountryCodeTLDsPlus, key))
                && !arrayContains(mycountryCodeTLDsMinus, key);
    }","  public void test55()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ""p"";
      stringArray0[1] = ""p"";
      stringArray0[2] = ""p"";
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.COUNTRY_CODE_MINUS;
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      stringArray0[3] = ""p"";
      stringArray0[4] = ""p"";
      DomainValidator.ArrayType domainValidator_ArrayType1 = DomainValidator.ArrayType.COUNTRY_CODE_PLUS;
      DomainValidator.Item domainValidator_Item1 = new DomainValidator.Item(domainValidator_ArrayType1, stringArray0);
      stringArray0[5] = ""p"";
      stringArray0[6] = ""p"";
      linkedList0.add(domainValidator_Item1);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidCountryCodeTld(""p"");
}"
2189,"    public boolean isValidGenericTld(String gTld) {
        final String key = chompLeadingDot(unicodeToASCII(gTld).toLowerCase(Locale.ENGLISH));
        return (arrayContains(GENERIC_TLDS, key) || arrayContains(mygenericTLDsPlus, key))
                && !arrayContains(mygenericTLDsMinus, key);
    }","  public void test56()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_MINUS;
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""museum"";
      stringArray0[1] = ""M3Tf?:|="";
      stringArray0[2] = ""leclerc"";
      stringArray0[3] = """";
      stringArray0[4] = ""leclerc"";
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidGenericTld(""leclerc"");
}"
2190,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test57()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_MINUS;
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""museum"";
      stringArray0[1] = ""M3Tf?:|="";
      stringArray0[2] = ""leclerc"";
      stringArray0[3] = """";
      stringArray0[4] = ""leclerc"";
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidGenericTld(""leclerc"");
}"
2191,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test58()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(true);
      boolean boolean0 = domainValidator0.isValidTld(""leclerc"");
}"
2192,"    public boolean isValidTld(String tld) {
        if(allowLocal && isValidLocalTld(tld)) {
            return true;
        }
        return isValidInfrastructureTld(tld)
                || isValidGenericTld(tld)
                || isValidCountryCodeTld(tld);
    }","  public void test59()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(true);
      boolean boolean0 = domainValidator0.isValidTld(""leclerc"");
}"
2193,"    final boolean isValidDomainSyntax(String domain) {
        if (domain == null) {
            return false;
        }
        domain = unicodeToASCII(domain);
        // hosts must be equally reachable via punycode and Unicode
        // Unicode is never shorter than punycode, so check punycode
        // if domain did not convert, then it will be caught by ASCII
        // checks in the regexes below
        if (domain.length() > MAX_DOMAIN_LENGTH) {
            return false;
        }
        String[] groups = domainRegex.match(domain);
        return (groups != null && groups.length > 0)
                || hostnameRegex.isValid(domain);
    }","  public void test60()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidDomainSyntax(""p"");
}"
2194,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test61()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidDomainSyntax(""p"");
}"
2195,"    final boolean isValidDomainSyntax(String domain) {
        if (domain == null) {
            return false;
        }
        domain = unicodeToASCII(domain);
        // hosts must be equally reachable via punycode and Unicode
        // Unicode is never shorter than punycode, so check punycode
        // if domain did not convert, then it will be caught by ASCII
        // checks in the regexes below
        if (domain.length() > MAX_DOMAIN_LENGTH) {
            return false;
        }
        String[] groups = domainRegex.match(domain);
        return (groups != null && groups.length > 0)
                || hostnameRegex.isValid(domain);
    }","  public void test62()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      boolean boolean0 = domainValidator0.isValidDomainSyntax(""org.apache.cmmons.validator.outines.RegexValidator"");
}"
2196,"    final boolean isValidDomainSyntax(String domain) {
        if (domain == null) {
            return false;
        }
        domain = unicodeToASCII(domain);
        // hosts must be equally reachable via punycode and Unicode
        // Unicode is never shorter than punycode, so check punycode
        // if domain did not convert, then it will be caught by ASCII
        // checks in the regexes below
        if (domain.length() > MAX_DOMAIN_LENGTH) {
            return false;
        }
        String[] groups = domainRegex.match(domain);
        return (groups != null && groups.length > 0)
                || hostnameRegex.isValid(domain);
    }","  public void test63()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      boolean boolean0 = domainValidator0.isValidDomainSyntax((String) null);
}"
2197,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test64()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidDomainSyntax(""........org.apache.commons.valida\""or.routimes.domainvalidator$arraytype"");
}"
2198,"    final boolean isValidDomainSyntax(String domain) {
        if (domain == null) {
            return false;
        }
        domain = unicodeToASCII(domain);
        // hosts must be equally reachable via punycode and Unicode
        // Unicode is never shorter than punycode, so check punycode
        // if domain did not convert, then it will be caught by ASCII
        // checks in the regexes below
        if (domain.length() > MAX_DOMAIN_LENGTH) {
            return false;
        }
        String[] groups = domainRegex.match(domain);
        return (groups != null && groups.length > 0)
                || hostnameRegex.isValid(domain);
    }","  public void test65()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidDomainSyntax(""........org.apache.commons.valida\""or.routimes.domainvalidator$arraytype"");
}"
2199,"    public boolean isValid(String domain) {
        if (domain == null) {
            return false;
        }
        domain = unicodeToASCII(domain);
        // hosts must be equally reachable via punycode and Unicode
        // Unicode is never shorter than punycode, so check punycode
        // if domain did not convert, then it will be caught by ASCII
        // checks in the regexes below
        if (domain.length() > MAX_DOMAIN_LENGTH) {
            return false;
        }
        String[] groups = domainRegex.match(domain);
        if (groups != null && groups.length > 0) {
            return isValidTld(groups[0]);
        }
        return allowLocal && hostnameRegex.isValid(domain);
    }","  public void test66()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValid(""........org.apache.commons.valida\""or.routimes.domainvalidator$arraytype"");
}"
2200,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test67()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValid(""........org.apache.commons.valida\""or.routimes.domainvalidator$arraytype"");
}"
2201,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test68()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_RO;
      String[] stringArray0 = new String[0];
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
}"
2202,"    public boolean isValidTld(String tld) {
        if(allowLocal && isValidLocalTld(tld)) {
            return true;
        }
        return isValidInfrastructureTld(tld)
                || isValidGenericTld(tld)
                || isValidCountryCodeTld(tld);
    }","  public void test69()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.LOCAL_PLUS;
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""/S{!g:vyR\""|"";
      stringArray0[1] = ""/S{!g:vyR\""|"";
      stringArray0[2] = ""/S{!g:vyR\""|"";
      stringArray0[3] = ""/S{!g:vyR\""|"";
      stringArray0[4] = ""/S{!g:vyR\""|"";
      stringArray0[5] = ""/S{!g:vyR\""|"";
      stringArray0[6] = ""/S{!g:vyR\""|"";
      stringArray0[7] = ""/S{!g:vyR\""|"";
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.offerLast(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidTld(""/S{!g:vyR\""|"");
}"
2203,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test70()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_PLUS;
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""museum"";
      stringArray0[1] = ""M3Tf?:|="";
      stringArray0[2] = ""leclerc"";
      stringArray0[3] = """";
      stringArray0[4] = ""leclerc"";
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidGenericTld(""M3Tf?:|="");
}"
2204,"    public boolean isValidGenericTld(String gTld) {
        final String key = chompLeadingDot(unicodeToASCII(gTld).toLowerCase(Locale.ENGLISH));
        return (arrayContains(GENERIC_TLDS, key) || arrayContains(mygenericTLDsPlus, key))
                && !arrayContains(mygenericTLDsMinus, key);
    }","  public void test71()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_PLUS;
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""museum"";
      stringArray0[1] = ""M3Tf?:|="";
      stringArray0[2] = ""leclerc"";
      stringArray0[3] = """";
      stringArray0[4] = ""leclerc"";
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValidGenericTld(""M3Tf?:|="");
}"
2205,"    public static synchronized DomainValidator getInstance() {
        inUse = true;
        return LazyHolder.DOMAIN_VALIDATOR;
    }","  public void test72()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_MINUS;
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      String[] stringArray0 = new String[5];
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      // Undeclared exception!
      try { 
        DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.DomainValidator"", e);
      }
  }"
2206,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test73()  throws Throwable  {
      DomainValidator.ArrayType domainValidator_ArrayType0 = DomainValidator.ArrayType.GENERIC_MINUS;
      String[] stringArray0 = DomainValidator.getTLDEntries(domainValidator_ArrayType0);
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator.Item domainValidator_Item0 = new DomainValidator.Item(domainValidator_ArrayType0, stringArray0);
      linkedList0.add(domainValidator_Item0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(true, (List<DomainValidator.Item>) linkedList0);
      domainValidator0.getOverrides(domainValidator_ArrayType0);
}"
2207,"    public boolean isValid(String domain) {
        if (domain == null) {
            return false;
        }
        domain = unicodeToASCII(domain);
        // hosts must be equally reachable via punycode and Unicode
        // Unicode is never shorter than punycode, so check punycode
        // if domain did not convert, then it will be caught by ASCII
        // checks in the regexes below
        if (domain.length() > MAX_DOMAIN_LENGTH) {
            return false;
        }
        String[] groups = domainRegex.match(domain);
        if (groups != null && groups.length > 0) {
            return isValidTld(groups[0]);
        }
        return allowLocal && hostnameRegex.isValid(domain);
    }","  public void test74()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(true);
      boolean boolean0 = domainValidator0.isValid(""leclerc"");
}"
2208,"    public boolean isValid(String domain) {
        if (domain == null) {
            return false;
        }
        domain = unicodeToASCII(domain);
        // hosts must be equally reachable via punycode and Unicode
        // Unicode is never shorter than punycode, so check punycode
        // if domain did not convert, then it will be caught by ASCII
        // checks in the regexes below
        if (domain.length() > MAX_DOMAIN_LENGTH) {
            return false;
        }
        String[] groups = domainRegex.match(domain);
        if (groups != null && groups.length > 0) {
            return isValidTld(groups[0]);
        }
        return allowLocal && hostnameRegex.isValid(domain);
    }","  public void test75()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(false);
      boolean boolean0 = domainValidator0.isValid(""M3Tf?:|="");
}"
2209,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test76()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance(false);
      boolean boolean0 = domainValidator0.isValid(""M3Tf?:|="");
}"
2210,"    public boolean isValid(String domain) {
        if (domain == null) {
            return false;
        }
        domain = unicodeToASCII(domain);
        // hosts must be equally reachable via punycode and Unicode
        // Unicode is never shorter than punycode, so check punycode
        // if domain did not convert, then it will be caught by ASCII
        // checks in the regexes below
        if (domain.length() > MAX_DOMAIN_LENGTH) {
            return false;
        }
        String[] groups = domainRegex.match(domain);
        if (groups != null && groups.length > 0) {
            return isValidTld(groups[0]);
        }
        return allowLocal && hostnameRegex.isValid(domain);
    }","  public void test77()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValid((String) null);
}"
2211,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test78()  throws Throwable  {
      LinkedList<DomainValidator.Item> linkedList0 = new LinkedList<DomainValidator.Item>();
      DomainValidator domainValidator0 = DomainValidator.getInstance(false, (List<DomainValidator.Item>) linkedList0);
      boolean boolean0 = domainValidator0.isValid((String) null);
}"
2212,"    public boolean isAllowLocal() {
        return this.allowLocal;
    }","  public void test79()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      boolean boolean0 = domainValidator0.isAllowLocal();
}"
2213,"    public boolean isValid(String domain) {
        if (domain == null) {
            return false;
        }
        domain = unicodeToASCII(domain);
        // hosts must be equally reachable via punycode and Unicode
        // Unicode is never shorter than punycode, so check punycode
        // if domain did not convert, then it will be caught by ASCII
        // checks in the regexes below
        if (domain.length() > MAX_DOMAIN_LENGTH) {
            return false;
        }
        String[] groups = domainRegex.match(domain);
        if (groups != null && groups.length > 0) {
            return isValidTld(groups[0]);
        }
        return allowLocal && hostnameRegex.isValid(domain);
    }","  public void test80()  throws Throwable  {
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      boolean boolean0 = domainValidator0.isValid(""org.apache.commons.validator.routines.RegexValidator"");
}"
2214,"    public String convertToISBN13(String isbn10) {

        if (isbn10 == null) {
            return null;
        }

        String input = isbn10.trim();
        if (input.length() != ISBN_10_LEN) {
            throw new IllegalArgumentException(""Invalid length "" + input.length() + "" for '"" + input + ""'"");
        }

        // Calculate the new ISBN-13 code (drop the original checkdigit)
        String isbn13 = ""978"" + input.substring(0, ISBN_10_LEN - 1);
        try {
            String checkDigit = isbn13Validator.getCheckDigit().calculate(isbn13);
            isbn13 += checkDigit;
            return isbn13;
        } catch (CheckDigitException e) {
            throw new IllegalArgumentException(""Check digit error for '"" + input + ""' - "" + e.getMessage());
        }

    }","  public void test0()  throws Throwable  {
      ISBNValidator iSBNValidator0 = ISBNValidator.getInstance();
      // Undeclared exception!
      try { 
        iSBNValidator0.convertToISBN13("" for '"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid length 5 for 'for ''
         //
         verifyException(""org.apache.commons.validator.routines.ISBNValidator"", e);
      }
  }"
2215,"    public String validate(String code) {
        String result = validateISBN13(code);
        if (result == null) {
            result = validateISBN10(code);
            if (result != null && convert) {
                result = convertToISBN13(result);
            }
        }
        return result;
    }","  public void test1()  throws Throwable  {
      ISBNValidator iSBNValidator0 = ISBNValidator.getInstance();
      String string0 = iSBNValidator0.validate(""^(?:(d{9}[0-9X])|(?:(d{1,5})(?:-|s)(d{1,7})(?:-|s)(d{1,6})(?:-|s)([0-9X])))$"");
}"
2216,"    public String convertToISBN13(String isbn10) {

        if (isbn10 == null) {
            return null;
        }

        String input = isbn10.trim();
        if (input.length() != ISBN_10_LEN) {
            throw new IllegalArgumentException(""Invalid length "" + input.length() + "" for '"" + input + ""'"");
        }

        // Calculate the new ISBN-13 code (drop the original checkdigit)
        String isbn13 = ""978"" + input.substring(0, ISBN_10_LEN - 1);
        try {
            String checkDigit = isbn13Validator.getCheckDigit().calculate(isbn13);
            isbn13 += checkDigit;
            return isbn13;
        } catch (CheckDigitException e) {
            throw new IllegalArgumentException(""Check digit error for '"" + input + ""' - "" + e.getMessage());
        }

    }","  public void test2()  throws Throwable  {
      ISBNValidator iSBNValidator0 = new ISBNValidator();
      // Undeclared exception!
      try { 
        iSBNValidator0.convertToISBN13(""iBAifqI8*E"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Check digit error for 'iBAifqI8*E' - Invalid Character[4] = 'i'
         //
         verifyException(""org.apache.commons.validator.routines.ISBNValidator"", e);
      }
  }"
2217,"    public String validateISBN13(String code) {
        Object result = isbn13Validator.validate(code);
        return (result == null ? null : result.toString());
    }","  public void test3()  throws Throwable  {
      ISBNValidator iSBNValidator0 = ISBNValidator.getInstance(true);
      String string0 = iSBNValidator0.validateISBN13((String) null);
}"
2218,"    public String validateISBN10(String code) {
        Object result = isbn10Validator.validate(code);
        return (result == null ? null : result.toString());
    }","  public void test4()  throws Throwable  {
      ISBNValidator iSBNValidator0 = ISBNValidator.getInstance(true);
      String string0 = iSBNValidator0.validateISBN10((String) null);
}"
2219,"    public boolean isValidISBN13(String code) {
        return isbn13Validator.isValid(code);
    }","  public void test5()  throws Throwable  {
      ISBNValidator iSBNValidator0 = ISBNValidator.getInstance();
      boolean boolean0 = iSBNValidator0.isValidISBN13(""}"");
}"
2220,"    public String convertToISBN13(String isbn10) {

        if (isbn10 == null) {
            return null;
        }

        String input = isbn10.trim();
        if (input.length() != ISBN_10_LEN) {
            throw new IllegalArgumentException(""Invalid length "" + input.length() + "" for '"" + input + ""'"");
        }

        // Calculate the new ISBN-13 code (drop the original checkdigit)
        String isbn13 = ""978"" + input.substring(0, ISBN_10_LEN - 1);
        try {
            String checkDigit = isbn13Validator.getCheckDigit().calculate(isbn13);
            isbn13 += checkDigit;
            return isbn13;
        } catch (CheckDigitException e) {
            throw new IllegalArgumentException(""Check digit error for '"" + input + ""' - "" + e.getMessage());
        }

    }","  public void test6()  throws Throwable  {
      ISBNValidator iSBNValidator0 = new ISBNValidator(true);
      // Undeclared exception!
      try { 
        iSBNValidator0.convertToISBN13(""CiF2f(w+`m "");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Check digit error for 'CiF2f(w+`m' - Invalid Character[4] = 'C'
         //
         verifyException(""org.apache.commons.validator.routines.ISBNValidator"", e);
      }
  }"
2221,"    public String convertToISBN13(String isbn10) {

        if (isbn10 == null) {
            return null;
        }

        String input = isbn10.trim();
        if (input.length() != ISBN_10_LEN) {
            throw new IllegalArgumentException(""Invalid length "" + input.length() + "" for '"" + input + ""'"");
        }

        // Calculate the new ISBN-13 code (drop the original checkdigit)
        String isbn13 = ""978"" + input.substring(0, ISBN_10_LEN - 1);
        try {
            String checkDigit = isbn13Validator.getCheckDigit().calculate(isbn13);
            isbn13 += checkDigit;
            return isbn13;
        } catch (CheckDigitException e) {
            throw new IllegalArgumentException(""Check digit error for '"" + input + ""' - "" + e.getMessage());
        }

    }","  public void test7()  throws Throwable  {
      ISBNValidator iSBNValidator0 = ISBNValidator.getInstance(true);
      String string0 = iSBNValidator0.convertToISBN13((String) null);
}"
2222,"    public String convertToISBN13(String isbn10) {

        if (isbn10 == null) {
            return null;
        }

        String input = isbn10.trim();
        if (input.length() != ISBN_10_LEN) {
            throw new IllegalArgumentException(""Invalid length "" + input.length() + "" for '"" + input + ""'"");
        }

        // Calculate the new ISBN-13 code (drop the original checkdigit)
        String isbn13 = ""978"" + input.substring(0, ISBN_10_LEN - 1);
        try {
            String checkDigit = isbn13Validator.getCheckDigit().calculate(isbn13);
            isbn13 += checkDigit;
            return isbn13;
        } catch (CheckDigitException e) {
            throw new IllegalArgumentException(""Check digit error for '"" + input + ""' - "" + e.getMessage());
        }

    }","  public void test8()  throws Throwable  {
      ISBNValidator iSBNValidator0 = ISBNValidator.getInstance(true);
      // Undeclared exception!
      try { 
        iSBNValidator0.convertToISBN13(""@=Ip[egPN95uh"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid length 14 for '@=Ip[egPN95uh'
         //
         verifyException(""org.apache.commons.validator.routines.ISBNValidator"", e);
      }
  }"
2223,"    public static ISBNValidator getInstance() {
        return ISBN_VALIDATOR;
    }","  public void test9()  throws Throwable  {
      ISBNValidator iSBNValidator0 = ISBNValidator.getInstance(false);
}"
2224,"    public boolean isValid(String code) {
        return (isValidISBN13(code) || isValidISBN10(code));
    }","  public void test10()  throws Throwable  {
      ISBNValidator iSBNValidator0 = ISBNValidator.getInstance(true);
      boolean boolean0 = iSBNValidator0.isValid((String) null);
}"
2225,"    public boolean isValidISBN10(String code) {
        return isbn10Validator.isValid(code);
    }","  public void test11()  throws Throwable  {
      ISBNValidator iSBNValidator0 = ISBNValidator.getInstance();
      boolean boolean0 = iSBNValidator0.isValidISBN10(""xR"");
}"
2226,"    public Date validate(String value) {
        return (Date)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test0()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.CANADA;
      Date date0 = dateValidator0.validate("""", (String) null, locale0);
}"
2227,"    public Date validate(String value) {
        return (Date)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test1()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      TimeZone timeZone0 = TimeZone.getTimeZone(""1"");
      Date date0 = dateValidator0.validate(""1"", ""1"", timeZone0);
}"
2228,"    public Date validate(String value) {
        return (Date)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test2()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
      Locale locale0 = Locale.ITALIAN;
      Date date0 = dateValidator0.validate(""05/08/50"", ""05/08/50"", locale0, (TimeZone) simpleTimeZone0);
}"
2229,"    public Date validate(String value) {
        return (Date)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test3()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Date date0 = dateValidator0.validate(""3/9025"", ""3/9025"", locale0);
}"
2230,"    public Date validate(String value) {
        return (Date)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test4()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      Date date0 = dateValidator0.validate(""=("", ""=("");
}"
2231,"    protected Object processParsedValue(Object value, Format formatter) {
        return value;
    }","  public void test5()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.FRENCH;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      Locale locale1 = (Locale)dateValidator0.processParsedValue(locale0, dateFormat0);
}"
2232,"    public int compareYears(Date value, Date compare, TimeZone timeZone) {
        Calendar calendarValue   = getCalendar(value, timeZone);
        Calendar calendarCompare = getCalendar(compare, timeZone);
        return compare(calendarValue, calendarCompare, Calendar.YEAR);
    }","  public void test6()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(true, 7);
      MockDate mockDate0 = new MockDate(7, (-1374), 0, 0, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate1 = new MockDate(1477, (-1712), 0, 0, (-1712));
      int int0 = dateValidator0.compareYears(mockDate1, mockDate0, timeZone0);
}"
2233,"    public int compareYears(Date value, Date compare, TimeZone timeZone) {
        Calendar calendarValue   = getCalendar(value, timeZone);
        Calendar calendarCompare = getCalendar(compare, timeZone);
        return compare(calendarValue, calendarCompare, Calendar.YEAR);
    }","  public void test7()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 7);
      MockDate mockDate0 = new MockDate(7, (-1374), 0, 0, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate1 = new MockDate(0, 0, 7, 2873, 2243, 0);
      int int0 = dateValidator0.compareYears(mockDate0, mockDate1, timeZone0);
}"
2234,"    public int compareWeeks(Date value, Date compare, TimeZone timeZone) {
        Calendar calendarValue   = getCalendar(value, timeZone);
        Calendar calendarCompare = getCalendar(compare, timeZone);
        return compare(calendarValue, calendarCompare, Calendar.WEEK_OF_YEAR);
    }","  public void test8()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(true, 7);
      MockDate mockDate0 = new MockDate(7, 7, 0, 0, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = mockSimpleDateFormat0.parse(""kW%Z./|%1"", parsePosition0);
      int int0 = dateValidator0.compareWeeks(date0, mockDate0, timeZone0);
}"
2235,"    public int compareWeeks(Date value, Date compare, TimeZone timeZone) {
        Calendar calendarValue   = getCalendar(value, timeZone);
        Calendar calendarCompare = getCalendar(compare, timeZone);
        return compare(calendarValue, calendarCompare, Calendar.WEEK_OF_YEAR);
    }","  public void test9()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 7);
      MockDate mockDate0 = new MockDate(7, (-1374), (-21), (-21), (-21));
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate1 = new MockDate(7, (-1374), 0, 7, 0);
      int int0 = dateValidator0.compareWeeks(mockDate0, mockDate1, timeZone0);
}"
2236,"    public int compareQuarters(Date value, Date compare, TimeZone timeZone) {
        return compareQuarters(value, compare, timeZone, 1);
    }","  public void test10()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 7);
      MockDate mockDate0 = new MockDate(7, (-1374), 0, 0, 0);
      Locale locale0 = Locale.ROOT;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", dateFormatSymbols0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = mockSimpleDateFormat0.parse(""oG8"", parsePosition0);
      int int0 = dateValidator0.compareQuarters(date0, (Date) mockDate0, (TimeZone) null, (-35));
}"
2237,"    public int compareQuarters(Date value, Date compare, TimeZone timeZone) {
        return compareQuarters(value, compare, timeZone, 1);
    }","  public void test11()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(true, 7);
      MockDate mockDate0 = new MockDate(7, (-1374), (-1374), (-1374), (-1374));
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate1 = new MockDate(7, (-1374), 0, 7, 0);
      int int0 = dateValidator0.compareQuarters((Date) mockDate0, (Date) mockDate1, timeZone0, 11);
}"
2238,"    public int compareQuarters(Date value, Date compare, TimeZone timeZone) {
        return compareQuarters(value, compare, timeZone, 1);
    }","  public void test12()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 7);
      MockDate mockDate0 = new MockDate(7, (-1379), 0, 0, 0);
      int int0 = dateValidator0.compareQuarters((Date) mockDate0, (Date) mockDate0, (TimeZone) null);
}"
2239,"    public int compareQuarters(Date value, Date compare, TimeZone timeZone) {
        return compareQuarters(value, compare, timeZone, 1);
    }","  public void test13()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(true, 7);
      MockDate mockDate0 = new MockDate(7, 7, 0, 0, 0);
      MockDate mockDate1 = new MockDate(0, (-1701), 0);
      int int0 = dateValidator0.compareQuarters((Date) mockDate0, (Date) mockDate1, (TimeZone) null);
}"
2240,"    public int compareQuarters(Date value, Date compare, TimeZone timeZone) {
        return compareQuarters(value, compare, timeZone, 1);
    }","  public void test14()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate(2812, 2812, 2812, 2812, 1739);
      int int0 = dateValidator0.compareQuarters((Date) mockDate0, (Date) mockDate1, (TimeZone) null);
}"
2241,"    public int compareMonths(Date value, Date compare, TimeZone timeZone) {
        Calendar calendarValue   = getCalendar(value, timeZone);
        Calendar calendarCompare = getCalendar(compare, timeZone);
        return compare(calendarValue, calendarCompare, Calendar.MONTH);
    }","  public void test15()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      MockDate mockDate0 = new MockDate(11, 5, 1073, 5, 261);
      int int0 = dateValidator0.compareMonths(date0, mockDate0, (TimeZone) null);
}"
2242,"    public int compareMonths(Date value, Date compare, TimeZone timeZone) {
        Calendar calendarValue   = getCalendar(value, timeZone);
        Calendar calendarCompare = getCalendar(compare, timeZone);
        return compare(calendarValue, calendarCompare, Calendar.MONTH);
    }","  public void test16()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      MockDate mockDate0 = new MockDate(0, 0, 0, 5, (-106), 5);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      TimeZone timeZone0 = TimeZone.getTimeZone("""");
      int int0 = dateValidator0.compareMonths(mockDate0, date0, timeZone0);
}"
2243,"    public int compareDates(Date value, Date compare, TimeZone timeZone) {
        Calendar calendarValue   = getCalendar(value, timeZone);
        Calendar calendarCompare = getCalendar(compare, timeZone);
        return compare(calendarValue, calendarCompare, Calendar.DATE);
    }","  public void test17()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate(0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(623, """");
      int int0 = dateValidator0.compareDates(mockDate0, mockDate1, simpleTimeZone0);
}"
2244,"    public int compareDates(Date value, Date compare, TimeZone timeZone) {
        Calendar calendarValue   = getCalendar(value, timeZone);
        Calendar calendarCompare = getCalendar(compare, timeZone);
        return compare(calendarValue, calendarCompare, Calendar.DATE);
    }","  public void test18()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      TimeZone timeZone0 = TimeZone.getTimeZone("",KZKebOyLT(}6|;Z"");
      MockDate mockDate0 = new MockDate((-1L));
      MockDate mockDate1 = new MockDate();
      int int0 = dateValidator0.compareDates(mockDate0, mockDate1, timeZone0);
}"
2245,"    public Date validate(String value) {
        return (Date)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test19()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 7);
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        dateValidator0.validate(""oG8"", timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 7
         //
         verifyException(""java.text.DateFormat"", e);
      }
  }"
2246,"    public Date validate(String value) {
        return (Date)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test20()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 14);
      Locale locale0 = Locale.FRENCH;
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(14);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        dateValidator0.validate(""org.apache.commons.validator.routines.AbstractFormatValidator"", locale0, timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 14
         //
         verifyException(""java.text.DateFormat"", e);
      }
  }"
2247,"    public Date validate(String value) {
        return (Date)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test21()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 632);
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        dateValidator0.validate(""k)#L$> kE,52vUM"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 632
         //
         verifyException(""java.text.DateFormat"", e);
      }
  }"
2248,"    public Date validate(String value) {
        return (Date)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test22()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), ""T5-kj6twQ.m"", 0, 0, (-1), 7, (-3481), 0, 0, 1, (-1106), (-1106), 2157);
      // Undeclared exception!
      try { 
        dateValidator0.validate(""1r"", ""1r"", (TimeZone) simpleTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'r'
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
2249,"    public Date validate(String value) {
        return (Date)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test23()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        dateValidator0.validate(""org.apache.commons.validator.routines.AbstractCalendarValidator"", ""org.apache.commons.validator.routines.AbstractCalendarValidator"", locale0, (TimeZone) simpleTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
2250,"    public Date validate(String value) {
        return (Date)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test24()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        dateValidator0.validate(""Invalid field: "", ""Invalid field: "", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'I'
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
2251,"    public Date validate(String value) {
        return (Date)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test25()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      // Undeclared exception!
      try { 
        dateValidator0.validate(""ykO|k#"", ""org.apache.commons.validator.routines.AbstractCalendarValidator"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
2252,"    public Date validate(String value) {
        return (Date)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test26()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 642);
      // Undeclared exception!
      try { 
        dateValidator0.validate(""z"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 642
         //
         verifyException(""java.text.DateFormat"", e);
      }
  }"
2253,"    public int compareYears(Date value, Date compare, TimeZone timeZone) {
        Calendar calendarValue   = getCalendar(value, timeZone);
        Calendar calendarCompare = getCalendar(compare, timeZone);
        return compare(calendarValue, calendarCompare, Calendar.YEAR);
    }","  public void test27()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      Date date0 = Date.from(instant0);
      TimeZone timeZone0 = TimeZone.getTimeZone("""");
      // Undeclared exception!
      try { 
        dateValidator0.compareYears(date0, (Date) null, timeZone0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Calendar"", e);
      }
  }"
2254,"    public int compareWeeks(Date value, Date compare, TimeZone timeZone) {
        Calendar calendarValue   = getCalendar(value, timeZone);
        Calendar calendarCompare = getCalendar(compare, timeZone);
        return compare(calendarValue, calendarCompare, Calendar.WEEK_OF_YEAR);
    }","  public void test28()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 3, 0, 1453, 7, 0, 0, 5);
      // Undeclared exception!
      try { 
        dateValidator0.compareWeeks((Date) null, (Date) null, simpleTimeZone0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Calendar"", e);
      }
  }"
2255,"    public int compareQuarters(Date value, Date compare, TimeZone timeZone) {
        return compareQuarters(value, compare, timeZone, 1);
    }","  public void test29()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        dateValidator0.compareQuarters((Date) null, (Date) null, timeZone0, (-4111));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Calendar"", e);
      }
  }"
2256,"    public int compareMonths(Date value, Date compare, TimeZone timeZone) {
        Calendar calendarValue   = getCalendar(value, timeZone);
        Calendar calendarCompare = getCalendar(compare, timeZone);
        return compare(calendarValue, calendarCompare, Calendar.MONTH);
    }","  public void test30()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-1), (-1), (-1));
      // Undeclared exception!
      try { 
        dateValidator0.compareMonths((Date) null, mockDate0, (TimeZone) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Calendar"", e);
      }
  }"
2257,"    public int compareDates(Date value, Date compare, TimeZone timeZone) {
        Calendar calendarValue   = getCalendar(value, timeZone);
        Calendar calendarCompare = getCalendar(compare, timeZone);
        return compare(calendarValue, calendarCompare, Calendar.DATE);
    }","  public void test31()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        dateValidator0.compareDates((Date) null, (Date) null, timeZone0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Calendar"", e);
      }
  }"
2258,"    public int compareQuarters(Date value, Date compare, TimeZone timeZone) {
        return compareQuarters(value, compare, timeZone, 1);
    }","  public void test32()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 7);
      MockDate mockDate0 = new MockDate(7, (-1379), 0, 0, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      int int0 = dateValidator0.compareQuarters((Date) mockDate0, (Date) mockDate0, timeZone0, 0);
}"
2259,"    public int compareWeeks(Date value, Date compare, TimeZone timeZone) {
        Calendar calendarValue   = getCalendar(value, timeZone);
        Calendar calendarCompare = getCalendar(compare, timeZone);
        return compare(calendarValue, calendarCompare, Calendar.WEEK_OF_YEAR);
    }","  public void test33()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      int int0 = dateValidator0.compareWeeks(mockDate0, mockDate0, timeZone0);
}"
2260,"    public Date validate(String value) {
        return (Date)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test34()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Date date0 = dateValidator0.validate("""", ""org.apache.commons.validator.routines.DateValidator"", timeZone0);
}"
2261,"    public Date validate(String value) {
        return (Date)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test35()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      Date date0 = dateValidator0.validate(""org.apache.commons.validator.routines.AbstractFormatValidator"", locale0, timeZone0);
}"
2262,"    public Date validate(String value) {
        return (Date)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test36()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      Date date0 = dateValidator0.validate("">"");
}"
2263,"    public int compareMonths(Date value, Date compare, TimeZone timeZone) {
        Calendar calendarValue   = getCalendar(value, timeZone);
        Calendar calendarCompare = getCalendar(compare, timeZone);
        return compare(calendarValue, calendarCompare, Calendar.MONTH);
    }","  public void test37()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      MockDate mockDate0 = new MockDate();
      int int0 = dateValidator0.compareMonths(mockDate0, mockDate0, (TimeZone) null);
}"
2264,"    public Date validate(String value) {
        return (Date)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test38()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator(false, 7);
      Locale locale0 = Locale.ROOT;
      Date date0 = dateValidator0.validate("""", ""GZv%rX*AW25n\"""", locale0, (TimeZone) null);
}"
2265,"    public int compareDates(Date value, Date compare, TimeZone timeZone) {
        Calendar calendarValue   = getCalendar(value, timeZone);
        Calendar calendarCompare = getCalendar(compare, timeZone);
        return compare(calendarValue, calendarCompare, Calendar.DATE);
    }","  public void test39()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      int int0 = dateValidator0.compareDates(mockDate0, mockDate0, timeZone0);
}"
2266,"    public Date validate(String value) {
        return (Date)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test40()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      Date date0 = dateValidator0.validate((String) null, timeZone0);
}"
2267,"    public int compareYears(Date value, Date compare, TimeZone timeZone) {
        Calendar calendarValue   = getCalendar(value, timeZone);
        Calendar calendarCompare = getCalendar(compare, timeZone);
        return compare(calendarValue, calendarCompare, Calendar.YEAR);
    }","  public void test41()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      MockDate mockDate0 = new MockDate(303, 0, 0, 303, 0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      int int0 = dateValidator0.compareYears(mockDate0, mockDate0, timeZone0);
}"
2268,"    public Date validate(String value) {
        return (Date)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test42()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      Date date0 = dateValidator0.validate("""", """");
}"
2269,"    protected Object processParsedValue(Object value, Format formatter) {
        return value;
    }","  public void test43()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      Object object0 = dateValidator0.processParsedValue((Object) null, numberFormat0);
}"
2270,"    public Date validate(String value) {
        return (Date)parse(value, (String)null, (Locale)null, (TimeZone)null);
    }","  public void test44()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      Locale locale0 = Locale.UK;
      Date date0 = dateValidator0.validate((String) null, locale0);
}"
2271,"    public int compareQuarters(Date value, Date compare, TimeZone timeZone) {
        return compareQuarters(value, compare, timeZone, 1);
    }","  public void test45()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getInstance();
      MockDate mockDate0 = new MockDate(303, 0, 0, 303, 0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        dateValidator0.compareQuarters((Date) mockDate0, (Date) null, timeZone0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Calendar"", e);
      }
  }"
2272,"    protected Object processParsedValue(Object value, Format formatter) {

        long longValue = ((Number)value).longValue();

        if (longValue < Short.MIN_VALUE ||
            longValue > Short.MAX_VALUE) {
            return null;
        }
        return Short.valueOf((short)longValue);
    }","  public void test0()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Long long0 = new Long(32767L);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""EWW$#F#"");
      Object object0 = shortValidator0.processParsedValue(long0, mockSimpleDateFormat0);
}"
2273,"    protected Object processParsedValue(Object value, Format formatter) {

        long longValue = ((Number)value).longValue();

        if (longValue < Short.MIN_VALUE ||
            longValue > Short.MAX_VALUE) {
            return null;
        }
        return Short.valueOf((short)longValue);
    }","  public void test1()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Long long0 = new Long(32767L);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""EWW$#F#"");
      Object object0 = shortValidator0.processParsedValue(long0, mockSimpleDateFormat0);
}"
2274,"    public boolean isInRange(short value, short min, short max) {
        return (value >= min && value <= max);
    }","  public void test2()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      boolean boolean0 = shortValidator0.isInRange((short) (-1647), (short) (-1647), (short)2);
}"
2275,"    public Short validate(String value) {
        return (Short)parse(value, (String)null, (Locale)null);
    }","  public void test3()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(true, 806);
      Locale locale0 = Locale.ITALIAN;
      Short short0 = shortValidator0.validate(""0"", locale0);
}"
2276,"    public Short validate(String value) {
        return (Short)parse(value, (String)null, (Locale)null);
    }","  public void test4()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(false, 0);
      Locale locale0 = Locale.UK;
      Short short0 = shortValidator0.validate(""100"", locale0);
}"
2277,"    public Short validate(String value) {
        return (Short)parse(value, (String)null, (Locale)null);
    }","  public void test5()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(false, 0);
      Locale locale0 = Locale.UK;
      Short short0 = shortValidator0.validate(""100"", locale0);
}"
2278,"    public Short validate(String value) {
        return (Short)parse(value, (String)null, (Locale)null);
    }","  public void test6()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(true, 1152);
      Short short0 = shortValidator0.validate(""-10"", (Locale) null);
}"
2279,"    public Short validate(String value) {
        return (Short)parse(value, (String)null, (Locale)null);
    }","  public void test7()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(true, 1152);
      Short short0 = shortValidator0.validate(""-10"", (Locale) null);
}"
2280,"    public Short validate(String value) {
        return (Short)parse(value, (String)null, (Locale)null);
    }","  public void test8()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(false, 0);
      Locale locale0 = Locale.ITALIAN;
      Short short0 = shortValidator0.validate(""100"", ""100"", locale0);
}"
2281,"    public Short validate(String value) {
        return (Short)parse(value, (String)null, (Locale)null);
    }","  public void test9()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(true, 0);
      Locale locale0 = Locale.ITALY;
      Short short0 = shortValidator0.validate(""1"", (String) null, locale0);
}"
2282,"    public Short validate(String value) {
        return (Short)parse(value, (String)null, (Locale)null);
    }","  public void test10()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(true, 0);
      Locale locale0 = Locale.ITALY;
      Short short0 = shortValidator0.validate(""1"", (String) null, locale0);
}"
2283,"    public Short validate(String value) {
        return (Short)parse(value, (String)null, (Locale)null);
    }","  public void test11()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Locale locale0 = Locale.UK;
      Short short0 = shortValidator0.validate(""-1,348"", """", locale0);
}"
2284,"    public Short validate(String value) {
        return (Short)parse(value, (String)null, (Locale)null);
    }","  public void test12()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Locale locale0 = Locale.UK;
      Short short0 = shortValidator0.validate(""-1,348"", """", locale0);
}"
2285,"    public Short validate(String value) {
        return (Short)parse(value, (String)null, (Locale)null);
    }","  public void test13()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Short short0 = shortValidator0.validate(""@@N0@~&"", ""@@N0@~&"");
}"
2286,"    public Short validate(String value) {
        return (Short)parse(value, (String)null, (Locale)null);
    }","  public void test14()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(false, 0);
      Short short0 = shortValidator0.validate(""1:"", """");
}"
2287,"    public Short validate(String value) {
        return (Short)parse(value, (String)null, (Locale)null);
    }","  public void test15()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(false, 0);
      Short short0 = shortValidator0.validate(""1:"", """");
}"
2288,"    public Short validate(String value) {
        return (Short)parse(value, (String)null, (Locale)null);
    }","  public void test16()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(true, 1152);
      Short short0 = shortValidator0.validate(""-10"", """");
}"
2289,"    public Short validate(String value) {
        return (Short)parse(value, (String)null, (Locale)null);
    }","  public void test17()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(true, 1152);
      Short short0 = shortValidator0.validate(""-10"", """");
}"
2290,"    public Short validate(String value) {
        return (Short)parse(value, (String)null, (Locale)null);
    }","  public void test18()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(false, 2147419687);
      Short short0 = shortValidator0.validate(""0yJ2)MS9_?c"");
}"
2291,"    public Short validate(String value) {
        return (Short)parse(value, (String)null, (Locale)null);
    }","  public void test19()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Short short0 = shortValidator0.validate(""57"");
}"
2292,"    public Short validate(String value) {
        return (Short)parse(value, (String)null, (Locale)null);
    }","  public void test20()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Short short0 = shortValidator0.validate(""57"");
}"
2293,"    public Short validate(String value) {
        return (Short)parse(value, (String)null, (Locale)null);
    }","  public void test21()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Short short0 = shortValidator0.validate(""-56"");
}"
2294,"    public Short validate(String value) {
        return (Short)parse(value, (String)null, (Locale)null);
    }","  public void test22()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Short short0 = shortValidator0.validate(""-56"");
}"
2295,"    public boolean minValue(short value, short min) {
        return (value >= min);
    }","  public void test23()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Short short0 = new Short((short)1);
      boolean boolean0 = shortValidator0.minValue(short0, (short)1836);
}"
2296,"    public boolean maxValue(short value, short max) {
        return (value <= max);
    }","  public void test24()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Short short0 = new Short((short)494);
      boolean boolean0 = shortValidator0.maxValue(short0, (short) (-1558));
}"
2297,"    public boolean isInRange(short value, short min, short max) {
        return (value >= min && value <= max);
    }","  public void test25()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Short short0 = new Short((short)340);
      boolean boolean0 = shortValidator0.isInRange(short0, (short) (-1558), (short)340);
}"
2298,"    public Short validate(String value) {
        return (Short)parse(value, (String)null, (Locale)null);
    }","  public void test26()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        shortValidator0.validate(""org.apache.commons.validator.routines.AbstractFormatValidator"", ""i,hqhJ!"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \""i,hqhJ!\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
2299,"    public Short validate(String value) {
        return (Short)parse(value, (String)null, (Locale)null);
    }","  public void test27()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      // Undeclared exception!
      try { 
        shortValidator0.validate(""b&W%!74kx+P15=(p9"", ""V?K!,f3#,N8E]x'BU*"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \""V?K!,f3#,N8E]x'BU*\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
2300,"    protected Object processParsedValue(Object value, Format formatter) {

        long longValue = ((Number)value).longValue();

        if (longValue < Short.MIN_VALUE ||
            longValue > Short.MAX_VALUE) {
            return null;
        }
        return Short.valueOf((short)longValue);
    }","  public void test28()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance((int) (short)1, (int) (short)1, locale0);
      // Undeclared exception!
      try { 
        shortValidator0.processParsedValue((Object) null, dateFormat0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.ShortValidator"", e);
      }
  }"
2301,"    protected Object processParsedValue(Object value, Format formatter) {

        long longValue = ((Number)value).longValue();

        if (longValue < Short.MIN_VALUE ||
            longValue > Short.MAX_VALUE) {
            return null;
        }
        return Short.valueOf((short)longValue);
    }","  public void test29()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Locale locale0 = Locale.PRC;
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance();
      // Undeclared exception!
      try { 
        shortValidator0.processParsedValue(locale0, dateFormat0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to java.lang.Number
         //
         verifyException(""org.apache.commons.validator.routines.ShortValidator"", e);
      }
  }"
2302,"    public boolean maxValue(short value, short max) {
        return (value <= max);
    }","  public void test30()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      // Undeclared exception!
      try { 
        shortValidator0.maxValue((Short) null, (short)0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.ShortValidator"", e);
      }
  }"
2303,"    public boolean isInRange(short value, short min, short max) {
        return (value >= min && value <= max);
    }","  public void test31()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      // Undeclared exception!
      try { 
        shortValidator0.isInRange((Short) null, (short)1400, (short) (-1920));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.ShortValidator"", e);
      }
  }"
2304,"    public boolean maxValue(short value, short max) {
        return (value <= max);
    }","  public void test32()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      boolean boolean0 = shortValidator0.maxValue((short)1277, (short)1277);
}"
2305,"    public boolean minValue(short value, short min) {
        return (value >= min);
    }","  public void test33()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      boolean boolean0 = shortValidator0.minValue((short) (-269), (short) (-269));
}"
2306,"    public boolean isInRange(short value, short min, short max) {
        return (value >= min && value <= max);
    }","  public void test34()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      boolean boolean0 = shortValidator0.isInRange((short) (-269), (short)0, (short)100);
}"
2307,"    public boolean isInRange(short value, short min, short max) {
        return (value >= min && value <= max);
    }","  public void test35()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      boolean boolean0 = shortValidator0.isInRange((short) (-1), (short) (-2634), (short) (-2634));
}"
2308,"    protected Object processParsedValue(Object value, Format formatter) {

        long longValue = ((Number)value).longValue();

        if (longValue < Short.MIN_VALUE ||
            longValue > Short.MAX_VALUE) {
            return null;
        }
        return Short.valueOf((short)longValue);
    }","  public void test36()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator(false, (-442));
      Long long0 = Long.getLong("""", (-32768L));
      Locale locale0 = Locale.ENGLISH;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat("""", decimalFormatSymbols0);
      shortValidator0.processParsedValue(long0, decimalFormat0);
  }"
2309,"    protected Object processParsedValue(Object value, Format formatter) {

        long longValue = ((Number)value).longValue();

        if (longValue < Short.MIN_VALUE ||
            longValue > Short.MAX_VALUE) {
            return null;
        }
        return Short.valueOf((short)longValue);
    }","  public void test37()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Long long0 = new Long(32773L);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(""EWW$#F#"");
      Object object0 = shortValidator0.processParsedValue(long0, mockSimpleDateFormat0);
}"
2310,"    protected Object processParsedValue(Object value, Format formatter) {

        long longValue = ((Number)value).longValue();

        if (longValue < Short.MIN_VALUE ||
            longValue > Short.MAX_VALUE) {
            return null;
        }
        return Short.valueOf((short)longValue);
    }","  public void test38()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Integer integer0 = new Integer((-2147418108));
      Locale locale0 = Locale.GERMANY;
      Format format0 = shortValidator0.getFormat(locale0);
      Object object0 = shortValidator0.processParsedValue(integer0, format0);
}"
2311,"    public boolean maxValue(short value, short max) {
        return (value <= max);
    }","  public void test39()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      boolean boolean0 = shortValidator0.maxValue((short)2476, (short)2);
}"
2312,"    public boolean minValue(short value, short min) {
        return (value >= min);
    }","  public void test40()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Short short0 = new Short((short)2);
      boolean boolean0 = shortValidator0.minValue(short0, (short)1);
}"
2313,"    public boolean minValue(short value, short min) {
        return (value >= min);
    }","  public void test41()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      boolean boolean0 = shortValidator0.minValue((short)0, (short)2);
}"
2314,"    public boolean isInRange(short value, short min, short max) {
        return (value >= min && value <= max);
    }","  public void test42()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Short short0 = new Short((short)1812);
      boolean boolean0 = shortValidator0.isInRange(short0, (short)1812, (short) (-1475));
}"
2315,"    public Short validate(String value) {
        return (Short)parse(value, (String)null, (Locale)null);
    }","  public void test43()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Locale locale0 = Locale.CANADA_FRENCH;
      Short short0 = shortValidator0.validate("""", locale0);
}"
2316,"    public Short validate(String value) {
        return (Short)parse(value, (String)null, (Locale)null);
    }","  public void test44()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Locale locale0 = Locale.KOREA;
      Short short0 = shortValidator0.validate(""T!sWax2^[YMi[hSm"", ""T!sWax2^[YMi[hSm"", locale0);
}"
2317,"    protected Object processParsedValue(Object value, Format formatter) {

        long longValue = ((Number)value).longValue();

        if (longValue < Short.MIN_VALUE ||
            longValue > Short.MAX_VALUE) {
            return null;
        }
        return Short.valueOf((short)longValue);
    }","  public void test45()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Double double0 = Double.valueOf((double) 1);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Short short0 = (Short)shortValidator0.processParsedValue(double0, decimalFormat0);
}"
2318,"    protected Object processParsedValue(Object value, Format formatter) {

        long longValue = ((Number)value).longValue();

        if (longValue < Short.MIN_VALUE ||
            longValue > Short.MAX_VALUE) {
            return null;
        }
        return Short.valueOf((short)longValue);
    }","  public void test46()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Double double0 = Double.valueOf((double) 1);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Short short0 = (Short)shortValidator0.processParsedValue(double0, decimalFormat0);
}"
2319,"    public boolean maxValue(short value, short max) {
        return (value <= max);
    }","  public void test47()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Double double0 = Double.valueOf((double) 1);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Short short0 = (Short)shortValidator0.processParsedValue(double0, decimalFormat0);
      boolean boolean0 = shortValidator0.maxValue(short0, (short)1812);
}"
2320,"    public boolean minValue(short value, short min) {
        return (value >= min);
    }","  public void test48()  throws Throwable  {
      ShortValidator shortValidator0 = new ShortValidator();
      Short short0 = shortValidator0.validate(""EWW$#F#"", ""EWW$#F#"");
      // Undeclared exception!
      try { 
        shortValidator0.minValue(short0, (short)0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.ShortValidator"", e);
      }
  }"
2321,"    public Short validate(String value) {
        return (Short)parse(value, (String)null, (Locale)null);
    }","  public void test49()  throws Throwable  {
      ShortValidator shortValidator0 = ShortValidator.getInstance();
      Short short0 = shortValidator0.validate("""");
}"
2322,"    public boolean isValid(String value) {
        if (value == null) {
            return false;
        }

        URI uri; // ensure value is a valid URI
        try {
            uri = new URI(value);
        } catch (URISyntaxException e) {
            return false;
        }
        // OK, perfom additional validation

        String scheme = uri.getScheme();
        if (!isValidScheme(scheme)) {
            return false;
        }

        String authority = uri.getRawAuthority();
        if (""file"".equals(scheme) && (authority == null || """".equals(authority))) {// Special case - file: allows an empty authority
            return true; // this is a local file - nothing more to do here
        } else if (""file"".equals(scheme) && authority != null && authority.contains("":"")) {
            return false;
        } else {
            // Validate the authority
            if (!isValidAuthority(authority)) {
                return false;
            }
        }

        if (!isValidPath(uri.getRawPath())) {
            return false;
        }

        if (!isValidQuery(uri.getRawQuery())) {
            return false;
        }

        if (!isValidFragment(uri.getRawFragment())) {
            return false;
        }

        return true;
    }","  public void test0()  throws Throwable  {
      UrlValidator urlValidator0 = UrlValidator.getInstance();
      boolean boolean0 = urlValidator0.isValid(""//"");
}"
2323,"    protected boolean isValidFragment(String fragment) {
        if (fragment == null) {
            return true;
        }

        return isOff(NO_FRAGMENTS);
    }","  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ""},_k%8 FEqW$!8l+"";
      stringArray0[1] = ""fL$oT0p"";
      stringArray0[2] = ""@'znW!+a"";
      UrlValidator urlValidator0 = new UrlValidator(stringArray0, (RegexValidator) null, 1782L);
      boolean boolean0 = urlValidator0.isValidFragment(""@'znW!+a"");
}"
2324,"    protected int countToken(String token, String target) {
        int tokenIndex = 0;
        int count = 0;
        while (tokenIndex != -1) {
            tokenIndex = target.indexOf(token, tokenIndex);
            if (tokenIndex > -1) {
                tokenIndex++;
                count++;
            }
        }
        return count;
    }","  public void test2()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(""group"", true);
      DomainValidator domainValidator0 = DomainValidator.getInstance(false);
      UrlValidator urlValidator0 = new UrlValidator((String[]) null, regexValidator0, 0L, domainValidator0);
      int int0 = urlValidator0.countToken(""Hl$"", ""8)XnflZ<C*{E_A1r4#"");
}"
2325,"    protected int countToken(String token, String target) {
        int tokenIndex = 0;
        int count = 0;
        while (tokenIndex != -1) {
            tokenIndex = target.indexOf(token, tokenIndex);
            if (tokenIndex > -1) {
                tokenIndex++;
                count++;
            }
        }
        return count;
    }","  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ""d^.ni `P"";
      stringArray0[1] = ""vg"";
      stringArray0[2] = ""me"";
      stringArray0[3] = """";
      stringArray0[4] = ""Hq5?d`8^B"";
      stringArray0[5] = ""gTHg.'"";
      stringArray0[6] = """";
      RegexValidator regexValidator0 = new RegexValidator(""Hq5?d`8^B"");
      UrlValidator urlValidator0 = new UrlValidator(stringArray0, regexValidator0, 0L);
      // Undeclared exception!
      try { 
        urlValidator0.countToken(""::FFFF:(?:d{1,3}.){3}d{1,3}|[0-9a-fA-F:]+"", (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2326,"    public UrlValidator() {
        this(null);
    }","  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[5];
      RegexValidator regexValidator0 = new RegexValidator(""H70nT"", true);
      UrlValidator urlValidator0 = null;
      try {
        urlValidator0 = new UrlValidator(stringArray0, regexValidator0, 272L);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.UrlValidator"", e);
      }
  }"
2327,"    public UrlValidator() {
        this(null);
    }","  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[9];
      UrlValidator urlValidator0 = null;
      try {
        urlValidator0 = new UrlValidator(stringArray0, (-2090L));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.UrlValidator"", e);
      }
  }"
2328,"    public UrlValidator() {
        this(null);
    }","  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[5];
      UrlValidator urlValidator0 = null;
      try {
        urlValidator0 = new UrlValidator(stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.UrlValidator"", e);
      }
  }"
2329,"    public UrlValidator() {
        this(null);
    }","  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[4];
      RegexValidator regexValidator0 = new RegexValidator(""f;#k*CI GXx*Z0BO%;]"");
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      UrlValidator urlValidator0 = null;
      try {
        urlValidator0 = new UrlValidator(stringArray0, regexValidator0, 0L, domainValidator0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.UrlValidator"", e);
      }
  }"
2330,"    public UrlValidator() {
        this(null);
    }","  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ""b7=h;uaV>"";
      stringArray0[1] = ""/.."";
      stringArray0[2] = ""xS4p,^"";
      stringArray0[3] = ""hgtv"";
      RegexValidator regexValidator0 = new RegexValidator(stringArray0);
      DomainValidator domainValidator0 = DomainValidator.getInstance(false);
      UrlValidator urlValidator0 = new UrlValidator(stringArray0, regexValidator0, 1L, domainValidator0);
}"
2331,"    public UrlValidator() {
        this(null);
    }","  public void test9()  throws Throwable  {
      String[] stringArray0 = new String[0];
      UrlValidator urlValidator0 = new UrlValidator(stringArray0, (-1980L));
}"
2332,"    protected int countToken(String token, String target) {
        int tokenIndex = 0;
        int count = 0;
        while (tokenIndex != -1) {
            tokenIndex = target.indexOf(token, tokenIndex);
            if (tokenIndex > -1) {
                tokenIndex++;
                count++;
            }
        }
        return count;
    }","  public void test10()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      int int0 = urlValidator0.countToken(""e/"", ""e/"");
}"
2333,"    protected boolean isValidFragment(String fragment) {
        if (fragment == null) {
            return true;
        }

        return isOff(NO_FRAGMENTS);
    }","  public void test11()  throws Throwable  {
      UrlValidator urlValidator0 = UrlValidator.getInstance();
      boolean boolean0 = urlValidator0.isValidFragment((String) null);
}"
2334,"    protected boolean isValidFragment(String fragment) {
        if (fragment == null) {
            return true;
        }

        return isOff(NO_FRAGMENTS);
    }","  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ""d^.ni `P"";
      stringArray0[1] = ""vg"";
      stringArray0[2] = ""me"";
      stringArray0[3] = """";
      stringArray0[4] = ""Hq5?d`8^B"";
      stringArray0[5] = ""gTHg.'"";
      stringArray0[6] = """";
      RegexValidator regexValidator0 = new RegexValidator(""Hq5?d`8^B"");
      UrlValidator urlValidator0 = new UrlValidator(stringArray0, regexValidator0, 0L);
      boolean boolean0 = urlValidator0.isValidFragment("""");
}"
2335,"    protected boolean isValidQuery(String query) {
        if (query == null) {
            return true;
        }

        return QUERY_PATTERN.matcher(query).matches();
    }","  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ""d^.ni `P"";
      stringArray0[1] = ""vg"";
      stringArray0[2] = ""me"";
      stringArray0[3] = """";
      stringArray0[4] = ""Hq5?d`8^B"";
      stringArray0[5] = ""gTHg.'"";
      stringArray0[6] = """";
      RegexValidator regexValidator0 = new RegexValidator(""Hq5?d`8^B"");
      UrlValidator urlValidator0 = new UrlValidator(stringArray0, regexValidator0, 0L);
      boolean boolean0 = urlValidator0.isValidQuery((String) null);
}"
2336,"    protected boolean isValidPath(String path) {
        if (path == null) {
            return false;
        }

        if (!PATH_PATTERN.matcher(path).matches()) {
            return false;
        }

        try {
            // Don't omit host otherwise leading path may be taken as host if it starts with //
            URI uri = new URI(null,""localhost"",path,null);
            String norm = uri.normalize().getPath();
            if (norm.startsWith(""/../"") // Trying to go via the parent dir 
             || norm.equals(""/.."")) {   // Trying to go to the parent dir
                return false;
            }
        } catch (URISyntaxException e) {
            return false;
        }
        
        int slash2Count = countToken(""//"", path);
        if (isOff(ALLOW_2_SLASHES) && (slash2Count > 0)) {
            return false;
        }

        return true;
    }","  public void test14()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator((-1417L));
      boolean boolean0 = urlValidator0.isValidPath("""");
}"
2337,"    protected boolean isValidPath(String path) {
        if (path == null) {
            return false;
        }

        if (!PATH_PATTERN.matcher(path).matches()) {
            return false;
        }

        try {
            // Don't omit host otherwise leading path may be taken as host if it starts with //
            URI uri = new URI(null,""localhost"",path,null);
            String norm = uri.normalize().getPath();
            if (norm.startsWith(""/../"") // Trying to go via the parent dir 
             || norm.equals(""/.."")) {   // Trying to go to the parent dir
                return false;
            }
        } catch (URISyntaxException e) {
            return false;
        }
        
        int slash2Count = countToken(""//"", path);
        if (isOff(ALLOW_2_SLASHES) && (slash2Count > 0)) {
            return false;
        }

        return true;
    }","  public void test15()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      boolean boolean0 = urlValidator0.isValidPath((String) null);
}"
2338,"    protected boolean isValidPath(String path) {
        if (path == null) {
            return false;
        }

        if (!PATH_PATTERN.matcher(path).matches()) {
            return false;
        }

        try {
            // Don't omit host otherwise leading path may be taken as host if it starts with //
            URI uri = new URI(null,""localhost"",path,null);
            String norm = uri.normalize().getPath();
            if (norm.startsWith(""/../"") // Trying to go via the parent dir 
             || norm.equals(""/.."")) {   // Trying to go to the parent dir
                return false;
            }
        } catch (URISyntaxException e) {
            return false;
        }
        
        int slash2Count = countToken(""//"", path);
        if (isOff(ALLOW_2_SLASHES) && (slash2Count > 0)) {
            return false;
        }

        return true;
    }","  public void test16()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(""group"", true);
      DomainValidator domainValidator0 = DomainValidator.getInstance(false);
      UrlValidator urlValidator0 = new UrlValidator((String[]) null, regexValidator0, 0L, domainValidator0);
      boolean boolean0 = urlValidator0.isValidPath(""xn8as63slxuz"");
}"
2339,"    protected boolean isValidAuthority(String authority) {
        if (authority == null) {
            return false;
        }

        // check manual authority validation if specified
        if (authorityValidator != null && authorityValidator.isValid(authority)) {
            return true;
        }
        // convert to ASCII if possible
        final String authorityASCII = DomainValidator.unicodeToASCII(authority);

        Matcher authorityMatcher = AUTHORITY_PATTERN.matcher(authorityASCII);
        if (!authorityMatcher.matches()) {
            return false;
        }

        // We have to process IPV6 separately because that is parsed in a different group
        String ipv6 = authorityMatcher.group(PARSE_AUTHORITY_IPV6);
        if (ipv6 != null) {
            InetAddressValidator inetAddressValidator = InetAddressValidator.getInstance();
                if (!inetAddressValidator.isValidInet6Address(ipv6)) {
                    return false;
                }
        } else {
            String hostLocation = authorityMatcher.group(PARSE_AUTHORITY_HOST_IP);
            // check if authority is hostname or IP address:
            // try a hostname first since that's much more likely
            if (!this.domainValidator.isValid(hostLocation)) {
                // try an IPv4 address
                InetAddressValidator inetAddressValidator = InetAddressValidator.getInstance();
                if (!inetAddressValidator.isValidInet4Address(hostLocation)) {
                    // isn't IPv4, so the URL is invalid
                    return false;
                }
            }
            String port = authorityMatcher.group(PARSE_AUTHORITY_PORT);
            if (port != null && port.length() > 0) {
                try {
                    int iPort = Integer.parseInt(port);
                    if (iPort < 0 || iPort > MAX_UNSIGNED_16_BIT_INT) {
                        return false;
                    }
                } catch (NumberFormatException nfe) {
                    return false; // this can happen for big numbers
                }
            }
        }

        String extra = authorityMatcher.group(PARSE_AUTHORITY_EXTRA);
        if (extra != null && extra.trim().length() > 0){
            return false;
        }

        return true;
    }","  public void test17()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(""/../"");
      UrlValidator urlValidator0 = new UrlValidator(regexValidator0, 379L);
      boolean boolean0 = urlValidator0.isValidAuthority(""/../"");
}"
2340,"    protected boolean isValidAuthority(String authority) {
        if (authority == null) {
            return false;
        }

        // check manual authority validation if specified
        if (authorityValidator != null && authorityValidator.isValid(authority)) {
            return true;
        }
        // convert to ASCII if possible
        final String authorityASCII = DomainValidator.unicodeToASCII(authority);

        Matcher authorityMatcher = AUTHORITY_PATTERN.matcher(authorityASCII);
        if (!authorityMatcher.matches()) {
            return false;
        }

        // We have to process IPV6 separately because that is parsed in a different group
        String ipv6 = authorityMatcher.group(PARSE_AUTHORITY_IPV6);
        if (ipv6 != null) {
            InetAddressValidator inetAddressValidator = InetAddressValidator.getInstance();
                if (!inetAddressValidator.isValidInet6Address(ipv6)) {
                    return false;
                }
        } else {
            String hostLocation = authorityMatcher.group(PARSE_AUTHORITY_HOST_IP);
            // check if authority is hostname or IP address:
            // try a hostname first since that's much more likely
            if (!this.domainValidator.isValid(hostLocation)) {
                // try an IPv4 address
                InetAddressValidator inetAddressValidator = InetAddressValidator.getInstance();
                if (!inetAddressValidator.isValidInet4Address(hostLocation)) {
                    // isn't IPv4, so the URL is invalid
                    return false;
                }
            }
            String port = authorityMatcher.group(PARSE_AUTHORITY_PORT);
            if (port != null && port.length() > 0) {
                try {
                    int iPort = Integer.parseInt(port);
                    if (iPort < 0 || iPort > MAX_UNSIGNED_16_BIT_INT) {
                        return false;
                    }
                } catch (NumberFormatException nfe) {
                    return false; // this can happen for big numbers
                }
            }
        }

        String extra = authorityMatcher.group(PARSE_AUTHORITY_EXTRA);
        if (extra != null && extra.trim().length() > 0){
            return false;
        }

        return true;
    }","  public void test18()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      boolean boolean0 = urlValidator0.isValidAuthority("""");
}"
2341,"    protected boolean isValidAuthority(String authority) {
        if (authority == null) {
            return false;
        }

        // check manual authority validation if specified
        if (authorityValidator != null && authorityValidator.isValid(authority)) {
            return true;
        }
        // convert to ASCII if possible
        final String authorityASCII = DomainValidator.unicodeToASCII(authority);

        Matcher authorityMatcher = AUTHORITY_PATTERN.matcher(authorityASCII);
        if (!authorityMatcher.matches()) {
            return false;
        }

        // We have to process IPV6 separately because that is parsed in a different group
        String ipv6 = authorityMatcher.group(PARSE_AUTHORITY_IPV6);
        if (ipv6 != null) {
            InetAddressValidator inetAddressValidator = InetAddressValidator.getInstance();
                if (!inetAddressValidator.isValidInet6Address(ipv6)) {
                    return false;
                }
        } else {
            String hostLocation = authorityMatcher.group(PARSE_AUTHORITY_HOST_IP);
            // check if authority is hostname or IP address:
            // try a hostname first since that's much more likely
            if (!this.domainValidator.isValid(hostLocation)) {
                // try an IPv4 address
                InetAddressValidator inetAddressValidator = InetAddressValidator.getInstance();
                if (!inetAddressValidator.isValidInet4Address(hostLocation)) {
                    // isn't IPv4, so the URL is invalid
                    return false;
                }
            }
            String port = authorityMatcher.group(PARSE_AUTHORITY_PORT);
            if (port != null && port.length() > 0) {
                try {
                    int iPort = Integer.parseInt(port);
                    if (iPort < 0 || iPort > MAX_UNSIGNED_16_BIT_INT) {
                        return false;
                    }
                } catch (NumberFormatException nfe) {
                    return false; // this can happen for big numbers
                }
            }
        }

        String extra = authorityMatcher.group(PARSE_AUTHORITY_EXTRA);
        if (extra != null && extra.trim().length() > 0){
            return false;
        }

        return true;
    }","  public void test19()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(""/../"");
      UrlValidator urlValidator0 = new UrlValidator(regexValidator0, 379L);
      boolean boolean0 = urlValidator0.isValidAuthority("";:E@acw%.a"");
}"
2342,"    protected boolean isValidScheme(String scheme) {
        if (scheme == null) {
            return false;
        }

        if (!SCHEME_PATTERN.matcher(scheme).matches()) {
            return false;
        }

        if (isOff(ALLOW_ALL_SCHEMES) && !allowedSchemes.contains(scheme.toLowerCase(Locale.ENGLISH))) {
            return false;
        }

        return true;
    }","  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ""H;V"";
      stringArray0[1] = ""H;V"";
      stringArray0[2] = ""stdio"";
      UrlValidator urlValidator0 = new UrlValidator(stringArray0);
      boolean boolean0 = urlValidator0.isValidScheme(""l"");
}"
2343,"    protected boolean isValidScheme(String scheme) {
        if (scheme == null) {
            return false;
        }

        if (!SCHEME_PATTERN.matcher(scheme).matches()) {
            return false;
        }

        if (isOff(ALLOW_ALL_SCHEMES) && !allowedSchemes.contains(scheme.toLowerCase(Locale.ENGLISH))) {
            return false;
        }

        return true;
    }","  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ""H;V"";
      stringArray0[1] = ""H;V"";
      stringArray0[2] = ""stdio"";
      UrlValidator urlValidator0 = new UrlValidator(stringArray0);
      boolean boolean0 = urlValidator0.isValidScheme(""stdio"");
}"
2344,"    protected boolean isValidScheme(String scheme) {
        if (scheme == null) {
            return false;
        }

        if (!SCHEME_PATTERN.matcher(scheme).matches()) {
            return false;
        }

        if (isOff(ALLOW_ALL_SCHEMES) && !allowedSchemes.contains(scheme.toLowerCase(Locale.ENGLISH))) {
            return false;
        }

        return true;
    }","  public void test22()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(""/../"");
      UrlValidator urlValidator0 = new UrlValidator(regexValidator0, 379L);
      boolean boolean0 = urlValidator0.isValidScheme(""/../"");
}"
2345,"    public boolean isValid(String value) {
        if (value == null) {
            return false;
        }

        URI uri; // ensure value is a valid URI
        try {
            uri = new URI(value);
        } catch (URISyntaxException e) {
            return false;
        }
        // OK, perfom additional validation

        String scheme = uri.getScheme();
        if (!isValidScheme(scheme)) {
            return false;
        }

        String authority = uri.getRawAuthority();
        if (""file"".equals(scheme) && (authority == null || """".equals(authority))) {// Special case - file: allows an empty authority
            return true; // this is a local file - nothing more to do here
        } else if (""file"".equals(scheme) && authority != null && authority.contains("":"")) {
            return false;
        } else {
            // Validate the authority
            if (!isValidAuthority(authority)) {
                return false;
            }
        }

        if (!isValidPath(uri.getRawPath())) {
            return false;
        }

        if (!isValidQuery(uri.getRawQuery())) {
            return false;
        }

        if (!isValidFragment(uri.getRawFragment())) {
            return false;
        }

        return true;
    }","  public void test23()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(""group"", true);
      DomainValidator domainValidator0 = DomainValidator.getInstance(false);
      UrlValidator urlValidator0 = new UrlValidator((String[]) null, regexValidator0, 0L, domainValidator0);
      boolean boolean0 = urlValidator0.isValid(""group"");
}"
2346,"    public UrlValidator() {
        this(null);
    }","  public void test24()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(""I"");
      DomainValidator domainValidator0 = DomainValidator.getInstance();
      UrlValidator urlValidator0 = null;
      try {
        urlValidator0 = new UrlValidator((String[]) null, regexValidator0, (-1442L), domainValidator0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // DomainValidator disagrees with ALLOW_LOCAL_URLS setting
         //
         verifyException(""org.apache.commons.validator.routines.UrlValidator"", e);
      }
  }"
2347,"    public UrlValidator() {
        this(null);
    }","  public void test25()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(""4xKAO"", false);
      UrlValidator urlValidator0 = null;
      try {
        urlValidator0 = new UrlValidator((String[]) null, regexValidator0, (-23L), (DomainValidator) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // DomainValidator must not be null
         //
         verifyException(""org.apache.commons.validator.routines.UrlValidator"", e);
      }
  }"
2348,"    public boolean isValid(String value) {
        if (value == null) {
            return false;
        }

        URI uri; // ensure value is a valid URI
        try {
            uri = new URI(value);
        } catch (URISyntaxException e) {
            return false;
        }
        // OK, perfom additional validation

        String scheme = uri.getScheme();
        if (!isValidScheme(scheme)) {
            return false;
        }

        String authority = uri.getRawAuthority();
        if (""file"".equals(scheme) && (authority == null || """".equals(authority))) {// Special case - file: allows an empty authority
            return true; // this is a local file - nothing more to do here
        } else if (""file"".equals(scheme) && authority != null && authority.contains("":"")) {
            return false;
        } else {
            // Validate the authority
            if (!isValidAuthority(authority)) {
                return false;
            }
        }

        if (!isValidPath(uri.getRawPath())) {
            return false;
        }

        if (!isValidQuery(uri.getRawQuery())) {
            return false;
        }

        if (!isValidFragment(uri.getRawFragment())) {
            return false;
        }

        return true;
    }","  public void test26()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator();
      boolean boolean0 = urlValidator0.isValid((String) null);
}"
2349,"    public boolean isValid(String value) {
        if (value == null) {
            return false;
        }

        URI uri; // ensure value is a valid URI
        try {
            uri = new URI(value);
        } catch (URISyntaxException e) {
            return false;
        }
        // OK, perfom additional validation

        String scheme = uri.getScheme();
        if (!isValidScheme(scheme)) {
            return false;
        }

        String authority = uri.getRawAuthority();
        if (""file"".equals(scheme) && (authority == null || """".equals(authority))) {// Special case - file: allows an empty authority
            return true; // this is a local file - nothing more to do here
        } else if (""file"".equals(scheme) && authority != null && authority.contains("":"")) {
            return false;
        } else {
            // Validate the authority
            if (!isValidAuthority(authority)) {
                return false;
            }
        }

        if (!isValidPath(uri.getRawPath())) {
            return false;
        }

        if (!isValidQuery(uri.getRawQuery())) {
            return false;
        }

        if (!isValidFragment(uri.getRawFragment())) {
            return false;
        }

        return true;
    }","  public void test27()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator(""/../"");
      UrlValidator urlValidator0 = new UrlValidator(regexValidator0, 379L);
      boolean boolean0 = urlValidator0.isValid(""cdfW:Wh"");
}"
2350,"    protected boolean isValidPath(String path) {
        if (path == null) {
            return false;
        }

        if (!PATH_PATTERN.matcher(path).matches()) {
            return false;
        }

        try {
            // Don't omit host otherwise leading path may be taken as host if it starts with //
            URI uri = new URI(null,""localhost"",path,null);
            String norm = uri.normalize().getPath();
            if (norm.startsWith(""/../"") // Trying to go via the parent dir 
             || norm.equals(""/.."")) {   // Trying to go to the parent dir
                return false;
            }
        } catch (URISyntaxException e) {
            return false;
        }
        
        int slash2Count = countToken(""//"", path);
        if (isOff(ALLOW_2_SLASHES) && (slash2Count > 0)) {
            return false;
        }

        return true;
    }","  public void test28()  throws Throwable  {
      UrlValidator urlValidator0 = UrlValidator.getInstance();
      boolean boolean0 = urlValidator0.isValidPath("""");
}"
2351,"    protected int countToken(String token, String target) {
        int tokenIndex = 0;
        int count = 0;
        while (tokenIndex != -1) {
            tokenIndex = target.indexOf(token, tokenIndex);
            if (tokenIndex > -1) {
                tokenIndex++;
                count++;
            }
        }
        return count;
    }","  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[0];
      UrlValidator urlValidator0 = new UrlValidator(stringArray0);
      // Undeclared exception!
      urlValidator0.countToken("""", ""ftp"");
  }"
2352,"    public Validator setValidator(Validator validator) {
        if (this == DEFAULT_IBAN_VALIDATOR) {
            throw new IllegalStateException(""The singleton validator cannot be modified"");
        }
        return formatValidators.put(validator.countryCode, validator);
    }","  public void test0()  throws Throwable  {
      IBANValidator.Validator[] iBANValidator_ValidatorArray0 = new IBANValidator.Validator[0];
      IBANValidator iBANValidator0 = new IBANValidator(iBANValidator_ValidatorArray0);
      // Undeclared exception!
      try { 
        iBANValidator0.setValidator(""j[/?ygT`,"", 0, ""Ifu6$sE3n'JJ|kX"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid country Code; must be exactly 2 upper-case characters
         //
         verifyException(""org.apache.commons.validator.routines.IBANValidator$Validator"", e);
      }
  }"
2353,"    public boolean hasValidator(String code) {
        return getValidator(code) != null;
    }","  public void test1()  throws Throwable  {
      IBANValidator iBANValidator0 = IBANValidator.getInstance();
      boolean boolean0 = iBANValidator0.hasValidator(""01"");
}"
2354,"    public boolean isValid(String code) {
        Validator formatValidator = getValidator(code);
        if (formatValidator == null || code.length() != formatValidator.lengthOfIBAN || !formatValidator.validator.isValid(code)) {
            return false;
        }
        return IBANCheckDigit.IBAN_CHECK_DIGIT.isValid(code);
    }","  public void test2()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      boolean boolean0 = iBANValidator0.isValid(""NLNLd{2}[A-Z]{4}d{10}"");
}"
2355,"    public Validator setValidator(Validator validator) {
        if (this == DEFAULT_IBAN_VALIDATOR) {
            throw new IllegalStateException(""The singleton validator cannot be modified"");
        }
        return formatValidators.put(validator.countryCode, validator);
    }","  public void test3()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      IBANValidator.Validator iBANValidator_Validator0 = iBANValidator0.getValidator(""ROROd{2}[A-Z]{4}[A-Z0-9]{16}"");
      IBANValidator.Validator iBANValidator_Validator1 = iBANValidator0.setValidator(iBANValidator_Validator0);
}"
2356,"    public Validator setValidator(Validator validator) {
        if (this == DEFAULT_IBAN_VALIDATOR) {
            throw new IllegalStateException(""The singleton validator cannot be modified"");
        }
        return formatValidators.put(validator.countryCode, validator);
    }","  public void test4()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      IBANValidator.Validator iBANValidator_Validator0 = iBANValidator0.setValidator(""FI"", (-1), ""j[/?ygT`,"");
}"
2357,"    public Validator setValidator(Validator validator) {
        if (this == DEFAULT_IBAN_VALIDATOR) {
            throw new IllegalStateException(""The singleton validator cannot be modified"");
        }
        return formatValidators.put(validator.countryCode, validator);
    }","  public void test5()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      // Undeclared exception!
      try { 
        iBANValidator0.setValidator((IBANValidator.Validator) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.IBANValidator"", e);
      }
  }"
2358,"    public Validator setValidator(Validator validator) {
        if (this == DEFAULT_IBAN_VALIDATOR) {
            throw new IllegalStateException(""The singleton validator cannot be modified"");
        }
        return formatValidators.put(validator.countryCode, validator);
    }","  public void test6()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      // Undeclared exception!
      try { 
        iBANValidator0.setValidator((String) null, 68, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.IBANValidator$Validator"", e);
      }
  }"
2359,"    public IBANValidator() {
        this(DEFAULT_FORMATS);
    }","  public void test7()  throws Throwable  {
      IBANValidator.Validator[] iBANValidator_ValidatorArray0 = new IBANValidator.Validator[7];
      IBANValidator iBANValidator0 = null;
      try {
        iBANValidator0 = new IBANValidator(iBANValidator_ValidatorArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.IBANValidator"", e);
      }
  }"
2360,"    public Validator getValidator(String code) {
        if (code == null || code.length() < 2) { // ensure we can extract the code
            return null;
        }
        String key = code.substring(0, 2);
        return formatValidators.get(key);
    }","  public void test8()  throws Throwable  {
      IBANValidator iBANValidator0 = IBANValidator.getInstance();
      IBANValidator.Validator iBANValidator_Validator0 = iBANValidator0.getValidator(""y"");
}"
2361,"    public Validator getValidator(String code) {
        if (code == null || code.length() < 2) { // ensure we can extract the code
            return null;
        }
        String key = code.substring(0, 2);
        return formatValidators.get(key);
    }","  public void test9()  throws Throwable  {
      IBANValidator iBANValidator0 = IBANValidator.getInstance();
      IBANValidator.Validator iBANValidator_Validator0 = iBANValidator0.getValidator((String) null);
}"
2362,"    public boolean isValid(String code) {
        Validator formatValidator = getValidator(code);
        if (formatValidator == null || code.length() != formatValidator.lengthOfIBAN || !formatValidator.validator.isValid(code)) {
            return false;
        }
        return IBANCheckDigit.IBAN_CHECK_DIGIT.isValid(code);
    }","  public void test10()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      boolean boolean0 = iBANValidator0.DEFAULT_IBAN_VALIDATOR.isValid(""QAQAd{2}[A-Z]{4}[A-Z0-9]{21}"");
}"
2363,"    public IBANValidator() {
        this(DEFAULT_FORMATS);
    }","  public void test11()  throws Throwable  {
      IBANValidator.Validator iBANValidator_Validator0 = null;
      try {
        iBANValidator_Validator0 = new IBANValidator.Validator(""M"", 925, ""l8ML"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid country Code; must be exactly 2 upper-case characters
         //
         verifyException(""org.apache.commons.validator.routines.IBANValidator$Validator"", e);
      }
  }"
2364,"    public IBANValidator() {
        this(DEFAULT_FORMATS);
    }","  public void test12()  throws Throwable  {
      IBANValidator.Validator iBANValidator_Validator0 = null;
      try {
        iBANValidator_Validator0 = new IBANValidator.Validator(""ESbd{22}"", 570, ""ESbd{22}"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid country Code; must be exactly 2 upper-case characters
         //
         verifyException(""org.apache.commons.validator.routines.IBANValidator$Validator"", e);
      }
  }"
2365,"    public Validator setValidator(Validator validator) {
        if (this == DEFAULT_IBAN_VALIDATOR) {
            throw new IllegalStateException(""The singleton validator cannot be modified"");
        }
        return formatValidators.put(validator.countryCode, validator);
    }","  public void test13()  throws Throwable  {
      IBANValidator.Validator[] iBANValidator_ValidatorArray0 = new IBANValidator.Validator[0];
      IBANValidator iBANValidator0 = new IBANValidator(iBANValidator_ValidatorArray0);
      IBANValidator.Validator iBANValidator_Validator0 = iBANValidator0.setValidator(""M"", (-1), ""'"");
}"
2366,"    public Validator setValidator(Validator validator) {
        if (this == DEFAULT_IBAN_VALIDATOR) {
            throw new IllegalStateException(""The singleton validator cannot be modified"");
        }
        return formatValidators.put(validator.countryCode, validator);
    }","  public void test14()  throws Throwable  {
      IBANValidator iBANValidator0 = IBANValidator.getInstance();
      // Undeclared exception!
      try { 
        iBANValidator0.setValidator((String) null, 2463, (String) null);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // The singleton validator cannot be modified
         //
         verifyException(""org.apache.commons.validator.routines.IBANValidator"", e);
      }
  }"
2367,"    public Validator setValidator(Validator validator) {
        if (this == DEFAULT_IBAN_VALIDATOR) {
            throw new IllegalStateException(""The singleton validator cannot be modified"");
        }
        return formatValidators.put(validator.countryCode, validator);
    }","  public void test15()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      IBANValidator.Validator iBANValidator_Validator0 = new IBANValidator.Validator(""GR"", 9, ""GR"");
      // Undeclared exception!
      try { 
        iBANValidator0.DEFAULT_IBAN_VALIDATOR.setValidator(iBANValidator_Validator0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // The singleton validator cannot be modified
         //
         verifyException(""org.apache.commons.validator.routines.IBANValidator"", e);
      }
  }"
2368,"    public Validator setValidator(Validator validator) {
        if (this == DEFAULT_IBAN_VALIDATOR) {
            throw new IllegalStateException(""The singleton validator cannot be modified"");
        }
        return formatValidators.put(validator.countryCode, validator);
    }","  public void test16()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      IBANValidator.Validator iBANValidator_Validator0 = new IBANValidator.Validator(""FG"", 9, ""FG"");
      IBANValidator.Validator iBANValidator_Validator1 = iBANValidator0.setValidator(iBANValidator_Validator0);
}"
2369,"    public boolean isValid(String code) {
        Validator formatValidator = getValidator(code);
        if (formatValidator == null || code.length() != formatValidator.lengthOfIBAN || !formatValidator.validator.isValid(code)) {
            return false;
        }
        return IBANCheckDigit.IBAN_CHECK_DIGIT.isValid(code);
    }","  public void test17()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      boolean boolean0 = iBANValidator0.isValid(""0"");
}"
2370,"    public boolean hasValidator(String code) {
        return getValidator(code) != null;
    }","  public void test18()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      boolean boolean0 = iBANValidator0.hasValidator(""IQIQd{2}[A-Z]{4}d{15}"");
}"
2371,"    public IBANValidator() {
        this(DEFAULT_FORMATS);
    }","  public void test19()  throws Throwable  {
      IBANValidator.Validator iBANValidator_Validator0 = null;
      try {
        iBANValidator_Validator0 = new IBANValidator.Validator(""IL"", 12, ""SASAd{4}[A-Z0-9]{18}"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // countryCode 'IL' does not agree with format: SASAd{4}[A-Z0-9]{18}
         //
         verifyException(""org.apache.commons.validator.routines.IBANValidator$Validator"", e);
      }
  }"
2372,"    public IBANValidator() {
        this(DEFAULT_FORMATS);
    }","  public void test20()  throws Throwable  {
      IBANValidator.Validator iBANValidator_Validator0 = null;
      try {
        iBANValidator_Validator0 = new IBANValidator.Validator(""IL"", (-1410), ""SASAd{4}[A-Z0-9]{18}"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid length parameter, must be in range 8 to 34 inclusive: -1410
         //
         verifyException(""org.apache.commons.validator.routines.IBANValidator$Validator"", e);
      }
  }"
2373,"    public IBANValidator() {
        this(DEFAULT_FORMATS);
    }","  public void test21()  throws Throwable  {
      IBANValidator.Validator iBANValidator_Validator0 = null;
      try {
        iBANValidator_Validator0 = new IBANValidator.Validator(""PL"", 873, ""PL"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid length parameter, must be in range 8 to 34 inclusive: 873
         //
         verifyException(""org.apache.commons.validator.routines.IBANValidator$Validator"", e);
      }
  }"
2374,"    public IBANValidator() {
        this(DEFAULT_FORMATS);
    }","  public void test22()  throws Throwable  {
      IBANValidator.Validator iBANValidator_Validator0 = null;
      try {
        iBANValidator_Validator0 = new IBANValidator.Validator(""9q"", 1160, ""9q"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid country Code; must be exactly 2 upper-case characters
         //
         verifyException(""org.apache.commons.validator.routines.IBANValidator$Validator"", e);
      }
  }"
2375,"    public Validator[] getDefaultValidators() {
        return Arrays.copyOf(DEFAULT_FORMATS, DEFAULT_FORMATS.length);
    }","  public void test23()  throws Throwable  {
      IBANValidator iBANValidator0 = new IBANValidator();
      IBANValidator.Validator[] iBANValidator_ValidatorArray0 = iBANValidator0.getDefaultValidators();
}"
2376,"    public boolean maxValue(BigInteger value, long max) {
        return (value.longValue() <= max);
    }","  public void test0()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator(true, (-1307));
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = bigIntegerValidator0.maxValue(bigInteger0, 1724L);
}"
2377,"    public boolean isInRange(BigInteger value, long min, long max) {
        return (value.longValue() >= min && value.longValue() <= max);
    }","  public void test1()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator(false, 1995);
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = bigIntegerValidator0.isInRange(bigInteger0, 0L, 915L);
}"
2378,"    public boolean isInRange(BigInteger value, long min, long max) {
        return (value.longValue() >= min && value.longValue() <= max);
    }","  public void test2()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator(true, (-1307));
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = bigIntegerValidator0.isInRange(bigInteger0, 1L, (-2497L));
}"
2379,"    public BigInteger validate(String value) {
        return (BigInteger)parse(value, (String)null, (Locale)null);
    }","  public void test3()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      Locale locale0 = new Locale("">um5RuCPVzr"", "">um5RuCPVzr"");
      BigInteger bigInteger0 = bigIntegerValidator0.validate(""0"", locale0);
}"
2380,"    public boolean minValue(BigInteger value, long min) {
        return (value.longValue() >= min);
    }","  public void test4()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator(false, 0);
      Locale locale0 = Locale.KOREAN;
      BigInteger bigInteger0 = bigIntegerValidator0.validate(""9DV>OB1w0,~{OQ'"", locale0);
      boolean boolean0 = bigIntegerValidator0.minValue(bigInteger0, (-1L));
}"
2381,"    public BigInteger validate(String value) {
        return (BigInteger)parse(value, (String)null, (Locale)null);
    }","  public void test5()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator(true, (-1307));
      Locale locale0 = Locale.FRENCH;
      BigInteger bigInteger0 = bigIntegerValidator0.validate(""-1"", locale0);
}"
2382,"    public BigInteger validate(String value) {
        return (BigInteger)parse(value, (String)null, (Locale)null);
    }","  public void test6()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = BigIntegerValidator.getInstance();
      Locale locale0 = Locale.FRANCE;
      BigInteger bigInteger0 = bigIntegerValidator0.validate(""%c p[`@0"", ""%c p[`@0"", locale0);
}"
2383,"    public BigInteger validate(String value) {
        return (BigInteger)parse(value, (String)null, (Locale)null);
    }","  public void test7()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator(false, (-1274));
      Locale locale0 = Locale.GERMANY;
      BigInteger bigInteger0 = bigIntegerValidator0.validate(""1COTfR<$C"", """", locale0);
}"
2384,"    public BigInteger validate(String value) {
        return (BigInteger)parse(value, (String)null, (Locale)null);
    }","  public void test8()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = BigIntegerValidator.getInstance();
      Locale locale0 = Locale.UK;
      BigInteger bigInteger0 = bigIntegerValidator0.validate(""-1,033"", (String) null, locale0);
}"
2385,"    public BigInteger validate(String value) {
        return (BigInteger)parse(value, (String)null, (Locale)null);
    }","  public void test9()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = BigIntegerValidator.getInstance();
      BigInteger bigInteger0 = bigIntegerValidator0.validate(""A^D$80mWR}uj>@g"", ""A^D$80mWR}uj>@g"");
}"
2386,"    public BigInteger validate(String value) {
        return (BigInteger)parse(value, (String)null, (Locale)null);
    }","  public void test10()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      BigInteger bigInteger0 = bigIntegerValidator0.validate(""2"", """");
}"
2387,"    public BigInteger validate(String value) {
        return (BigInteger)parse(value, (String)null, (Locale)null);
    }","  public void test11()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = BigIntegerValidator.getInstance();
      BigInteger bigInteger0 = bigIntegerValidator0.validate(""-1,033"", """");
}"
2388,"    public BigInteger validate(String value) {
        return (BigInteger)parse(value, (String)null, (Locale)null);
    }","  public void test12()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      BigInteger bigInteger0 = bigIntegerValidator0.validate(""0"");
}"
2389,"    public BigInteger validate(String value) {
        return (BigInteger)parse(value, (String)null, (Locale)null);
    }","  public void test13()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator(true, 1000);
      BigInteger bigInteger0 = bigIntegerValidator0.validate(""10"");
}"
2390,"    public BigInteger validate(String value) {
        return (BigInteger)parse(value, (String)null, (Locale)null);
    }","  public void test14()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator(false, 1995);
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        bigIntegerValidator0.validate(""org.apache.commons.validator.routines.AbstractFormatValidator"", ""org.apache.commons.validator.routines.AbstractFormatValidator"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \""org.apache.commons.validator.routines.AbstractFormatValidator\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
2391,"    public BigInteger validate(String value) {
        return (BigInteger)parse(value, (String)null, (Locale)null);
    }","  public void test15()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator(true, (-4354));
      // Undeclared exception!
      try { 
        bigIntegerValidator0.validate(""org.apache.commons.validator.routines.AbstractFormatValidator"", ""org.apache.commons.validator.routines.AbstractFormatValidator"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \""org.apache.commons.validator.routines.AbstractFormatValidator\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
2392,"    protected Object processParsedValue(Object value, Format formatter) {
        return BigInteger.valueOf(((Number)value).longValue());
    }","  public void test16()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator(true, (-1));
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      // Undeclared exception!
      try { 
        bigIntegerValidator0.processParsedValue((Object) null, numberFormat0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.BigIntegerValidator"", e);
      }
  }"
2393,"    protected Object processParsedValue(Object value, Format formatter) {
        return BigInteger.valueOf(((Number)value).longValue());
    }","  public void test17()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      Locale locale0 = Locale.ITALIAN;
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance(1, 0);
      // Undeclared exception!
      try { 
        bigIntegerValidator0.processParsedValue(locale0, dateFormat0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to java.lang.Number
         //
         verifyException(""org.apache.commons.validator.routines.BigIntegerValidator"", e);
      }
  }"
2394,"    public boolean minValue(BigInteger value, long min) {
        return (value.longValue() >= min);
    }","  public void test18()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = BigIntegerValidator.getInstance();
      // Undeclared exception!
      try { 
        bigIntegerValidator0.minValue((BigInteger) null, 241L);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.BigIntegerValidator"", e);
      }
  }"
2395,"    public boolean maxValue(BigInteger value, long max) {
        return (value.longValue() <= max);
    }","  public void test19()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      // Undeclared exception!
      try { 
        bigIntegerValidator0.maxValue((BigInteger) null, (-37L));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.BigIntegerValidator"", e);
      }
  }"
2396,"    public boolean isInRange(BigInteger value, long min, long max) {
        return (value.longValue() >= min && value.longValue() <= max);
    }","  public void test20()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator(true, 692);
      // Undeclared exception!
      try { 
        bigIntegerValidator0.isInRange((BigInteger) null, (long) 692, (long) 692);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.BigIntegerValidator"", e);
      }
  }"
2397,"    public BigInteger validate(String value) {
        return (BigInteger)parse(value, (String)null, (Locale)null);
    }","  public void test21()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator(true, (-1307));
      BigInteger bigInteger0 = bigIntegerValidator0.validate(""-1"");
}"
2398,"    public boolean maxValue(BigInteger value, long max) {
        return (value.longValue() <= max);
    }","  public void test22()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = bigIntegerValidator0.maxValue(bigInteger0, (long) 0);
}"
2399,"    public boolean maxValue(BigInteger value, long max) {
        return (value.longValue() <= max);
    }","  public void test23()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = bigIntegerValidator0.maxValue(bigInteger0, (long) 2);
}"
2400,"    public boolean minValue(BigInteger value, long min) {
        return (value.longValue() >= min);
    }","  public void test24()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = bigIntegerValidator0.minValue(bigInteger0, (long) 0);
}"
2401,"    public boolean minValue(BigInteger value, long min) {
        return (value.longValue() >= min);
    }","  public void test25()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = BigIntegerValidator.getInstance();
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = bigIntegerValidator0.minValue(bigInteger0, (long) 2);
}"
2402,"    public boolean isInRange(BigInteger value, long min, long max) {
        return (value.longValue() >= min && value.longValue() <= max);
    }","  public void test26()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = bigIntegerValidator0.isInRange(bigInteger0, (long) 2, (long) 2);
}"
2403,"    public boolean isInRange(BigInteger value, long min, long max) {
        return (value.longValue() >= min && value.longValue() <= max);
    }","  public void test27()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = bigIntegerValidator0.isInRange(bigInteger0, (long) 0, (long) 0);
}"
2404,"    public boolean isInRange(BigInteger value, long min, long max) {
        return (value.longValue() >= min && value.longValue() <= max);
    }","  public void test28()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = bigIntegerValidator0.isInRange(bigInteger0, (long) 2, (long) 2);
}"
2405,"    public BigInteger validate(String value) {
        return (BigInteger)parse(value, (String)null, (Locale)null);
    }","  public void test29()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = BigIntegerValidator.getInstance();
      Locale locale0 = Locale.GERMANY;
      BigInteger bigInteger0 = bigIntegerValidator0.validate(""$/l6IZ-w<fQyK=I"", "",_ih&V5(MN0_O9"", locale0);
}"
2406,"    public BigInteger validate(String value) {
        return (BigInteger)parse(value, (String)null, (Locale)null);
    }","  public void test30()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      BigInteger bigInteger0 = bigIntegerValidator0.validate("">um5nuCPVzr"", "">um5nuCPVzr"");
}"
2407,"    protected Object processParsedValue(Object value, Format formatter) {
        return BigInteger.valueOf(((Number)value).longValue());
    }","  public void test31()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      Float float0 = new Float((float) 2);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      BigInteger bigInteger0 = (BigInteger)bigIntegerValidator0.processParsedValue(float0, decimalFormat0);
}"
2408,"    public BigInteger validate(String value) {
        return (BigInteger)parse(value, (String)null, (Locale)null);
    }","  public void test32()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = BigIntegerValidator.getInstance();
      Locale locale0 = Locale.GERMANY;
      BigInteger bigInteger0 = bigIntegerValidator0.validate(""}P*iqxS!CCZ}D:"", locale0);
}"
2409,"    public BigInteger validate(String value) {
        return (BigInteger)parse(value, (String)null, (Locale)null);
    }","  public void test33()  throws Throwable  {
      BigIntegerValidator bigIntegerValidator0 = new BigIntegerValidator();
      BigInteger bigInteger0 = bigIntegerValidator0.validate(""org.apache.commons.validator.routines.BigIntegerValidator"");
}"
2410,"    protected Object processParsedValue(Object value, Format formatter) {

        // Parsed value will be Long if it fits in a long and is not fractional
        if (value instanceof Long) {
            long longValue = ((Long)value).longValue();
            if (longValue >= Integer.MIN_VALUE && 
                longValue <= Integer.MAX_VALUE) {
                return Integer.valueOf((int)longValue);
            }
        }
        return null;
    }","  public void test0()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(false, 2392);
      Long long0 = new Long((-2147483648L));
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_LOCAL_TIME;
      TemporalQuery<Long> temporalQuery0 = (TemporalQuery<Long>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      Format format0 = dateTimeFormatter0.toFormat(temporalQuery0);
      Object object0 = integerValidator0.processParsedValue(long0, format0);
}"
2411,"    public boolean maxValue(int value, int max) {
        return (value <= max);
    }","  public void test1()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      boolean boolean0 = integerValidator0.maxValue(0, 0);
}"
2412,"    public boolean isInRange(int value, int min, int max) {
        return (value >= min && value <= max);
    }","  public void test2()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      boolean boolean0 = integerValidator0.isInRange((Integer) integerValidator0.STANDARD_FORMAT, (-1), (-1));
}"
2413,"    public boolean isInRange(int value, int min, int max) {
        return (value >= min && value <= max);
    }","  public void test3()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Integer integer0 = new Integer(0);
      boolean boolean0 = integerValidator0.isInRange(integer0, 0, 2);
}"
2414,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test4()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Locale locale0 = Locale.ITALIAN;
      Integer integer0 = integerValidator0.validate(""0"", locale0);
}"
2415,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test5()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      Locale locale0 = Locale.PRC;
      Integer integer0 = integerValidator0.validate(""7"", locale0);
}"
2416,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test6()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      Locale locale0 = Locale.PRC;
      Integer integer0 = integerValidator0.validate(""7"", locale0);
}"
2417,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test7()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(false, (-2575));
      Locale locale0 = Locale.FRANCE;
      Integer integer0 = integerValidator0.validate(""-2\u00A0575"", locale0);
}"
2418,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test8()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(false, (-2575));
      Locale locale0 = Locale.FRANCE;
      Integer integer0 = integerValidator0.validate(""-2\u00A0575"", locale0);
}"
2419,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test9()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Integer integer0 = integerValidator0.validate(""P5l"", ""P5l"", locale0);
}"
2420,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test10()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      Locale locale0 = Locale.KOREAN;
      Integer integer0 = integerValidator0.validate(""1,606"", ""1,606"", locale0);
}"
2421,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test11()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      Locale locale0 = Locale.KOREAN;
      Integer integer0 = integerValidator0.validate(""1,606"", ""1,606"", locale0);
}"
2422,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test12()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Locale locale0 = Locale.ROOT;
      Integer integer0 = integerValidator0.validate(""0"", (String) null, locale0);
}"
2423,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test13()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Integer integer0 = integerValidator0.validate(""4,294,964,720"", ""4,294,964,720"", locale0);
}"
2424,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test14()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Integer integer0 = integerValidator0.validate(""4,294,964,720"", ""4,294,964,720"", locale0);
}"
2425,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test15()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Locale locale0 = Locale.CANADA;
      Integer integer0 = integerValidator0.validate(""1005"", """", locale0);
}"
2426,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test16()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Locale locale0 = Locale.CANADA;
      Integer integer0 = integerValidator0.validate(""1005"", """", locale0);
}"
2427,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test17()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Integer integer0 = integerValidator0.validate(""org.apache.commons.validator.routines.AbstractFormatValidator"", ""1005"");
}"
2428,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test18()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Integer integer0 = integerValidator0.validate(""{EkycE0&WGtr<"", ""{EkycE0&WGtr<"");
}"
2429,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test19()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(false, 663);
      Integer integer0 = integerValidator0.validate(""7/?aozAc_p'<=qYh "", (String) null);
}"
2430,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test20()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(false, 663);
      Integer integer0 = integerValidator0.validate(""7/?aozAc_p'<=qYh "", (String) null);
}"
2431,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test21()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      Integer integer0 = integerValidator0.validate(""-2,105,376,124"");
}"
2432,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test22()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      Integer integer0 = integerValidator0.validate(""-2,105,376,124"");
}"
2433,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test23()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Integer integer0 = integerValidator0.validate(""0"");
}"
2434,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test24()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Integer integer0 = integerValidator0.validate(""-2,013,265,919"");
}"
2435,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test25()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Integer integer0 = integerValidator0.validate(""-2,013,265,919"");
}"
2436,"    protected Object processParsedValue(Object value, Format formatter) {

        // Parsed value will be Long if it fits in a long and is not fractional
        if (value instanceof Long) {
            long longValue = ((Long)value).longValue();
            if (longValue >= Integer.MIN_VALUE && 
                longValue <= Integer.MAX_VALUE) {
                return Integer.valueOf((int)longValue);
            }
        }
        return null;
    }","  public void test26()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      Long long0 = new Long(2147483647L);
      Locale locale0 = Locale.JAPAN;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      Object object0 = integerValidator0.processParsedValue(long0, numberFormat0);
}"
2437,"    protected Object processParsedValue(Object value, Format formatter) {

        // Parsed value will be Long if it fits in a long and is not fractional
        if (value instanceof Long) {
            long longValue = ((Long)value).longValue();
            if (longValue >= Integer.MIN_VALUE && 
                longValue <= Integer.MAX_VALUE) {
                return Integer.valueOf((int)longValue);
            }
        }
        return null;
    }","  public void test27()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      Long long0 = new Long(2147483647L);
      Locale locale0 = Locale.JAPAN;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      Object object0 = integerValidator0.processParsedValue(long0, numberFormat0);
}"
2438,"    public boolean isInRange(int value, int min, int max) {
        return (value >= min && value <= max);
    }","  public void test28()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      boolean boolean0 = integerValidator0.isInRange((Integer) integerValidator0.PERCENT_FORMAT, 0, 2);
}"
2439,"    public boolean minValue(int value, int min) {
        return (value >= min);
    }","  public void test29()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      // Undeclared exception!
      try { 
        integerValidator0.minValue((Integer) null, 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.IntegerValidator"", e);
      }
  }"
2440,"    public boolean maxValue(int value, int max) {
        return (value <= max);
    }","  public void test30()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      // Undeclared exception!
      try { 
        integerValidator0.maxValue((Integer) null, 131);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.IntegerValidator"", e);
      }
  }"
2441,"    public boolean isInRange(int value, int min, int max) {
        return (value >= min && value <= max);
    }","  public void test31()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(true, (-2313));
      // Undeclared exception!
      try { 
        integerValidator0.isInRange((Integer) null, 0, 1248);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.IntegerValidator"", e);
      }
  }"
2442,"    public boolean maxValue(int value, int max) {
        return (value <= max);
    }","  public void test32()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      boolean boolean0 = integerValidator0.maxValue(2112, 0);
}"
2443,"    public boolean maxValue(int value, int max) {
        return (value <= max);
    }","  public void test33()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      boolean boolean0 = integerValidator0.maxValue((-1), 1528);
}"
2444,"    public boolean minValue(int value, int min) {
        return (value >= min);
    }","  public void test34()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      boolean boolean0 = integerValidator0.minValue(1223, 1223);
}"
2445,"    public boolean minValue(int value, int min) {
        return (value >= min);
    }","  public void test35()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(true, (-2048));
      boolean boolean0 = integerValidator0.minValue((-2048), (-93));
}"
2446,"    public boolean isInRange(int value, int min, int max) {
        return (value >= min && value <= max);
    }","  public void test36()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      boolean boolean0 = integerValidator0.isInRange(2, 1005, 2);
}"
2447,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test37()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Integer integer0 = integerValidator0.validate(""1005"");
}"
2448,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test38()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Integer integer0 = integerValidator0.validate(""1005"");
}"
2449,"    protected Object processParsedValue(Object value, Format formatter) {

        // Parsed value will be Long if it fits in a long and is not fractional
        if (value instanceof Long) {
            long longValue = ((Long)value).longValue();
            if (longValue >= Integer.MIN_VALUE && 
                longValue <= Integer.MAX_VALUE) {
                return Integer.valueOf((int)longValue);
            }
        }
        return null;
    }","  public void test39()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      Long long0 = new Long((-2147483653L));
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Object object0 = integerValidator0.processParsedValue(long0, decimalFormat0);
}"
2450,"    protected Object processParsedValue(Object value, Format formatter) {

        // Parsed value will be Long if it fits in a long and is not fractional
        if (value instanceof Long) {
            long longValue = ((Long)value).longValue();
            if (longValue >= Integer.MIN_VALUE && 
                longValue <= Integer.MAX_VALUE) {
                return Integer.valueOf((int)longValue);
            }
        }
        return null;
    }","  public void test40()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Object object0 = integerValidator0.processParsedValue(integerValidator0, mockSimpleDateFormat0);
}"
2451,"    public boolean maxValue(int value, int max) {
        return (value <= max);
    }","  public void test41()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(true, (-2575));
      Integer integer0 = new Integer((-2575));
      boolean boolean0 = integerValidator0.maxValue(integer0, (-1269));
}"
2452,"    public boolean minValue(int value, int min) {
        return (value >= min);
    }","  public void test42()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      boolean boolean0 = integerValidator0.minValue((Integer) 2, 0);
}"
2453,"    public boolean isInRange(int value, int min, int max) {
        return (value >= min && value <= max);
    }","  public void test43()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      boolean boolean0 = integerValidator0.isInRange(2, (-2563), 2);
}"
2454,"    public boolean isInRange(int value, int min, int max) {
        return (value >= min && value <= max);
    }","  public void test44()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      boolean boolean0 = integerValidator0.isInRange(2, 1, 1);
}"
2455,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test45()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator();
      Integer integer0 = integerValidator0.validate(""4294964733"");
}"
2456,"    public boolean maxValue(int value, int max) {
        return (value <= max);
    }","  public void test46()  throws Throwable  {
      IntegerValidator integerValidator0 = new IntegerValidator(true, (-2575));
      boolean boolean0 = integerValidator0.maxValue((Integer) integerValidator0.CURRENCY_FORMAT, (-1269));
}"
2457,"    public boolean minValue(int value, int min) {
        return (value >= min);
    }","  public void test47()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      boolean boolean0 = integerValidator0.minValue((Integer) 0, 2);
}"
2458,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test48()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      // Undeclared exception!
      try { 
        integerValidator0.validate(""}A,1)pzSB`@HV"", ""}A,1)pzSB`@HV"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \""}A,1)pzSB`@HV\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
2459,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test49()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Locale locale0 = Locale.forLanguageTag(""org.apac{e.commons.validator.routines.AbstractForWatValiJator"");
      Integer integer0 = integerValidator0.validate(""org.apac{e.commons.validator.routines.AbstractForWatValiJator"", locale0);
}"
2460,"    public Integer validate(String value) {
        return (Integer)parse(value, (String)null, (Locale)null);
    }","  public void test50()  throws Throwable  {
      IntegerValidator integerValidator0 = IntegerValidator.getInstance();
      Locale locale0 = Locale.forLanguageTag(""org.apac{e.commons.validator.routines.AbstractForWatValiJator"");
      // Undeclared exception!
      try { 
        integerValidator0.validate(""org.apac{e.commons.validator.routines.AbstractForWatValiJator"", ""org.apac{e.commons.validator.routines.AbstractForWatValiJator"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \""org.apac{e.commons.validator.routines.AbstractForWatValiJator\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
2461,"    public boolean isInRange(double value, double min, double max) {
        return (value >= min && value <= max);
    }","  public void test0()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      boolean boolean0 = doubleValidator0.isInRange((-2918.89), (-2918.89), (-1.0));
}"
2462,"    public Double validate(String value) {
        return (Double)parse(value, (String)null, (Locale)null);
    }","  public void test1()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Double double0 = doubleValidator0.validate(""0"", locale0);
}"
2463,"    public Double validate(String value) {
        return (Double)parse(value, (String)null, (Locale)null);
    }","  public void test2()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      Locale locale0 = Locale.forLanguageTag(""\""G>$bVnY#9PqCL("");
      Double double0 = doubleValidator0.validate(""526"", locale0);
}"
2464,"    public Double validate(String value) {
        return (Double)parse(value, (String)null, (Locale)null);
    }","  public void test3()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Double double0 = doubleValidator0.validate(""-355"", locale0);
}"
2465,"    public Double validate(String value) {
        return (Double)parse(value, (String)null, (Locale)null);
    }","  public void test4()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Locale locale0 = Locale.ENGLISH;
      Double double0 = doubleValidator0.validate(""`T0"", ""`T0"", locale0);
}"
2466,"    public Double validate(String value) {
        return (Double)parse(value, (String)null, (Locale)null);
    }","  public void test5()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      Locale locale0 = Locale.forLanguageTag(""\""G>$bVnY#9PqCL("");
      Double double0 = doubleValidator0.validate(""526"", """", locale0);
}"
2467,"    public Double validate(String value) {
        return (Double)parse(value, (String)null, (Locale)null);
    }","  public void test6()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Double double0 = doubleValidator0.validate(""899.6"", """", locale0);
}"
2468,"    public Double validate(String value) {
        return (Double)parse(value, (String)null, (Locale)null);
    }","  public void test7()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator(false, 0);
      Double double0 = doubleValidator0.validate(""0"", ""0"");
}"
2469,"    public Double validate(String value) {
        return (Double)parse(value, (String)null, (Locale)null);
    }","  public void test8()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      Double double0 = doubleValidator0.validate(""526"", """");
}"
2470,"    public Double validate(String value) {
        return (Double)parse(value, (String)null, (Locale)null);
    }","  public void test9()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      Double double0 = doubleValidator0.validate(""899.6"", """");
}"
2471,"    public Double validate(String value) {
        return (Double)parse(value, (String)null, (Locale)null);
    }","  public void test10()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Double double0 = doubleValidator0.validate(""-852.07"");
}"
2472,"    public Double validate(String value) {
        return (Double)parse(value, (String)null, (Locale)null);
    }","  public void test11()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Double double0 = doubleValidator0.validate(""0"");
}"
2473,"    public Double validate(String value) {
        return (Double)parse(value, (String)null, (Locale)null);
    }","  public void test12()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator(false, 0);
      Double double0 = doubleValidator0.validate(""95XHp x|HSW{"");
}"
2474,"    public boolean minValue(double value, double min) {
        return (value >= min);
    }","  public void test13()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      Double double0 = new Double((-1338.0437589907));
      boolean boolean0 = doubleValidator0.minValue(double0, (-1338.0437589907));
}"
2475,"    public boolean maxValue(double value, double max) {
        return (value <= max);
    }","  public void test14()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Double double0 = new Double(2679.496);
      boolean boolean0 = doubleValidator0.maxValue(double0, 0.0);
}"
2476,"    public boolean isInRange(double value, double min, double max) {
        return (value >= min && value <= max);
    }","  public void test15()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator(false, (-1));
      Double double0 = new Double(4475.3);
      boolean boolean0 = doubleValidator0.isInRange(double0, (double) (-1), 4475.3);
}"
2477,"    public Double validate(String value) {
        return (Double)parse(value, (String)null, (Locale)null);
    }","  public void test16()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator(true, (-3249));
      // Undeclared exception!
      try { 
        doubleValidator0.validate(""N8H$niYN:YeQ{+:"", ""$M;|k"", (Locale) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Unquoted special character ';' in pattern \""$M;|k\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
2478,"    public Double validate(String value) {
        return (Double)parse(value, (String)null, (Locale)null);
    }","  public void test17()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator(true, 0);
      // Undeclared exception!
      try { 
        doubleValidator0.validate(""org.apache.commons.validator.routines.DoubleValidator"", ""org.apache.commons.validator.routines.DoubleValidator"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \""org.apache.commons.validator.routines.DoubleValidator\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
2479,"    protected Object processParsedValue(Object value, Format formatter) {

        if (value instanceof Double) {
            return value;
        }
        return Double.valueOf(((Number)value).doubleValue());

    }","  public void test18()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      // Undeclared exception!
      try { 
        doubleValidator0.processParsedValue((Object) null, numberFormat0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.DoubleValidator"", e);
      }
  }"
2480,"    protected Object processParsedValue(Object value, Format formatter) {

        if (value instanceof Double) {
            return value;
        }
        return Double.valueOf(((Number)value).doubleValue());

    }","  public void test19()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Object object0 = new Object();
      Format format0 = doubleValidator0.getFormat((Locale) null);
      // Undeclared exception!
      try { 
        doubleValidator0.processParsedValue(object0, format0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Number
         //
         verifyException(""org.apache.commons.validator.routines.DoubleValidator"", e);
      }
  }"
2481,"    public boolean minValue(double value, double min) {
        return (value >= min);
    }","  public void test20()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      // Undeclared exception!
      try { 
        doubleValidator0.minValue((Double) null, 0.0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.DoubleValidator"", e);
      }
  }"
2482,"    public boolean isInRange(double value, double min, double max) {
        return (value >= min && value <= max);
    }","  public void test21()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      // Undeclared exception!
      try { 
        doubleValidator0.isInRange((Double) null, 0.0, 0.0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.DoubleValidator"", e);
      }
  }"
2483,"    public boolean maxValue(double value, double max) {
        return (value <= max);
    }","  public void test22()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      boolean boolean0 = doubleValidator0.maxValue(0.0, 1404.13735238142);
}"
2484,"    public boolean minValue(double value, double min) {
        return (value >= min);
    }","  public void test23()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      boolean boolean0 = doubleValidator0.minValue((-1690.41), (-1102.12309441081));
}"
2485,"    public boolean isInRange(double value, double min, double max) {
        return (value >= min && value <= max);
    }","  public void test24()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      boolean boolean0 = doubleValidator0.isInRange(1351.416551918381, 1351.416551918381, 1.0);
}"
2486,"    public boolean isInRange(double value, double min, double max) {
        return (value >= min && value <= max);
    }","  public void test25()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator(true, 0);
      boolean boolean0 = doubleValidator0.isInRange((-1.0), 0.0, 0.0);
}"
2487,"    protected Object processParsedValue(Object value, Format formatter) {

        if (value instanceof Double) {
            return value;
        }
        return Double.valueOf(((Number)value).doubleValue());

    }","  public void test26()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      Double double0 = new Double(87.74002150990971);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Object object0 = doubleValidator0.processParsedValue(double0, decimalFormat0);
}"
2488,"    public boolean maxValue(double value, double max) {
        return (value <= max);
    }","  public void test27()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      Double double0 = new Double((-8.7));
      boolean boolean0 = doubleValidator0.maxValue(double0, (-8.7));
}"
2489,"    public boolean maxValue(double value, double max) {
        return (value <= max);
    }","  public void test28()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      boolean boolean0 = doubleValidator0.maxValue((double) 2, (double) 0);
}"
2490,"    public boolean minValue(double value, double min) {
        return (value >= min);
    }","  public void test29()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      boolean boolean0 = doubleValidator0.minValue((double) 2, (-8.7));
}"
2491,"    public boolean isInRange(double value, double min, double max) {
        return (value >= min && value <= max);
    }","  public void test30()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      Double double0 = new Double((-8.7));
      boolean boolean0 = doubleValidator0.isInRange(double0, (double) 1, (double) 1);
}"
2492,"    public Double validate(String value) {
        return (Double)parse(value, (String)null, (Locale)null);
    }","  public void test31()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Double double0 = doubleValidator0.validate((String) null);
}"
2493,"    public boolean minValue(double value, double min) {
        return (value >= min);
    }","  public void test32()  throws Throwable  {
      DoubleValidator doubleValidator0 = new DoubleValidator();
      Double double0 = new Double((-8.7));
      boolean boolean0 = doubleValidator0.minValue(double0, (double) 0);
}"
2494,"    public Double validate(String value) {
        return (Double)parse(value, (String)null, (Locale)null);
    }","  public void test33()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Locale locale0 = Locale.ITALY;
      Double double0 = doubleValidator0.validate("")v+c2sg"", """", locale0);
}"
2495,"    public Double validate(String value) {
        return (Double)parse(value, (String)null, (Locale)null);
    }","  public void test34()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Locale locale0 = Locale.ITALY;
      Double double0 = doubleValidator0.validate(""org.apache.commons.validator.routines.AbstractFormatValidator"", locale0);
}"
2496,"    public boolean maxValue(double value, double max) {
        return (value <= max);
    }","  public void test35()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      // Undeclared exception!
      try { 
        doubleValidator0.maxValue((Double) null, 0.0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.DoubleValidator"", e);
      }
  }"
2497,"    public Double validate(String value) {
        return (Double)parse(value, (String)null, (Locale)null);
    }","  public void test36()  throws Throwable  {
      DoubleValidator doubleValidator0 = DoubleValidator.getInstance();
      Double double0 = doubleValidator0.validate(""(cz4o"", """");
}"
2498,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        int pos = useRightPos ? rightPos : leftPos;
        int weight = postitionWeight[(pos - 1) % postitionWeight.length];
        int weightedValue = charValue * weight;
        if (sumWeightedDigits) {
            weightedValue = ModulusCheckDigit.sumDigits(weightedValue);
        }
        return weightedValue;
    }","  public void test0()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 217;
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0, true, true);
      int int0 = modulusTenCheckDigit0.weightedValue(1426, 1, 1);
}"
2499,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        int pos = useRightPos ? rightPos : leftPos;
        int weight = postitionWeight[(pos - 1) % postitionWeight.length];
        int weightedValue = charValue * weight;
        if (sumWeightedDigits) {
            weightedValue = ModulusCheckDigit.sumDigits(weightedValue);
        }
        return weightedValue;
    }","  public void test1()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = (-238);
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0);
      int int0 = modulusTenCheckDigit0.weightedValue(1790, 1790, (-1062));
}"
2500,"    protected int toInt(char character, int leftPos, int rightPos) throws CheckDigitException {
        int num = Character.getNumericValue(character);
        if (num < 0) {
            throw new CheckDigitException(""Invalid Character["" + leftPos + ""] = '"" + character + ""'"");
        }
        return num;
    }","  public void test2()  throws Throwable  {
      int[] intArray0 = new int[4];
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0);
      int int0 = modulusTenCheckDigit0.toInt('0', 0, 0);
}"
2501,"    protected int toInt(char character, int leftPos, int rightPos) throws CheckDigitException {
        int num = Character.getNumericValue(character);
        if (num < 0) {
            throw new CheckDigitException(""Invalid Character["" + leftPos + ""] = '"" + character + ""'"");
        }
        return num;
    }","  public void test3()  throws Throwable  {
      int[] intArray0 = new int[4];
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0);
      int int0 = modulusTenCheckDigit0.toInt('b', 0, (-5258));
}"
2502,"    public boolean isValid(String code) {
        if (code == null || code.length() == 0) {
            return false;
        }
        if (!Character.isDigit(code.charAt(code.length() - 1))) {
            return false;
        }

        return super.isValid(code);
    }","  public void test4()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1430;
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0);
      boolean boolean0 = modulusTenCheckDigit0.isValid(""Z8"");
}"
2503,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        int pos = useRightPos ? rightPos : leftPos;
        int weight = postitionWeight[(pos - 1) % postitionWeight.length];
        int weightedValue = charValue * weight;
        if (sumWeightedDigits) {
            weightedValue = ModulusCheckDigit.sumDigits(weightedValue);
        }
        return weightedValue;
    }","  public void test5()  throws Throwable  {
      int[] intArray0 = new int[4];
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0, false);
      // Undeclared exception!
      try { 
        modulusTenCheckDigit0.weightedValue(9, (-1234), 706);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusTenCheckDigit"", e);
      }
  }"
2504,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        int pos = useRightPos ? rightPos : leftPos;
        int weight = postitionWeight[(pos - 1) % postitionWeight.length];
        int weightedValue = charValue * weight;
        if (sumWeightedDigits) {
            weightedValue = ModulusCheckDigit.sumDigits(weightedValue);
        }
        return weightedValue;
    }","  public void test6()  throws Throwable  {
      int[] intArray0 = new int[0];
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0, false, false);
      // Undeclared exception!
      try { 
        modulusTenCheckDigit0.weightedValue(0, 0, 0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusTenCheckDigit"", e);
      }
  }"
2505,"    protected int toInt(char character, int leftPos, int rightPos) throws CheckDigitException {
        int num = Character.getNumericValue(character);
        if (num < 0) {
            throw new CheckDigitException(""Invalid Character["" + leftPos + ""] = '"" + character + ""'"");
        }
        return num;
    }","  public void test7()  throws Throwable  {
      int[] intArray0 = new int[6];
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0);
      try { 
        modulusTenCheckDigit0.toInt(' ', 13, 2783);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Invalid Character[13] = ' '
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusTenCheckDigit"", e);
      }
  }"
2506,"    public boolean isValid(String code) {
        if (code == null || code.length() == 0) {
            return false;
        }
        if (!Character.isDigit(code.charAt(code.length() - 1))) {
            return false;
        }

        return super.isValid(code);
    }","  public void test8()  throws Throwable  {
      int[] intArray0 = new int[0];
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0, true);
      // Undeclared exception!
      try { 
        modulusTenCheckDigit0.isValid(""B2^Fi|/WHA3uiGmT^'9"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusTenCheckDigit"", e);
      }
  }"
2507,"    public ModulusTenCheckDigit(int[] postitionWeight) {
        this(postitionWeight, false, false);
    }","  public void test9()  throws Throwable  {
      ModulusTenCheckDigit modulusTenCheckDigit0 = null;
      try {
        modulusTenCheckDigit0 = new ModulusTenCheckDigit((int[]) null, false, false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusTenCheckDigit"", e);
      }
  }"
2508,"    public ModulusTenCheckDigit(int[] postitionWeight) {
        this(postitionWeight, false, false);
    }","  public void test10()  throws Throwable  {
      ModulusTenCheckDigit modulusTenCheckDigit0 = null;
      try {
        modulusTenCheckDigit0 = new ModulusTenCheckDigit((int[]) null, true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusTenCheckDigit"", e);
      }
  }"
2509,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        int pos = useRightPos ? rightPos : leftPos;
        int weight = postitionWeight[(pos - 1) % postitionWeight.length];
        int weightedValue = charValue * weight;
        if (sumWeightedDigits) {
            weightedValue = ModulusCheckDigit.sumDigits(weightedValue);
        }
        return weightedValue;
    }","  public void test11()  throws Throwable  {
      int[] intArray0 = new int[1];
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0, false, true);
      int int0 = modulusTenCheckDigit0.weightedValue((-5090), (-5090), (-5090));
}"
2510,"    public boolean isValid(String code) {
        if (code == null || code.length() == 0) {
            return false;
        }
        if (!Character.isDigit(code.charAt(code.length() - 1))) {
            return false;
        }

        return super.isValid(code);
    }","  public void test12()  throws Throwable  {
      int[] intArray0 = new int[3];
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0, true);
      boolean boolean0 = modulusTenCheckDigit0.isValid(""jwyQ[IK~F?JULbJ1"");
}"
2511,"    public boolean isValid(String code) {
        if (code == null || code.length() == 0) {
            return false;
        }
        if (!Character.isDigit(code.charAt(code.length() - 1))) {
            return false;
        }

        return super.isValid(code);
    }","  public void test13()  throws Throwable  {
      int[] intArray0 = new int[1];
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0, false, true);
      boolean boolean0 = modulusTenCheckDigit0.isValid("""");
}"
2512,"    public boolean isValid(String code) {
        if (code == null || code.length() == 0) {
            return false;
        }
        if (!Character.isDigit(code.charAt(code.length() - 1))) {
            return false;
        }

        return super.isValid(code);
    }","  public void test14()  throws Throwable  {
      int[] intArray0 = new int[3];
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0, true);
      boolean boolean0 = modulusTenCheckDigit0.isValid(""ModulusTenCheckDigit[postitionWeight=[0, 0, 0], useRightPos=true, sumWeightedDigits=false]"");
}"
2513,"    public boolean isValid(String code) {
        if (code == null || code.length() == 0) {
            return false;
        }
        if (!Character.isDigit(code.charAt(code.length() - 1))) {
            return false;
        }

        return super.isValid(code);
    }","  public void test15()  throws Throwable  {
      int[] intArray0 = new int[1];
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0);
      boolean boolean0 = modulusTenCheckDigit0.isValid((String) null);
}"
2514,"    public String toString() {
        return getClass().getSimpleName() + ""[postitionWeight="" + Arrays.toString(postitionWeight) + "", useRightPos=""
                + useRightPos + "", sumWeightedDigits="" + sumWeightedDigits + ""]"";
    }","  public void test16()  throws Throwable  {
      int[] intArray0 = new int[3];
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0, true);
      String string0 = modulusTenCheckDigit0.toString();
}"
2515,"    public ModulusTenCheckDigit(int[] postitionWeight) {
        this(postitionWeight, false, false);
    }","  public void test17()  throws Throwable  {
      ModulusTenCheckDigit modulusTenCheckDigit0 = null;
      try {
        modulusTenCheckDigit0 = new ModulusTenCheckDigit((int[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusTenCheckDigit"", e);
      }
  }"
2516,"    public CheckDigitException() {
    }","  public void test0()  throws Throwable  {
      CheckDigitException checkDigitException0 = new CheckDigitException();
      CheckDigitException checkDigitException1 = new CheckDigitException("""", checkDigitException0);
}"
2517,"    public CheckDigitException() {
    }","  public void test1()  throws Throwable  {
      CheckDigitException checkDigitException0 = new CheckDigitException("":O*ac<"");
  }"
2518,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        int weight = POSITION_WEIGHT[rightPos % 2];
        return charValue * weight;
    }","  public void test0()  throws Throwable  {
      EAN13CheckDigit eAN13CheckDigit0 = (EAN13CheckDigit)EAN13CheckDigit.EAN13_CHECK_DIGIT;
      int int0 = eAN13CheckDigit0.weightedValue(0, (-2311), 704);
}"
2519,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        int weight = POSITION_WEIGHT[rightPos % 2];
        return charValue * weight;
    }","  public void test1()  throws Throwable  {
      EAN13CheckDigit eAN13CheckDigit0 = (EAN13CheckDigit)EAN13CheckDigit.EAN13_CHECK_DIGIT;
      int int0 = eAN13CheckDigit0.weightedValue(2765, (-3365), 2765);
}"
2520,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        int weight = POSITION_WEIGHT[rightPos % 2];
        return charValue * weight;
    }","  public void test2()  throws Throwable  {
      EAN13CheckDigit eAN13CheckDigit0 = (EAN13CheckDigit)EAN13CheckDigit.EAN13_CHECK_DIGIT;
      int int0 = eAN13CheckDigit0.weightedValue((-3365), 2765, 232);
}"
2521,"    public EAN13CheckDigit() {
        super(10);  // CHECKSTYLE IGNORE MagicNumber
    }","  public void test3()  throws Throwable  {
      EAN13CheckDigit eAN13CheckDigit0 = new EAN13CheckDigit();
}"
2522,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        int weight = POSITION_WEIGHT[rightPos % 2];
        return charValue * weight;
    }","  public void test4()  throws Throwable  {
      EAN13CheckDigit eAN13CheckDigit0 = (EAN13CheckDigit)EAN13CheckDigit.EAN13_CHECK_DIGIT;
      // Undeclared exception!
      try { 
        eAN13CheckDigit0.weightedValue(0, (-2073), (-2073));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit"", e);
      }
  }"
2523,"    protected int toInt(char character, int leftPos, int rightPos)
            throws CheckDigitException {
        int charValue = Character.getNumericValue(character);
        // the check digit is only allowed to reach 9
        final int charMax = rightPos == 1 ? 9 : MAX_ALPHANUMERIC_VALUE; // CHECKSTYLE IGNORE MagicNumber
        if (charValue < 0 || charValue > charMax) {
            throw new CheckDigitException(""Invalid Character["" +
                    leftPos + "","" + rightPos + ""] = '"" + charValue + ""' out of range 0 to "" + charMax);
        }
        return charValue;
    }","  public void test0()  throws Throwable  {
      SedolCheckDigit sedolCheckDigit0 = (SedolCheckDigit)SedolCheckDigit.SEDOL_CHECK_DIGIT;
      int int0 = sedolCheckDigit0.toInt('Z', 0, (-324));
}"
2524,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        return charValue * POSITION_WEIGHT[leftPos - 1];
    }","  public void test1()  throws Throwable  {
      SedolCheckDigit sedolCheckDigit0 = new SedolCheckDigit();
      int int0 = sedolCheckDigit0.weightedValue(0, 7, 1287);
}"
2525,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        return charValue * POSITION_WEIGHT[leftPos - 1];
    }","  public void test2()  throws Throwable  {
      SedolCheckDigit sedolCheckDigit0 = (SedolCheckDigit)SedolCheckDigit.SEDOL_CHECK_DIGIT;
      int int0 = sedolCheckDigit0.weightedValue(3, 3, 3);
}"
2526,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        return charValue * POSITION_WEIGHT[leftPos - 1];
    }","  public void test3()  throws Throwable  {
      SedolCheckDigit sedolCheckDigit0 = (SedolCheckDigit)SedolCheckDigit.SEDOL_CHECK_DIGIT;
      int int0 = sedolCheckDigit0.weightedValue((-960), 6, 0);
}"
2527,"    protected int toInt(char character, int leftPos, int rightPos)
            throws CheckDigitException {
        int charValue = Character.getNumericValue(character);
        // the check digit is only allowed to reach 9
        final int charMax = rightPos == 1 ? 9 : MAX_ALPHANUMERIC_VALUE; // CHECKSTYLE IGNORE MagicNumber
        if (charValue < 0 || charValue > charMax) {
            throw new CheckDigitException(""Invalid Character["" +
                    leftPos + "","" + rightPos + ""] = '"" + charValue + ""' out of range 0 to "" + charMax);
        }
        return charValue;
    }","  public void test4()  throws Throwable  {
      SedolCheckDigit sedolCheckDigit0 = (SedolCheckDigit)SedolCheckDigit.SEDOL_CHECK_DIGIT;
      int int0 = sedolCheckDigit0.toInt('0', 10, 4255);
}"
2528,"    protected int calculateModulus(String code, boolean includesCheckDigit) throws CheckDigitException {
        if (code.length() > POSITION_WEIGHT.length) {
            throw new CheckDigitException(""Invalid Code Length = "" + code.length());
        }
        return super.calculateModulus(code, includesCheckDigit);
    }","  public void test5()  throws Throwable  {
      SedolCheckDigit sedolCheckDigit0 = new SedolCheckDigit();
      int int0 = sedolCheckDigit0.calculateModulus(""wQ"", false);
}"
2529,"    protected int calculateModulus(String code, boolean includesCheckDigit) throws CheckDigitException {
        if (code.length() > POSITION_WEIGHT.length) {
            throw new CheckDigitException(""Invalid Code Length = "" + code.length());
        }
        return super.calculateModulus(code, includesCheckDigit);
    }","  public void test6()  throws Throwable  {
      SedolCheckDigit sedolCheckDigit0 = new SedolCheckDigit();
      int int0 = sedolCheckDigit0.calculateModulus(""1"", false);
}"
2530,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        return charValue * POSITION_WEIGHT[leftPos - 1];
    }","  public void test7()  throws Throwable  {
      SedolCheckDigit sedolCheckDigit0 = new SedolCheckDigit();
      // Undeclared exception!
      try { 
        sedolCheckDigit0.weightedValue(0, 0, 3);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.SedolCheckDigit"", e);
      }
  }"
2531,"    protected int toInt(char character, int leftPos, int rightPos)
            throws CheckDigitException {
        int charValue = Character.getNumericValue(character);
        // the check digit is only allowed to reach 9
        final int charMax = rightPos == 1 ? 9 : MAX_ALPHANUMERIC_VALUE; // CHECKSTYLE IGNORE MagicNumber
        if (charValue < 0 || charValue > charMax) {
            throw new CheckDigitException(""Invalid Character["" +
                    leftPos + "","" + rightPos + ""] = '"" + charValue + ""' out of range 0 to "" + charMax);
        }
        return charValue;
    }","  public void test8()  throws Throwable  {
      SedolCheckDigit sedolCheckDigit0 = new SedolCheckDigit();
      try { 
        sedolCheckDigit0.toInt('*', 0, (-287));
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Invalid Character[0,-287] = '-1' out of range 0 to 35
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.SedolCheckDigit"", e);
      }
  }"
2532,"    protected int calculateModulus(String code, boolean includesCheckDigit) throws CheckDigitException {
        if (code.length() > POSITION_WEIGHT.length) {
            throw new CheckDigitException(""Invalid Code Length = "" + code.length());
        }
        return super.calculateModulus(code, includesCheckDigit);
    }","  public void test9()  throws Throwable  {
      SedolCheckDigit sedolCheckDigit0 = (SedolCheckDigit)SedolCheckDigit.SEDOL_CHECK_DIGIT;
      try { 
        sedolCheckDigit0.calculateModulus(""U&*l25OhD"", false);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Invalid Code Length = 9
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.SedolCheckDigit"", e);
      }
  }"
2533,"    protected int calculateModulus(String code, boolean includesCheckDigit) throws CheckDigitException {
        if (code.length() > POSITION_WEIGHT.length) {
            throw new CheckDigitException(""Invalid Code Length = "" + code.length());
        }
        return super.calculateModulus(code, includesCheckDigit);
    }","  public void test10()  throws Throwable  {
      SedolCheckDigit sedolCheckDigit0 = (SedolCheckDigit)SedolCheckDigit.SEDOL_CHECK_DIGIT;
      // Undeclared exception!
      try { 
        sedolCheckDigit0.calculateModulus((String) null, false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.SedolCheckDigit"", e);
      }
  }"
2534,"    public SedolCheckDigit() {
        super(10); // CHECKSTYLE IGNORE MagicNumber
    }","  public void test11()  throws Throwable  {
      SedolCheckDigit sedolCheckDigit0 = new SedolCheckDigit();
      boolean boolean0 = sedolCheckDigit0.isValid(""E7mVtQf"");
}"
2535,"    protected int toInt(char character, int leftPos, int rightPos)
            throws CheckDigitException {
        int charValue = Character.getNumericValue(character);
        // the final character is only allowed to reach 9
        final int charMax = rightPos == 1 ? 9 : 35;  // CHECKSTYLE IGNORE MagicNumber
        if (charValue < 0 || charValue > charMax) {
            throw new CheckDigitException(""Invalid Character["" +
                    leftPos + "","" + rightPos + ""] = '"" + charValue + ""' out of range 0 to "" + charMax);
        }
        return charValue;
    }","  public void test0()  throws Throwable  {
      CUSIPCheckDigit cUSIPCheckDigit0 = (CUSIPCheckDigit)CUSIPCheckDigit.CUSIP_CHECK_DIGIT;
      int int0 = cUSIPCheckDigit0.toInt('z', (-4046), (-4046));
}"
2536,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        int weight = POSITION_WEIGHT[rightPos % 2];
        int weightedValue = (charValue * weight);
        return ModulusCheckDigit.sumDigits(weightedValue);
    }","  public void test1()  throws Throwable  {
      CUSIPCheckDigit cUSIPCheckDigit0 = new CUSIPCheckDigit();
      int int0 = cUSIPCheckDigit0.weightedValue(0, 493, 493);
}"
2537,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        int weight = POSITION_WEIGHT[rightPos % 2];
        int weightedValue = (charValue * weight);
        return ModulusCheckDigit.sumDigits(weightedValue);
    }","  public void test2()  throws Throwable  {
      CUSIPCheckDigit cUSIPCheckDigit0 = new CUSIPCheckDigit();
      int int0 = cUSIPCheckDigit0.weightedValue(887, 10, 887);
}"
2538,"    protected int toInt(char character, int leftPos, int rightPos)
            throws CheckDigitException {
        int charValue = Character.getNumericValue(character);
        // the final character is only allowed to reach 9
        final int charMax = rightPos == 1 ? 9 : 35;  // CHECKSTYLE IGNORE MagicNumber
        if (charValue < 0 || charValue > charMax) {
            throw new CheckDigitException(""Invalid Character["" +
                    leftPos + "","" + rightPos + ""] = '"" + charValue + ""' out of range 0 to "" + charMax);
        }
        return charValue;
    }","  public void test3()  throws Throwable  {
      CUSIPCheckDigit cUSIPCheckDigit0 = new CUSIPCheckDigit();
      int int0 = cUSIPCheckDigit0.toInt('0', (-3181), (-3181));
}"
2539,"    protected int toInt(char character, int leftPos, int rightPos)
            throws CheckDigitException {
        int charValue = Character.getNumericValue(character);
        // the final character is only allowed to reach 9
        final int charMax = rightPos == 1 ? 9 : 35;  // CHECKSTYLE IGNORE MagicNumber
        if (charValue < 0 || charValue > charMax) {
            throw new CheckDigitException(""Invalid Character["" +
                    leftPos + "","" + rightPos + ""] = '"" + charValue + ""' out of range 0 to "" + charMax);
        }
        return charValue;
    }","  public void test4()  throws Throwable  {
      CUSIPCheckDigit cUSIPCheckDigit0 = (CUSIPCheckDigit)CUSIPCheckDigit.CUSIP_CHECK_DIGIT;
      int int0 = cUSIPCheckDigit0.toInt('a', 0, 2);
}"
2540,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        int weight = POSITION_WEIGHT[rightPos % 2];
        int weightedValue = (charValue * weight);
        return ModulusCheckDigit.sumDigits(weightedValue);
    }","  public void test5()  throws Throwable  {
      CUSIPCheckDigit cUSIPCheckDigit0 = new CUSIPCheckDigit();
      // Undeclared exception!
      try { 
        cUSIPCheckDigit0.weightedValue(0, (-1), (-1));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.CUSIPCheckDigit"", e);
      }
  }"
2541,"    protected int toInt(char character, int leftPos, int rightPos)
            throws CheckDigitException {
        int charValue = Character.getNumericValue(character);
        // the final character is only allowed to reach 9
        final int charMax = rightPos == 1 ? 9 : 35;  // CHECKSTYLE IGNORE MagicNumber
        if (charValue < 0 || charValue > charMax) {
            throw new CheckDigitException(""Invalid Character["" +
                    leftPos + "","" + rightPos + ""] = '"" + charValue + ""' out of range 0 to "" + charMax);
        }
        return charValue;
    }","  public void test6()  throws Throwable  {
      CUSIPCheckDigit cUSIPCheckDigit0 = new CUSIPCheckDigit();
      try { 
        cUSIPCheckDigit0.toInt('_', 2, (-1419));
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Invalid Character[2,-1419] = '-1' out of range 0 to 35
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.CUSIPCheckDigit"", e);
      }
  }"
2542,"    public CUSIPCheckDigit() {
        super(10); // CHECKSTYLE IGNORE MagicNumber
    }","  public void test7()  throws Throwable  {
      CUSIPCheckDigit cUSIPCheckDigit0 = new CUSIPCheckDigit();
      boolean boolean0 = cUSIPCheckDigit0.isValid(""a"");
}"
2543,"    public CUSIPCheckDigit() {
        super(10); // CHECKSTYLE IGNORE MagicNumber
    }","  public void test8()  throws Throwable  {
      CUSIPCheckDigit cUSIPCheckDigit0 = new CUSIPCheckDigit();
      boolean boolean0 = cUSIPCheckDigit0.isValid(""InaVlid Charactr["");
}"
2544,"    protected String toCheckDigit(int charValue)
            throws CheckDigitException {
        if (charValue == 10) {  // CHECKSTYLE IGNORE MagicNumber
            return ""X"";
        }
        return super.toCheckDigit(charValue);
    }","  public void test0()  throws Throwable  {
      ISBN10CheckDigit iSBN10CheckDigit0 = new ISBN10CheckDigit();
      try { 
        iSBN10CheckDigit0.toCheckDigit(841);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Invalid Check Digit Value =841
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit"", e);
      }
  }"
2545,"    protected int toInt(char character, int leftPos, int rightPos)
            throws CheckDigitException {
        if (rightPos == 1 && character == 'X') {
            return 10;  // CHECKSTYLE IGNORE MagicNumber
        }
        return super.toInt(character, leftPos, rightPos);
    }","  public void test1()  throws Throwable  {
      ISBN10CheckDigit iSBN10CheckDigit0 = new ISBN10CheckDigit();
      try { 
        iSBN10CheckDigit0.toInt('v', 4257, 1);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Invalid Character[4257] = 'v'
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit"", e);
      }
  }"
2546,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        return charValue * rightPos;
    }","  public void test2()  throws Throwable  {
      ISBN10CheckDigit iSBN10CheckDigit0 = new ISBN10CheckDigit();
      int int0 = iSBN10CheckDigit0.weightedValue(0, 0, 1193);
}"
2547,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        return charValue * rightPos;
    }","  public void test3()  throws Throwable  {
      ISBN10CheckDigit iSBN10CheckDigit0 = (ISBN10CheckDigit)ISBN10CheckDigit.ISBN10_CHECK_DIGIT;
      int int0 = iSBN10CheckDigit0.weightedValue((-759), (-707), (-707));
}"
2548,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        return charValue * rightPos;
    }","  public void test4()  throws Throwable  {
      ISBN10CheckDigit iSBN10CheckDigit0 = new ISBN10CheckDigit();
      int int0 = iSBN10CheckDigit0.weightedValue(1, 1, (-1375));
}"
2549,"    protected int toInt(char character, int leftPos, int rightPos)
            throws CheckDigitException {
        if (rightPos == 1 && character == 'X') {
            return 10;  // CHECKSTYLE IGNORE MagicNumber
        }
        return super.toInt(character, leftPos, rightPos);
    }","  public void test5()  throws Throwable  {
      ISBN10CheckDigit iSBN10CheckDigit0 = new ISBN10CheckDigit();
      int int0 = iSBN10CheckDigit0.toInt('0', (-1509), 210);
}"
2550,"    protected int toInt(char character, int leftPos, int rightPos)
            throws CheckDigitException {
        if (rightPos == 1 && character == 'X') {
            return 10;  // CHECKSTYLE IGNORE MagicNumber
        }
        return super.toInt(character, leftPos, rightPos);
    }","  public void test6()  throws Throwable  {
      ISBN10CheckDigit iSBN10CheckDigit0 = new ISBN10CheckDigit();
      int int0 = iSBN10CheckDigit0.toInt('5', 2458, 2458);
}"
2551,"    protected String toCheckDigit(int charValue)
            throws CheckDigitException {
        if (charValue == 10) {  // CHECKSTYLE IGNORE MagicNumber
            return ""X"";
        }
        return super.toCheckDigit(charValue);
    }","  public void test7()  throws Throwable  {
      ISBN10CheckDigit iSBN10CheckDigit0 = (ISBN10CheckDigit)ISBN10CheckDigit.ISBN10_CHECK_DIGIT;
      try { 
        iSBN10CheckDigit0.toCheckDigit((-2374));
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Invalid Check Digit Value =-2374
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit"", e);
      }
  }"
2552,"    protected String toCheckDigit(int charValue)
            throws CheckDigitException {
        if (charValue == 10) {  // CHECKSTYLE IGNORE MagicNumber
            return ""X"";
        }
        return super.toCheckDigit(charValue);
    }","  public void test8()  throws Throwable  {
      ISBN10CheckDigit iSBN10CheckDigit0 = new ISBN10CheckDigit();
      String string0 = iSBN10CheckDigit0.toCheckDigit(6);
}"
2553,"    public ISBN10CheckDigit() {
        super(11);  // CHECKSTYLE IGNORE MagicNumber
    }","  public void test9()  throws Throwable  {
      ISBN10CheckDigit iSBN10CheckDigit0 = new ISBN10CheckDigit();
      boolean boolean0 = iSBN10CheckDigit0.isValid(""6"");
}"
2554,"    public ISBN10CheckDigit() {
        super(11);  // CHECKSTYLE IGNORE MagicNumber
    }","  public void test10()  throws Throwable  {
      ISBN10CheckDigit iSBN10CheckDigit0 = new ISBN10CheckDigit();
      String string0 = iSBN10CheckDigit0.calculate(""6"");
}"
2555,"    public ISBN10CheckDigit() {
        super(11);  // CHECKSTYLE IGNORE MagicNumber
    }","  public void test11()  throws Throwable  {
      ISBN10CheckDigit iSBN10CheckDigit0 = new ISBN10CheckDigit();
      boolean boolean0 = iSBN10CheckDigit0.isValid(""X"");
}"
2556,"    public boolean isValid(String code) {
        if (code == null) {
            return false;
        } else if (code.length() == 10) { // CHECKSTYLE IGNORE MagicNumber
            return ISBN10_CHECK_DIGIT.isValid(code);
        } else if (code.length() == 13) { // CHECKSTYLE IGNORE MagicNumber
            return ISBN13_CHECK_DIGIT.isValid(code);
        } else {
            return false;
        }
    }","  public void test0()  throws Throwable  {
      ISBNCheckDigit iSBNCheckDigit0 = (ISBNCheckDigit)ISBNCheckDigit.ISBN_CHECK_DIGIT;
      boolean boolean0 = iSBNCheckDigit0.isValid(""org.apache.commons.validator.routines.checkdigit.CUSIPCheckDigit"");
}"
2557,"    public boolean isValid(String code) {
        if (code == null) {
            return false;
        } else if (code.length() == 10) { // CHECKSTYLE IGNORE MagicNumber
            return ISBN10_CHECK_DIGIT.isValid(code);
        } else if (code.length() == 13) { // CHECKSTYLE IGNORE MagicNumber
            return ISBN13_CHECK_DIGIT.isValid(code);
        } else {
            return false;
        }
    }","  public void test1()  throws Throwable  {
      ISBNCheckDigit iSBNCheckDigit0 = (ISBNCheckDigit)ISBNCheckDigit.ISBN_CHECK_DIGIT;
      boolean boolean0 = iSBNCheckDigit0.isValid("""");
}"
2558,"    public String calculate(String code) throws CheckDigitException {
        if (code == null || code.length() == 0) {
            throw new CheckDigitException(""ISBN Code is missing"");
        } else if (code.length() == 9) { // CHECKSTYLE IGNORE MagicNumber
            return ISBN10_CHECK_DIGIT.calculate(code);
        } else if (code.length() == 12) { // CHECKSTYLE IGNORE MagicNumber
            return ISBN13_CHECK_DIGIT.calculate(code);
        } else {
            throw new CheckDigitException(""Invalid ISBN Length = "" + code.length());
        }
    }","  public void test2()  throws Throwable  {
      ISBNCheckDigit iSBNCheckDigit0 = new ISBNCheckDigit();
      try { 
        iSBNCheckDigit0.calculate(""org.apache.commons.validator.routines.checkdigit.ISBNCheckDigit"");
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Invalid ISBN Length = 63
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ISBNCheckDigit"", e);
      }
  }"
2559,"    public String calculate(String code) throws CheckDigitException {
        if (code == null || code.length() == 0) {
            throw new CheckDigitException(""ISBN Code is missing"");
        } else if (code.length() == 9) { // CHECKSTYLE IGNORE MagicNumber
            return ISBN10_CHECK_DIGIT.calculate(code);
        } else if (code.length() == 12) { // CHECKSTYLE IGNORE MagicNumber
            return ISBN13_CHECK_DIGIT.calculate(code);
        } else {
            throw new CheckDigitException(""Invalid ISBN Length = "" + code.length());
        }
    }","  public void test3()  throws Throwable  {
      ISBNCheckDigit iSBNCheckDigit0 = new ISBNCheckDigit();
      try { 
        iSBNCheckDigit0.calculate(""d"");
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Invalid ISBN Length = 1
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ISBNCheckDigit"", e);
      }
  }"
2560,"    public String calculate(String code) throws CheckDigitException {
        if (code == null || code.length() == 0) {
            throw new CheckDigitException(""ISBN Code is missing"");
        } else if (code.length() == 9) { // CHECKSTYLE IGNORE MagicNumber
            return ISBN10_CHECK_DIGIT.calculate(code);
        } else if (code.length() == 12) { // CHECKSTYLE IGNORE MagicNumber
            return ISBN13_CHECK_DIGIT.calculate(code);
        } else {
            throw new CheckDigitException(""Invalid ISBN Length = "" + code.length());
        }
    }","  public void test4()  throws Throwable  {
      ISBNCheckDigit iSBNCheckDigit0 = new ISBNCheckDigit();
      try { 
        iSBNCheckDigit0.calculate(""v|81ab^\u0003'bqf"");
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Invalid Character[1] = 'v'
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit"", e);
      }
  }"
2561,"    public boolean isValid(String code) {
        if (code == null) {
            return false;
        } else if (code.length() == 10) { // CHECKSTYLE IGNORE MagicNumber
            return ISBN10_CHECK_DIGIT.isValid(code);
        } else if (code.length() == 13) { // CHECKSTYLE IGNORE MagicNumber
            return ISBN13_CHECK_DIGIT.isValid(code);
        } else {
            return false;
        }
    }","  public void test5()  throws Throwable  {
      ISBNCheckDigit iSBNCheckDigit0 = new ISBNCheckDigit();
      boolean boolean0 = iSBNCheckDigit0.isValid((String) null);
}"
2562,"    public boolean isValid(String code) {
        if (code == null) {
            return false;
        } else if (code.length() == 10) { // CHECKSTYLE IGNORE MagicNumber
            return ISBN10_CHECK_DIGIT.isValid(code);
        } else if (code.length() == 13) { // CHECKSTYLE IGNORE MagicNumber
            return ISBN13_CHECK_DIGIT.isValid(code);
        } else {
            return false;
        }
    }","  public void test6()  throws Throwable  {
      ISBNCheckDigit iSBNCheckDigit0 = new ISBNCheckDigit();
      boolean boolean0 = iSBNCheckDigit0.isValid(""'G]f jg~2`"");
}"
2563,"    public String calculate(String code) throws CheckDigitException {
        if (code == null || code.length() == 0) {
            throw new CheckDigitException(""ISBN Code is missing"");
        } else if (code.length() == 9) { // CHECKSTYLE IGNORE MagicNumber
            return ISBN10_CHECK_DIGIT.calculate(code);
        } else if (code.length() == 12) { // CHECKSTYLE IGNORE MagicNumber
            return ISBN13_CHECK_DIGIT.calculate(code);
        } else {
            throw new CheckDigitException(""Invalid ISBN Length = "" + code.length());
        }
    }","  public void test7()  throws Throwable  {
      ISBNCheckDigit iSBNCheckDigit0 = new ISBNCheckDigit();
      try { 
        iSBNCheckDigit0.calculate("".HA{]/-#R"");
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Invalid Character[1] = '.'
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit"", e);
      }
  }"
2564,"    public String calculate(String code) throws CheckDigitException {
        if (code == null || code.length() == 0) {
            throw new CheckDigitException(""ISBN Code is missing"");
        } else if (code.length() == 9) { // CHECKSTYLE IGNORE MagicNumber
            return ISBN10_CHECK_DIGIT.calculate(code);
        } else if (code.length() == 12) { // CHECKSTYLE IGNORE MagicNumber
            return ISBN13_CHECK_DIGIT.calculate(code);
        } else {
            throw new CheckDigitException(""Invalid ISBN Length = "" + code.length());
        }
    }","  public void test8()  throws Throwable  {
      ISBNCheckDigit iSBNCheckDigit0 = new ISBNCheckDigit();
      try { 
        iSBNCheckDigit0.calculate("""");
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // ISBN Code is missing
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ISBNCheckDigit"", e);
      }
  }"
2565,"    public String calculate(String code) throws CheckDigitException {
        if (code == null || code.length() == 0) {
            throw new CheckDigitException(""ISBN Code is missing"");
        } else if (code.length() == 9) { // CHECKSTYLE IGNORE MagicNumber
            return ISBN10_CHECK_DIGIT.calculate(code);
        } else if (code.length() == 12) { // CHECKSTYLE IGNORE MagicNumber
            return ISBN13_CHECK_DIGIT.calculate(code);
        } else {
            throw new CheckDigitException(""Invalid ISBN Length = "" + code.length());
        }
    }","  public void test9()  throws Throwable  {
      ISBNCheckDigit iSBNCheckDigit0 = new ISBNCheckDigit();
      try { 
        iSBNCheckDigit0.calculate((String) null);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // ISBN Code is missing
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ISBNCheckDigit"", e);
      }
  }"
2566,"    public String calculate(String code) throws CheckDigitException {
        if (code == null || code.length() < MIN_CODE_LEN) {
            throw new CheckDigitException(""Invalid Code length="" +
                    (code == null ? 0 : code.length()));
        }
        code = code.substring(0, 2) + ""00"" + code.substring(4); // CHECKSTYLE IGNORE MagicNumber
        int modulusResult = calculateModulus(code);
        int charValue = (98 - modulusResult); // CHECKSTYLE IGNORE MagicNumber
        String checkDigit = Integer.toString(charValue);
        return (charValue > 9 ? checkDigit : ""0"" + checkDigit); // CHECKSTYLE IGNORE MagicNumber
    }","  public void test0()  throws Throwable  {
      IBANCheckDigit iBANCheckDigit0 = new IBANCheckDigit();
      String string0 = iBANCheckDigit0.calculate(""2m+XpNSEi3IM3Za"");
}"
2567,"    public String calculate(String code) throws CheckDigitException {
        if (code == null || code.length() < MIN_CODE_LEN) {
            throw new CheckDigitException(""Invalid Code length="" +
                    (code == null ? 0 : code.length()));
        }
        code = code.substring(0, 2) + ""00"" + code.substring(4); // CHECKSTYLE IGNORE MagicNumber
        int modulusResult = calculateModulus(code);
        int charValue = (98 - modulusResult); // CHECKSTYLE IGNORE MagicNumber
        String checkDigit = Integer.toString(charValue);
        return (charValue > 9 ? checkDigit : ""0"" + checkDigit); // CHECKSTYLE IGNORE MagicNumber
    }","  public void test1()  throws Throwable  {
      IBANCheckDigit iBANCheckDigit0 = (IBANCheckDigit)IBANCheckDigit.IBAN_CHECK_DIGIT;
      String string0 = iBANCheckDigit0.calculate(""5t-8HCqb"");
}"
2568,"    public String calculate(String code) throws CheckDigitException {
        if (code == null || code.length() < MIN_CODE_LEN) {
            throw new CheckDigitException(""Invalid Code length="" +
                    (code == null ? 0 : code.length()));
        }
        code = code.substring(0, 2) + ""00"" + code.substring(4); // CHECKSTYLE IGNORE MagicNumber
        int modulusResult = calculateModulus(code);
        int charValue = (98 - modulusResult); // CHECKSTYLE IGNORE MagicNumber
        String checkDigit = Integer.toString(charValue);
        return (charValue > 9 ? checkDigit : ""0"" + checkDigit); // CHECKSTYLE IGNORE MagicNumber
    }","  public void test2()  throws Throwable  {
      IBANCheckDigit iBANCheckDigit0 = new IBANCheckDigit();
      String string0 = iBANCheckDigit0.calculate(""SJ\""56"");
}"
2569,"    public boolean isValid(String code) {
        if (code == null || code.length() < MIN_CODE_LEN) {
            return false;
        }
        String check = code.substring(2,4); // CHECKSTYLE IGNORE MagicNumber
        if (""00"".equals(check) || ""01"".equals(check) || ""99"".equals(check)) {
            return false;
        }
        try {
            int modulusResult = calculateModulus(code);
            return (modulusResult == 1);
        } catch (CheckDigitException  ex) {
            return false;
        }
    }","  public void test3()  throws Throwable  {
      IBANCheckDigit iBANCheckDigit0 = new IBANCheckDigit();
      boolean boolean0 = iBANCheckDigit0.isValid(""~?:9MQLqw\"""");
}"
2570,"    public String calculate(String code) throws CheckDigitException {
        if (code == null || code.length() < MIN_CODE_LEN) {
            throw new CheckDigitException(""Invalid Code length="" +
                    (code == null ? 0 : code.length()));
        }
        code = code.substring(0, 2) + ""00"" + code.substring(4); // CHECKSTYLE IGNORE MagicNumber
        int modulusResult = calculateModulus(code);
        int charValue = (98 - modulusResult); // CHECKSTYLE IGNORE MagicNumber
        String checkDigit = Integer.toString(charValue);
        return (charValue > 9 ? checkDigit : ""0"" + checkDigit); // CHECKSTYLE IGNORE MagicNumber
    }","  public void test4()  throws Throwable  {
      IBANCheckDigit iBANCheckDigit0 = new IBANCheckDigit();
      String string0 = iBANCheckDigit0.calculate(""2m+XpNSEi3IM3Z9a"");
}"
2571,"    public String calculate(String code) throws CheckDigitException {
        if (code == null || code.length() < MIN_CODE_LEN) {
            throw new CheckDigitException(""Invalid Code length="" +
                    (code == null ? 0 : code.length()));
        }
        code = code.substring(0, 2) + ""00"" + code.substring(4); // CHECKSTYLE IGNORE MagicNumber
        int modulusResult = calculateModulus(code);
        int charValue = (98 - modulusResult); // CHECKSTYLE IGNORE MagicNumber
        String checkDigit = Integer.toString(charValue);
        return (charValue > 9 ? checkDigit : ""0"" + checkDigit); // CHECKSTYLE IGNORE MagicNumber
    }","  public void test5()  throws Throwable  {
      IBANCheckDigit iBANCheckDigit0 = new IBANCheckDigit();
      try { 
        iBANCheckDigit0.calculate(""45"");
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Invalid Code length=2
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.IBANCheckDigit"", e);
      }
  }"
2572,"    public String calculate(String code) throws CheckDigitException {
        if (code == null || code.length() < MIN_CODE_LEN) {
            throw new CheckDigitException(""Invalid Code length="" +
                    (code == null ? 0 : code.length()));
        }
        code = code.substring(0, 2) + ""00"" + code.substring(4); // CHECKSTYLE IGNORE MagicNumber
        int modulusResult = calculateModulus(code);
        int charValue = (98 - modulusResult); // CHECKSTYLE IGNORE MagicNumber
        String checkDigit = Integer.toString(charValue);
        return (charValue > 9 ? checkDigit : ""0"" + checkDigit); // CHECKSTYLE IGNORE MagicNumber
    }","  public void test6()  throws Throwable  {
      IBANCheckDigit iBANCheckDigit0 = new IBANCheckDigit();
      try { 
        iBANCheckDigit0.calculate((String) null);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Invalid Code length=0
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.IBANCheckDigit"", e);
      }
  }"
2573,"    public boolean isValid(String code) {
        if (code == null || code.length() < MIN_CODE_LEN) {
            return false;
        }
        String check = code.substring(2,4); // CHECKSTYLE IGNORE MagicNumber
        if (""00"".equals(check) || ""01"".equals(check) || ""99"".equals(check)) {
            return false;
        }
        try {
            int modulusResult = calculateModulus(code);
            return (modulusResult == 1);
        } catch (CheckDigitException  ex) {
            return false;
        }
    }","  public void test7()  throws Throwable  {
      IBANCheckDigit iBANCheckDigit0 = new IBANCheckDigit();
      boolean boolean0 = iBANCheckDigit0.isValid(""Os02m"");
}"
2574,"    public boolean isValid(String code) {
        if (code == null || code.length() < MIN_CODE_LEN) {
            return false;
        }
        String check = code.substring(2,4); // CHECKSTYLE IGNORE MagicNumber
        if (""00"".equals(check) || ""01"".equals(check) || ""99"".equals(check)) {
            return false;
        }
        try {
            int modulusResult = calculateModulus(code);
            return (modulusResult == 1);
        } catch (CheckDigitException  ex) {
            return false;
        }
    }","  public void test8()  throws Throwable  {
      IBANCheckDigit iBANCheckDigit0 = new IBANCheckDigit();
      boolean boolean0 = iBANCheckDigit0.isValid(""NU99)8n@XBm'qYi 74e9"");
}"
2575,"    public boolean isValid(String code) {
        if (code == null || code.length() < MIN_CODE_LEN) {
            return false;
        }
        String check = code.substring(2,4); // CHECKSTYLE IGNORE MagicNumber
        if (""00"".equals(check) || ""01"".equals(check) || ""99"".equals(check)) {
            return false;
        }
        try {
            int modulusResult = calculateModulus(code);
            return (modulusResult == 1);
        } catch (CheckDigitException  ex) {
            return false;
        }
    }","  public void test9()  throws Throwable  {
      IBANCheckDigit iBANCheckDigit0 = new IBANCheckDigit();
      boolean boolean0 = iBANCheckDigit0.isValid(""Os012m"");
}"
2576,"    public boolean isValid(String code) {
        if (code == null || code.length() < MIN_CODE_LEN) {
            return false;
        }
        String check = code.substring(2,4); // CHECKSTYLE IGNORE MagicNumber
        if (""00"".equals(check) || ""01"".equals(check) || ""99"".equals(check)) {
            return false;
        }
        try {
            int modulusResult = calculateModulus(code);
            return (modulusResult == 1);
        } catch (CheckDigitException  ex) {
            return false;
        }
    }","  public void test10()  throws Throwable  {
      IBANCheckDigit iBANCheckDigit0 = new IBANCheckDigit();
      boolean boolean0 = iBANCheckDigit0.isValid(""Os002m"");
}"
2577,"    public boolean isValid(String code) {
        if (code == null || code.length() < MIN_CODE_LEN) {
            return false;
        }
        String check = code.substring(2,4); // CHECKSTYLE IGNORE MagicNumber
        if (""00"".equals(check) || ""01"".equals(check) || ""99"".equals(check)) {
            return false;
        }
        try {
            int modulusResult = calculateModulus(code);
            return (modulusResult == 1);
        } catch (CheckDigitException  ex) {
            return false;
        }
    }","  public void test11()  throws Throwable  {
      IBANCheckDigit iBANCheckDigit0 = new IBANCheckDigit();
      boolean boolean0 = iBANCheckDigit0.isValid(""45"");
}"
2578,"    public boolean isValid(String code) {
        if (code == null || code.length() < MIN_CODE_LEN) {
            return false;
        }
        String check = code.substring(2,4); // CHECKSTYLE IGNORE MagicNumber
        if (""00"".equals(check) || ""01"".equals(check) || ""99"".equals(check)) {
            return false;
        }
        try {
            int modulusResult = calculateModulus(code);
            return (modulusResult == 1);
        } catch (CheckDigitException  ex) {
            return false;
        }
    }","  public void test12()  throws Throwable  {
      IBANCheckDigit iBANCheckDigit0 = new IBANCheckDigit();
      boolean boolean0 = iBANCheckDigit0.isValid(""F56z6R"");
}"
2579,"    public boolean isValid(String code) {
        if (code == null || code.length() < MIN_CODE_LEN) {
            return false;
        }
        String check = code.substring(2,4); // CHECKSTYLE IGNORE MagicNumber
        if (""00"".equals(check) || ""01"".equals(check) || ""99"".equals(check)) {
            return false;
        }
        try {
            int modulusResult = calculateModulus(code);
            return (modulusResult == 1);
        } catch (CheckDigitException  ex) {
            return false;
        }
    }","  public void test13()  throws Throwable  {
      IBANCheckDigit iBANCheckDigit0 = new IBANCheckDigit();
      boolean boolean0 = iBANCheckDigit0.isValid((String) null);
}"
2580,"    protected int calculateModulus(String code, boolean includesCheckDigit) throws CheckDigitException {
        StringBuilder transformed = new  StringBuilder(code.length() * 2); // CHECKSTYLE IGNORE MagicNumber
        if (includesCheckDigit) {
            char checkDigit = code.charAt(code.length()-1); // fetch the last character
            if (!Character.isDigit(checkDigit)){
                throw new CheckDigitException(""Invalid checkdigit[""+ checkDigit+ ""] in "" + code);
            }
        }
        for (int i = 0; i < code.length(); i++) {
            int charValue = Character.getNumericValue(code.charAt(i));
            if (charValue < 0 || charValue > MAX_ALPHANUMERIC_VALUE) {
                throw new CheckDigitException(""Invalid Character["" +
                        (i + 1) + ""] = '"" + charValue + ""'"");
            }
             // this converts alphanumerics to two digits
             // so there is no need to overload toInt()
            transformed.append(charValue);
        }
        return super.calculateModulus(transformed.toString(), includesCheckDigit);
    }","  public void test0()  throws Throwable  {
      ISINCheckDigit iSINCheckDigit0 = new ISINCheckDigit();
      try { 
        iSINCheckDigit0.calculateModulus(""00"", false);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Invalid code, sum is zero
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit"", e);
      }
  }"
2581,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        int weight = POSITION_WEIGHT[rightPos % 2]; // CHECKSTYLE IGNORE MagicNumber
        int weightedValue = charValue * weight;
        return ModulusCheckDigit.sumDigits(weightedValue);
    }","  public void test1()  throws Throwable  {
      ISINCheckDigit iSINCheckDigit0 = new ISINCheckDigit();
      int int0 = iSINCheckDigit0.weightedValue(0, 0, 0);
}"
2582,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        int weight = POSITION_WEIGHT[rightPos % 2]; // CHECKSTYLE IGNORE MagicNumber
        int weightedValue = charValue * weight;
        return ModulusCheckDigit.sumDigits(weightedValue);
    }","  public void test2()  throws Throwable  {
      ISINCheckDigit iSINCheckDigit0 = new ISINCheckDigit();
      int int0 = iSINCheckDigit0.weightedValue(35, 35, 35);
}"
2583,"    protected int calculateModulus(String code, boolean includesCheckDigit) throws CheckDigitException {
        StringBuilder transformed = new  StringBuilder(code.length() * 2); // CHECKSTYLE IGNORE MagicNumber
        if (includesCheckDigit) {
            char checkDigit = code.charAt(code.length()-1); // fetch the last character
            if (!Character.isDigit(checkDigit)){
                throw new CheckDigitException(""Invalid checkdigit[""+ checkDigit+ ""] in "" + code);
            }
        }
        for (int i = 0; i < code.length(); i++) {
            int charValue = Character.getNumericValue(code.charAt(i));
            if (charValue < 0 || charValue > MAX_ALPHANUMERIC_VALUE) {
                throw new CheckDigitException(""Invalid Character["" +
                        (i + 1) + ""] = '"" + charValue + ""'"");
            }
             // this converts alphanumerics to two digits
             // so there is no need to overload toInt()
            transformed.append(charValue);
        }
        return super.calculateModulus(transformed.toString(), includesCheckDigit);
    }","  public void test3()  throws Throwable  {
      ISINCheckDigit iSINCheckDigit0 = new ISINCheckDigit();
      int int0 = iSINCheckDigit0.calculateModulus(""MaqI"", false);
}"
2584,"    protected int calculateModulus(String code, boolean includesCheckDigit) throws CheckDigitException {
        StringBuilder transformed = new  StringBuilder(code.length() * 2); // CHECKSTYLE IGNORE MagicNumber
        if (includesCheckDigit) {
            char checkDigit = code.charAt(code.length()-1); // fetch the last character
            if (!Character.isDigit(checkDigit)){
                throw new CheckDigitException(""Invalid checkdigit[""+ checkDigit+ ""] in "" + code);
            }
        }
        for (int i = 0; i < code.length(); i++) {
            int charValue = Character.getNumericValue(code.charAt(i));
            if (charValue < 0 || charValue > MAX_ALPHANUMERIC_VALUE) {
                throw new CheckDigitException(""Invalid Character["" +
                        (i + 1) + ""] = '"" + charValue + ""'"");
            }
             // this converts alphanumerics to two digits
             // so there is no need to overload toInt()
            transformed.append(charValue);
        }
        return super.calculateModulus(transformed.toString(), includesCheckDigit);
    }","  public void test4()  throws Throwable  {
      ISINCheckDigit iSINCheckDigit0 = (ISINCheckDigit)ISINCheckDigit.ISIN_CHECK_DIGIT;
      int int0 = iSINCheckDigit0.calculateModulus(""e"", false);
}"
2585,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        int weight = POSITION_WEIGHT[rightPos % 2]; // CHECKSTYLE IGNORE MagicNumber
        int weightedValue = charValue * weight;
        return ModulusCheckDigit.sumDigits(weightedValue);
    }","  public void test5()  throws Throwable  {
      ISINCheckDigit iSINCheckDigit0 = (ISINCheckDigit)ISINCheckDigit.ISIN_CHECK_DIGIT;
      // Undeclared exception!
      try { 
        iSINCheckDigit0.weightedValue(0, 0, (-1));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ISINCheckDigit"", e);
      }
  }"
2586,"    protected int calculateModulus(String code, boolean includesCheckDigit) throws CheckDigitException {
        StringBuilder transformed = new  StringBuilder(code.length() * 2); // CHECKSTYLE IGNORE MagicNumber
        if (includesCheckDigit) {
            char checkDigit = code.charAt(code.length()-1); // fetch the last character
            if (!Character.isDigit(checkDigit)){
                throw new CheckDigitException(""Invalid checkdigit[""+ checkDigit+ ""] in "" + code);
            }
        }
        for (int i = 0; i < code.length(); i++) {
            int charValue = Character.getNumericValue(code.charAt(i));
            if (charValue < 0 || charValue > MAX_ALPHANUMERIC_VALUE) {
                throw new CheckDigitException(""Invalid Character["" +
                        (i + 1) + ""] = '"" + charValue + ""'"");
            }
             // this converts alphanumerics to two digits
             // so there is no need to overload toInt()
            transformed.append(charValue);
        }
        return super.calculateModulus(transformed.toString(), includesCheckDigit);
    }","  public void test6()  throws Throwable  {
      ISINCheckDigit iSINCheckDigit0 = new ISINCheckDigit();
      // Undeclared exception!
      try { 
        iSINCheckDigit0.calculateModulus("""", true);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
2587,"    protected int calculateModulus(String code, boolean includesCheckDigit) throws CheckDigitException {
        StringBuilder transformed = new  StringBuilder(code.length() * 2); // CHECKSTYLE IGNORE MagicNumber
        if (includesCheckDigit) {
            char checkDigit = code.charAt(code.length()-1); // fetch the last character
            if (!Character.isDigit(checkDigit)){
                throw new CheckDigitException(""Invalid checkdigit[""+ checkDigit+ ""] in "" + code);
            }
        }
        for (int i = 0; i < code.length(); i++) {
            int charValue = Character.getNumericValue(code.charAt(i));
            if (charValue < 0 || charValue > MAX_ALPHANUMERIC_VALUE) {
                throw new CheckDigitException(""Invalid Character["" +
                        (i + 1) + ""] = '"" + charValue + ""'"");
            }
             // this converts alphanumerics to two digits
             // so there is no need to overload toInt()
            transformed.append(charValue);
        }
        return super.calculateModulus(transformed.toString(), includesCheckDigit);
    }","  public void test7()  throws Throwable  {
      ISINCheckDigit iSINCheckDigit0 = (ISINCheckDigit)ISINCheckDigit.ISIN_CHECK_DIGIT;
      // Undeclared exception!
      try { 
        iSINCheckDigit0.calculateModulus((String) null, true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ISINCheckDigit"", e);
      }
  }"
2588,"    protected int calculateModulus(String code, boolean includesCheckDigit) throws CheckDigitException {
        StringBuilder transformed = new  StringBuilder(code.length() * 2); // CHECKSTYLE IGNORE MagicNumber
        if (includesCheckDigit) {
            char checkDigit = code.charAt(code.length()-1); // fetch the last character
            if (!Character.isDigit(checkDigit)){
                throw new CheckDigitException(""Invalid checkdigit[""+ checkDigit+ ""] in "" + code);
            }
        }
        for (int i = 0; i < code.length(); i++) {
            int charValue = Character.getNumericValue(code.charAt(i));
            if (charValue < 0 || charValue > MAX_ALPHANUMERIC_VALUE) {
                throw new CheckDigitException(""Invalid Character["" +
                        (i + 1) + ""] = '"" + charValue + ""'"");
            }
             // this converts alphanumerics to two digits
             // so there is no need to overload toInt()
            transformed.append(charValue);
        }
        return super.calculateModulus(transformed.toString(), includesCheckDigit);
    }","  public void test8()  throws Throwable  {
      ISINCheckDigit iSINCheckDigit0 = new ISINCheckDigit();
      try { 
        iSINCheckDigit0.calculateModulus(""z@P4"", true);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Invalid Character[2] = '-1'
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ISINCheckDigit"", e);
      }
  }"
2589,"    public ISINCheckDigit() {
        super(10); // CHECKSTYLE IGNORE MagicNumber
    }","  public void test9()  throws Throwable  {
      ISINCheckDigit iSINCheckDigit0 = new ISINCheckDigit();
      boolean boolean0 = iSINCheckDigit0.isValid(""E"");
}"
2590,"    public int getModulus() {
        return modulus;
    }","  public void test0()  throws Throwable  {
      CUSIPCheckDigit cUSIPCheckDigit0 = new CUSIPCheckDigit();
      String string0 = cUSIPCheckDigit0.toCheckDigit(9);
}"
2591,"    protected String toCheckDigit(int charValue)
            throws CheckDigitException {
        if (charValue >= 0 && charValue <= 9) { // CHECKSTYLE IGNORE MagicNumber
            return Integer.toString(charValue);
        }
        throw new CheckDigitException(""Invalid Check Digit Value ="" +
                + charValue);
    }","  public void test1()  throws Throwable  {
      CUSIPCheckDigit cUSIPCheckDigit0 = new CUSIPCheckDigit();
      String string0 = cUSIPCheckDigit0.toCheckDigit(9);
}"
2592,"    public int getModulus() {
        return modulus;
    }","  public void test2()  throws Throwable  {
      ISINCheckDigit iSINCheckDigit0 = new ISINCheckDigit();
      int int0 = iSINCheckDigit0.toInt('0', 1415, 6);
}"
2593,"    protected int toInt(char character, int leftPos, int rightPos)
            throws CheckDigitException {
        if (Character.isDigit(character)) {
            return Character.getNumericValue(character);
        }
        throw new CheckDigitException(""Invalid Character["" +
                leftPos + ""] = '"" + character + ""'"");
    }","  public void test3()  throws Throwable  {
      ISINCheckDigit iSINCheckDigit0 = new ISINCheckDigit();
      int int0 = iSINCheckDigit0.toInt('0', 1415, 6);
}"
2594,"    public int getModulus() {
        return modulus;
    }","  public void test4()  throws Throwable  {
      int[] intArray0 = new int[1];
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0);
      modulusTenCheckDigit0.toInt('D', 1034, 4365);
}"
2595,"    protected String toCheckDigit(int charValue)
            throws CheckDigitException {
        if (charValue >= 0 && charValue <= 9) { // CHECKSTYLE IGNORE MagicNumber
            return Integer.toString(charValue);
        }
        throw new CheckDigitException(""Invalid Check Digit Value ="" +
                + charValue);
    }","  public void test5()  throws Throwable  {
      ABANumberCheckDigit aBANumberCheckDigit0 = new ABANumberCheckDigit();
      String string0 = aBANumberCheckDigit0.toCheckDigit(0);
}"
2596,"    public int getModulus() {
        return modulus;
    }","  public void test6()  throws Throwable  {
      ABANumberCheckDigit aBANumberCheckDigit0 = new ABANumberCheckDigit();
      String string0 = aBANumberCheckDigit0.toCheckDigit(0);
}"
2597,"    public static int sumDigits(int number) {
        int total = 0;
        int todo = number;
        while (todo > 0) {
            total += todo % 10; // CHECKSTYLE IGNORE MagicNumber
            todo  = todo / 10; // CHECKSTYLE IGNORE MagicNumber
        }
        return total;
    }","  public void test7()  throws Throwable  {
      int int0 = ModulusCheckDigit.sumDigits((-1566));
}"
2598,"    protected int calculateModulus(String code, boolean includesCheckDigit) throws CheckDigitException {
        int total = 0;
        for (int i = 0; i < code.length(); i++) {
            int lth = code.length() + (includesCheckDigit ? 0 : 1);
            int leftPos  = i + 1;
            int rightPos = lth - i;
            int charValue = toInt(code.charAt(i), leftPos, rightPos);
            total += weightedValue(charValue, leftPos, rightPos);
        }
        if (total == 0) {
            throw new CheckDigitException(""Invalid code, sum is zero"");
        }
        return total % modulus;
    }","  public void test8()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'K';
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0, false);
      int int0 = modulusTenCheckDigit0.calculateModulus(""4"", false);
}"
2599,"    public int getModulus() {
        return modulus;
    }","  public void test9()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'K';
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0, false);
      int int0 = modulusTenCheckDigit0.calculateModulus(""4"", false);
}"
2600,"    protected int calculateModulus(String code, boolean includesCheckDigit) throws CheckDigitException {
        int total = 0;
        for (int i = 0; i < code.length(); i++) {
            int lth = code.length() + (includesCheckDigit ? 0 : 1);
            int leftPos  = i + 1;
            int rightPos = lth - i;
            int charValue = toInt(code.charAt(i), leftPos, rightPos);
            total += weightedValue(charValue, leftPos, rightPos);
        }
        if (total == 0) {
            throw new CheckDigitException(""Invalid code, sum is zero"");
        }
        return total % modulus;
    }","  public void test10()  throws Throwable  {
      ISSNCheckDigit iSSNCheckDigit0 = new ISSNCheckDigit();
      int int0 = iSSNCheckDigit0.calculateModulus(""99"", false);
}"
2601,"    public int getModulus() {
        return modulus;
    }","  public void test11()  throws Throwable  {
      ISSNCheckDigit iSSNCheckDigit0 = new ISSNCheckDigit();
      int int0 = iSSNCheckDigit0.calculateModulus(""99"", false);
}"
2602,"    protected int calculateModulus(String code, boolean includesCheckDigit) throws CheckDigitException {
        int total = 0;
        for (int i = 0; i < code.length(); i++) {
            int lth = code.length() + (includesCheckDigit ? 0 : 1);
            int leftPos  = i + 1;
            int rightPos = lth - i;
            int charValue = toInt(code.charAt(i), leftPos, rightPos);
            total += weightedValue(charValue, leftPos, rightPos);
        }
        if (total == 0) {
            throw new CheckDigitException(""Invalid code, sum is zero"");
        }
        return total % modulus;
    }","  public void test12()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1449);
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0, true);
      int int0 = modulusTenCheckDigit0.calculateModulus(""j"", true);
}"
2603,"    protected int toInt(char character, int leftPos, int rightPos)
            throws CheckDigitException {
        if (Character.isDigit(character)) {
            return Character.getNumericValue(character);
        }
        throw new CheckDigitException(""Invalid Character["" +
                leftPos + ""] = '"" + character + ""'"");
    }","  public void test13()  throws Throwable  {
      ISBN10CheckDigit iSBN10CheckDigit0 = new ISBN10CheckDigit();
      try { 
        iSBN10CheckDigit0.toInt('x', 33, 'x');
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Invalid Character[33] = 'x'
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit"", e);
      }
  }"
2604,"    protected int calculateModulus(String code, boolean includesCheckDigit) throws CheckDigitException {
        int total = 0;
        for (int i = 0; i < code.length(); i++) {
            int lth = code.length() + (includesCheckDigit ? 0 : 1);
            int leftPos  = i + 1;
            int rightPos = lth - i;
            int charValue = toInt(code.charAt(i), leftPos, rightPos);
            total += weightedValue(charValue, leftPos, rightPos);
        }
        if (total == 0) {
            throw new CheckDigitException(""Invalid code, sum is zero"");
        }
        return total % modulus;
    }","  public void test14()  throws Throwable  {
      LuhnCheckDigit luhnCheckDigit0 = (LuhnCheckDigit)LuhnCheckDigit.LUHN_CHECK_DIGIT;
      try { 
        luhnCheckDigit0.calculateModulus(""gzHlIJA>}us{D9"", false);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Invalid Character[1] = 'g'
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit"", e);
      }
  }"
2605,"    protected int calculateModulus(String code, boolean includesCheckDigit) throws CheckDigitException {
        int total = 0;
        for (int i = 0; i < code.length(); i++) {
            int lth = code.length() + (includesCheckDigit ? 0 : 1);
            int leftPos  = i + 1;
            int rightPos = lth - i;
            int charValue = toInt(code.charAt(i), leftPos, rightPos);
            total += weightedValue(charValue, leftPos, rightPos);
        }
        if (total == 0) {
            throw new CheckDigitException(""Invalid code, sum is zero"");
        }
        return total % modulus;
    }","  public void test15()  throws Throwable  {
      ISINCheckDigit iSINCheckDigit0 = new ISINCheckDigit();
      // Undeclared exception!
      try { 
        iSINCheckDigit0.calculateModulus("""", true);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
2606,"    protected int calculateModulus(String code, boolean includesCheckDigit) throws CheckDigitException {
        int total = 0;
        for (int i = 0; i < code.length(); i++) {
            int lth = code.length() + (includesCheckDigit ? 0 : 1);
            int leftPos  = i + 1;
            int rightPos = lth - i;
            int charValue = toInt(code.charAt(i), leftPos, rightPos);
            total += weightedValue(charValue, leftPos, rightPos);
        }
        if (total == 0) {
            throw new CheckDigitException(""Invalid code, sum is zero"");
        }
        return total % modulus;
    }","  public void test16()  throws Throwable  {
      EAN13CheckDigit eAN13CheckDigit0 = new EAN13CheckDigit();
      // Undeclared exception!
      try { 
        eAN13CheckDigit0.calculateModulus((String) null, false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit"", e);
      }
  }"
2607,"    protected int calculateModulus(String code, boolean includesCheckDigit) throws CheckDigitException {
        int total = 0;
        for (int i = 0; i < code.length(); i++) {
            int lth = code.length() + (includesCheckDigit ? 0 : 1);
            int leftPos  = i + 1;
            int rightPos = lth - i;
            int charValue = toInt(code.charAt(i), leftPos, rightPos);
            total += weightedValue(charValue, leftPos, rightPos);
        }
        if (total == 0) {
            throw new CheckDigitException(""Invalid code, sum is zero"");
        }
        return total % modulus;
    }","  public void test17()  throws Throwable  {
      int[] intArray0 = new int[0];
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0);
      // Undeclared exception!
      try { 
        modulusTenCheckDigit0.calculateModulus(""l~"", true);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusTenCheckDigit"", e);
      }
  }"
2608,"    public String calculate(String code) throws CheckDigitException {
        if (code == null || code.length() == 0) {
            throw new CheckDigitException(""Code is missing"");
        }
        int modulusResult = calculateModulus(code, false);
        int charValue = (modulus - modulusResult) % modulus;
        return toCheckDigit(charValue);
    }","  public void test18()  throws Throwable  {
      int[] intArray0 = new int[0];
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0, false, false);
      // Undeclared exception!
      try { 
        modulusTenCheckDigit0.calculate(""Invalid Character["");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusTenCheckDigit"", e);
      }
  }"
2609,"    public boolean isValid(String code) {
        if (code == null || code.length() == 0) {
            return false;
        }
        try {
            int modulusResult = calculateModulus(code, true);
            return (modulusResult == 0);
        } catch (CheckDigitException  ex) {
            return false;
        }
    }","  public void test19()  throws Throwable  {
      SedolCheckDigit sedolCheckDigit0 = (SedolCheckDigit)SedolCheckDigit.SEDOL_CHECK_DIGIT;
      boolean boolean0 = sedolCheckDigit0.isValid(""01"");
}"
2610,"    public boolean isValid(String code) {
        if (code == null || code.length() == 0) {
            return false;
        }
        try {
            int modulusResult = calculateModulus(code, true);
            return (modulusResult == 0);
        } catch (CheckDigitException  ex) {
            return false;
        }
    }","  public void test20()  throws Throwable  {
      ISBN10CheckDigit iSBN10CheckDigit0 = new ISBN10CheckDigit();
      boolean boolean0 = iSBN10CheckDigit0.isValid(""94"");
}"
2611,"    public int getModulus() {
        return modulus;
    }","  public void test21()  throws Throwable  {
      ISBN10CheckDigit iSBN10CheckDigit0 = new ISBN10CheckDigit();
      boolean boolean0 = iSBN10CheckDigit0.isValid(""94"");
}"
2612,"    public static int sumDigits(int number) {
        int total = 0;
        int todo = number;
        while (todo > 0) {
            total += todo % 10; // CHECKSTYLE IGNORE MagicNumber
            todo  = todo / 10; // CHECKSTYLE IGNORE MagicNumber
        }
        return total;
    }","  public void test22()  throws Throwable  {
      int int0 = ModulusCheckDigit.sumDigits('i');
}"
2613,"    protected String toCheckDigit(int charValue)
            throws CheckDigitException {
        if (charValue >= 0 && charValue <= 9) { // CHECKSTYLE IGNORE MagicNumber
            return Integer.toString(charValue);
        }
        throw new CheckDigitException(""Invalid Check Digit Value ="" +
                + charValue);
    }","  public void test23()  throws Throwable  {
      int[] intArray0 = new int[8];
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0);
      try { 
        modulusTenCheckDigit0.toCheckDigit('v');
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Invalid Check Digit Value =118
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit"", e);
      }
  }"
2614,"    protected String toCheckDigit(int charValue)
            throws CheckDigitException {
        if (charValue >= 0 && charValue <= 9) { // CHECKSTYLE IGNORE MagicNumber
            return Integer.toString(charValue);
        }
        throw new CheckDigitException(""Invalid Check Digit Value ="" +
                + charValue);
    }","  public void test24()  throws Throwable  {
      ISSNCheckDigit iSSNCheckDigit0 = new ISSNCheckDigit();
      try { 
        iSSNCheckDigit0.toCheckDigit((-1));
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Invalid Check Digit Value =-1
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit"", e);
      }
  }"
2615,"    public String calculate(String code) throws CheckDigitException {
        if (code == null || code.length() == 0) {
            throw new CheckDigitException(""Code is missing"");
        }
        int modulusResult = calculateModulus(code, false);
        int charValue = (modulus - modulusResult) % modulus;
        return toCheckDigit(charValue);
    }","  public void test25()  throws Throwable  {
      ISBN10CheckDigit iSBN10CheckDigit0 = new ISBN10CheckDigit();
      String string0 = iSBN10CheckDigit0.calculate(""99"");
}"
2616,"    public int getModulus() {
        return modulus;
    }","  public void test26()  throws Throwable  {
      ISBN10CheckDigit iSBN10CheckDigit0 = new ISBN10CheckDigit();
      boolean boolean0 = iSBN10CheckDigit0.isValid(""+_"");
}"
2617,"    public boolean isValid(String code) {
        if (code == null || code.length() == 0) {
            return false;
        }
        try {
            int modulusResult = calculateModulus(code, true);
            return (modulusResult == 0);
        } catch (CheckDigitException  ex) {
            return false;
        }
    }","  public void test27()  throws Throwable  {
      ISBN10CheckDigit iSBN10CheckDigit0 = new ISBN10CheckDigit();
      boolean boolean0 = iSBN10CheckDigit0.isValid(""+_"");
}"
2618,"    public String calculate(String code) throws CheckDigitException {
        if (code == null || code.length() == 0) {
            throw new CheckDigitException(""Code is missing"");
        }
        int modulusResult = calculateModulus(code, false);
        int charValue = (modulus - modulusResult) % modulus;
        return toCheckDigit(charValue);
    }","  public void test28()  throws Throwable  {
      SedolCheckDigit sedolCheckDigit0 = new SedolCheckDigit();
      try { 
        sedolCheckDigit0.calculate("""");
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Code is missing
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit"", e);
      }
  }"
2619,"    public String calculate(String code) throws CheckDigitException {
        if (code == null || code.length() == 0) {
            throw new CheckDigitException(""Code is missing"");
        }
        int modulusResult = calculateModulus(code, false);
        int charValue = (modulus - modulusResult) % modulus;
        return toCheckDigit(charValue);
    }","  public void test29()  throws Throwable  {
      ABANumberCheckDigit aBANumberCheckDigit0 = new ABANumberCheckDigit();
      try { 
        aBANumberCheckDigit0.calculate((String) null);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Code is missing
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit"", e);
      }
  }"
2620,"    public boolean isValid(String code) {
        if (code == null || code.length() == 0) {
            return false;
        }
        try {
            int modulusResult = calculateModulus(code, true);
            return (modulusResult == 0);
        } catch (CheckDigitException  ex) {
            return false;
        }
    }","  public void test30()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-939);
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0, true);
      boolean boolean0 = modulusTenCheckDigit0.isValid(""7"");
}"
2621,"    public int getModulus() {
        return modulus;
    }","  public void test31()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-939);
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0, true);
      boolean boolean0 = modulusTenCheckDigit0.isValid(""7"");
}"
2622,"    public boolean isValid(String code) {
        if (code == null || code.length() == 0) {
            return false;
        }
        try {
            int modulusResult = calculateModulus(code, true);
            return (modulusResult == 0);
        } catch (CheckDigitException  ex) {
            return false;
        }
    }","  public void test32()  throws Throwable  {
      SedolCheckDigit sedolCheckDigit0 = new SedolCheckDigit();
      boolean boolean0 = sedolCheckDigit0.isValid("""");
}"
2623,"    public int getModulus() {
        return modulus;
    }","  public void test33()  throws Throwable  {
      SedolCheckDigit sedolCheckDigit0 = new SedolCheckDigit();
      boolean boolean0 = sedolCheckDigit0.isValid("""");
}"
2624,"    public boolean isValid(String code) {
        if (code == null || code.length() == 0) {
            return false;
        }
        try {
            int modulusResult = calculateModulus(code, true);
            return (modulusResult == 0);
        } catch (CheckDigitException  ex) {
            return false;
        }
    }","  public void test34()  throws Throwable  {
      int[] intArray0 = new int[10];
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0, true);
      boolean boolean0 = modulusTenCheckDigit0.isValid(""4"");
}"
2625,"    public int getModulus() {
        return modulus;
    }","  public void test35()  throws Throwable  {
      int[] intArray0 = new int[10];
      ModulusTenCheckDigit modulusTenCheckDigit0 = new ModulusTenCheckDigit(intArray0, true);
      boolean boolean0 = modulusTenCheckDigit0.isValid(""4"");
}"
2626,"    public int getModulus() {
        return modulus;
    }","  public void test36()  throws Throwable  {
      ISSNCheckDigit iSSNCheckDigit0 = new ISSNCheckDigit();
      boolean boolean0 = iSSNCheckDigit0.isValid((String) null);
}"
2627,"    public boolean isValid(String code) {
        if (code == null || code.length() == 0) {
            return false;
        }
        try {
            int modulusResult = calculateModulus(code, true);
            return (modulusResult == 0);
        } catch (CheckDigitException  ex) {
            return false;
        }
    }","  public void test37()  throws Throwable  {
      ISSNCheckDigit iSSNCheckDigit0 = new ISSNCheckDigit();
      boolean boolean0 = iSSNCheckDigit0.isValid((String) null);
}"
2628,"    public int getModulus() {
        return modulus;
    }","  public void test38()  throws Throwable  {
      ISINCheckDigit iSINCheckDigit0 = new ISINCheckDigit();
      int int0 = iSINCheckDigit0.getModulus();
}"
2629,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        int weight = POSITION_WEIGHT[rightPos % 3]; // CHECKSTYLE IGNORE MagicNumber
        return charValue * weight;
    }","  public void test0()  throws Throwable  {
      ABANumberCheckDigit aBANumberCheckDigit0 = new ABANumberCheckDigit();
      int int0 = aBANumberCheckDigit0.weightedValue(0, 0, 0);
}"
2630,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        int weight = POSITION_WEIGHT[rightPos % 3]; // CHECKSTYLE IGNORE MagicNumber
        return charValue * weight;
    }","  public void test1()  throws Throwable  {
      ABANumberCheckDigit aBANumberCheckDigit0 = new ABANumberCheckDigit();
      int int0 = aBANumberCheckDigit0.weightedValue(10, 0, 12);
}"
2631,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        int weight = POSITION_WEIGHT[rightPos % 3]; // CHECKSTYLE IGNORE MagicNumber
        return charValue * weight;
    }","  public void test2()  throws Throwable  {
      ABANumberCheckDigit aBANumberCheckDigit0 = (ABANumberCheckDigit)ABANumberCheckDigit.ABAN_CHECK_DIGIT;
      int int0 = aBANumberCheckDigit0.weightedValue((-941), (-941), 10);
}"
2632,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        int weight = POSITION_WEIGHT[rightPos % 3]; // CHECKSTYLE IGNORE MagicNumber
        return charValue * weight;
    }","  public void test3()  throws Throwable  {
      ABANumberCheckDigit aBANumberCheckDigit0 = new ABANumberCheckDigit();
      // Undeclared exception!
      try { 
        aBANumberCheckDigit0.weightedValue(1, (-1309), (-1309));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ABANumberCheckDigit"", e);
      }
  }"
2633,"    public ISSNCheckDigit() {
        super(11); // CHECKSTYLE IGNORE MagicNumber
    }","  public void test0()  throws Throwable  {
      ISSNCheckDigit iSSNCheckDigit0 = new ISSNCheckDigit();
      boolean boolean0 = iSSNCheckDigit0.isValid(""^"");
}"
2634,"    protected String toCheckDigit(int charValue) throws CheckDigitException {
        if (charValue == 10) { // CHECKSTYLE IGNORE MagicNumber
            return ""X"";
        }
        return super.toCheckDigit(charValue);
    }","  public void test1()  throws Throwable  {
      ISSNCheckDigit iSSNCheckDigit0 = new ISSNCheckDigit();
      try { 
        iSSNCheckDigit0.toCheckDigit(891);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Invalid Check Digit Value =891
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit"", e);
      }
  }"
2635,"    protected int weightedValue(int charValue, int leftPos, int rightPos) throws CheckDigitException {
        return charValue * (9 - leftPos); // CHECKSTYLE IGNORE MagicNumber
    }","  public void test2()  throws Throwable  {
      ISSNCheckDigit iSSNCheckDigit0 = new ISSNCheckDigit();
      int int0 = iSSNCheckDigit0.weightedValue(0, (-2779), 0);
}"
2636,"    protected int weightedValue(int charValue, int leftPos, int rightPos) throws CheckDigitException {
        return charValue * (9 - leftPos); // CHECKSTYLE IGNORE MagicNumber
    }","  public void test3()  throws Throwable  {
      ISSNCheckDigit iSSNCheckDigit0 = (ISSNCheckDigit)ISSNCheckDigit.ISSN_CHECK_DIGIT;
      int int0 = iSSNCheckDigit0.weightedValue(3, 3, 3);
}"
2637,"    protected int weightedValue(int charValue, int leftPos, int rightPos) throws CheckDigitException {
        return charValue * (9 - leftPos); // CHECKSTYLE IGNORE MagicNumber
    }","  public void test4()  throws Throwable  {
      ISSNCheckDigit iSSNCheckDigit0 = (ISSNCheckDigit)ISSNCheckDigit.ISSN_CHECK_DIGIT;
      int int0 = iSSNCheckDigit0.weightedValue((-3501), 0, (-94));
}"
2638,"    protected int toInt(char character, int leftPos, int rightPos)
            throws CheckDigitException {
        if (rightPos == 1 && character == 'X') {
            return 10; // CHECKSTYLE IGNORE MagicNumber
        }
        return super.toInt(character, leftPos, rightPos);
    }","  public void test5()  throws Throwable  {
      ISSNCheckDigit iSSNCheckDigit0 = (ISSNCheckDigit)ISSNCheckDigit.ISSN_CHECK_DIGIT;
      int int0 = iSSNCheckDigit0.toInt('0', 0, (-94));
}"
2639,"    protected int toInt(char character, int leftPos, int rightPos)
            throws CheckDigitException {
        if (rightPos == 1 && character == 'X') {
            return 10; // CHECKSTYLE IGNORE MagicNumber
        }
        return super.toInt(character, leftPos, rightPos);
    }","  public void test6()  throws Throwable  {
      ISSNCheckDigit iSSNCheckDigit0 = (ISSNCheckDigit)ISSNCheckDigit.ISSN_CHECK_DIGIT;
      int int0 = iSSNCheckDigit0.toInt('7', 0, 0);
}"
2640,"    protected int toInt(char character, int leftPos, int rightPos)
            throws CheckDigitException {
        if (rightPos == 1 && character == 'X') {
            return 10; // CHECKSTYLE IGNORE MagicNumber
        }
        return super.toInt(character, leftPos, rightPos);
    }","  public void test7()  throws Throwable  {
      ISSNCheckDigit iSSNCheckDigit0 = new ISSNCheckDigit();
      try { 
        iSSNCheckDigit0.toInt('f', 1488, 1614);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Invalid Character[1488] = 'f'
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit"", e);
      }
  }"
2641,"    protected String toCheckDigit(int charValue) throws CheckDigitException {
        if (charValue == 10) { // CHECKSTYLE IGNORE MagicNumber
            return ""X"";
        }
        return super.toCheckDigit(charValue);
    }","  public void test8()  throws Throwable  {
      ISSNCheckDigit iSSNCheckDigit0 = (ISSNCheckDigit)ISSNCheckDigit.ISSN_CHECK_DIGIT;
      try { 
        iSSNCheckDigit0.toCheckDigit((-3501));
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Invalid Check Digit Value =-3501
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit"", e);
      }
  }"
2642,"    public ISSNCheckDigit() {
        super(11); // CHECKSTYLE IGNORE MagicNumber
    }","  public void test9()  throws Throwable  {
      ISSNCheckDigit iSSNCheckDigit0 = new ISSNCheckDigit();
      boolean boolean0 = iSSNCheckDigit0.isValid(""9"");
}"
2643,"    protected String toCheckDigit(int charValue) throws CheckDigitException {
        if (charValue == 10) { // CHECKSTYLE IGNORE MagicNumber
            return ""X"";
        }
        return super.toCheckDigit(charValue);
    }","  public void test10()  throws Throwable  {
      ISSNCheckDigit iSSNCheckDigit0 = new ISSNCheckDigit();
      String string0 = iSSNCheckDigit0.toCheckDigit(10);
}"
2644,"    public ISSNCheckDigit() {
        super(11); // CHECKSTYLE IGNORE MagicNumber
    }","  public void test11()  throws Throwable  {
      ISSNCheckDigit iSSNCheckDigit0 = new ISSNCheckDigit();
      boolean boolean0 = iSSNCheckDigit0.isValid(""X"");
}"
2645,"    public String calculate(String code) throws CheckDigitException {
        if (code == null || code.length() == 0) {
            throw new CheckDigitException(""Code is missing"");
        }
        int checksum = calculateChecksum(code, false);
        return Integer.toString(INV_TABLE[checksum]);
    }","  public void test0()  throws Throwable  {
      VerhoeffCheckDigit verhoeffCheckDigit0 = new VerhoeffCheckDigit();
      String string0 = verhoeffCheckDigit0.calculate(""01"");
}"
2646,"    public boolean isValid(String code) {
        if (code == null || code.length() == 0) {
            return false;
        }
        try {
            return (calculateChecksum(code, true) == 0);
        } catch (CheckDigitException e) {
            return false;
        }
    }","  public void test1()  throws Throwable  {
      VerhoeffCheckDigit verhoeffCheckDigit0 = new VerhoeffCheckDigit();
      boolean boolean0 = verhoeffCheckDigit0.isValid(""'Sq73"");
}"
2647,"    public String calculate(String code) throws CheckDigitException {
        if (code == null || code.length() == 0) {
            throw new CheckDigitException(""Code is missing"");
        }
        int checksum = calculateChecksum(code, false);
        return Integer.toString(INV_TABLE[checksum]);
    }","  public void test2()  throws Throwable  {
      VerhoeffCheckDigit verhoeffCheckDigit0 = new VerhoeffCheckDigit();
      try { 
        verhoeffCheckDigit0.calculate(""LD=>+k}.]mXTt3@9"");
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Invalid Character[1] = '127'
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.VerhoeffCheckDigit"", e);
      }
  }"
2648,"    public String calculate(String code) throws CheckDigitException {
        if (code == null || code.length() == 0) {
            throw new CheckDigitException(""Code is missing"");
        }
        int checksum = calculateChecksum(code, false);
        return Integer.toString(INV_TABLE[checksum]);
    }","  public void test3()  throws Throwable  {
      VerhoeffCheckDigit verhoeffCheckDigit0 = (VerhoeffCheckDigit)VerhoeffCheckDigit.VERHOEFF_CHECK_DIGIT;
      try { 
        verhoeffCheckDigit0.calculate("""");
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Code is missing
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.VerhoeffCheckDigit"", e);
      }
  }"
2649,"    public String calculate(String code) throws CheckDigitException {
        if (code == null || code.length() == 0) {
            throw new CheckDigitException(""Code is missing"");
        }
        int checksum = calculateChecksum(code, false);
        return Integer.toString(INV_TABLE[checksum]);
    }","  public void test4()  throws Throwable  {
      VerhoeffCheckDigit verhoeffCheckDigit0 = new VerhoeffCheckDigit();
      try { 
        verhoeffCheckDigit0.calculate((String) null);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Code is missing
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.VerhoeffCheckDigit"", e);
      }
  }"
2650,"    public boolean isValid(String code) {
        if (code == null || code.length() == 0) {
            return false;
        }
        try {
            return (calculateChecksum(code, true) == 0);
        } catch (CheckDigitException e) {
            return false;
        }
    }","  public void test5()  throws Throwable  {
      VerhoeffCheckDigit verhoeffCheckDigit0 = new VerhoeffCheckDigit();
      boolean boolean0 = verhoeffCheckDigit0.isValid(""0"");
}"
2651,"    public boolean isValid(String code) {
        if (code == null || code.length() == 0) {
            return false;
        }
        try {
            return (calculateChecksum(code, true) == 0);
        } catch (CheckDigitException e) {
            return false;
        }
    }","  public void test6()  throws Throwable  {
      VerhoeffCheckDigit verhoeffCheckDigit0 = new VerhoeffCheckDigit();
      boolean boolean0 = verhoeffCheckDigit0.isValid(""4"");
}"
2652,"    public boolean isValid(String code) {
        if (code == null || code.length() == 0) {
            return false;
        }
        try {
            return (calculateChecksum(code, true) == 0);
        } catch (CheckDigitException e) {
            return false;
        }
    }","  public void test7()  throws Throwable  {
      VerhoeffCheckDigit verhoeffCheckDigit0 = new VerhoeffCheckDigit();
      boolean boolean0 = verhoeffCheckDigit0.isValid("""");
}"
2653,"    public boolean isValid(String code) {
        if (code == null || code.length() == 0) {
            return false;
        }
        try {
            return (calculateChecksum(code, true) == 0);
        } catch (CheckDigitException e) {
            return false;
        }
    }","  public void test8()  throws Throwable  {
      VerhoeffCheckDigit verhoeffCheckDigit0 = new VerhoeffCheckDigit();
      boolean boolean0 = verhoeffCheckDigit0.isValid((String) null);
}"
2654,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        int weight = POSITION_WEIGHT[rightPos % 2]; // CHECKSTYLE IGNORE MagicNumber
        int weightedValue = charValue * weight;
        return weightedValue > 9 ? (weightedValue - 9) : weightedValue; // CHECKSTYLE IGNORE MagicNumber
    }","  public void test0()  throws Throwable  {
      LuhnCheckDigit luhnCheckDigit0 = (LuhnCheckDigit)LuhnCheckDigit.LUHN_CHECK_DIGIT;
      int int0 = luhnCheckDigit0.weightedValue(3179, 3179, (-3772));
}"
2655,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        int weight = POSITION_WEIGHT[rightPos % 2]; // CHECKSTYLE IGNORE MagicNumber
        int weightedValue = charValue * weight;
        return weightedValue > 9 ? (weightedValue - 9) : weightedValue; // CHECKSTYLE IGNORE MagicNumber
    }","  public void test1()  throws Throwable  {
      LuhnCheckDigit luhnCheckDigit0 = (LuhnCheckDigit)LuhnCheckDigit.LUHN_CHECK_DIGIT;
      int int0 = luhnCheckDigit0.weightedValue(9, 0, 9);
}"
2656,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        int weight = POSITION_WEIGHT[rightPos % 2]; // CHECKSTYLE IGNORE MagicNumber
        int weightedValue = charValue * weight;
        return weightedValue > 9 ? (weightedValue - 9) : weightedValue; // CHECKSTYLE IGNORE MagicNumber
    }","  public void test2()  throws Throwable  {
      LuhnCheckDigit luhnCheckDigit0 = (LuhnCheckDigit)LuhnCheckDigit.LUHN_CHECK_DIGIT;
      // Undeclared exception!
      try { 
        luhnCheckDigit0.weightedValue(2866, (-1), (-1));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException(""org.apache.commons.validator.routines.checkdigit.LuhnCheckDigit"", e);
      }
  }"
2657,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        int weight = POSITION_WEIGHT[rightPos % 2]; // CHECKSTYLE IGNORE MagicNumber
        int weightedValue = charValue * weight;
        return weightedValue > 9 ? (weightedValue - 9) : weightedValue; // CHECKSTYLE IGNORE MagicNumber
    }","  public void test3()  throws Throwable  {
      LuhnCheckDigit luhnCheckDigit0 = (LuhnCheckDigit)LuhnCheckDigit.LUHN_CHECK_DIGIT;
      int int0 = luhnCheckDigit0.weightedValue(0, (-1), 48);
}"
2658,"    protected int weightedValue(int charValue, int leftPos, int rightPos) {
        int weight = POSITION_WEIGHT[rightPos % 2]; // CHECKSTYLE IGNORE MagicNumber
        int weightedValue = charValue * weight;
        return weightedValue > 9 ? (weightedValue - 9) : weightedValue; // CHECKSTYLE IGNORE MagicNumber
    }","  public void test4()  throws Throwable  {
      LuhnCheckDigit luhnCheckDigit0 = new LuhnCheckDigit();
      int int0 = luhnCheckDigit0.weightedValue((-1530), (-1250), (-1250));
}"
