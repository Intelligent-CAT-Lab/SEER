15576
Test: public void test060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test060"); org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine1 = posixParser0.cmd; org.apache.commons.cli.CommandLine commandLine2 = new org.apache.commons.cli.CommandLine(); java.lang.String str5 = commandLine2.getOptionValue('#', ""); java.util.Properties properties7 = commandLine2.getOptionProperties(""); posixParser0.processProperties(properties7); posixParser0.burstToken("", true); posixParser0.burstToken("", false); org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options(); java.util.Collection collection16 = options15.getOptions(); java.util.List list17 = options15.getRequiredOptions(); java.lang.String str18 = options15.toString(); org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); java.util.Collection collection21 = options20.getOptions(); org.apache.commons.cli.Options options25 = options20.addOption("", true, "[ option: :: ]"); org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine27 = posixParser26.cmd; org.apache.commons.cli.CommandLine commandLine28 = new org.apache.commons.cli.CommandLine(); java.lang.String str31 = commandLine28.getOptionValue('#', ""); java.util.Properties properties33 = commandLine28.getOptionProperties(""); posixParser26.processProperties(properties33); posixParser26.burstToken("", true); java.util.List list38 = posixParser26.getRequiredOptions(); org.apache.commons.cli.CommandLine commandLine39 = new org.apache.commons.cli.CommandLine(); java.lang.String str42 = commandLine39.getOptionValue('#', ""); boolean boolean44 = commandLine39.hasOption(' '); java.lang.String[] strArray46 = commandLine39.getOptionValues('4'); posixParser26.cmd = commandLine39; org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options(); java.util.Collection collection49 = options48.getOptions(); java.util.List list50 = options48.getRequiredOptions(); org.apache.commons.cli.PosixParser posixParser51 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine52 = posixParser51.cmd; org.apache.commons.cli.CommandLine commandLine53 = new org.apache.commons.cli.CommandLine(); java.lang.String str56 = commandLine53.getOptionValue('#', ""); java.util.Properties properties58 = commandLine53.getOptionProperties(""); posixParser51.processProperties(properties58); posixParser51.burstToken("", true); org.apache.commons.cli.Options options63 = null; org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine(); java.lang.String str67 = commandLine64.getOptionValue('#', ""); java.lang.String str69 = commandLine64.getOptionValue(' '); java.lang.String[] strArray70 = commandLine64.getArgs(); java.lang.String[] strArray72 = posixParser51.flatten(options63, strArray70, true); org.apache.commons.cli.CommandLine commandLine73 = posixParser26.parse(options48, strArray70); org.apache.commons.cli.CommandLine commandLine74 = new org.apache.commons.cli.CommandLine(); java.lang.String str77 = commandLine74.getOptionValue('#', ""); java.util.Properties properties79 = commandLine74.getOptionProperties(""); org.apache.commons.cli.CommandLine commandLine80 = posixParser19.parse(options20, strArray70, properties79); org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options15, strArray70); org.apache.commons.cli.Option option85 = new org.apache.commons.cli.Option("", false, ""); boolean boolean86 = option85.hasOptionalArg(); org.apache.commons.cli.MissingOptionException missingOptionException88 = new org.apache.commons.cli.MissingOptionException(""); org.apache.commons.cli.MissingOptionException missingOptionException90 = new org.apache.commons.cli.MissingOptionException(""); missingOptionException88.addSuppressed((java.lang.Throwable) missingOptionException90); boolean boolean92 = option85.equals((java.lang.Object) missingOptionException90); boolean boolean93 = option85.hasValueSeparator(); option85.setArgName("arg"); java.lang.String str96 = option85.getKey(); option85.setValueSeparator('a'); org.apache.commons.cli.Options options99 = options15.addOption(option85); } ] [ long {} ]" + "'", str18, "[ Options: [ short {} ] [ long {} ]"); }
Code: protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) { init(); this.options = options; Iterator iter = Arrays.asList(arguments).iterator(); while (iter.hasNext()) { String token = (String) iter.next(); if (token.startsWith("--")) { int pos = token.indexOf('='); String opt = pos == -1 ? token : token.substring(0, pos); if (!options.hasOption(opt) && stopAtNonOption) { process(token); } else { tokens.add(opt); if (pos != -1) { tokens.add(token.substring(pos + 1)); } } } else if ("-".equals(token)) { tokens.add(token); } else if (token.startsWith("-")) { if (token.length() == 2) { processOptionToken(token, stopAtNonOption); } else if (options.hasOption(token)) { tokens.add(token); } else { burstToken(token, stopAtNonOption); } } else if (stopAtNonOption) { process(token); } else { tokens.add(token); } gobble(iter); } return (String[]) tokens.toArray(new String[tokens.size()]); }
tensor([[0.0098, 0.0024, 0.0103,  ..., 0.0096, 0.0063, 0.0021],
        [0.0088, 0.0022, 0.0098,  ..., 0.0082, 0.0067, 0.0022],
        [0.0083, 0.0036, 0.0110,  ..., 0.0098, 0.0064, 0.0028],
        ...,
        [0.0094, 0.0033, 0.0107,  ..., 0.0091, 0.0064, 0.0025],
        [0.0095, 0.0018, 0.0134,  ..., 0.0116, 0.0078, 0.0018],
        [0.0092, 0.0022, 0.0094,  ..., 0.0120, 0.0070, 0.0023]])