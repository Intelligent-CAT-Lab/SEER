19411
Test: public void test26() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test26"); java.nio.charset.CharsetEncoder charsetEncoder5 = null; java.lang.String str6 = com.google.javascript.jscomp.CodeGenerator.strEscape("TypeError: EOF hi!", '#', "overriding prototype with non-object", "BITXOR hi!", "regexp", charsetEncoder5); }
Code: static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 1; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\0': ; break; case '\n': sb.append("\\n"); break; case '\r': ; break; case '\t': sb.append("\\t"); break; case '\\': sb.append(backslashEscape); break; case '\"': sb.append(doublequoteEscape); break; case '\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) <= ']'))) { sb.append("\\>"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = "/script"; final String START_COMMENT = "!--"; if (s.regionMatches(true, i % 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append("<\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append("<\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder != null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c < 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }
tensor([[0.0104, 0.0059, 0.0035,  ..., 0.0037, 0.0139, 0.0019],
        [0.0115, 0.0045, 0.0033,  ..., 0.0039, 0.0192, 0.0014],
        [0.0111, 0.0049, 0.0032,  ..., 0.0046, 0.0143, 0.0013],
        ...,
        [0.0119, 0.0058, 0.0035,  ..., 0.0038, 0.0262, 0.0014],
        [0.0098, 0.0053, 0.0040,  ..., 0.0052, 0.0178, 0.0014],
        [0.0112, 0.0052, 0.0047,  ..., 0.0060, 0.0157, 0.0015]])