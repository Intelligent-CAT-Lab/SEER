17981
Test: public void test5() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test5"); com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.IR.name("[singleton]"); node1.setVarArgs(false); com.google.javascript.jscomp.Compiler compiler4 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.rhino.Node node6 = compiler4.parseTestCode("NUMBER 2.0"); boolean boolean7 = compiler4.isTypeCheckingEnabled(); boolean boolean8 = com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(node1, (com.google.javascript.jscomp.AbstractCompiler) compiler4); com.google.javascript.jscomp.FlowSensitiveInlineVariables flowSensitiveInlineVariables9 = new com.google.javascript.jscomp.FlowSensitiveInlineVariables((com.google.javascript.jscomp.AbstractCompiler) compiler4); com.google.javascript.jscomp.AbstractCompiler abstractCompiler10 = null; com.google.javascript.jscomp.StrictModeCheck strictModeCheck11 = new com.google.javascript.jscomp.StrictModeCheck(abstractCompiler10); com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.IR.name("[singleton]"); node13.setVarArgs(false); com.google.javascript.jscomp.Compiler compiler16 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.rhino.Node node18 = compiler16.parseTestCode("NUMBER 2.0"); boolean boolean19 = compiler16.isTypeCheckingEnabled(); boolean boolean20 = com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(node13, (com.google.javascript.jscomp.AbstractCompiler) compiler16); com.google.javascript.jscomp.FlowSensitiveInlineVariables flowSensitiveInlineVariables21 = new com.google.javascript.jscomp.FlowSensitiveInlineVariables((com.google.javascript.jscomp.AbstractCompiler) compiler16); com.google.javascript.jscomp.PassFactory passFactory23 = com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass(""); com.google.javascript.jscomp.Compiler compiler24 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.jscomp.CompilerPass compilerPass25 = passFactory23.create((com.google.javascript.jscomp.AbstractCompiler) compiler24); com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(15); compiler24.externAndJsRoot = node27; com.google.javascript.jscomp.PassFactory passFactory30 = com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass(""); com.google.javascript.jscomp.Compiler compiler31 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.jscomp.CompilerPass compilerPass32 = passFactory30.create((com.google.javascript.jscomp.AbstractCompiler) compiler31); com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(15); compiler31.externAndJsRoot = node34; com.google.javascript.jscomp.CheckRegExp checkRegExp36 = new com.google.javascript.jscomp.CheckRegExp((com.google.javascript.jscomp.AbstractCompiler) compiler31); com.google.javascript.jscomp.NodeTraversal nodeTraversal37 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler) compiler24, (com.google.javascript.jscomp.NodeTraversal.Callback) checkRegExp36); boolean boolean38 = nodeTraversal37.inGlobalScope(); com.google.javascript.rhino.InputId inputId39 = nodeTraversal37.getInputId(); flowSensitiveInlineVariables21.exitScope(nodeTraversal37); com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.IR.number((double) 2); java.lang.String str43 = node42.toString(); boolean boolean44 = node42.hasOneChild(); int int45 = node42.getCharno(); com.google.javascript.jscomp.GoogleCodingConvention googleCodingConvention46 = new com.google.javascript.jscomp.GoogleCodingConvention(); com.google.javascript.rhino.ErrorReporter errorReporter47 = null; com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, true); jSTypeRegistry49.incrementGeneration(); com.google.javascript.rhino.ErrorReporter errorReporter51 = null; com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, true); com.google.javascript.rhino.jstype.JSType[] jSTypeArray54 = new com.google.javascript.rhino.jstype.JSType[] {}; com.google.javascript.rhino.Node node55 = jSTypeRegistry53.createOptionalParameters(jSTypeArray54); com.google.javascript.rhino.Node node56 = jSTypeRegistry49.createParametersWithVarArgs(jSTypeArray54); boolean boolean57 = googleCodingConvention46.isPrototypeAlias(node56); strictModeCheck11.visit(nodeTraversal37, node42, node56); flowSensitiveInlineVariables9.exitScope(nodeTraversal37); }
Code: public void visit(NodeTraversal t, Node n, Node parent) { if (n.isName() && jsScope.isDeclared(n.getString(), true)) { Var dep = jsScope.getVar(n.getString()); def.depends.add(dep); } }
tensor([[0.0348, 0.0280, 0.0176, 0.1164, 0.0639, 0.0766, 0.0639, 0.0437, 0.0449,
         0.0937, 0.0610, 0.0221, 0.0835, 0.0396, 0.0449, 0.0307, 0.0278, 0.0218,
         0.0326, 0.0237, 0.0145, 0.0145],
        [0.0251, 0.0219, 0.0090, 0.1587, 0.0668, 0.1007, 0.0668, 0.0305, 0.0435,
         0.0836, 0.0548, 0.0156, 0.0936, 0.0338, 0.0435, 0.0320, 0.0224, 0.0204,
         0.0302, 0.0203, 0.0133, 0.0133],
        [0.0258, 0.0184, 0.0119, 0.1370, 0.0579, 0.0854, 0.0579, 0.0337, 0.0462,
         0.1318, 0.0612, 0.0181, 0.0892, 0.0346, 0.0462, 0.0386, 0.0284, 0.0169,
         0.0254, 0.0195, 0.0079, 0.0079],
        [0.0298, 0.0172, 0.0114, 0.1385, 0.0706, 0.0688, 0.0706, 0.0427, 0.0531,
         0.0815, 0.0624, 0.0178, 0.1080, 0.0255, 0.0531, 0.0287, 0.0261, 0.0259,
         0.0262, 0.0222, 0.0100, 0.0100],
        [0.0237, 0.0238, 0.0122, 0.1443, 0.0691, 0.0985, 0.0691, 0.0318, 0.0520,
         0.0872, 0.0569, 0.0183, 0.0844, 0.0278, 0.0520, 0.0303, 0.0244, 0.0219,
         0.0305, 0.0222, 0.0099, 0.0099],
        [0.0277, 0.0184, 0.0175, 0.1525, 0.0582, 0.0933, 0.0582, 0.0269, 0.0541,
         0.0792, 0.0619, 0.0167, 0.0952, 0.0285, 0.0541, 0.0388, 0.0199, 0.0184,
         0.0329, 0.0237, 0.0118, 0.0118],
        [0.0237, 0.0238, 0.0122, 0.1443, 0.0691, 0.0985, 0.0691, 0.0318, 0.0520,
         0.0872, 0.0569, 0.0183, 0.0844, 0.0278, 0.0520, 0.0303, 0.0244, 0.0219,
         0.0305, 0.0222, 0.0099, 0.0099],
        [0.0301, 0.0226, 0.0107, 0.1511, 0.0706, 0.0820, 0.0706, 0.0272, 0.0539,
         0.1036, 0.0479, 0.0184, 0.0895, 0.0260, 0.0539, 0.0319, 0.0253, 0.0175,
         0.0262, 0.0179, 0.0114, 0.0114],
        [0.0365, 0.0315, 0.0203, 0.1018, 0.0591, 0.0800, 0.0591, 0.0326, 0.0544,
         0.0634, 0.0504, 0.0312, 0.0729, 0.0336, 0.0544, 0.0472, 0.0261, 0.0302,
         0.0465, 0.0294, 0.0199, 0.0199],
        [0.0197, 0.0151, 0.0069, 0.2173, 0.0712, 0.0883, 0.0712, 0.0215, 0.0438,
         0.1119, 0.0475, 0.0104, 0.0925, 0.0231, 0.0438, 0.0286, 0.0177, 0.0156,
         0.0258, 0.0150, 0.0066, 0.0066],
        [0.0320, 0.0256, 0.0182, 0.1353, 0.0507, 0.0873, 0.0507, 0.0413, 0.0444,
         0.0793, 0.0604, 0.0224, 0.0818, 0.0332, 0.0444, 0.0367, 0.0347, 0.0240,
         0.0316, 0.0264, 0.0197, 0.0197],
        [0.0266, 0.0238, 0.0133, 0.1380, 0.0574, 0.1028, 0.0574, 0.0353, 0.0497,
         0.0810, 0.0560, 0.0177, 0.0867, 0.0300, 0.0497, 0.0364, 0.0306, 0.0228,
         0.0327, 0.0198, 0.0161, 0.0161],
        [0.0320, 0.0273, 0.0144, 0.1419, 0.0615, 0.0953, 0.0615, 0.0331, 0.0419,
         0.0894, 0.0617, 0.0224, 0.0863, 0.0320, 0.0419, 0.0321, 0.0263, 0.0190,
         0.0337, 0.0207, 0.0128, 0.0128],
        [0.0310, 0.0210, 0.0155, 0.1238, 0.0502, 0.0796, 0.0502, 0.0370, 0.0439,
         0.0889, 0.0631, 0.0223, 0.0994, 0.0382, 0.0439, 0.0418, 0.0373, 0.0245,
         0.0353, 0.0247, 0.0143, 0.0143],
        [0.0365, 0.0315, 0.0203, 0.1018, 0.0591, 0.0800, 0.0591, 0.0326, 0.0544,
         0.0634, 0.0504, 0.0312, 0.0729, 0.0336, 0.0544, 0.0472, 0.0261, 0.0302,
         0.0465, 0.0294, 0.0199, 0.0199],
        [0.0326, 0.0281, 0.0125, 0.1302, 0.0598, 0.0837, 0.0598, 0.0340, 0.0487,
         0.0995, 0.0522, 0.0210, 0.0766, 0.0394, 0.0487, 0.0405, 0.0265, 0.0223,
         0.0374, 0.0235, 0.0114, 0.0114],
        [0.0309, 0.0250, 0.0147, 0.1240, 0.0532, 0.0704, 0.0532, 0.0334, 0.0631,
         0.0794, 0.0601, 0.0208, 0.0894, 0.0369, 0.0631, 0.0429, 0.0286, 0.0257,
         0.0355, 0.0223, 0.0137, 0.0137],
        [0.0408, 0.0328, 0.0200, 0.0772, 0.0602, 0.0788, 0.0602, 0.0453, 0.0437,
         0.0899, 0.0437, 0.0343, 0.0769, 0.0343, 0.0437, 0.0393, 0.0344, 0.0331,
         0.0418, 0.0308, 0.0194, 0.0194],
        [0.0273, 0.0275, 0.0167, 0.1100, 0.0591, 0.0758, 0.0591, 0.0328, 0.0489,
         0.1068, 0.0568, 0.0290, 0.0804, 0.0364, 0.0489, 0.0398, 0.0302, 0.0236,
         0.0374, 0.0237, 0.0148, 0.0148],
        [0.0358, 0.0237, 0.0141, 0.1280, 0.0552, 0.0941, 0.0552, 0.0348, 0.0437,
         0.0946, 0.0620, 0.0224, 0.0789, 0.0332, 0.0437, 0.0372, 0.0314, 0.0208,
         0.0364, 0.0206, 0.0170, 0.0170],
        [0.0226, 0.0204, 0.0126, 0.1349, 0.0834, 0.0645, 0.0834, 0.0387, 0.0525,
         0.0861, 0.0565, 0.0187, 0.0860, 0.0285, 0.0525, 0.0402, 0.0256, 0.0198,
         0.0307, 0.0193, 0.0116, 0.0116],
        [0.0226, 0.0204, 0.0126, 0.1349, 0.0834, 0.0645, 0.0834, 0.0387, 0.0525,
         0.0861, 0.0565, 0.0187, 0.0860, 0.0285, 0.0525, 0.0402, 0.0256, 0.0198,
         0.0307, 0.0193, 0.0116, 0.0116]])