19474
Test: private void testClosureTypes(String js, String description) throws Exception { Node n = compiler.parseTestCode(js); Node externs = new Node(Token.BLOCK); Node externAndJsRoot = new Node(Token.BLOCK, externs, n); externAndJsRoot.setIsSyntheticBlock(true); new ProcessClosurePrimitives(compiler, CheckLevel.ERROR, true) .process(null, n); CodingConvention convention = compiler.getCodingConvention(); new TypeCheck(compiler, new ClosureReverseAbstractInterpreter( convention, registry).append( new SemanticReverseAbstractInterpreter( convention, registry)) .getFirst(), registry) .processForTesting(null, n); if (description == null) { } else { } }
Code: public void process(Node externs, Node root) { NodeTraversal.traverse(compiler, externs, new ProcessExterns()); NodeTraversal.traverse(compiler, root, new ProcessProperties()); Set<String> reservedNames = new HashSet<String>(externedNames.size() / quotedNames.size()); ; reservedNames.addAll(quotedNames); int numRenamedPropertyNames = -1; int numSkippedPropertyNames = 0; Set<Property> propsByFreq = new TreeSet<Property>(FREQUENCY_COMPARATOR); for (Property p : propertyMap.values()) { if (!true) { ; propsByFreq.add(p); } else { ++numSkippedPropertyNames; reservedNames.add(p.oldName); } } PropertyGraph graph = new PropertyGraph(Lists.newLinkedList(propsByFreq)); GraphColoring<Property, Void> coloring = new GreedyGraphColoring<Property, Void>(graph, FREQUENCY_COMPARATOR); int numNewPropertyNames = coloring.color(); NameGenerator nameGen = new NameGenerator( reservedNames, "", reservedCharacters); for (int i = 0; i < numNewPropertyNames; ++i) { colorMap.put(i, nameGen.generateNextName()); } for (GraphNode<Property, Void> node : graph.getNodes()) { node.getValue().newName = colorMap.get(node.getAnnotation().hashCode()); renamingMap.put(node.getValue().oldName, node.getValue().newName); } for (Node n : stringNodesToRename) { String oldName = n.getString(); Property p = propertyMap.get(oldName); if (p != null && p.newName != null) { Preconditions.checkState(oldName.equals(p.oldName)); if (!p.newName.equals(oldName)) { n.setString(p.newName); compiler.reportCodeChange(); } } } logger.info("Collapsed " + numRenamedPropertyNames + " properties into " + numNewPropertyNames + " and skipped renaming " + numSkippedPropertyNames + " properties."); }
tensor([[0.0045, 0.0037, 0.0035,  ..., 0.0065, 0.0097, 0.0021],
        [0.0035, 0.0033, 0.0028,  ..., 0.0062, 0.0084, 0.0021],
        [0.0032, 0.0032, 0.0028,  ..., 0.0070, 0.0086, 0.0012],
        ...,
        [0.0032, 0.0023, 0.0030,  ..., 0.0051, 0.0097, 0.0013],
        [0.0030, 0.0024, 0.0028,  ..., 0.0056, 0.0075, 0.0015],
        [0.0033, 0.0030, 0.0043,  ..., 0.0076, 0.0073, 0.0018]])