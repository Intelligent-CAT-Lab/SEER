61061
Test: public void test539() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test539"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; org.apache.commons.csv.Quote quote2 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withQuotePolicy(quote2); org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("\u2029", cSVFormat3); java.util.Map<java.lang.String, java.lang.Integer> strMap5 = cSVParser4.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.DEFAULT; org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat7); long long9 = cSVParser8.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord10 = cSVParser8.nextRecord(); long long11 = cSVParser8.getRecordNumber(); long long12 = cSVParser8.getCurrentLineNumber(); org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.DEFAULT; org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat14); java.util.Map<java.lang.String, java.lang.Integer> strMap16 = cSVParser15.getHeaderMap(); java.lang.String[] strArray22 = new java.lang.String[] { "\u2029", "\u2029", "hi!", "\u2029", "\u2029" }; java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray22, strMap23, "hi!", (long) (byte) 100); boolean boolean27 = cSVRecord26.isConsistent(); boolean boolean29 = cSVRecord26.isMapped("\u2029"); java.lang.String[] strArray30 = cSVRecord26.values(); java.lang.String[] strArray36 = new java.lang.String[] { "\u2029", "\u2029", "hi!", "\u2029", "\u2029" }; java.util.Map<java.lang.String, java.lang.Integer> strMap37 = null; org.apache.commons.csv.CSVRecord cSVRecord40 = new org.apache.commons.csv.CSVRecord(strArray36, strMap37, "hi!", (long) (byte) 100); boolean boolean41 = cSVRecord40.isConsistent(); org.apache.commons.csv.CSVRecord[] cSVRecordArray42 = new org.apache.commons.csv.CSVRecord[] { cSVRecord26, cSVRecord40 }; java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList43 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>(); boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList43, cSVRecordArray42); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList45 = cSVParser15.getRecords((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList43); java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser8.getRecords(cSVRecordList43); java.util.AbstractList<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser4.getRecords((java.util.AbstractList<org.apache.commons.csv.CSVRecord>) cSVRecordList43); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor48 = cSVParser4.iterator(); }
Code: public Iterator<String> iterator() { return toList().iterator(); }
[[0.1812854  0.11461314 0.13251834 0.18259686 0.19220923 0.13247323
 0.06430378]
[0.16620386 0.11281678 0.11482486 0.24532959 0.21590522 0.10347968
 0.04143997]
[0.17234041 0.1286773  0.13115087 0.21587856 0.21932235 0.08002666
 0.0526039 ]
[0.15572537 0.1428858  0.12397139 0.19175915 0.18687874 0.12181467
 0.07696486]
[0.14437567 0.14634565 0.14214584 0.19006488 0.22543183 0.0948706
 0.05676553]
[0.1528409  0.13828143 0.10628543 0.21742824 0.24350712 0.09268016
 0.04897677]
[0.13423805 0.14301783 0.09911649 0.22732863 0.25917014 0.08253807
 0.05459078]]