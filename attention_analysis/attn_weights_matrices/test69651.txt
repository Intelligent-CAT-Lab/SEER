69651
Test: public void test013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test013"); org.jsoup.nodes.Comment comment2 = new org.jsoup.nodes.Comment("PUBLIC", ""); org.jsoup.nodes.Document document3 = comment2.ownerDocument(); java.lang.String str4 = comment2.baseUri(); org.jsoup.nodes.XmlDeclaration xmlDeclaration5 = comment2.asXmlDeclaration(); java.lang.String str6 = comment2.nodeName(); boolean boolean7 = comment2.hasAttributes(); org.jsoup.nodes.TextNode textNode10 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "PUBLIC"); org.jsoup.nodes.Node node13 = textNode10.attr("", ""); int int14 = textNode10.childNodeSize(); java.lang.StringBuilder stringBuilder15 = org.jsoup.internal.StringUtil.borrowBuilder(); org.jsoup.nodes.Document.OutputSettings outputSettings17 = null; textNode10.outerHtmlTail((java.lang.Appendable) stringBuilder15, (int) (byte) -1, outputSettings17); org.jsoup.nodes.Document document21 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("PUBLIC", "hi!"); org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType24 = new org.jsoup.select.Evaluator.IsNthLastOfType((int) '#', (int) '#'); boolean boolean25 = document21.is((org.jsoup.select.Evaluator) isNthLastOfType24); org.jsoup.nodes.Element element27 = document21.removeClass("hi!"); java.io.InputStream inputStream28 = null; org.jsoup.nodes.Document document31 = org.jsoup.Jsoup.parse(inputStream28, "PUBLIC", "PUBLIC"); org.jsoup.nodes.Document document34 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("PUBLIC", "hi!"); boolean boolean36 = document34.is("PUBLIC"); org.jsoup.nodes.Element element37 = document31.doClone((org.jsoup.nodes.Node) document34); org.jsoup.nodes.Element element38 = document21.appendTo((org.jsoup.nodes.Element) document34); java.lang.StringBuilder stringBuilder39 = org.jsoup.internal.StringUtil.borrowBuilder(); org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings(); boolean boolean42 = outputSettings41.outline(); org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings41.outline(false); document21.outerHtmlHead((java.lang.Appendable) stringBuilder39, 0, outputSettings41); org.jsoup.nodes.Document document49 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("PUBLIC", "hi!"); org.jsoup.select.Evaluator.IsNthLastOfType isNthLastOfType52 = new org.jsoup.select.Evaluator.IsNthLastOfType((int) '#', (int) '#'); boolean boolean53 = document49.is((org.jsoup.select.Evaluator) isNthLastOfType52); org.jsoup.nodes.Element element55 = document49.removeClass("hi!"); java.io.InputStream inputStream56 = null; org.jsoup.nodes.Document document59 = org.jsoup.Jsoup.parse(inputStream56, "PUBLIC", "PUBLIC"); org.jsoup.nodes.Document document62 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("PUBLIC", "hi!"); boolean boolean64 = document62.is("PUBLIC"); org.jsoup.nodes.Element element65 = document59.doClone((org.jsoup.nodes.Node) document62); org.jsoup.nodes.Element element66 = document49.appendTo((org.jsoup.nodes.Element) document62); java.lang.StringBuilder stringBuilder67 = org.jsoup.internal.StringUtil.borrowBuilder(); org.jsoup.nodes.Document.OutputSettings outputSettings69 = new org.jsoup.nodes.Document.OutputSettings(); boolean boolean70 = outputSettings69.outline(); org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings69.outline(false); document49.outerHtmlHead((java.lang.Appendable) stringBuilder67, 0, outputSettings69); textNode10.outerHtmlHead((java.lang.Appendable) stringBuilder39, 36, outputSettings69); org.jsoup.nodes.Document.OutputSettings outputSettings76 = new org.jsoup.nodes.Document.OutputSettings(); boolean boolean77 = outputSettings76.outline(); org.jsoup.nodes.Document.OutputSettings outputSettings79 = outputSettings76.outline(false); org.jsoup.nodes.Document.OutputSettings outputSettings81 = outputSettings76.outline(true); java.nio.charset.CharsetEncoder charsetEncoder82 = outputSettings76.prepareEncoder(); try { comment2.outerHtmlHead((java.lang.Appendable) stringBuilder39, (int) (short) -1, outputSettings76); } catch (java.lang.IllegalArgumentException e) { } }
Code: public XmlDeclaration asXmlDeclaration(){String data = getData();Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri(), Parser.xmlParser());XmlDeclaration decl = null;if (doc.childNodeSize() > 1) {Element el = doc.child(1);;decl.attributes().addAll(el.attributes());}return decl;}
tensor([[0.0272, 0.1030, 0.0276, 0.0280, 0.0173, 0.0723, 0.0252, 0.0173, 0.0749,
         0.0221, 0.0317, 0.0641, 0.0332, 0.0221, 0.0336, 0.0504, 0.0150, 0.0178,
         0.0173, 0.0277, 0.0311, 0.0453, 0.0271, 0.0185, 0.0435, 0.0173, 0.0476,
         0.0420],
        [0.0219, 0.1286, 0.0226, 0.0225, 0.0142, 0.0725, 0.0232, 0.0142, 0.0877,
         0.0221, 0.0253, 0.0569, 0.0345, 0.0221, 0.0417, 0.0582, 0.0093, 0.0225,
         0.0142, 0.0251, 0.0279, 0.0438, 0.0280, 0.0130, 0.0441, 0.0142, 0.0396,
         0.0500],
        [0.0240, 0.1255, 0.0166, 0.0217, 0.0182, 0.0570, 0.0266, 0.0182, 0.1124,
         0.0165, 0.0256, 0.0660, 0.0356, 0.0165, 0.0438, 0.0469, 0.0093, 0.0155,
         0.0182, 0.0256, 0.0278, 0.0391, 0.0283, 0.0162, 0.0431, 0.0182, 0.0505,
         0.0371],
        [0.0308, 0.0956, 0.0220, 0.0257, 0.0195, 0.0538, 0.0259, 0.0195, 0.0710,
         0.0271, 0.0349, 0.0650, 0.0305, 0.0271, 0.0433, 0.0498, 0.0132, 0.0215,
         0.0195, 0.0248, 0.0287, 0.0472, 0.0290, 0.0170, 0.0497, 0.0195, 0.0422,
         0.0461],
        [0.0311, 0.0737, 0.0311, 0.0289, 0.0255, 0.0620, 0.0389, 0.0255, 0.0434,
         0.0273, 0.0309, 0.0427, 0.0347, 0.0273, 0.0334, 0.0521, 0.0208, 0.0230,
         0.0255, 0.0332, 0.0289, 0.0428, 0.0309, 0.0203, 0.0622, 0.0255, 0.0387,
         0.0396],
        [0.0204, 0.1317, 0.0300, 0.0263, 0.0181, 0.0740, 0.0284, 0.0181, 0.0819,
         0.0232, 0.0270, 0.0566, 0.0293, 0.0232, 0.0360, 0.0590, 0.0099, 0.0153,
         0.0181, 0.0269, 0.0271, 0.0390, 0.0228, 0.0167, 0.0507, 0.0181, 0.0398,
         0.0327],
        [0.0242, 0.1311, 0.0258, 0.0254, 0.0203, 0.0667, 0.0270, 0.0203, 0.0827,
         0.0257, 0.0251, 0.0596, 0.0257, 0.0257, 0.0328, 0.0581, 0.0098, 0.0183,
         0.0203, 0.0291, 0.0215, 0.0367, 0.0234, 0.0172, 0.0443, 0.0203, 0.0425,
         0.0400],
        [0.0311, 0.0737, 0.0311, 0.0289, 0.0255, 0.0620, 0.0389, 0.0255, 0.0434,
         0.0273, 0.0309, 0.0427, 0.0347, 0.0273, 0.0334, 0.0521, 0.0208, 0.0230,
         0.0255, 0.0332, 0.0289, 0.0428, 0.0309, 0.0203, 0.0622, 0.0255, 0.0387,
         0.0396],
        [0.0232, 0.0929, 0.0209, 0.0251, 0.0219, 0.0739, 0.0287, 0.0219, 0.0607,
         0.0209, 0.0303, 0.0597, 0.0340, 0.0209, 0.0333, 0.0608, 0.0108, 0.0212,
         0.0219, 0.0269, 0.0294, 0.0570, 0.0250, 0.0196, 0.0442, 0.0219, 0.0418,
         0.0509],
        [0.0258, 0.1123, 0.0219, 0.0261, 0.0187, 0.0676, 0.0310, 0.0187, 0.0844,
         0.0216, 0.0275, 0.0625, 0.0302, 0.0216, 0.0345, 0.0464, 0.0135, 0.0216,
         0.0187, 0.0263, 0.0301, 0.0403, 0.0302, 0.0207, 0.0437, 0.0187, 0.0393,
         0.0462],
        [0.0245, 0.1027, 0.0320, 0.0332, 0.0172, 0.0674, 0.0244, 0.0172, 0.0766,
         0.0221, 0.0284, 0.0598, 0.0330, 0.0221, 0.0392, 0.0555, 0.0130, 0.0197,
         0.0172, 0.0234, 0.0291, 0.0451, 0.0265, 0.0217, 0.0482, 0.0172, 0.0401,
         0.0437],
        [0.0265, 0.0844, 0.0249, 0.0297, 0.0171, 0.0689, 0.0274, 0.0171, 0.0823,
         0.0206, 0.0276, 0.0742, 0.0323, 0.0206, 0.0410, 0.0473, 0.0130, 0.0198,
         0.0171, 0.0207, 0.0353, 0.0498, 0.0260, 0.0196, 0.0481, 0.0171, 0.0468,
         0.0448],
        [0.0248, 0.1044, 0.0241, 0.0298, 0.0176, 0.0659, 0.0349, 0.0176, 0.0710,
         0.0236, 0.0304, 0.0566, 0.0344, 0.0236, 0.0384, 0.0508, 0.0207, 0.0209,
         0.0176, 0.0321, 0.0312, 0.0440, 0.0242, 0.0194, 0.0459, 0.0176, 0.0462,
         0.0322],
        [0.0258, 0.1123, 0.0219, 0.0261, 0.0187, 0.0676, 0.0310, 0.0187, 0.0844,
         0.0216, 0.0275, 0.0625, 0.0302, 0.0216, 0.0345, 0.0464, 0.0135, 0.0216,
         0.0187, 0.0263, 0.0301, 0.0403, 0.0302, 0.0207, 0.0437, 0.0187, 0.0393,
         0.0462],
        [0.0258, 0.0893, 0.0247, 0.0233, 0.0208, 0.0676, 0.0291, 0.0208, 0.0874,
         0.0243, 0.0218, 0.0631, 0.0270, 0.0243, 0.0449, 0.0463, 0.0125, 0.0201,
         0.0208, 0.0257, 0.0310, 0.0565, 0.0246, 0.0234, 0.0464, 0.0208, 0.0384,
         0.0393],
        [0.0305, 0.0886, 0.0278, 0.0325, 0.0229, 0.0569, 0.0273, 0.0229, 0.0565,
         0.0304, 0.0276, 0.0586, 0.0344, 0.0304, 0.0453, 0.0555, 0.0142, 0.0225,
         0.0229, 0.0253, 0.0316, 0.0516, 0.0253, 0.0163, 0.0456, 0.0229, 0.0372,
         0.0366],
        [0.0214, 0.1186, 0.0249, 0.0287, 0.0179, 0.0590, 0.0304, 0.0179, 0.0574,
         0.0236, 0.0290, 0.0657, 0.0370, 0.0236, 0.0286, 0.0641, 0.0176, 0.0203,
         0.0179, 0.0291, 0.0340, 0.0405, 0.0291, 0.0199, 0.0419, 0.0179, 0.0477,
         0.0366],
        [0.0203, 0.1090, 0.0275, 0.0222, 0.0178, 0.0807, 0.0250, 0.0178, 0.1235,
         0.0194, 0.0235, 0.0619, 0.0275, 0.0194, 0.0401, 0.0564, 0.0111, 0.0173,
         0.0178, 0.0214, 0.0265, 0.0338, 0.0267, 0.0161, 0.0398, 0.0178, 0.0406,
         0.0392],
        [0.0311, 0.0737, 0.0311, 0.0289, 0.0255, 0.0620, 0.0389, 0.0255, 0.0434,
         0.0273, 0.0309, 0.0427, 0.0347, 0.0273, 0.0334, 0.0521, 0.0208, 0.0230,
         0.0255, 0.0332, 0.0289, 0.0428, 0.0309, 0.0203, 0.0622, 0.0255, 0.0387,
         0.0396],
        [0.0198, 0.1201, 0.0194, 0.0228, 0.0177, 0.0782, 0.0257, 0.0177, 0.1301,
         0.0161, 0.0268, 0.0589, 0.0364, 0.0161, 0.0341, 0.0530, 0.0083, 0.0154,
         0.0177, 0.0235, 0.0245, 0.0354, 0.0207, 0.0152, 0.0415, 0.0177, 0.0468,
         0.0405],
        [0.0209, 0.1266, 0.0270, 0.0268, 0.0180, 0.0647, 0.0235, 0.0180, 0.0957,
         0.0188, 0.0241, 0.0736, 0.0268, 0.0188, 0.0376, 0.0643, 0.0117, 0.0156,
         0.0180, 0.0282, 0.0280, 0.0385, 0.0231, 0.0180, 0.0424, 0.0180, 0.0409,
         0.0324],
        [0.0294, 0.1424, 0.0176, 0.0249, 0.0160, 0.0586, 0.0269, 0.0160, 0.0776,
         0.0163, 0.0251, 0.0558, 0.0331, 0.0163, 0.0429, 0.0614, 0.0095, 0.0178,
         0.0160, 0.0257, 0.0255, 0.0563, 0.0317, 0.0146, 0.0387, 0.0160, 0.0463,
         0.0417],
        [0.0241, 0.1411, 0.0245, 0.0262, 0.0124, 0.0698, 0.0267, 0.0124, 0.0703,
         0.0183, 0.0284, 0.0574, 0.0318, 0.0183, 0.0385, 0.0586, 0.0108, 0.0199,
         0.0124, 0.0267, 0.0245, 0.0616, 0.0284, 0.0174, 0.0459, 0.0124, 0.0378,
         0.0431],
        [0.0161, 0.1115, 0.0223, 0.0217, 0.0201, 0.0728, 0.0302, 0.0201, 0.0790,
         0.0201, 0.0242, 0.0623, 0.0310, 0.0201, 0.0483, 0.0625, 0.0107, 0.0206,
         0.0201, 0.0256, 0.0305, 0.0334, 0.0260, 0.0145, 0.0468, 0.0201, 0.0432,
         0.0462],
        [0.0259, 0.1283, 0.0221, 0.0261, 0.0150, 0.0685, 0.0307, 0.0150, 0.0688,
         0.0196, 0.0250, 0.0698, 0.0267, 0.0196, 0.0407, 0.0609, 0.0127, 0.0155,
         0.0150, 0.0275, 0.0271, 0.0462, 0.0233, 0.0188, 0.0557, 0.0150, 0.0426,
         0.0379],
        [0.0311, 0.0737, 0.0311, 0.0289, 0.0255, 0.0620, 0.0389, 0.0255, 0.0434,
         0.0273, 0.0309, 0.0427, 0.0347, 0.0273, 0.0334, 0.0521, 0.0208, 0.0230,
         0.0255, 0.0332, 0.0289, 0.0428, 0.0309, 0.0203, 0.0622, 0.0255, 0.0387,
         0.0396],
        [0.0232, 0.0878, 0.0324, 0.0272, 0.0175, 0.0697, 0.0293, 0.0175, 0.0584,
         0.0277, 0.0313, 0.0685, 0.0382, 0.0277, 0.0297, 0.0540, 0.0168, 0.0205,
         0.0175, 0.0280, 0.0368, 0.0375, 0.0306, 0.0189, 0.0448, 0.0175, 0.0484,
         0.0429],
        [0.0215, 0.0890, 0.0213, 0.0280, 0.0212, 0.0599, 0.0374, 0.0212, 0.0560,
         0.0355, 0.0253, 0.0489, 0.0274, 0.0355, 0.0355, 0.0594, 0.0154, 0.0276,
         0.0212, 0.0240, 0.0398, 0.0476, 0.0248, 0.0212, 0.0466, 0.0212, 0.0388,
         0.0486]])