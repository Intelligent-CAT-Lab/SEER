101166
Test: public void test0458() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0458"); org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField1 = gJChronology0.yearOfCentury(); org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology0); int int3 = dateTime2.getEra(); int int4 = dateTime2.getMillisOfSecond(); org.joda.time.DateTime.Property property5 = dateTime2.year(); org.joda.time.ReadableDuration readableDuration6 = null; org.joda.time.DateTime dateTime7 = dateTime2.plus(readableDuration6); int int8 = dateTime7.getMillisOfDay(); org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay(); int int10 = dateTime7.get(dateTimeFieldType9); org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.eras(); org.joda.time.field.UnsupportedDurationField unsupportedDurationField12 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType11); org.joda.time.field.PreciseDurationField preciseDurationField14 = new org.joda.time.field.PreciseDurationField(durationFieldType11, 0L); long long15 = preciseDurationField14.getUnitMillis(); org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField16 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType9, (org.joda.time.DurationField) preciseDurationField14); org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.yearOfEra(); org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now((org.joda.time.Chronology) iSOChronology17); org.joda.time.DateTimeField dateTimeField20 = iSOChronology17.minuteOfHour(); org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField22 = gJChronology21.yearOfCentury(); org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology21); int int24 = dateTime23.getEra(); int int25 = dateTime23.getMillisOfSecond(); org.joda.time.DateTime.Property property26 = dateTime23.year(); org.joda.time.ReadableDuration readableDuration27 = null; org.joda.time.DateTime dateTime28 = dateTime23.plus(readableDuration27); int int29 = dateTime28.getMillisOfDay(); org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfDay(); int int31 = dateTime28.get(dateTimeFieldType30); org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField32 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField20, dateTimeFieldType30); java.util.Locale locale33 = null; int int34 = delegatedDateTimeField32.getMaximumShortTextLength(locale33); long long37 = delegatedDateTimeField32.getDifferenceAsLong((long) (byte) 1, (long) (-25200000)); long long40 = delegatedDateTimeField32.getDifferenceAsLong((long) 12, (long) 2760021); org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.DateTimeField dateTimeField42 = iSOChronology41.yearOfEra(); org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now((org.joda.time.Chronology) iSOChronology41); org.joda.time.DateTime dateTime44 = dateTime43.toDateTime(); int int45 = dateTime44.getMillisOfSecond(); org.joda.time.LocalDateTime localDateTime46 = dateTime44.toLocalDateTime(); java.util.Locale locale48 = null; java.lang.String str49 = delegatedDateTimeField32.getAsText((org.joda.time.ReadablePartial) localDateTime46, 2771115, locale48); org.joda.time.chrono.JulianChronology julianChronology51 = org.joda.time.chrono.JulianChronology.getInstanceUTC(); int int53 = julianChronology51.getMillisOfDay((long) 682); org.joda.time.LocalDate localDate54 = org.joda.time.LocalDate.now((org.joda.time.Chronology) julianChronology51); int int55 = julianChronology51.getMaxYear(); org.joda.time.DateTimeField dateTimeField56 = julianChronology51.centuryOfEra(); org.joda.time.chrono.BasicYearDateTimeField basicYearDateTimeField57 = new org.joda.time.chrono.BasicYearDateTimeField((org.joda.time.chrono.BasicChronology) julianChronology51); long long60 = basicYearDateTimeField57.addWrapField((long) 2759289, 182); org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField63 = gJChronology62.yearOfCentury(); org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology62); org.joda.time.DurationField durationField65 = gJChronology62.eras(); org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology62); org.joda.time.ReadablePeriod readablePeriod67 = null; org.joda.time.LocalDate localDate69 = localDate66.withPeriodAdded(readablePeriod67, (-28800000)); org.joda.time.chrono.ISOChronology iSOChronology70 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology71 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean72 = iSOChronology70.equals((java.lang.Object) iSOChronology71); org.joda.time.chrono.GJChronology gJChronology74 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField75 = gJChronology74.yearOfCentury(); org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology74); org.joda.time.DurationField durationField77 = gJChronology74.eras(); org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology74); int[] intArray80 = iSOChronology71.get((org.joda.time.ReadablePartial) localDate78, (-1123200000L)); int int81 = basicYearDateTimeField57.getMaximumValue((org.joda.time.ReadablePartial) localDate69, intArray80); try { int[] intArray83 = unsupportedDateTimeField16.addWrapField((org.joda.time.ReadablePartial) localDateTime46, 899, intArray80, 851); } catch (java.lang.UnsupportedOperationException e) { } }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0056, 0.0185, 0.0105,  ..., 0.0063, 0.0325, 0.0026],
        [0.0060, 0.0168, 0.0117,  ..., 0.0058, 0.0212, 0.0031],
        [0.0051, 0.0218, 0.0112,  ..., 0.0067, 0.0283, 0.0021],
        ...,
        [0.0036, 0.0181, 0.0115,  ..., 0.0050, 0.0325, 0.0021],
        [0.0049, 0.0181, 0.0114,  ..., 0.0058, 0.0284, 0.0024],
        [0.0041, 0.0173, 0.0128,  ..., 0.0090, 0.0216, 0.0023]])