101201
Test: public void test0366() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0366"); org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.yearOfEra(); org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now((org.joda.time.Chronology) iSOChronology0); org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.minuteOfHour(); org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField5 = gJChronology4.yearOfCentury(); org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology4); int int7 = dateTime6.getEra(); int int8 = dateTime6.getMillisOfSecond(); org.joda.time.DateTime.Property property9 = dateTime6.year(); org.joda.time.ReadableDuration readableDuration10 = null; org.joda.time.DateTime dateTime11 = dateTime6.plus(readableDuration10); int int12 = dateTime11.getMillisOfDay(); org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfDay(); int int14 = dateTime11.get(dateTimeFieldType13); org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField15 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField3, dateTimeFieldType13); java.util.Locale locale16 = null; int int17 = delegatedDateTimeField15.getMaximumShortTextLength(locale16); long long20 = delegatedDateTimeField15.getDifferenceAsLong((long) (byte) 1, (long) (-25200000)); long long23 = delegatedDateTimeField15.getDifferenceAsLong((long) 12, (long) 2760021); org.joda.time.DateTimeField dateTimeField24 = delegatedDateTimeField15.getWrappedField(); org.joda.time.DateTimeFieldType dateTimeFieldType25 = delegatedDateTimeField15.getType(); org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField27 = gJChronology26.yearOfCentury(); org.joda.time.DateTimeField dateTimeField28 = gJChronology26.yearOfEra(); org.joda.time.DurationField durationField29 = gJChronology26.hours(); org.joda.time.DurationField durationField30 = gJChronology26.months(); org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.eras(); org.joda.time.field.UnsupportedDurationField unsupportedDurationField32 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType31); java.lang.String str33 = unsupportedDurationField32.getName(); org.joda.time.DurationFieldType durationFieldType34 = unsupportedDurationField32.getType(); org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField37 = gJChronology36.yearOfCentury(); org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology36); org.joda.time.DurationField durationField39 = gJChronology36.eras(); org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology36); org.joda.time.ReadablePeriod readablePeriod41 = null; org.joda.time.LocalDate localDate43 = localDate40.withPeriodAdded(readablePeriod41, (-28800000)); org.joda.time.LocalDate.Property property44 = localDate40.dayOfMonth(); org.joda.time.LocalDate localDate46 = property44.addWrapFieldToCopy(818); org.joda.time.DateTimeZone dateTimeZone47 = null; org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeUtils.getZone(dateTimeZone47); org.joda.time.chrono.ISOChronology iSOChronology49 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.DateTimeField dateTimeField50 = iSOChronology49.yearOfEra(); org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now((org.joda.time.Chronology) iSOChronology49); int int52 = dateTimeZone48.getOffset((org.joda.time.ReadableInstant) dateTime51); org.joda.time.DateTime dateTime53 = localDate46.toDateTimeAtMidnight(dateTimeZone48); boolean boolean54 = unsupportedDurationField32.equals((java.lang.Object) dateTime53); try { org.joda.time.field.PreciseDateTimeField preciseDateTimeField55 = new org.joda.time.field.PreciseDateTimeField(dateTimeFieldType25, durationField30, (org.joda.time.DurationField) unsupportedDurationField32); } catch (java.lang.IllegalArgumentException e) { } }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone)); if (cutoverDate.getYear() <= 0) { throw new IllegalArgumentException("Cutover too early. Must be on or after 0001-01-01."); } } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0047, 0.0152, 0.0087,  ..., 0.0052, 0.0273, 0.0021],
        [0.0049, 0.0137, 0.0096,  ..., 0.0047, 0.0174, 0.0025],
        [0.0042, 0.0178, 0.0092,  ..., 0.0055, 0.0235, 0.0017],
        ...,
        [0.0030, 0.0148, 0.0096,  ..., 0.0042, 0.0273, 0.0017],
        [0.0040, 0.0147, 0.0094,  ..., 0.0047, 0.0236, 0.0020],
        [0.0034, 0.0141, 0.0105,  ..., 0.0073, 0.0177, 0.0018]])