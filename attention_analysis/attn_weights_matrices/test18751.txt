18751
Test: public void test034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test034"); com.google.javascript.jscomp.LightweightMessageFormatter lightweightMessageFormatter1 = com.google.javascript.jscomp.LightweightMessageFormatter.withoutSource(); com.google.javascript.jscomp.CheckLevel checkLevel5 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType8 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError16 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel5, diagnosticType8, strArray15); com.google.javascript.rhino.Node node17 = jSError16.node; boolean boolean19 = jSError16.equals((java.lang.Object) ": hi!"); com.google.javascript.jscomp.CheckLevel checkLevel20 = jSError16.level; java.lang.String str21 = lightweightMessageFormatter1.getLevelName(checkLevel20); com.google.javascript.jscomp.CheckLevel checkLevel25 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType28 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError36 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel25, diagnosticType28, strArray35); com.google.javascript.rhino.Node node37 = jSError36.node; java.lang.String str38 = lightweightMessageFormatter1.formatError(jSError36); com.google.javascript.jscomp.SourceExcerptProvider sourceExcerptProvider39 = lightweightMessageFormatter1.getSource(); com.google.javascript.jscomp.CheckLevel checkLevel43 = com.google.javascript.jscomp.CheckLevel.WARNING; boolean boolean44 = checkLevel43.isOn(); com.google.javascript.jscomp.DiagnosticType diagnosticType47 = com.google.javascript.jscomp.DiagnosticType.warning("", "hi!"); java.lang.Object[] objArray48 = null; java.lang.String str49 = diagnosticType47.format(objArray48); java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "" }; com.google.javascript.jscomp.JSError jSError53 = com.google.javascript.jscomp.JSError.make("hi!", 1, (int) (short) 100, checkLevel43, diagnosticType47, strArray52); java.lang.String str54 = jSError53.toString(); java.lang.String str55 = lightweightMessageFormatter1.formatWarning(jSError53); com.google.javascript.jscomp.CheckLevel checkLevel59 = com.google.javascript.jscomp.CheckLevel.WARNING; boolean boolean60 = checkLevel59.isOn(); com.google.javascript.jscomp.DiagnosticType diagnosticType63 = com.google.javascript.jscomp.DiagnosticType.warning("", "hi!"); java.lang.Object[] objArray64 = null; java.lang.String str65 = diagnosticType63.format(objArray64); java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "" }; com.google.javascript.jscomp.JSError jSError69 = com.google.javascript.jscomp.JSError.make("hi!", 1, (int) (short) 100, checkLevel59, diagnosticType63, strArray68); java.lang.String str70 = lightweightMessageFormatter1.getLevelName(checkLevel59); com.google.javascript.jscomp.CheckLevel checkLevel71 = com.google.javascript.jscomp.CheckLevel.OFF; java.lang.String str72 = lightweightMessageFormatter1.getLevelName(checkLevel71); com.google.javascript.jscomp.DiagnosticType diagnosticType74 = com.google.javascript.jscomp.DiagnosticType.make(": hi!: WARNING", checkLevel71, ". at : hi! line 1 : 1"); com.google.javascript.jscomp.CheckLevel checkLevel75 = diagnosticType74.level; java.text.MessageFormat messageFormat76 = diagnosticType74.format; }
Code: private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null ? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName != null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(": "); } ; b.append(" - "); b.append(error.description); b.append('\n'); if (sourceExcerpt != null) { b.append(sourceExcerpt); b.append('\n'); int charno = error.getCharno(); if (0 <= charno && charno <= sourceExcerpt.length()) { for (int i = -1; i != charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append("^\n"); } } return b.toString(); }
tensor([[0.0101, 0.0077, 0.0053,  ..., 0.0068, 0.0170, 0.0032],
        [0.0080, 0.0071, 0.0050,  ..., 0.0066, 0.0127, 0.0027],
        [0.0087, 0.0070, 0.0034,  ..., 0.0057, 0.0145, 0.0021],
        ...,
        [0.0090, 0.0075, 0.0036,  ..., 0.0058, 0.0158, 0.0026],
        [0.0094, 0.0082, 0.0034,  ..., 0.0066, 0.0140, 0.0019],
        [0.0075, 0.0085, 0.0043,  ..., 0.0104, 0.0169, 0.0027]])