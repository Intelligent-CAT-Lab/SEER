67221
Test: public void test062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test062"); com.fasterxml.jackson.databind.node.DoubleNode doubleNode1 = new com.fasterxml.jackson.databind.node.DoubleNode((double) 1); com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null; com.fasterxml.jackson.core.JsonParser jsonParser3 = doubleNode1.traverse(objectCodec2); com.fasterxml.jackson.databind.util.TokenBuffer tokenBuffer4 = new com.fasterxml.jackson.databind.util.TokenBuffer(jsonParser3); tokenBuffer4.writeBoolean(false); com.fasterxml.jackson.core.ObjectCodec objectCodec7 = tokenBuffer4._objectCodec; tokenBuffer4.writeOmittedField(""); com.fasterxml.jackson.databind.node.DoubleNode doubleNode11 = new com.fasterxml.jackson.databind.node.DoubleNode((double) 1); com.fasterxml.jackson.databind.MappingJsonFactory mappingJsonFactory12 = new com.fasterxml.jackson.databind.MappingJsonFactory(); boolean boolean13 = doubleNode11.equals((java.lang.Object) mappingJsonFactory12); int int14 = doubleNode11.asInt(); java.math.BigDecimal bigDecimal15 = doubleNode11.decimalValue(); tokenBuffer4.writeNumber(bigDecimal15); com.fasterxml.jackson.databind.node.DoubleNode doubleNode18 = new com.fasterxml.jackson.databind.node.DoubleNode((double) 1); com.fasterxml.jackson.core.ObjectCodec objectCodec19 = null; com.fasterxml.jackson.core.JsonParser jsonParser20 = doubleNode18.traverse(objectCodec19); com.fasterxml.jackson.databind.util.TokenBuffer tokenBuffer21 = new com.fasterxml.jackson.databind.util.TokenBuffer(jsonParser20); tokenBuffer21.writeBoolean(false); byte[] byteArray28 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 10 }; tokenBuffer21.writeBinary(byteArray28); com.fasterxml.jackson.databind.node.BinaryNode binaryNode30 = new com.fasterxml.jackson.databind.node.BinaryNode(byteArray28); boolean boolean32 = binaryNode30.equals((java.lang.Object) 13); com.fasterxml.jackson.core.JsonToken jsonToken33 = binaryNode30.asToken(); com.fasterxml.jackson.databind.node.TextNode textNode35 = new com.fasterxml.jackson.databind.node.TextNode("1.0"); com.fasterxml.jackson.databind.node.DoubleNode doubleNode37 = new com.fasterxml.jackson.databind.node.DoubleNode((double) 1); com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null; com.fasterxml.jackson.core.JsonParser jsonParser39 = doubleNode37.traverse(objectCodec38); com.fasterxml.jackson.databind.util.TokenBuffer tokenBuffer40 = new com.fasterxml.jackson.databind.util.TokenBuffer(jsonParser39); tokenBuffer40._forceBigDecimal = false; int int43 = tokenBuffer40.getFeatureMask(); com.fasterxml.jackson.databind.SerializerProvider serializerProvider44 = null; textNode35.serialize((com.fasterxml.jackson.core.JsonGenerator) tokenBuffer40, serializerProvider44); tokenBuffer40.writeObject((java.lang.Object) (-1.0d)); com.fasterxml.jackson.core.JsonParser jsonParser48 = tokenBuffer40.asParser(); tokenBuffer4._append(jsonToken33, (java.lang.Object) tokenBuffer40); }
Code: public void writeBoolean(boolean state) throws IOException { _appendValue(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE); }
[[0.0605721  0.05044237 0.08028628 0.07514279 0.13501127 0.03429543
 0.09238743 0.10952723 0.09701809 0.09358986 0.06076832 0.08260816
 0.02835068]
[0.04791692 0.04322924 0.09440701 0.06213748 0.16797899 0.02836974
 0.08995552 0.11557445 0.09920955 0.11664303 0.04323088 0.06423615
 0.027111  ]
[0.04582131 0.03468212 0.06988372 0.09612028 0.17450674 0.02997508
 0.08104953 0.11292415 0.10664778 0.09141138 0.03845901 0.1002036
 0.01831528]
[0.06883941 0.05419882 0.05370506 0.06577687 0.13158293 0.03801566
 0.08475605 0.10566856 0.11538003 0.10221352 0.05349993 0.10188028
 0.02448283]
[0.0388624  0.03854479 0.06062705 0.06637597 0.1828917  0.02602473
 0.10031854 0.12540808 0.10606924 0.11128169 0.0481047  0.07629656
 0.01919458]
[0.04810654 0.03851762 0.06422152 0.08380155 0.18351993 0.02893559
 0.09342597 0.11173112 0.09976019 0.09376442 0.04200931 0.09292793
 0.01927836]
[0.06046731 0.05269428 0.08506516 0.07668177 0.10706231 0.04047861
 0.09640937 0.10531414 0.07902357 0.11897294 0.04952008 0.09418781
 0.03412266]
[0.05119966 0.0437028  0.07193792 0.08390978 0.16496348 0.03504784
 0.0978912  0.10821963 0.09275001 0.09942408 0.04076411 0.08338307
 0.02680646]
[0.0466705  0.03306631 0.09218935 0.06782572 0.13292979 0.03061649
 0.12159866 0.10526429 0.09871507 0.12582259 0.05070285 0.07188082
 0.02271756]
[0.05510817 0.03842791 0.0650463  0.08331155 0.14428617 0.03117852
 0.09425749 0.110236   0.09720618 0.11727433 0.0464937  0.08705641
 0.03011721]
[0.05627411 0.04481854 0.05834708 0.07055688 0.12753123 0.03935906
 0.09301561 0.10249943 0.11766344 0.13560969 0.04024123 0.08266166
 0.03142203]
[0.05661167 0.05671991 0.08552435 0.06039864 0.13422559 0.0279718
 0.09607288 0.11923456 0.09692798 0.12438008 0.03938028 0.076558
 0.02599418]
[0.0415158  0.03883129 0.05351384 0.07410906 0.17459665 0.03392413
 0.10996976 0.10717938 0.10272455 0.11155091 0.03968506 0.08889261
 0.023507  ]]