101401
Test: public void test208() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test208"); org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId timeZoneId0 = org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId.INSTANCE; int int1 = timeZoneId0.estimatePrintedLength(); java.lang.StringBuffer stringBuffer2 = null; org.joda.time.Chronology chronology4 = null; org.joda.time.chrono.JulianChronology julianChronology6 = org.joda.time.chrono.JulianChronology.getInstanceUTC(); org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' '); long long11 = dateTimeZone8.adjustOffset((long) 1, false); java.util.TimeZone timeZone12 = dateTimeZone8.toTimeZone(); org.joda.time.Chronology chronology13 = julianChronology6.withZone(dateTimeZone8); org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.secondOfDay(); long long18 = dateTimeField15.getDifferenceAsLong((long) (-1), (long) 1); org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.dayOfMonth(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField21 = new org.joda.time.field.OffsetDateTimeField(dateTimeField15, dateTimeFieldType19, 10919); org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(); int int23 = mutableDateTime22.getDayOfMonth(); org.joda.time.MutableDateTime.Property property24 = mutableDateTime22.weekOfWeekyear(); org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now(); org.joda.time.DateTime dateTime26 = mutableDateTime25.toDateTime(); org.joda.time.DateTime dateTime28 = dateTime26.withMinuteOfHour((int) (short) 1); org.joda.time.DateTime dateTime30 = dateTime28.plusHours(10); int int31 = dateTime30.getSecondOfDay(); org.joda.time.LocalDateTime localDateTime32 = dateTime30.toLocalDateTime(); int int34 = localDateTime32.getValue(3); int int35 = property24.compareTo((org.joda.time.ReadablePartial) localDateTime32); java.util.Locale locale36 = null; java.lang.String str37 = offsetDateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime32, locale36); java.util.Locale locale39 = null; java.lang.String str40 = offsetDateTimeField21.getAsText((long) 10911, locale39); org.joda.time.DurationField durationField41 = offsetDateTimeField21.getRangeDurationField(); int int42 = offsetDateTimeField21.getMaximumValue(); org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.centuryOfEra(); org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber unpaddedNumber47 = new org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType44, (int) (short) 100, true); org.joda.time.Chronology chronology49 = null; java.util.Locale locale50 = null; org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology49, locale50); int int54 = unpaddedNumber47.parseInto(dateTimeParserBucket51, "2021-07-09T17:49:08.298-07:00", 10862); java.util.Locale locale55 = dateTimeParserBucket51.getLocale(); java.lang.String str56 = offsetDateTimeField21.getAsText(10893282, locale55); try { timeZoneId0.printTo(stringBuffer2, 10L, chronology4, 10878, dateTimeZone8, locale55); } catch (java.lang.NullPointerException e) { } }
Code: public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException("Instant must not be null"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); int defaultYear = DateTimeUtils.getChronology(chrono).year().get(instantMillis); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, defaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone != null) { instant.setZone(iZone); } return newPos; }
tensor([[0.0073, 0.0044, 0.0101,  ..., 0.0082, 0.0266, 0.0034],
        [0.0049, 0.0034, 0.0085,  ..., 0.0080, 0.0264, 0.0025],
        [0.0063, 0.0037, 0.0087,  ..., 0.0088, 0.0303, 0.0029],
        ...,
        [0.0048, 0.0027, 0.0092,  ..., 0.0068, 0.0312, 0.0028],
        [0.0056, 0.0029, 0.0073,  ..., 0.0071, 0.0303, 0.0019],
        [0.0053, 0.0040, 0.0100,  ..., 0.0118, 0.0200, 0.0030]])