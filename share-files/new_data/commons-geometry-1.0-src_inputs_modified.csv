,method,test
0,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test0()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(0.0, 0.0);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      point1S0.eq(point1S1, precision_DoubleEquivalence0);
}"
1,"    public double getAzimuth() {
        return azimuth;
    }","  public void test1()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(0.0, 0.0);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      point1S0.eq(point1S1, precision_DoubleEquivalence0);
}"
2,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test2()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = Point1S.of((-2.141592653589793));
      boolean boolean0 = point1S1.equals(point1S0);
}"
3,"    public double getAzimuth() {
        return azimuth;
    }","  public void test3()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = Point1S.of((-2.141592653589793));
      boolean boolean0 = point1S1.equals(point1S0);
}"
4,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }

        if (other instanceof Point1S) {
            final Point1S rhs = (Point1S) other;

            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(normalizedAzimuth, rhs.normalizedAzimuth) == 0;
        }

        return false;
    }","  public void test4()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = Point1S.of((-2.141592653589793));
      boolean boolean0 = point1S1.equals(point1S0);
}"
5,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test5()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = Point1S.of((-2.141592653589793));
      boolean boolean0 = point1S1.equals(point1S0);
}"
6,"    public double getAzimuth() {
        return azimuth;
    }","  public void test6()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = Point1S.of((-2.141592653589793));
      boolean boolean0 = point1S1.equals(point1S0);
}"
7,"    public double getAzimuth() {
        return azimuth;
    }","  public void test7()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of((-2031.388), 601.1);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      point1S0.hashCode();
}"
8,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test8()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of((-2031.388), 601.1);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      point1S0.hashCode();
}"
9,"    public double getAzimuth() {
        return azimuth;
    }","  public void test9()  throws Throwable  {
      Point1S point1S0 = Point1S.of(Double.POSITIVE_INFINITY);
      Point1S point1S1 = point1S0.antipodal();
}"
10,"    public double signedDistance(final Point1S point) {
        return signedDistance(this, point);
    }","  public void test10()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(0.0);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Point1S point1S1 = Point1S.of((-2685.56));
      double double0 = point1S1.signedDistance(point1S0);
}"
11,"    public double getAzimuth() {
        return azimuth;
    }","  public void test11()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(0.0);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Point1S point1S1 = Point1S.of((-2685.56));
      double double0 = point1S1.signedDistance(point1S0);
}"
12,"    public double signedDistance(final Point1S point) {
        return signedDistance(this, point);
    }","  public void test12()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Point1S point1S1 = point1S0.ZERO.above(point1S0);
      double double0 = point1S0.signedDistance(point1S1);
}"
13,"    public double getAzimuth() {
        return azimuth;
    }","  public void test13()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Point1S point1S1 = point1S0.ZERO.above(point1S0);
      double double0 = point1S0.signedDistance(point1S1);
}"
14,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test14()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Point1S point1S1 = point1S0.ZERO.above(point1S0);
      double double0 = point1S0.signedDistance(point1S1);
}"
15,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test15()  throws Throwable  {
      Point1S point1S0 = Point1S.parse(""(NaN)"");
}"
16,"    public double getAzimuth() {
        return azimuth;
    }","  public void test16()  throws Throwable  {
      Point1S point1S0 = Point1S.parse(""(Infinity)"");
}"
17,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test17()  throws Throwable  {
      Point1S point1S0 = Point1S.parse(""(Infinity)"");
}"
18,"    public double getAzimuth() {
        return azimuth;
    }","  public void test18()  throws Throwable  {
      Point1S point1S0 = Point1S.parse(""(0.0)"");
}"
19,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test19()  throws Throwable  {
      Point1S point1S0 = Point1S.parse(""(0.0)"");
}"
20,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test20()  throws Throwable  {
      Point1S point1S0 = Point1S.parse(""(-2685.56)"");
}"
21,"    public double getAzimuth() {
        return azimuth;
    }","  public void test21()  throws Throwable  {
      Point1S point1S0 = Point1S.parse(""(-2685.56)"");
}"
22,"    public boolean isInfinite() {
        return !isNaN() && Double.isInfinite(azimuth);
    }","  public void test22()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.of(Double.NaN);
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
}"
23,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test23()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.of(Double.NEGATIVE_INFINITY);
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
}"
24,"    public double getAzimuth() {
        return azimuth;
    }","  public void test24()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.of(Double.NEGATIVE_INFINITY);
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
}"
25,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test25()  throws Throwable  {
      Point1S point1S0 = Point1S.of(Double.NaN);
}"
26,"    public boolean isNaN() {
        return Double.isNaN(azimuth);
    }","  public void test26()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      boolean boolean0 = point1S0.isNaN();
}"
27,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test27()  throws Throwable  {
      Point1S point1S0 = Point1S.of(2221.38449967);
      Vector2D vector2D0 = point1S0.getVector();
}"
28,"    public Vector2D getVector() {
        if (isFinite()) {
            return PolarCoordinates.toCartesian(1, azimuth);
        }

        return null;
    }","  public void test28()  throws Throwable  {
      Point1S point1S0 = Point1S.of(2221.38449967);
      Vector2D vector2D0 = point1S0.getVector();
}"
29,"    public Vector2D getVector() {
        if (isFinite()) {
            return PolarCoordinates.toCartesian(1, azimuth);
        }

        return null;
    }","  public void test29()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Vector2D vector2D0 = point1S0.getVector();
}"
30,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test30()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Vector2D vector2D0 = point1S0.getVector();
}"
31,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test31()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.TWO_PI;
      Angle.Deg angle_Deg0 = angle_Rad0.toDeg();
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      double double0 = point1S0.getNormalizedAzimuth();
}"
32,"    public double getAzimuth() {
        return azimuth;
    }","  public void test32()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.TWO_PI;
      Angle.Deg angle_Deg0 = angle_Rad0.toDeg();
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      double double0 = point1S0.getNormalizedAzimuth();
}"
33,"    public double getAzimuth() {
        return azimuth;
    }","  public void test33()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.of(0.0);
      Angle.Turn angle_Turn0 = angle_Deg0.toTurn();
      Point1S point1S0 = Point1S.of((Angle) angle_Turn0);
      double double0 = point1S0.getAzimuth();
}"
34,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test34()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.of(0.0);
      Angle.Turn angle_Turn0 = angle_Deg0.toTurn();
      Point1S point1S0 = Point1S.of((Angle) angle_Turn0);
      double double0 = point1S0.getAzimuth();
}"
35,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test35()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      Point1S point1S1 = point1S0.PI.above((-96.44228530624491));
      double double0 = point1S1.getAzimuth();
}"
36,"    public double getAzimuth() {
        return azimuth;
    }","  public void test36()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      Point1S point1S1 = point1S0.PI.above((-96.44228530624491));
      double double0 = point1S1.getAzimuth();
}"
37,"    public double getAzimuth() {
        return azimuth;
    }","  public void test37()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of((-2213.87945022928), Double.NEGATIVE_INFINITY);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
}"
38,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test38()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of((-2213.87945022928), Double.NEGATIVE_INFINITY);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
}"
39,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test39()  throws Throwable  {
      Point1S point1S0 = Point1S.of(0.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      point1S0.eq(point1S0, precision_DoubleEquivalence0);
}"
40,"    public double getAzimuth() {
        return azimuth;
    }","  public void test40()  throws Throwable  {
      Point1S point1S0 = Point1S.of(0.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      point1S0.eq(point1S0, precision_DoubleEquivalence0);
}"
41,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test41()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(0.0);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      double double0 = Point1S.distance(point1S0, point1S0);
}"
42,"    public double getAzimuth() {
        return azimuth;
    }","  public void test42()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(0.0);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      double double0 = Point1S.distance(point1S0, point1S0);
}"
43,"    public double distance(final Point1S point) {
        return distance(this, point);
    }","  public void test43()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(0.0);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      double double0 = Point1S.distance(point1S0, point1S0);
}"
44,"    public double distance(final Point1S point) {
        return distance(this, point);
    }","  public void test44()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Point1S point1S1 = point1S0.ZERO.above(point1S0);
      double double0 = point1S0.distance(point1S1);
}"
45,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test45()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Point1S point1S1 = point1S0.ZERO.above(point1S0);
      double double0 = point1S0.distance(point1S1);
}"
46,"    public double getAzimuth() {
        return azimuth;
    }","  public void test46()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Point1S point1S1 = point1S0.ZERO.above(point1S0);
      double double0 = point1S0.distance(point1S1);
}"
47,"    public double getAzimuth() {
        return azimuth;
    }","  public void test47()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      point1S0.NaN.antipodal();
}"
48,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test48()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      point1S0.NaN.antipodal();
}"
49,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test49()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Angle.Deg angle_Deg0 = angle_Rad0.toDeg();
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      Point1S point1S1 = point1S0.antipodal();
}"
50,"    public double getAzimuth() {
        return azimuth;
    }","  public void test50()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Angle.Deg angle_Deg0 = angle_Rad0.toDeg();
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      Point1S point1S1 = point1S0.antipodal();
}"
51,"    public double getAzimuth() {
        return azimuth;
    }","  public void test51()  throws Throwable  {
      Point1S point1S0 = Point1S.of(Double.NEGATIVE_INFINITY);
      Point1S point1S1 = point1S0.antipodal();
}"
52,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test52()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      Point1S point1S1 = point1S0.PI.above(point1S0);
}"
53,"    public double getAzimuth() {
        return azimuth;
    }","  public void test53()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      Point1S point1S1 = point1S0.PI.above(point1S0);
}"
54,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test54()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      Point1S point1S1 = point1S0.above(Double.NaN);
}"
55,"    public boolean isNaN() {
        return Double.isNaN(azimuth);
    }","  public void test55()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      Point1S point1S1 = point1S0.above(Double.NaN);
}"
56,"    public double getAzimuth() {
        return azimuth;
    }","  public void test56()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Point1S point1S1 = point1S0.above((-3485.3882551177367));
      Point1S point1S2 = point1S1.ZERO.above(point1S1);
}"
57,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test57()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Point1S point1S1 = point1S0.above((-3485.3882551177367));
      Point1S point1S2 = point1S1.ZERO.above(point1S1);
}"
58,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test58()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Point1S point1S1 = point1S0.above((-3485.3882551177367));
      Point1S point1S2 = point1S1.ZERO.above(point1S1);
}"
59,"    public double getAzimuth() {
        return azimuth;
    }","  public void test59()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Point1S point1S1 = point1S0.above((-3485.3882551177367));
      Point1S point1S2 = point1S1.ZERO.above(point1S1);
}"
60,"    public double signedDistance(final Point1S point) {
        return signedDistance(this, point);
    }","  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        Point1S.signedDistance((Point1S) null, (Point1S) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.Point1S"", e);
      }
  }"
61,"    public double signedDistance(final Point1S point) {
        return signedDistance(this, point);
    }","  public void test61()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(2406.0, 2406.0);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      // Undeclared exception!
      try { 
        point1S0.signedDistance((Point1S) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.Point1S"", e);
      }
  }"
62,"    public static Point1S parse(final String str) {
        return SimpleTupleFormat.getDefault().parse(str, (DoubleFunction1N<Point1S>) Point1S::of);
    }","  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        Point1S.parse((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.internal.SimpleTupleFormat"", e);
      }
  }"
63,"    public static Point1S of(final double azimuth) {
        final double normalizedAzimuth = PolarCoordinates.normalizeAzimuth(azimuth);

        return new Point1S(azimuth, normalizedAzimuth);
    }","  public void test63()  throws Throwable  {
      // Undeclared exception!
      try { 
        Point1S.of((Angle) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.Point1S"", e);
      }
  }"
64,"    public static Point1S from(final Vector2D vector) {
        final PolarCoordinates polar = PolarCoordinates.fromCartesian(vector);
        final double az = polar.getAzimuth();

        return new Point1S(az, az);
    }","  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        Point1S.from((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.PolarCoordinates"", e);
      }
  }"
65,"    public static Point1S from(final Vector2D vector) {
        final PolarCoordinates polar = PolarCoordinates.fromCartesian(vector);
        final double az = polar.getAzimuth();

        return new Point1S(az, az);
    }","  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        Point1S.from((PolarCoordinates) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.Point1S"", e);
      }
  }"
66,"    public boolean eq(final Point1S other, final Precision.DoubleEquivalence precision) {
        final double dist = signedDistance(other);
        return precision.eqZero(dist);
    }","  public void test66()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        point1S0.eq((Point1S) null, precision_DoubleEquivalence0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.Point1S"", e);
      }
  }"
67,"    public double distance(final Point1S point) {
        return distance(this, point);
    }","  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        Point1S.distance((Point1S) null, (Point1S) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.Point1S"", e);
      }
  }"
68,"    public double distance(final Point1S point) {
        return distance(this, point);
    }","  public void test68()  throws Throwable  {
      Point1S point1S0 = Point1S.of(388.0);
      // Undeclared exception!
      try { 
        point1S0.distance((Point1S) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.Point1S"", e);
      }
  }"
69,"    public Point1S above(final double base) {
        if (isFinite()) {
            final double az = Angle.Rad.normalizer(base).applyAsDouble(azimuth);
            return new Point1S(az, normalizedAzimuth);
        }
        throw new IllegalArgumentException(""Cannot normalize azimuth value: "" + azimuth);
    }","  public void test69()  throws Throwable  {
      Angle.Turn angle_Turn0 = Angle.Turn.ZERO;
      Point1S point1S0 = Point1S.of((Angle) angle_Turn0);
      // Undeclared exception!
      try { 
        point1S0.above((Point1S) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.Point1S"", e);
      }
  }"
70,"    public double getAzimuth() {
        return azimuth;
    }","  public void test70()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(0.0);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Point1S point1S1 = Point1S.of((-2685.56));
      double double0 = Point1S.signedDistance(point1S0, point1S1);
}"
71,"    public double signedDistance(final Point1S point) {
        return signedDistance(this, point);
    }","  public void test71()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(0.0);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Point1S point1S1 = Point1S.of((-2685.56));
      double double0 = Point1S.signedDistance(point1S0, point1S1);
}"
72,"    public double getAzimuth() {
        return azimuth;
    }","  public void test72()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.ZERO;
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      double double0 = Point1S.signedDistance(point1S0, point1S0);
}"
73,"    public double signedDistance(final Point1S point) {
        return signedDistance(this, point);
    }","  public void test73()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.ZERO;
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      double double0 = Point1S.signedDistance(point1S0, point1S0);
}"
74,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test74()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.ZERO;
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      double double0 = Point1S.signedDistance(point1S0, point1S0);
}"
75,"    public Point1S above(final double base) {
        if (isFinite()) {
            final double az = Angle.Rad.normalizer(base).applyAsDouble(azimuth);
            return new Point1S(az, normalizedAzimuth);
        }
        throw new IllegalArgumentException(""Cannot normalize azimuth value: "" + azimuth);
    }","  public void test75()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      // Undeclared exception!
      try { 
        point1S0.above(1.5707963267948966);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize azimuth value: NaN
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.Point1S"", e);
      }
  }"
76,"    public double getAzimuth() {
        return azimuth;
    }","  public void test76()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Angle.Deg angle_Deg0 = angle_Rad0.toDeg();
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      double double0 = point1S0.signedDistance(point1S0);
}"
77,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test77()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Angle.Deg angle_Deg0 = angle_Rad0.toDeg();
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      double double0 = point1S0.signedDistance(point1S0);
}"
78,"    public double signedDistance(final Point1S point) {
        return signedDistance(this, point);
    }","  public void test78()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Angle.Deg angle_Deg0 = angle_Rad0.toDeg();
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      double double0 = point1S0.signedDistance(point1S0);
}"
79,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test79()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      double double0 = point1S0.getAzimuth();
}"
80,"    public double getAzimuth() {
        return azimuth;
    }","  public void test80()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      double double0 = point1S0.getAzimuth();
}"
81,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test81()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.ZERO;
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      point1S0.PI.isFinite();
}"
82,"    public double getAzimuth() {
        return azimuth;
    }","  public void test82()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.ZERO;
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      point1S0.PI.isFinite();
}"
83,"    public boolean isNaN() {
        return Double.isNaN(azimuth);
    }","  public void test83()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      boolean boolean0 = point1S0.isNaN();
}"
84,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test84()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), (-2644.75));
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Point1S point1S1 = Point1S.from((Vector2D) vector2D_Unit0);
      double double0 = Point1S.distance(point1S1, point1S0);
}"
85,"    public double getAzimuth() {
        return azimuth;
    }","  public void test85()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), (-2644.75));
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Point1S point1S1 = Point1S.from((Vector2D) vector2D_Unit0);
      double double0 = Point1S.distance(point1S1, point1S0);
}"
86,"    public double getAzimuth() {
        return azimuth;
    }","  public void test86()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), (-2644.75));
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Point1S point1S1 = Point1S.from((Vector2D) vector2D_Unit0);
      double double0 = Point1S.distance(point1S1, point1S0);
}"
87,"    public double distance(final Point1S point) {
        return distance(this, point);
    }","  public void test87()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), (-2644.75));
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Point1S point1S1 = Point1S.from((Vector2D) vector2D_Unit0);
      double double0 = Point1S.distance(point1S1, point1S0);
}"
88,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test88()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), (-2644.75));
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Point1S point1S1 = Point1S.from((Vector2D) vector2D_Unit0);
      double double0 = Point1S.distance(point1S1, point1S0);
}"
89,"    public double getAzimuth() {
        return azimuth;
    }","  public void test89()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Angle.Rad angle_Rad0 = Angle.Rad.TWO_PI;
      Angle.Turn angle_Turn0 = angle_Rad0.toTurn();
      Point1S point1S0 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S1 = Point1S.from(vector2D0);
      double double0 = Point1S.signedDistance(point1S1, point1S0);
}"
90,"    public double signedDistance(final Point1S point) {
        return signedDistance(this, point);
    }","  public void test90()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Angle.Rad angle_Rad0 = Angle.Rad.TWO_PI;
      Angle.Turn angle_Turn0 = angle_Rad0.toTurn();
      Point1S point1S0 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S1 = Point1S.from(vector2D0);
      double double0 = Point1S.signedDistance(point1S1, point1S0);
}"
91,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test91()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Angle.Rad angle_Rad0 = Angle.Rad.TWO_PI;
      Angle.Turn angle_Turn0 = angle_Rad0.toTurn();
      Point1S point1S0 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S1 = Point1S.from(vector2D0);
      double double0 = Point1S.signedDistance(point1S1, point1S0);
}"
92,"    public double getAzimuth() {
        return azimuth;
    }","  public void test92()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Angle.Rad angle_Rad0 = Angle.Rad.TWO_PI;
      Angle.Turn angle_Turn0 = angle_Rad0.toTurn();
      Point1S point1S0 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S1 = Point1S.from(vector2D0);
      double double0 = Point1S.signedDistance(point1S1, point1S0);
}"
93,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }

        if (other instanceof Point1S) {
            final Point1S rhs = (Point1S) other;

            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(normalizedAzimuth, rhs.normalizedAzimuth) == 0;
        }

        return false;
    }","  public void test93()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(6.696928794914171E299, (-3035.5603459421836));
      Point1S point1S0 = Point1S.from(vector2D0);
      Angle.Turn angle_Turn0 = Angle.Turn.of(6.696928794914171E299);
      Point1S point1S1 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S2 = point1S0.above(point1S1);
      boolean boolean0 = point1S2.equals(point1S1);
}"
94,"    public double getAzimuth() {
        return azimuth;
    }","  public void test94()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(6.696928794914171E299, (-3035.5603459421836));
      Point1S point1S0 = Point1S.from(vector2D0);
      Angle.Turn angle_Turn0 = Angle.Turn.of(6.696928794914171E299);
      Point1S point1S1 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S2 = point1S0.above(point1S1);
      boolean boolean0 = point1S2.equals(point1S1);
}"
95,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }

        if (other instanceof Point1S) {
            final Point1S rhs = (Point1S) other;

            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(normalizedAzimuth, rhs.normalizedAzimuth) == 0;
        }

        return false;
    }","  public void test95()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(6.696928794914171E299, (-3035.5603459421836));
      Point1S point1S0 = Point1S.from(vector2D0);
      Angle.Turn angle_Turn0 = Angle.Turn.of(6.696928794914171E299);
      Point1S point1S1 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S2 = point1S0.above(point1S1);
      boolean boolean0 = point1S2.equals(point1S1);
}"
96,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test96()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(6.696928794914171E299, (-3035.5603459421836));
      Point1S point1S0 = Point1S.from(vector2D0);
      Angle.Turn angle_Turn0 = Angle.Turn.of(6.696928794914171E299);
      Point1S point1S1 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S2 = point1S0.above(point1S1);
      boolean boolean0 = point1S2.equals(point1S1);
}"
97,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }

        if (other instanceof Point1S) {
            final Point1S rhs = (Point1S) other;

            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(normalizedAzimuth, rhs.normalizedAzimuth) == 0;
        }

        return false;
    }","  public void test97()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(6.696928794914171E299, (-3035.5603459421836));
      Point1S point1S0 = Point1S.from(vector2D0);
      Angle.Turn angle_Turn0 = Angle.Turn.of(6.696928794914171E299);
      Point1S point1S1 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S2 = point1S0.above(point1S1);
      boolean boolean0 = point1S2.equals(point1S1);
}"
98,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }

        if (other instanceof Point1S) {
            final Point1S rhs = (Point1S) other;

            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(normalizedAzimuth, rhs.normalizedAzimuth) == 0;
        }

        return false;
    }","  public void test98()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(6.696928794914171E299, (-3035.5603459421836));
      Point1S point1S0 = Point1S.from(vector2D0);
      Angle.Turn angle_Turn0 = Angle.Turn.of(6.696928794914171E299);
      Point1S point1S1 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S2 = point1S0.above(point1S1);
      boolean boolean0 = point1S2.equals(point1S1);
}"
99,"    public double getAzimuth() {
        return azimuth;
    }","  public void test99()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(6.696928794914171E299, (-3035.5603459421836));
      Point1S point1S0 = Point1S.from(vector2D0);
      Angle.Turn angle_Turn0 = Angle.Turn.of(6.696928794914171E299);
      Point1S point1S1 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S2 = point1S0.above(point1S1);
      boolean boolean0 = point1S2.equals(point1S1);
}"
100,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test100()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(6.696928794914171E299, (-3035.5603459421836));
      Point1S point1S0 = Point1S.from(vector2D0);
      Angle.Turn angle_Turn0 = Angle.Turn.of(6.696928794914171E299);
      Point1S point1S1 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S2 = point1S0.above(point1S1);
      boolean boolean0 = point1S2.equals(point1S1);
}"
101,"    public Vector2D getVector() {
        if (isFinite()) {
            return PolarCoordinates.toCartesian(1, azimuth);
        }

        return null;
    }","  public void test101()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Vector2D vector2D0 = point1S0.ZERO.getVector();
}"
102,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }

        if (other instanceof Point1S) {
            final Point1S rhs = (Point1S) other;

            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(normalizedAzimuth, rhs.normalizedAzimuth) == 0;
        }

        return false;
    }","  public void test102()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Vector2D vector2D0 = point1S0.ZERO.getVector();
      Point1S point1S1 = point1S0.ZERO.above((-2.141592653589793));
      Point1S point1S2 = Point1S.from(vector2D0);
      boolean boolean0 = point1S2.equals(point1S1);
}"
103,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test103()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Vector2D vector2D0 = point1S0.ZERO.getVector();
      Point1S point1S1 = point1S0.ZERO.above((-2.141592653589793));
      Point1S point1S2 = Point1S.from(vector2D0);
      boolean boolean0 = point1S2.equals(point1S1);
}"
104,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }

        if (other instanceof Point1S) {
            final Point1S rhs = (Point1S) other;

            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(normalizedAzimuth, rhs.normalizedAzimuth) == 0;
        }

        return false;
    }","  public void test104()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Vector2D vector2D0 = point1S0.ZERO.getVector();
      Point1S point1S1 = point1S0.ZERO.above((-2.141592653589793));
      Point1S point1S2 = Point1S.from(vector2D0);
      boolean boolean0 = point1S2.equals(point1S1);
}"
105,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }

        if (other instanceof Point1S) {
            final Point1S rhs = (Point1S) other;

            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(normalizedAzimuth, rhs.normalizedAzimuth) == 0;
        }

        return false;
    }","  public void test105()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Vector2D vector2D0 = point1S0.ZERO.getVector();
      Point1S point1S1 = point1S0.ZERO.above((-2.141592653589793));
      Point1S point1S2 = Point1S.from(vector2D0);
      boolean boolean0 = point1S2.equals(point1S1);
}"
106,"    public double getAzimuth() {
        return azimuth;
    }","  public void test106()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Vector2D vector2D0 = point1S0.ZERO.getVector();
      Point1S point1S1 = point1S0.ZERO.above((-2.141592653589793));
      Point1S point1S2 = Point1S.from(vector2D0);
      boolean boolean0 = point1S2.equals(point1S1);
}"
107,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test107()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = Point1S.of((-2.141592653589793));
      boolean boolean0 = point1S0.equals(point1S1);
}"
108,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }

        if (other instanceof Point1S) {
            final Point1S rhs = (Point1S) other;

            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(normalizedAzimuth, rhs.normalizedAzimuth) == 0;
        }

        return false;
    }","  public void test108()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = Point1S.of((-2.141592653589793));
      boolean boolean0 = point1S0.equals(point1S1);
}"
109,"    public double getAzimuth() {
        return azimuth;
    }","  public void test109()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = Point1S.of((-2.141592653589793));
      boolean boolean0 = point1S0.equals(point1S1);
}"
110,"    public double getAzimuth() {
        return azimuth;
    }","  public void test110()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = Point1S.of((-2.141592653589793));
      boolean boolean0 = point1S0.equals(point1S1);
}"
111,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test111()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = Point1S.of((-2.141592653589793));
      boolean boolean0 = point1S0.equals(point1S1);
}"
112,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }

        if (other instanceof Point1S) {
            final Point1S rhs = (Point1S) other;

            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(normalizedAzimuth, rhs.normalizedAzimuth) == 0;
        }

        return false;
    }","  public void test112()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      boolean boolean0 = point1S0.equals(""(NaN)"");
}"
113,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }

        if (other instanceof Point1S) {
            final Point1S rhs = (Point1S) other;

            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(normalizedAzimuth, rhs.normalizedAzimuth) == 0;
        }

        return false;
    }","  public void test113()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      boolean boolean0 = point1S0.equals(point1S0);
}"
114,"    public double getAzimuth() {
        return azimuth;
    }","  public void test114()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      boolean boolean0 = point1S0.equals(point1S0);
}"
115,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test115()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      boolean boolean0 = point1S0.equals(point1S0);
}"
116,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }

        if (other instanceof Point1S) {
            final Point1S rhs = (Point1S) other;

            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(normalizedAzimuth, rhs.normalizedAzimuth) == 0;
        }

        return false;
    }","  public void test116()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      Point1S point1S1 = Point1S.NaN;
      boolean boolean0 = point1S0.equals(point1S1);
}"
117,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }

        if (other instanceof Point1S) {
            final Point1S rhs = (Point1S) other;

            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(normalizedAzimuth, rhs.normalizedAzimuth) == 0;
        }

        return false;
    }","  public void test117()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      Point1S point1S1 = Point1S.NaN;
      boolean boolean0 = point1S0.equals(point1S1);
}"
118,"    public int hashCode() {
        if (isNaN()) {
            return 542;
        }
        return (Double.hashCode(azimuth) >> 17) ^
                Double.hashCode(normalizedAzimuth);
    }","  public void test118()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      point1S0.hashCode();
  }"
119,"    public Point1S above(final double base) {
        if (isFinite()) {
            final double az = Angle.Rad.normalizer(base).applyAsDouble(azimuth);
            return new Point1S(az, normalizedAzimuth);
        }
        throw new IllegalArgumentException(""Cannot normalize azimuth value: "" + azimuth);
    }","  public void test119()  throws Throwable  {
      Point1S point1S0 = Point1S.of(0.0);
      Point1S point1S1 = Point1S.NaN;
      // Undeclared exception!
      try { 
        point1S1.above(point1S0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize azimuth value: NaN
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.Point1S"", e);
      }
  }"
120,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test120()  throws Throwable  {
      Point1S point1S0 = Point1S.of(Double.POSITIVE_INFINITY);
      boolean boolean0 = point1S0.isInfinite();
}"
121,"    public boolean isInfinite() {
        return !isNaN() && Double.isInfinite(azimuth);
    }","  public void test121()  throws Throwable  {
      Point1S point1S0 = Point1S.of(Double.POSITIVE_INFINITY);
      boolean boolean0 = point1S0.isInfinite();
}"
122,"    public double getAzimuth() {
        return azimuth;
    }","  public void test122()  throws Throwable  {
      Point1S point1S0 = Point1S.of(Double.POSITIVE_INFINITY);
      boolean boolean0 = point1S0.isInfinite();
}"
123,"    public boolean isInfinite() {
        return !isNaN() && Double.isInfinite(azimuth);
    }","  public void test123()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      boolean boolean0 = point1S0.isInfinite();
}"
124,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test124()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      boolean boolean0 = point1S0.isInfinite();
}"
125,"    public double getAzimuth() {
        return azimuth;
    }","  public void test125()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      boolean boolean0 = point1S0.isInfinite();
}"
126,"    public boolean isInfinite() {
        return !isNaN() && Double.isInfinite(azimuth);
    }","  public void test126()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      boolean boolean0 = point1S0.isInfinite();
}"
127,"    public Vector2D getVector() {
        if (isFinite()) {
            return PolarCoordinates.toCartesian(1, azimuth);
        }

        return null;
    }","  public void test127()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      Vector2D vector2D0 = point1S0.getVector();
}"
128,"    public int getDimension() {
        return 1;
    }","  public void test128()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      int int0 = point1S0.getDimension();
}"
129,"    public boolean isInfinite() {
        return !isNaN() && Double.isInfinite(azimuth);
    }","  public void test129()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(Double.NaN, Double.NaN);
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(vector2D0);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
}"
130,"    public static Point1S parse(final String str) {
        return SimpleTupleFormat.getDefault().parse(str, (DoubleFunction1N<Point1S>) Point1S::of);
    }","  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        Point1S.parse(""}{Z>>>sA:OUV.r,X?B"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \""}{Z>>>sA:OUV.r,X?B\"" at index 0: expected \""(\"" but found \""}\""
         //
         verifyException(""org.apache.commons.geometry.core.internal.SimpleTupleFormat"", e);
      }
  }"
131,"    public String toString() {
        return SimpleTupleFormat.getDefault().format(getAzimuth());
    }","  public void test131()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      String string0 = point1S0.toString();
}"
132,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test132()  throws Throwable  {
      Point1S point1S0 = Point1S.of((-2394.24));
      double double0 = point1S0.getNormalizedAzimuth();
}"
133,"    public double getAzimuth() {
        return azimuth;
    }","  public void test133()  throws Throwable  {
      Point1S point1S0 = Point1S.of((-2394.24));
      double double0 = point1S0.getNormalizedAzimuth();
}"
134,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test134()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(Double.NaN, Double.NaN);
      Point1S point1S0 = Point1S.from(vector2D0);
}"
135,"    public double distance(final Point1S point) {
        return distance(this, point);
    }","  public void test135()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      double double0 = point1S0.distance(point1S0);
}"
136,"    public double getNormalizedAzimuth() {
        return normalizedAzimuth;
    }","  public void test136()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(0.0);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Point1S point1S1 = point1S0.above(point1S0);
}"
137,"    public double getAzimuth() {
        return azimuth;
    }","  public void test137()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(0.0);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Point1S point1S1 = point1S0.above(point1S0);
}"
138,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }

        if (other instanceof Point1S) {
            final Point1S rhs = (Point1S) other;

            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(normalizedAzimuth, rhs.normalizedAzimuth) == 0;
        }

        return false;
    }","  public void test138()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(0.0);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Point1S point1S1 = point1S0.above(point1S0);
}"
139,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test0()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-1766.3328104022414), (-1766.3328104022414));
      Point1S point1S0 = Point1S.from(vector2D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn((-1766.3328104022414), (double)(-864), Double.NaN).when(precision_DoubleEquivalence0).signum(anyDouble());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence0);
      cutAngle0.contains(point1S0);
      boolean boolean0 = cutAngle0.contains(point1S0);
      boolean boolean1 = cutAngle0.contains(point1S0);
}"
140,"    CutAngle(final Point1S point, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        super(precision);

        this.point = point;
        this.positiveFacing = positiveFacing;
    }","  public void test1()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-1766.3328104022414), (-1766.3328104022414));
      Point1S point1S0 = Point1S.from(vector2D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn((-1766.3328104022414), (double)(-864), Double.NaN).when(precision_DoubleEquivalence0).signum(anyDouble());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence0);
      cutAngle0.contains(point1S0);
      boolean boolean0 = cutAngle0.contains(point1S0);
      boolean boolean1 = cutAngle0.contains(point1S0);
}"
141,"    CutAngle(final Point1S point, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        super(precision);

        this.point = point;
        this.positiveFacing = positiveFacing;
    }","  public void test2()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-1766.3328104022414), (-1766.3328104022414));
      Point1S point1S0 = Point1S.from(vector2D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn((-1766.3328104022414), (double)(-864), Double.NaN).when(precision_DoubleEquivalence0).signum(anyDouble());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence0);
      cutAngle0.contains(point1S0);
      boolean boolean0 = cutAngle0.contains(point1S0);
      boolean boolean1 = cutAngle0.contains(point1S0);
}"
142,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test3()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createRotation(1.5707963267948966);
      CutAngle cutAngle1 = cutAngle0.transform(transform1S0);
}"
143,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test4()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createRotation(1.5707963267948966);
      CutAngle cutAngle1 = cutAngle0.transform(transform1S0);
}"
144,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test5()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = transform1S0.apply(point1S0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S1, false, precision_DoubleEquivalence0);
      CutAngle cutAngle1 = cutAngle0.transform(transform1S0);
      CutAngle cutAngle2 = cutAngle1.reverse();
}"
145,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test6()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle((Point1S) null, true, precision_DoubleEquivalence0);
      cutAngle0.project((Point1S) null);
}"
146,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test7()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      cutAngle0.project(point1S0);
}"
147,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test8()  throws Throwable  {
      Point1S point1S0 = Point1S.of(802.44825820703);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createRotation(Double.NEGATIVE_INFINITY);
      CutAngle cutAngle1 = cutAngle0.transform(transform1S0);
      cutAngle1.project(point1S0);
}"
148,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test9()  throws Throwable  {
      Point1S point1S0 = Point1S.of(802.44825820703);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createRotation(Double.NEGATIVE_INFINITY);
      CutAngle cutAngle1 = cutAngle0.transform(transform1S0);
      cutAngle1.project(point1S0);
}"
149,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test10()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.ZERO;
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence0);
      cutAngle0.project(point1S0);
}"
150,"    public double offset(final Point1S pt) {
        final double dist = pt.getNormalizedAzimuth() - this.point.getNormalizedAzimuth();
        return positiveFacing ? +dist : -dist;
    }","  public void test11()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      Point1S point1S1 = Point1S.of(2679.6859180501187);
      double double0 = cutAngle0.offset(point1S1);
}"
151,"    public double offset(final Point1S pt) {
        final double dist = pt.getNormalizedAzimuth() - this.point.getNormalizedAzimuth();
        return positiveFacing ? +dist : -dist;
    }","  public void test12()  throws Throwable  {
      Point1S point1S0 = Point1S.of(1510.2752);
      CutAngle cutAngle0 = new CutAngle(point1S0, true, (Precision.DoubleEquivalence) null);
      Transform1S transform1S0 = Transform1S.createNegation();
      CutAngle cutAngle1 = cutAngle0.transform(transform1S0);
      CutAngle cutAngle2 = cutAngle1.reverse();
      double double0 = cutAngle2.offset(point1S0);
}"
152,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test13()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      boolean boolean0 = cutAngle0.isPositiveFacing();
}"
153,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test14()  throws Throwable  {
      CutAngle cutAngle0 = new CutAngle((Point1S) null, true, (Precision.DoubleEquivalence) null);
      cutAngle0.getPoint();
}"
154,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test15()  throws Throwable  {
      Point1S point1S0 = Point1S.of(Double.POSITIVE_INFINITY);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      cutAngle0.getPoint();
}"
155,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test16()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      cutAngle0.getPoint();
}"
156,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test17()  throws Throwable  {
      Point1S point1S0 = Point1S.of(802.44825820703);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createNegation();
      CutAngle cutAngle1 = cutAngle0.transform(transform1S0);
      cutAngle1.getPoint();
}"
157,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test18()  throws Throwable  {
      Point1S point1S0 = Point1S.of(802.44825820703);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createNegation();
      CutAngle cutAngle1 = cutAngle0.transform(transform1S0);
      cutAngle1.getPoint();
}"
158,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test19()  throws Throwable  {
      Angle.Turn angle_Turn0 = Angle.Turn.ZERO;
      Angle.Deg angle_Deg0 = angle_Turn0.toDeg();
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      CutAngle cutAngle0 = new CutAngle(point1S0, true, (Precision.DoubleEquivalence) null);
      cutAngle0.getNormalizedAzimuth();
}"
159,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test20()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = transform1S0.apply(point1S0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S1, false, precision_DoubleEquivalence0);
      CutAngle cutAngle1 = cutAngle0.transform(transform1S0);
      cutAngle1.getNormalizedAzimuth();
}"
160,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test21()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = transform1S0.apply(point1S0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S1, false, precision_DoubleEquivalence0);
      CutAngle cutAngle1 = cutAngle0.transform(transform1S0);
      cutAngle1.getNormalizedAzimuth();
}"
161,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test22()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      cutAngle0.getAzimuth();
}"
162,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test23()  throws Throwable  {
      Point1S point1S0 = Point1S.of(2560.42699);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createNegation();
      CutAngle cutAngle1 = cutAngle0.transform(transform1S0);
      cutAngle1.getAzimuth();
}"
163,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test24()  throws Throwable  {
      Point1S point1S0 = Point1S.of(2560.42699);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createNegation();
      CutAngle cutAngle1 = cutAngle0.transform(transform1S0);
      cutAngle1.getAzimuth();
}"
164,"    public CutAngle transform(final Transform<Point1S> transform) {
        final Point1S tPoint = transform.apply(point);
        final boolean tPositiveFacing = transform.preservesOrientation() == positiveFacing;

        return CutAngles.fromPointAndDirection(tPoint, tPositiveFacing, getPrecision());
    }","  public void test25()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle((Point1S) null, true, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createRotation(1.0);
      // Undeclared exception!
      try { 
        cutAngle0.transform(transform1S0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.Transform1S"", e);
      }
  }"
165,"    public boolean similarOrientation(final Hyperplane<Point1S> other) {
        return positiveFacing == ((CutAngle) other).positiveFacing;
    }","  public void test26()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.ZERO;
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        cutAngle0.similarOrientation((Hyperplane<Point1S>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.CutAngle"", e);
      }
  }"
166,"    public double offset(final Point1S pt) {
        final double dist = pt.getNormalizedAzimuth() - this.point.getNormalizedAzimuth();
        return positiveFacing ? +dist : -dist;
    }","  public void test27()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        cutAngle0.offset((Point1S) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.CutAngle"", e);
      }
  }"
167,"    public double getNormalizedAzimuth() {
        return point.getNormalizedAzimuth();
    }","  public void test28()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle((Point1S) null, true, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        cutAngle0.getNormalizedAzimuth();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.CutAngle"", e);
      }
  }"
168,"    public double getAzimuth() {
        return point.getAzimuth();
    }","  public void test29()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle((Point1S) null, true, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        cutAngle0.getAzimuth();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.CutAngle"", e);
      }
  }"
169,"    public boolean eq(final CutAngle other, final Precision.DoubleEquivalence precision) {
        return point.eq(other.point, precision) &&
                positiveFacing == other.positiveFacing;
    }","  public void test30()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(0.0);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      CutAngle cutAngle0 = new CutAngle(point1S0, false, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        cutAngle0.eq(cutAngle0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.Point1S"", e);
      }
  }"
170,"    public HyperplaneLocation classify(final Point1S pt) {
        final Precision.DoubleEquivalence precision = getPrecision();

        final Point1S compPt = Point1S.ZERO.eq(pt, precision) ?
                Point1S.ZERO :
                pt;

        final double offsetValue = offset(compPt);
        final double cmp = precision.signum(offsetValue);

        if (cmp > 0) {
            return HyperplaneLocation.PLUS;
        } else if (cmp < 0) {
            return HyperplaneLocation.MINUS;
        }

        return HyperplaneLocation.ON;
    }","  public void test31()  throws Throwable  {
      Angle.Turn angle_Turn0 = Angle.Turn.ZERO;
      Angle.Deg angle_Deg0 = angle_Turn0.toDeg();
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      CutAngle cutAngle0 = new CutAngle(point1S0, true, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        cutAngle0.classify(point1S0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.Point1S"", e);
      }
  }"
171,"    public HyperplaneLocation classify(final Point1S pt) {
        final Precision.DoubleEquivalence precision = getPrecision();

        final Point1S compPt = Point1S.ZERO.eq(pt, precision) ?
                Point1S.ZERO :
                pt;

        final double offsetValue = offset(compPt);
        final double cmp = precision.signum(offsetValue);

        if (cmp > 0) {
            return HyperplaneLocation.PLUS;
        } else if (cmp < 0) {
            return HyperplaneLocation.MINUS;
        }

        return HyperplaneLocation.ON;
    }","  public void test32()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence0);
      HyperplaneLocation hyperplaneLocation0 = cutAngle0.classify(point1S0);
}"
172,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test33()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence0);
      HyperplaneLocation hyperplaneLocation0 = cutAngle0.classify(point1S0);
}"
173,"    CutAngle(final Point1S point, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        super(precision);

        this.point = point;
        this.positiveFacing = positiveFacing;
    }","  public void test34()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(6.283185307179586, 6.283185307179586).when(precision_DoubleEquivalence0).signum(anyDouble());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence0);
      boolean boolean0 = cutAngle0.contains(point1S0);
}"
174,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test35()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(6.283185307179586, 6.283185307179586).when(precision_DoubleEquivalence0).signum(anyDouble());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence0);
      boolean boolean0 = cutAngle0.contains(point1S0);
      cutAngle0.classify(point1S0);
}"
175,"    public double offset(final Point1S pt) {
        final double dist = pt.getNormalizedAzimuth() - this.point.getNormalizedAzimuth();
        return positiveFacing ? +dist : -dist;
    }","  public void test36()  throws Throwable  {
      Angle.Turn angle_Turn0 = Angle.Turn.of(2917.6324024779);
      Angle.Deg angle_Deg0 = angle_Turn0.toDeg();
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      double double0 = cutAngle0.offset(point1S0);
}"
176,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test37()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      CutAngle cutAngle1 = cutAngle0.reverse();
      double double0 = cutAngle1.offset(point1S0);
}"
177,"    public double offset(final Point1S pt) {
        final double dist = pt.getNormalizedAzimuth() - this.point.getNormalizedAzimuth();
        return positiveFacing ? +dist : -dist;
    }","  public void test38()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      CutAngle cutAngle1 = cutAngle0.reverse();
      double double0 = cutAngle1.offset(point1S0);
}"
178,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test39()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createRotation((-1568.679681));
      CutAngle cutAngle1 = cutAngle0.transform(transform1S0);
      boolean boolean0 = cutAngle1.equals(cutAngle0);
}"
179,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test40()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createRotation((-1568.679681));
      CutAngle cutAngle1 = cutAngle0.transform(transform1S0);
      boolean boolean0 = cutAngle1.equals(cutAngle0);
}"
180,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof CutAngle)) {
            return false;
        }

        final CutAngle other = (CutAngle) obj;
        return Objects.equals(getPrecision(), other.getPrecision()) &&
                Objects.equals(point, other.point) &&
                positiveFacing == other.positiveFacing;
    }","  public void test41()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createRotation((-1568.679681));
      CutAngle cutAngle1 = cutAngle0.transform(transform1S0);
      boolean boolean0 = cutAngle1.equals(cutAngle0);
}"
181,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test42()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence0);
      CutAngle cutAngle1 = new CutAngle(point1S0, false, (Precision.DoubleEquivalence) null);
      boolean boolean0 = cutAngle0.equals(cutAngle1);
}"
182,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof CutAngle)) {
            return false;
        }

        final CutAngle other = (CutAngle) obj;
        return Objects.equals(getPrecision(), other.getPrecision()) &&
                Objects.equals(point, other.point) &&
                positiveFacing == other.positiveFacing;
    }","  public void test43()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence0);
      CutAngle cutAngle1 = new CutAngle(point1S0, false, (Precision.DoubleEquivalence) null);
      boolean boolean0 = cutAngle0.equals(cutAngle1);
}"
183,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof CutAngle)) {
            return false;
        }

        final CutAngle other = (CutAngle) obj;
        return Objects.equals(getPrecision(), other.getPrecision()) &&
                Objects.equals(point, other.point) &&
                positiveFacing == other.positiveFacing;
    }","  public void test44()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      CutAngle cutAngle1 = cutAngle0.reverse();
      boolean boolean0 = cutAngle0.equals(cutAngle1);
}"
184,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof CutAngle)) {
            return false;
        }

        final CutAngle other = (CutAngle) obj;
        return Objects.equals(getPrecision(), other.getPrecision()) &&
                Objects.equals(point, other.point) &&
                positiveFacing == other.positiveFacing;
    }","  public void test45()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      boolean boolean0 = cutAngle0.equals(cutAngle0);
}"
185,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test46()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      boolean boolean0 = cutAngle0.equals(cutAngle0);
}"
186,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof CutAngle)) {
            return false;
        }

        final CutAngle other = (CutAngle) obj;
        return Objects.equals(getPrecision(), other.getPrecision()) &&
                Objects.equals(point, other.point) &&
                positiveFacing == other.positiveFacing;
    }","  public void test47()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.ABSOLUTE;
      boolean boolean0 = cutAngle0.equals(axisReferenceFrame0);
}"
187,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test48()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.ABSOLUTE;
      boolean boolean0 = cutAngle0.equals(axisReferenceFrame0);
}"
188,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test49()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      boolean boolean0 = cutAngle0.similarOrientation(cutAngle0);
}"
189,"    public boolean similarOrientation(final Hyperplane<Point1S> other) {
        return positiveFacing == ((CutAngle) other).positiveFacing;
    }","  public void test50()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      boolean boolean0 = cutAngle0.similarOrientation(cutAngle0);
}"
190,"    public boolean similarOrientation(final Hyperplane<Point1S> other) {
        return positiveFacing == ((CutAngle) other).positiveFacing;
    }","  public void test51()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      CutAngle cutAngle1 = cutAngle0.reverse();
      boolean boolean0 = cutAngle0.similarOrientation(cutAngle1);
}"
191,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof CutAngle)) {
            return false;
        }

        final CutAngle other = (CutAngle) obj;
        return Objects.equals(getPrecision(), other.getPrecision()) &&
                Objects.equals(point, other.point) &&
                positiveFacing == other.positiveFacing;
    }","  public void test52()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.identity();
      CutAngle cutAngle1 = cutAngle0.transform(transform1S0);
      boolean boolean0 = cutAngle0.equals(cutAngle1);
}"
192,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test53()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn((-0.9999999999)).when(precision_DoubleEquivalence0).signum(anyDouble());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence0);
      HyperplaneLocation hyperplaneLocation0 = cutAngle0.classify(point1S0);
}"
193,"    public HyperplaneLocation classify(final Point1S pt) {
        final Precision.DoubleEquivalence precision = getPrecision();

        final Point1S compPt = Point1S.ZERO.eq(pt, precision) ?
                Point1S.ZERO :
                pt;

        final double offsetValue = offset(compPt);
        final double cmp = precision.signum(offsetValue);

        if (cmp > 0) {
            return HyperplaneLocation.PLUS;
        } else if (cmp < 0) {
            return HyperplaneLocation.MINUS;
        }

        return HyperplaneLocation.ON;
    }","  public void test54()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn((-0.9999999999)).when(precision_DoubleEquivalence0).signum(anyDouble());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence0);
      HyperplaneLocation hyperplaneLocation0 = cutAngle0.classify(point1S0);
}"
194,"    public boolean eq(final CutAngle other, final Precision.DoubleEquivalence precision) {
        return point.eq(other.point, precision) &&
                positiveFacing == other.positiveFacing;
    }","  public void test55()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      CutAngle cutAngle1 = cutAngle0.reverse();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      boolean boolean0 = cutAngle0.eq(cutAngle1, precision_DoubleEquivalence1);
}"
195,"    public boolean eq(final CutAngle other, final Precision.DoubleEquivalence precision) {
        return point.eq(other.point, precision) &&
                positiveFacing == other.positiveFacing;
    }","  public void test56()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      boolean boolean0 = cutAngle0.eq(cutAngle0, precision_DoubleEquivalence1);
}"
196,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test57()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      boolean boolean0 = cutAngle0.eq(cutAngle0, precision_DoubleEquivalence1);
}"
197,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test58()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      boolean boolean0 = cutAngle0.eq(cutAngle0, precision_DoubleEquivalence1);
}"
198,"    public boolean eq(final CutAngle other, final Precision.DoubleEquivalence precision) {
        return point.eq(other.point, precision) &&
                positiveFacing == other.positiveFacing;
    }","  public void test59()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      boolean boolean0 = cutAngle0.eq(cutAngle0, precision_DoubleEquivalence1);
}"
199,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test60()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      cutAngle0.hashCode();
}"
200,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(this.getClass().getSimpleName())
            .append(""[point= "")
            .append(point)
            .append("", positiveFacing= "")
            .append(isPositiveFacing())
            .append(']');

        return sb.toString();
    }","  public void test61()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle((Point1S) null, true, precision_DoubleEquivalence0);
      String string0 = cutAngle0.toString();
}"
201,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test62()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      cutAngle0.getNormalizedAzimuth();
}"
202,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test63()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(0.0);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      CutAngle cutAngle0 = new CutAngle(point1S0, false, (Precision.DoubleEquivalence) null);
      boolean boolean0 = cutAngle0.isPositiveFacing();
}"
203,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test64()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(0.0);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      CutAngle cutAngle0 = new CutAngle(point1S0, false, (Precision.DoubleEquivalence) null);
      cutAngle0.getAzimuth();
}"
204,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test65()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(0.0);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      CutAngle cutAngle0 = new CutAngle(point1S0, false, (Precision.DoubleEquivalence) null);
      cutAngle0.getPoint();
}"
205,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test66()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      cutAngle0.span();
}"
206,"    public List<AngularInterval.Convex> toConvex() {
        if (isConvex(minBoundary, maxBoundary)) {
            return Collections.singletonList(new Convex(minBoundary, maxBoundary));
        }

        final CutAngle midPos = CutAngles.createPositiveFacing(midpoint, minBoundary.getPrecision());
        final CutAngle midNeg = CutAngles.createNegativeFacing(midpoint, maxBoundary.getPrecision());

        return Arrays.asList(
                    new Convex(minBoundary, midPos),
                    new Convex(midNeg, maxBoundary)
                );
    }","  public void test0()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(false, true, false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createNegation();
      transform1S0.toString();
      transform1S0.toString();
      AngularInterval angularInterval1 = angularInterval0.transform(transform1S0);
      angularInterval1.getCentroid();
      angularInterval0.toTree();
      // Undeclared exception!
      try { 
        angularInterval1.toConvex();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Interval is not convex: [-6.283, -6.283]
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.AngularInterval$Convex"", e);
      }
  }"
207,"    public List<AngularInterval.Convex> toConvex() {
        if (isConvex(minBoundary, maxBoundary)) {
            return Collections.singletonList(new Convex(minBoundary, maxBoundary));
        }

        final CutAngle midPos = CutAngles.createPositiveFacing(midpoint, minBoundary.getPrecision());
        final CutAngle midNeg = CutAngles.createNegativeFacing(midpoint, maxBoundary.getPrecision());

        return Arrays.asList(
                    new Convex(minBoundary, midPos),
                    new Convex(midNeg, maxBoundary)
                );
    }","  public void test1()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(false, true, false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of((-4077.0), (-4077.0), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        angularInterval0.toConvex();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Interval is not convex: [-4,077, -4,077]
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.AngularInterval$Convex"", e);
      }
  }"
208,"    public Point1S project(final Point1S pt) {
        if (!isFull()) {
            final double minDist = minBoundary.getPoint().distance(pt);
            final double maxDist = maxBoundary.getPoint().distance(pt);

            return (minDist <= maxDist) ?
                    minBoundary.getPoint() :
                    maxBoundary.getPoint();
        }
        return null;
    }","  public void test2()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of((-2403.9785991955), 0.0, precision_DoubleEquivalence0);
      Angle.Turn angle_Turn0 = Angle.Turn.of(4468.334926);
      Point1S point1S0 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S1 = angularInterval0.project(point1S0);
}"
209,"    public double getSize() {
        return getMax() - getMin();
    }","  public void test3()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of((-2403.9785991955), 0.0, precision_DoubleEquivalence0);
      Angle.Turn angle_Turn0 = Angle.Turn.of(4468.334926);
      Point1S point1S0 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S1 = angularInterval0.project(point1S0);
}"
210,"    public boolean isEmpty() {
        return false;
    }","  public void test4()  throws Throwable  {
      Point1S point1S0 = Point1S.of(3288.27279);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of(point1S0, point1S0, precision_DoubleEquivalence0);
}"
211,"    public boolean isFull() {
        // minBoundary and maxBoundary are either both null or both not null
        return minBoundary == null;
    }","  public void test5()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence0);
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of(cutAngle0, cutAngle0);
}"
212,"    public double getMin() {
        return (minBoundary != null) ?
                minBoundary.getAzimuth() :
                0.0;
    }","  public void test6()  throws Throwable  {
      Point1S point1S0 = Point1S.of(4.8836057800053325);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.identity();
      AngularInterval angularInterval1 = angularInterval0.transform(transform1S0);
}"
213,"    public double getSize() {
        return getMax() - getMin();
    }","  public void test7()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(0.0, 0.9999, precision_DoubleEquivalence0);
      AngularInterval angularInterval1 = angularInterval0.transform(transform1S0);
}"
214,"    public double getMin() {
        return (minBoundary != null) ?
                minBoundary.getAzimuth() :
                0.0;
    }","  public void test8()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(0.0, 0.9999, precision_DoubleEquivalence0);
      AngularInterval angularInterval1 = angularInterval0.transform(transform1S0);
}"
215,"    public Point1S project(final Point1S pt) {
        if (!isFull()) {
            final double minDist = minBoundary.getPoint().distance(pt);
            final double maxDist = maxBoundary.getPoint().distance(pt);

            return (minDist <= maxDist) ?
                    minBoundary.getPoint() :
                    maxBoundary.getPoint();
        }
        return null;
    }","  public void test9()  throws Throwable  {
      Point1S point1S0 = Point1S.of(0.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      Point1S point1S1 = angularInterval0.project(point1S0);
}"
216,"    public double getSize() {
        return getMax() - getMin();
    }","  public void test10()  throws Throwable  {
      Point1S point1S0 = Point1S.of(4.71238898038469);
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-1.5707963267948966), 0.5);
      Point1S point1S1 = Point1S.from(polarCoordinates0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S1, precision_DoubleEquivalence0);
}"
217,"    public boolean isFull() {
        // minBoundary and maxBoundary are either both null or both not null
        return minBoundary == null;
    }","  public void test11()  throws Throwable  {
      Point1S point1S0 = Point1S.of(0.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
}"
218,"    public double getMax() {
        return (maxBoundary != null) ?
                maxBoundary.getAzimuth() :
                Angle.TWO_PI;
    }","  public void test12()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.of((-530.19));
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
}"
219,"    public double getMax() {
        return (maxBoundary != null) ?
                maxBoundary.getAzimuth() :
                Angle.TWO_PI;
    }","  public void test13()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of((-4077.0), (-4077.0), precision_DoubleEquivalence0);
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence1);
      CutAngle cutAngle1 = angularInterval0.getMaxBoundary();
      AngularInterval angularInterval1 = AngularInterval.of(cutAngle0, cutAngle1);
}"
220,"    public boolean wrapsZero() {
        if (!isFull()) {
            final double minNormAz = minBoundary.getPoint().getNormalizedAzimuth();
            final double maxNormAz = maxBoundary.getPoint().getNormalizedAzimuth();

            return maxNormAz < minNormAz;
        }
        return false;
    }","  public void test14()  throws Throwable  {
      Point1S point1S0 = Point1S.of(34.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMaxBoundary();
      CutAngle cutAngle1 = cutAngle0.reverse();
      AngularInterval angularInterval1 = AngularInterval.of(cutAngle1, cutAngle0);
}"
221,"    public boolean isFull() {
        // minBoundary and maxBoundary are either both null or both not null
        return minBoundary == null;
    }","  public void test15()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      CutAngle cutAngle0 = new CutAngle(point1S0, true, precision_DoubleEquivalence0);
      CutAngle cutAngle1 = cutAngle0.reverse();
      AngularInterval angularInterval0 = AngularInterval.of(cutAngle1, cutAngle0);
}"
222,"    public double getMax() {
        return (maxBoundary != null) ?
                maxBoundary.getAzimuth() :
                Angle.TWO_PI;
    }","  public void test16()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of((-4077.0), (-4077.0), precision_DoubleEquivalence0);
      Point1S point1S0 = angularInterval0.getMidPoint();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence1);
      CutAngle cutAngle1 = angularInterval0.getMaxBoundary();
      AngularInterval angularInterval1 = AngularInterval.of(cutAngle0, cutAngle1);
}"
223,"    public boolean wrapsZero() {
        if (!isFull()) {
            final double minNormAz = minBoundary.getPoint().getNormalizedAzimuth();
            final double maxNormAz = maxBoundary.getPoint().getNormalizedAzimuth();

            return maxNormAz < minNormAz;
        }
        return false;
    }","  public void test17()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(0.017453292519943295, 0.017453292519943295, precision_DoubleEquivalence0);
}"
224,"    public double getSize() {
        return getMax() - getMin();
    }","  public void test18()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of((-4077.0), (-4077.0), precision_DoubleEquivalence0);
      double double0 = angularInterval0.getSize();
}"
225,"    public CutAngle getMinBoundary() {
        return minBoundary;
    }","  public void test19()  throws Throwable  {
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      CutAngle cutAngle0 = angularInterval_Convex0.getMinBoundary();
}"
226,"    public CutAngle getMinBoundary() {
        return minBoundary;
    }","  public void test20()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMinBoundary();
}"
227,"    public double getMin() {
        return (minBoundary != null) ?
                minBoundary.getAzimuth() :
                0.0;
    }","  public void test21()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of((-10.3575702160912), (-10.3575702160912));
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      double double0 = angularInterval0.getMin();
}"
228,"    public Point1S getMidPoint() {
        return midpoint;
    }","  public void test22()  throws Throwable  {
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      Point1S point1S0 = angularInterval_Convex0.getMidPoint();
}"
229,"    public Point1S getMidPoint() {
        return midpoint;
    }","  public void test23()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(0.0, 0.0, precision_DoubleEquivalence0);
      Point1S point1S0 = angularInterval0.getMidPoint();
}"
230,"    public double getMax() {
        return (maxBoundary != null) ?
                maxBoundary.getAzimuth() :
                Angle.TWO_PI;
    }","  public void test24()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(0.0, 0.0, precision_DoubleEquivalence0);
      Point1S point1S0 = angularInterval0.getMidPoint();
}"
231,"    public double getMin() {
        return (minBoundary != null) ?
                minBoundary.getAzimuth() :
                0.0;
    }","  public void test25()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(0.0, 0.0, precision_DoubleEquivalence0);
      Point1S point1S0 = angularInterval0.getMidPoint();
}"
232,"    public Point1S getMidPoint() {
        return midpoint;
    }","  public void test26()  throws Throwable  {
      Point1S point1S0 = Point1S.of(1527.0499);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      Point1S point1S1 = angularInterval0.getMidPoint();
}"
233,"    public CutAngle getMaxBoundary() {
        return maxBoundary;
    }","  public void test27()  throws Throwable  {
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      CutAngle cutAngle0 = angularInterval_Convex0.getMaxBoundary();
}"
234,"    public CutAngle getMaxBoundary() {
        return maxBoundary;
    }","  public void test28()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMaxBoundary();
}"
235,"    public double getMax() {
        return (maxBoundary != null) ?
                maxBoundary.getAzimuth() :
                Angle.TWO_PI;
    }","  public void test29()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of((-2213.619886), (-2213.619886), precision_DoubleEquivalence0);
      double double0 = angularInterval0.getMax();
}"
236,"    public Point1S getCentroid() {
        return getMidPoint();
    }","  public void test30()  throws Throwable  {
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      Point1S point1S0 = angularInterval_Convex0.getCentroid();
}"
237,"    public Point1S getCentroid() {
        return getMidPoint();
    }","  public void test31()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      Point1S point1S0 = angularInterval0.getCentroid();
      Point1S point1S1 = Point1S.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      AngularInterval angularInterval1 = AngularInterval.of(point1S1, point1S0, precision_DoubleEquivalence1);
      Point1S point1S2 = angularInterval1.getCentroid();
}"
238,"    public Point1S getCentroid() {
        return getMidPoint();
    }","  public void test32()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      Point1S point1S0 = angularInterval0.getCentroid();
      Point1S point1S1 = Point1S.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      AngularInterval angularInterval1 = AngularInterval.of(point1S1, point1S0, precision_DoubleEquivalence1);
      Point1S point1S2 = angularInterval1.getCentroid();
}"
239,"    public Point1S getCentroid() {
        return getMidPoint();
    }","  public void test33()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of((-1413.49474207571), 0.0, precision_DoubleEquivalence0);
      Point1S point1S0 = angularInterval0.getCentroid();
}"
240,"    public AngularInterval transform(final Transform<Point1S> transform) {
        return AngularInterval.transform(this, transform, AngularInterval::of);
    }","  public void test34()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(913.0735, 913.0735, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        angularInterval0.transform((Transform<Point1S>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.CutAngle"", e);
      }
  }"
241,"    public Split<RegionBSPTree1S> split(final Hyperplane<Point1S> splitter) {
        return toTree().split(splitter);
    }","  public void test35()  throws Throwable  {
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      // Undeclared exception!
      try { 
        angularInterval_Convex0.split((Hyperplane<Point1S>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.RegionBSPTree1S"", e);
      }
  }"
242,"    public Point1S project(final Point1S pt) {
        if (!isFull()) {
            final double minDist = minBoundary.getPoint().distance(pt);
            final double maxDist = maxBoundary.getPoint().distance(pt);

            return (minDist <= maxDist) ?
                    minBoundary.getPoint() :
                    maxBoundary.getPoint();
        }
        return null;
    }","  public void test36()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(57.29577951308232, 57.29577951308232, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        angularInterval0.project((Point1S) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
243,"    public static AngularInterval of(final double min, final double max,
            final Precision.DoubleEquivalence precision) {
        return of(Point1S.of(min), Point1S.of(max), precision);
    }","  public void test37()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        AngularInterval.of((Point1S) null, (Point1S) null, precision_DoubleEquivalence0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.AngularInterval"", e);
      }
  }"
244,"    public static AngularInterval of(final double min, final double max,
            final Precision.DoubleEquivalence precision) {
        return of(Point1S.of(min), Point1S.of(max), precision);
    }","  public void test38()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Point1S point1S0 = Point1S.from(vector2D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid angular interval: [\uFFFD, \uFFFD]
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.AngularInterval"", e);
      }
  }"
245,"    public static AngularInterval of(final double min, final double max,
            final Precision.DoubleEquivalence precision) {
        return of(Point1S.of(min), Point1S.of(max), precision);
    }","  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        AngularInterval.of((CutAngle) null, (CutAngle) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.AngularInterval"", e);
      }
  }"
246,"    public static AngularInterval of(final double min, final double max,
            final Precision.DoubleEquivalence precision) {
        return of(Point1S.of(min), Point1S.of(max), precision);
    }","  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        AngularInterval.of(6177.0849401831, (-471.7964287623), (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.Point1S"", e);
      }
  }"
247,"    public static AngularInterval of(final double min, final double max,
            final Precision.DoubleEquivalence precision) {
        return of(Point1S.of(min), Point1S.of(max), precision);
    }","  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        AngularInterval.of(Double.NEGATIVE_INFINITY, (-111.0), (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid angular interval: [-\u221E, -111]
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.AngularInterval"", e);
      }
  }"
248,"    public boolean wrapsZero() {
        if (!isFull()) {
            final double minNormAz = minBoundary.getPoint().getNormalizedAzimuth();
            final double maxNormAz = maxBoundary.getPoint().getNormalizedAzimuth();

            return maxNormAz < minNormAz;
        }
        return false;
    }","  public void test42()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(414.183539, 0.0, precision_DoubleEquivalence0);
      boolean boolean0 = angularInterval0.wrapsZero();
}"
249,"    public double getSize() {
        return getMax() - getMin();
    }","  public void test43()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(414.183539, 0.0, precision_DoubleEquivalence0);
      boolean boolean0 = angularInterval0.wrapsZero();
}"
250,"    public RegionLocation classify(final Point1S pt) {
        if (!isFull()) {
            final HyperplaneLocation minLoc = minBoundary.classify(pt);
            final HyperplaneLocation maxLoc = maxBoundary.classify(pt);

            final boolean wraps = wrapsZero();

            if ((!wraps && (minLoc == HyperplaneLocation.PLUS || maxLoc == HyperplaneLocation.PLUS)) ||
                    (wraps && minLoc == HyperplaneLocation.PLUS && maxLoc == HyperplaneLocation.PLUS)) {
                return RegionLocation.OUTSIDE;
            } else if (minLoc == HyperplaneLocation.ON || maxLoc == HyperplaneLocation.ON) {
                return RegionLocation.BOUNDARY;
            }
        }
        return RegionLocation.INSIDE;
    }","  public void test44()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn((-137.64088644492), (-3310.7563504)).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = angularInterval0.classify(point1S0);
}"
251,"    public boolean wrapsZero() {
        if (!isFull()) {
            final double minNormAz = minBoundary.getPoint().getNormalizedAzimuth();
            final double maxNormAz = maxBoundary.getPoint().getNormalizedAzimuth();

            return maxNormAz < minNormAz;
        }
        return false;
    }","  public void test45()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn((-137.64088644492), (-3310.7563504)).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = angularInterval0.classify(point1S0);
}"
252,"    public RegionLocation classify(final Point1S pt) {
        if (!isFull()) {
            final HyperplaneLocation minLoc = minBoundary.classify(pt);
            final HyperplaneLocation maxLoc = maxBoundary.classify(pt);

            final boolean wraps = wrapsZero();

            if ((!wraps && (minLoc == HyperplaneLocation.PLUS || maxLoc == HyperplaneLocation.PLUS)) ||
                    (wraps && minLoc == HyperplaneLocation.PLUS && maxLoc == HyperplaneLocation.PLUS)) {
                return RegionLocation.OUTSIDE;
            } else if (minLoc == HyperplaneLocation.ON || maxLoc == HyperplaneLocation.ON) {
                return RegionLocation.BOUNDARY;
            }
        }
        return RegionLocation.INSIDE;
    }","  public void test46()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      doReturn(1823.7, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of((-1444.385772), 0.0, precision_DoubleEquivalence0);
      Point1S point1S0 = angularInterval_Convex0.getMidPoint();
      RegionLocation regionLocation0 = angularInterval_Convex0.classify(point1S0);
}"
253,"    public RegionLocation classify(final Point1S pt) {
        if (!isFull()) {
            final HyperplaneLocation minLoc = minBoundary.classify(pt);
            final HyperplaneLocation maxLoc = maxBoundary.classify(pt);

            final boolean wraps = wrapsZero();

            if ((!wraps && (minLoc == HyperplaneLocation.PLUS || maxLoc == HyperplaneLocation.PLUS)) ||
                    (wraps && minLoc == HyperplaneLocation.PLUS && maxLoc == HyperplaneLocation.PLUS)) {
                return RegionLocation.OUTSIDE;
            } else if (minLoc == HyperplaneLocation.ON || maxLoc == HyperplaneLocation.ON) {
                return RegionLocation.BOUNDARY;
            }
        }
        return RegionLocation.INSIDE;
    }","  public void test47()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      doReturn(1823.7, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of((-1444.385772), 0.0, precision_DoubleEquivalence0);
      Point1S point1S0 = angularInterval_Convex0.getMidPoint();
      RegionLocation regionLocation0 = angularInterval_Convex0.classify(point1S0);
}"
254,"    public RegionLocation classify(final Point1S pt) {
        if (!isFull()) {
            final HyperplaneLocation minLoc = minBoundary.classify(pt);
            final HyperplaneLocation maxLoc = maxBoundary.classify(pt);

            final boolean wraps = wrapsZero();

            if ((!wraps && (minLoc == HyperplaneLocation.PLUS || maxLoc == HyperplaneLocation.PLUS)) ||
                    (wraps && minLoc == HyperplaneLocation.PLUS && maxLoc == HyperplaneLocation.PLUS)) {
                return RegionLocation.OUTSIDE;
            } else if (minLoc == HyperplaneLocation.ON || maxLoc == HyperplaneLocation.ON) {
                return RegionLocation.BOUNDARY;
            }
        }
        return RegionLocation.INSIDE;
    }","  public void test48()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(646.39, (-3133.986755553727)).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(646.39, 646.39, precision_DoubleEquivalence0);
      Point1S point1S0 = Point1S.of(646.39);
      RegionLocation regionLocation0 = angularInterval0.classify(point1S0);
}"
255,"    public double getMin() {
        return (minBoundary != null) ?
                minBoundary.getAzimuth() :
                0.0;
    }","  public void test49()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(646.39, (-3133.986755553727)).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(646.39, 646.39, precision_DoubleEquivalence0);
      Point1S point1S0 = Point1S.of(646.39);
      RegionLocation regionLocation0 = angularInterval0.classify(point1S0);
}"
256,"    public boolean isFull() {
        // minBoundary and maxBoundary are either both null or both not null
        return minBoundary == null;
    }","  public void test50()  throws Throwable  {
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      boolean boolean0 = angularInterval_Convex0.isFull();
}"
257,"    public double getMin() {
        return (minBoundary != null) ?
                minBoundary.getAzimuth() :
                0.0;
    }","  public void test51()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(0.0, 0.0, precision_DoubleEquivalence0);
      angularInterval0.isFull();
}"
258,"    public double getSize() {
        return getMax() - getMin();
    }","  public void test52()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(0.0, 0.0, precision_DoubleEquivalence0);
      angularInterval0.isFull();
}"
259,"    public double getMax() {
        return (maxBoundary != null) ?
                maxBoundary.getAzimuth() :
                Angle.TWO_PI;
    }","  public void test53()  throws Throwable  {
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      double double0 = angularInterval_Convex0.getMax();
}"
260,"    public double getMax() {
        return (maxBoundary != null) ?
                maxBoundary.getAzimuth() :
                Angle.TWO_PI;
    }","  public void test54()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      double double0 = angularInterval0.getMax();
}"
261,"    public double getMin() {
        return (minBoundary != null) ?
                minBoundary.getAzimuth() :
                0.0;
    }","  public void test55()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      double double0 = angularInterval0.getMin();
}"
262,"    public double getMin() {
        return (minBoundary != null) ?
                minBoundary.getAzimuth() :
                0.0;
    }","  public void test56()  throws Throwable  {
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      double double0 = angularInterval_Convex0.getMin();
}"
263,"    public double getSize() {
        return getMax() - getMin();
    }","  public void test57()  throws Throwable  {
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      double double0 = angularInterval_Convex0.getSize();
}"
264,"    public static AngularInterval of(final double min, final double max,
            final Precision.DoubleEquivalence precision) {
        return of(Point1S.of(min), Point1S.of(max), precision);
    }","  public void test58()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(precision_DoubleEquivalence1).compare(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence1).lte(anyDouble() , anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence1);
      Split<AngularInterval.Convex> split0 = angularInterval_Convex0.splitDiameter(cutAngle0);
}"
265,"    public static AngularInterval of(final double min, final double max,
            final Precision.DoubleEquivalence precision) {
        return of(Point1S.of(min), Point1S.of(max), precision);
    }","  public void test59()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(precision_DoubleEquivalence1).compare(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence1).lte(anyDouble() , anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence1);
      Split<AngularInterval.Convex> split0 = angularInterval_Convex0.splitDiameter(cutAngle0);
}"
266,"    public double getMin() {
        return (minBoundary != null) ?
                minBoundary.getAzimuth() :
                0.0;
    }","  public void test60()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(precision_DoubleEquivalence1).compare(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence1).lte(anyDouble() , anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence1);
      Split<AngularInterval.Convex> split0 = angularInterval_Convex0.splitDiameter(cutAngle0);
}"
267,"    public CutAngle getMaxBoundary() {
        return maxBoundary;
    }","  public void test61()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createNegation();
      AngularInterval angularInterval1 = angularInterval0.transform(transform1S0);
      CutAngle cutAngle0 = angularInterval1.getMaxBoundary();
}"
268,"    public static AngularInterval of(final double min, final double max,
            final Precision.DoubleEquivalence precision) {
        return of(Point1S.of(min), Point1S.of(max), precision);
    }","  public void test62()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createNegation();
      AngularInterval angularInterval1 = angularInterval0.transform(transform1S0);
      CutAngle cutAngle0 = angularInterval1.getMaxBoundary();
      CutAngle cutAngle1 = cutAngle0.reverse();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(52, (-1), (-1868), 52).when(precision_DoubleEquivalence1).compare(anyDouble() , anyDouble());
      doReturn(false, false, false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      doReturn(true, true).when(precision_DoubleEquivalence1).lte(anyDouble() , anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of(34.0, 6.283185307179586, precision_DoubleEquivalence1);
      angularInterval_Convex0.splitDiameter(cutAngle0);
      Split<AngularInterval.Convex> split0 = angularInterval_Convex0.splitDiameter(cutAngle1);
}"
269,"    public double getSize() {
        return getMax() - getMin();
    }","  public void test63()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createNegation();
      AngularInterval angularInterval1 = angularInterval0.transform(transform1S0);
      CutAngle cutAngle0 = angularInterval1.getMaxBoundary();
      CutAngle cutAngle1 = cutAngle0.reverse();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(52, (-1), (-1868), 52).when(precision_DoubleEquivalence1).compare(anyDouble() , anyDouble());
      doReturn(false, false, false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      doReturn(true, true).when(precision_DoubleEquivalence1).lte(anyDouble() , anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of(34.0, 6.283185307179586, precision_DoubleEquivalence1);
      angularInterval_Convex0.splitDiameter(cutAngle0);
      Split<AngularInterval.Convex> split0 = angularInterval_Convex0.splitDiameter(cutAngle1);
}"
270,"    public static AngularInterval of(final double min, final double max,
            final Precision.DoubleEquivalence precision) {
        return of(Point1S.of(min), Point1S.of(max), precision);
    }","  public void test64()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createNegation();
      AngularInterval angularInterval1 = angularInterval0.transform(transform1S0);
      CutAngle cutAngle0 = angularInterval1.getMaxBoundary();
      CutAngle cutAngle1 = cutAngle0.reverse();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(52, (-1), (-1868), 52).when(precision_DoubleEquivalence1).compare(anyDouble() , anyDouble());
      doReturn(false, false, false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      doReturn(true, true).when(precision_DoubleEquivalence1).lte(anyDouble() , anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of(34.0, 6.283185307179586, precision_DoubleEquivalence1);
      angularInterval_Convex0.splitDiameter(cutAngle0);
      Split<AngularInterval.Convex> split0 = angularInterval_Convex0.splitDiameter(cutAngle1);
}"
271,"    public static AngularInterval of(final double min, final double max,
            final Precision.DoubleEquivalence precision) {
        return of(Point1S.of(min), Point1S.of(max), precision);
    }","  public void test65()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createNegation();
      AngularInterval angularInterval1 = angularInterval0.transform(transform1S0);
      CutAngle cutAngle0 = angularInterval1.getMaxBoundary();
      CutAngle cutAngle1 = cutAngle0.reverse();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(52, (-1), (-1868), 52).when(precision_DoubleEquivalence1).compare(anyDouble() , anyDouble());
      doReturn(false, false, false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      doReturn(true, true).when(precision_DoubleEquivalence1).lte(anyDouble() , anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of(34.0, 6.283185307179586, precision_DoubleEquivalence1);
      angularInterval_Convex0.splitDiameter(cutAngle0);
      Split<AngularInterval.Convex> split0 = angularInterval_Convex0.splitDiameter(cutAngle1);
}"
272,"    public CutAngle getMaxBoundary() {
        return maxBoundary;
    }","  public void test66()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createNegation();
      AngularInterval angularInterval1 = angularInterval0.transform(transform1S0);
      CutAngle cutAngle0 = angularInterval1.getMaxBoundary();
}"
273,"    public double getSize() {
        return getMax() - getMin();
    }","  public void test67()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createNegation();
      AngularInterval angularInterval1 = angularInterval0.transform(transform1S0);
      CutAngle cutAngle0 = angularInterval1.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(52, (-1), (-1868), 52).when(precision_DoubleEquivalence1).compare(anyDouble() , anyDouble());
      doReturn(false, false, false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      doReturn(true, true).when(precision_DoubleEquivalence1).lte(anyDouble() , anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of(34.0, 6.283185307179586, precision_DoubleEquivalence1);
      angularInterval_Convex0.splitDiameter(cutAngle0);
      Split<AngularInterval.Convex> split0 = angularInterval_Convex0.splitDiameter(cutAngle0);
}"
274,"    public static AngularInterval of(final double min, final double max,
            final Precision.DoubleEquivalence precision) {
        return of(Point1S.of(min), Point1S.of(max), precision);
    }","  public void test68()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createNegation();
      AngularInterval angularInterval1 = angularInterval0.transform(transform1S0);
      CutAngle cutAngle0 = angularInterval1.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(52, (-1), (-1868), 52).when(precision_DoubleEquivalence1).compare(anyDouble() , anyDouble());
      doReturn(false, false, false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      doReturn(true, true).when(precision_DoubleEquivalence1).lte(anyDouble() , anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of(34.0, 6.283185307179586, precision_DoubleEquivalence1);
      angularInterval_Convex0.splitDiameter(cutAngle0);
      Split<AngularInterval.Convex> split0 = angularInterval_Convex0.splitDiameter(cutAngle0);
}"
275,"    public static AngularInterval of(final double min, final double max,
            final Precision.DoubleEquivalence precision) {
        return of(Point1S.of(min), Point1S.of(max), precision);
    }","  public void test69()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createNegation();
      AngularInterval angularInterval1 = angularInterval0.transform(transform1S0);
      CutAngle cutAngle0 = angularInterval1.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(52, (-1), (-1868), 52).when(precision_DoubleEquivalence1).compare(anyDouble() , anyDouble());
      doReturn(false, false, false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      doReturn(true, true).when(precision_DoubleEquivalence1).lte(anyDouble() , anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of(34.0, 6.283185307179586, precision_DoubleEquivalence1);
      angularInterval_Convex0.splitDiameter(cutAngle0);
      Split<AngularInterval.Convex> split0 = angularInterval_Convex0.splitDiameter(cutAngle0);
}"
276,"    public static AngularInterval of(final double min, final double max,
            final Precision.DoubleEquivalence precision) {
        return of(Point1S.of(min), Point1S.of(max), precision);
    }","  public void test70()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(precision_DoubleEquivalence1).compare(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence1).lte(anyDouble() , anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of(34.0, 6.283185307179586, precision_DoubleEquivalence1);
      Split<AngularInterval.Convex> split0 = angularInterval_Convex0.splitDiameter(cutAngle0);
}"
277,"    public static AngularInterval of(final double min, final double max,
            final Precision.DoubleEquivalence precision) {
        return of(Point1S.of(min), Point1S.of(max), precision);
    }","  public void test71()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(precision_DoubleEquivalence1).compare(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence1).lte(anyDouble() , anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of(34.0, 6.283185307179586, precision_DoubleEquivalence1);
      Split<AngularInterval.Convex> split0 = angularInterval_Convex0.splitDiameter(cutAngle0);
}"
278,"    public double getSize() {
        return getMax() - getMin();
    }","  public void test72()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(precision_DoubleEquivalence1).compare(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence1).lte(anyDouble() , anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of(34.0, 6.283185307179586, precision_DoubleEquivalence1);
      Split<AngularInterval.Convex> split0 = angularInterval_Convex0.splitDiameter(cutAngle0);
}"
279,"    public boolean isFull() {
        // minBoundary and maxBoundary are either both null or both not null
        return minBoundary == null;
    }","  public void test73()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createNegation();
      CutAngle cutAngle0 = angularInterval0.getMaxBoundary();
      CutAngle cutAngle1 = cutAngle0.transform(transform1S0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(65, (-1)).when(precision_DoubleEquivalence1).compare(anyDouble() , anyDouble());
      doReturn(false, false, true).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      doReturn(true, true).when(precision_DoubleEquivalence1).lte(anyDouble() , anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence1);
}"
280,"    public static AngularInterval of(final double min, final double max,
            final Precision.DoubleEquivalence precision) {
        return of(Point1S.of(min), Point1S.of(max), precision);
    }","  public void test74()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createNegation();
      CutAngle cutAngle0 = angularInterval0.getMaxBoundary();
      CutAngle cutAngle1 = cutAngle0.transform(transform1S0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(65, (-1)).when(precision_DoubleEquivalence1).compare(anyDouble() , anyDouble());
      doReturn(false, false, true).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      doReturn(true, true).when(precision_DoubleEquivalence1).lte(anyDouble() , anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence1);
      Split<AngularInterval.Convex> split0 = angularInterval_Convex0.splitDiameter(cutAngle1);
}"
281,"    public static AngularInterval of(final double min, final double max,
            final Precision.DoubleEquivalence precision) {
        return of(Point1S.of(min), Point1S.of(max), precision);
    }","  public void test75()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createNegation();
      CutAngle cutAngle0 = angularInterval0.getMaxBoundary();
      CutAngle cutAngle1 = cutAngle0.transform(transform1S0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(65, (-1)).when(precision_DoubleEquivalence1).compare(anyDouble() , anyDouble());
      doReturn(false, false, true).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      doReturn(true, true).when(precision_DoubleEquivalence1).lte(anyDouble() , anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence1);
      Split<AngularInterval.Convex> split0 = angularInterval_Convex0.splitDiameter(cutAngle1);
}"
282,"    public CutAngle getMinBoundary() {
        return minBoundary;
    }","  public void test76()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(478, 478).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of((-1444.385772), 0.0, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval_Convex0.getMinBoundary();
      Split<AngularInterval.Convex> split0 = angularInterval_Convex0.splitDiameter(cutAngle0);
}"
283,"    public double getSize() {
        return getMax() - getMin();
    }","  public void test77()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(478, 478).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of((-1444.385772), 0.0, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval_Convex0.getMinBoundary();
      Split<AngularInterval.Convex> split0 = angularInterval_Convex0.splitDiameter(cutAngle0);
}"
284,"    public CutAngle getMinBoundary() {
        return minBoundary;
    }","  public void test78()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-1243), (-1243)).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of((-1444.385772), 0.0, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval_Convex0.getMinBoundary();
      CutAngle cutAngle1 = cutAngle0.reverse();
      Split<AngularInterval.Convex> split0 = angularInterval_Convex0.splitDiameter(cutAngle1);
}"
285,"    public double getSize() {
        return getMax() - getMin();
    }","  public void test79()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-1243), (-1243)).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of((-1444.385772), 0.0, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval_Convex0.getMinBoundary();
      CutAngle cutAngle1 = cutAngle0.reverse();
      Split<AngularInterval.Convex> split0 = angularInterval_Convex0.splitDiameter(cutAngle1);
}"
286,"    public static AngularInterval of(final double min, final double max,
            final Precision.DoubleEquivalence precision) {
        return of(Point1S.of(min), Point1S.of(max), precision);
    }","  public void test80()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        AngularInterval.Convex.of(479.87583980482697, Double.NEGATIVE_INFINITY, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid angular interval: [479.876, -\u221E]
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.AngularInterval"", e);
      }
  }"
287,"    public static AngularInterval of(final double min, final double max,
            final Precision.DoubleEquivalence precision) {
        return of(Point1S.of(min), Point1S.of(max), precision);
    }","  public void test81()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        AngularInterval.of(cutAngle0, cutAngle0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid angular interval: [\uFFFD, \uFFFD]
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.AngularInterval"", e);
      }
  }"
288,"    public List<AngularInterval.Convex> toConvex() {
        if (isConvex(minBoundary, maxBoundary)) {
            return Collections.singletonList(new Convex(minBoundary, maxBoundary));
        }

        final CutAngle midPos = CutAngles.createPositiveFacing(midpoint, minBoundary.getPrecision());
        final CutAngle midNeg = CutAngles.createNegativeFacing(midpoint, maxBoundary.getPrecision());

        return Arrays.asList(
                    new Convex(minBoundary, midPos),
                    new Convex(midNeg, maxBoundary)
                );
    }","  public void test82()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true, true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      List<AngularInterval.Convex> list0 = angularInterval0.toConvex();
}"
289,"    public boolean wrapsZero() {
        if (!isFull()) {
            final double minNormAz = minBoundary.getPoint().getNormalizedAzimuth();
            final double maxNormAz = maxBoundary.getPoint().getNormalizedAzimuth();

            return maxNormAz < minNormAz;
        }
        return false;
    }","  public void test83()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of(0.4959797159100223, 0.4959797159100223, precision_DoubleEquivalence0);
      boolean boolean0 = angularInterval_Convex0.wrapsZero();
}"
290,"    public double getSize() {
        return getMax() - getMin();
    }","  public void test84()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(1002.367689, (-228.3234396181), precision_DoubleEquivalence0);
      Point1S point1S1 = angularInterval0.project(point1S0);
}"
291,"    public Point1S project(final Point1S pt) {
        if (!isFull()) {
            final double minDist = minBoundary.getPoint().distance(pt);
            final double maxDist = maxBoundary.getPoint().distance(pt);

            return (minDist <= maxDist) ?
                    minBoundary.getPoint() :
                    maxBoundary.getPoint();
        }
        return null;
    }","  public void test85()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(1002.367689, (-228.3234396181), precision_DoubleEquivalence0);
      Point1S point1S1 = angularInterval0.project(point1S0);
}"
292,"    public Point1S project(final Point1S pt) {
        if (!isFull()) {
            final double minDist = minBoundary.getPoint().distance(pt);
            final double maxDist = maxBoundary.getPoint().distance(pt);

            return (minDist <= maxDist) ?
                    minBoundary.getPoint() :
                    maxBoundary.getPoint();
        }
        return null;
    }","  public void test86()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(1002.367689, (-228.3234396181), precision_DoubleEquivalence0);
      Point1S point1S1 = angularInterval0.project(point1S0);
}"
293,"    public Point1S project(final Point1S pt) {
        if (!isFull()) {
            final double minDist = minBoundary.getPoint().distance(pt);
            final double maxDist = maxBoundary.getPoint().distance(pt);

            return (minDist <= maxDist) ?
                    minBoundary.getPoint() :
                    maxBoundary.getPoint();
        }
        return null;
    }","  public void test87()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(2190.17559032829, 2190.17559032829, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMinBoundary();
      AngularInterval angularInterval1 = AngularInterval.of(cutAngle0, cutAngle0);
      Point1S point1S0 = Point1S.of(2190.17559032829);
      Point1S point1S1 = angularInterval1.project(point1S0);
}"
294,"    public Point1S project(final Point1S pt) {
        if (!isFull()) {
            final double minDist = minBoundary.getPoint().distance(pt);
            final double maxDist = maxBoundary.getPoint().distance(pt);

            return (minDist <= maxDist) ?
                    minBoundary.getPoint() :
                    maxBoundary.getPoint();
        }
        return null;
    }","  public void test88()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(2190.17559032829, 2190.17559032829, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMinBoundary();
      AngularInterval angularInterval1 = AngularInterval.of(cutAngle0, cutAngle0);
      Point1S point1S0 = Point1S.of(2190.17559032829);
      Point1S point1S1 = angularInterval1.project(point1S0);
}"
295,"    public double getMax() {
        return (maxBoundary != null) ?
                maxBoundary.getAzimuth() :
                Angle.TWO_PI;
    }","  public void test89()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(2190.17559032829, 2190.17559032829, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMinBoundary();
      AngularInterval angularInterval1 = AngularInterval.of(cutAngle0, cutAngle0);
      Point1S point1S0 = Point1S.of(2190.17559032829);
      Point1S point1S1 = angularInterval1.project(point1S0);
}"
296,"    public boolean wrapsZero() {
        if (!isFull()) {
            final double minNormAz = minBoundary.getPoint().getNormalizedAzimuth();
            final double maxNormAz = maxBoundary.getPoint().getNormalizedAzimuth();

            return maxNormAz < minNormAz;
        }
        return false;
    }","  public void test90()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(2190.17559032829, 2190.17559032829, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMinBoundary();
      AngularInterval angularInterval1 = AngularInterval.of(cutAngle0, cutAngle0);
      Point1S point1S0 = Point1S.of(2190.17559032829);
      Point1S point1S1 = angularInterval1.project(point1S0);
}"
297,"    public RegionLocation classify(final Point1S pt) {
        if (!isFull()) {
            final HyperplaneLocation minLoc = minBoundary.classify(pt);
            final HyperplaneLocation maxLoc = maxBoundary.classify(pt);

            final boolean wraps = wrapsZero();

            if ((!wraps && (minLoc == HyperplaneLocation.PLUS || maxLoc == HyperplaneLocation.PLUS)) ||
                    (wraps && minLoc == HyperplaneLocation.PLUS && maxLoc == HyperplaneLocation.PLUS)) {
                return RegionLocation.OUTSIDE;
            } else if (minLoc == HyperplaneLocation.ON || maxLoc == HyperplaneLocation.ON) {
                return RegionLocation.BOUNDARY;
            }
        }
        return RegionLocation.INSIDE;
    }","  public void test91()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      doReturn((-1444.385772), 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of((-1444.385772), 0.0, precision_DoubleEquivalence0);
      Point1S point1S0 = angularInterval_Convex0.getMidPoint();
      RegionLocation regionLocation0 = angularInterval_Convex0.classify(point1S0);
}"
298,"    public boolean wrapsZero() {
        if (!isFull()) {
            final double minNormAz = minBoundary.getPoint().getNormalizedAzimuth();
            final double maxNormAz = maxBoundary.getPoint().getNormalizedAzimuth();

            return maxNormAz < minNormAz;
        }
        return false;
    }","  public void test92()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      doReturn((-1444.385772), 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of((-1444.385772), 0.0, precision_DoubleEquivalence0);
      Point1S point1S0 = angularInterval_Convex0.getMidPoint();
      RegionLocation regionLocation0 = angularInterval_Convex0.classify(point1S0);
}"
299,"    public RegionLocation classify(final Point1S pt) {
        if (!isFull()) {
            final HyperplaneLocation minLoc = minBoundary.classify(pt);
            final HyperplaneLocation maxLoc = maxBoundary.classify(pt);

            final boolean wraps = wrapsZero();

            if ((!wraps && (minLoc == HyperplaneLocation.PLUS || maxLoc == HyperplaneLocation.PLUS)) ||
                    (wraps && minLoc == HyperplaneLocation.PLUS && maxLoc == HyperplaneLocation.PLUS)) {
                return RegionLocation.OUTSIDE;
            } else if (minLoc == HyperplaneLocation.ON || maxLoc == HyperplaneLocation.ON) {
                return RegionLocation.BOUNDARY;
            }
        }
        return RegionLocation.INSIDE;
    }","  public void test93()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      doReturn((-1444.385772), 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of((-1444.385772), 0.0, precision_DoubleEquivalence0);
      Point1S point1S0 = angularInterval_Convex0.getMidPoint();
      RegionLocation regionLocation0 = angularInterval_Convex0.classify(point1S0);
}"
300,"    public boolean wrapsZero() {
        if (!isFull()) {
            final double minNormAz = minBoundary.getPoint().getNormalizedAzimuth();
            final double maxNormAz = maxBoundary.getPoint().getNormalizedAzimuth();

            return maxNormAz < minNormAz;
        }
        return false;
    }","  public void test94()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      doReturn((double)478, (double)478).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of((-1444.385772), 0.0, precision_DoubleEquivalence0);
      Point1S point1S0 = angularInterval_Convex0.getMidPoint();
      RegionLocation regionLocation0 = angularInterval_Convex0.classify(point1S0);
}"
301,"    public RegionLocation classify(final Point1S pt) {
        if (!isFull()) {
            final HyperplaneLocation minLoc = minBoundary.classify(pt);
            final HyperplaneLocation maxLoc = maxBoundary.classify(pt);

            final boolean wraps = wrapsZero();

            if ((!wraps && (minLoc == HyperplaneLocation.PLUS || maxLoc == HyperplaneLocation.PLUS)) ||
                    (wraps && minLoc == HyperplaneLocation.PLUS && maxLoc == HyperplaneLocation.PLUS)) {
                return RegionLocation.OUTSIDE;
            } else if (minLoc == HyperplaneLocation.ON || maxLoc == HyperplaneLocation.ON) {
                return RegionLocation.BOUNDARY;
            }
        }
        return RegionLocation.INSIDE;
    }","  public void test95()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      doReturn((double)478, (double)478).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of((-1444.385772), 0.0, precision_DoubleEquivalence0);
      Point1S point1S0 = angularInterval_Convex0.getMidPoint();
      RegionLocation regionLocation0 = angularInterval_Convex0.classify(point1S0);
}"
302,"    public RegionLocation classify(final Point1S pt) {
        if (!isFull()) {
            final HyperplaneLocation minLoc = minBoundary.classify(pt);
            final HyperplaneLocation maxLoc = maxBoundary.classify(pt);

            final boolean wraps = wrapsZero();

            if ((!wraps && (minLoc == HyperplaneLocation.PLUS || maxLoc == HyperplaneLocation.PLUS)) ||
                    (wraps && minLoc == HyperplaneLocation.PLUS && maxLoc == HyperplaneLocation.PLUS)) {
                return RegionLocation.OUTSIDE;
            } else if (minLoc == HyperplaneLocation.ON || maxLoc == HyperplaneLocation.ON) {
                return RegionLocation.BOUNDARY;
            }
        }
        return RegionLocation.INSIDE;
    }","  public void test96()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      doReturn((double)478, (double)478).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of((-1444.385772), 0.0, precision_DoubleEquivalence0);
      Point1S point1S0 = angularInterval_Convex0.getMidPoint();
      RegionLocation regionLocation0 = angularInterval_Convex0.classify(point1S0);
}"
303,"    public double getMin() {
        return (minBoundary != null) ?
                minBoundary.getAzimuth() :
                0.0;
    }","  public void test97()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn((-1.0), 646.39).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(646.39, 646.39, precision_DoubleEquivalence0);
      Point1S point1S0 = Point1S.of(646.39);
      RegionLocation regionLocation0 = angularInterval0.classify(point1S0);
}"
304,"    public RegionLocation classify(final Point1S pt) {
        if (!isFull()) {
            final HyperplaneLocation minLoc = minBoundary.classify(pt);
            final HyperplaneLocation maxLoc = maxBoundary.classify(pt);

            final boolean wraps = wrapsZero();

            if ((!wraps && (minLoc == HyperplaneLocation.PLUS || maxLoc == HyperplaneLocation.PLUS)) ||
                    (wraps && minLoc == HyperplaneLocation.PLUS && maxLoc == HyperplaneLocation.PLUS)) {
                return RegionLocation.OUTSIDE;
            } else if (minLoc == HyperplaneLocation.ON || maxLoc == HyperplaneLocation.ON) {
                return RegionLocation.BOUNDARY;
            }
        }
        return RegionLocation.INSIDE;
    }","  public void test98()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn((-1.0), 646.39).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(646.39, 646.39, precision_DoubleEquivalence0);
      Point1S point1S0 = Point1S.of(646.39);
      RegionLocation regionLocation0 = angularInterval0.classify(point1S0);
}"
305,"    public static AngularInterval of(final double min, final double max,
            final Precision.DoubleEquivalence precision) {
        return of(Point1S.of(min), Point1S.of(max), precision);
    }","  public void test99()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(1002.367689, (-228.3234396181), precision_DoubleEquivalence0);
      boolean boolean0 = angularInterval0.contains(point1S0);
}"
306,"    public boolean wrapsZero() {
        if (!isFull()) {
            final double minNormAz = minBoundary.getPoint().getNormalizedAzimuth();
            final double maxNormAz = maxBoundary.getPoint().getNormalizedAzimuth();

            return maxNormAz < minNormAz;
        }
        return false;
    }","  public void test100()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(1002.367689, (-228.3234396181), precision_DoubleEquivalence0);
      boolean boolean0 = angularInterval0.contains(point1S0);
}"
307,"    public boolean isFull() {
        // minBoundary and maxBoundary are either both null or both not null
        return minBoundary == null;
    }","  public void test101()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(1002.367689, (-228.3234396181), precision_DoubleEquivalence0);
      boolean boolean0 = angularInterval0.contains(point1S0);
}"
308,"    public double getSize() {
        return getMax() - getMin();
    }","  public void test102()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(1002.367689, (-228.3234396181), precision_DoubleEquivalence0);
      boolean boolean0 = angularInterval0.contains(point1S0);
}"
309,"    public Point1S getMidPoint() {
        return midpoint;
    }","  public void test103()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of((-1444.385772), 0.0, precision_DoubleEquivalence0);
      Point1S point1S0 = angularInterval_Convex0.getMidPoint();
}"
310,"    public boolean wrapsZero() {
        if (!isFull()) {
            final double minNormAz = minBoundary.getPoint().getNormalizedAzimuth();
            final double maxNormAz = maxBoundary.getPoint().getNormalizedAzimuth();

            return maxNormAz < minNormAz;
        }
        return false;
    }","  public void test104()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of((-1444.385772), 0.0, precision_DoubleEquivalence0);
      Point1S point1S0 = angularInterval_Convex0.getMidPoint();
      angularInterval_Convex0.classify(point1S0);
}"
311,"    public RegionLocation classify(final Point1S pt) {
        if (!isFull()) {
            final HyperplaneLocation minLoc = minBoundary.classify(pt);
            final HyperplaneLocation maxLoc = maxBoundary.classify(pt);

            final boolean wraps = wrapsZero();

            if ((!wraps && (minLoc == HyperplaneLocation.PLUS || maxLoc == HyperplaneLocation.PLUS)) ||
                    (wraps && minLoc == HyperplaneLocation.PLUS && maxLoc == HyperplaneLocation.PLUS)) {
                return RegionLocation.OUTSIDE;
            } else if (minLoc == HyperplaneLocation.ON || maxLoc == HyperplaneLocation.ON) {
                return RegionLocation.BOUNDARY;
            }
        }
        return RegionLocation.INSIDE;
    }","  public void test105()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of((-1444.385772), 0.0, precision_DoubleEquivalence0);
      Point1S point1S0 = angularInterval_Convex0.getMidPoint();
      angularInterval_Convex0.classify(point1S0);
}"
312,"    public RegionLocation classify(final Point1S pt) {
        if (!isFull()) {
            final HyperplaneLocation minLoc = minBoundary.classify(pt);
            final HyperplaneLocation maxLoc = maxBoundary.classify(pt);

            final boolean wraps = wrapsZero();

            if ((!wraps && (minLoc == HyperplaneLocation.PLUS || maxLoc == HyperplaneLocation.PLUS)) ||
                    (wraps && minLoc == HyperplaneLocation.PLUS && maxLoc == HyperplaneLocation.PLUS)) {
                return RegionLocation.OUTSIDE;
            } else if (minLoc == HyperplaneLocation.ON || maxLoc == HyperplaneLocation.ON) {
                return RegionLocation.BOUNDARY;
            }
        }
        return RegionLocation.INSIDE;
    }","  public void test106()  throws Throwable  {
      Point1S point1S0 = Point1S.of(4.8836057800053325);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        angularInterval0.classify((Point1S) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
313,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(this.getClass().getSimpleName())
            .append(""[min= "")
            .append(getMin())
            .append("", max= "")
            .append(getMax())
            .append(']');

        return sb.toString();
    }","  public void test107()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMaxBoundary();
      AngularInterval angularInterval1 = AngularInterval.of(cutAngle0, cutAngle0);
      String string0 = angularInterval1.toString();
}"
314,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(this.getClass().getSimpleName())
            .append(""[min= "")
            .append(getMin())
            .append("", max= "")
            .append(getMax())
            .append(']');

        return sb.toString();
    }","  public void test108()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMaxBoundary();
      AngularInterval angularInterval1 = AngularInterval.of(cutAngle0, cutAngle0);
      String string0 = angularInterval1.toString();
}"
315,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(this.getClass().getSimpleName())
            .append(""[min= "")
            .append(getMin())
            .append("", max= "")
            .append(getMax())
            .append(']');

        return sb.toString();
    }","  public void test109()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMaxBoundary();
      AngularInterval angularInterval1 = AngularInterval.of(cutAngle0, cutAngle0);
      String string0 = angularInterval1.toString();
}"
316,"    public Point1S getCentroid() {
        return getMidPoint();
    }","  public void test110()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      Point1S point1S0 = angularInterval0.getCentroid();
}"
317,"    public RegionLocation classify(final Point1S pt) {
        if (!isFull()) {
            final HyperplaneLocation minLoc = minBoundary.classify(pt);
            final HyperplaneLocation maxLoc = maxBoundary.classify(pt);

            final boolean wraps = wrapsZero();

            if ((!wraps && (minLoc == HyperplaneLocation.PLUS || maxLoc == HyperplaneLocation.PLUS)) ||
                    (wraps && minLoc == HyperplaneLocation.PLUS && maxLoc == HyperplaneLocation.PLUS)) {
                return RegionLocation.OUTSIDE;
            } else if (minLoc == HyperplaneLocation.ON || maxLoc == HyperplaneLocation.ON) {
                return RegionLocation.BOUNDARY;
            }
        }
        return RegionLocation.INSIDE;
    }","  public void test111()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      Point1S point1S0 = angularInterval0.getCentroid();
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      angularInterval_Convex0.classify(point1S0);
}"
318,"    public CutAngle getMinBoundary() {
        return minBoundary;
    }","  public void test112()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMinBoundary();
}"
319,"    public Split<RegionBSPTree1S> split(final Hyperplane<Point1S> splitter) {
        return toTree().split(splitter);
    }","  public void test113()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMinBoundary();
      angularInterval0.split(cutAngle0);
}"
320,"    public Split<RegionBSPTree1S> split(final Hyperplane<Point1S> splitter) {
        return toTree().split(splitter);
    }","  public void test114()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMinBoundary();
      angularInterval0.split(cutAngle0);
}"
321,"    public double getMin() {
        return (minBoundary != null) ?
                minBoundary.getAzimuth() :
                0.0;
    }","  public void test115()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMinBoundary();
      angularInterval0.split(cutAngle0);
}"
322,"    public boolean isFull() {
        // minBoundary and maxBoundary are either both null or both not null
        return minBoundary == null;
    }","  public void test116()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.ZERO;
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createRotation(1.5707963267948966);
      AngularInterval angularInterval1 = angularInterval0.transform(transform1S0);
      boolean boolean0 = angularInterval1.isFinite();
}"
323,"    public double getSize() {
        return getMax() - getMin();
    }","  public void test117()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.ZERO;
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createRotation(1.5707963267948966);
      AngularInterval angularInterval1 = angularInterval0.transform(transform1S0);
      boolean boolean0 = angularInterval1.isFinite();
}"
324,"    public double getSize() {
        return getMax() - getMin();
    }","  public void test118()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.ZERO;
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createRotation(1.5707963267948966);
      AngularInterval angularInterval1 = angularInterval0.transform(transform1S0);
      boolean boolean0 = angularInterval1.isFinite();
}"
325,"    public AngularInterval transform(final Transform<Point1S> transform) {
        return AngularInterval.transform(this, transform, AngularInterval::of);
    }","  public void test119()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.ZERO;
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createRotation(1.5707963267948966);
      AngularInterval angularInterval1 = angularInterval0.transform(transform1S0);
      boolean boolean0 = angularInterval1.isFinite();
}"
326,"    public double getBoundarySize() {
        return 0;
    }","  public void test120()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      double double0 = angularInterval0.getBoundarySize();
}"
327,"    public double getMin() {
        return (minBoundary != null) ?
                minBoundary.getAzimuth() :
                0.0;
    }","  public void test121()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      Transform1S transform1S0 = Transform1S.createNegation();
      AngularInterval angularInterval1 = angularInterval0.transform(transform1S0);
      double double0 = angularInterval1.getMin();
}"
328,"    public boolean isEmpty() {
        return false;
    }","  public void test122()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      boolean boolean0 = angularInterval0.isEmpty();
}"
329,"    public AngularInterval transform(final Transform<Point1S> transform) {
        return AngularInterval.transform(this, transform, AngularInterval::of);
    }","  public void test123()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(1.5707963267948966);
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      AngularInterval.Convex angularInterval_Convex1 = angularInterval_Convex0.transform(transform1S0);
}"
330,"    public List<AngularInterval.Convex> toConvex() {
        if (isConvex(minBoundary, maxBoundary)) {
            return Collections.singletonList(new Convex(minBoundary, maxBoundary));
        }

        final CutAngle midPos = CutAngles.createPositiveFacing(midpoint, minBoundary.getPrecision());
        final CutAngle midNeg = CutAngles.createNegativeFacing(midpoint, maxBoundary.getPrecision());

        return Arrays.asList(
                    new Convex(minBoundary, midPos),
                    new Convex(midNeg, maxBoundary)
                );
    }","  public void test124()  throws Throwable  {
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      List<AngularInterval.Convex> list0 = angularInterval_Convex0.toConvex();
}"
331,"    public Point1S project(final Point1S pt) {
        final BoundaryProjector1S projector = new BoundaryProjector1S(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test0()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(-0.0, -0.0, -0.0, (-2.979075673148106), (-2.979075673148106)).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.fromInterval(angularInterval0);
      regionBSPTree1S0.add(angularInterval0);
      RegionBSPTree1S regionBSPTree1S1 = RegionBSPTree1S.fromInterval(angularInterval0);
      regionBSPTree1S0.xor((AbstractRegionBSPTree<Point1S, RegionBSPTree1S.RegionNode1S>) regionBSPTree1S1, (AbstractRegionBSPTree<Point1S, RegionBSPTree1S.RegionNode1S>) regionBSPTree1S1);
      Point1S point1S1 = regionBSPTree1S0.project(point1S0);
}"
332,"    public static RegionBSPTree1S fromInterval(final AngularInterval interval) {
        final CutAngle minBoundary = interval.getMinBoundary();
        final CutAngle maxBoundary = interval.getMaxBoundary();

        final RegionBSPTree1S tree = full();

        if (minBoundary != null) {
            tree.insert(minBoundary.span());
        }

        if (maxBoundary != null) {
            tree.insert(maxBoundary.span());
        }

        return tree;
    }","  public void test1()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.identity();
      Point1S point1S0 = Point1S.PI;
      Point1S point1S1 = transform1S0.apply(point1S0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(57.29577951308232, 57.29577951308232, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S1, point1S1, precision_DoubleEquivalence0);
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.fromInterval(angularInterval0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S1, false, precision_DoubleEquivalence1);
      HyperplaneConvexSubset<Point1S> hyperplaneConvexSubset0 = cutAngle0.span();
      regionBSPTree1S0.insert(hyperplaneConvexSubset0);
      double double0 = regionBSPTree1S0.getSize();
}"
333,"    protected RegionNode1S createNode() {
        return new RegionNode1S(this);
    }","  public void test2()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of((-1872.919), 0.0, precision_DoubleEquivalence0);
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.fromInterval(angularInterval0);
      RegionBSPTree1S.RegionNode1S regionBSPTree1S_RegionNode1S0 = regionBSPTree1S0.createNode();
      RegionBSPTree1S.RegionNode1S regionBSPTree1S_RegionNode1S1 = regionBSPTree1S_RegionNode1S0.getSelf();
}"
334,"    public Point1S project(final Point1S pt) {
        final BoundaryProjector1S projector = new BoundaryProjector1S(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test3()  throws Throwable  {
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.empty();
      Point1S point1S0 = Point1S.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence0);
      HyperplaneConvexSubset<Point1S> hyperplaneConvexSubset0 = cutAngle0.span();
      regionBSPTree1S0.insert((HyperplaneSubset<Point1S>) hyperplaneConvexSubset0);
      Point1S point1S1 = regionBSPTree1S0.project(point1S0);
}"
335,"    public Point1S project(final Point1S pt) {
        final BoundaryProjector1S projector = new BoundaryProjector1S(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test4()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(0.0, 0.0, precision_DoubleEquivalence0);
      RegionBSPTree1S regionBSPTree1S0 = angularInterval0.toTree();
      Point1S point1S0 = Point1S.PI;
      Point1S point1S1 = regionBSPTree1S0.project(point1S0);
}"
336,"    public Point1S project(final Point1S pt) {
        final BoundaryProjector1S projector = new BoundaryProjector1S(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test5()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of((-1872.919), 0.0, precision_DoubleEquivalence0);
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.fromInterval(angularInterval0);
      Point1S point1S0 = Point1S.PI;
      Point1S point1S1 = regionBSPTree1S0.project(point1S0);
}"
337,"    protected RegionNode1S createNode() {
        return new RegionNode1S(this);
    }","  public void test6()  throws Throwable  {
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      RegionBSPTree1S regionBSPTree1S0 = angularInterval_Convex0.toTree();
      RegionBSPTree1S.RegionNode1S regionBSPTree1S_RegionNode1S0 = regionBSPTree1S0.createNode();
}"
338,"    public void transform(final Transform<Point1S> transform) {
        if (!isFull() && !isEmpty()) {
            // transform each interval individually to handle wrap-around
            final List<AngularInterval> intervals = toIntervals();

            setEmpty();

            for (final AngularInterval interval : intervals) {
                union(interval.transform(transform).toTree());
            }
        }
    }","  public void test7()  throws Throwable  {
      RegionBSPTree1S regionBSPTree1S0 = new RegionBSPTree1S();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(988.0, 988.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      regionBSPTree1S0.add(angularInterval0);
      // Undeclared exception!
      try { 
        regionBSPTree1S0.transform((Transform<Point1S>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.CutAngle"", e);
      }
  }"
339,"    public List<AngularInterval> toIntervals() {
        if (isFull()) {
            return Collections.singletonList(AngularInterval.full());
        }

        final List<BoundaryPair> insideBoundaryPairs = new ArrayList<>();
        for (final RegionNode1S node : nodes()) {
            if (node.isInside()) {
                insideBoundaryPairs.add(getNodeBoundaryPair(node));
            }
        }

        insideBoundaryPairs.sort(BOUNDARY_PAIR_COMPARATOR);

        final int boundaryPairCount = insideBoundaryPairs.size();

        // Get the start point for merging intervals together.
        final int startOffset = getIntervalStartIndex(insideBoundaryPairs);

        // Go through the pairs starting at the start offset and create intervals
        // for each set of adjacent pairs.
        final List<AngularInterval> intervals = new ArrayList<>();

        BoundaryPair start = null;
        BoundaryPair end = null;
        BoundaryPair current;

        for (int i = 0; i < boundaryPairCount; ++i) {
            current = insideBoundaryPairs.get((i + startOffset) % boundaryPairCount);

            if (start == null) {
                start = current;
                end = current;
            } else if (Objects.equals(end.getMax(), current.getMin())) {
                // these intervals should be merged
                end = current;
            } else {
                // these intervals should be separate
                intervals.add(createInterval(start, end));

                // queue up the next pair
                start = current;
                end = current;
            }
        }

        if (start != null && end != null) {
            intervals.add(createInterval(start, end));
        }

        return intervals;
    }","  public void test8()  throws Throwable  {
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.empty();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle((Point1S) null, false, precision_DoubleEquivalence0);
      HyperplaneConvexSubset<Point1S> hyperplaneConvexSubset0 = cutAngle0.span();
      regionBSPTree1S0.insert((HyperplaneSubset<Point1S>) hyperplaneConvexSubset0);
      // Undeclared exception!
      try { 
        regionBSPTree1S0.toIntervals();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.AngularInterval"", e);
      }
  }"
340,"    public List<AngularInterval> toIntervals() {
        if (isFull()) {
            return Collections.singletonList(AngularInterval.full());
        }

        final List<BoundaryPair> insideBoundaryPairs = new ArrayList<>();
        for (final RegionNode1S node : nodes()) {
            if (node.isInside()) {
                insideBoundaryPairs.add(getNodeBoundaryPair(node));
            }
        }

        insideBoundaryPairs.sort(BOUNDARY_PAIR_COMPARATOR);

        final int boundaryPairCount = insideBoundaryPairs.size();

        // Get the start point for merging intervals together.
        final int startOffset = getIntervalStartIndex(insideBoundaryPairs);

        // Go through the pairs starting at the start offset and create intervals
        // for each set of adjacent pairs.
        final List<AngularInterval> intervals = new ArrayList<>();

        BoundaryPair start = null;
        BoundaryPair end = null;
        BoundaryPair current;

        for (int i = 0; i < boundaryPairCount; ++i) {
            current = insideBoundaryPairs.get((i + startOffset) % boundaryPairCount);

            if (start == null) {
                start = current;
                end = current;
            } else if (Objects.equals(end.getMax(), current.getMin())) {
                // these intervals should be merged
                end = current;
            } else {
                // these intervals should be separate
                intervals.add(createInterval(start, end));

                // queue up the next pair
                start = current;
                end = current;
            }
        }

        if (start != null && end != null) {
            intervals.add(createInterval(start, end));
        }

        return intervals;
    }","  public void test9()  throws Throwable  {
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.empty();
      Point1S point1S0 = Point1S.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence0);
      HyperplaneConvexSubset<Point1S> hyperplaneConvexSubset0 = cutAngle0.span();
      regionBSPTree1S0.insert((HyperplaneSubset<Point1S>) hyperplaneConvexSubset0);
      // Undeclared exception!
      try { 
        regionBSPTree1S0.toIntervals();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid angular interval: [\uFFFD, 6.283]
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.AngularInterval"", e);
      }
  }"
341,"    public Split<RegionBSPTree1S> splitDiameter(final CutAngle splitter) {

        final CutAngle opposite = CutAngles.fromPointAndDirection(
                splitter.getPoint().antipodal(),
                !splitter.isPositiveFacing(),
                splitter.getPrecision());

        final double plusPoleOffset = splitter.isPositiveFacing() ?
                +Angle.PI_OVER_TWO :
                -Angle.PI_OVER_TWO;
        final Point1S plusPole = Point1S.of(splitter.getAzimuth() + plusPoleOffset);

        final boolean zeroOnPlusSide = splitter.getPrecision()
                .lte(plusPole.distance(Point1S.ZERO), Angle.PI_OVER_TWO);

        final Split<RegionBSPTree1S> firstSplit = split(splitter);
        final Split<RegionBSPTree1S> secondSplit = split(opposite);

        RegionBSPTree1S minus = RegionBSPTree1S.empty();
        RegionBSPTree1S plus = RegionBSPTree1S.empty();

        if (zeroOnPlusSide) {
            // zero wrap-around needs to be handled on the plus side of the split
            safeUnion(plus, firstSplit.getPlus());
            safeUnion(plus, secondSplit.getPlus());

            minus = firstSplit.getMinus();
            if (minus != null) {
                minus = minus.split(opposite).getMinus();
            }
        } else {
            // zero wrap-around needs to be handled on the minus side of the split
            safeUnion(minus, firstSplit.getMinus());
            safeUnion(minus, secondSplit.getMinus());

            plus = firstSplit.getPlus();
            if (plus != null) {
                plus = plus.split(opposite).getPlus();
            }
        }

        return new Split<>(
                (minus != null && !minus.isEmpty()) ? minus : null,
                (plus != null && !plus.isEmpty()) ? plus : null);
    }","  public void test10()  throws Throwable  {
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      RegionBSPTree1S regionBSPTree1S0 = angularInterval_Convex0.toTree();
      Point1S point1S0 = Point1S.PI;
      CutAngle cutAngle0 = new CutAngle(point1S0, true, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        regionBSPTree1S0.splitDiameter(cutAngle0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.RegionBSPTree1S"", e);
      }
  }"
342,"    public Split<RegionBSPTree1S> split(final Hyperplane<Point1S> splitter) {
        // Handle the special case where the cut is on the azimuth equivalent to zero.
        // In this case, it is not possible for any points to lie between it and zero.
        if (!isEmpty() && splitter.classify(Point1S.ZERO) == HyperplaneLocation.ON) {
            final CutAngle cut = (CutAngle) splitter;
            if (cut.isPositiveFacing()) {
                return new Split<>(null, copy());
            } else {
                return new Split<>(copy(), null);
            }
        }

        return split(splitter, RegionBSPTree1S.empty(), RegionBSPTree1S.empty());
    }","  public void test11()  throws Throwable  {
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.full();
      // Undeclared exception!
      try { 
        regionBSPTree1S0.split((Hyperplane<Point1S>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.RegionBSPTree1S"", e);
      }
  }"
343,"    public static RegionBSPTree1S fromInterval(final AngularInterval interval) {
        final CutAngle minBoundary = interval.getMinBoundary();
        final CutAngle maxBoundary = interval.getMaxBoundary();

        final RegionBSPTree1S tree = full();

        if (minBoundary != null) {
            tree.insert(minBoundary.span());
        }

        if (maxBoundary != null) {
            tree.insert(maxBoundary.span());
        }

        return tree;
    }","  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        RegionBSPTree1S.fromInterval((AngularInterval) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.RegionBSPTree1S"", e);
      }
  }"
344,"    public void add(final AngularInterval interval) {
        union(fromInterval(interval));
    }","  public void test13()  throws Throwable  {
      RegionBSPTree1S regionBSPTree1S0 = new RegionBSPTree1S();
      // Undeclared exception!
      try { 
        regionBSPTree1S0.add((AngularInterval) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.RegionBSPTree1S"", e);
      }
  }"
345,"    public Point1S project(final Point1S pt) {
        final BoundaryProjector1S projector = new BoundaryProjector1S(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test14()  throws Throwable  {
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.fromInterval(angularInterval_Convex0);
      Point1S point1S0 = Point1S.ZERO;
      Point1S point1S1 = regionBSPTree1S0.project(point1S0);
}"
346,"    public static RegionBSPTree1S fromInterval(final AngularInterval interval) {
        final CutAngle minBoundary = interval.getMinBoundary();
        final CutAngle maxBoundary = interval.getMaxBoundary();

        final RegionBSPTree1S tree = full();

        if (minBoundary != null) {
            tree.insert(minBoundary.span());
        }

        if (maxBoundary != null) {
            tree.insert(maxBoundary.span());
        }

        return tree;
    }","  public void test15()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, true, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.fromInterval(angularInterval0);
      double double0 = regionBSPTree1S0.getSize();
}"
347,"    public Split<RegionBSPTree1S> split(final Hyperplane<Point1S> splitter) {
        // Handle the special case where the cut is on the azimuth equivalent to zero.
        // In this case, it is not possible for any points to lie between it and zero.
        if (!isEmpty() && splitter.classify(Point1S.ZERO) == HyperplaneLocation.ON) {
            final CutAngle cut = (CutAngle) splitter;
            if (cut.isPositiveFacing()) {
                return new Split<>(null, copy());
            } else {
                return new Split<>(copy(), null);
            }
        }

        return split(splitter, RegionBSPTree1S.empty(), RegionBSPTree1S.empty());
    }","  public void test16()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(0.0, 0.0, precision_DoubleEquivalence0);
      RegionBSPTree1S regionBSPTree1S0 = angularInterval0.toTree();
      CutAngle cutAngle0 = angularInterval0.getMinBoundary();
      Transform1S transform1S0 = Transform1S.createNegation();
      CutAngle cutAngle1 = cutAngle0.transform(transform1S0);
      Split<RegionBSPTree1S> split0 = regionBSPTree1S0.split(cutAngle1);
}"
348,"    public Split<RegionBSPTree1S> split(final Hyperplane<Point1S> splitter) {
        // Handle the special case where the cut is on the azimuth equivalent to zero.
        // In this case, it is not possible for any points to lie between it and zero.
        if (!isEmpty() && splitter.classify(Point1S.ZERO) == HyperplaneLocation.ON) {
            final CutAngle cut = (CutAngle) splitter;
            if (cut.isPositiveFacing()) {
                return new Split<>(null, copy());
            } else {
                return new Split<>(copy(), null);
            }
        }

        return split(splitter, RegionBSPTree1S.empty(), RegionBSPTree1S.empty());
    }","  public void test17()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(1.0, 1.0, precision_DoubleEquivalence0);
      RegionBSPTree1S regionBSPTree1S0 = angularInterval0.toTree();
      CutAngle cutAngle0 = angularInterval0.getMinBoundary();
      Split<RegionBSPTree1S> split0 = regionBSPTree1S0.split(cutAngle0);
}"
349,"    public List<AngularInterval> toIntervals() {
        if (isFull()) {
            return Collections.singletonList(AngularInterval.full());
        }

        final List<BoundaryPair> insideBoundaryPairs = new ArrayList<>();
        for (final RegionNode1S node : nodes()) {
            if (node.isInside()) {
                insideBoundaryPairs.add(getNodeBoundaryPair(node));
            }
        }

        insideBoundaryPairs.sort(BOUNDARY_PAIR_COMPARATOR);

        final int boundaryPairCount = insideBoundaryPairs.size();

        // Get the start point for merging intervals together.
        final int startOffset = getIntervalStartIndex(insideBoundaryPairs);

        // Go through the pairs starting at the start offset and create intervals
        // for each set of adjacent pairs.
        final List<AngularInterval> intervals = new ArrayList<>();

        BoundaryPair start = null;
        BoundaryPair end = null;
        BoundaryPair current;

        for (int i = 0; i < boundaryPairCount; ++i) {
            current = insideBoundaryPairs.get((i + startOffset) % boundaryPairCount);

            if (start == null) {
                start = current;
                end = current;
            } else if (Objects.equals(end.getMax(), current.getMin())) {
                // these intervals should be merged
                end = current;
            } else {
                // these intervals should be separate
                intervals.add(createInterval(start, end));

                // queue up the next pair
                start = current;
                end = current;
            }
        }

        if (start != null && end != null) {
            intervals.add(createInterval(start, end));
        }

        return intervals;
    }","  public void test18()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(0.0, 0.0, 0.0, (-2.979075673148106), (-2.979075673148106)).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.fromInterval(angularInterval0);
      regionBSPTree1S0.add(angularInterval0);
      RegionBSPTree1S regionBSPTree1S1 = RegionBSPTree1S.fromInterval(angularInterval0);
      regionBSPTree1S1.xor((AbstractRegionBSPTree<Point1S, RegionBSPTree1S.RegionNode1S>) regionBSPTree1S1, (AbstractRegionBSPTree<Point1S, RegionBSPTree1S.RegionNode1S>) regionBSPTree1S0);
      List<AngularInterval> list0 = regionBSPTree1S1.toIntervals();
}"
350,"    public static RegionBSPTree1S empty() {
        return new RegionBSPTree1S(false);
    }","  public void test19()  throws Throwable  {
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.empty();
      Point1S point1S0 = regionBSPTree1S0.getCentroid();
}"
351,"    public void transform(final Transform<Point1S> transform) {
        if (!isFull() && !isEmpty()) {
            // transform each interval individually to handle wrap-around
            final List<AngularInterval> intervals = toIntervals();

            setEmpty();

            for (final AngularInterval interval : intervals) {
                union(interval.transform(transform).toTree());
            }
        }
    }","  public void test20()  throws Throwable  {
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.empty();
      Point1S point1S0 = Point1S.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = new CutAngle(point1S0, false, precision_DoubleEquivalence0);
      CutAngle cutAngle1 = cutAngle0.reverse();
      HyperplaneConvexSubset<Point1S> hyperplaneConvexSubset0 = cutAngle1.span();
      regionBSPTree1S0.insert((HyperplaneSubset<Point1S>) hyperplaneConvexSubset0);
      Transform1S transform1S0 = Transform1S.createRotation((-2138.5));
      // Undeclared exception!
      try { 
        regionBSPTree1S0.transform(transform1S0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid angular interval: [0, \uFFFD]
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.AngularInterval"", e);
      }
  }"
352,"    public List<AngularInterval> toIntervals() {
        if (isFull()) {
            return Collections.singletonList(AngularInterval.full());
        }

        final List<BoundaryPair> insideBoundaryPairs = new ArrayList<>();
        for (final RegionNode1S node : nodes()) {
            if (node.isInside()) {
                insideBoundaryPairs.add(getNodeBoundaryPair(node));
            }
        }

        insideBoundaryPairs.sort(BOUNDARY_PAIR_COMPARATOR);

        final int boundaryPairCount = insideBoundaryPairs.size();

        // Get the start point for merging intervals together.
        final int startOffset = getIntervalStartIndex(insideBoundaryPairs);

        // Go through the pairs starting at the start offset and create intervals
        // for each set of adjacent pairs.
        final List<AngularInterval> intervals = new ArrayList<>();

        BoundaryPair start = null;
        BoundaryPair end = null;
        BoundaryPair current;

        for (int i = 0; i < boundaryPairCount; ++i) {
            current = insideBoundaryPairs.get((i + startOffset) % boundaryPairCount);

            if (start == null) {
                start = current;
                end = current;
            } else if (Objects.equals(end.getMax(), current.getMin())) {
                // these intervals should be merged
                end = current;
            } else {
                // these intervals should be separate
                intervals.add(createInterval(start, end));

                // queue up the next pair
                start = current;
                end = current;
            }
        }

        if (start != null && end != null) {
            intervals.add(createInterval(start, end));
        }

        return intervals;
    }","  public void test21()  throws Throwable  {
      RegionBSPTree1S regionBSPTree1S0 = new RegionBSPTree1S();
      List<AngularInterval> list0 = regionBSPTree1S0.toIntervals();
}"
353,"    public List<AngularInterval> toIntervals() {
        if (isFull()) {
            return Collections.singletonList(AngularInterval.full());
        }

        final List<BoundaryPair> insideBoundaryPairs = new ArrayList<>();
        for (final RegionNode1S node : nodes()) {
            if (node.isInside()) {
                insideBoundaryPairs.add(getNodeBoundaryPair(node));
            }
        }

        insideBoundaryPairs.sort(BOUNDARY_PAIR_COMPARATOR);

        final int boundaryPairCount = insideBoundaryPairs.size();

        // Get the start point for merging intervals together.
        final int startOffset = getIntervalStartIndex(insideBoundaryPairs);

        // Go through the pairs starting at the start offset and create intervals
        // for each set of adjacent pairs.
        final List<AngularInterval> intervals = new ArrayList<>();

        BoundaryPair start = null;
        BoundaryPair end = null;
        BoundaryPair current;

        for (int i = 0; i < boundaryPairCount; ++i) {
            current = insideBoundaryPairs.get((i + startOffset) % boundaryPairCount);

            if (start == null) {
                start = current;
                end = current;
            } else if (Objects.equals(end.getMax(), current.getMin())) {
                // these intervals should be merged
                end = current;
            } else {
                // these intervals should be separate
                intervals.add(createInterval(start, end));

                // queue up the next pair
                start = current;
                end = current;
            }
        }

        if (start != null && end != null) {
            intervals.add(createInterval(start, end));
        }

        return intervals;
    }","  public void test22()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(0.0, 0.0, 0.0, (-2.979075673148106), (-2.979075673148106)).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.fromInterval(angularInterval0);
      regionBSPTree1S0.add(angularInterval0);
      RegionBSPTree1S regionBSPTree1S1 = RegionBSPTree1S.fromInterval(angularInterval0);
      regionBSPTree1S1.xor((AbstractRegionBSPTree<Point1S, RegionBSPTree1S.RegionNode1S>) regionBSPTree1S1, (AbstractRegionBSPTree<Point1S, RegionBSPTree1S.RegionNode1S>) regionBSPTree1S1);
      List<AngularInterval> list0 = regionBSPTree1S1.toIntervals();
}"
354,"    public List<AngularInterval> toIntervals() {
        if (isFull()) {
            return Collections.singletonList(AngularInterval.full());
        }

        final List<BoundaryPair> insideBoundaryPairs = new ArrayList<>();
        for (final RegionNode1S node : nodes()) {
            if (node.isInside()) {
                insideBoundaryPairs.add(getNodeBoundaryPair(node));
            }
        }

        insideBoundaryPairs.sort(BOUNDARY_PAIR_COMPARATOR);

        final int boundaryPairCount = insideBoundaryPairs.size();

        // Get the start point for merging intervals together.
        final int startOffset = getIntervalStartIndex(insideBoundaryPairs);

        // Go through the pairs starting at the start offset and create intervals
        // for each set of adjacent pairs.
        final List<AngularInterval> intervals = new ArrayList<>();

        BoundaryPair start = null;
        BoundaryPair end = null;
        BoundaryPair current;

        for (int i = 0; i < boundaryPairCount; ++i) {
            current = insideBoundaryPairs.get((i + startOffset) % boundaryPairCount);

            if (start == null) {
                start = current;
                end = current;
            } else if (Objects.equals(end.getMax(), current.getMin())) {
                // these intervals should be merged
                end = current;
            } else {
                // these intervals should be separate
                intervals.add(createInterval(start, end));

                // queue up the next pair
                start = current;
                end = current;
            }
        }

        if (start != null && end != null) {
            intervals.add(createInterval(start, end));
        }

        return intervals;
    }","  public void test23()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(0.0, 0.0, 0.0, (-2.979075673148106), (-2.979075673148106)).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.fromInterval(angularInterval0);
      regionBSPTree1S0.add(angularInterval0);
      regionBSPTree1S0.difference((AbstractRegionBSPTree<Point1S, RegionBSPTree1S.RegionNode1S>) regionBSPTree1S0, (AbstractRegionBSPTree<Point1S, RegionBSPTree1S.RegionNode1S>) regionBSPTree1S0);
      regionBSPTree1S0.xor((AbstractRegionBSPTree<Point1S, RegionBSPTree1S.RegionNode1S>) regionBSPTree1S0, (AbstractRegionBSPTree<Point1S, RegionBSPTree1S.RegionNode1S>) regionBSPTree1S0);
      List<AngularInterval> list0 = regionBSPTree1S0.toIntervals();
}"
355,"    public List<AngularInterval> toIntervals() {
        if (isFull()) {
            return Collections.singletonList(AngularInterval.full());
        }

        final List<BoundaryPair> insideBoundaryPairs = new ArrayList<>();
        for (final RegionNode1S node : nodes()) {
            if (node.isInside()) {
                insideBoundaryPairs.add(getNodeBoundaryPair(node));
            }
        }

        insideBoundaryPairs.sort(BOUNDARY_PAIR_COMPARATOR);

        final int boundaryPairCount = insideBoundaryPairs.size();

        // Get the start point for merging intervals together.
        final int startOffset = getIntervalStartIndex(insideBoundaryPairs);

        // Go through the pairs starting at the start offset and create intervals
        // for each set of adjacent pairs.
        final List<AngularInterval> intervals = new ArrayList<>();

        BoundaryPair start = null;
        BoundaryPair end = null;
        BoundaryPair current;

        for (int i = 0; i < boundaryPairCount; ++i) {
            current = insideBoundaryPairs.get((i + startOffset) % boundaryPairCount);

            if (start == null) {
                start = current;
                end = current;
            } else if (Objects.equals(end.getMax(), current.getMin())) {
                // these intervals should be merged
                end = current;
            } else {
                // these intervals should be separate
                intervals.add(createInterval(start, end));

                // queue up the next pair
                start = current;
                end = current;
            }
        }

        if (start != null && end != null) {
            intervals.add(createInterval(start, end));
        }

        return intervals;
    }","  public void test24()  throws Throwable  {
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.full();
      List<AngularInterval> list0 = regionBSPTree1S0.toIntervals();
}"
356,"    public Split<RegionBSPTree1S> splitDiameter(final CutAngle splitter) {

        final CutAngle opposite = CutAngles.fromPointAndDirection(
                splitter.getPoint().antipodal(),
                !splitter.isPositiveFacing(),
                splitter.getPrecision());

        final double plusPoleOffset = splitter.isPositiveFacing() ?
                +Angle.PI_OVER_TWO :
                -Angle.PI_OVER_TWO;
        final Point1S plusPole = Point1S.of(splitter.getAzimuth() + plusPoleOffset);

        final boolean zeroOnPlusSide = splitter.getPrecision()
                .lte(plusPole.distance(Point1S.ZERO), Angle.PI_OVER_TWO);

        final Split<RegionBSPTree1S> firstSplit = split(splitter);
        final Split<RegionBSPTree1S> secondSplit = split(opposite);

        RegionBSPTree1S minus = RegionBSPTree1S.empty();
        RegionBSPTree1S plus = RegionBSPTree1S.empty();

        if (zeroOnPlusSide) {
            // zero wrap-around needs to be handled on the plus side of the split
            safeUnion(plus, firstSplit.getPlus());
            safeUnion(plus, secondSplit.getPlus());

            minus = firstSplit.getMinus();
            if (minus != null) {
                minus = minus.split(opposite).getMinus();
            }
        } else {
            // zero wrap-around needs to be handled on the minus side of the split
            safeUnion(minus, firstSplit.getMinus());
            safeUnion(minus, secondSplit.getMinus());

            plus = firstSplit.getPlus();
            if (plus != null) {
                plus = plus.split(opposite).getPlus();
            }
        }

        return new Split<>(
                (minus != null && !minus.isEmpty()) ? minus : null,
                (plus != null && !plus.isEmpty()) ? plus : null);
    }","  public void test25()  throws Throwable  {
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.full();
      RegionBSPTree1S regionBSPTree1S1 = new RegionBSPTree1S(false);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(false, true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      doReturn(0.0, 0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(0.0, 0.0, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMaxBoundary();
      Split<RegionBSPTree1S> split0 = regionBSPTree1S0.splitDiameter(cutAngle0);
}"
357,"    public Split<RegionBSPTree1S> splitDiameter(final CutAngle splitter) {

        final CutAngle opposite = CutAngles.fromPointAndDirection(
                splitter.getPoint().antipodal(),
                !splitter.isPositiveFacing(),
                splitter.getPrecision());

        final double plusPoleOffset = splitter.isPositiveFacing() ?
                +Angle.PI_OVER_TWO :
                -Angle.PI_OVER_TWO;
        final Point1S plusPole = Point1S.of(splitter.getAzimuth() + plusPoleOffset);

        final boolean zeroOnPlusSide = splitter.getPrecision()
                .lte(plusPole.distance(Point1S.ZERO), Angle.PI_OVER_TWO);

        final Split<RegionBSPTree1S> firstSplit = split(splitter);
        final Split<RegionBSPTree1S> secondSplit = split(opposite);

        RegionBSPTree1S minus = RegionBSPTree1S.empty();
        RegionBSPTree1S plus = RegionBSPTree1S.empty();

        if (zeroOnPlusSide) {
            // zero wrap-around needs to be handled on the plus side of the split
            safeUnion(plus, firstSplit.getPlus());
            safeUnion(plus, secondSplit.getPlus());

            minus = firstSplit.getMinus();
            if (minus != null) {
                minus = minus.split(opposite).getMinus();
            }
        } else {
            // zero wrap-around needs to be handled on the minus side of the split
            safeUnion(minus, firstSplit.getMinus());
            safeUnion(minus, secondSplit.getMinus());

            plus = firstSplit.getPlus();
            if (plus != null) {
                plus = plus.split(opposite).getPlus();
            }
        }

        return new Split<>(
                (minus != null && !minus.isEmpty()) ? minus : null,
                (plus != null && !plus.isEmpty()) ? plus : null);
    }","  public void test26()  throws Throwable  {
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.full();
      RegionBSPTree1S regionBSPTree1S1 = new RegionBSPTree1S(false);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(false, true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      doReturn(0.0, 0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(0.0, 0.0, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMaxBoundary();
      Split<RegionBSPTree1S> split0 = regionBSPTree1S0.splitDiameter(cutAngle0);
      Split<RegionBSPTree1S> split1 = regionBSPTree1S1.splitDiameter(cutAngle0);
}"
358,"    public Split<RegionBSPTree1S> splitDiameter(final CutAngle splitter) {

        final CutAngle opposite = CutAngles.fromPointAndDirection(
                splitter.getPoint().antipodal(),
                !splitter.isPositiveFacing(),
                splitter.getPrecision());

        final double plusPoleOffset = splitter.isPositiveFacing() ?
                +Angle.PI_OVER_TWO :
                -Angle.PI_OVER_TWO;
        final Point1S plusPole = Point1S.of(splitter.getAzimuth() + plusPoleOffset);

        final boolean zeroOnPlusSide = splitter.getPrecision()
                .lte(plusPole.distance(Point1S.ZERO), Angle.PI_OVER_TWO);

        final Split<RegionBSPTree1S> firstSplit = split(splitter);
        final Split<RegionBSPTree1S> secondSplit = split(opposite);

        RegionBSPTree1S minus = RegionBSPTree1S.empty();
        RegionBSPTree1S plus = RegionBSPTree1S.empty();

        if (zeroOnPlusSide) {
            // zero wrap-around needs to be handled on the plus side of the split
            safeUnion(plus, firstSplit.getPlus());
            safeUnion(plus, secondSplit.getPlus());

            minus = firstSplit.getMinus();
            if (minus != null) {
                minus = minus.split(opposite).getMinus();
            }
        } else {
            // zero wrap-around needs to be handled on the minus side of the split
            safeUnion(minus, firstSplit.getMinus());
            safeUnion(minus, secondSplit.getMinus());

            plus = firstSplit.getPlus();
            if (plus != null) {
                plus = plus.split(opposite).getPlus();
            }
        }

        return new Split<>(
                (minus != null && !minus.isEmpty()) ? minus : null,
                (plus != null && !plus.isEmpty()) ? plus : null);
    }","  public void test27()  throws Throwable  {
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.full();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(false, true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(0.0, 0.0, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMaxBoundary();
      Split<RegionBSPTree1S> split0 = regionBSPTree1S0.splitDiameter(cutAngle0);
}"
359,"    public Split<RegionBSPTree1S> splitDiameter(final CutAngle splitter) {

        final CutAngle opposite = CutAngles.fromPointAndDirection(
                splitter.getPoint().antipodal(),
                !splitter.isPositiveFacing(),
                splitter.getPrecision());

        final double plusPoleOffset = splitter.isPositiveFacing() ?
                +Angle.PI_OVER_TWO :
                -Angle.PI_OVER_TWO;
        final Point1S plusPole = Point1S.of(splitter.getAzimuth() + plusPoleOffset);

        final boolean zeroOnPlusSide = splitter.getPrecision()
                .lte(plusPole.distance(Point1S.ZERO), Angle.PI_OVER_TWO);

        final Split<RegionBSPTree1S> firstSplit = split(splitter);
        final Split<RegionBSPTree1S> secondSplit = split(opposite);

        RegionBSPTree1S minus = RegionBSPTree1S.empty();
        RegionBSPTree1S plus = RegionBSPTree1S.empty();

        if (zeroOnPlusSide) {
            // zero wrap-around needs to be handled on the plus side of the split
            safeUnion(plus, firstSplit.getPlus());
            safeUnion(plus, secondSplit.getPlus());

            minus = firstSplit.getMinus();
            if (minus != null) {
                minus = minus.split(opposite).getMinus();
            }
        } else {
            // zero wrap-around needs to be handled on the minus side of the split
            safeUnion(minus, firstSplit.getMinus());
            safeUnion(minus, secondSplit.getMinus());

            plus = firstSplit.getPlus();
            if (plus != null) {
                plus = plus.split(opposite).getPlus();
            }
        }

        return new Split<>(
                (minus != null && !minus.isEmpty()) ? minus : null,
                (plus != null && !plus.isEmpty()) ? plus : null);
    }","  public void test28()  throws Throwable  {
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.full();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(false, true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(0.0, 0.0, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMaxBoundary();
      Split<RegionBSPTree1S> split0 = regionBSPTree1S0.splitDiameter(cutAngle0);
      Split<RegionBSPTree1S> split1 = regionBSPTree1S0.splitDiameter(cutAngle0);
}"
360,"    public Split<RegionBSPTree1S> splitDiameter(final CutAngle splitter) {

        final CutAngle opposite = CutAngles.fromPointAndDirection(
                splitter.getPoint().antipodal(),
                !splitter.isPositiveFacing(),
                splitter.getPrecision());

        final double plusPoleOffset = splitter.isPositiveFacing() ?
                +Angle.PI_OVER_TWO :
                -Angle.PI_OVER_TWO;
        final Point1S plusPole = Point1S.of(splitter.getAzimuth() + plusPoleOffset);

        final boolean zeroOnPlusSide = splitter.getPrecision()
                .lte(plusPole.distance(Point1S.ZERO), Angle.PI_OVER_TWO);

        final Split<RegionBSPTree1S> firstSplit = split(splitter);
        final Split<RegionBSPTree1S> secondSplit = split(opposite);

        RegionBSPTree1S minus = RegionBSPTree1S.empty();
        RegionBSPTree1S plus = RegionBSPTree1S.empty();

        if (zeroOnPlusSide) {
            // zero wrap-around needs to be handled on the plus side of the split
            safeUnion(plus, firstSplit.getPlus());
            safeUnion(plus, secondSplit.getPlus());

            minus = firstSplit.getMinus();
            if (minus != null) {
                minus = minus.split(opposite).getMinus();
            }
        } else {
            // zero wrap-around needs to be handled on the minus side of the split
            safeUnion(minus, firstSplit.getMinus());
            safeUnion(minus, secondSplit.getMinus());

            plus = firstSplit.getPlus();
            if (plus != null) {
                plus = plus.split(opposite).getPlus();
            }
        }

        return new Split<>(
                (minus != null && !minus.isEmpty()) ? minus : null,
                (plus != null && !plus.isEmpty()) ? plus : null);
    }","  public void test29()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(false, true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      doReturn(0.0, 0.0, 0.0, (-2.979075673148106), (-2.979075673148106)).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.fromInterval(angularInterval0);
      CutAngle cutAngle0 = angularInterval0.getMaxBoundary();
      Split<RegionBSPTree1S> split0 = regionBSPTree1S0.splitDiameter(cutAngle0);
}"
361,"    public Split<RegionBSPTree1S> splitDiameter(final CutAngle splitter) {

        final CutAngle opposite = CutAngles.fromPointAndDirection(
                splitter.getPoint().antipodal(),
                !splitter.isPositiveFacing(),
                splitter.getPrecision());

        final double plusPoleOffset = splitter.isPositiveFacing() ?
                +Angle.PI_OVER_TWO :
                -Angle.PI_OVER_TWO;
        final Point1S plusPole = Point1S.of(splitter.getAzimuth() + plusPoleOffset);

        final boolean zeroOnPlusSide = splitter.getPrecision()
                .lte(plusPole.distance(Point1S.ZERO), Angle.PI_OVER_TWO);

        final Split<RegionBSPTree1S> firstSplit = split(splitter);
        final Split<RegionBSPTree1S> secondSplit = split(opposite);

        RegionBSPTree1S minus = RegionBSPTree1S.empty();
        RegionBSPTree1S plus = RegionBSPTree1S.empty();

        if (zeroOnPlusSide) {
            // zero wrap-around needs to be handled on the plus side of the split
            safeUnion(plus, firstSplit.getPlus());
            safeUnion(plus, secondSplit.getPlus());

            minus = firstSplit.getMinus();
            if (minus != null) {
                minus = minus.split(opposite).getMinus();
            }
        } else {
            // zero wrap-around needs to be handled on the minus side of the split
            safeUnion(minus, firstSplit.getMinus());
            safeUnion(minus, secondSplit.getMinus());

            plus = firstSplit.getPlus();
            if (plus != null) {
                plus = plus.split(opposite).getPlus();
            }
        }

        return new Split<>(
                (minus != null && !minus.isEmpty()) ? minus : null,
                (plus != null && !plus.isEmpty()) ? plus : null);
    }","  public void test30()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(false, true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      doReturn(0.0, 0.0, 0.0, (-2.979075673148106), (-2.979075673148106)).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.fromInterval(angularInterval0);
      CutAngle cutAngle0 = angularInterval0.getMaxBoundary();
      Split<RegionBSPTree1S> split0 = regionBSPTree1S0.splitDiameter(cutAngle0);
      Split<RegionBSPTree1S> split1 = regionBSPTree1S0.splitDiameter(cutAngle0);
}"
362,"    public Split<RegionBSPTree1S> splitDiameter(final CutAngle splitter) {

        final CutAngle opposite = CutAngles.fromPointAndDirection(
                splitter.getPoint().antipodal(),
                !splitter.isPositiveFacing(),
                splitter.getPrecision());

        final double plusPoleOffset = splitter.isPositiveFacing() ?
                +Angle.PI_OVER_TWO :
                -Angle.PI_OVER_TWO;
        final Point1S plusPole = Point1S.of(splitter.getAzimuth() + plusPoleOffset);

        final boolean zeroOnPlusSide = splitter.getPrecision()
                .lte(plusPole.distance(Point1S.ZERO), Angle.PI_OVER_TWO);

        final Split<RegionBSPTree1S> firstSplit = split(splitter);
        final Split<RegionBSPTree1S> secondSplit = split(opposite);

        RegionBSPTree1S minus = RegionBSPTree1S.empty();
        RegionBSPTree1S plus = RegionBSPTree1S.empty();

        if (zeroOnPlusSide) {
            // zero wrap-around needs to be handled on the plus side of the split
            safeUnion(plus, firstSplit.getPlus());
            safeUnion(plus, secondSplit.getPlus());

            minus = firstSplit.getMinus();
            if (minus != null) {
                minus = minus.split(opposite).getMinus();
            }
        } else {
            // zero wrap-around needs to be handled on the minus side of the split
            safeUnion(minus, firstSplit.getMinus());
            safeUnion(minus, secondSplit.getMinus());

            plus = firstSplit.getPlus();
            if (plus != null) {
                plus = plus.split(opposite).getPlus();
            }
        }

        return new Split<>(
                (minus != null && !minus.isEmpty()) ? minus : null,
                (plus != null && !plus.isEmpty()) ? plus : null);
    }","  public void test31()  throws Throwable  {
      RegionBSPTree1S regionBSPTree1S0 = new RegionBSPTree1S();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMinBoundary();
      Split<RegionBSPTree1S> split0 = regionBSPTree1S0.splitDiameter(cutAngle0);
}"
363,"    public Split<RegionBSPTree1S> split(final Hyperplane<Point1S> splitter) {
        // Handle the special case where the cut is on the azimuth equivalent to zero.
        // In this case, it is not possible for any points to lie between it and zero.
        if (!isEmpty() && splitter.classify(Point1S.ZERO) == HyperplaneLocation.ON) {
            final CutAngle cut = (CutAngle) splitter;
            if (cut.isPositiveFacing()) {
                return new Split<>(null, copy());
            } else {
                return new Split<>(copy(), null);
            }
        }

        return split(splitter, RegionBSPTree1S.empty(), RegionBSPTree1S.empty());
    }","  public void test32()  throws Throwable  {
      RegionBSPTree1S regionBSPTree1S0 = new RegionBSPTree1S();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(988.0, 988.0, 6.283185307179586, 2.0, 2.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMinBoundary();
      regionBSPTree1S0.add(angularInterval0);
      Split<RegionBSPTree1S> split0 = regionBSPTree1S0.split(cutAngle0);
}"
364,"    public void transform(final Transform<Point1S> transform) {
        if (!isFull() && !isEmpty()) {
            // transform each interval individually to handle wrap-around
            final List<AngularInterval> intervals = toIntervals();

            setEmpty();

            for (final AngularInterval interval : intervals) {
                union(interval.transform(transform).toTree());
            }
        }
    }","  public void test33()  throws Throwable  {
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.empty();
      Transform1S transform1S0 = Transform1S.createRotation(57.29577951308232);
      regionBSPTree1S0.transform(transform1S0);
}"
365,"    public void transform(final Transform<Point1S> transform) {
        if (!isFull() && !isEmpty()) {
            // transform each interval individually to handle wrap-around
            final List<AngularInterval> intervals = toIntervals();

            setEmpty();

            for (final AngularInterval interval : intervals) {
                union(interval.transform(transform).toTree());
            }
        }
    }","  public void test34()  throws Throwable  {
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.full();
      Transform1S transform1S0 = Transform1S.identity();
      regionBSPTree1S0.transform(transform1S0);
}"
366,"    public Split<RegionBSPTree1S> split(final Hyperplane<Point1S> splitter) {
        // Handle the special case where the cut is on the azimuth equivalent to zero.
        // In this case, it is not possible for any points to lie between it and zero.
        if (!isEmpty() && splitter.classify(Point1S.ZERO) == HyperplaneLocation.ON) {
            final CutAngle cut = (CutAngle) splitter;
            if (cut.isPositiveFacing()) {
                return new Split<>(null, copy());
            } else {
                return new Split<>(copy(), null);
            }
        }

        return split(splitter, RegionBSPTree1S.empty(), RegionBSPTree1S.empty());
    }","  public void test35()  throws Throwable  {
      RegionBSPTree1S regionBSPTree1S0 = new RegionBSPTree1S();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(6.283185307179586, 6.283185307179586, precision_DoubleEquivalence0);
      CutAngle cutAngle0 = angularInterval0.getMinBoundary();
      Split<RegionBSPTree1S> split0 = regionBSPTree1S0.split(cutAngle0);
}"
367,"    public RegionBSPTree1S copy() {
        final RegionBSPTree1S result = RegionBSPTree1S.empty();
        result.copy(this);

        return result;
    }","  public void test36()  throws Throwable  {
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.empty();
      RegionBSPTree1S regionBSPTree1S1 = regionBSPTree1S0.copy();
}"
368,"    public Point1S project(final Point1S pt) {
        final BoundaryProjector1S projector = new BoundaryProjector1S(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test37()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(0.0, 0.0, 0.0, (-2.979075673148106), (-2.979075673148106)).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.fromInterval(angularInterval0);
      regionBSPTree1S0.add(angularInterval0);
      regionBSPTree1S0.difference((AbstractRegionBSPTree<Point1S, RegionBSPTree1S.RegionNode1S>) regionBSPTree1S0, (AbstractRegionBSPTree<Point1S, RegionBSPTree1S.RegionNode1S>) regionBSPTree1S0);
      // Undeclared exception!
      try { 
        regionBSPTree1S0.project(point1S0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.partitioning.bsp.AbstractRegionBSPTree$BoundaryProjector"", e);
      }
  }"
369,"    public void transform(final Transform<Point1S> transform) {
        if (!isFull() && !isEmpty()) {
            // transform each interval individually to handle wrap-around
            final List<AngularInterval> intervals = toIntervals();

            setEmpty();

            for (final AngularInterval interval : intervals) {
                union(interval.transform(transform).toTree());
            }
        }
    }","  public void test38()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      AngularInterval angularInterval0 = AngularInterval.of(point1S0, point1S0, precision_DoubleEquivalence0);
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.fromInterval(angularInterval0);
      Transform1S transform1S0 = Transform1S.identity();
      regionBSPTree1S0.transform(transform1S0);
      Point1S point1S1 = regionBSPTree1S0.getCentroid();
}"
370,"    public double getRotation() {
        return rotate;
    }","  public void test0()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(360.0);
      Transform1S transform1S1 = transform1S0.rotate((-669.2711430969));
      boolean boolean0 = transform1S1.equals(transform1S0);
}"
371,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Transform1S)) {
            return false;
        }
        final Transform1S other = (Transform1S) obj;

        return Double.compare(scale, other.scale) == 0 &&
                Double.compare(rotate, other.rotate) == 0;
    }","  public void test1()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(360.0);
      Transform1S transform1S1 = transform1S0.rotate((-669.2711430969));
      boolean boolean0 = transform1S1.equals(transform1S0);
}"
372,"    public double getRotation() {
        return rotate;
    }","  public void test2()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(360.0);
      Transform1S transform1S1 = transform1S0.rotate((-669.2711430969));
      boolean boolean0 = transform1S1.equals(transform1S0);
}"
373,"    public boolean isNegation() {
        return scale <= 0;
    }","  public void test3()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(360.0);
      Transform1S transform1S1 = transform1S0.rotate((-669.2711430969));
      boolean boolean0 = transform1S1.equals(transform1S0);
}"
374,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Transform1S)) {
            return false;
        }
        final Transform1S other = (Transform1S) obj;

        return Double.compare(scale, other.scale) == 0 &&
                Double.compare(rotate, other.rotate) == 0;
    }","  public void test4()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(360.0);
      Transform1S transform1S1 = transform1S0.rotate((-669.2711430969));
      boolean boolean0 = transform1S1.equals(transform1S0);
}"
375,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Transform1S)) {
            return false;
        }
        final Transform1S other = (Transform1S) obj;

        return Double.compare(scale, other.scale) == 0 &&
                Double.compare(rotate, other.rotate) == 0;
    }","  public void test5()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation((-1141.3));
      Transform1S transform1S1 = Transform1S.createNegation();
      boolean boolean0 = transform1S0.equals(transform1S1);
}"
376,"    public boolean preservesOrientation() {
        return !isNegation();
    }","  public void test6()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation((-1141.3));
      Transform1S transform1S1 = Transform1S.createNegation();
      boolean boolean0 = transform1S0.equals(transform1S1);
}"
377,"    public double getRotation() {
        return rotate;
    }","  public void test7()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation((-1141.3));
      Transform1S transform1S1 = Transform1S.createNegation();
      boolean boolean0 = transform1S0.equals(transform1S1);
}"
378,"    public double getRotation() {
        return rotate;
    }","  public void test8()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = Transform1S.createRotation((-105.26));
      Transform1S transform1S2 = transform1S0.premultiply(transform1S1);
      transform1S2.hashCode();
}"
379,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Transform1S)) {
            return false;
        }
        final Transform1S other = (Transform1S) obj;

        return Double.compare(scale, other.scale) == 0 &&
                Double.compare(rotate, other.rotate) == 0;
    }","  public void test9()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = Transform1S.createRotation((-105.26));
      Transform1S transform1S2 = transform1S0.premultiply(transform1S1);
      transform1S2.hashCode();
}"
380,"    public boolean preservesOrientation() {
        return !isNegation();
    }","  public void test10()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = Transform1S.createRotation((-105.26));
      Transform1S transform1S2 = transform1S0.premultiply(transform1S1);
      transform1S2.hashCode();
}"
381,"    public boolean preservesOrientation() {
        return !isNegation();
    }","  public void test11()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = Transform1S.createRotation((-105.26));
      Transform1S transform1S2 = transform1S0.premultiply(transform1S1);
      transform1S2.hashCode();
}"
382,"    public double getRotation() {
        return rotate;
    }","  public void test12()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = Transform1S.createRotation((-105.26));
      Transform1S transform1S2 = transform1S0.premultiply(transform1S1);
      transform1S2.hashCode();
}"
383,"    public boolean isNegation() {
        return scale <= 0;
    }","  public void test13()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(6.283185307179586);
      Transform1S transform1S1 = transform1S0.rotate(Double.NaN);
      Transform1S transform1S2 = transform1S1.inverse();
}"
384,"    public double getRotation() {
        return rotate;
    }","  public void test14()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(6.283185307179586);
      Transform1S transform1S1 = transform1S0.rotate(Double.NaN);
      Transform1S transform1S2 = transform1S1.inverse();
}"
385,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Transform1S)) {
            return false;
        }
        final Transform1S other = (Transform1S) obj;

        return Double.compare(scale, other.scale) == 0 &&
                Double.compare(rotate, other.rotate) == 0;
    }","  public void test15()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(6.283185307179586);
      Transform1S transform1S1 = transform1S0.rotate(Double.NaN);
      Transform1S transform1S2 = transform1S1.inverse();
}"
386,"    public boolean isNegation() {
        return scale <= 0;
    }","  public void test16()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(6.283185307179586);
      Transform1S transform1S1 = transform1S0.rotate(Double.NaN);
      Transform1S transform1S2 = transform1S1.inverse();
}"
387,"    public boolean isNegation() {
        return scale <= 0;
    }","  public void test17()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.rotate((-571.85));
      Point1S point1S0 = Point1S.ZERO;
      Point1S point1S1 = transform1S1.apply(point1S0);
}"
388,"    public Point1S apply(final Point1S pt) {
        final double az = pt.getAzimuth();
        final double resultAz = (az * scale) + rotate;

        return Point1S.of(resultAz);
    }","  public void test18()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.rotate((-571.85));
      Point1S point1S0 = Point1S.ZERO;
      Point1S point1S1 = transform1S1.apply(point1S0);
}"
389,"    public double getRotation() {
        return rotate;
    }","  public void test19()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.negate();
      Transform1S transform1S2 = Transform1S.createRotation(2933.81);
      Transform1S transform1S3 = transform1S2.negate();
      Transform1S transform1S4 = transform1S3.premultiply(transform1S1);
}"
390,"    public boolean isNegation() {
        return scale <= 0;
    }","  public void test20()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.negate();
      Transform1S transform1S2 = Transform1S.createRotation(2933.81);
      Transform1S transform1S3 = transform1S2.negate();
      Transform1S transform1S4 = transform1S3.premultiply(transform1S1);
}"
391,"    public double getRotation() {
        return rotate;
    }","  public void test21()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.negate();
      Transform1S transform1S2 = Transform1S.createRotation(2933.81);
      Transform1S transform1S3 = transform1S2.negate();
      Transform1S transform1S4 = transform1S3.premultiply(transform1S1);
}"
392,"    public boolean isNegation() {
        return scale <= 0;
    }","  public void test22()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.negate();
      Transform1S transform1S2 = Transform1S.createRotation(2933.81);
      Transform1S transform1S3 = transform1S2.negate();
      Transform1S transform1S4 = transform1S3.premultiply(transform1S1);
}"
393,"    public double getRotation() {
        return rotate;
    }","  public void test23()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.negate();
      Transform1S transform1S2 = Transform1S.createRotation(2933.81);
      Transform1S transform1S3 = transform1S2.negate();
      Transform1S transform1S4 = transform1S3.premultiply(transform1S1);
}"
394,"    public double getRotation() {
        return rotate;
    }","  public void test24()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation((-1141.3));
      Transform1S transform1S1 = transform1S0.negate();
}"
395,"    public boolean preservesOrientation() {
        return !isNegation();
    }","  public void test25()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation((-1141.3));
      Transform1S transform1S1 = transform1S0.negate();
}"
396,"    public double getRotation() {
        return rotate;
    }","  public void test26()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation((-1141.3));
      Transform1S transform1S1 = transform1S0.negate();
}"
397,"    public boolean isNegation() {
        return scale <= 0;
    }","  public void test27()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation((-1141.3));
      Transform1S transform1S1 = transform1S0.negate();
}"
398,"    public double getRotation() {
        return rotate;
    }","  public void test28()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.negate();
      Transform1S transform1S2 = Transform1S.createRotation(2933.81);
      Transform1S transform1S3 = transform1S2.premultiply(transform1S1);
      Transform1S transform1S4 = transform1S3.negate();
      Transform1S transform1S5 = transform1S4.rotate(0.0);
}"
399,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Transform1S)) {
            return false;
        }
        final Transform1S other = (Transform1S) obj;

        return Double.compare(scale, other.scale) == 0 &&
                Double.compare(rotate, other.rotate) == 0;
    }","  public void test29()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.negate();
      Transform1S transform1S2 = Transform1S.createRotation(2933.81);
      Transform1S transform1S3 = transform1S2.premultiply(transform1S1);
      Transform1S transform1S4 = transform1S3.negate();
      Transform1S transform1S5 = transform1S4.rotate(0.0);
}"
400,"    public double getRotation() {
        return rotate;
    }","  public void test30()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.negate();
      Transform1S transform1S2 = Transform1S.createRotation(2933.81);
      Transform1S transform1S3 = transform1S2.premultiply(transform1S1);
      Transform1S transform1S4 = transform1S3.negate();
      Transform1S transform1S5 = transform1S4.rotate(0.0);
}"
401,"    public boolean isNegation() {
        return scale <= 0;
    }","  public void test31()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.negate();
      Transform1S transform1S2 = Transform1S.createRotation(2933.81);
      Transform1S transform1S3 = transform1S2.premultiply(transform1S1);
      Transform1S transform1S4 = transform1S3.negate();
      Transform1S transform1S5 = transform1S4.rotate(0.0);
}"
402,"    public double getRotation() {
        return rotate;
    }","  public void test32()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(172.3479921332);
      Transform1S transform1S1 = transform1S0.multiply(transform1S0);
}"
403,"    public double getRotation() {
        return rotate;
    }","  public void test33()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(172.3479921332);
      Transform1S transform1S1 = transform1S0.multiply(transform1S0);
}"
404,"    public boolean isNegation() {
        return scale <= 0;
    }","  public void test34()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(172.3479921332);
      Transform1S transform1S1 = transform1S0.multiply(transform1S0);
}"
405,"    public double getRotation() {
        return rotate;
    }","  public void test35()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.negate();
      Transform1S transform1S2 = Transform1S.createRotation(2933.81);
      Transform1S transform1S3 = transform1S1.negate();
      Transform1S transform1S4 = transform1S3.multiply(transform1S2);
}"
406,"    public boolean isNegation() {
        return scale <= 0;
    }","  public void test36()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.negate();
      Transform1S transform1S2 = Transform1S.createRotation(2933.81);
      Transform1S transform1S3 = transform1S1.negate();
      Transform1S transform1S4 = transform1S3.multiply(transform1S2);
}"
407,"    public double getRotation() {
        return rotate;
    }","  public void test37()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.negate();
      Transform1S transform1S2 = Transform1S.createRotation(2933.81);
      Transform1S transform1S3 = transform1S1.negate();
      Transform1S transform1S4 = transform1S3.multiply(transform1S2);
}"
408,"    public boolean preservesOrientation() {
        return !isNegation();
    }","  public void test38()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.negate();
      Transform1S transform1S2 = Transform1S.createRotation(2933.81);
      Transform1S transform1S3 = transform1S1.negate();
      Transform1S transform1S4 = transform1S3.multiply(transform1S2);
}"
409,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Transform1S)) {
            return false;
        }
        final Transform1S other = (Transform1S) obj;

        return Double.compare(scale, other.scale) == 0 &&
                Double.compare(rotate, other.rotate) == 0;
    }","  public void test39()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.inverse();
}"
410,"    public double getRotation() {
        return rotate;
    }","  public void test40()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(360.0);
      Transform1S transform1S1 = transform1S0.inverse();
}"
411,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Transform1S)) {
            return false;
        }
        final Transform1S other = (Transform1S) obj;

        return Double.compare(scale, other.scale) == 0 &&
                Double.compare(rotate, other.rotate) == 0;
    }","  public void test41()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(360.0);
      Transform1S transform1S1 = transform1S0.inverse();
}"
412,"    public boolean preservesOrientation() {
        return !isNegation();
    }","  public void test42()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(360.0);
      Transform1S transform1S1 = transform1S0.inverse();
}"
413,"    public double getRotation() {
        return rotate;
    }","  public void test43()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.negate();
      Transform1S transform1S2 = Transform1S.createRotation(2933.81);
      Transform1S transform1S3 = transform1S2.premultiply(transform1S1);
      double double0 = transform1S3.getRotation();
}"
414,"    public double getRotation() {
        return rotate;
    }","  public void test44()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.negate();
      Transform1S transform1S2 = Transform1S.createRotation(2933.81);
      Transform1S transform1S3 = transform1S2.premultiply(transform1S1);
      double double0 = transform1S3.getRotation();
}"
415,"    public boolean preservesOrientation() {
        return !isNegation();
    }","  public void test45()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.negate();
      Transform1S transform1S2 = Transform1S.createRotation(2933.81);
      Transform1S transform1S3 = transform1S2.premultiply(transform1S1);
      double double0 = transform1S3.getRotation();
}"
416,"    public double getRotation() {
        return rotate;
    }","  public void test46()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation((-1.0));
      double double0 = transform1S0.getRotation();
}"
417,"    public boolean preservesOrientation() {
        return !isNegation();
    }","  public void test47()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation((-1.0));
      double double0 = transform1S0.getRotation();
}"
418,"    public Point1S apply(final Point1S pt) {
        final double az = pt.getAzimuth();
        final double resultAz = (az * scale) + rotate;

        return Point1S.of(resultAz);
    }","  public void test48()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Point1S point1S0 = Point1S.of(Double.POSITIVE_INFINITY);
      Point1S point1S1 = transform1S0.apply(point1S0);
}"
419,"    public Point1S apply(final Point1S pt) {
        final double az = pt.getAzimuth();
        final double resultAz = (az * scale) + rotate;

        return Point1S.of(resultAz);
    }","  public void test49()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.identity();
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(0.0, 0.0);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = transform1S0.apply(point1S0);
}"
420,"    public Point1S apply(final Point1S pt) {
        final double az = pt.getAzimuth();
        final double resultAz = (az * scale) + rotate;

        return Point1S.of(resultAz);
    }","  public void test50()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Point1S point1S0 = Point1S.NaN;
      Point1S point1S1 = transform1S0.apply(point1S0);
}"
421,"    public Transform1S premultiply(final Transform1S other) {
        return multiply(other, this);
    }","  public void test51()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(0.0);
      // Undeclared exception!
      try { 
        transform1S0.premultiply((Transform1S) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.Transform1S"", e);
      }
  }"
422,"    public Transform1S multiply(final Transform1S other) {
        return multiply(this, other);
    }","  public void test52()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      // Undeclared exception!
      try { 
        transform1S0.multiply((Transform1S) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.Transform1S"", e);
      }
  }"
423,"    public boolean isNegation() {
        return scale <= 0;
    }","  public void test53()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      boolean boolean0 = transform1S0.isNegation();
}"
424,"    public double getRotation() {
        return rotate;
    }","  public void test54()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      double double0 = transform1S0.getRotation();
}"
425,"    public double getRotation() {
        return rotate;
    }","  public void test55()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.premultiply(transform1S0);
}"
426,"    public boolean preservesOrientation() {
        return !isNegation();
    }","  public void test56()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.premultiply(transform1S0);
}"
427,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Transform1S)) {
            return false;
        }
        final Transform1S other = (Transform1S) obj;

        return Double.compare(scale, other.scale) == 0 &&
                Double.compare(rotate, other.rotate) == 0;
    }","  public void test57()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation((-1167.186409868));
      Transform1S transform1S1 = Transform1S.createRotation((-1167.186409868));
      boolean boolean0 = transform1S1.equals(transform1S0);
}"
428,"    public double getRotation() {
        return rotate;
    }","  public void test58()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation((-1167.186409868));
      Transform1S transform1S1 = Transform1S.createRotation((-1167.186409868));
      boolean boolean0 = transform1S1.equals(transform1S0);
}"
429,"    public boolean isNegation() {
        return scale <= 0;
    }","  public void test59()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation((-1167.186409868));
      Transform1S transform1S1 = Transform1S.createRotation((-1167.186409868));
      boolean boolean0 = transform1S1.equals(transform1S0);
}"
430,"    public double getRotation() {
        return rotate;
    }","  public void test60()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(28.94705164807618);
      Transform1S transform1S1 = transform1S0.rotate(28.94705164807618);
      boolean boolean0 = transform1S1.equals(transform1S0);
}"
431,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Transform1S)) {
            return false;
        }
        final Transform1S other = (Transform1S) obj;

        return Double.compare(scale, other.scale) == 0 &&
                Double.compare(rotate, other.rotate) == 0;
    }","  public void test61()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(28.94705164807618);
      Transform1S transform1S1 = transform1S0.rotate(28.94705164807618);
      boolean boolean0 = transform1S1.equals(transform1S0);
}"
432,"    public double getRotation() {
        return rotate;
    }","  public void test62()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(28.94705164807618);
      Transform1S transform1S1 = transform1S0.rotate(28.94705164807618);
      boolean boolean0 = transform1S1.equals(transform1S0);
}"
433,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Transform1S)) {
            return false;
        }
        final Transform1S other = (Transform1S) obj;

        return Double.compare(scale, other.scale) == 0 &&
                Double.compare(rotate, other.rotate) == 0;
    }","  public void test63()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(28.94705164807618);
      Transform1S transform1S1 = transform1S0.rotate(28.94705164807618);
      boolean boolean0 = transform1S1.equals(transform1S0);
}"
434,"    public boolean isNegation() {
        return scale <= 0;
    }","  public void test64()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(28.94705164807618);
      Transform1S transform1S1 = transform1S0.rotate(28.94705164807618);
      boolean boolean0 = transform1S1.equals(transform1S0);
}"
435,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Transform1S)) {
            return false;
        }
        final Transform1S other = (Transform1S) obj;

        return Double.compare(scale, other.scale) == 0 &&
                Double.compare(rotate, other.rotate) == 0;
    }","  public void test65()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(28.94705164807618);
      boolean boolean0 = transform1S0.equals(transform1S0);
}"
436,"    public double getRotation() {
        return rotate;
    }","  public void test66()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(28.94705164807618);
      boolean boolean0 = transform1S0.equals(transform1S0);
}"
437,"    public boolean isNegation() {
        return scale <= 0;
    }","  public void test67()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(28.94705164807618);
      boolean boolean0 = transform1S0.equals(transform1S0);
}"
438,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Transform1S)) {
            return false;
        }
        final Transform1S other = (Transform1S) obj;

        return Double.compare(scale, other.scale) == 0 &&
                Double.compare(rotate, other.rotate) == 0;
    }","  public void test68()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Object object0 = new Object();
      boolean boolean0 = transform1S0.equals(object0);
}"
439,"    public boolean preservesOrientation() {
        return !isNegation();
    }","  public void test69()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.identity();
      boolean boolean0 = transform1S0.preservesOrientation();
}"
440,"    public boolean preservesOrientation() {
        return !isNegation();
    }","  public void test70()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      boolean boolean0 = transform1S0.preservesOrientation();
}"
441,"    public boolean isNegation() {
        return scale <= 0;
    }","  public void test71()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(2933.81);
      boolean boolean0 = transform1S0.isNegation();
}"
442,"    public double getRotation() {
        return rotate;
    }","  public void test72()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createRotation(2933.81);
      boolean boolean0 = transform1S0.isNegation();
}"
443,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Transform1S)) {
            return false;
        }
        final Transform1S other = (Transform1S) obj;

        return Double.compare(scale, other.scale) == 0 &&
                Double.compare(rotate, other.rotate) == 0;
    }","  public void test73()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.identity();
      Transform1S transform1S1 = transform1S0.multiply(transform1S0);
}"
444,"    public Point1S apply(final Point1S pt) {
        final double az = pt.getAzimuth();
        final double resultAz = (az * scale) + rotate;

        return Point1S.of(resultAz);
    }","  public void test74()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.identity();
      // Undeclared exception!
      try { 
        transform1S0.apply((Point1S) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.Transform1S"", e);
      }
  }"
445,"    public double getRotation() {
        return rotate;
    }","  public void test75()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.negate();
      boolean boolean0 = transform1S0.equals(transform1S1);
}"
446,"    public boolean isNegation() {
        return scale <= 0;
    }","  public void test76()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.negate();
      boolean boolean0 = transform1S0.equals(transform1S1);
}"
447,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Transform1S)) {
            return false;
        }
        final Transform1S other = (Transform1S) obj;

        return Double.compare(scale, other.scale) == 0 &&
                Double.compare(rotate, other.rotate) == 0;
    }","  public void test77()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.negate();
      boolean boolean0 = transform1S0.equals(transform1S1);
}"
448,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Transform1S)) {
            return false;
        }
        final Transform1S other = (Transform1S) obj;

        return Double.compare(scale, other.scale) == 0 &&
                Double.compare(rotate, other.rotate) == 0;
    }","  public void test78()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.negate();
      boolean boolean0 = transform1S0.equals(transform1S1);
}"
449,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Transform1S)) {
            return false;
        }
        final Transform1S other = (Transform1S) obj;

        return Double.compare(scale, other.scale) == 0 &&
                Double.compare(rotate, other.rotate) == 0;
    }","  public void test79()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      Transform1S transform1S1 = transform1S0.rotate(0.0);
}"
450,"    public String toString() {
        final StringBuilder sb = new StringBuilder();

        sb.append(this.getClass().getSimpleName())
            .append(""[negate= "")
            .append(isNegation())
            .append("", rotate= "")
            .append(getRotation())
            .append(']');

        return sb.toString();
    }","  public void test80()  throws Throwable  {
      Transform1S transform1S0 = Transform1S.createNegation();
      String string0 = transform1S0.toString();
}"
451,"    public static CutAngle fromPointAndDirection(final Point1S point, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return new CutAngle(point, positiveFacing, precision);
    }","  public void test0()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(6.283185307179586);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      CutAngle cutAngle0 = CutAngles.fromPointAndDirection(point1S0, true, (Precision.DoubleEquivalence) null);
}"
452,"    public static CutAngle fromPointAndDirection(final Point1S point, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return new CutAngle(point, positiveFacing, precision);
    }","  public void test1()  throws Throwable  {
      Point1S point1S0 = Point1S.of(0.0);
      CutAngle cutAngle0 = CutAngles.fromPointAndDirection(point1S0, false, (Precision.DoubleEquivalence) null);
}"
453,"    public static CutAngle fromPointAndDirection(final Point1S point, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return new CutAngle(point, positiveFacing, precision);
    }","  public void test2()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      CutAngle cutAngle0 = CutAngles.fromPointAndDirection(point1S0, false, (Precision.DoubleEquivalence) null);
}"
454,"    public static CutAngle fromAzimuthAndDirection(final double azimuth, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return fromPointAndDirection(Point1S.of(azimuth), positiveFacing, precision);
    }","  public void test3()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.fromAzimuthAndDirection((-1038.0), false, (Precision.DoubleEquivalence) null);
}"
455,"    public static CutAngle fromAzimuthAndDirection(final double azimuth, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return fromPointAndDirection(Point1S.of(azimuth), positiveFacing, precision);
    }","  public void test4()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.fromAzimuthAndDirection((-1038.0), false, (Precision.DoubleEquivalence) null);
}"
456,"    public static CutAngle fromAzimuthAndDirection(final double azimuth, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return fromPointAndDirection(Point1S.of(azimuth), positiveFacing, precision);
    }","  public void test5()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.fromAzimuthAndDirection(6.283185307179586, false, (Precision.DoubleEquivalence) null);
}"
457,"    public static CutAngle fromAzimuthAndDirection(final double azimuth, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return fromPointAndDirection(Point1S.of(azimuth), positiveFacing, precision);
    }","  public void test6()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.fromAzimuthAndDirection(6.283185307179586, false, (Precision.DoubleEquivalence) null);
}"
458,"    public static CutAngle fromAzimuthAndDirection(final double azimuth, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return fromPointAndDirection(Point1S.of(azimuth), positiveFacing, precision);
    }","  public void test7()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.fromAzimuthAndDirection(Double.NEGATIVE_INFINITY, false, (Precision.DoubleEquivalence) null);
}"
459,"    public static CutAngle fromAzimuthAndDirection(final double azimuth, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return fromPointAndDirection(Point1S.of(azimuth), positiveFacing, precision);
    }","  public void test8()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.fromAzimuthAndDirection(Double.NEGATIVE_INFINITY, false, (Precision.DoubleEquivalence) null);
}"
460,"    public static CutAngle createPositiveFacing(final double azimuth, final Precision.DoubleEquivalence precision) {
        return createPositiveFacing(Point1S.of(azimuth), precision);
    }","  public void test9()  throws Throwable  {
      Point1S point1S0 = Point1S.of(Double.NEGATIVE_INFINITY);
      CutAngle cutAngle0 = CutAngles.createPositiveFacing(point1S0, (Precision.DoubleEquivalence) null);
}"
461,"    public static CutAngle createPositiveFacing(final double azimuth, final Precision.DoubleEquivalence precision) {
        return createPositiveFacing(Point1S.of(azimuth), precision);
    }","  public void test10()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(0.6, 0.0);
      Point1S point1S0 = Point1S.from((Vector2D) vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = CutAngles.createPositiveFacing(point1S0, precision_DoubleEquivalence0);
}"
462,"    public static CutAngle createPositiveFacing(final double azimuth, final Precision.DoubleEquivalence precision) {
        return createPositiveFacing(Point1S.of(azimuth), precision);
    }","  public void test11()  throws Throwable  {
      Point1S point1S0 = Point1S.of((-1.0));
      CutAngle cutAngle0 = CutAngles.createPositiveFacing(point1S0, (Precision.DoubleEquivalence) null);
}"
463,"    public static CutAngle createPositiveFacing(final double azimuth, final Precision.DoubleEquivalence precision) {
        return createPositiveFacing(Point1S.of(azimuth), precision);
    }","  public void test12()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createPositiveFacing(Double.NEGATIVE_INFINITY, (Precision.DoubleEquivalence) null);
}"
464,"    public static CutAngle createPositiveFacing(final double azimuth, final Precision.DoubleEquivalence precision) {
        return createPositiveFacing(Point1S.of(azimuth), precision);
    }","  public void test13()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createPositiveFacing(Double.NEGATIVE_INFINITY, (Precision.DoubleEquivalence) null);
}"
465,"    public static CutAngle createPositiveFacing(final double azimuth, final Precision.DoubleEquivalence precision) {
        return createPositiveFacing(Point1S.of(azimuth), precision);
    }","  public void test14()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createPositiveFacing(6.283185307179586, (Precision.DoubleEquivalence) null);
}"
466,"    public static CutAngle createPositiveFacing(final double azimuth, final Precision.DoubleEquivalence precision) {
        return createPositiveFacing(Point1S.of(azimuth), precision);
    }","  public void test15()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createPositiveFacing(6.283185307179586, (Precision.DoubleEquivalence) null);
}"
467,"    public static CutAngle createPositiveFacing(final double azimuth, final Precision.DoubleEquivalence precision) {
        return createPositiveFacing(Point1S.of(azimuth), precision);
    }","  public void test16()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createPositiveFacing((-4948.84918513), (Precision.DoubleEquivalence) null);
}"
468,"    public static CutAngle createPositiveFacing(final double azimuth, final Precision.DoubleEquivalence precision) {
        return createPositiveFacing(Point1S.of(azimuth), precision);
    }","  public void test17()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createPositiveFacing((-4948.84918513), (Precision.DoubleEquivalence) null);
}"
469,"    public static CutAngle createNegativeFacing(final double azimuth, final Precision.DoubleEquivalence precision) {
        return createNegativeFacing(Point1S.of(azimuth), precision);
    }","  public void test18()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.ZERO;
      Angle.Turn angle_Turn0 = angle_Deg0.toTurn();
      Angle.Rad angle_Rad0 = angle_Turn0.toRad();
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      CutAngle cutAngle0 = CutAngles.createNegativeFacing(point1S0, (Precision.DoubleEquivalence) null);
}"
470,"    public static CutAngle createNegativeFacing(final double azimuth, final Precision.DoubleEquivalence precision) {
        return createNegativeFacing(Point1S.of(azimuth), precision);
    }","  public void test19()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      CutAngle cutAngle0 = CutAngles.createNegativeFacing(point1S0, (Precision.DoubleEquivalence) null);
}"
471,"    public static CutAngle createNegativeFacing(final double azimuth, final Precision.DoubleEquivalence precision) {
        return createNegativeFacing(Point1S.of(azimuth), precision);
    }","  public void test20()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createNegativeFacing(Double.NEGATIVE_INFINITY, (Precision.DoubleEquivalence) null);
}"
472,"    public static CutAngle createNegativeFacing(final double azimuth, final Precision.DoubleEquivalence precision) {
        return createNegativeFacing(Point1S.of(azimuth), precision);
    }","  public void test21()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createNegativeFacing(Double.NEGATIVE_INFINITY, (Precision.DoubleEquivalence) null);
}"
473,"    public static CutAngle createNegativeFacing(final double azimuth, final Precision.DoubleEquivalence precision) {
        return createNegativeFacing(Point1S.of(azimuth), precision);
    }","  public void test22()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createNegativeFacing(598.6213745197335, (Precision.DoubleEquivalence) null);
}"
474,"    public static CutAngle createNegativeFacing(final double azimuth, final Precision.DoubleEquivalence precision) {
        return createNegativeFacing(Point1S.of(azimuth), precision);
    }","  public void test23()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createNegativeFacing(598.6213745197335, (Precision.DoubleEquivalence) null);
}"
475,"    public static CutAngle createPositiveFacing(final double azimuth, final Precision.DoubleEquivalence precision) {
        return createPositiveFacing(Point1S.of(azimuth), precision);
    }","  public void test24()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      CutAngle cutAngle0 = CutAngles.createPositiveFacing(point1S0, (Precision.DoubleEquivalence) null);
}"
476,"    public static CutAngle createNegativeFacing(final double azimuth, final Precision.DoubleEquivalence precision) {
        return createNegativeFacing(Point1S.of(azimuth), precision);
    }","  public void test25()  throws Throwable  {
      Point1S point1S0 = Point1S.of(Double.NEGATIVE_INFINITY);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = CutAngles.createNegativeFacing(point1S0, precision_DoubleEquivalence0);
}"
477,"    public static CutAngle fromPointAndDirection(final Point1S point, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return new CutAngle(point, positiveFacing, precision);
    }","  public void test26()  throws Throwable  {
      Point1S point1S0 = Point1S.of(Double.NEGATIVE_INFINITY);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = CutAngles.fromPointAndDirection(point1S0, false, precision_DoubleEquivalence0);
}"
478,"    public static CutAngle fromAzimuthAndDirection(final double azimuth, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return fromPointAndDirection(Point1S.of(azimuth), positiveFacing, precision);
    }","  public void test27()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.fromAzimuthAndDirection(0.0, true, (Precision.DoubleEquivalence) null);
}"
479,"    public static CutAngle fromAzimuthAndDirection(final double azimuth, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return fromPointAndDirection(Point1S.of(azimuth), positiveFacing, precision);
    }","  public void test28()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.fromAzimuthAndDirection(0.0, true, (Precision.DoubleEquivalence) null);
}"
480,"    public static CutAngle createNegativeFacing(final double azimuth, final Precision.DoubleEquivalence precision) {
        return createNegativeFacing(Point1S.of(azimuth), precision);
    }","  public void test29()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createNegativeFacing(0.0, (Precision.DoubleEquivalence) null);
}"
481,"    public static CutAngle createNegativeFacing(final double azimuth, final Precision.DoubleEquivalence precision) {
        return createNegativeFacing(Point1S.of(azimuth), precision);
    }","  public void test30()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createNegativeFacing(0.0, (Precision.DoubleEquivalence) null);
}"
482,"    public static CutAngle createPositiveFacing(final double azimuth, final Precision.DoubleEquivalence precision) {
        return createPositiveFacing(Point1S.of(azimuth), precision);
    }","  public void test31()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createPositiveFacing(0.0, (Precision.DoubleEquivalence) null);
}"
483,"    public static CutAngle createPositiveFacing(final double azimuth, final Precision.DoubleEquivalence precision) {
        return createPositiveFacing(Point1S.of(azimuth), precision);
    }","  public void test32()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createPositiveFacing(0.0, (Precision.DoubleEquivalence) null);
}"
484,"    protected abstract boolean isBetterAngle(double newAngle, double previousAngle);

    /** Convenience method for connecting a set of arcs with interior angles maximized
     * when possible. This method is equivalent to {@code new Maximize().connect(segments)}","  public void test0()  throws Throwable  {
      InteriorAngleGreatArcConnector.Minimize interiorAngleGreatArcConnector_Minimize0 = new InteriorAngleGreatArcConnector.Minimize();
      boolean boolean0 = interiorAngleGreatArcConnector_Minimize0.isBetterAngle(4599.01562287, 281.43);
}"
485,"    protected abstract boolean isBetterAngle(double newAngle, double previousAngle);

    /** Convenience method for connecting a set of arcs with interior angles maximized
     * when possible. This method is equivalent to {@code new Maximize().connect(segments)}","  public void test1()  throws Throwable  {
      InteriorAngleGreatArcConnector.Maximize interiorAngleGreatArcConnector_Maximize0 = new InteriorAngleGreatArcConnector.Maximize();
      boolean boolean0 = interiorAngleGreatArcConnector_Maximize0.isBetterAngle((-2195.36288), 2737);
}"
486,"    protected ConnectableGreatArc selectConnection(final ConnectableGreatArc incoming,
            final List<ConnectableGreatArc> outgoing) {

        // search for the best connection
        final GreatCircle circle = incoming.getArc().getCircle();

        double selectedInteriorAngle = Double.POSITIVE_INFINITY;
        ConnectableGreatArc selected = null;

        for (final ConnectableGreatArc candidate : outgoing) {
            final double interiorAngle = Math.PI - circle.angle(candidate.getArc().getCircle(),
                    incoming.getArc().getEndPoint());

            if (selected == null || isBetterAngle(interiorAngle, selectedInteriorAngle)) {
                selectedInteriorAngle = interiorAngle;
                selected = candidate;
            }
        }

        return selected;
    }","  public void test2()  throws Throwable  {
      InteriorAngleGreatArcConnector.Minimize interiorAngleGreatArcConnector_Minimize0 = new InteriorAngleGreatArcConnector.Minimize();
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = new GreatArc((GreatCircle) null, angularInterval_Convex0);
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc(greatArc0);
      Vector<AbstractGreatArcConnector.ConnectableGreatArc> vector0 = new Vector<AbstractGreatArcConnector.ConnectableGreatArc>();
      vector0.add(abstractGreatArcConnector_ConnectableGreatArc0);
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc1 = new AbstractGreatArcConnector.ConnectableGreatArc(greatArc0);
      // Undeclared exception!
      try { 
        interiorAngleGreatArcConnector_Minimize0.selectConnection(abstractGreatArcConnector_ConnectableGreatArc1, vector0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.InteriorAngleGreatArcConnector"", e);
      }
  }"
487,"    public static List<GreatArcPath> connectMinimized(final Collection<GreatArc> arcs) {
        return new Minimize().connectAll(arcs);
    }","  public void test3()  throws Throwable  {
      ArrayDeque<GreatArc> arrayDeque0 = new ArrayDeque<GreatArc>();
      List<GreatArcPath> list0 = InteriorAngleGreatArcConnector.connectMinimized(arrayDeque0);
}"
488,"    public static List<GreatArcPath> connectMinimized(final Collection<GreatArc> arcs) {
        return new Minimize().connectAll(arcs);
    }","  public void test4()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      List<GreatArc> list0 = greatArc0.toConvex();
      List<GreatArcPath> list1 = InteriorAngleGreatArcConnector.connectMinimized(list0);
}"
489,"    public static List<GreatArcPath> connectMaximized(final Collection<GreatArc> arcs) {
        return new Maximize().connectAll(arcs);
    }","  public void test5()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(1636.87441618, (-24.682593978311), 281.43);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = new GreatArc(greatCircle0, angularInterval_Convex0);
      List<GreatArc> list0 = greatArc0.toConvex();
      List<GreatArcPath> list1 = InteriorAngleGreatArcConnector.connectMaximized(list0);
}"
490,"    public static List<GreatArcPath> connectMinimized(final Collection<GreatArc> arcs) {
        return new Minimize().connectAll(arcs);
    }","  public void test6()  throws Throwable  {
      Vector<GreatArc> vector0 = new Vector<GreatArc>();
      List<GreatArc> list0 = vector0.subList(0, 0);
      vector0.clear();
      // Undeclared exception!
      try { 
        InteriorAngleGreatArcConnector.connectMinimized(list0);
        fail(""Expecting exception: ConcurrentModificationException"");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.SubList"", e);
      }
  }"
491,"    public static List<GreatArcPath> connectMaximized(final Collection<GreatArc> arcs) {
        return new Maximize().connectAll(arcs);
    }","  public void test7()  throws Throwable  {
      Vector<GreatArc> vector0 = new Vector<GreatArc>();
      List<GreatArc> list0 = vector0.subList(0, 0);
      vector0.clear();
      // Undeclared exception!
      try { 
        InteriorAngleGreatArcConnector.connectMaximized(list0);
        fail(""Expecting exception: ConcurrentModificationException"");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.SubList"", e);
      }
  }"
492,"    public static List<GreatArcPath> connectMaximized(final Collection<GreatArc> arcs) {
        return new Maximize().connectAll(arcs);
    }","  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        InteriorAngleGreatArcConnector.connectMaximized((Collection<GreatArc>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.AbstractGreatArcConnector"", e);
      }
  }"
493,"    protected abstract boolean isBetterAngle(double newAngle, double previousAngle);

    /** Convenience method for connecting a set of arcs with interior angles maximized
     * when possible. This method is equivalent to {@code new Maximize().connect(segments)}","  public void test9()  throws Throwable  {
      InteriorAngleGreatArcConnector.Minimize interiorAngleGreatArcConnector_Minimize0 = new InteriorAngleGreatArcConnector.Minimize();
      boolean boolean0 = interiorAngleGreatArcConnector_Minimize0.isBetterAngle((-1.0), 0.0);
}"
494,"    protected abstract boolean isBetterAngle(double newAngle, double previousAngle);

    /** Convenience method for connecting a set of arcs with interior angles maximized
     * when possible. This method is equivalent to {@code new Maximize().connect(segments)}","  public void test10()  throws Throwable  {
      InteriorAngleGreatArcConnector.Minimize interiorAngleGreatArcConnector_Minimize0 = new InteriorAngleGreatArcConnector.Minimize();
      boolean boolean0 = interiorAngleGreatArcConnector_Minimize0.isBetterAngle(0.0, 0.0);
}"
495,"    protected abstract boolean isBetterAngle(double newAngle, double previousAngle);

    /** Convenience method for connecting a set of arcs with interior angles maximized
     * when possible. This method is equivalent to {@code new Maximize().connect(segments)}","  public void test11()  throws Throwable  {
      InteriorAngleGreatArcConnector.Maximize interiorAngleGreatArcConnector_Maximize0 = new InteriorAngleGreatArcConnector.Maximize();
      boolean boolean0 = interiorAngleGreatArcConnector_Maximize0.isBetterAngle(4599.01562287, 843);
}"
496,"    protected ConnectableGreatArc selectConnection(final ConnectableGreatArc incoming,
            final List<ConnectableGreatArc> outgoing) {

        // search for the best connection
        final GreatCircle circle = incoming.getArc().getCircle();

        double selectedInteriorAngle = Double.POSITIVE_INFINITY;
        ConnectableGreatArc selected = null;

        for (final ConnectableGreatArc candidate : outgoing) {
            final double interiorAngle = Math.PI - circle.angle(candidate.getArc().getCircle(),
                    incoming.getArc().getEndPoint());

            if (selected == null || isBetterAngle(interiorAngle, selectedInteriorAngle)) {
                selectedInteriorAngle = interiorAngle;
                selected = candidate;
            }
        }

        return selected;
    }","  public void test12()  throws Throwable  {
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = new GreatArc((GreatCircle) null, angularInterval_Convex0);
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc(greatArc0);
      InteriorAngleGreatArcConnector.Maximize interiorAngleGreatArcConnector_Maximize0 = new InteriorAngleGreatArcConnector.Maximize();
      ArrayList<AbstractGreatArcConnector.ConnectableGreatArc> arrayList0 = new ArrayList<AbstractGreatArcConnector.ConnectableGreatArc>();
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc1 = interiorAngleGreatArcConnector_Maximize0.selectConnection(abstractGreatArcConnector_ConnectableGreatArc0, arrayList0);
}"
497,"    public static List<GreatArcPath> connectMaximized(final Collection<GreatArc> arcs) {
        return new Maximize().connectAll(arcs);
    }","  public void test13()  throws Throwable  {
      LinkedHashSet<GreatArc> linkedHashSet0 = new LinkedHashSet<GreatArc>();
      List<GreatArcPath> list0 = InteriorAngleGreatArcConnector.connectMaximized(linkedHashSet0);
}"
498,"    public static List<GreatArcPath> connectMinimized(final Collection<GreatArc> arcs) {
        return new Minimize().connectAll(arcs);
    }","  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        InteriorAngleGreatArcConnector.connectMinimized((Collection<GreatArc>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.AbstractGreatArcConnector"", e);
      }
  }"
499,"    protected abstract boolean isBetterAngle(double newAngle, double previousAngle);

    /** Convenience method for connecting a set of arcs with interior angles maximized
     * when possible. This method is equivalent to {@code new Maximize().connect(segments)}","  public void test15()  throws Throwable  {
      InteriorAngleGreatArcConnector.Maximize interiorAngleGreatArcConnector_Maximize0 = new InteriorAngleGreatArcConnector.Maximize();
      boolean boolean0 = interiorAngleGreatArcConnector_Maximize0.isBetterAngle(843, 843);
}"
500,"    public static ConvexArea2S fromVertexLoop(final Collection<Point2S> vertices,
            final Precision.DoubleEquivalence precision) {
        return fromVertices(vertices, true, precision);
    }","  public void test0()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-789.0), (-2245.4885523), (-789.0));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Point2S point2S0 = Point2S.MINUS_J;
      Point2S point2S1 = greatCircle0.getPolePoint();
      arrayDeque0.add(point2S0);
      arrayDeque0.offerFirst(point2S1);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      // Undeclared exception!
      try { 
        ConvexArea2S.fromVertexLoop(arrayDeque0, precision_DoubleEquivalence1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
501,"    public static ConvexArea2S fromVertices(final Collection<Point2S> vertices,
            final Precision.DoubleEquivalence precision) {
        return fromVertices(vertices, false, precision);
    }","  public void test1()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>();
      Point2S point2S0 = Point2S.MINUS_K;
      arrayDeque0.add(point2S0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Point2S point2S1 = Point2S.MINUS_J;
      arrayDeque0.addLast(point2S1);
      arrayDeque0.add(point2S1);
      // Undeclared exception!
      try { 
        ConvexArea2S.fromVertices((Collection<Point2S>) arrayDeque0, true, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
502,"    public GreatArc trim(final HyperplaneConvexSubset<Point2S> sub) {
        return (GreatArc) super.trim(sub);
    }","  public void test2()  throws Throwable  {
      ConvexArea2S convexArea2S0 = ConvexArea2S.full();
      GreatArc greatArc0 = convexArea2S0.trim((HyperplaneConvexSubset<Point2S>) null);
}"
503,"    public ConvexArea2S transform(final Transform<Point2S> transform) {
        return transformInternal(transform, this, GreatArc.class, ConvexArea2S::new);
    }","  public void test3()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-774.0041836789327), (-774.0041836789327), (-774.0041836789327));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, true, true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Point2S point2S0 = Point2S.MINUS_J;
      Point2S point2S1 = Point2S.PLUS_I;
      arrayDeque0.push(point2S0);
      arrayDeque0.add(point2S0);
      arrayDeque0.offerFirst(point2S1);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromVertexLoop(arrayDeque0, precision_DoubleEquivalence1);
      Transform2S transform2S0 = Transform2S.identity();
      ConvexArea2S convexArea2S1 = convexArea2S0.transform(transform2S0);
}"
504,"    Vector3D getWeightedCentroidVector() {
        final List<GreatArc> arcs = getBoundaries();
        final int numBoundaries = arcs.size();

        switch (numBoundaries) {
        case 0:
            // full space; no centroid
            return null;
        case 1:
            // hemisphere
            return computeHemisphereWeightedCentroidVector(arcs.get(0));
        case 2:
            // lune
            return computeLuneWeightedCentroidVector(arcs.get(0), arcs.get(1));
        default:
            // triangle or other convex polygon
            if (getBoundarySize() < TRIANGLE_FAN_CENTROID_COMPUTE_THRESHOLD) {
                return computeTriangleFanWeightedCentroidVector(arcs);
            }

            return computeArcPoleWeightedCentroidVector(arcs);
        }
    }","  public void test4()  throws Throwable  {
      ConvexArea2S convexArea2S0 = ConvexArea2S.full();
      Vector3D vector3D0 = convexArea2S0.getWeightedCentroidVector();
}"
505,"    Vector3D getWeightedCentroidVector() {
        final List<GreatArc> arcs = getBoundaries();
        final int numBoundaries = arcs.size();

        switch (numBoundaries) {
        case 0:
            // full space; no centroid
            return null;
        case 1:
            // hemisphere
            return computeHemisphereWeightedCentroidVector(arcs.get(0));
        case 2:
            // lune
            return computeLuneWeightedCentroidVector(arcs.get(0), arcs.get(1));
        default:
            // triangle or other convex polygon
            if (getBoundarySize() < TRIANGLE_FAN_CENTROID_COMPUTE_THRESHOLD) {
                return computeTriangleFanWeightedCentroidVector(arcs);
            }

            return computeArcPoleWeightedCentroidVector(arcs);
        }
    }","  public void test5()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(1829.439071231221, 1829.439071231221, 1829.439071231221);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Point2S point2S0 = Point2S.MINUS_J;
      Point2S point2S1 = greatCircle0.getPolePoint();
      arrayDeque0.push(point2S0);
      arrayDeque0.offerFirst(point2S1);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromVertexLoop(arrayDeque0, precision_DoubleEquivalence1);
      Vector3D vector3D0 = convexArea2S0.getWeightedCentroidVector();
}"
506,"    Vector3D getWeightedCentroidVector() {
        final List<GreatArc> arcs = getBoundaries();
        final int numBoundaries = arcs.size();

        switch (numBoundaries) {
        case 0:
            // full space; no centroid
            return null;
        case 1:
            // hemisphere
            return computeHemisphereWeightedCentroidVector(arcs.get(0));
        case 2:
            // lune
            return computeLuneWeightedCentroidVector(arcs.get(0), arcs.get(1));
        default:
            // triangle or other convex polygon
            if (getBoundarySize() < TRIANGLE_FAN_CENTROID_COMPUTE_THRESHOLD) {
                return computeTriangleFanWeightedCentroidVector(arcs);
            }

            return computeArcPoleWeightedCentroidVector(arcs);
        }
    }","  public void test6()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(1829.439071231221, 1829.439071231221, 1829.439071231221);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Point2S point2S0 = Point2S.MINUS_J;
      Point2S point2S1 = greatCircle0.getPolePoint();
      arrayDeque0.push(point2S0);
      arrayDeque0.offerFirst(point2S1);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromVertexLoop(arrayDeque0, precision_DoubleEquivalence1);
      Vector3D vector3D0 = convexArea2S0.getWeightedCentroidVector();
}"
507,"    Vector3D getWeightedCentroidVector() {
        final List<GreatArc> arcs = getBoundaries();
        final int numBoundaries = arcs.size();

        switch (numBoundaries) {
        case 0:
            // full space; no centroid
            return null;
        case 1:
            // hemisphere
            return computeHemisphereWeightedCentroidVector(arcs.get(0));
        case 2:
            // lune
            return computeLuneWeightedCentroidVector(arcs.get(0), arcs.get(1));
        default:
            // triangle or other convex polygon
            if (getBoundarySize() < TRIANGLE_FAN_CENTROID_COMPUTE_THRESHOLD) {
                return computeTriangleFanWeightedCentroidVector(arcs);
            }

            return computeArcPoleWeightedCentroidVector(arcs);
        }
    }","  public void test7()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Stack<GreatCircle> stack0 = new Stack<GreatCircle>();
      stack0.add(greatCircle0);
      ArrayDeque<GreatCircle> arrayDeque0 = new ArrayDeque<GreatCircle>(stack0);
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromBounds((Iterable<GreatCircle>) arrayDeque0);
      Vector3D vector3D0 = convexArea2S0.getWeightedCentroidVector();
}"
508,"    Vector3D getWeightedCentroidVector() {
        final List<GreatArc> arcs = getBoundaries();
        final int numBoundaries = arcs.size();

        switch (numBoundaries) {
        case 0:
            // full space; no centroid
            return null;
        case 1:
            // hemisphere
            return computeHemisphereWeightedCentroidVector(arcs.get(0));
        case 2:
            // lune
            return computeLuneWeightedCentroidVector(arcs.get(0), arcs.get(1));
        default:
            // triangle or other convex polygon
            if (getBoundarySize() < TRIANGLE_FAN_CENTROID_COMPUTE_THRESHOLD) {
                return computeTriangleFanWeightedCentroidVector(arcs);
            }

            return computeArcPoleWeightedCentroidVector(arcs);
        }
    }","  public void test8()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Stack<GreatCircle> stack0 = new Stack<GreatCircle>();
      stack0.add(greatCircle0);
      ArrayDeque<GreatCircle> arrayDeque0 = new ArrayDeque<GreatCircle>(stack0);
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromBounds((Iterable<GreatCircle>) arrayDeque0);
      Vector3D vector3D0 = convexArea2S0.getWeightedCentroidVector();
}"
509,"    Vector3D getWeightedCentroidVector() {
        final List<GreatArc> arcs = getBoundaries();
        final int numBoundaries = arcs.size();

        switch (numBoundaries) {
        case 0:
            // full space; no centroid
            return null;
        case 1:
            // hemisphere
            return computeHemisphereWeightedCentroidVector(arcs.get(0));
        case 2:
            // lune
            return computeLuneWeightedCentroidVector(arcs.get(0), arcs.get(1));
        default:
            // triangle or other convex polygon
            if (getBoundarySize() < TRIANGLE_FAN_CENTROID_COMPUTE_THRESHOLD) {
                return computeTriangleFanWeightedCentroidVector(arcs);
            }

            return computeArcPoleWeightedCentroidVector(arcs);
        }
    }","  public void test9()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatCircle[] greatCircleArray0 = new GreatCircle[1];
      greatCircleArray0[0] = greatCircle0;
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromBounds(greatCircleArray0);
      Vector3D vector3D0 = convexArea2S0.getWeightedCentroidVector();
}"
510,"    Vector3D getWeightedCentroidVector() {
        final List<GreatArc> arcs = getBoundaries();
        final int numBoundaries = arcs.size();

        switch (numBoundaries) {
        case 0:
            // full space; no centroid
            return null;
        case 1:
            // hemisphere
            return computeHemisphereWeightedCentroidVector(arcs.get(0));
        case 2:
            // lune
            return computeLuneWeightedCentroidVector(arcs.get(0), arcs.get(1));
        default:
            // triangle or other convex polygon
            if (getBoundarySize() < TRIANGLE_FAN_CENTROID_COMPUTE_THRESHOLD) {
                return computeTriangleFanWeightedCentroidVector(arcs);
            }

            return computeArcPoleWeightedCentroidVector(arcs);
        }
    }","  public void test10()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatCircle[] greatCircleArray0 = new GreatCircle[1];
      greatCircleArray0[0] = greatCircle0;
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromBounds(greatCircleArray0);
      Vector3D vector3D0 = convexArea2S0.getWeightedCentroidVector();
}"
511,"    Vector3D getWeightedCentroidVector() {
        final List<GreatArc> arcs = getBoundaries();
        final int numBoundaries = arcs.size();

        switch (numBoundaries) {
        case 0:
            // full space; no centroid
            return null;
        case 1:
            // hemisphere
            return computeHemisphereWeightedCentroidVector(arcs.get(0));
        case 2:
            // lune
            return computeLuneWeightedCentroidVector(arcs.get(0), arcs.get(1));
        default:
            // triangle or other convex polygon
            if (getBoundarySize() < TRIANGLE_FAN_CENTROID_COMPUTE_THRESHOLD) {
                return computeTriangleFanWeightedCentroidVector(arcs);
            }

            return computeArcPoleWeightedCentroidVector(arcs);
        }
    }","  public void test11()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-789.0), (-2245.4885523), (-789.0));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Point2S point2S0 = Point2S.MINUS_J;
      Point2S point2S1 = greatCircle0.getPolePoint();
      arrayDeque0.push(point2S0);
      arrayDeque0.offerFirst(point2S1);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromVertexLoop(arrayDeque0, precision_DoubleEquivalence1);
      Vector3D vector3D0 = convexArea2S0.getWeightedCentroidVector();
}"
512,"    Vector3D getWeightedCentroidVector() {
        final List<GreatArc> arcs = getBoundaries();
        final int numBoundaries = arcs.size();

        switch (numBoundaries) {
        case 0:
            // full space; no centroid
            return null;
        case 1:
            // hemisphere
            return computeHemisphereWeightedCentroidVector(arcs.get(0));
        case 2:
            // lune
            return computeLuneWeightedCentroidVector(arcs.get(0), arcs.get(1));
        default:
            // triangle or other convex polygon
            if (getBoundarySize() < TRIANGLE_FAN_CENTROID_COMPUTE_THRESHOLD) {
                return computeTriangleFanWeightedCentroidVector(arcs);
            }

            return computeArcPoleWeightedCentroidVector(arcs);
        }
    }","  public void test12()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-789.0), (-2245.4885523), (-789.0));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Point2S point2S0 = Point2S.MINUS_J;
      Point2S point2S1 = greatCircle0.getPolePoint();
      arrayDeque0.push(point2S0);
      arrayDeque0.offerFirst(point2S1);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromVertexLoop(arrayDeque0, precision_DoubleEquivalence1);
      Vector3D vector3D0 = convexArea2S0.getWeightedCentroidVector();
}"
513,"    public Point2S getCentroid() {
        final Vector3D weighted = getWeightedCentroidVector();
        return weighted == null ? null : Point2S.from(weighted);
    }","  public void test13()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Point2S point2S0 = Point2S.MINUS_J;
      Point2S point2S1 = greatCircle0.getPolePoint();
      arrayDeque0.push(point2S0);
      arrayDeque0.offerFirst(point2S1);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromVertexLoop(arrayDeque0, precision_DoubleEquivalence1);
      Point2S point2S2 = convexArea2S0.getCentroid();
}"
514,"    public Point2S getCentroid() {
        final Vector3D weighted = getWeightedCentroidVector();
        return weighted == null ? null : Point2S.from(weighted);
    }","  public void test14()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Point2S point2S0 = Point2S.MINUS_J;
      Point2S point2S1 = greatCircle0.getPolePoint();
      arrayDeque0.push(point2S0);
      arrayDeque0.offerFirst(point2S1);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromVertexLoop(arrayDeque0, precision_DoubleEquivalence1);
      Point2S point2S2 = convexArea2S0.getCentroid();
}"
515,"    public Point2S getCentroid() {
        final Vector3D weighted = getWeightedCentroidVector();
        return weighted == null ? null : Point2S.from(weighted);
    }","  public void test15()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-789.0), (-2245.4885523), (-789.0));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Point2S point2S0 = Point2S.MINUS_J;
      Point2S point2S1 = greatCircle0.getPolePoint();
      arrayDeque0.add(point2S0);
      arrayDeque0.offerFirst(point2S1);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromVertexLoop(arrayDeque0, precision_DoubleEquivalence1);
      Point2S point2S2 = convexArea2S0.getCentroid();
}"
516,"    public Point2S getCentroid() {
        final Vector3D weighted = getWeightedCentroidVector();
        return weighted == null ? null : Point2S.from(weighted);
    }","  public void test16()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-789.0), (-2245.4885523), (-789.0));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Point2S point2S0 = Point2S.MINUS_J;
      Point2S point2S1 = greatCircle0.getPolePoint();
      arrayDeque0.add(point2S0);
      arrayDeque0.offerFirst(point2S1);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromVertexLoop(arrayDeque0, precision_DoubleEquivalence1);
      Point2S point2S2 = convexArea2S0.getCentroid();
}"
517,"    public static ConvexArea2S fromBounds(final GreatCircle... bounds) {
        return fromBounds(Arrays.asList(bounds));
    }","  public void test17()  throws Throwable  {
      GreatCircle[] greatCircleArray0 = new GreatCircle[0];
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromBounds(greatCircleArray0);
}"
518,"    public GreatArc trim(final HyperplaneConvexSubset<Point2S> sub) {
        return (GreatArc) super.trim(sub);
    }","  public void test18()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Stack<GreatCircle> stack0 = new Stack<GreatCircle>();
      stack0.add(greatCircle0);
      ArrayDeque<GreatCircle> arrayDeque0 = new ArrayDeque<GreatCircle>(stack0);
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromBounds((Iterable<GreatCircle>) arrayDeque0);
      // Undeclared exception!
      try { 
        convexArea2S0.trim((HyperplaneConvexSubset<Point2S>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.partitioning.AbstractConvexHyperplaneBoundedRegion"", e);
      }
  }"
519,"    public GreatArc trim(final HyperplaneConvexSubset<Point2S> sub) {
        return (GreatArc) super.trim(sub);
    }","  public void test19()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.arc(601.578, 601.578);
      GreatCircle[] greatCircleArray0 = new GreatCircle[1];
      greatCircleArray0[0] = greatCircle0;
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromBounds(greatCircleArray0);
      // Undeclared exception!
      try { 
        convexArea2S0.trim(greatArc0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
520,"    public ConvexArea2S transform(final Transform<Point2S> transform) {
        return transformInternal(transform, this, GreatArc.class, ConvexArea2S::new);
    }","  public void test20()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Stack<GreatCircle> stack0 = new Stack<GreatCircle>();
      stack0.add(greatCircle0);
      ArrayDeque<GreatCircle> arrayDeque0 = new ArrayDeque<GreatCircle>(stack0);
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromBounds((Iterable<GreatCircle>) arrayDeque0);
      // Undeclared exception!
      try { 
        convexArea2S0.transform((Transform<Point2S>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircle"", e);
      }
  }"
521,"    public ConvexArea2S transform(final Transform<Point2S> transform) {
        return transformInternal(transform, this, GreatArc.class, ConvexArea2S::new);
    }","  public void test21()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Stack<GreatCircle> stack0 = new Stack<GreatCircle>();
      stack0.add(greatCircle0);
      ArrayDeque<GreatCircle> arrayDeque0 = new ArrayDeque<GreatCircle>(stack0);
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromBounds((Iterable<GreatCircle>) arrayDeque0);
      Transform2S transform2S0 = Transform2S.createReflection((Vector3D) vector3D_Unit0);
      // Undeclared exception!
      try { 
        convexArea2S0.transform(transform2S0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
522,"    public Split<ConvexArea2S> split(final Hyperplane<Point2S> splitter) {
        return splitInternal(splitter, this, GreatArc.class, ConvexArea2S::new);
    }","  public void test22()  throws Throwable  {
      Vector<GreatCircle> vector0 = new Vector<GreatCircle>(54, 7);
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromBounds((Iterable<GreatCircle>) vector0);
      // Undeclared exception!
      try { 
        convexArea2S0.split((Hyperplane<Point2S>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.partitioning.AbstractConvexHyperplaneBoundedRegion"", e);
      }
  }"
523,"    public Split<ConvexArea2S> split(final Hyperplane<Point2S> splitter) {
        return splitInternal(splitter, this, GreatArc.class, ConvexArea2S::new);
    }","  public void test23()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Stack<GreatCircle> stack0 = new Stack<GreatCircle>();
      stack0.add(greatCircle0);
      ArrayDeque<GreatCircle> arrayDeque0 = new ArrayDeque<GreatCircle>(stack0);
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromBounds((Iterable<GreatCircle>) arrayDeque0);
      // Undeclared exception!
      try { 
        convexArea2S0.split(greatCircle0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
524,"    public double[] getInteriorAngles() {
        final List<GreatArc> arcs = getBoundaryPath().getArcs();
        final int numSides = arcs.size();

        if (numSides < 2) {
            return new double[0];
        }

        final double[] angles = new double[numSides];

        GreatArc current;
        GreatArc next;
        for (int i = 0; i < numSides; ++i) {
            current = arcs.get(i);
            next = arcs.get((i + 1) % numSides);

            angles[i] = Math.PI - current.getCircle()
                    .angle(next.getCircle(), current.getEndPoint());
        }

        return angles;
    }","  public void test24()  throws Throwable  {
      LinkedHashSet<GreatCircle> linkedHashSet0 = new LinkedHashSet<GreatCircle>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      linkedHashSet0.add(greatCircle0);
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromBounds((Iterable<GreatCircle>) linkedHashSet0);
      // Undeclared exception!
      try { 
        convexArea2S0.getInteriorAngles();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.AbstractGreatArcConnector$ConnectableGreatArc"", e);
      }
  }"
525,"    public GreatArcPath getBoundaryPath() {
        final List<GreatArcPath> paths = InteriorAngleGreatArcConnector.connectMinimized(getBoundaries());
        if (paths.isEmpty()) {
            return GreatArcPath.empty();
        }

        return paths.get(0);
    }","  public void test25()  throws Throwable  {
      GreatCircle[] greatCircleArray0 = new GreatCircle[1];
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D.Unit vector3D_Unit0 = (Vector3D.Unit)axisSequence0.getAxis3();
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      greatCircleArray0[0] = greatCircle0;
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromBounds(greatCircleArray0);
      // Undeclared exception!
      try { 
        convexArea2S0.getBoundaryPath();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.AbstractGreatArcConnector$ConnectableGreatArc"", e);
      }
  }"
526,"    public static ConvexArea2S fromVertices(final Collection<Point2S> vertices,
            final Precision.DoubleEquivalence precision) {
        return fromVertices(vertices, false, precision);
    }","  public void test26()  throws Throwable  {
      LinkedHashSet<Point2S> linkedHashSet0 = new LinkedHashSet<Point2S>();
      Point2S point2S0 = Point2S.MINUS_K;
      linkedHashSet0.add(point2S0);
      // Undeclared exception!
      try { 
        ConvexArea2S.fromVertices((Collection<Point2S>) linkedHashSet0, true, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.Point2S"", e);
      }
  }"
527,"    public static ConvexArea2S fromVertices(final Collection<Point2S> vertices,
            final Precision.DoubleEquivalence precision) {
        return fromVertices(vertices, false, precision);
    }","  public void test27()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = new GreatArc(greatCircle0, angularInterval_Convex0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      // Undeclared exception!
      try { 
        ConvexArea2S.fromVertices((Collection<Point2S>) null, precision_DoubleEquivalence1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
528,"    public static ConvexArea2S fromVertices(final Collection<Point2S> vertices,
            final Precision.DoubleEquivalence precision) {
        return fromVertices(vertices, false, precision);
    }","  public void test28()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-789.0), (-2245.4885523), (-789.0));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      Point2S point2S0 = Point2S.MINUS_J;
      arrayDeque0.add(point2S0);
      arrayDeque0.add(point2S0);
      // Undeclared exception!
      try { 
        ConvexArea2S.fromVertices((Collection<Point2S>) arrayDeque0, precision_DoubleEquivalence1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
529,"    public static ConvexArea2S fromVertexLoop(final Collection<Point2S> vertices,
            final Precision.DoubleEquivalence precision) {
        return fromVertices(vertices, true, precision);
    }","  public void test29()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = greatCircle0.arc(angularInterval_Convex0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      // Undeclared exception!
      try { 
        ConvexArea2S.fromVertexLoop((Collection<Point2S>) null, precision_DoubleEquivalence1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
530,"    public static ConvexArea2S fromVertexLoop(final Collection<Point2S> vertices,
            final Precision.DoubleEquivalence precision) {
        return fromVertices(vertices, true, precision);
    }","  public void test30()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-789.0), (-2245.4885523), (-789.0));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, true, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Point2S point2S0 = Point2S.MINUS_J;
      Point2S point2S1 = greatCircle0.getPolePoint();
      arrayDeque0.push(point2S0);
      arrayDeque0.offerFirst(point2S1);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      ConvexArea2S.fromVertices((Collection<Point2S>) arrayDeque0, precision_DoubleEquivalence1);
      // Undeclared exception!
      try { 
        ConvexArea2S.fromVertexLoop(arrayDeque0, precision_DoubleEquivalence1);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Unable to create convex area: only a single unique vertex provided
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.ConvexArea2S"", e);
      }
  }"
531,"    public static ConvexArea2S fromPath(final GreatArcPath path) {
        final List<GreatCircle> bounds = path.getArcs().stream()
            .map(GreatArc::getCircle)
            .collect(Collectors.toList());

        return fromBounds(bounds);
    }","  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConvexArea2S.fromPath((GreatArcPath) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.ConvexArea2S"", e);
      }
  }"
532,"    public static ConvexArea2S fromBounds(final GreatCircle... bounds) {
        return fromBounds(Arrays.asList(bounds));
    }","  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConvexArea2S.fromBounds((GreatCircle[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
533,"    public static ConvexArea2S fromBounds(final GreatCircle... bounds) {
        return fromBounds(Arrays.asList(bounds));
    }","  public void test33()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatCircle[] greatCircleArray0 = new GreatCircle[3];
      greatCircleArray0[0] = greatCircle0;
      GreatCircle greatCircle1 = greatCircle0.reverse();
      greatCircleArray0[1] = greatCircle1;
      // Undeclared exception!
      try { 
        ConvexArea2S.fromBounds(greatCircleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
534,"    public static ConvexArea2S fromBounds(final GreatCircle... bounds) {
        return fromBounds(Arrays.asList(bounds));
    }","  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConvexArea2S.fromBounds((Iterable<GreatCircle>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.partitioning.AbstractConvexHyperplaneBoundedRegion$ConvexRegionBoundaryBuilder"", e);
      }
  }"
535,"    public static ConvexArea2S fromBounds(final GreatCircle... bounds) {
        return fromBounds(Arrays.asList(bounds));
    }","  public void test35()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Stack<GreatCircle> stack0 = new Stack<GreatCircle>();
      stack0.add(greatCircle0);
      GreatCircle greatCircle1 = greatCircle0.reverse();
      stack0.add(greatCircle1);
      ArrayDeque<GreatCircle> arrayDeque0 = new ArrayDeque<GreatCircle>(stack0);
      // Undeclared exception!
      try { 
        ConvexArea2S.fromBounds((Iterable<GreatCircle>) arrayDeque0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
536,"    public static ConvexArea2S fromVertices(final Collection<Point2S> vertices,
            final Precision.DoubleEquivalence precision) {
        return fromVertices(vertices, false, precision);
    }","  public void test36()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-789.0), (-2245.4885523), (-789.0));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Point2S point2S0 = Point2S.MINUS_J;
      Point2S point2S1 = greatCircle0.getPolePoint();
      arrayDeque0.push(point2S0);
      arrayDeque0.offerFirst(point2S1);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromVertices((Collection<Point2S>) arrayDeque0, false, precision_DoubleEquivalence1);
}"
537,"    public static ConvexArea2S fromVertices(final Collection<Point2S> vertices,
            final Precision.DoubleEquivalence precision) {
        return fromVertices(vertices, false, precision);
    }","  public void test37()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-789.0), (-2245.4885523), (-789.0));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Point2S point2S0 = Point2S.MINUS_J;
      arrayDeque0.push(point2S0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      // Undeclared exception!
      try { 
        ConvexArea2S.fromVertices((Collection<Point2S>) arrayDeque0, false, precision_DoubleEquivalence1);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Unable to create convex area: only a single unique vertex provided
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.ConvexArea2S"", e);
      }
  }"
538,"    public static ConvexArea2S fromVertices(final Collection<Point2S> vertices,
            final Precision.DoubleEquivalence precision) {
        return fromVertices(vertices, false, precision);
    }","  public void test38()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Point2S point2S0 = Point2S.MINUS_J;
      arrayDeque0.addLast(point2S0);
      // Undeclared exception!
      try { 
        ConvexArea2S.fromVertices((Collection<Point2S>) arrayDeque0, true, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Unable to create convex area: only a single unique vertex provided
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.ConvexArea2S"", e);
      }
  }"
539,"    public static ConvexArea2S fromVertices(final Collection<Point2S> vertices,
            final Precision.DoubleEquivalence precision) {
        return fromVertices(vertices, false, precision);
    }","  public void test39()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Point2S point2S0 = Point2S.MINUS_J;
      arrayDeque0.addLast(point2S0);
      arrayDeque0.add(point2S0);
      // Undeclared exception!
      try { 
        ConvexArea2S.fromVertices((Collection<Point2S>) arrayDeque0, true, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
540,"    public static ConvexArea2S fromVertices(final Collection<Point2S> vertices,
            final Precision.DoubleEquivalence precision) {
        return fromVertices(vertices, false, precision);
    }","  public void test40()  throws Throwable  {
      LinkedHashSet<Point2S> linkedHashSet0 = new LinkedHashSet<Point2S>();
      linkedHashSet0.add((Point2S) null);
      // Undeclared exception!
      try { 
        ConvexArea2S.fromVertices((Collection<Point2S>) linkedHashSet0, true, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Unable to create convex area: only a single unique vertex provided
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.ConvexArea2S"", e);
      }
  }"
541,"    public static ConvexArea2S fromVertices(final Collection<Point2S> vertices,
            final Precision.DoubleEquivalence precision) {
        return fromVertices(vertices, false, precision);
    }","  public void test41()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-789.0), (-2245.4885523), (-789.0));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Point2S point2S0 = Point2S.MINUS_J;
      arrayDeque0.push(point2S0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      // Undeclared exception!
      try { 
        ConvexArea2S.fromVertices((Collection<Point2S>) arrayDeque0, precision_DoubleEquivalence1);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Unable to create convex area: only a single unique vertex provided
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.ConvexArea2S"", e);
      }
  }"
542,"    public Point2S getCentroid() {
        final Vector3D weighted = getWeightedCentroidVector();
        return weighted == null ? null : Point2S.from(weighted);
    }","  public void test42()  throws Throwable  {
      ConvexArea2S convexArea2S0 = ConvexArea2S.full();
      Point2S point2S0 = convexArea2S0.getCentroid();
}"
543,"    public double getSize() {
        final int numSides = getBoundaries().size();

        if (numSides == 0) {
            return FULL_SIZE;
        } else if (numSides == 1) {
            return HALF_SIZE;
        } else {
            // use the extended version of Girard's theorem
            // https://en.wikipedia.org/wiki/Spherical_trigonometry#Girard's_theorem
            final double[] angles = getInteriorAngles();
            final double sum = Arrays.stream(angles).sum();

            return sum - ((angles.length - 2) * Math.PI);
        }
    }","  public void test43()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.arc(601.578, 601.578);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromVertexLoop(arrayDeque0, precision_DoubleEquivalence1);
      double double0 = convexArea2S0.getSize();
}"
544,"    public double getSize() {
        final int numSides = getBoundaries().size();

        if (numSides == 0) {
            return FULL_SIZE;
        } else if (numSides == 1) {
            return HALF_SIZE;
        } else {
            // use the extended version of Girard's theorem
            // https://en.wikipedia.org/wiki/Spherical_trigonometry#Girard's_theorem
            final double[] angles = getInteriorAngles();
            final double sum = Arrays.stream(angles).sum();

            return sum - ((angles.length - 2) * Math.PI);
        }
    }","  public void test44()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatCircle[] greatCircleArray0 = new GreatCircle[1];
      greatCircleArray0[0] = greatCircle0;
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromBounds(greatCircleArray0);
      double double0 = convexArea2S0.getSize();
}"
545,"    public double[] getInteriorAngles() {
        final List<GreatArc> arcs = getBoundaryPath().getArcs();
        final int numSides = arcs.size();

        if (numSides < 2) {
            return new double[0];
        }

        final double[] angles = new double[numSides];

        GreatArc current;
        GreatArc next;
        for (int i = 0; i < numSides; ++i) {
            current = arcs.get(i);
            next = arcs.get((i + 1) % numSides);

            angles[i] = Math.PI - current.getCircle()
                    .angle(next.getCircle(), current.getEndPoint());
        }

        return angles;
    }","  public void test45()  throws Throwable  {
      PriorityQueue<Point2S> priorityQueue0 = new PriorityQueue<Point2S>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = new GreatArc(greatCircle0, (AngularInterval.Convex) null);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      GreatArcPath greatArcPath0 = GreatArcPath.fromVertices((Collection<Point2S>) priorityQueue0, true, precision_DoubleEquivalence1);
      List<Point2S> list0 = greatArcPath0.getVertices();
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromVertices((Collection<Point2S>) list0, true, precision_DoubleEquivalence1);
      double[] doubleArray0 = convexArea2S0.getInteriorAngles();
}"
546,"    public GreatArcPath getBoundaryPath() {
        final List<GreatArcPath> paths = InteriorAngleGreatArcConnector.connectMinimized(getBoundaries());
        if (paths.isEmpty()) {
            return GreatArcPath.empty();
        }

        return paths.get(0);
    }","  public void test46()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.arc(601.578, 601.578);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromVertexLoop(arrayDeque0, precision_DoubleEquivalence1);
      GreatArcPath greatArcPath0 = convexArea2S0.getBoundaryPath();
}"
547,"    public static ConvexArea2S fromPath(final GreatArcPath path) {
        final List<GreatCircle> bounds = path.getArcs().stream()
            .map(GreatArc::getCircle)
            .collect(Collectors.toList());

        return fromBounds(bounds);
    }","  public void test47()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatCircle[] greatCircleArray0 = new GreatCircle[1];
      greatCircleArray0[0] = greatCircle0;
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromBounds(greatCircleArray0);
      GreatArcPath greatArcPath0 = convexArea2S0.getBoundaryPath();
      ConvexArea2S convexArea2S1 = ConvexArea2S.fromPath(greatArcPath0);
}"
548,"    public ConvexArea2S transform(final Transform<Point2S> transform) {
        return transformInternal(transform, this, GreatArc.class, ConvexArea2S::new);
    }","  public void test48()  throws Throwable  {
      Stack<GreatCircle> stack0 = new Stack<GreatCircle>();
      ArrayDeque<GreatCircle> arrayDeque0 = new ArrayDeque<GreatCircle>(stack0);
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromBounds((Iterable<GreatCircle>) arrayDeque0);
      ConvexArea2S convexArea2S1 = convexArea2S0.transform((Transform<Point2S>) null);
}"
549,"    public Split<ConvexArea2S> split(final Hyperplane<Point2S> splitter) {
        return splitInternal(splitter, this, GreatArc.class, ConvexArea2S::new);
    }","  public void test49()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.arc(601.578, 601.578);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromVertexLoop(arrayDeque0, precision_DoubleEquivalence1);
      Split<ConvexArea2S> split0 = convexArea2S0.split(greatCircle0);
}"
550,"    public static ConvexArea2S fromVertices(final Collection<Point2S> vertices,
            final Precision.DoubleEquivalence precision) {
        return fromVertices(vertices, false, precision);
    }","  public void test50()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-789.0), (-2245.4885523), (-789.0));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromVertices((Collection<Point2S>) arrayDeque0, precision_DoubleEquivalence1);
}"
551,"    public GreatArc trim(final HyperplaneConvexSubset<Point2S> sub) {
        return (GreatArc) super.trim(sub);
    }","  public void test51()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.arc(601.578, 601.578);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromVertexLoop(arrayDeque0, precision_DoubleEquivalence1);
      GreatArc greatArc1 = convexArea2S0.trim(greatArc0);
}"
552,"    public RegionBSPTree2S toTree() {
        return RegionBSPTree2S.from(getBoundaries(), true);
    }","  public void test52()  throws Throwable  {
      Vector<GreatCircle> vector0 = new Vector<GreatCircle>(54, 7);
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromBounds((Iterable<GreatCircle>) vector0);
      RegionBSPTree2S regionBSPTree2S0 = convexArea2S0.toTree();
}"
553,"    public static ConvexArea2S fromPath(final GreatArcPath path) {
        final List<GreatCircle> bounds = path.getArcs().stream()
            .map(GreatArc::getCircle)
            .collect(Collectors.toList());

        return fromBounds(bounds);
    }","  public void test53()  throws Throwable  {
      GreatArcPath greatArcPath0 = GreatArcPath.empty();
      ConvexArea2S convexArea2S0 = ConvexArea2S.fromPath(greatArcPath0);
}"
554,"    public Stream<GreatArc> boundaryStream() {
        return getBoundaries().stream();
    }","  public void test54()  throws Throwable  {
      ConvexArea2S convexArea2S0 = ConvexArea2S.full();
      Stream<GreatArc> stream0 = convexArea2S0.boundaryStream();
}"
555,"    public Point2S toSpace(final Point1S point) {
        return Point2S.from(vectorAt(point.getAzimuth()));
    }","  public void test0()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of((-4.02), (-4.02), (-4.02));
      Vector3D.Unit vector3D_Unit0 = vector3D0.normalizeOrNull();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      TreeSet<Point1S> treeSet0 = new TreeSet<Point1S>();
      greatCircle0.toSpace((Collection<Point1S>) treeSet0);
      GreatCircle greatCircle1 = greatCircle0.reverse();
      vector3D_Unit0.dot(vector3D0);
      greatCircle1.getPole();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence1).eq(anyDouble() , anyDouble());
      greatCircle0.eq(greatCircle1, precision_DoubleEquivalence1);
      greatCircle1.getV();
      // Undeclared exception!
      try { 
        greatCircle1.toSpace((Point1S) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircle"", e);
      }
  }"
556,"    public boolean similarOrientation(final Hyperplane<Point2S> other) {
        final GreatCircle otherCircle = (GreatCircle) other;
        return pole.dot(otherCircle.pole) > 0.0;
    }","  public void test1()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit1, vector3D_Unit0, precision_DoubleEquivalence0);
      Transform2S transform2S0 = Transform2S.createRotation((Vector3D) vector3D_Unit0, (-1.0));
      GreatCircle greatCircle1 = greatCircle0.transform(transform2S0);
      boolean boolean0 = greatCircle0.similarOrientation(greatCircle1);
}"
557,"    public Vector3D vectorAt(final double azimuth) {
        return Vector3D.Sum.create()
                .addScaled(Math.cos(azimuth), u)
                .addScaled(Math.sin(azimuth), v).get();
    }","  public void test2()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(3.273390607896142E150, 3.273390607896142E150, 3.273390607896142E150);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector3D vector3D0 = greatCircle0.vectorAt(487.06013860252614);
}"
558,"    public Vector3D vectorAt(final double azimuth) {
        return Vector3D.Sum.create()
                .addScaled(Math.cos(azimuth), u)
                .addScaled(Math.sin(azimuth), v).get();
    }","  public void test3()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(230.599418899762, 230.599418899762, 230.599418899762);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector3D vector3D0 = greatCircle0.vectorAt(Double.NEGATIVE_INFINITY);
}"
559,"    public Vector3D vectorAt(final double azimuth) {
        return Vector3D.Sum.create()
                .addScaled(Math.cos(azimuth), u)
                .addScaled(Math.sin(azimuth), v).get();
    }","  public void test4()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector3D vector3D0 = greatCircle0.vectorAt((-1735.927));
}"
560,"    public Point1S toSubspace(final Point2S point) {
        return Point1S.of(azimuth(point.getVector()));
    }","  public void test5()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      Point2S point2S0 = Point2S.MINUS_K;
      Point1S point1S0 = greatCircle0.toSubspace(point2S0);
}"
561,"    public Point2S toSpace(final Point1S point) {
        return Point2S.from(vectorAt(point.getAzimuth()));
    }","  public void test6()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Angle.Deg angle_Deg0 = Angle.Deg.of(242.98649668);
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      Point2S point2S1 = greatCircle0.toSpace(point1S0);
}"
562,"    public Point2S project(final Point2S point) {
        final double az = azimuth(point.getVector());
        return Point2S.from(vectorAt(az));
    }","  public void test7()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Point2S point2S0 = Point2S.of(2.409919865102884E-181, 2.409919865102884E-181);
      Point2S point2S1 = greatCircle0.project(point2S0);
}"
563,"    public Point2S project(final Point2S point) {
        final double az = azimuth(point.getVector());
        return Point2S.from(vectorAt(az));
    }","  public void test8()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Point2S point2S0 = Point2S.PLUS_K;
      Point2S point2S1 = greatCircle0.project(point2S0);
}"
564,"    public double offset(final Point2S point) {
        return offset(point.getVector());
    }","  public void test9()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Point2S point2S0 = Point2S.of(2.409919865102884E-181, 2.409919865102884E-181);
      double double0 = greatCircle0.offset(point2S0);
}"
565,"    public double offset(final Point2S point) {
        return offset(point.getVector());
    }","  public void test10()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatCircle greatCircle1 = greatCircle0.reverse();
      Point2S point2S0 = Point2S.of(2.409919865102884E-181, 2.409919865102884E-181);
      double double0 = greatCircle1.offset(point2S0);
}"
566,"    public double offset(final Point2S point) {
        return offset(point.getVector());
    }","  public void test11()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(277.44226342355, 277.44226342355, (-3219.750759811093));
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit1, vector3D_Unit0, vector3D_Unit1, precision_DoubleEquivalence0);
      double double0 = greatCircle0.offset((Vector3D) vector3D_Unit0);
}"
567,"    public double offset(final Point2S point) {
        return offset(point.getVector());
    }","  public void test12()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(230.599418899762, 230.599418899762, 230.599418899762);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatCircle greatCircle1 = greatCircle0.reverse();
      double double0 = greatCircle1.offset((Vector3D) vector3D_Unit0);
}"
568,"    public Point2S intersection(final GreatCircle other) {
        final Vector3D cross = pole.cross(other.pole);
        if (!cross.eq(Vector3D.ZERO, getPrecision())) {
            return Point2S.from(cross);
        }

        return null;
    }","  public void test13()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle1 = new GreatCircle(vector3D_Unit1, vector3D_Unit0, vector3D_Unit1, precision_DoubleEquivalence1);
      Point2S point2S0 = greatCircle0.intersection(greatCircle1);
}"
569,"    public Point2S intersection(final GreatCircle other) {
        final Vector3D cross = pole.cross(other.pole);
        if (!cross.eq(Vector3D.ZERO, getPrecision())) {
            return Point2S.from(cross);
        }

        return null;
    }","  public void test14()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit1, vector3D_Unit0, vector3D_Unit1, precision_DoubleEquivalence0);
      Transform2S transform2S0 = Transform2S.createReflection((Vector3D) vector3D_Unit1);
      GreatCircle greatCircle1 = greatCircle0.transform(transform2S0);
      Point2S point2S0 = greatCircle0.intersection(greatCircle1);
}"
570,"    public Vector3D.Unit getW() {
        return getPole();
    }","  public void test15()  throws Throwable  {
      GreatCircle greatCircle0 = new GreatCircle((Vector3D.Unit) null, (Vector3D.Unit) null, (Vector3D.Unit) null, (Precision.DoubleEquivalence) null);
      Vector3D.Unit vector3D_Unit0 = greatCircle0.getW();
}"
571,"    public Vector3D.Unit getW() {
        return getPole();
    }","  public void test16()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit1, vector3D_Unit0, vector3D_Unit1, precision_DoubleEquivalence0);
      Vector3D.Unit vector3D_Unit2 = greatCircle0.getW();
}"
572,"    public Vector3D.Unit getW() {
        return getPole();
    }","  public void test17()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit1, vector3D_Unit1, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector3D.Unit vector3D_Unit2 = greatCircle0.getW();
}"
573,"    public Vector3D.Unit getW() {
        return getPole();
    }","  public void test18()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.normalizeOrNull();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit2, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector3D.Unit vector3D_Unit3 = greatCircle0.getW();
}"
574,"    public Vector3D.Unit getW() {
        return getPole();
    }","  public void test19()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector3D.Unit vector3D_Unit1 = greatCircle0.getW();
}"
575,"    public Vector3D.Unit getW() {
        return getPole();
    }","  public void test20()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit1, vector3D_Unit0, vector3D_Unit1, precision_DoubleEquivalence0);
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.PLUS_X;
      Transform2S transform2S0 = Transform2S.createReflection((Vector3D) vector3D_Unit2);
      GreatCircle greatCircle1 = greatCircle0.transform(transform2S0);
      Vector3D.Unit vector3D_Unit3 = greatCircle1.getW();
}"
576,"    public Vector3D.Unit getV() {
        return v;
    }","  public void test21()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle((Vector3D.Unit) null, (Vector3D.Unit) null, (Vector3D.Unit) null, precision_DoubleEquivalence0);
      Vector3D.Unit vector3D_Unit0 = greatCircle0.getV();
}"
577,"    public Vector3D.Unit getV() {
        return v;
    }","  public void test22()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, (Vector3D.Unit) null, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector3D.Unit vector3D_Unit1 = greatCircle0.getV();
}"
578,"    public Vector3D.Unit getV() {
        return v;
    }","  public void test23()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.from(0.0, 0.0, (-460.0));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit1, precision_DoubleEquivalence0);
      Vector3D.Unit vector3D_Unit2 = greatCircle0.getV();
}"
579,"    public Vector3D.Unit getU() {
        return u;
    }","  public void test24()  throws Throwable  {
      GreatCircle greatCircle0 = new GreatCircle((Vector3D.Unit) null, (Vector3D.Unit) null, (Vector3D.Unit) null, (Precision.DoubleEquivalence) null);
      Vector3D.Unit vector3D_Unit0 = greatCircle0.getU();
}"
580,"    public Vector3D.Unit getU() {
        return u;
    }","  public void test25()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector3D.Unit vector3D_Unit1 = greatCircle0.getU();
}"
581,"    public Vector3D.Unit getU() {
        return u;
    }","  public void test26()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_J;
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector3D.Unit vector3D_Unit1 = greatCircle0.getU();
}"
582,"    public Vector3D.Unit getU() {
        return u;
    }","  public void test27()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit1, vector3D_Unit1, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector3D.Unit vector3D_Unit2 = greatCircle0.getU();
}"
583,"    public Vector3D.Unit getU() {
        return u;
    }","  public void test28()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector3D.Unit vector3D_Unit1 = greatCircle0.getU();
}"
584,"    public Vector3D.Unit getU() {
        return u;
    }","  public void test29()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector3D.Unit vector3D_Unit1 = greatCircle0.getU();
}"
585,"    public Point2S getPolePoint() {
        return Point2S.from(pole);
    }","  public void test30()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Point2S point2S0 = greatCircle0.getPolePoint();
}"
586,"    public Vector3D.Unit getPole() {
        return pole;
    }","  public void test31()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle((Vector3D.Unit) null, (Vector3D.Unit) null, (Vector3D.Unit) null, precision_DoubleEquivalence0);
      Vector3D.Unit vector3D_Unit0 = greatCircle0.getPole();
}"
587,"    public Vector3D.Unit getPole() {
        return pole;
    }","  public void test32()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector3D.Unit vector3D_Unit1 = greatCircle0.getPole();
}"
588,"    public Vector3D.Unit getPole() {
        return pole;
    }","  public void test33()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_K;
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector3D.Unit vector3D_Unit1 = greatCircle0.getPole();
}"
589,"    public double azimuth(final Point2S pt) {
        return azimuth(pt.getVector());
    }","  public void test34()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      double double0 = greatCircle0.azimuth(point2S0);
}"
590,"    public double azimuth(final Point2S pt) {
        return azimuth(pt.getVector());
    }","  public void test35()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit1, vector3D_Unit0, vector3D_Unit1, precision_DoubleEquivalence0);
      double double0 = greatCircle0.azimuth((Vector3D) vector3D_Unit0);
}"
591,"    public GreatArc arc(final Point2S start, final Point2S end) {
        return arc(toSubspace(start), toSubspace(end));
    }","  public void test36()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Point1S point1S0 = Point1S.PI;
      GreatArc greatArc0 = greatCircle0.arc(point1S0, point1S0);
}"
592,"    public double angle(final GreatCircle other) {
        return pole.angle(other.pole);
    }","  public void test37()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).gt(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatCircle greatCircle1 = greatCircle0.reverse();
      Point2S point2S0 = Point2S.MINUS_J;
      double double0 = greatCircle1.angle(greatCircle0, point2S0);
}"
593,"    public double angle(final GreatCircle other) {
        return pole.angle(other.pole);
    }","  public void test38()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).gt(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatCircle greatCircle1 = greatCircle0.reverse();
      Point2S point2S0 = Point2S.of((-631.0), (-631.0));
      double double0 = greatCircle1.angle(greatCircle0, point2S0);
}"
594,"    public double angle(final GreatCircle other) {
        return pole.angle(other.pole);
    }","  public void test39()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatCircle greatCircle1 = greatCircle0.reverse();
      double double0 = greatCircle0.angle(greatCircle1);
}"
595,"    public Vector3D vectorAt(final double azimuth) {
        return Vector3D.Sum.create()
                .addScaled(Math.cos(azimuth), u)
                .addScaled(Math.sin(azimuth), v).get();
    }","  public void test40()  throws Throwable  {
      GreatCircle greatCircle0 = new GreatCircle((Vector3D.Unit) null, (Vector3D.Unit) null, (Vector3D.Unit) null, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        greatCircle0.vectorAt((-3404.1125802));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
596,"    public GreatCircle transform(final Transform<Point2S> transform) {
        final Point2S tu = transform.apply(Point2S.from(u));
        final Point2S tv = transform.apply(Point2S.from(v));

        return GreatCircles.fromPoints(tu, tv, getPrecision());
    }","  public void test41()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle((Vector3D.Unit) null, (Vector3D.Unit) null, (Vector3D.Unit) null, precision_DoubleEquivalence0);
      Transform2S transform2S0 = Transform2S.identity();
      // Undeclared exception!
      try { 
        greatCircle0.transform(transform2S0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.SphericalCoordinates"", e);
      }
  }"
597,"    public Point2S toSpace(final Point1S point) {
        return Point2S.from(vectorAt(point.getAzimuth()));
    }","  public void test42()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Point1S point1S0 = Point1S.NaN;
      // Undeclared exception!
      try { 
        greatCircle0.toSpace(point1S0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
598,"    public boolean similarOrientation(final Hyperplane<Point2S> other) {
        final GreatCircle otherCircle = (GreatCircle) other;
        return pole.dot(otherCircle.pole) > 0.0;
    }","  public void test43()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_K;
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        greatCircle0.similarOrientation((Hyperplane<Point2S>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircle"", e);
      }
  }"
599,"    public GreatCircle reverse() {
        return new GreatCircle(pole.negate(), u, v.negate(), getPrecision());
    }","  public void test44()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle((Vector3D.Unit) null, (Vector3D.Unit) null, (Vector3D.Unit) null, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        greatCircle0.reverse();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircle"", e);
      }
  }"
600,"    public Point2S project(final Point2S point) {
        final double az = azimuth(point.getVector());
        return Point2S.from(vectorAt(az));
    }","  public void test45()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Point2S point2S0 = Point2S.NaN;
      // Undeclared exception!
      try { 
        greatCircle0.project(point2S0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircle"", e);
      }
  }"
601,"    public double offset(final Point2S point) {
        return offset(point.getVector());
    }","  public void test46()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle((Vector3D.Unit) null, (Vector3D.Unit) null, (Vector3D.Unit) null, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        greatCircle0.offset((Point2S) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircle"", e);
      }
  }"
602,"    public double offset(final Point2S point) {
        return offset(point.getVector());
    }","  public void test47()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle((Vector3D.Unit) null, (Vector3D.Unit) null, (Vector3D.Unit) null, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        greatCircle0.offset((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircle"", e);
      }
  }"
603,"    public double offset(final Point2S point) {
        return offset(point.getVector());
    }","  public void test48()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, (Vector3D.Unit) null, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        greatCircle0.offset(vector3D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
604,"    public Point2S intersection(final GreatCircle other) {
        final Vector3D cross = pole.cross(other.pole);
        if (!cross.eq(Vector3D.ZERO, getPrecision())) {
            return Point2S.from(cross);
        }

        return null;
    }","  public void test49()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        greatCircle0.intersection(greatCircle0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
605,"    public Point2S getPolePoint() {
        return Point2S.from(pole);
    }","  public void test50()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle((Vector3D.Unit) null, (Vector3D.Unit) null, (Vector3D.Unit) null, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        greatCircle0.getPolePoint();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.SphericalCoordinates"", e);
      }
  }"
606,"    public boolean eq(final GreatCircle other, final Precision.DoubleEquivalence precision) {
        return pole.eq(other.pole, precision) &&
                u.eq(other.u, precision) &&
                v.eq(other.v, precision);
    }","  public void test51()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, (Vector3D.Unit) null, vector3D_Unit0, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true).when(precision_DoubleEquivalence1).eq(anyDouble() , anyDouble());
      // Undeclared exception!
      try { 
        greatCircle0.eq(greatCircle0, precision_DoubleEquivalence1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircle"", e);
      }
  }"
607,"    public double azimuth(final Point2S pt) {
        return azimuth(pt.getVector());
    }","  public void test52()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle((Vector3D.Unit) null, (Vector3D.Unit) null, (Vector3D.Unit) null, precision_DoubleEquivalence0);
      Point2S point2S0 = Point2S.of(0.0, 0.0);
      // Undeclared exception!
      try { 
        greatCircle0.azimuth(point2S0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
608,"    public double azimuth(final Point2S pt) {
        return azimuth(pt.getVector());
    }","  public void test53()  throws Throwable  {
      GreatCircle greatCircle0 = new GreatCircle((Vector3D.Unit) null, (Vector3D.Unit) null, (Vector3D.Unit) null, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        greatCircle0.azimuth((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircle"", e);
      }
  }"
609,"    public GreatArc arc(final Point2S start, final Point2S end) {
        return arc(toSubspace(start), toSubspace(end));
    }","  public void test54()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Point2S point2S0 = Point2S.MINUS_K;
      // Undeclared exception!
      try { 
        greatCircle0.arc(point2S0, (Point2S) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircle"", e);
      }
  }"
610,"    public GreatArc arc(final Point2S start, final Point2S end) {
        return arc(toSubspace(start), toSubspace(end));
    }","  public void test55()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Point2S point2S0 = Point2S.PLUS_I;
      // Undeclared exception!
      try { 
        greatCircle0.arc(point2S0, point2S0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Interval is not convex: [0, 0]
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.AngularInterval$Convex"", e);
      }
  }"
611,"    public GreatArc arc(final Point2S start, final Point2S end) {
        return arc(toSubspace(start), toSubspace(end));
    }","  public void test56()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of((-7.104471296525103), (-7.104471296525103), (-7.104471296525103));
      Vector3D.Unit vector3D_Unit0 = vector3D0.normalizeOrNull();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        greatCircle0.arc((Point1S) null, (Point1S) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircle"", e);
      }
  }"
612,"    public GreatArc arc(final Point2S start, final Point2S end) {
        return arc(toSubspace(start), toSubspace(end));
    }","  public void test57()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        greatCircle0.arc((-1.5707963267948966), (-1.5707963267948966));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.Point1S"", e);
      }
  }"
613,"    public GreatArc arc(final Point2S start, final Point2S end) {
        return arc(toSubspace(start), toSubspace(end));
    }","  public void test58()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        greatCircle0.arc(0.0, (-221.71098407965));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Interval is not convex: [0, 4.484]
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.AngularInterval$Convex"", e);
      }
  }"
614,"    public double angle(final GreatCircle other) {
        return pole.angle(other.pole);
    }","  public void test59()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        greatCircle0.angle(greatCircle0, (Point2S) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircle"", e);
      }
  }"
615,"    public double angle(final GreatCircle other) {
        return pole.angle(other.pole);
    }","  public void test60()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        greatCircle0.angle((GreatCircle) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircle"", e);
      }
  }"
616,"    public double azimuth(final Point2S pt) {
        return azimuth(pt.getVector());
    }","  public void test61()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      double double0 = greatCircle0.azimuth((Vector3D) vector3D_Unit0);
}"
617,"    public double offset(final Point2S point) {
        return offset(point.getVector());
    }","  public void test62()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, (Vector3D.Unit) null, vector3D_Unit0, precision_DoubleEquivalence0);
      double double0 = greatCircle0.offset((Vector3D) vector3D_Unit0);
}"
618,"    public GreatArc arc(final Point2S start, final Point2S end) {
        return arc(toSubspace(start), toSubspace(end));
    }","  public void test63()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.arc(0.0, 2.409919865102884E-181);
}"
619,"    public GreatArc arc(final Point2S start, final Point2S end) {
        return arc(toSubspace(start), toSubspace(end));
    }","  public void test64()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.arc((AngularInterval.Convex) null);
}"
620,"    public double offset(final Point2S point) {
        return offset(point.getVector());
    }","  public void test65()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Point2S point2S0 = Point2S.MINUS_J;
      double double0 = greatCircle0.offset(point2S0);
}"
621,"    public Vector3D vectorAt(final double azimuth) {
        return Vector3D.Sum.create()
                .addScaled(Math.cos(azimuth), u)
                .addScaled(Math.sin(azimuth), v).get();
    }","  public void test66()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector3D vector3D0 = greatCircle0.vectorAt(2.409919865102884E-181);
}"
622,"    public GreatArc arc(final Point2S start, final Point2S end) {
        return arc(toSubspace(start), toSubspace(end));
    }","  public void test67()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Point2S point2S0 = Point2S.MINUS_K;
      Point1S point1S0 = greatCircle0.toSubspace(point2S0);
      // Undeclared exception!
      try { 
        greatCircle0.arc(point1S0, point1S0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Interval is not convex: [3.927, 3.927]
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.AngularInterval$Convex"", e);
      }
  }"
623,"    public Point1S toSubspace(final Point2S point) {
        return Point1S.of(azimuth(point.getVector()));
    }","  public void test68()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        greatCircle0.toSubspace((Point2S) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircle"", e);
      }
  }"
624,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof GreatCircle)) {
            return false;
        }

        final GreatCircle other = (GreatCircle) obj;

        return Objects.equals(this.pole, other.pole) &&
                Objects.equals(this.u, other.u) &&
                Objects.equals(this.v, other.v) &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test69()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatCircle greatCircle1 = greatCircle0.reverse();
      GreatCircle greatCircle2 = greatCircle0.reverse();
      boolean boolean0 = greatCircle2.equals(greatCircle1);
}"
625,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof GreatCircle)) {
            return false;
        }

        final GreatCircle other = (GreatCircle) obj;

        return Objects.equals(this.pole, other.pole) &&
                Objects.equals(this.u, other.u) &&
                Objects.equals(this.v, other.v) &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test70()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatCircle greatCircle1 = greatCircle0.reverse();
      GreatCircle greatCircle2 = greatCircle0.reverse();
      boolean boolean0 = greatCircle2.equals(greatCircle1);
}"
626,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof GreatCircle)) {
            return false;
        }

        final GreatCircle other = (GreatCircle) obj;

        return Objects.equals(this.pole, other.pole) &&
                Objects.equals(this.u, other.u) &&
                Objects.equals(this.v, other.v) &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test71()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of((-7.104471296525103), (-7.104471296525103), (-7.104471296525103));
      Vector3D.Unit vector3D_Unit0 = vector3D0.normalizeOrNull();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle1 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, (Vector3D.Unit) null, precision_DoubleEquivalence1);
      boolean boolean0 = greatCircle0.equals(greatCircle1);
}"
627,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof GreatCircle)) {
            return false;
        }

        final GreatCircle other = (GreatCircle) obj;

        return Objects.equals(this.pole, other.pole) &&
                Objects.equals(this.u, other.u) &&
                Objects.equals(this.v, other.v) &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test72()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, (Vector3D.Unit) null, vector3D_Unit0, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle1 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      boolean boolean0 = greatCircle0.equals(greatCircle1);
}"
628,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof GreatCircle)) {
            return false;
        }

        final GreatCircle other = (GreatCircle) obj;

        return Objects.equals(this.pole, other.pole) &&
                Objects.equals(this.u, other.u) &&
                Objects.equals(this.v, other.v) &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test73()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatCircle greatCircle1 = greatCircle0.reverse();
      boolean boolean0 = greatCircle0.equals(greatCircle1);
}"
629,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof GreatCircle)) {
            return false;
        }

        final GreatCircle other = (GreatCircle) obj;

        return Objects.equals(this.pole, other.pole) &&
                Objects.equals(this.u, other.u) &&
                Objects.equals(this.v, other.v) &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test74()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      boolean boolean0 = greatCircle0.equals(vector3D_Unit0);
}"
630,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof GreatCircle)) {
            return false;
        }

        final GreatCircle other = (GreatCircle) obj;

        return Objects.equals(this.pole, other.pole) &&
                Objects.equals(this.u, other.u) &&
                Objects.equals(this.v, other.v) &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test75()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      boolean boolean0 = greatCircle0.equals(greatCircle0);
}"
631,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof GreatCircle)) {
            return false;
        }

        final GreatCircle other = (GreatCircle) obj;

        return Objects.equals(this.pole, other.pole) &&
                Objects.equals(this.u, other.u) &&
                Objects.equals(this.v, other.v) &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test76()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of((-7.104471296525103), (-7.104471296525103), (-7.104471296525103));
      Vector3D.Unit vector3D_Unit0 = vector3D0.normalizeOrNull();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle1 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      boolean boolean0 = greatCircle0.equals(greatCircle1);
}"
632,"    public boolean eq(final GreatCircle other, final Precision.DoubleEquivalence precision) {
        return pole.eq(other.pole, precision) &&
                u.eq(other.u, precision) &&
                v.eq(other.v, precision);
    }","  public void test77()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, false).when(precision_DoubleEquivalence1).eq(anyDouble() , anyDouble());
      boolean boolean0 = greatCircle0.eq(greatCircle0, precision_DoubleEquivalence1);
}"
633,"    public double angle(final GreatCircle other) {
        return pole.angle(other.pole);
    }","  public void test78()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).gt(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Point2S point2S0 = Point2S.MINUS_J;
      double double0 = greatCircle0.angle(greatCircle0, point2S0);
}"
634,"    public Point2S intersection(final GreatCircle other) {
        final Vector3D cross = pole.cross(other.pole);
        if (!cross.eq(Vector3D.ZERO, getPrecision())) {
            return Point2S.from(cross);
        }

        return null;
    }","  public void test79()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        greatCircle0.intersection(greatCircle0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
635,"    public Point2S intersection(final GreatCircle other) {
        final Vector3D cross = pole.cross(other.pole);
        if (!cross.eq(Vector3D.ZERO, getPrecision())) {
            return Point2S.from(cross);
        }

        return null;
    }","  public void test80()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Point2S point2S0 = greatCircle0.intersection(greatCircle0);
}"
636,"    public boolean similarOrientation(final Hyperplane<Point2S> other) {
        final GreatCircle otherCircle = (GreatCircle) other;
        return pole.dot(otherCircle.pole) > 0.0;
    }","  public void test81()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      boolean boolean0 = greatCircle0.similarOrientation(greatCircle0);
}"
637,"    public double azimuth(final Point2S pt) {
        return azimuth(pt.getVector());
    }","  public void test82()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      double double0 = greatCircle0.azimuth((Vector3D) vector3D_Unit1);
}"
638,"    public Point2S getPolePoint() {
        return Point2S.from(pole);
    }","  public void test83()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Point2S point2S0 = greatCircle0.getPolePoint();
}"
639,"    public boolean similarOrientation(final Hyperplane<Point2S> other) {
        final GreatCircle otherCircle = (GreatCircle) other;
        return pole.dot(otherCircle.pole) > 0.0;
    }","  public void test84()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatCircle greatCircle1 = greatCircle0.reverse();
      boolean boolean0 = greatCircle0.similarOrientation(greatCircle1);
}"
640,"    public int hashCode() {
        return Objects.hash(pole, u, v, getPrecision());
    }","  public void test85()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      greatCircle0.hashCode();
  }"
641,"    public Vector3D.Unit getU() {
        return u;
    }","  public void test86()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector3D.Unit vector3D_Unit1 = greatCircle0.getU();
}"
642,"    public Point2S toSpace(final Point1S point) {
        return Point2S.from(vectorAt(point.getAzimuth()));
    }","  public void test87()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Point1S point1S0 = Point1S.PI;
      Point2S point2S0 = greatCircle0.toSpace(point1S0);
}"
643,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName())
            .append(""[pole= "")
            .append(pole)
            .append("", u= "")
            .append(u)
            .append("", v= "")
            .append(v)
            .append(']');

        return sb.toString();
    }","  public void test88()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      String string0 = greatCircle0.toString();
}"
644,"    public GreatCircle transform(final Transform<Point2S> transform) {
        final Point2S tu = transform.apply(Point2S.from(u));
        final Point2S tv = transform.apply(Point2S.from(v));

        return GreatCircles.fromPoints(tu, tv, getPrecision());
    }","  public void test89()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Transform2S transform2S0 = Transform2S.createRotation((Vector3D) vector3D_Unit0, 0.8941896683958283);
      // Undeclared exception!
      try { 
        greatCircle0.transform(transform2S0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
645,"    public double azimuth(final Point2S pt) {
        return azimuth(pt.getVector());
    }","  public void test90()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Point2S point2S0 = Point2S.PLUS_J;
      double double0 = greatCircle0.azimuth(point2S0);
}"
646,"    public GreatArc span() {
        return GreatCircles.arcFromInterval(this, AngularInterval.full());
    }","  public void test91()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
}"
647,"    public GreatArc arc(final Point2S start, final Point2S end) {
        return arc(toSubspace(start), toSubspace(end));
    }","  public void test92()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Point2S point2S0 = Point2S.PLUS_J;
      GreatArc greatArc0 = greatCircle0.arc(point2S0, point2S0);
}"
648,"    public double angle(final GreatCircle other) {
        return pole.angle(other.pole);
    }","  public void test93()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      double double0 = greatCircle0.angle(greatCircle0);
}"
649,"    public Vector3D.Unit getV() {
        return v;
    }","  public void test94()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of((-7.104471296525103), (-7.104471296525103), (-7.104471296525103));
      Vector3D.Unit vector3D_Unit0 = vector3D0.normalizeOrNull();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector3D.Unit vector3D_Unit1 = greatCircle0.getV();
}"
650,"    public Vector3D.Unit getPole() {
        return pole;
    }","  public void test95()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of((-7.104471296525103), (-7.104471296525103), (-7.104471296525103));
      Vector3D.Unit vector3D_Unit0 = vector3D0.normalizeOrNull();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector3D.Unit vector3D_Unit1 = greatCircle0.getPole();
}"
651,"    public Point1S toSubspace(final Point2S pt) {
        return circle.toSubspace(pt);
    }","  public void test0()  throws Throwable  {
      GreatCircle greatCircle0 = mock(GreatCircle.class, new ViolatedAssumptionAnswer());
      doReturn((Point1S) null).when(greatCircle0).toSubspace(any(org.apache.commons.geometry.spherical.twod.Point2S.class));
      RegionBSPTree1S regionBSPTree1S0 = new RegionBSPTree1S();
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle0, regionBSPTree1S0);
      Point1S point1S0 = embeddedTreeGreatCircleSubset0.toSubspace((Point2S) null);
}"
652,"    public Point1S toSubspace(final Point2S pt) {
        return circle.toSubspace(pt);
    }","  public void test1()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      GreatCircle greatCircle0 = mock(GreatCircle.class, new ViolatedAssumptionAnswer());
      doReturn(point1S0).when(greatCircle0).toSubspace(any(org.apache.commons.geometry.spherical.twod.Point2S.class));
      RegionBSPTree1S regionBSPTree1S0 = new RegionBSPTree1S();
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle0, regionBSPTree1S0);
      Point1S point1S1 = embeddedTreeGreatCircleSubset0.toSubspace((Point2S) null);
}"
653,"    public Point1S toSubspace(final Point2S pt) {
        return circle.toSubspace(pt);
    }","  public void test2()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle0, true);
      Point2S point2S0 = Point2S.MINUS_J;
      Point1S point1S0 = embeddedTreeGreatCircleSubset0.toSubspace(point2S0);
}"
654,"    public Point2S toSpace(final Point1S pt) {
        return circle.toSpace(pt);
    }","  public void test3()  throws Throwable  {
      GreatCircle greatCircle0 = mock(GreatCircle.class, new ViolatedAssumptionAnswer());
      doReturn((Point2S) null).when(greatCircle0).toSpace(any(org.apache.commons.geometry.spherical.oned.Point1S.class));
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle0);
      Angle.Turn angle_Turn0 = Angle.Turn.ZERO;
      Angle.Rad angle_Rad0 = angle_Turn0.toRad();
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Point2S point2S0 = embeddedTreeGreatCircleSubset0.toSpace(point1S0);
}"
655,"    public Point2S toSpace(final Point1S pt) {
        return circle.toSpace(pt);
    }","  public void test4()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_K;
      GreatCircle greatCircle0 = mock(GreatCircle.class, new ViolatedAssumptionAnswer());
      doReturn(point2S0).when(greatCircle0).toSpace(any(org.apache.commons.geometry.spherical.oned.Point1S.class));
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle0);
      Angle.Turn angle_Turn0 = Angle.Turn.ZERO;
      Angle.Rad angle_Rad0 = angle_Turn0.toRad();
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Point2S point2S1 = embeddedTreeGreatCircleSubset0.toSpace(point1S0);
}"
656,"    public boolean isEmpty() {
        return getSubspaceRegion().isEmpty();
    }","  public void test5()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-1.5707963267948966), (-1.5707963267948966), (-1.5707963267948966));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle0);
      List<GreatArc> list0 = embeddedTreeGreatCircleSubset0.toConvex();
}"
657,"    public abstract List<GreatArc> toConvex();

    /** {@inheritDoc}","  public void test6()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.full();
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle0, regionBSPTree1S0);
      List<GreatArc> list0 = embeddedTreeGreatCircleSubset0.toConvex();
}"
658,"    public boolean isFull() {
        return getSubspaceRegion().isFull();
    }","  public void test7()  throws Throwable  {
      GreatCircle greatCircle0 = mock(GreatCircle.class, new ViolatedAssumptionAnswer());
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.full();
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle0, regionBSPTree1S0);
      boolean boolean0 = embeddedTreeGreatCircleSubset0.isFull();
}"
659,"    public boolean isEmpty() {
        return getSubspaceRegion().isEmpty();
    }","  public void test8()  throws Throwable  {
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset((GreatCircle) null, true);
      boolean boolean0 = embeddedTreeGreatCircleSubset0.isEmpty();
}"
660,"    public abstract HyperplaneBoundedRegion<Point1S> getSubspaceRegion();

    /** Return the object used to perform floating point comparisons, which is the
     * same object used by the underlying {@link GreatCircle}","  public void test9()  throws Throwable  {
      GreatArc greatArc0 = new GreatArc((GreatCircle) null, (AngularInterval.Convex) null);
      HyperplaneBoundedRegion<Point1S> hyperplaneBoundedRegion0 = greatArc0.getSubspaceRegion();
}"
661,"    public abstract HyperplaneBoundedRegion<Point1S> getSubspaceRegion();

    /** Return the object used to perform floating point comparisons, which is the
     * same object used by the underlying {@link GreatCircle}","  public void test10()  throws Throwable  {
      GreatCircle greatCircle0 = mock(GreatCircle.class, new ViolatedAssumptionAnswer());
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle0);
      HyperplaneBoundedRegion<Point1S> hyperplaneBoundedRegion0 = embeddedTreeGreatCircleSubset0.getSubspaceRegion();
}"
662,"    public double getSize() {
        return getSubspaceRegion().getSize();
    }","  public void test11()  throws Throwable  {
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset((GreatCircle) null, false);
      double double0 = embeddedTreeGreatCircleSubset0.getSize();
}"
663,"    public double getSize() {
        return getSubspaceRegion().getSize();
    }","  public void test12()  throws Throwable  {
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset((GreatCircle) null, true);
      double double0 = embeddedTreeGreatCircleSubset0.getSize();
}"
664,"    public Precision.DoubleEquivalence getPrecision() {
        return circle.getPrecision();
    }","  public void test13()  throws Throwable  {
      GreatCircle greatCircle0 = mock(GreatCircle.class, new ViolatedAssumptionAnswer());
      doReturn((Precision.DoubleEquivalence) null).when(greatCircle0).getPrecision();
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = embeddedTreeGreatCircleSubset0.getPrecision();
}"
665,"    public GreatCircle getHyperplane() {
        return getCircle();
    }","  public void test14()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      GreatCircle greatCircle1 = greatArc0.getHyperplane();
}"
666,"    public GreatCircle getCircle() {
        return circle;
    }","  public void test15()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      GreatCircle greatCircle1 = greatArc0.getCircle();
}"
667,"    public Point2S closest(final Point2S pt) {
        return HyperplaneSubsets.closestToEmbeddedRegion(pt, circle, getSubspaceRegion());
    }","  public void test16()  throws Throwable  {
      GreatCircle greatCircle0 = mock(GreatCircle.class, new ViolatedAssumptionAnswer());
      doReturn((Point) null).when(greatCircle0).toSpace(any(org.apache.commons.geometry.spherical.oned.Point1S.class));
      doReturn((Point) null).when(greatCircle0).toSubspace(any(org.apache.commons.geometry.spherical.twod.Point2S.class));
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = new GreatArc(greatCircle0, angularInterval_Convex0);
      Point2S point2S0 = Point2S.MINUS_K;
      Point2S point2S1 = greatArc0.closest(point2S0);
}"
668,"    public Point2S closest(final Point2S pt) {
        return HyperplaneSubsets.closestToEmbeddedRegion(pt, circle, getSubspaceRegion());
    }","  public void test17()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Point2S point2S0 = Point2S.of(0.0, 0.0);
      Point2S point2S1 = greatArc0.closest(point2S0);
}"
669,"    public Point2S closest(final Point2S pt) {
        return HyperplaneSubsets.closestToEmbeddedRegion(pt, circle, getSubspaceRegion());
    }","  public void test18()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-1.5707963267948966), (-1.5707963267948966), (-1.5707963267948966));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = greatCircle0.arc(angularInterval_Convex0);
      Point2S point2S0 = Point2S.PLUS_K;
      Point2S point2S1 = greatArc0.closest(point2S0);
}"
670,"    public RegionLocation classify(final Point2S pt) {
        return HyperplaneSubsets.classifyAgainstEmbeddedRegion(pt, circle, getSubspaceRegion());
    }","  public void test19()  throws Throwable  {
      GreatCircle greatCircle0 = mock(GreatCircle.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(greatCircle0).contains(any(org.apache.commons.geometry.spherical.twod.Point2S.class));
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle0);
      Point2S point2S0 = Point2S.NaN;
      RegionLocation regionLocation0 = embeddedTreeGreatCircleSubset0.classify(point2S0);
}"
671,"    public Point2S toSpace(final Point1S pt) {
        return circle.toSpace(pt);
    }","  public void test20()  throws Throwable  {
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset((GreatCircle) null);
      // Undeclared exception!
      try { 
        embeddedTreeGreatCircleSubset0.toSpace((Point1S) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircleSubset"", e);
      }
  }"
672,"    public Point2S toSpace(final Point1S pt) {
        return circle.toSpace(pt);
    }","  public void test21()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-1.5707963267948966), (-1.5707963267948966), (-1.5707963267948966));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle0);
      Point1S point1S0 = Point1S.NaN;
      // Undeclared exception!
      try { 
        embeddedTreeGreatCircleSubset0.toSpace(point1S0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
673,"    public boolean isFull() {
        return getSubspaceRegion().isFull();
    }","  public void test22()  throws Throwable  {
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset((GreatCircle) null, (RegionBSPTree1S) null);
      // Undeclared exception!
      try { 
        embeddedTreeGreatCircleSubset0.isFull();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircleSubset"", e);
      }
  }"
674,"    public Precision.DoubleEquivalence getPrecision() {
        return circle.getPrecision();
    }","  public void test23()  throws Throwable  {
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset((GreatCircle) null, false);
      // Undeclared exception!
      try { 
        embeddedTreeGreatCircleSubset0.getPrecision();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircleSubset"", e);
      }
  }"
675,"    public Point2S getCentroid() {
        final Point1S subspaceCentroid = getSubspaceRegion().getCentroid();
        if (subspaceCentroid != null) {
            return getCircle().toSpace(subspaceCentroid);
        }
        return null;
    }","  public void test24()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = new GreatArc(greatCircle0, (AngularInterval.Convex) null);
      // Undeclared exception!
      try { 
        greatArc0.getCentroid();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircleSubset"", e);
      }
  }"
676,"    public GreatCircle getCircle() {
        return circle;
    }","  public void test25()  throws Throwable  {
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset((GreatCircle) null, true);
      GreatCircle greatCircle0 = embeddedTreeGreatCircleSubset0.getCircle();
}"
677,"    public double getSize() {
        return getSubspaceRegion().getSize();
    }","  public void test26()  throws Throwable  {
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset((GreatCircle) null, (RegionBSPTree1S) null);
      // Undeclared exception!
      try { 
        embeddedTreeGreatCircleSubset0.getSize();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircleSubset"", e);
      }
  }"
678,"    public Point2S getCentroid() {
        final Point1S subspaceCentroid = getSubspaceRegion().getCentroid();
        if (subspaceCentroid != null) {
            return getCircle().toSpace(subspaceCentroid);
        }
        return null;
    }","  public void test27()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle0);
      Point2S point2S0 = embeddedTreeGreatCircleSubset0.getCentroid();
}"
679,"    public GreatCircle getHyperplane() {
        return getCircle();
    }","  public void test28()  throws Throwable  {
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset((GreatCircle) null);
      GreatCircle greatCircle0 = embeddedTreeGreatCircleSubset0.getHyperplane();
}"
680,"    public RegionLocation classify(final Point2S pt) {
        return HyperplaneSubsets.classifyAgainstEmbeddedRegion(pt, circle, getSubspaceRegion());
    }","  public void test29()  throws Throwable  {
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset((GreatCircle) null);
      Point2S point2S0 = Point2S.MINUS_I;
      // Undeclared exception!
      try { 
        embeddedTreeGreatCircleSubset0.classify(point2S0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.internal.HyperplaneSubsets"", e);
      }
  }"
681,"    public boolean isFull() {
        return getSubspaceRegion().isFull();
    }","  public void test30()  throws Throwable  {
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset((GreatCircle) null);
      boolean boolean0 = embeddedTreeGreatCircleSubset0.isFull();
}"
682,"    public Precision.DoubleEquivalence getPrecision() {
        return circle.getPrecision();
    }","  public void test31()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(""eGv"").when(precision_DoubleEquivalence0).toString();
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = embeddedTreeGreatCircleSubset0.getPrecision();
}"
683,"    public Point2S closest(final Point2S pt) {
        return HyperplaneSubsets.closestToEmbeddedRegion(pt, circle, getSubspaceRegion());
    }","  public void test32()  throws Throwable  {
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset((GreatCircle) null);
      Point2S point2S0 = Point2S.PLUS_K;
      // Undeclared exception!
      try { 
        embeddedTreeGreatCircleSubset0.closest(point2S0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.internal.HyperplaneSubsets"", e);
      }
  }"
684,"    public boolean isEmpty() {
        return getSubspaceRegion().isEmpty();
    }","  public void test33()  throws Throwable  {
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset((GreatCircle) null);
      boolean boolean0 = embeddedTreeGreatCircleSubset0.isEmpty();
}"
685,"    public Point1S toSubspace(final Point2S pt) {
        return circle.toSubspace(pt);
    }","  public void test34()  throws Throwable  {
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset((GreatCircle) null);
      // Undeclared exception!
      try { 
        embeddedTreeGreatCircleSubset0.toSubspace((Point2S) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircleSubset"", e);
      }
  }"
686,"    public Point2S toSpace(final Point1S pt) {
        return circle.toSpace(pt);
    }","  public void test35()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle0);
      Angle.Rad angle_Rad0 = Angle.Rad.ZERO;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Point2S point2S0 = embeddedTreeGreatCircleSubset0.toSpace(point1S0);
}"
687,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Transform2S)) {
            return false;
        }
        final Transform2S other = (Transform2S) obj;

        return euclideanTransform.equals(other.euclideanTransform);
    }","  public void test0()  throws Throwable  {
      Transform2S transform2S0 = Transform2S.identity();
      Point2S point2S0 = Point2S.PLUS_J;
      Transform2S transform2S1 = transform2S0.rotate(point2S0, 1344.40420697);
}"
688,"    public Point2S apply(final Point2S pt) {
        final Vector3D vec = pt.getVector();
        return Point2S.from(euclideanTransform.apply(vec));
    }","  public void test1()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Transform2S transform2S0 = Transform2S.createRotation(point2S0, 2713.4540800283467);
      Point2S point2S1 = Point2S.PLUS_K;
      Point2S point2S2 = transform2S0.apply(point2S1);
}"
689,"    public Point2S apply(final Point2S pt) {
        final Vector3D vec = pt.getVector();
        return Point2S.from(euclideanTransform.apply(vec));
    }","  public void test2()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Transform2S transform2S0 = Transform2S.createRotation(point2S0, 2713.4540800283467);
      Point2S point2S1 = transform2S0.apply(point2S0);
}"
690,"    public Transform2S rotate(final Point2S pt, final double angle) {
        return premultiply(createRotation(pt, angle));
    }","  public void test3()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Transform2S transform2S0 = Transform2S.createReflection((Vector3D) vector3D_Unit0);
      Point2S point2S0 = Point2S.of((-2279.7187292381977), 1.0160400267861482);
      // Undeclared exception!
      try { 
        transform2S0.rotate(point2S0, Double.POSITIVE_INFINITY);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid angle: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation"", e);
      }
  }"
691,"    public Transform2S rotate(final Point2S pt, final double angle) {
        return premultiply(createRotation(pt, angle));
    }","  public void test4()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_J;
      Transform2S transform2S0 = Transform2S.createReflection(point2S0);
      // Undeclared exception!
      try { 
        transform2S0.rotate((QuaternionRotation) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.Transform2S"", e);
      }
  }"
692,"    public Transform2S rotate(final Point2S pt, final double angle) {
        return premultiply(createRotation(pt, angle));
    }","  public void test5()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Transform2S transform2S0 = Transform2S.createReflection(point2S0);
      // Undeclared exception!
      try { 
        transform2S0.rotate((Vector3D) null, 1816.3051941957694);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation"", e);
      }
  }"
693,"    public Transform2S rotate(final Point2S pt, final double angle) {
        return premultiply(createRotation(pt, angle));
    }","  public void test6()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      Transform2S transform2S0 = Transform2S.createReflection(point2S0);
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        transform2S0.rotate(vector3D0, (-3513.7380155));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
694,"    public Transform2S reflect(final Point2S pole) {
        return premultiply(createReflection(pole));
    }","  public void test7()  throws Throwable  {
      Transform2S transform2S0 = Transform2S.identity();
      // Undeclared exception!
      try { 
        transform2S0.reflect((Point2S) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.Transform2S"", e);
      }
  }"
695,"    public Transform2S reflect(final Point2S pole) {
        return premultiply(createReflection(pole));
    }","  public void test8()  throws Throwable  {
      Transform2S transform2S0 = Transform2S.identity();
      // Undeclared exception!
      try { 
        transform2S0.reflect((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
696,"    public Transform2S reflect(final Point2S pole) {
        return premultiply(createReflection(pole));
    }","  public void test9()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 0.017453292519943295, 0.017453292519943295, 0.017453292519943295);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Transform2S transform2S0 = Transform2S.createRotation(quaternionRotation0);
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        transform2S0.reflect(vector3D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
697,"    public Transform2S premultiply(final Transform2S other) {
        return multiply(other, this);
    }","  public void test10()  throws Throwable  {
      Transform2S transform2S0 = Transform2S.identity();
      // Undeclared exception!
      try { 
        transform2S0.premultiply((Transform2S) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.Transform2S"", e);
      }
  }"
698,"    public Transform2S multiply(final Transform2S other) {
        return multiply(this, other);
    }","  public void test11()  throws Throwable  {
      Transform2S transform2S0 = Transform2S.identity();
      // Undeclared exception!
      try { 
        transform2S0.multiply((Transform2S) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.Transform2S"", e);
      }
  }"
699,"    public static Transform2S createRotation(final Point2S pt, final double angle) {
        return createRotation(pt.getVector(), angle);
    }","  public void test12()  throws Throwable  {
      Point2S point2S0 = Point2S.NaN;
      // Undeclared exception!
      try { 
        Transform2S.createRotation(point2S0, 0.0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation"", e);
      }
  }"
700,"    public static Transform2S createRotation(final Point2S pt, final double angle) {
        return createRotation(pt.getVector(), angle);
    }","  public void test13()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      // Undeclared exception!
      try { 
        Transform2S.createRotation(point2S0, Double.POSITIVE_INFINITY);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid angle: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation"", e);
      }
  }"
701,"    public static Transform2S createRotation(final Point2S pt, final double angle) {
        return createRotation(pt.getVector(), angle);
    }","  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Transform2S.createRotation((QuaternionRotation) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.Transform2S"", e);
      }
  }"
702,"    public static Transform2S createRotation(final Point2S pt, final double angle) {
        return createRotation(pt.getVector(), angle);
    }","  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Transform2S.createRotation((Vector3D) null, 4.71238898038469);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation"", e);
      }
  }"
703,"    public static Transform2S createRotation(final Point2S pt, final double angle) {
        return createRotation(pt.getVector(), angle);
    }","  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        Transform2S.createRotation(vector3D0, 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
704,"    public static Transform2S createReflection(final Point2S pole) {
        return createReflection(pole.getVector());
    }","  public void test17()  throws Throwable  {
      Point2S point2S0 = Point2S.NaN;
      // Undeclared exception!
      try { 
        Transform2S.createReflection(point2S0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
705,"    public static Transform2S createReflection(final Point2S pole) {
        return createReflection(pole.getVector());
    }","  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Transform2S.createReflection((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
706,"    public static Transform2S createReflection(final Point2S pole) {
        return createReflection(pole.getVector());
    }","  public void test19()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D vector3D0 = vector3D_Unit1.add((Vector3D) vector3D_Unit0);
      // Undeclared exception!
      try { 
        Transform2S.createReflection(vector3D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
707,"    public Point2S apply(final Point2S pt) {
        final Vector3D vec = pt.getVector();
        return Point2S.from(euclideanTransform.apply(vec));
    }","  public void test20()  throws Throwable  {
      Transform2S transform2S0 = Transform2S.identity();
      // Undeclared exception!
      try { 
        transform2S0.apply((Point2S) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.Transform2S"", e);
      }
  }"
708,"    public boolean preservesOrientation() {
        return euclideanTransform.preservesOrientation();
    }","  public void test21()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      Transform2S transform2S0 = Transform2S.createRotation(vector3D0, 0.0);
      boolean boolean0 = transform2S0.preservesOrientation();
}"
709,"    public Transform2S premultiply(final Transform2S other) {
        return multiply(other, this);
    }","  public void test22()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Transform2S transform2S0 = Transform2S.createRotation(point2S0, (-285.69428));
      Transform2S transform2S1 = transform2S0.premultiply(transform2S0);
}"
710,"    public AffineTransformMatrix3D getEuclideanTransform() {
        return euclideanTransform;
    }","  public void test23()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      Transform2S transform2S0 = Transform2S.createReflection(point2S0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = transform2S0.getEuclideanTransform();
}"
711,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Transform2S)) {
            return false;
        }
        final Transform2S other = (Transform2S) obj;

        return euclideanTransform.equals(other.euclideanTransform);
    }","  public void test24()  throws Throwable  {
      Transform2S transform2S0 = Transform2S.identity();
      Transform2S transform2S1 = transform2S0.inverse();
      boolean boolean0 = transform2S1.equals(transform2S0);
}"
712,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Transform2S)) {
            return false;
        }
        final Transform2S other = (Transform2S) obj;

        return euclideanTransform.equals(other.euclideanTransform);
    }","  public void test25()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Transform2S transform2S0 = Transform2S.createRotation(quaternionRotation0);
      boolean boolean0 = transform2S0.equals(transform2S0);
}"
713,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Transform2S)) {
            return false;
        }
        final Transform2S other = (Transform2S) obj;

        return euclideanTransform.equals(other.euclideanTransform);
    }","  public void test26()  throws Throwable  {
      Transform2S transform2S0 = Transform2S.identity();
      Object object0 = new Object();
      boolean boolean0 = transform2S0.equals(object0);
}"
714,"    public Point2S apply(final Point2S pt) {
        final Vector3D vec = pt.getVector();
        return Point2S.from(euclideanTransform.apply(vec));
    }","  public void test27()  throws Throwable  {
      Transform2S transform2S0 = Transform2S.identity();
      Point2S point2S0 = Point2S.PLUS_J;
      Point2S point2S1 = transform2S0.apply(point2S0);
}"
715,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Transform2S)) {
            return false;
        }
        final Transform2S other = (Transform2S) obj;

        return euclideanTransform.equals(other.euclideanTransform);
    }","  public void test28()  throws Throwable  {
      Transform2S transform2S0 = Transform2S.identity();
      Point2S point2S0 = Point2S.PLUS_J;
      Transform2S transform2S1 = transform2S0.reflect(point2S0);
}"
716,"    public Transform2S multiply(final Transform2S other) {
        return multiply(this, other);
    }","  public void test29()  throws Throwable  {
      Transform2S transform2S0 = Transform2S.identity();
      Transform2S transform2S1 = transform2S0.multiply(transform2S0);
}"
717,"    public int hashCode() {
        return euclideanTransform.hashCode();
    }","  public void test30()  throws Throwable  {
      Transform2S transform2S0 = Transform2S.identity();
      transform2S0.hashCode();
  }"
718,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Transform2S)) {
            return false;
        }
        final Transform2S other = (Transform2S) obj;

        return euclideanTransform.equals(other.euclideanTransform);
    }","  public void test31()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Transform2S transform2S0 = Transform2S.identity();
      Transform2S transform2S1 = transform2S0.reflect((Vector3D) vector3D_Unit0);
}"
719,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Transform2S)) {
            return false;
        }
        final Transform2S other = (Transform2S) obj;

        return euclideanTransform.equals(other.euclideanTransform);
    }","  public void test32()  throws Throwable  {
      Transform2S transform2S0 = Transform2S.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D_Unit0, vector3D_Unit0);
      Transform2S transform2S1 = transform2S0.rotate(quaternionRotation0);
}"
720,"    public String toString() {
        final StringBuilder sb = new StringBuilder();

        sb.append(this.getClass().getSimpleName())
            .append(""[euclideanTransform= "")
            .append(getEuclideanTransform())
            .append(']');

        return sb.toString();
    }","  public void test33()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Transform2S transform2S0 = Transform2S.createReflection(point2S0);
      String string0 = transform2S0.toString();
}"
721,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Transform2S)) {
            return false;
        }
        final Transform2S other = (Transform2S) obj;

        return euclideanTransform.equals(other.euclideanTransform);
    }","  public void test34()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Transform2S transform2S0 = Transform2S.identity();
      Transform2S transform2S1 = transform2S0.rotate((Vector3D) vector3D_Unit0, (-1987.92436));
}"
722,"    public boolean preservesOrientation() {
        return euclideanTransform.preservesOrientation();
    }","  public void test35()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_J;
      Transform2S transform2S0 = Transform2S.createReflection(point2S0);
      boolean boolean0 = transform2S0.preservesOrientation();
}"
723,"    public Transform2S rotate(final Point2S pt, final double angle) {
        return premultiply(createRotation(pt, angle));
    }","  public void test36()  throws Throwable  {
      Transform2S transform2S0 = Transform2S.identity();
      Point2S point2S0 = Point2S.NaN;
      // Undeclared exception!
      try { 
        transform2S0.rotate(point2S0, (-3.141592653589793));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation"", e);
      }
  }"
724,"    public void add(final GreatArc arc) {
        GreatCircles.validateGreatCirclesEquivalent(getCircle(), arc.getCircle());

        region.add(arc.getSubspaceRegion());
    }","  public void test0()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = mock(GreatCircle.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(greatCircle0).getPrecision();
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle0, true);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = embeddedTreeGreatCircleSubset0.getPrecision();
      GreatCircle greatCircle1 = new GreatCircle(vector3D_Unit0, vector3D_Unit1, vector3D_Unit0, precision_DoubleEquivalence1);
      Point2S point2S0 = Point2S.PLUS_K;
      Transform2S transform2S0 = Transform2S.createRotation(point2S0, (-1.5707963267948966));
      greatCircle1.transform(transform2S0);
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.empty();
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset1 = new EmbeddedTreeGreatCircleSubset(greatCircle1, regionBSPTree1S0);
      GreatArc greatArc0 = greatCircle1.span();
      // Undeclared exception!
      try { 
        embeddedTreeGreatCircleSubset1.add(greatArc0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Arguments do not represent the same great circle. Expected GreatCircle[pole= (0.0, 1.0, 0.0), u= (1.0, 0.0, 0.0), v= (0.0, 1.0, 0.0)] but was GreatCircle[pole= (0.0, 1.0, 0.0), u= (1.0, 0.0, 0.0), v= (0.0, 1.0, 0.0)].
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircles"", e);
      }
  }"
725,"    public List<GreatArc> toConvex() {
        return region.toIntervals().stream()
                .flatMap(i -> i.toConvex().stream())
                .map(i -> GreatCircles.arcFromInterval(getCircle(), i))
                .collect(Collectors.toList());
    }","  public void test1()  throws Throwable  {
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.full();
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset((GreatCircle) null, regionBSPTree1S0);
      List<GreatArc> list0 = embeddedTreeGreatCircleSubset0.toConvex();
}"
726,"    public RegionBSPTree1S getSubspaceRegion() {
        return region;
    }","  public void test2()  throws Throwable  {
      GreatCircle greatCircle0 = mock(GreatCircle.class, new ViolatedAssumptionAnswer());
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle0, false);
      RegionBSPTree1S regionBSPTree1S0 = embeddedTreeGreatCircleSubset0.getSubspaceRegion();
}"
727,"    public EmbeddedTreeGreatCircleSubset transform(final Transform<Point2S> transform) {
        final GreatCircle circle = getCircle().transform(transform);

        return new EmbeddedTreeGreatCircleSubset(circle, region.copy());
    }","  public void test3()  throws Throwable  {
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset((GreatCircle) null);
      Point2S point2S0 = Point2S.PLUS_K;
      Transform2S transform2S0 = Transform2S.createRotation(point2S0, 0.0);
      // Undeclared exception!
      try { 
        embeddedTreeGreatCircleSubset0.transform(transform2S0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.EmbeddedTreeGreatCircleSubset"", e);
      }
  }"
728,"    public List<GreatArc> toConvex() {
        return region.toIntervals().stream()
                .flatMap(i -> i.toConvex().stream())
                .map(i -> GreatCircles.arcFromInterval(getCircle(), i))
                .collect(Collectors.toList());
    }","  public void test4()  throws Throwable  {
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset((GreatCircle) null, (RegionBSPTree1S) null);
      // Undeclared exception!
      try { 
        embeddedTreeGreatCircleSubset0.toConvex();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.EmbeddedTreeGreatCircleSubset"", e);
      }
  }"
729,"    public List<GreatArc> toConvex() {
        return region.toIntervals().stream()
                .flatMap(i -> i.toConvex().stream())
                .map(i -> GreatCircles.arcFromInterval(getCircle(), i))
                .collect(Collectors.toList());
    }","  public void test5()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(false, false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle0, true);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = embeddedTreeGreatCircleSubset0.getPrecision();
      AngularInterval angularInterval0 = AngularInterval.of((-1630.27139818), (-1630.27139818), precision_DoubleEquivalence1);
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.fromInterval(angularInterval0);
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset1 = new EmbeddedTreeGreatCircleSubset(greatCircle0, regionBSPTree1S0);
      // Undeclared exception!
      try { 
        embeddedTreeGreatCircleSubset1.toConvex();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Interval is not convex: [-1,630.271, -1,628.808]
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.AngularInterval$Convex"", e);
      }
  }"
730,"    public Split<EmbeddedTreeGreatCircleSubset> split(final Hyperplane<Point2S> splitter) {

        final GreatCircle splitterCircle = (GreatCircle) splitter;
        final GreatCircle thisCircle = getCircle();

        final Point2S intersection = splitterCircle.intersection(thisCircle);

        EmbeddedTreeGreatCircleSubset minus = null;
        EmbeddedTreeGreatCircleSubset plus = null;

        if (intersection != null) {
            final CutAngle subSplitter = CutAngles.createPositiveFacing(
                    thisCircle.toSubspace(intersection), splitterCircle.getPrecision());

            final Split<RegionBSPTree1S> subSplit = region.splitDiameter(subSplitter);
            final SplitLocation subLoc = subSplit.getLocation();

            if (subLoc == SplitLocation.MINUS) {
                minus = this;
            } else if (subLoc == SplitLocation.PLUS) {
                plus = this;
            } else if (subLoc == SplitLocation.BOTH) {
                minus = new EmbeddedTreeGreatCircleSubset(thisCircle, subSplit.getMinus());
                plus =  new EmbeddedTreeGreatCircleSubset(thisCircle, subSplit.getPlus());
            }
        }

        return new Split<>(minus, plus);
    }","  public void test6()  throws Throwable  {
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset((GreatCircle) null);
      // Undeclared exception!
      try { 
        embeddedTreeGreatCircleSubset0.split((Hyperplane<Point2S>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.EmbeddedTreeGreatCircleSubset"", e);
      }
  }"
731,"    public Split<EmbeddedTreeGreatCircleSubset> split(final Hyperplane<Point2S> splitter) {

        final GreatCircle splitterCircle = (GreatCircle) splitter;
        final GreatCircle thisCircle = getCircle();

        final Point2S intersection = splitterCircle.intersection(thisCircle);

        EmbeddedTreeGreatCircleSubset minus = null;
        EmbeddedTreeGreatCircleSubset plus = null;

        if (intersection != null) {
            final CutAngle subSplitter = CutAngles.createPositiveFacing(
                    thisCircle.toSubspace(intersection), splitterCircle.getPrecision());

            final Split<RegionBSPTree1S> subSplit = region.splitDiameter(subSplitter);
            final SplitLocation subLoc = subSplit.getLocation();

            if (subLoc == SplitLocation.MINUS) {
                minus = this;
            } else if (subLoc == SplitLocation.PLUS) {
                plus = this;
            } else if (subLoc == SplitLocation.BOTH) {
                minus = new EmbeddedTreeGreatCircleSubset(thisCircle, subSplit.getMinus());
                plus =  new EmbeddedTreeGreatCircleSubset(thisCircle, subSplit.getPlus());
            }
        }

        return new Split<>(minus, plus);
    }","  public void test7()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle0);
      // Undeclared exception!
      try { 
        embeddedTreeGreatCircleSubset0.split(greatCircle0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
732,"    public void add(final GreatArc arc) {
        GreatCircles.validateGreatCirclesEquivalent(getCircle(), arc.getCircle());

        region.add(arc.getSubspaceRegion());
    }","  public void test8()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle0, false);
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = new GreatArc(greatCircle0, angularInterval_Convex0);
      // Undeclared exception!
      try { 
        embeddedTreeGreatCircleSubset0.add(greatArc0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
733,"    public void add(final GreatArc arc) {
        GreatCircles.validateGreatCirclesEquivalent(getCircle(), arc.getCircle());

        region.add(arc.getSubspaceRegion());
    }","  public void test9()  throws Throwable  {
      RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.full();
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset((GreatCircle) null, regionBSPTree1S0);
      // Undeclared exception!
      try { 
        embeddedTreeGreatCircleSubset0.add(embeddedTreeGreatCircleSubset0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircles"", e);
      }
  }"
734,"    public RegionBSPTree1S getSubspaceRegion() {
        return region;
    }","  public void test10()  throws Throwable  {
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset((GreatCircle) null, (RegionBSPTree1S) null);
      RegionBSPTree1S regionBSPTree1S0 = embeddedTreeGreatCircleSubset0.getSubspaceRegion();
}"
735,"    public Split<EmbeddedTreeGreatCircleSubset> split(final Hyperplane<Point2S> splitter) {

        final GreatCircle splitterCircle = (GreatCircle) splitter;
        final GreatCircle thisCircle = getCircle();

        final Point2S intersection = splitterCircle.intersection(thisCircle);

        EmbeddedTreeGreatCircleSubset minus = null;
        EmbeddedTreeGreatCircleSubset plus = null;

        if (intersection != null) {
            final CutAngle subSplitter = CutAngles.createPositiveFacing(
                    thisCircle.toSubspace(intersection), splitterCircle.getPrecision());

            final Split<RegionBSPTree1S> subSplit = region.splitDiameter(subSplitter);
            final SplitLocation subLoc = subSplit.getLocation();

            if (subLoc == SplitLocation.MINUS) {
                minus = this;
            } else if (subLoc == SplitLocation.PLUS) {
                plus = this;
            } else if (subLoc == SplitLocation.BOTH) {
                minus = new EmbeddedTreeGreatCircleSubset(thisCircle, subSplit.getMinus());
                plus =  new EmbeddedTreeGreatCircleSubset(thisCircle, subSplit.getPlus());
            }
        }

        return new Split<>(minus, plus);
    }","  public void test11()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      doReturn((-1630.2713982), (-1630.2713982), (-1630.2713982), (-1630.2713982), (-1630.2713982)).when(precision_DoubleEquivalence0).signum(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit1, vector3D_Unit1, vector3D_Unit0, precision_DoubleEquivalence0);
      Transform2S transform2S0 = Transform2S.identity();
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle0, true);
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset1 = embeddedTreeGreatCircleSubset0.transform(transform2S0);
      Split<EmbeddedTreeGreatCircleSubset> split0 = embeddedTreeGreatCircleSubset1.split(greatCircle0);
}"
736,"    public Split<EmbeddedTreeGreatCircleSubset> split(final Hyperplane<Point2S> splitter) {

        final GreatCircle splitterCircle = (GreatCircle) splitter;
        final GreatCircle thisCircle = getCircle();

        final Point2S intersection = splitterCircle.intersection(thisCircle);

        EmbeddedTreeGreatCircleSubset minus = null;
        EmbeddedTreeGreatCircleSubset plus = null;

        if (intersection != null) {
            final CutAngle subSplitter = CutAngles.createPositiveFacing(
                    thisCircle.toSubspace(intersection), splitterCircle.getPrecision());

            final Split<RegionBSPTree1S> subSplit = region.splitDiameter(subSplitter);
            final SplitLocation subLoc = subSplit.getLocation();

            if (subLoc == SplitLocation.MINUS) {
                minus = this;
            } else if (subLoc == SplitLocation.PLUS) {
                plus = this;
            } else if (subLoc == SplitLocation.BOTH) {
                minus = new EmbeddedTreeGreatCircleSubset(thisCircle, subSplit.getMinus());
                plus =  new EmbeddedTreeGreatCircleSubset(thisCircle, subSplit.getPlus());
            }
        }

        return new Split<>(minus, plus);
    }","  public void test12()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      doReturn(1.0, 1.0, 1.0, 1.0, 1.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit1, vector3D_Unit1, vector3D_Unit0, precision_DoubleEquivalence0);
      Transform2S transform2S0 = Transform2S.identity();
      GreatCircle greatCircle1 = greatCircle0.transform(transform2S0);
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle1, true);
      Split<EmbeddedTreeGreatCircleSubset> split0 = embeddedTreeGreatCircleSubset0.split(greatCircle0);
}"
737,"    public Split<EmbeddedTreeGreatCircleSubset> split(final Hyperplane<Point2S> splitter) {

        final GreatCircle splitterCircle = (GreatCircle) splitter;
        final GreatCircle thisCircle = getCircle();

        final Point2S intersection = splitterCircle.intersection(thisCircle);

        EmbeddedTreeGreatCircleSubset minus = null;
        EmbeddedTreeGreatCircleSubset plus = null;

        if (intersection != null) {
            final CutAngle subSplitter = CutAngles.createPositiveFacing(
                    thisCircle.toSubspace(intersection), splitterCircle.getPrecision());

            final Split<RegionBSPTree1S> subSplit = region.splitDiameter(subSplitter);
            final SplitLocation subLoc = subSplit.getLocation();

            if (subLoc == SplitLocation.MINUS) {
                minus = this;
            } else if (subLoc == SplitLocation.PLUS) {
                plus = this;
            } else if (subLoc == SplitLocation.BOTH) {
                minus = new EmbeddedTreeGreatCircleSubset(thisCircle, subSplit.getMinus());
                plus =  new EmbeddedTreeGreatCircleSubset(thisCircle, subSplit.getPlus());
            }
        }

        return new Split<>(minus, plus);
    }","  public void test13()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit1, vector3D_Unit1, vector3D_Unit0, precision_DoubleEquivalence0);
      Transform2S transform2S0 = Transform2S.identity();
      GreatCircle greatCircle1 = greatCircle0.transform(transform2S0);
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle1, false);
      Split<EmbeddedTreeGreatCircleSubset> split0 = embeddedTreeGreatCircleSubset0.split(greatCircle0);
}"
738,"    public Split<EmbeddedTreeGreatCircleSubset> split(final Hyperplane<Point2S> splitter) {

        final GreatCircle splitterCircle = (GreatCircle) splitter;
        final GreatCircle thisCircle = getCircle();

        final Point2S intersection = splitterCircle.intersection(thisCircle);

        EmbeddedTreeGreatCircleSubset minus = null;
        EmbeddedTreeGreatCircleSubset plus = null;

        if (intersection != null) {
            final CutAngle subSplitter = CutAngles.createPositiveFacing(
                    thisCircle.toSubspace(intersection), splitterCircle.getPrecision());

            final Split<RegionBSPTree1S> subSplit = region.splitDiameter(subSplitter);
            final SplitLocation subLoc = subSplit.getLocation();

            if (subLoc == SplitLocation.MINUS) {
                minus = this;
            } else if (subLoc == SplitLocation.PLUS) {
                plus = this;
            } else if (subLoc == SplitLocation.BOTH) {
                minus = new EmbeddedTreeGreatCircleSubset(thisCircle, subSplit.getMinus());
                plus =  new EmbeddedTreeGreatCircleSubset(thisCircle, subSplit.getPlus());
            }
        }

        return new Split<>(minus, plus);
    }","  public void test14()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, true, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      doReturn(0.0, 0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit1, vector3D_Unit1, vector3D_Unit0, precision_DoubleEquivalence0);
      Transform2S transform2S0 = Transform2S.identity();
      GreatCircle greatCircle1 = greatCircle0.transform(transform2S0);
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle1, true);
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset1 = embeddedTreeGreatCircleSubset0.transform(transform2S0);
      Split<EmbeddedTreeGreatCircleSubset> split0 = embeddedTreeGreatCircleSubset1.split(greatCircle0);
}"
739,"    public Split<EmbeddedTreeGreatCircleSubset> split(final Hyperplane<Point2S> splitter) {

        final GreatCircle splitterCircle = (GreatCircle) splitter;
        final GreatCircle thisCircle = getCircle();

        final Point2S intersection = splitterCircle.intersection(thisCircle);

        EmbeddedTreeGreatCircleSubset minus = null;
        EmbeddedTreeGreatCircleSubset plus = null;

        if (intersection != null) {
            final CutAngle subSplitter = CutAngles.createPositiveFacing(
                    thisCircle.toSubspace(intersection), splitterCircle.getPrecision());

            final Split<RegionBSPTree1S> subSplit = region.splitDiameter(subSplitter);
            final SplitLocation subLoc = subSplit.getLocation();

            if (subLoc == SplitLocation.MINUS) {
                minus = this;
            } else if (subLoc == SplitLocation.PLUS) {
                plus = this;
            } else if (subLoc == SplitLocation.BOTH) {
                minus = new EmbeddedTreeGreatCircleSubset(thisCircle, subSplit.getMinus());
                plus =  new EmbeddedTreeGreatCircleSubset(thisCircle, subSplit.getPlus());
            }
        }

        return new Split<>(minus, plus);
    }","  public void test15()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, true, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      doReturn(0.0, 0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit1, vector3D_Unit1, vector3D_Unit0, precision_DoubleEquivalence0);
      Transform2S transform2S0 = Transform2S.identity();
      GreatCircle greatCircle1 = greatCircle0.transform(transform2S0);
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle1, true);
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset1 = embeddedTreeGreatCircleSubset0.transform(transform2S0);
      Split<EmbeddedTreeGreatCircleSubset> split0 = embeddedTreeGreatCircleSubset1.split(greatCircle0);
      Split<EmbeddedTreeGreatCircleSubset> split1 = embeddedTreeGreatCircleSubset0.split(greatCircle1);
}"
740,"    public void add(final GreatArc arc) {
        GreatCircles.validateGreatCirclesEquivalent(getCircle(), arc.getCircle());

        region.add(arc.getSubspaceRegion());
    }","  public void test16()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, true, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      doReturn(0.0, 0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit1, vector3D_Unit1, vector3D_Unit0, precision_DoubleEquivalence0);
      Transform2S transform2S0 = Transform2S.identity();
      GreatCircle greatCircle1 = greatCircle0.transform(transform2S0);
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle1, true);
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset1 = embeddedTreeGreatCircleSubset0.transform(transform2S0);
      embeddedTreeGreatCircleSubset1.split(greatCircle0);
      embeddedTreeGreatCircleSubset1.add(embeddedTreeGreatCircleSubset0);
}"
741,"    public EmbeddedTreeGreatCircleSubset transform(final Transform<Point2S> transform) {
        final GreatCircle circle = getCircle().transform(transform);

        return new EmbeddedTreeGreatCircleSubset(circle, region.copy());
    }","  public void test17()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Transform2S transform2S0 = Transform2S.identity();
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle0, false);
      // Undeclared exception!
      try { 
        embeddedTreeGreatCircleSubset0.transform(transform2S0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
742,"    public void add(final GreatArc arc) {
        GreatCircles.validateGreatCirclesEquivalent(getCircle(), arc.getCircle());

        region.add(arc.getSubspaceRegion());
    }","  public void test18()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = mock(GreatCircle.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(greatCircle0).getPrecision();
      doReturn(false).when(greatCircle0).eq(any(org.apache.commons.geometry.spherical.twod.GreatCircle.class) , any(org.apache.commons.numbers.core.Precision.DoubleEquivalence.class));
      doReturn((String) null, (String) null).when(greatCircle0).toString();
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle0, false);
      // Undeclared exception!
      try { 
        embeddedTreeGreatCircleSubset0.add(embeddedTreeGreatCircleSubset0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Arguments do not represent the same great circle. Expected null but was null.
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircles"", e);
      }
  }"
743,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(this.getClass().getSimpleName())
            .append('[')
            .append(""circle= "")
            .append(getCircle())
            .append("", region= "")
            .append(region)
            .append(']');

        return sb.toString();
    }","  public void test19()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle0, false);
      String string0 = embeddedTreeGreatCircleSubset0.toString();
}"
744,"    public List<GreatArc> toConvex() {
        return region.toIntervals().stream()
                .flatMap(i -> i.toConvex().stream())
                .map(i -> GreatCircles.arcFromInterval(getCircle(), i))
                .collect(Collectors.toList());
    }","  public void test20()  throws Throwable  {
      EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset((GreatCircle) null);
      List<GreatArc> list0 = embeddedTreeGreatCircleSubset0.toConvex();
}"
745,"    public BoundaryList2S toList() {
        return this;
    }","  public void test0()  throws Throwable  {
      Vector<GreatArc> vector0 = new Vector<GreatArc>();
      vector0.add((GreatArc) null);
      BoundaryList2S boundaryList2S0 = new BoundaryList2S(vector0);
      BoundaryList2S boundaryList2S1 = boundaryList2S0.toList();
}"
746,"    public BoundaryList2S toList() {
        return this;
    }","  public void test1()  throws Throwable  {
      Stack<GreatArc> stack0 = new Stack<GreatArc>();
      BoundaryList2S boundaryList2S0 = new BoundaryList2S(stack0);
      BoundaryList2S boundaryList2S1 = boundaryList2S0.toList();
}"
747,"    public BoundaryList2S(final List<? extends GreatArc> boundaries) {
        super(boundaries);
    }","  public void test2()  throws Throwable  {
      BoundaryList2S boundaryList2S0 = null;
      try {
        boundaryList2S0 = new BoundaryList2S((List<? extends GreatArc>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableCollection"", e);
      }
  }"
748,"    protected RegionNode2S createNode() {
        return new RegionNode2S(this);
    }","  public void test0()  throws Throwable  {
      ConvexArea2S convexArea2S0 = ConvexArea2S.full();
      RegionBSPTree2S regionBSPTree2S0 = convexArea2S0.toTree();
      RegionBSPTree2S.RegionNode2S regionBSPTree2S_RegionNode2S0 = regionBSPTree2S0.createNode();
      RegionBSPTree2S.RegionNode2S regionBSPTree2S_RegionNode2S1 = regionBSPTree2S_RegionNode2S0.getSelf();
}"
749,"    protected void invalidate() {
        super.invalidate();

        boundaryPaths = null;
    }","  public void test1()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.empty();
      regionBSPTree2S0.invalidate();
  }"
750,"    public List<ConvexArea2S> toConvex() {
        final List<ConvexArea2S> result = new ArrayList<>();

        toConvexRecursive(getRoot(), ConvexArea2S.full(), result);

        return result;
    }","  public void test2()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.full();
      List<ConvexArea2S> list0 = regionBSPTree2S0.toConvex();
}"
751,"    public Split<RegionBSPTree2S> split(final Hyperplane<Point2S> splitter) {
        return split(splitter, empty(), empty());
    }","  public void test3()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.full();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      Split<RegionBSPTree2S> split0 = regionBSPTree2S0.split(greatCircle0);
}"
752,"    public Point2S project(final Point2S pt) {
        // use our custom projector so that we can disambiguate points that are
        // actually equidistant from the target point
        final BoundaryProjector2S projector = new BoundaryProjector2S(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test4()  throws Throwable  {
      LinkedHashSet<GreatArc> linkedHashSet0 = new LinkedHashSet<GreatArc>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      linkedHashSet0.add(greatArc0);
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.from((Iterable<GreatArc>) linkedHashSet0, true);
      Point2S point2S0 = Point2S.PLUS_K;
      Point2S point2S1 = regionBSPTree2S0.project(point2S0);
}"
753,"    public Point2S project(final Point2S pt) {
        // use our custom projector so that we can disambiguate points that are
        // actually equidistant from the target point
        final BoundaryProjector2S projector = new BoundaryProjector2S(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test5()  throws Throwable  {
      HashSet<GreatArc> hashSet0 = new HashSet<GreatArc>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      hashSet0.add(greatArc0);
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.from((Iterable<GreatArc>) hashSet0, true);
      Point2S point2S0 = greatCircle0.getPolePoint();
      Point2S point2S1 = regionBSPTree2S0.project(point2S0);
}"
754,"    public Point2S project(final Point2S pt) {
        // use our custom projector so that we can disambiguate points that are
        // actually equidistant from the target point
        final BoundaryProjector2S projector = new BoundaryProjector2S(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test6()  throws Throwable  {
      HashSet<GreatArc> hashSet0 = new HashSet<GreatArc>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Y;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit1, vector3D_Unit1, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      hashSet0.add(greatArc0);
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.from((Iterable<GreatArc>) hashSet0, true);
      Point2S point2S0 = Point2S.PLUS_J;
      Point2S point2S1 = regionBSPTree2S0.project(point2S0);
}"
755,"    public List<GreatArc> getBoundaries() {
        return createBoundaryList(GreatArc.class::cast);
    }","  public void test7()  throws Throwable  {
      HashSet<GreatArc> hashSet0 = new HashSet<GreatArc>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      hashSet0.add(greatArc0);
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.from((Iterable<GreatArc>) hashSet0, true);
      List<GreatArc> list0 = regionBSPTree2S0.getBoundaries();
}"
756,"    public Point2S project(final Point2S pt) {
        // use our custom projector so that we can disambiguate points that are
        // actually equidistant from the target point
        final BoundaryProjector2S projector = new BoundaryProjector2S(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test8()  throws Throwable  {
      HashSet<GreatArc> hashSet0 = new HashSet<GreatArc>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      hashSet0.add(greatArc0);
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.from((Iterable<GreatArc>) hashSet0, true);
      // Undeclared exception!
      try { 
        regionBSPTree2S0.project((Point2S) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircle"", e);
      }
  }"
757,"    public List<GreatArcPath> getBoundaryPaths() {
        if (boundaryPaths == null) {
            boundaryPaths = Collections.unmodifiableList(computeBoundaryPaths());
        }
        return boundaryPaths;
    }","  public void test9()  throws Throwable  {
      HashSet<GreatArc> hashSet0 = new HashSet<GreatArc>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      hashSet0.add(greatArc0);
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.from((Iterable<GreatArc>) hashSet0, true);
      // Undeclared exception!
      try { 
        regionBSPTree2S0.getBoundaryPaths();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.AbstractGreatArcConnector$ConnectableGreatArc"", e);
      }
  }"
758,"    public static RegionBSPTree2S from(final Iterable<GreatArc> boundaries) {
        return from(boundaries, false);
    }","  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        RegionBSPTree2S.from((Iterable<GreatArc>) null, true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.partitioning.bsp.AbstractRegionBSPTree"", e);
      }
  }"
759,"    public static RegionBSPTree2S from(final Iterable<GreatArc> boundaries) {
        return from(boundaries, false);
    }","  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        RegionBSPTree2S.from((Iterable<GreatArc>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.partitioning.bsp.AbstractRegionBSPTree"", e);
      }
  }"
760,"    public Iterable<GreatArc> boundaries() {
        return createBoundaryIterable(GreatArc.class::cast);
    }","  public void test12()  throws Throwable  {
      HashSet<GreatArc> hashSet0 = new HashSet<GreatArc>();
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.from((Iterable<GreatArc>) hashSet0, true);
      Iterable<GreatArc> iterable0 = regionBSPTree2S0.boundaries();
}"
761,"    public RegionBSPTree2S() {
        this(false);
    }","  public void test13()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = new RegionBSPTree2S(false);
  }"
762,"    protected RegionNode2S createNode() {
        return new RegionNode2S(this);
    }","  public void test14()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.full();
      RegionBSPTree2S.RegionNode2S regionBSPTree2S_RegionNode2S0 = regionBSPTree2S0.createNode();
      ConvexArea2S convexArea2S0 = regionBSPTree2S_RegionNode2S0.getNodeRegion();
}"
763,"    public static RegionBSPTree2S empty() {
        return new RegionBSPTree2S(false);
    }","  public void test15()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.empty();
      boolean boolean0 = regionBSPTree2S0.isInfinite();
}"
764,"    public static RegionBSPTree2S full() {
        return new RegionBSPTree2S(true);
    }","  public void test16()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.full();
      boolean boolean0 = regionBSPTree2S0.isFinite();
}"
765,"    public Stream<GreatArc> boundaryStream() {
        return StreamSupport.stream(boundaries().spliterator(), false);
    }","  public void test17()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.empty();
      Stream<GreatArc> stream0 = regionBSPTree2S0.boundaryStream();
}"
766,"    public List<ConvexArea2S> toConvex() {
        final List<ConvexArea2S> result = new ArrayList<>();

        toConvexRecursive(getRoot(), ConvexArea2S.full(), result);

        return result;
    }","  public void test18()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.empty();
      List<ConvexArea2S> list0 = regionBSPTree2S0.toConvex();
}"
767,"    public List<GreatArc> getBoundaries() {
        return createBoundaryList(GreatArc.class::cast);
    }","  public void test19()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.full();
      List<GreatArc> list0 = regionBSPTree2S0.getBoundaries();
}"
768,"    public Split<RegionBSPTree2S> split(final Hyperplane<Point2S> splitter) {
        return split(splitter, empty(), empty());
    }","  public void test20()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.empty();
      // Undeclared exception!
      try { 
        regionBSPTree2S0.split((Hyperplane<Point2S>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.partitioning.bsp.AbstractBSPTree"", e);
      }
  }"
769,"    public List<GreatArcPath> getBoundaryPaths() {
        if (boundaryPaths == null) {
            boundaryPaths = Collections.unmodifiableList(computeBoundaryPaths());
        }
        return boundaryPaths;
    }","  public void test21()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = new RegionBSPTree2S();
      regionBSPTree2S0.getBoundaryPaths();
      List<GreatArcPath> list0 = regionBSPTree2S0.getBoundaryPaths();
}"
770,"    public RegionBSPTree2S copy() {
        final RegionBSPTree2S result = RegionBSPTree2S.empty();
        result.copy(this);

        return result;
    }","  public void test22()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = new RegionBSPTree2S();
      RegionBSPTree2S regionBSPTree2S1 = regionBSPTree2S0.copy();
}"
771,"    public RegionBSPTree2S toTree() {
        return this;
    }","  public void test23()  throws Throwable  {
      RegionBSPTree2S regionBSPTree2S0 = new RegionBSPTree2S();
      RegionBSPTree2S regionBSPTree2S1 = regionBSPTree2S0.toTree();
}"
772,"    public static RegionBSPTree2S from(final Iterable<GreatArc> boundaries) {
        return from(boundaries, false);
    }","  public void test24()  throws Throwable  {
      HashSet<GreatArc> hashSet0 = new HashSet<GreatArc>();
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.from((Iterable<GreatArc>) hashSet0);
}"
773,"    public Point2S project(final Point2S pt) {
        // use our custom projector so that we can disambiguate points that are
        // actually equidistant from the target point
        final BoundaryProjector2S projector = new BoundaryProjector2S(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test25()  throws Throwable  {
      HashSet<GreatArc> hashSet0 = new HashSet<GreatArc>();
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.from((Iterable<GreatArc>) hashSet0, true);
      Point2S point2S0 = regionBSPTree2S0.project((Point2S) null);
}"
774,"    public static RegionBSPTree2S from(final Iterable<GreatArc> boundaries) {
        return from(boundaries, false);
    }","  public void test26()  throws Throwable  {
      HashSet<GreatArc> hashSet0 = new HashSet<GreatArc>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      boolean boolean0 = hashSet0.add(greatArc0);
      RegionBSPTree2S regionBSPTree2S0 = RegionBSPTree2S.from((Iterable<GreatArc>) hashSet0, true);
      boolean boolean1 = regionBSPTree2S0.isFinite();
}"
775,"    static void validateGreatCirclesEquivalent(final GreatCircle expected, final GreatCircle actual) {
        if (!expected.eq(actual, expected.getPrecision())) {
            throw new IllegalArgumentException(""Arguments do not represent the same great circle. Expected "" +
                    expected + "" but was "" + actual + ""."");
        }
    }","  public void test0()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZX;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = GreatCircles.fromPole(vector3D0, precision_DoubleEquivalence0);
      GreatCircle greatCircle1 = greatCircle0.reverse();
      // Undeclared exception!
      try { 
        GreatCircles.validateGreatCirclesEquivalent(greatCircle1, greatCircle0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Arguments do not represent the same great circle. Expected GreatCircle[pole= (-1.0, -0.0, -0.0), u= (-0.0, 0.0, 1.0), v= (-0.0, 1.0, -0.0)] but was GreatCircle[pole= (1.0, 0.0, 0.0), u= (-0.0, 0.0, 1.0), v= (0.0, -1.0, 0.0)].
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircles"", e);
      }
  }"
776,"    public static GreatCircle fromPoints(final Point2S a, final Point2S b,
            final Precision.DoubleEquivalence precision) {

        if (!a.isFinite() || !b.isFinite()) {
            throw new IllegalArgumentException(""Invalid points for great circle: "" + a + "", "" + b);
        }

        String err = null;

        final double dist = a.distance(b);
        if (precision.eqZero(dist)) {
            err = ""equal"";
        } else if (precision.eq(dist, Math.PI)) {
            err = ""antipodal"";
        }

        if (err != null) {
            throw new IllegalArgumentException(""Cannot create great circle from points "" + a + "" and "" + b +
                    "": points are "" + err);
        }

        final Vector3D.Unit u = a.getVector().normalize();
        final Vector3D.Unit pole = u.cross(b.getVector()).normalize();
        final Vector3D.Unit v = pole.cross(u).normalize();

        return new GreatCircle(pole, u, v, precision);
    }","  public void test1()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_I;
      Point2S point2S1 = Point2S.of(1.0, 1.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      // Undeclared exception!
      try { 
        GreatCircles.fromPoints(point2S0, point2S1, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot create great circle from points (0.0, 1.5707963267948966) and (1.0, 1.0): points are antipodal
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircles"", e);
      }
  }"
777,"    public static GreatCircle fromPoints(final Point2S a, final Point2S b,
            final Precision.DoubleEquivalence precision) {

        if (!a.isFinite() || !b.isFinite()) {
            throw new IllegalArgumentException(""Invalid points for great circle: "" + a + "", "" + b);
        }

        String err = null;

        final double dist = a.distance(b);
        if (precision.eqZero(dist)) {
            err = ""equal"";
        } else if (precision.eq(dist, Math.PI)) {
            err = ""antipodal"";
        }

        if (err != null) {
            throw new IllegalArgumentException(""Cannot create great circle from points "" + a + "" and "" + b +
                    "": points are "" + err);
        }

        final Vector3D.Unit u = a.getVector().normalize();
        final Vector3D.Unit pole = u.cross(b.getVector()).normalize();
        final Vector3D.Unit v = pole.cross(u).normalize();

        return new GreatCircle(pole, u, v, precision);
    }","  public void test2()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_I;
      Point2S point2S1 = Point2S.of(1.0, 1.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = GreatCircles.fromPoints(point2S0, point2S1, precision_DoubleEquivalence0);
}"
778,"    static void validateGreatCirclesEquivalent(final GreatCircle expected, final GreatCircle actual) {
        if (!expected.eq(actual, expected.getPrecision())) {
            throw new IllegalArgumentException(""Arguments do not represent the same great circle. Expected "" +
                    expected + "" but was "" + actual + ""."");
        }
    }","  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        GreatCircles.validateGreatCirclesEquivalent((GreatCircle) null, (GreatCircle) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircles"", e);
      }
  }"
779,"    public static GreatCircle fromPoleAndU(final Vector3D pole, final Vector3D u,
            final Precision.DoubleEquivalence precision) {

        final Vector3D.Unit unitPole = pole.normalize();
        final Vector3D.Unit unitX = pole.orthogonal(u);
        final Vector3D.Unit unitY = pole.cross(u).normalize();

        return new GreatCircle(unitPole, unitX, unitY, precision);
    }","  public void test4()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        GreatCircles.fromPoleAndU((Vector3D) null, (Vector3D) null, precision_DoubleEquivalence0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircles"", e);
      }
  }"
780,"    public static GreatCircle fromPole(final Vector3D pole, final Precision.DoubleEquivalence precision) {
        final Vector3D.Unit u = pole.orthogonal();
        final Vector3D.Unit v = pole.cross(u).normalize();
        return new GreatCircle(pole.normalize(), u, v, precision);
    }","  public void test5()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        GreatCircles.fromPole(vector3D0, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
781,"    public static GreatCircle fromPoints(final Point2S a, final Point2S b,
            final Precision.DoubleEquivalence precision) {

        if (!a.isFinite() || !b.isFinite()) {
            throw new IllegalArgumentException(""Invalid points for great circle: "" + a + "", "" + b);
        }

        String err = null;

        final double dist = a.distance(b);
        if (precision.eqZero(dist)) {
            err = ""equal"";
        } else if (precision.eq(dist, Math.PI)) {
            err = ""antipodal"";
        }

        if (err != null) {
            throw new IllegalArgumentException(""Cannot create great circle from points "" + a + "" and "" + b +
                    "": points are "" + err);
        }

        final Vector3D.Unit u = a.getVector().normalize();
        final Vector3D.Unit pole = u.cross(b.getVector()).normalize();
        final Vector3D.Unit v = pole.cross(u).normalize();

        return new GreatCircle(pole, u, v, precision);
    }","  public void test6()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        GreatCircles.fromPoints((Point2S) null, (Point2S) null, precision_DoubleEquivalence0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircles"", e);
      }
  }"
782,"    public static GreatArc arcFromPoints(final Point2S start, final Point2S end,
            final Precision.DoubleEquivalence precision) {
        final GreatCircle circle = GreatCircles.fromPoints(start, end, precision);

        final Point1S subspaceStart = circle.toSubspace(start);
        final Point1S subspaceEnd = circle.toSubspace(end);
        final AngularInterval.Convex interval = AngularInterval.Convex.of(subspaceStart, subspaceEnd, precision);

        return arcFromInterval(circle, interval);
    }","  public void test7()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_K;
      // Undeclared exception!
      try { 
        GreatCircles.arcFromPoints(point2S0, point2S0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircles"", e);
      }
  }"
783,"    public static GreatArc arcFromPoints(final Point2S start, final Point2S end,
            final Precision.DoubleEquivalence precision) {
        final GreatCircle circle = GreatCircles.fromPoints(start, end, precision);

        final Point1S subspaceStart = circle.toSubspace(start);
        final Point1S subspaceEnd = circle.toSubspace(end);
        final AngularInterval.Convex interval = AngularInterval.Convex.of(subspaceStart, subspaceEnd, precision);

        return arcFromInterval(circle, interval);
    }","  public void test8()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_J;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      // Undeclared exception!
      try { 
        GreatCircles.arcFromPoints(point2S0, point2S0, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
784,"    public static GreatArc arcFromInterval(final GreatCircle circle, final AngularInterval.Convex interval) {
        return new GreatArc(circle, interval);
    }","  public void test9()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = GreatCircles.fromPole(vector3D_Unit0, precision_DoubleEquivalence0);
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = GreatCircles.arcFromInterval(greatCircle0, angularInterval_Convex0);
}"
785,"    static void validateGreatCirclesEquivalent(final GreatCircle expected, final GreatCircle actual) {
        if (!expected.eq(actual, expected.getPrecision())) {
            throw new IllegalArgumentException(""Arguments do not represent the same great circle. Expected "" +
                    expected + "" but was "" + actual + ""."");
        }
    }","  public void test10()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = GreatCircles.fromPoleAndU(vector3D_Unit0, vector3D_Unit1, precision_DoubleEquivalence0);
      GreatCircles.validateGreatCirclesEquivalent(greatCircle0, greatCircle0);
  }"
786,"    public static GreatCircle fromPoints(final Point2S a, final Point2S b,
            final Precision.DoubleEquivalence precision) {

        if (!a.isFinite() || !b.isFinite()) {
            throw new IllegalArgumentException(""Invalid points for great circle: "" + a + "", "" + b);
        }

        String err = null;

        final double dist = a.distance(b);
        if (precision.eqZero(dist)) {
            err = ""equal"";
        } else if (precision.eq(dist, Math.PI)) {
            err = ""antipodal"";
        }

        if (err != null) {
            throw new IllegalArgumentException(""Cannot create great circle from points "" + a + "" and "" + b +
                    "": points are "" + err);
        }

        final Vector3D.Unit u = a.getVector().normalize();
        final Vector3D.Unit pole = u.cross(b.getVector()).normalize();
        final Vector3D.Unit v = pole.cross(u).normalize();

        return new GreatCircle(pole, u, v, precision);
    }","  public void test11()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Point2S point2S0 = Point2S.from(vector3D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      // Undeclared exception!
      try { 
        GreatCircles.fromPoints(point2S0, point2S0, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot create great circle from points (4.71238898038469, 1.5707963267948966) and (4.71238898038469, 1.5707963267948966): points are equal
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircles"", e);
      }
  }"
787,"    public static GreatCircle fromPoints(final Point2S a, final Point2S b,
            final Precision.DoubleEquivalence precision) {

        if (!a.isFinite() || !b.isFinite()) {
            throw new IllegalArgumentException(""Invalid points for great circle: "" + a + "", "" + b);
        }

        String err = null;

        final double dist = a.distance(b);
        if (precision.eqZero(dist)) {
            err = ""equal"";
        } else if (precision.eq(dist, Math.PI)) {
            err = ""antipodal"";
        }

        if (err != null) {
            throw new IllegalArgumentException(""Cannot create great circle from points "" + a + "" and "" + b +
                    "": points are "" + err);
        }

        final Vector3D.Unit u = a.getVector().normalize();
        final Vector3D.Unit pole = u.cross(b.getVector()).normalize();
        final Vector3D.Unit v = pole.cross(u).normalize();

        return new GreatCircle(pole, u, v, precision);
    }","  public void test12()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Point2S point2S0 = Point2S.PLUS_I;
      Point2S point2S1 = Point2S.NaN;
      // Undeclared exception!
      try { 
        GreatCircles.fromPoints(point2S0, point2S1, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid points for great circle: (0.0, 1.5707963267948966), (NaN, NaN)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircles"", e);
      }
  }"
788,"    public static GreatCircle fromPoints(final Point2S a, final Point2S b,
            final Precision.DoubleEquivalence precision) {

        if (!a.isFinite() || !b.isFinite()) {
            throw new IllegalArgumentException(""Invalid points for great circle: "" + a + "", "" + b);
        }

        String err = null;

        final double dist = a.distance(b);
        if (precision.eqZero(dist)) {
            err = ""equal"";
        } else if (precision.eq(dist, Math.PI)) {
            err = ""antipodal"";
        }

        if (err != null) {
            throw new IllegalArgumentException(""Cannot create great circle from points "" + a + "" and "" + b +
                    "": points are "" + err);
        }

        final Vector3D.Unit u = a.getVector().normalize();
        final Vector3D.Unit pole = u.cross(b.getVector()).normalize();
        final Vector3D.Unit v = pole.cross(u).normalize();

        return new GreatCircle(pole, u, v, precision);
    }","  public void test13()  throws Throwable  {
      Point2S point2S0 = Point2S.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        GreatCircles.fromPoints(point2S0, point2S0, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid points for great circle: (NaN, NaN), (NaN, NaN)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircles"", e);
      }
  }"
789,"    public static GreatCircle fromPole(final Vector3D pole, final Precision.DoubleEquivalence precision) {
        final Vector3D.Unit u = pole.orthogonal();
        final Vector3D.Unit v = pole.cross(u).normalize();
        return new GreatCircle(pole.normalize(), u, v, precision);
    }","  public void test14()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        GreatCircles.fromPole((Vector3D) null, precision_DoubleEquivalence0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircles"", e);
      }
  }"
790,"    public static GreatCircle fromPoleAndU(final Vector3D pole, final Vector3D u,
            final Precision.DoubleEquivalence precision) {

        final Vector3D.Unit unitPole = pole.normalize();
        final Vector3D.Unit unitX = pole.orthogonal(u);
        final Vector3D.Unit unitY = pole.cross(u).normalize();

        return new GreatCircle(unitPole, unitX, unitY, precision);
    }","  public void test15()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        GreatCircles.fromPoleAndU(vector3D0, vector3D0, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
791,"    public static GreatArc arcFromPoints(final Point2S start, final Point2S end,
            final Precision.DoubleEquivalence precision) {
        final GreatCircle circle = GreatCircles.fromPoints(start, end, precision);

        final Point1S subspaceStart = circle.toSubspace(start);
        final Point1S subspaceEnd = circle.toSubspace(end);
        final AngularInterval.Convex interval = AngularInterval.Convex.of(subspaceStart, subspaceEnd, precision);

        return arcFromInterval(circle, interval);
    }","  public void test16()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_I;
      Point2S point2S1 = Point2S.MINUS_J;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatArc greatArc0 = GreatCircles.arcFromPoints(point2S1, point2S0, precision_DoubleEquivalence0);
}"
792,"    public GreatArc getStartArc() {
        if (!isEmpty()) {
            return arcs.get(0);
        }
        return null;
    }","  public void test0()  throws Throwable  {
      GreatArcPath.Builder greatArcPath_Builder0 = GreatArcPath.builder((Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatArcPath_Builder0.getStartArc();
}"
793,"    public boolean isEmpty() {
        return arcs.isEmpty();
    }","  public void test1()  throws Throwable  {
      GreatArc[] greatArcArray0 = new GreatArc[0];
      GreatArcPath greatArcPath0 = GreatArcPath.fromArcs(greatArcArray0);
}"
794,"    public static GreatArcPath fromVertices(final Collection<Point2S> vertices,
            final Precision.DoubleEquivalence precision) {
        return fromVertices(vertices, false, precision);
    }","  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        GreatArcPath.fromVertices((Collection<Point2S>) null, false, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatArcPath$Builder"", e);
      }
  }"
795,"    public static GreatArcPath fromVertices(final Collection<Point2S> vertices,
            final Precision.DoubleEquivalence precision) {
        return fromVertices(vertices, false, precision);
    }","  public void test3()  throws Throwable  {
      HashSet<Point2S> hashSet0 = new HashSet<Point2S>();
      hashSet0.add((Point2S) null);
      // Undeclared exception!
      try { 
        GreatArcPath.fromVertices((Collection<Point2S>) hashSet0, false, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Unable to create arc: no point precision specified
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatArcPath$Builder"", e);
      }
  }"
796,"    public static GreatArcPath fromVertices(final Collection<Point2S> vertices,
            final Precision.DoubleEquivalence precision) {
        return fromVertices(vertices, false, precision);
    }","  public void test4()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        GreatArcPath.fromVertices((Collection<Point2S>) null, precision_DoubleEquivalence0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatArcPath$Builder"", e);
      }
  }"
797,"    public static GreatArcPath fromVertices(final Collection<Point2S> vertices,
            final Precision.DoubleEquivalence precision) {
        return fromVertices(vertices, false, precision);
    }","  public void test5()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>(0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(""|1XU7O["").when(precision_DoubleEquivalence0).toString();
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = new GreatArc(greatCircle0, angularInterval_Convex0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      Point2S point2S0 = Point2S.of(0, 0);
      arrayDeque0.add(point2S0);
      // Undeclared exception!
      try { 
        GreatArcPath.fromVertices((Collection<Point2S>) arrayDeque0, precision_DoubleEquivalence1);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Unable to create path; only a single point provided: (0.0, 0.0)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatArcPath$Builder"", e);
      }
  }"
798,"    public static GreatArcPath fromVertexLoop(final Collection<Point2S> vertices,
            final Precision.DoubleEquivalence precision) {
        return fromVertices(vertices, true, precision);
    }","  public void test6()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      // Undeclared exception!
      try { 
        GreatArcPath.fromVertexLoop((Collection<Point2S>) null, precision_DoubleEquivalence1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatArcPath$Builder"", e);
      }
  }"
799,"    public static GreatArcPath fromVertexLoop(final Collection<Point2S> vertices,
            final Precision.DoubleEquivalence precision) {
        return fromVertices(vertices, true, precision);
    }","  public void test7()  throws Throwable  {
      HashSet<Point2S> hashSet0 = new HashSet<Point2S>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(precision_DoubleEquivalence0).toString();
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence1).lte(anyDouble() , anyDouble());
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.Convex.of(point1S0, point1S0, precision_DoubleEquivalence1);
      Point2S point2S0 = Point2S.PLUS_J;
      hashSet0.add(point2S0);
      GreatArc greatArc0 = greatCircle0.arc(angularInterval_Convex0);
      Precision.DoubleEquivalence precision_DoubleEquivalence2 = greatArc0.getPrecision();
      // Undeclared exception!
      try { 
        GreatArcPath.fromVertexLoop(hashSet0, precision_DoubleEquivalence2);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Unable to create path; only a single point provided: (1.5707963267948966, 1.5707963267948966)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatArcPath$Builder"", e);
      }
  }"
800,"    public static GreatArcPath fromArcs(final GreatArc... arcs) {
        return fromArcs(Arrays.asList(arcs));
    }","  public void test8()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      GreatArc[] greatArcArray0 = new GreatArc[2];
      greatArcArray0[0] = greatArc0;
      greatArcArray0[1] = greatArc0;
      // Undeclared exception!
      try { 
        GreatArcPath.fromArcs(greatArcArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Path arcs are not connected: previous= GreatArc[full= true, circle= GreatCircle[pole= (0.0, 0.0, -1.0), u= (0.0, 0.0, -1.0), v= (0.0, 0.0, -1.0)], next= GreatArc[full= true, circle= GreatCircle[pole= (0.0, 0.0, -1.0), u= (0.0, 0.0, -1.0), v= (0.0, 0.0, -1.0)]
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatArcPath$Builder"", e);
      }
  }"
801,"    public static GreatArcPath fromArcs(final GreatArc... arcs) {
        return fromArcs(Arrays.asList(arcs));
    }","  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        GreatArcPath.fromArcs((Collection<GreatArc>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatArcPath"", e);
      }
  }"
802,"    public static GreatArcPath fromArcs(final GreatArc... arcs) {
        return fromArcs(Arrays.asList(arcs));
    }","  public void test10()  throws Throwable  {
      LinkedHashSet<GreatArc> linkedHashSet0 = new LinkedHashSet<GreatArc>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      linkedHashSet0.add(greatArc0);
      GreatArc greatArc1 = greatCircle0.span();
      linkedHashSet0.add(greatArc1);
      // Undeclared exception!
      try { 
        GreatArcPath.fromArcs((Collection<GreatArc>) linkedHashSet0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Path arcs are not connected: previous= GreatArc[full= true, circle= GreatCircle[pole= (0.0, 1.0, 0.0), u= (0.0, 1.0, 0.0), v= (0.0, 1.0, 0.0)], next= GreatArc[full= true, circle= GreatCircle[pole= (0.0, 1.0, 0.0), u= (0.0, 1.0, 0.0), v= (0.0, 1.0, 0.0)]
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatArcPath$Builder"", e);
      }
  }"
803,"    public boolean isEmpty() {
        return arcs.isEmpty();
    }","  public void test11()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      GreatArcPath.Builder greatArcPath_Builder0 = GreatArcPath.builder(precision_DoubleEquivalence1);
      GreatArcPath greatArcPath0 = greatArcPath_Builder0.build(false);
}"
804,"    public boolean isEmpty() {
        return arcs.isEmpty();
    }","  public void test12()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      GreatArcPath.Builder greatArcPath_Builder0 = GreatArcPath.builder(precision_DoubleEquivalence1);
      GreatArcPath.Builder greatArcPath_Builder1 = greatArcPath_Builder0.prepend(greatArc0);
      GreatArcPath greatArcPath0 = greatArcPath_Builder1.build(false);
}"
805,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test13()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>(0);
      boolean boolean0 = true;
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(precision_DoubleEquivalence0).toString();
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(true, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatCircle greatCircle1 = greatCircle0.reverse();
      Point1S point1S0 = Point1S.of((double) 0);
      GreatArc greatArc0 = greatCircle1.arc(point1S0, point1S0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      GreatArcPath.Builder greatArcPath_Builder0 = GreatArcPath.builder(precision_DoubleEquivalence1);
      Point2S point2S0 = Point2S.MINUS_I;
      GreatArcPath.Builder greatArcPath_Builder1 = greatArcPath_Builder0.prepend(point2S0);
      GreatArcPath.Builder greatArcPath_Builder2 = greatArcPath_Builder1.setPrecision(precision_DoubleEquivalence1);
      GreatArcPath.Builder greatArcPath_Builder3 = greatArcPath_Builder2.appendVertices((Collection<Point2S>) arrayDeque0);
      // Undeclared exception!
      try { 
        greatArcPath_Builder3.append(point2S0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
806,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test14()  throws Throwable  {
      Point2S point2S0 = Point2S.of(2.0458691299350887E149, 2.0458691299350887E149);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(""3F'"", ""3F'"", ""3F'"").when(precision_DoubleEquivalence0).toString();
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatArcPath.Builder greatArcPath_Builder0 = GreatArcPath.builder(precision_DoubleEquivalence0);
      Point2S[] point2SArray0 = new Point2S[2];
      Point2S point2S1 = Point2S.PLUS_I;
      point2SArray0[0] = point2S1;
      point2SArray0[1] = point2S0;
      GreatArcPath.Builder greatArcPath_Builder1 = greatArcPath_Builder0.prependPoints(point2SArray0);
      // Undeclared exception!
      try { 
        greatArcPath_Builder1.append(point2S0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Cannot add point (0.0, 3.141592653589793) after full arc: GreatArc[full= true, circle= GreatCircle[pole= (0.0, -0.43982377763629854, 0.8980840966333475), u= (1.0, 0.0, 0.0), v= (0.0, 0.8980840966333475, 0.43982377763629854)]
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatArcPath$Builder"", e);
      }
  }"
807,"    public GreatArc getEndArc() {
        if (!isEmpty()) {
            return arcs.get(arcs.size() - 1);
        }
        return null;
    }","  public void test15()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, (Vector3D.Unit) null, (Vector3D.Unit) null, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      GreatArcPath.Builder greatArcPath_Builder0 = GreatArcPath.builder(precision_DoubleEquivalence1);
      GreatArc greatArc1 = greatArcPath_Builder0.getEndArc();
}"
808,"    public boolean isEmpty() {
        return arcs.isEmpty();
    }","  public void test16()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Point1S point1S0 = Point1S.of((double) 0);
      GreatArc greatArc0 = greatCircle0.arc(point1S0, point1S0);
      GreatArc[] greatArcArray0 = new GreatArc[1];
      greatArcArray0[0] = greatArc0;
      GreatArcPath greatArcPath0 = GreatArcPath.fromArcs(greatArcArray0);
      boolean boolean0 = greatArcPath0.isEmpty();
}"
809,"    public boolean isEmpty() {
        return arcs.isEmpty();
    }","  public void test17()  throws Throwable  {
      GreatArcPath greatArcPath0 = GreatArcPath.empty();
      boolean boolean0 = greatArcPath0.isEmpty();
}"
810,"    public boolean isEmpty() {
        return arcs.isEmpty();
    }","  public void test18()  throws Throwable  {
      LinkedHashSet<GreatArc> linkedHashSet0 = new LinkedHashSet<GreatArc>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      linkedHashSet0.add(greatArc0);
      GreatArcPath greatArcPath0 = GreatArcPath.fromArcs((Collection<GreatArc>) linkedHashSet0);
      greatArcPath0.getStartVertex();
}"
811,"    public GreatArc getEndArc() {
        if (!isEmpty()) {
            return arcs.get(arcs.size() - 1);
        }
        return null;
    }","  public void test19()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = new GreatArc(greatCircle0, angularInterval_Convex0);
      GreatArc[] greatArcArray0 = new GreatArc[1];
      greatArcArray0[0] = greatArc0;
      GreatArcPath greatArcPath0 = GreatArcPath.fromArcs(greatArcArray0);
      GreatArc greatArc1 = greatArcPath0.getEndArc();
}"
812,"    public boolean isEmpty() {
        return arcs.isEmpty();
    }","  public void test20()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = new GreatArc(greatCircle0, angularInterval_Convex0);
      GreatArc[] greatArcArray0 = new GreatArc[1];
      greatArcArray0[0] = greatArc0;
      GreatArcPath greatArcPath0 = GreatArcPath.fromArcs(greatArcArray0);
      GreatArc greatArc1 = greatArcPath0.getEndArc();
}"
813,"    public GreatArc getEndArc() {
        if (!isEmpty()) {
            return arcs.get(arcs.size() - 1);
        }
        return null;
    }","  public void test21()  throws Throwable  {
      ArrayList<GreatArc> arrayList0 = new ArrayList<GreatArc>();
      GreatArcPath greatArcPath0 = GreatArcPath.fromArcs((Collection<GreatArc>) arrayList0);
      GreatArc greatArc0 = greatArcPath0.getEndArc();
}"
814,"    public Stream<GreatArc> boundaryStream() {
        return getArcs().stream();
    }","  public void test22()  throws Throwable  {
      GreatArcPath greatArcPath0 = GreatArcPath.empty();
      Stream<GreatArc> stream0 = greatArcPath0.boundaryStream();
}"
815,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test23()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = new GreatArc(greatCircle0, angularInterval_Convex0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      GreatArcPath.Builder greatArcPath_Builder0 = GreatArcPath.builder(precision_DoubleEquivalence1);
      greatArcPath_Builder0.prepend(greatArc0);
      // Undeclared exception!
      try { 
        greatArcPath_Builder0.append((GreatArc) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatArcPath$Builder"", e);
      }
  }"
816,"    public static GreatArcPath fromArcs(final GreatArc... arcs) {
        return fromArcs(Arrays.asList(arcs));
    }","  public void test24()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatArc[] greatArcArray0 = new GreatArc[9];
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = greatCircle0.arc(angularInterval_Convex0);
      greatArcArray0[0] = greatArc0;
      // Undeclared exception!
      try { 
        GreatArcPath.fromArcs(greatArcArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatArcPath$Builder"", e);
      }
  }"
817,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test25()  throws Throwable  {
      GreatArcPath.Builder greatArcPath_Builder0 = GreatArcPath.builder((Precision.DoubleEquivalence) null);
      Point2S[] point2SArray0 = new Point2S[8];
      // Undeclared exception!
      try { 
        greatArcPath_Builder0.appendVertices(point2SArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Unable to create arc: no point precision specified
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatArcPath$Builder"", e);
      }
  }"
818,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test26()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = new GreatArc(greatCircle0, angularInterval_Convex0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      GreatArcPath.Builder greatArcPath_Builder0 = GreatArcPath.builder(precision_DoubleEquivalence1);
      greatArcPath_Builder0.append(greatArc0);
      // Undeclared exception!
      try { 
        greatArcPath_Builder0.append(greatArc0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Path arcs are not connected: previous= GreatArc[full= true, circle= GreatCircle[pole= (0.0, 1.0, 0.0), u= (0.0, 1.0, 0.0), v= (0.0, 1.0, 0.0)], next= GreatArc[full= true, circle= GreatCircle[pole= (0.0, 1.0, 0.0), u= (0.0, 1.0, 0.0), v= (0.0, 1.0, 0.0)]
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatArcPath$Builder"", e);
      }
  }"
819,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test27()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(precision_DoubleEquivalence0).toString();
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatArcPath.Builder greatArcPath_Builder0 = GreatArcPath.builder(precision_DoubleEquivalence0);
      Point2S[] point2SArray0 = new Point2S[2];
      Point2S point2S0 = Point2S.PLUS_I;
      point2SArray0[0] = point2S0;
      Point2S point2S1 = Point2S.of((-3923.939888), (-3923.939888));
      point2SArray0[1] = point2S1;
      // Undeclared exception!
      try { 
        greatArcPath_Builder0.prependPoints(point2SArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Interval is not convex: [0, 1.661]
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.AngularInterval$Convex"", e);
      }
  }"
820,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test28()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(""Cannot add point {0} after full arc: {1}"").when(precision_DoubleEquivalence0).toString();
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = new GreatArc(greatCircle0, angularInterval_Convex0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      GreatArcPath.Builder greatArcPath_Builder0 = GreatArcPath.builder(precision_DoubleEquivalence1);
      Point2S point2S0 = Point2S.of(1178.910343537254, 1178.910343537254);
      GreatArcPath.Builder greatArcPath_Builder1 = greatArcPath_Builder0.append(point2S0);
      // Undeclared exception!
      try { 
        greatArcPath_Builder1.build(true);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Unable to create path; only a single point provided: (3.9546910946712615, 2.3284942125082004)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatArcPath$Builder"", e);
      }
  }"
821,"    public GreatArc getStartArc() {
        if (!isEmpty()) {
            return arcs.get(0);
        }
        return null;
    }","  public void test29()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = new GreatArc(greatCircle0, angularInterval_Convex0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      GreatArcPath.Builder greatArcPath_Builder0 = GreatArcPath.builder(precision_DoubleEquivalence1);
      greatArcPath_Builder0.prepend(greatArc0);
      GreatArcPath greatArcPath0 = greatArcPath_Builder0.build();
      GreatArc greatArc1 = greatArcPath0.getStartArc();
}"
822,"    public boolean isEmpty() {
        return arcs.isEmpty();
    }","  public void test30()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = new GreatArc(greatCircle0, angularInterval_Convex0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      GreatArcPath.Builder greatArcPath_Builder0 = GreatArcPath.builder(precision_DoubleEquivalence1);
      greatArcPath_Builder0.prepend(greatArc0);
      GreatArcPath greatArcPath0 = greatArcPath_Builder0.build();
      GreatArc greatArc1 = greatArcPath0.getStartArc();
}"
823,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test31()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(precision_DoubleEquivalence0).toString();
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, (Vector3D.Unit) null, vector3D_Unit0, precision_DoubleEquivalence0);
      Point2S point2S0 = Point2S.PLUS_J;
      GreatArc greatArc0 = greatCircle0.span();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      GreatArcPath.Builder greatArcPath_Builder0 = GreatArcPath.builder(precision_DoubleEquivalence1);
      GreatArcPath.Builder greatArcPath_Builder1 = greatArcPath_Builder0.prepend(greatArc0);
      // Undeclared exception!
      try { 
        greatArcPath_Builder1.prepend(point2S0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Cannot add point (1.5707963267948966, 1.5707963267948966) before full arc: GreatArc[full= true, circle= GreatCircle[pole= (0.0, 0.0, -1.0), u= null, v= (0.0, 0.0, -1.0)]
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatArcPath$Builder"", e);
      }
  }"
824,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test32()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>(0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(""I/DC8 -s>e<`"").when(precision_DoubleEquivalence0).toString();
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = new GreatArc(greatCircle0, angularInterval_Convex0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      GreatArcPath.Builder greatArcPath_Builder0 = GreatArcPath.builder(precision_DoubleEquivalence1);
      greatArcPath_Builder0.prepend(greatArc0);
      Point2S point2S0 = Point2S.of(0, 0);
      arrayDeque0.add(point2S0);
      // Undeclared exception!
      try { 
        greatArcPath_Builder0.appendVertices((Collection<Point2S>) arrayDeque0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Cannot add point (0.0, 0.0) after full arc: GreatArc[full= true, circle= GreatCircle[pole= (-1.0, 0.0, 0.0), u= (-1.0, 0.0, 0.0), v= (-1.0, 0.0, 0.0)]
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatArcPath$Builder"", e);
      }
  }"
825,"    public GreatArc getEndArc() {
        if (!isEmpty()) {
            return arcs.get(arcs.size() - 1);
        }
        return null;
    }","  public void test33()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = new GreatArc(greatCircle0, angularInterval_Convex0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      GreatArcPath.Builder greatArcPath_Builder0 = GreatArcPath.builder(precision_DoubleEquivalence1);
      greatArcPath_Builder0.append(greatArc0);
      GreatArc greatArc1 = greatArcPath_Builder0.getEndArc();
}"
826,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(this.getClass().getSimpleName())
            .append('[');

        if (isEmpty()) {
            sb.append(""empty= true"");
        } else if (arcs.size() == 1 && arcs.get(0).isFull()) {
            sb.append(""full= true, circle= "")
                .append(arcs.get(0).getCircle());
        } else {
            sb.append(""vertices= "")
                .append(getVertices());
        }

        sb.append(']');

        return sb.toString();
    }","  public void test34()  throws Throwable  {
      GreatArcPath greatArcPath0 = GreatArcPath.empty();
      String string0 = greatArcPath0.toString();
}"
827,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(this.getClass().getSimpleName())
            .append('[');

        if (isEmpty()) {
            sb.append(""empty= true"");
        } else if (arcs.size() == 1 && arcs.get(0).isFull()) {
            sb.append(""full= true, circle= "")
                .append(arcs.get(0).getCircle());
        } else {
            sb.append(""vertices= "")
                .append(getVertices());
        }

        sb.append(']');

        return sb.toString();
    }","  public void test35()  throws Throwable  {
      LinkedHashSet<GreatArc> linkedHashSet0 = new LinkedHashSet<GreatArc>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      linkedHashSet0.add(greatArc0);
      GreatArcPath greatArcPath0 = GreatArcPath.fromArcs((Collection<GreatArc>) linkedHashSet0);
      String string0 = greatArcPath0.toString();
}"
828,"    public boolean isClosed() {
        final GreatArc endArc = getEndArc();

        if (endArc != null) {
            final Point2S start = getStartVertex();
            final Point2S end = endArc.getEndPoint();

            return start != null && end != null && start.eq(end, endArc.getPrecision());
        }

        return false;
    }","  public void test36()  throws Throwable  {
      PriorityQueue<GreatArc> priorityQueue0 = new PriorityQueue<GreatArc>();
      ArrayDeque<GreatArc> arrayDeque0 = new ArrayDeque<GreatArc>(priorityQueue0);
      GreatArcPath greatArcPath0 = GreatArcPath.fromArcs((Collection<GreatArc>) arrayDeque0);
      boolean boolean0 = greatArcPath0.isClosed();
}"
829,"    public boolean isEmpty() {
        return arcs.isEmpty();
    }","  public void test37()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      GreatArcPath.Builder greatArcPath_Builder0 = GreatArcPath.builder(precision_DoubleEquivalence1);
      GreatArcPath.Builder greatArcPath_Builder1 = greatArcPath_Builder0.append(greatArc0);
      GreatArcPath greatArcPath0 = greatArcPath_Builder1.build(false);
      greatArcPath0.getEndVertex();
}"
830,"    public boolean isEmpty() {
        return arcs.isEmpty();
    }","  public void test38()  throws Throwable  {
      HashSet<Point2S> hashSet0 = new HashSet<Point2S>();
      GreatArcPath greatArcPath0 = GreatArcPath.fromVertices((Collection<Point2S>) hashSet0, true, (Precision.DoubleEquivalence) null);
      List<Point2S> list0 = greatArcPath0.getVertices();
}"
831,"    public boolean isClosed() {
        final GreatArc endArc = getEndArc();

        if (endArc != null) {
            final Point2S start = getStartVertex();
            final Point2S end = endArc.getEndPoint();

            return start != null && end != null && start.eq(end, endArc.getPrecision());
        }

        return false;
    }","  public void test39()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      GreatArcPath.Builder greatArcPath_Builder0 = GreatArcPath.builder(precision_DoubleEquivalence1);
      GreatArcPath.Builder greatArcPath_Builder1 = greatArcPath_Builder0.append(greatArc0);
      GreatArcPath greatArcPath0 = greatArcPath_Builder1.build(false);
      boolean boolean0 = greatArcPath0.isClosed();
}"
832,"    public boolean isEmpty() {
        return arcs.isEmpty();
    }","  public void test40()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      GreatArcPath.Builder greatArcPath_Builder0 = GreatArcPath.builder(precision_DoubleEquivalence1);
      GreatArcPath.Builder greatArcPath_Builder1 = greatArcPath_Builder0.append(greatArc0);
      GreatArcPath greatArcPath0 = greatArcPath_Builder1.build(false);
      boolean boolean0 = greatArcPath0.isClosed();
}"
833,"    public boolean isEmpty() {
        return arcs.isEmpty();
    }","  public void test41()  throws Throwable  {
      LinkedHashSet<GreatArc> linkedHashSet0 = new LinkedHashSet<GreatArc>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      linkedHashSet0.add(greatArc0);
      GreatArcPath greatArcPath0 = GreatArcPath.fromArcs((Collection<GreatArc>) linkedHashSet0);
      List<Point2S> list0 = greatArcPath0.getVertices();
}"
834,"    public boolean isEmpty() {
        return arcs.isEmpty();
    }","  public void test42()  throws Throwable  {
      LinkedHashSet<GreatArc> linkedHashSet0 = new LinkedHashSet<GreatArc>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      linkedHashSet0.add(greatArc0);
      GreatArcPath greatArcPath0 = GreatArcPath.fromArcs((Collection<GreatArc>) linkedHashSet0);
      List<Point2S> list0 = greatArcPath0.getVertices();
}"
835,"    public static GreatArcPath fromArcs(final GreatArc... arcs) {
        return fromArcs(Arrays.asList(arcs));
    }","  public void test43()  throws Throwable  {
      GreatArcPath greatArcPath0 = GreatArcPath.empty();
      List<GreatArc> list0 = greatArcPath0.getArcs();
      GreatArcPath greatArcPath1 = GreatArcPath.fromArcs((Collection<GreatArc>) list0);
}"
836,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test44()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = new GreatArc(greatCircle0, angularInterval_Convex0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      GreatArcPath.Builder greatArcPath_Builder0 = GreatArcPath.builder(precision_DoubleEquivalence1);
      GreatArcPath.Builder greatArcPath_Builder1 = greatArcPath_Builder0.prependPoints((Collection<Point2S>) arrayDeque0);
}"
837,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test45()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(""Unable to close path: path is full"", (String) null).when(precision_DoubleEquivalence0).toString();
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      GreatArcPath.Builder greatArcPath_Builder0 = GreatArcPath.builder(precision_DoubleEquivalence1);
      Point2S[] point2SArray0 = new Point2S[2];
      GreatArcPath.Builder greatArcPath_Builder1 = greatArcPath_Builder0.appendVertices(point2SArray0);
}"
838,"    public boolean isEmpty() {
        return arcs.isEmpty();
    }","  public void test46()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      GreatArcPath.Builder greatArcPath_Builder0 = GreatArcPath.builder(precision_DoubleEquivalence1);
      GreatArcPath greatArcPath0 = greatArcPath_Builder0.close();
}"
839,"    public boolean isEmpty() {
        return arcs.isEmpty();
    }","  public void test47()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = new GreatArc(greatCircle0, angularInterval_Convex0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      Stack<Point2S> stack0 = new Stack<Point2S>();
      GreatArcPath greatArcPath0 = GreatArcPath.fromVertices((Collection<Point2S>) stack0, precision_DoubleEquivalence1);
}"
840,"    public GreatArc getStartArc() {
        if (!isEmpty()) {
            return arcs.get(0);
        }
        return null;
    }","  public void test48()  throws Throwable  {
      ArrayDeque<Point2S> arrayDeque0 = new ArrayDeque<Point2S>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = new GreatArc(greatCircle0, angularInterval_Convex0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      GreatArcPath greatArcPath0 = GreatArcPath.fromVertexLoop(arrayDeque0, precision_DoubleEquivalence1);
      GreatArc greatArc1 = greatArcPath0.getStartArc();
}"
841,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test49()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = new GreatArc(greatCircle0, angularInterval_Convex0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      GreatArcPath.Builder greatArcPath_Builder0 = GreatArcPath.builder(precision_DoubleEquivalence1);
      greatArcPath_Builder0.prepend(greatArc0);
      // Undeclared exception!
      try { 
        greatArcPath_Builder0.prepend((GreatArc) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatArcPath$Builder"", e);
      }
  }"
842,,"  public void test0()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc(greatArc0);
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc1 = new AbstractGreatArcConnector.ConnectableGreatArc((Point2S) null);
      int int0 = abstractGreatArcConnector_ConnectableGreatArc1.compareTo(abstractGreatArcConnector_ConnectableGreatArc0);
}"
843,,"  public void test1()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc(point2S0);
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc1 = new AbstractGreatArcConnector.ConnectableGreatArc((Point2S) null);
      int int0 = abstractGreatArcConnector_ConnectableGreatArc0.compareTo(abstractGreatArcConnector_ConnectableGreatArc1);
}"
844,,"  public void test2()  throws Throwable  {
      Point2S point2S0 = Point2S.NaN;
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc(point2S0);
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc1 = new AbstractGreatArcConnector.ConnectableGreatArc(point2S0);
      // Undeclared exception!
      try { 
        abstractGreatArcConnector_ConnectableGreatArc0.shouldContinueConnectionSearch(abstractGreatArcConnector_ConnectableGreatArc1, true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.AbstractGreatArcConnector$ConnectableGreatArc"", e);
      }
  }"
845,,"  public void test3()  throws Throwable  {
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc((Point2S) null);
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc1 = new AbstractGreatArcConnector.ConnectableGreatArc((Point2S) null);
}"
846,,"  public void test4()  throws Throwable  {
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc((Point2S) null);
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc1 = new AbstractGreatArcConnector.ConnectableGreatArc((Point2S) null);
      boolean boolean0 = abstractGreatArcConnector_ConnectableGreatArc0.shouldContinueConnectionSearch(abstractGreatArcConnector_ConnectableGreatArc1, false);
}"
847,,"  public void test5()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc(greatArc0);
      Point1S point1S0 = Point1S.ZERO;
      Point2S point2S0 = greatCircle0.toSpace(point1S0);
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc1 = new AbstractGreatArcConnector.ConnectableGreatArc(point2S0);
      // Undeclared exception!
      try { 
        abstractGreatArcConnector_ConnectableGreatArc0.getRelativeAngle(abstractGreatArcConnector_ConnectableGreatArc1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.AbstractGreatArcConnector$ConnectableGreatArc"", e);
      }
  }"
848,,"  public void test6()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc(greatArc0);
      Point1S point1S0 = Point1S.ZERO;
      Point2S point2S0 = greatCircle0.toSpace(point1S0);
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc1 = new AbstractGreatArcConnector.ConnectableGreatArc(point2S0);
      boolean boolean0 = abstractGreatArcConnector_ConnectableGreatArc0.canConnectTo(abstractGreatArcConnector_ConnectableGreatArc1);
}"
849,,"  public void test7()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc(greatArc0);
      boolean boolean0 = abstractGreatArcConnector_ConnectableGreatArc0.hasEnd();
}"
850,,"  public void test8()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc(greatArc0);
      boolean boolean0 = abstractGreatArcConnector_ConnectableGreatArc0.hasStart();
}"
851,"    public void connect(final Iterable<GreatArc> arcs) {
        final List<ConnectableGreatArc> newEntries = new ArrayList<>();

        for (final GreatArc segment : arcs) {
            newEntries.add(new ConnectableGreatArc(segment));
        }

        connectPathElements(newEntries);
    }","  public void test9()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      InteriorAngleGreatArcConnector.Maximize interiorAngleGreatArcConnector_Maximize0 = new InteriorAngleGreatArcConnector.Maximize();
      PriorityQueue<GreatArc> priorityQueue0 = new PriorityQueue<GreatArc>();
      priorityQueue0.add(greatArc0);
      // Undeclared exception!
      try { 
        interiorAngleGreatArcConnector_Maximize0.connect(priorityQueue0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.AbstractGreatArcConnector$ConnectableGreatArc"", e);
      }
  }"
852,"    public List<GreatArcPath> connectAll(final Iterable<GreatArc> arcs) {
        add(arcs);
        return connectAll();
    }","  public void test10()  throws Throwable  {
      InteriorAngleGreatArcConnector.Maximize interiorAngleGreatArcConnector_Maximize0 = new InteriorAngleGreatArcConnector.Maximize();
      List<GreatArcPath> list0 = interiorAngleGreatArcConnector_Maximize0.connectAll();
}"
853,"    public void add(final GreatArc arc) {
        addPathElement(new ConnectableGreatArc(arc));
    }","  public void test11()  throws Throwable  {
      InteriorAngleGreatArcConnector.Maximize interiorAngleGreatArcConnector_Maximize0 = new InteriorAngleGreatArcConnector.Maximize();
      LinkedHashSet<GreatArc> linkedHashSet0 = new LinkedHashSet<GreatArc>();
      Vector<GreatArc> vector0 = new Vector<GreatArc>(linkedHashSet0);
      vector0.add((GreatArc) null);
      // Undeclared exception!
      try { 
        interiorAngleGreatArcConnector_Maximize0.add((Iterable<GreatArc>) vector0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.AbstractGreatArcConnector$ConnectableGreatArc"", e);
      }
  }"
854,"    public void add(final GreatArc arc) {
        addPathElement(new ConnectableGreatArc(arc));
    }","  public void test12()  throws Throwable  {
      InteriorAngleGreatArcConnector.Maximize interiorAngleGreatArcConnector_Maximize0 = new InteriorAngleGreatArcConnector.Maximize();
      Class<GreatArc> class0 = GreatArc.class;
      ServiceLoader<GreatArc> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      interiorAngleGreatArcConnector_Maximize0.add((Iterable<GreatArc>) serviceLoader0);
}"
855,,"  public void test13()  throws Throwable  {
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc((Point2S) null);
      GreatArc greatArc0 = abstractGreatArcConnector_ConnectableGreatArc0.getArc();
}"
856,,"  public void test14()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc(point2S0);
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc1 = new AbstractGreatArcConnector.ConnectableGreatArc(point2S0);
      boolean boolean0 = abstractGreatArcConnector_ConnectableGreatArc1.equals(abstractGreatArcConnector_ConnectableGreatArc0);
}"
857,,"  public void test15()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc(point2S0);
      Point2S point2S1 = Point2S.MINUS_I;
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc1 = new AbstractGreatArcConnector.ConnectableGreatArc(point2S1);
      boolean boolean0 = abstractGreatArcConnector_ConnectableGreatArc1.equals(abstractGreatArcConnector_ConnectableGreatArc0);
}"
858,,"  public void test16()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc(point2S0);
      Object object0 = new Object();
      boolean boolean0 = abstractGreatArcConnector_ConnectableGreatArc0.equals(object0);
}"
859,,"  public void test17()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc(greatArc0);
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc1 = new AbstractGreatArcConnector.ConnectableGreatArc((Point2S) null);
      boolean boolean0 = abstractGreatArcConnector_ConnectableGreatArc1.equals(abstractGreatArcConnector_ConnectableGreatArc0);
}"
860,,"  public void test18()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc(point2S0);
      boolean boolean0 = abstractGreatArcConnector_ConnectableGreatArc0.equals(abstractGreatArcConnector_ConnectableGreatArc0);
}"
861,,"  public void test19()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_K;
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc(point2S0);
      boolean boolean0 = abstractGreatArcConnector_ConnectableGreatArc0.equals((Object) null);
}"
862,,"  public void test20()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_K;
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc(point2S0);
      int int0 = abstractGreatArcConnector_ConnectableGreatArc0.compareTo(abstractGreatArcConnector_ConnectableGreatArc0);
}"
863,,"  public void test21()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc(point2S0);
      Point2S point2S1 = Point2S.MINUS_I;
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc1 = new AbstractGreatArcConnector.ConnectableGreatArc(point2S1);
      int int0 = abstractGreatArcConnector_ConnectableGreatArc0.compareTo(abstractGreatArcConnector_ConnectableGreatArc1);
}"
864,"    public void add(final GreatArc arc) {
        addPathElement(new ConnectableGreatArc(arc));
    }","  public void test22()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      InteriorAngleGreatArcConnector.Maximize interiorAngleGreatArcConnector_Maximize0 = new InteriorAngleGreatArcConnector.Maximize();
      // Undeclared exception!
      try { 
        interiorAngleGreatArcConnector_Maximize0.add(greatArc0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.AbstractGreatArcConnector$ConnectableGreatArc"", e);
      }
  }"
865,,"  public void test23()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_K;
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc(point2S0);
      boolean boolean0 = abstractGreatArcConnector_ConnectableGreatArc0.hasZeroSize();
}"
866,,"  public void test24()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc(greatArc0);
      boolean boolean0 = abstractGreatArcConnector_ConnectableGreatArc0.endPointsEq(abstractGreatArcConnector_ConnectableGreatArc0);
}"
867,"    public void connect(final Iterable<GreatArc> arcs) {
        final List<ConnectableGreatArc> newEntries = new ArrayList<>();

        for (final GreatArc segment : arcs) {
            newEntries.add(new ConnectableGreatArc(segment));
        }

        connectPathElements(newEntries);
    }","  public void test25()  throws Throwable  {
      InteriorAngleGreatArcConnector.Maximize interiorAngleGreatArcConnector_Maximize0 = new InteriorAngleGreatArcConnector.Maximize();
      Stack<GreatArc> stack0 = new Stack<GreatArc>();
      ArrayDeque<GreatArc> arrayDeque0 = new ArrayDeque<GreatArc>(stack0);
      interiorAngleGreatArcConnector_Maximize0.connect(arrayDeque0);
}"
868,"    public List<GreatArcPath> connectAll(final Iterable<GreatArc> arcs) {
        add(arcs);
        return connectAll();
    }","  public void test26()  throws Throwable  {
      InteriorAngleGreatArcConnector.Maximize interiorAngleGreatArcConnector_Maximize0 = new InteriorAngleGreatArcConnector.Maximize();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-9)).when(comparator0).compare(any() , any());
      TreeSet<GreatArc> treeSet0 = new TreeSet<GreatArc>(comparator0);
      treeSet0.add((GreatArc) null);
      // Undeclared exception!
      try { 
        interiorAngleGreatArcConnector_Maximize0.connectAll((Iterable<GreatArc>) treeSet0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.AbstractGreatArcConnector$ConnectableGreatArc"", e);
      }
  }"
869,,"  public void test27()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc(greatArc0);
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc1 = abstractGreatArcConnector_ConnectableGreatArc0.getConnectionSearchKey();
}"
870,,"  public void test28()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc(point2S0);
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc1 = abstractGreatArcConnector_ConnectableGreatArc0.getSelf();
}"
871,,"  public void test29()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc(greatArc0);
      double double0 = abstractGreatArcConnector_ConnectableGreatArc0.getRelativeAngle(abstractGreatArcConnector_ConnectableGreatArc0);
}"
872,,"  public void test30()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc0 = new AbstractGreatArcConnector.ConnectableGreatArc(greatArc0);
      AbstractGreatArcConnector.ConnectableGreatArc abstractGreatArcConnector_ConnectableGreatArc1 = new AbstractGreatArcConnector.ConnectableGreatArc((Point2S) null);
      int int0 = abstractGreatArcConnector_ConnectableGreatArc0.compareTo(abstractGreatArcConnector_ConnectableGreatArc1);
}"
873,"    public List<GreatArcPath> connectAll(final Iterable<GreatArc> arcs) {
        add(arcs);
        return connectAll();
    }","  public void test31()  throws Throwable  {
      InteriorAngleGreatArcConnector.Maximize interiorAngleGreatArcConnector_Maximize0 = new InteriorAngleGreatArcConnector.Maximize();
      ArrayList<GreatArc> arrayList0 = new ArrayList<GreatArc>();
      List<GreatArcPath> list0 = interiorAngleGreatArcConnector_Maximize0.connectAll((Iterable<GreatArc>) arrayList0);
}"
874,"    public GreatArc transform(final Transform<Point2S> transform) {
        return new GreatArc(getCircle().transform(transform), interval);
    }","  public void test0()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      GreatCircle greatCircle0 = mock(GreatCircle.class, new ViolatedAssumptionAnswer());
      doReturn((GreatCircle) null).when(greatCircle0).transform(nullable(org.apache.commons.geometry.core.Transform.class));
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = new GreatArc(greatCircle0, angularInterval_Convex0);
      Transform2S transform2S0 = Transform2S.createReflection((Vector3D) vector3D_Unit0);
      GreatArc greatArc1 = greatArc0.transform(transform2S0);
}"
875,"    public AngularInterval.Convex getSubspaceRegion() {
        return getInterval();
    }","  public void test1()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.arc((AngularInterval.Convex) null);
      AngularInterval.Convex angularInterval_Convex0 = greatArc0.getSubspaceRegion();
}"
876,"    public AngularInterval.Convex getSubspaceRegion() {
        return getInterval();
    }","  public void test2()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.arc(4308.0, 0.0);
      AngularInterval.Convex angularInterval_Convex0 = greatArc0.getSubspaceRegion();
}"
877,"    public AngularInterval.Convex getSubspaceRegion() {
        return getInterval();
    }","  public void test3()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.arc((-32.68), (-32.68));
      AngularInterval.Convex angularInterval_Convex0 = greatArc0.getSubspaceRegion();
}"
878,"    public Point2S getStartPoint() {
        if (!interval.isFull()) {
            return getCircle().toSpace(interval.getMinBoundary().getPoint());
        }

        return null;
    }","  public void test4()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.arc((-32.68), (-32.68));
      Point2S point2S0 = greatArc0.getStartPoint();
}"
879,"    public AngularInterval.Convex getInterval() {
        return interval;
    }","  public void test5()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.arc((AngularInterval.Convex) null);
      AngularInterval.Convex angularInterval_Convex0 = greatArc0.getInterval();
}"
880,,"  public void test6()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true, false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      greatCircle0.vectorAt((-32.68));
      GreatArc greatArc0 = greatCircle0.arc((-32.68), (-32.68));
      greatArc0.getPrecision();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      // Undeclared exception!
      try { 
        AngularInterval.Convex.of(2882.58, (-4189.565223292961), precision_DoubleEquivalence1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Interval is not convex: [2,882.58, 2,885.301]
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.AngularInterval$Convex"", e);
      }
  }"
881,"    public AngularInterval.Convex getInterval() {
        return interval;
    }","  public void test7()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      AngularInterval.Convex angularInterval_Convex0 = greatArc0.getInterval();
}"
882,"    public Point2S getEndPoint() {
        if (!interval.isFull()) {
            return getCircle().toSpace(interval.getMaxBoundary().getPoint());
        }

        return null;
    }","  public void test8()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.arc((-32.68), (-32.68));
      Point2S point2S0 = greatArc0.getEndPoint();
}"
883,"    public Point2S getEndPoint() {
        if (!interval.isFull()) {
            return getCircle().toSpace(interval.getMaxBoundary().getPoint());
        }

        return null;
    }","  public void test9()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Y;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit1, precision_DoubleEquivalence0);
      Point2S point2S0 = Point2S.MINUS_K;
      Transform2S transform2S0 = Transform2S.createReflection(point2S0);
      GreatCircle greatCircle1 = greatCircle0.transform(transform2S0);
      GreatArc greatArc0 = greatCircle1.arc(point2S0, point2S0);
      Point2S point2S1 = greatArc0.getEndPoint();
}"
884,"    public GreatArc transform(final Transform<Point2S> transform) {
        return new GreatArc(getCircle().transform(transform), interval);
    }","  public void test10()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZXY;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 1069.016021, 1069.016021, 1069.016021);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Transform2S transform2S0 = Transform2S.createRotation(quaternionRotation0);
      // Undeclared exception!
      try { 
        greatArc0.transform(transform2S0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
885,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(this.getClass().getSimpleName()).append('[');

        if (isFull()) {
            sb.append(""full= true, circle= "")
                .append(getCircle());
        } else {
            sb.append(""start= "")
                .append(getStartPoint())
                .append("", end= "")
                .append(getEndPoint());
        }

        return sb.toString();
    }","  public void test11()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.arc((AngularInterval.Convex) null);
      // Undeclared exception!
      try { 
        greatArc0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircleSubset"", e);
      }
  }"
886,"    public Split<GreatArc> split(final Hyperplane<Point2S> splitter) {
        final GreatCircle splitterCircle = (GreatCircle) splitter;
        final GreatCircle thisCircle = getCircle();

        final Point2S intersection = splitterCircle.intersection(thisCircle);

        GreatArc minus = null;
        GreatArc plus = null;

        if (intersection != null) {
            // use a negative-facing cut angle to account for the fact that the great circle
            // poles point to the minus side of the circle
            final CutAngle subSplitter = CutAngles.createNegativeFacing(
                    thisCircle.toSubspace(intersection), splitterCircle.getPrecision());

            final Split<AngularInterval.Convex> subSplit = interval.splitDiameter(subSplitter);
            final SplitLocation subLoc = subSplit.getLocation();

            if (subLoc == SplitLocation.MINUS) {
                minus = this;
            } else if (subLoc == SplitLocation.PLUS) {
                plus = this;
            } else if (subLoc == SplitLocation.BOTH) {
                minus = GreatCircles.arcFromInterval(thisCircle, subSplit.getMinus());
                plus = GreatCircles.arcFromInterval(thisCircle, subSplit.getPlus());
            }
        }

        return new Split<>(minus, plus);
    }","  public void test12()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      // Undeclared exception!
      try { 
        greatArc0.split(greatCircle0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
887,"    public Split<GreatArc> split(final Hyperplane<Point2S> splitter) {
        final GreatCircle splitterCircle = (GreatCircle) splitter;
        final GreatCircle thisCircle = getCircle();

        final Point2S intersection = splitterCircle.intersection(thisCircle);

        GreatArc minus = null;
        GreatArc plus = null;

        if (intersection != null) {
            // use a negative-facing cut angle to account for the fact that the great circle
            // poles point to the minus side of the circle
            final CutAngle subSplitter = CutAngles.createNegativeFacing(
                    thisCircle.toSubspace(intersection), splitterCircle.getPrecision());

            final Split<AngularInterval.Convex> subSplit = interval.splitDiameter(subSplitter);
            final SplitLocation subLoc = subSplit.getLocation();

            if (subLoc == SplitLocation.MINUS) {
                minus = this;
            } else if (subLoc == SplitLocation.PLUS) {
                plus = this;
            } else if (subLoc == SplitLocation.BOTH) {
                minus = GreatCircles.arcFromInterval(thisCircle, subSplit.getMinus());
                plus = GreatCircles.arcFromInterval(thisCircle, subSplit.getPlus());
            }
        }

        return new Split<>(minus, plus);
    }","  public void test13()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, true, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Y;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit1, precision_DoubleEquivalence0);
      Point2S point2S0 = Point2S.MINUS_K;
      Transform2S transform2S0 = Transform2S.createReflection(point2S0);
      GreatCircle greatCircle1 = greatCircle0.transform(transform2S0);
      GreatArc greatArc0 = greatCircle1.arc(point2S0, point2S0);
      // Undeclared exception!
      try { 
        greatArc0.split(greatCircle0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Interval is not convex: [1.571, 4.712]
         //
         verifyException(""org.apache.commons.geometry.spherical.oned.AngularInterval$Convex"", e);
      }
  }"
888,"    public Point2S getStartPoint() {
        if (!interval.isFull()) {
            return getCircle().toSpace(interval.getMinBoundary().getPoint());
        }

        return null;
    }","  public void test14()  throws Throwable  {
      GreatArc greatArc0 = new GreatArc((GreatCircle) null, (AngularInterval.Convex) null);
      // Undeclared exception!
      try { 
        greatArc0.getStartPoint();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatArc"", e);
      }
  }"
889,"    public Point2S getMidPoint() {
        if (!interval.isFull()) {
            return getCircle().toSpace(interval.getMidPoint());
        }

        return null;
    }","  public void test15()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.arc((AngularInterval.Convex) null);
      // Undeclared exception!
      try { 
        greatArc0.getMidPoint();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatArc"", e);
      }
  }"
890,"    public Point2S getEndPoint() {
        if (!interval.isFull()) {
            return getCircle().toSpace(interval.getMaxBoundary().getPoint());
        }

        return null;
    }","  public void test16()  throws Throwable  {
      GreatArc greatArc0 = new GreatArc((GreatCircle) null, (AngularInterval.Convex) null);
      // Undeclared exception!
      try { 
        greatArc0.getEndPoint();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatArc"", e);
      }
  }"
891,"    public Point2S getStartPoint() {
        if (!interval.isFull()) {
            return getCircle().toSpace(interval.getMinBoundary().getPoint());
        }

        return null;
    }","  public void test17()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.arc((-32.68), (-32.68));
      Point2S point2S0 = greatArc0.getStartPoint();
}"
892,"    public AngularInterval.Convex getSubspaceRegion() {
        return getInterval();
    }","  public void test18()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      AngularInterval.Convex angularInterval_Convex0 = greatArc0.getSubspaceRegion();
}"
893,"    public Split<GreatArc> split(final Hyperplane<Point2S> splitter) {
        final GreatCircle splitterCircle = (GreatCircle) splitter;
        final GreatCircle thisCircle = getCircle();

        final Point2S intersection = splitterCircle.intersection(thisCircle);

        GreatArc minus = null;
        GreatArc plus = null;

        if (intersection != null) {
            // use a negative-facing cut angle to account for the fact that the great circle
            // poles point to the minus side of the circle
            final CutAngle subSplitter = CutAngles.createNegativeFacing(
                    thisCircle.toSubspace(intersection), splitterCircle.getPrecision());

            final Split<AngularInterval.Convex> subSplit = interval.splitDiameter(subSplitter);
            final SplitLocation subLoc = subSplit.getLocation();

            if (subLoc == SplitLocation.MINUS) {
                minus = this;
            } else if (subLoc == SplitLocation.PLUS) {
                plus = this;
            } else if (subLoc == SplitLocation.BOTH) {
                minus = GreatCircles.arcFromInterval(thisCircle, subSplit.getMinus());
                plus = GreatCircles.arcFromInterval(thisCircle, subSplit.getPlus());
            }
        }

        return new Split<>(minus, plus);
    }","  public void test19()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Y;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit1, precision_DoubleEquivalence0);
      Point2S point2S0 = Point2S.MINUS_K;
      Transform2S transform2S0 = Transform2S.createReflection(point2S0);
      GreatCircle greatCircle1 = greatCircle0.transform(transform2S0);
      GreatArc greatArc0 = greatCircle1.arc(point2S0, point2S0);
      Split<GreatArc> split0 = greatArc0.split(greatCircle0);
}"
894,"    public Split<GreatArc> split(final Hyperplane<Point2S> splitter) {
        final GreatCircle splitterCircle = (GreatCircle) splitter;
        final GreatCircle thisCircle = getCircle();

        final Point2S intersection = splitterCircle.intersection(thisCircle);

        GreatArc minus = null;
        GreatArc plus = null;

        if (intersection != null) {
            // use a negative-facing cut angle to account for the fact that the great circle
            // poles point to the minus side of the circle
            final CutAngle subSplitter = CutAngles.createNegativeFacing(
                    thisCircle.toSubspace(intersection), splitterCircle.getPrecision());

            final Split<AngularInterval.Convex> subSplit = interval.splitDiameter(subSplitter);
            final SplitLocation subLoc = subSplit.getLocation();

            if (subLoc == SplitLocation.MINUS) {
                minus = this;
            } else if (subLoc == SplitLocation.PLUS) {
                plus = this;
            } else if (subLoc == SplitLocation.BOTH) {
                minus = GreatCircles.arcFromInterval(thisCircle, subSplit.getMinus());
                plus = GreatCircles.arcFromInterval(thisCircle, subSplit.getPlus());
            }
        }

        return new Split<>(minus, plus);
    }","  public void test20()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, true, true, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Y;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit1, precision_DoubleEquivalence0);
      Point2S point2S0 = Point2S.MINUS_K;
      Transform2S transform2S0 = Transform2S.createReflection(point2S0);
      GreatCircle greatCircle1 = greatCircle0.transform(transform2S0);
      GreatArc greatArc0 = greatCircle1.arc(point2S0, point2S0);
      Split<GreatArc> split0 = greatArc0.split(greatCircle0);
}"
895,"    public Split<GreatArc> split(final Hyperplane<Point2S> splitter) {
        final GreatCircle splitterCircle = (GreatCircle) splitter;
        final GreatCircle thisCircle = getCircle();

        final Point2S intersection = splitterCircle.intersection(thisCircle);

        GreatArc minus = null;
        GreatArc plus = null;

        if (intersection != null) {
            // use a negative-facing cut angle to account for the fact that the great circle
            // poles point to the minus side of the circle
            final CutAngle subSplitter = CutAngles.createNegativeFacing(
                    thisCircle.toSubspace(intersection), splitterCircle.getPrecision());

            final Split<AngularInterval.Convex> subSplit = interval.splitDiameter(subSplitter);
            final SplitLocation subLoc = subSplit.getLocation();

            if (subLoc == SplitLocation.MINUS) {
                minus = this;
            } else if (subLoc == SplitLocation.PLUS) {
                plus = this;
            } else if (subLoc == SplitLocation.BOTH) {
                minus = GreatCircles.arcFromInterval(thisCircle, subSplit.getMinus());
                plus = GreatCircles.arcFromInterval(thisCircle, subSplit.getPlus());
            }
        }

        return new Split<>(minus, plus);
    }","  public void test21()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.arc((-32.68), (-32.68));
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = greatArc0.getPrecision();
      GreatCircle greatCircle1 = new GreatCircle(vector3D_Unit1, vector3D_Unit1, vector3D_Unit0, precision_DoubleEquivalence1);
      Split<GreatArc> split0 = greatArc0.split(greatCircle1);
}"
896,"    public Split<GreatArc> split(final Hyperplane<Point2S> splitter) {
        final GreatCircle splitterCircle = (GreatCircle) splitter;
        final GreatCircle thisCircle = getCircle();

        final Point2S intersection = splitterCircle.intersection(thisCircle);

        GreatArc minus = null;
        GreatArc plus = null;

        if (intersection != null) {
            // use a negative-facing cut angle to account for the fact that the great circle
            // poles point to the minus side of the circle
            final CutAngle subSplitter = CutAngles.createNegativeFacing(
                    thisCircle.toSubspace(intersection), splitterCircle.getPrecision());

            final Split<AngularInterval.Convex> subSplit = interval.splitDiameter(subSplitter);
            final SplitLocation subLoc = subSplit.getLocation();

            if (subLoc == SplitLocation.MINUS) {
                minus = this;
            } else if (subLoc == SplitLocation.PLUS) {
                plus = this;
            } else if (subLoc == SplitLocation.BOTH) {
                minus = GreatCircles.arcFromInterval(thisCircle, subSplit.getMinus());
                plus = GreatCircles.arcFromInterval(thisCircle, subSplit.getPlus());
            }
        }

        return new Split<>(minus, plus);
    }","  public void test22()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.span();
      Split<GreatArc> split0 = greatArc0.split(greatCircle0);
}"
897,"    public Point2S getMidPoint() {
        if (!interval.isFull()) {
            return getCircle().toSpace(interval.getMidPoint());
        }

        return null;
    }","  public void test23()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.arc((-32.68), (-32.68));
      Point2S point2S0 = greatArc0.getMidPoint();
}"
898,"    public Point2S getMidPoint() {
        if (!interval.isFull()) {
            return getCircle().toSpace(interval.getMidPoint());
        }

        return null;
    }","  public void test24()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      Point2S point2S0 = greatArc0.getMidPoint();
}"
899,"    public Point2S getEndPoint() {
        if (!interval.isFull()) {
            return getCircle().toSpace(interval.getMaxBoundary().getPoint());
        }

        return null;
    }","  public void test25()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      Point2S point2S0 = greatArc0.getEndPoint();
}"
900,"    public Point2S getStartPoint() {
        if (!interval.isFull()) {
            return getCircle().toSpace(interval.getMinBoundary().getPoint());
        }

        return null;
    }","  public void test26()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      Point2S point2S0 = greatArc0.getStartPoint();
}"
901,"    public GreatArc reverse() {
        return new GreatArc(
                getCircle().reverse(),
                interval.transform(Transform1S.createNegation()));
    }","  public void test27()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      GreatArc greatArc1 = greatArc0.reverse();
}"
902,"    public GreatArc transform(final Transform<Point2S> transform) {
        return new GreatArc(getCircle().transform(transform), interval);
    }","  public void test28()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      GreatArc greatArc0 = greatCircle0.arc((-32.68), (-32.68));
      // Undeclared exception!
      try { 
        greatArc0.transform((Transform<Point2S>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatCircle"", e);
      }
  }"
903,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(this.getClass().getSimpleName()).append('[');

        if (isFull()) {
            sb.append(""full= true, circle= "")
                .append(getCircle());
        } else {
            sb.append(""start= "")
                .append(getStartPoint())
                .append("", end= "")
                .append(getEndPoint());
        }

        return sb.toString();
    }","  public void test29()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      GreatArc greatArc0 = greatCircle0.span();
      String string0 = greatArc0.toString();
}"
904,"    public GreatArc reverse() {
        return new GreatArc(
                getCircle().reverse(),
                interval.transform(Transform1S.createNegation()));
    }","  public void test30()  throws Throwable  {
      AngularInterval.Convex angularInterval_Convex0 = AngularInterval.full();
      GreatArc greatArc0 = new GreatArc((GreatCircle) null, angularInterval_Convex0);
      // Undeclared exception!
      try { 
        greatArc0.reverse();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.GreatArc"", e);
      }
  }"
905,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof Point2S)) {
            return false;
        }

        final Point2S rhs = (Point2S) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }

        return Double.compare(azimuth, rhs.azimuth) == 0 &&
                Double.compare(polar, rhs.polar) == 0;
    }","  public void test0()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Point2S point2S1 = Point2S.from(vector3D_Unit0);
      boolean boolean0 = point2S0.equals(point2S1);
}"
906,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof Point2S)) {
            return false;
        }

        final Point2S rhs = (Point2S) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }

        return Double.compare(azimuth, rhs.azimuth) == 0 &&
                Double.compare(polar, rhs.polar) == 0;
    }","  public void test1()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Point2S point2S1 = Point2S.from(vector3D_Unit0);
      boolean boolean0 = point2S0.equals(point2S1);
}"
907,"    public double getAzimuth() {
        return azimuth;
    }","  public void test2()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Point2S point2S1 = Point2S.from(vector3D_Unit0);
      boolean boolean0 = point2S0.equals(point2S1);
}"
908,"    public double getPolar() {
        return polar;
    }","  public void test3()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Point2S point2S1 = Point2S.from(vector3D_Unit0);
      boolean boolean0 = point2S0.equals(point2S1);
}"
909,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof Point2S)) {
            return false;
        }

        final Point2S rhs = (Point2S) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }

        return Double.compare(azimuth, rhs.azimuth) == 0 &&
                Double.compare(polar, rhs.polar) == 0;
    }","  public void test4()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_I;
      Point2S point2S1 = Point2S.PLUS_J;
      boolean boolean0 = point2S0.equals(point2S1);
}"
910,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof Point2S)) {
            return false;
        }

        final Point2S rhs = (Point2S) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }

        return Double.compare(azimuth, rhs.azimuth) == 0 &&
                Double.compare(polar, rhs.polar) == 0;
    }","  public void test5()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_I;
      Point2S point2S1 = Point2S.PLUS_J;
      boolean boolean0 = point2S0.equals(point2S1);
}"
911,"    public double getAzimuth() {
        return azimuth;
    }","  public void test6()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_K;
      Point2S point2S1 = point2S0.PLUS_K.slerp(point2S0, 0.0);
}"
912,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof Point2S)) {
            return false;
        }

        final Point2S rhs = (Point2S) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }

        return Double.compare(azimuth, rhs.azimuth) == 0 &&
                Double.compare(polar, rhs.polar) == 0;
    }","  public void test7()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Point2S point2S1 = point2S0.slerp(point2S0, 0.0);
}"
913,"    public double getPolar() {
        return polar;
    }","  public void test8()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      Point2S point2S1 = point2S0.PLUS_K.slerp(point2S0, 2065.170361);
}"
914,"    public double getAzimuth() {
        return azimuth;
    }","  public void test9()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      Point2S point2S1 = point2S0.PLUS_K.slerp(point2S0, 2065.170361);
}"
915,"    public double getAzimuth() {
        return azimuth;
    }","  public void test10()  throws Throwable  {
      Point2S point2S0 = Point2S.parse(""(0.0, 0.0)"");
}"
916,"    public boolean isInfinite() {
        return !isNaN() && (Double.isInfinite(azimuth) || Double.isInfinite(polar));
    }","  public void test11()  throws Throwable  {
      Point2S point2S0 = Point2S.parse(""(NaN, NaN)"");
}"
917,"    public double getAzimuth() {
        return azimuth;
    }","  public void test12()  throws Throwable  {
      Point2S point2S0 = Point2S.of(1.5707963267948966, 0.0);
}"
918,"    public double getPolar() {
        return polar;
    }","  public void test13()  throws Throwable  {
      Point2S point2S0 = Point2S.of(1.5707963267948966, 0.0);
}"
919,"    public double getAzimuth() {
        return azimuth;
    }","  public void test14()  throws Throwable  {
      Point2S point2S0 = Point2S.of(0.0, 1.5707963267948966);
}"
920,"    public double getPolar() {
        return polar;
    }","  public void test15()  throws Throwable  {
      Point2S point2S0 = Point2S.of(0.0, 1.5707963267948966);
}"
921,"    public Vector3D.Unit getVector() {
        return vector;
    }","  public void test16()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1.0), Double.NaN);
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
}"
922,"    public double getPolar() {
        return polar;
    }","  public void test17()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1.0), Double.NaN);
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
}"
923,"    public double getAzimuth() {
        return azimuth;
    }","  public void test18()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1.0), Double.NaN);
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
}"
924,"    public boolean isInfinite() {
        return !isNaN() && (Double.isInfinite(azimuth) || Double.isInfinite(polar));
    }","  public void test19()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
}"
925,"    public double getAzimuth() {
        return azimuth;
    }","  public void test20()  throws Throwable  {
      Point2S point2S0 = Point2S.of(484.757, 484.757);
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
}"
926,"    public Vector3D.Unit getVector() {
        return vector;
    }","  public void test21()  throws Throwable  {
      Point2S point2S0 = Point2S.of(484.757, 484.757);
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
}"
927,"    public double getPolar() {
        return polar;
    }","  public void test22()  throws Throwable  {
      Point2S point2S0 = Point2S.of(484.757, 484.757);
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
}"
928,"    public int getDimension() {
        return 2;
    }","  public void test23()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
}"
929,"    public double getPolar() {
        return polar;
    }","  public void test24()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_K;
      double double0 = point2S0.getPolar();
}"
930,"    public double getAzimuth() {
        return azimuth;
    }","  public void test25()  throws Throwable  {
      Point2S point2S0 = Point2S.of(3997.1697075, Double.NEGATIVE_INFINITY);
      double double0 = point2S0.getPolar();
}"
931,"    public double getPolar() {
        return polar;
    }","  public void test26()  throws Throwable  {
      Point2S point2S0 = Point2S.of(3997.1697075, Double.NEGATIVE_INFINITY);
      double double0 = point2S0.getPolar();
}"
932,"    public double getAzimuth() {
        return azimuth;
    }","  public void test27()  throws Throwable  {
      Point2S point2S0 = Point2S.of(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      double double0 = point2S0.getAzimuth();
}"
933,"    public double getPolar() {
        return polar;
    }","  public void test28()  throws Throwable  {
      Point2S point2S0 = Point2S.of(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      double double0 = point2S0.getAzimuth();
}"
934,"    public double getAzimuth() {
        return azimuth;
    }","  public void test29()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Point2S point2S0 = Point2S.from(vector3D_Unit0);
}"
935,"    public boolean eq(final Point2S point, final Precision.DoubleEquivalence precision) {
        return precision.eqZero(distance(point));
    }","  public void test30()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      boolean boolean0 = point2S0.PLUS_I.eq(point2S0, precision_DoubleEquivalence0);
}"
936,"    public double getAzimuth() {
        return azimuth;
    }","  public void test31()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      Point2S point2S1 = Point2S.of(484.757, 484.757);
      double double0 = Point2S.distance(point2S1, point2S0);
}"
937,"    public double getPolar() {
        return polar;
    }","  public void test32()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      Point2S point2S1 = Point2S.of(484.757, 484.757);
      double double0 = Point2S.distance(point2S1, point2S0);
}"
938,"    public double distance(final Point2S point) {
        return distance(this, point);
    }","  public void test33()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      Point2S point2S1 = Point2S.of(484.757, 484.757);
      double double0 = Point2S.distance(point2S1, point2S0);
}"
939,"    public double distance(final Point2S point) {
        return distance(this, point);
    }","  public void test34()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      double double0 = point2S0.MINUS_I.distance(point2S0);
}"
940,"    public double getPolar() {
        return polar;
    }","  public void test35()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Point2S point2S1 = point2S0.antipodal();
      double double0 = point2S1.getAzimuth();
}"
941,"    public double getAzimuth() {
        return azimuth;
    }","  public void test36()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Point2S point2S1 = point2S0.antipodal();
      double double0 = point2S1.getAzimuth();
}"
942,"    public Point2S slerp(final Point2S other, final double t) {
        final QuaternionRotation start = QuaternionRotation.identity();
        final QuaternionRotation end = QuaternionRotation.createVectorRotation(getVector(), other.getVector());

        final QuaternionRotation quat = start.slerp(end).apply(t);

        return Point2S.from(quat.apply(getVector()));
    }","  public void test37()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_I;
      // Undeclared exception!
      try { 
        point2S0.MINUS_I.slerp(point2S0, Double.POSITIVE_INFINITY);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Illegal norm: NaN
         //
         verifyException(""org.apache.commons.numbers.quaternion.Quaternion"", e);
      }
  }"
943,"    public static Point2S parse(final String str) {
        return SimpleTupleFormat.getDefault().parse(str, Point2S::of);
    }","  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        Point2S.parse((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.internal.SimpleTupleFormat"", e);
      }
  }"
944,"    public static Point2S from(final Vector3D vector) {
        final SphericalCoordinates coords = SphericalCoordinates.fromCartesian(vector);

        return new Point2S(coords.getAzimuth(), coords.getPolar(), vector.normalize());
    }","  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        Point2S.from((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.SphericalCoordinates"", e);
      }
  }"
945,"    public static Point2S from(final Vector3D vector) {
        final SphericalCoordinates coords = SphericalCoordinates.fromCartesian(vector);

        return new Point2S(coords.getAzimuth(), coords.getPolar(), vector.normalize());
    }","  public void test40()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        Point2S.from(vector3D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
946,"    public boolean eq(final Point2S point, final Precision.DoubleEquivalence precision) {
        return precision.eqZero(distance(point));
    }","  public void test41()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      // Undeclared exception!
      try { 
        point2S0.PLUS_I.eq(point2S0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.Point2S"", e);
      }
  }"
947,"    public double distance(final Point2S point) {
        return distance(this, point);
    }","  public void test42()  throws Throwable  {
      Point2S point2S0 = Point2S.NaN;
      // Undeclared exception!
      try { 
        Point2S.distance(point2S0, point2S0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.Point2S"", e);
      }
  }"
948,"    public double distance(final Point2S point) {
        return distance(this, point);
    }","  public void test43()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_I;
      // Undeclared exception!
      try { 
        point2S0.distance((Point2S) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.spherical.twod.Point2S"", e);
      }
  }"
949,"    public boolean isNaN() {
        return Double.isNaN(azimuth) || Double.isNaN(polar);
    }","  public void test44()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      boolean boolean0 = point2S0.isNaN();
}"
950,"    public double getPolar() {
        return polar;
    }","  public void test45()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_I;
      double double0 = point2S0.getPolar();
}"
951,"    public double distance(final Point2S point) {
        return distance(this, point);
    }","  public void test46()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      double double0 = point2S0.distance(point2S0);
}"
952,"    public double getAzimuth() {
        return azimuth;
    }","  public void test47()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_I;
      double double0 = point2S0.getAzimuth();
}"
953,"    public double distance(final Point2S point) {
        return distance(this, point);
    }","  public void test48()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_I;
      double double0 = Point2S.distance(point2S0, point2S0);
}"
954,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof Point2S)) {
            return false;
        }

        final Point2S rhs = (Point2S) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }

        return Double.compare(azimuth, rhs.azimuth) == 0 &&
                Double.compare(polar, rhs.polar) == 0;
    }","  public void test49()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_K;
      Point2S point2S1 = Point2S.PLUS_I;
      boolean boolean0 = point2S0.equals(point2S1);
}"
955,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof Point2S)) {
            return false;
        }

        final Point2S rhs = (Point2S) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }

        return Double.compare(azimuth, rhs.azimuth) == 0 &&
                Double.compare(polar, rhs.polar) == 0;
    }","  public void test50()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_K;
      Point2S point2S1 = Point2S.PLUS_I;
      boolean boolean0 = point2S0.equals(point2S1);
}"
956,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof Point2S)) {
            return false;
        }

        final Point2S rhs = (Point2S) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }

        return Double.compare(azimuth, rhs.azimuth) == 0 &&
                Double.compare(polar, rhs.polar) == 0;
    }","  public void test51()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Point2S point2S1 = Point2S.NaN;
      boolean boolean0 = point2S1.equals(point2S0);
}"
957,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof Point2S)) {
            return false;
        }

        final Point2S rhs = (Point2S) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }

        return Double.compare(azimuth, rhs.azimuth) == 0 &&
                Double.compare(polar, rhs.polar) == 0;
    }","  public void test52()  throws Throwable  {
      Point2S point2S0 = Point2S.NaN;
      Point2S point2S1 = Point2S.MINUS_J;
      boolean boolean0 = point2S1.equals(point2S0);
}"
958,"    public boolean isNaN() {
        return Double.isNaN(azimuth) || Double.isNaN(polar);
    }","  public void test53()  throws Throwable  {
      Point2S point2S0 = Point2S.NaN;
      Point2S point2S1 = Point2S.MINUS_J;
      boolean boolean0 = point2S1.equals(point2S0);
}"
959,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof Point2S)) {
            return false;
        }

        final Point2S rhs = (Point2S) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }

        return Double.compare(azimuth, rhs.azimuth) == 0 &&
                Double.compare(polar, rhs.polar) == 0;
    }","  public void test54()  throws Throwable  {
      Point2S point2S0 = Point2S.NaN;
      Point2S point2S1 = Point2S.MINUS_J;
      boolean boolean0 = point2S1.equals(point2S0);
}"
960,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof Point2S)) {
            return false;
        }

        final Point2S rhs = (Point2S) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }

        return Double.compare(azimuth, rhs.azimuth) == 0 &&
                Double.compare(polar, rhs.polar) == 0;
    }","  public void test55()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      Point2S point2S1 = point2S0.PLUS_I.antipodal();
      boolean boolean0 = point2S1.equals(point2S0);
}"
961,"    public boolean isNaN() {
        return Double.isNaN(azimuth) || Double.isNaN(polar);
    }","  public void test56()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      Point2S point2S1 = point2S0.PLUS_I.antipodal();
      boolean boolean0 = point2S1.equals(point2S0);
}"
962,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof Point2S)) {
            return false;
        }

        final Point2S rhs = (Point2S) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }

        return Double.compare(azimuth, rhs.azimuth) == 0 &&
                Double.compare(polar, rhs.polar) == 0;
    }","  public void test57()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      boolean boolean0 = point2S0.equals(point2S0);
}"
963,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof Point2S)) {
            return false;
        }

        final Point2S rhs = (Point2S) other;
        if (rhs.isNaN()) {
            return this.isNaN();
        }

        return Double.compare(azimuth, rhs.azimuth) == 0 &&
                Double.compare(polar, rhs.polar) == 0;
    }","  public void test58()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      Object object0 = new Object();
      boolean boolean0 = point2S0.equals(object0);
}"
964,"    public boolean isNaN() {
        return Double.isNaN(azimuth) || Double.isNaN(polar);
    }","  public void test59()  throws Throwable  {
      Point2S point2S0 = Point2S.NaN;
      point2S0.hashCode();
}"
965,"    public double getAzimuth() {
        return azimuth;
    }","  public void test60()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1.0), Double.NaN);
      boolean boolean0 = point2S0.isFinite();
}"
966,"    public boolean isFinite() {
        return Double.isFinite(azimuth) && Double.isFinite(polar);
    }","  public void test61()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1.0), Double.NaN);
      boolean boolean0 = point2S0.isFinite();
}"
967,"    public boolean isFinite() {
        return Double.isFinite(azimuth) && Double.isFinite(polar);
    }","  public void test62()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      boolean boolean0 = point2S0.MINUS_K.isFinite();
}"
968,"    public double getAzimuth() {
        return azimuth;
    }","  public void test63()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1551.072971986405), (-1551.072971986405));
      boolean boolean0 = point2S0.NaN.isFinite();
}"
969,"    public boolean isFinite() {
        return Double.isFinite(azimuth) && Double.isFinite(polar);
    }","  public void test64()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1551.072971986405), (-1551.072971986405));
      boolean boolean0 = point2S0.NaN.isFinite();
}"
970,"    public double getPolar() {
        return polar;
    }","  public void test65()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1551.072971986405), (-1551.072971986405));
      boolean boolean0 = point2S0.NaN.isFinite();
}"
971,"    public double getPolar() {
        return polar;
    }","  public void test66()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1.4256995744312684), Double.NEGATIVE_INFINITY);
      boolean boolean0 = point2S0.isInfinite();
}"
972,"    public boolean isInfinite() {
        return !isNaN() && (Double.isInfinite(azimuth) || Double.isInfinite(polar));
    }","  public void test67()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1.4256995744312684), Double.NEGATIVE_INFINITY);
      boolean boolean0 = point2S0.isInfinite();
}"
973,"    public double getAzimuth() {
        return azimuth;
    }","  public void test68()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1.4256995744312684), Double.NEGATIVE_INFINITY);
      boolean boolean0 = point2S0.isInfinite();
}"
974,"    public boolean isNaN() {
        return Double.isNaN(azimuth) || Double.isNaN(polar);
    }","  public void test69()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      boolean boolean0 = point2S0.isInfinite();
}"
975,"    public boolean isInfinite() {
        return !isNaN() && (Double.isInfinite(azimuth) || Double.isInfinite(polar));
    }","  public void test70()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      boolean boolean0 = point2S0.isInfinite();
}"
976,"    public double getAzimuth() {
        return azimuth;
    }","  public void test71()  throws Throwable  {
      Point2S point2S0 = Point2S.of(0.967072604488304, Double.NaN);
      boolean boolean0 = point2S0.isInfinite();
}"
977,"    public boolean isInfinite() {
        return !isNaN() && (Double.isInfinite(azimuth) || Double.isInfinite(polar));
    }","  public void test72()  throws Throwable  {
      Point2S point2S0 = Point2S.of(0.967072604488304, Double.NaN);
      boolean boolean0 = point2S0.isInfinite();
}"
978,"    public boolean isNaN() {
        return Double.isNaN(azimuth) || Double.isNaN(polar);
    }","  public void test73()  throws Throwable  {
      Point2S point2S0 = Point2S.of(0.967072604488304, Double.NaN);
      boolean boolean0 = point2S0.isInfinite();
}"
979,"    public double getAzimuth() {
        return azimuth;
    }","  public void test74()  throws Throwable  {
      Point2S point2S0 = Point2S.of(0.9999999999, Double.NaN);
      boolean boolean0 = point2S0.isNaN();
}"
980,"    public boolean isNaN() {
        return Double.isNaN(azimuth) || Double.isNaN(polar);
    }","  public void test75()  throws Throwable  {
      Point2S point2S0 = Point2S.of(0.9999999999, Double.NaN);
      boolean boolean0 = point2S0.isNaN();
}"
981,"    public boolean isNaN() {
        return Double.isNaN(azimuth) || Double.isNaN(polar);
    }","  public void test76()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      point2S0.MINUS_I.hashCode();
}"
982,"    public boolean isNaN() {
        return Double.isNaN(azimuth) || Double.isNaN(polar);
    }","  public void test77()  throws Throwable  {
      Point2S point2S0 = Point2S.NaN;
      boolean boolean0 = point2S0.isNaN();
}"
983,"    public int getDimension() {
        return 2;
    }","  public void test78()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      int int0 = point2S0.getDimension();
}"
984,"    public double getAzimuth() {
        return azimuth;
    }","  public void test79()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
      Point2S point2S1 = Point2S.from(vector3D_Unit0);
}"
985,"    public static Point2S parse(final String str) {
        return SimpleTupleFormat.getDefault().parse(str, Point2S::of);
    }","  public void test80()  throws Throwable  {
      // Undeclared exception!
      try { 
        Point2S.parse("""");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \""\"" at index 0: expected \""(\"" but found \""\""
         //
         verifyException(""org.apache.commons.geometry.core.internal.SimpleTupleFormat"", e);
      }
  }"
986,"    public boolean eq(final Point2S point, final Precision.DoubleEquivalence precision) {
        return precision.eqZero(distance(point));
    }","  public void test81()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      boolean boolean0 = point2S0.PLUS_K.eq(point2S0, precision_DoubleEquivalence0);
}"
987,"    public Point2S slerp(final Point2S other, final double t) {
        final QuaternionRotation start = QuaternionRotation.identity();
        final QuaternionRotation end = QuaternionRotation.createVectorRotation(getVector(), other.getVector());

        final QuaternionRotation quat = start.slerp(end).apply(t);

        return Point2S.from(quat.apply(getVector()));
    }","  public void test82()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1.4256995744312684), Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        point2S0.slerp(point2S0, Double.NEGATIVE_INFINITY);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
988,"    public boolean isInfinite() {
        return !isNaN() && (Double.isInfinite(azimuth) || Double.isInfinite(polar));
    }","  public void test83()  throws Throwable  {
      Point2S point2S0 = Point2S.of(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      boolean boolean0 = point2S0.isInfinite();
}"
989,"    public double getAzimuth() {
        return azimuth;
    }","  public void test84()  throws Throwable  {
      Point2S point2S0 = Point2S.of(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      boolean boolean0 = point2S0.isInfinite();
}"
990,"    public double getPolar() {
        return polar;
    }","  public void test85()  throws Throwable  {
      Point2S point2S0 = Point2S.of(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      boolean boolean0 = point2S0.isInfinite();
}"
991,"    public String toString() {
        return SimpleTupleFormat.getDefault().format(getAzimuth(), getPolar());
    }","  public void test86()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      String string0 = point2S0.PLUS_K.toString();
}"
992,"    public Vector3D getNormal() {
        return normal;
    }","  public void test0()  throws Throwable  {
      Stack<Vector3D> stack0 = new Stack<Vector3D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      stack0.add((Vector3D) vector3D_Unit0);
      stack0.add((Vector3D) vector3D_Unit0);
      stack0.add((Vector3D) vector3D_Unit0);
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Y;
      SimpleFacetDefinition simpleFacetDefinition0 = new SimpleFacetDefinition(stack0, vector3D_Unit1);
      Vector3D vector3D0 = simpleFacetDefinition0.getNormal();
}"
993,"    public Vector3D getNormal() {
        return normal;
    }","  public void test1()  throws Throwable  {
      ArrayList<Vector3D> arrayList0 = new ArrayList<Vector3D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-689.845), (-689.845), (-689.845));
      arrayList0.add((Vector3D) vector3D_Unit0);
      arrayList0.add((Vector3D) vector3D_Unit0);
      arrayList0.add((Vector3D) vector3D_Unit0);
      SimpleFacetDefinition simpleFacetDefinition0 = new SimpleFacetDefinition(arrayList0, vector3D_Unit0);
      Vector3D vector3D0 = simpleFacetDefinition0.getNormal();
}"
994,"    public Vector3D getNormal() {
        return normal;
    }","  public void test2()  throws Throwable  {
      ArrayList<Vector3D> arrayList0 = new ArrayList<Vector3D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      arrayList0.add((Vector3D) vector3D_Unit0);
      arrayList0.add((Vector3D) vector3D_Unit0);
      arrayList0.add((Vector3D) vector3D_Unit0);
      SimpleFacetDefinition simpleFacetDefinition0 = new SimpleFacetDefinition(arrayList0, vector3D_Unit0);
      Vector3D vector3D0 = simpleFacetDefinition0.getNormal();
}"
995,"    public SimpleFacetDefinition(final List<Vector3D> vertices) {
        this(vertices, null);
    }","  public void test3()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      SimpleFacetDefinition simpleFacetDefinition0 = null;
      try {
        simpleFacetDefinition0 = new SimpleFacetDefinition((List<Vector3D>) null, vector3D_Unit0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Facet vertex list cannot be null
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
996,"    public SimpleFacetDefinition(final List<Vector3D> vertices) {
        this(vertices, null);
    }","  public void test4()  throws Throwable  {
      SimpleFacetDefinition simpleFacetDefinition0 = null;
      try {
        simpleFacetDefinition0 = new SimpleFacetDefinition((List<Vector3D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Facet vertex list cannot be null
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
997,"    public SimpleFacetDefinition(final List<Vector3D> vertices) {
        this(vertices, null);
    }","  public void test5()  throws Throwable  {
      Stack<Vector3D> stack0 = new Stack<Vector3D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(0.9995, 0.9995, 0.9995);
      SimpleFacetDefinition simpleFacetDefinition0 = null;
      try {
        simpleFacetDefinition0 = new SimpleFacetDefinition(stack0, vector3D_Unit0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Facet vertex list must contain at least 3 points; found 0
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.SimpleFacetDefinition"", e);
      }
  }"
998,"    public Vector3D getNormal() {
        return normal;
    }","  public void test6()  throws Throwable  {
      ArrayList<Vector3D> arrayList0 = new ArrayList<Vector3D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      arrayList0.add((Vector3D) vector3D_Unit0);
      arrayList0.add((Vector3D) vector3D_Unit0);
      arrayList0.add((Vector3D) vector3D_Unit0);
      SimpleFacetDefinition simpleFacetDefinition0 = new SimpleFacetDefinition(arrayList0, vector3D_Unit0);
      Vector3D vector3D0 = simpleFacetDefinition0.getNormal();
}"
999,"    public Vector3D getNormal() {
        return normal;
    }","  public void test7()  throws Throwable  {
      ArrayList<Vector3D> arrayList0 = new ArrayList<Vector3D>();
      AxisSequence axisSequence0 = AxisSequence.YXY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      arrayList0.add(vector3D0);
      arrayList0.add(vector3D0);
      arrayList0.add(vector3D0);
      SimpleFacetDefinition simpleFacetDefinition0 = new SimpleFacetDefinition(arrayList0);
      Vector3D vector3D1 = simpleFacetDefinition0.getNormal();
}"
1000,"    public List<Vector3D> getVertices() {
        return vertices;
    }","  public void test8()  throws Throwable  {
      ArrayList<Vector3D> arrayList0 = new ArrayList<Vector3D>();
      AxisSequence axisSequence0 = AxisSequence.YXY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      arrayList0.add(vector3D0);
      arrayList0.add(vector3D0);
      arrayList0.add(vector3D0);
      SimpleFacetDefinition simpleFacetDefinition0 = new SimpleFacetDefinition(arrayList0);
      List<Vector3D> list0 = simpleFacetDefinition0.getVertices();
}"
1001,"    public SimpleFacetDefinition(final List<Vector3D> vertices) {
        this(vertices, null);
    }","  public void test9()  throws Throwable  {
      Stack<Vector3D> stack0 = new Stack<Vector3D>();
      LinkedList<Vector3D> linkedList0 = new LinkedList<Vector3D>(stack0);
      SimpleFacetDefinition simpleFacetDefinition0 = null;
      try {
        simpleFacetDefinition0 = new SimpleFacetDefinition(linkedList0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Facet vertex list must contain at least 3 points; found 0
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.SimpleFacetDefinition"", e);
      }
  }"
1002,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName())
            .append(""[vertices= "")
            .append(getVertices())
            .append("", normal= "")
            .append(getNormal())
            .append(']');

        return sb.toString();
    }","  public void test10()  throws Throwable  {
      ArrayList<Vector3D> arrayList0 = new ArrayList<Vector3D>();
      AxisSequence axisSequence0 = AxisSequence.YXY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      arrayList0.add(vector3D0);
      arrayList0.add(vector3D0);
      arrayList0.add(vector3D0);
      SimpleFacetDefinition simpleFacetDefinition0 = new SimpleFacetDefinition(arrayList0);
      String string0 = simpleFacetDefinition0.toString();
}"
1003,"    public Stream<FacetDefinition> facets(final GeometryInput in) {
        return GeometryIOUtils.createCloseableStream(inputStream -> {
            final FacetDefinitionReader fdReader = facetDefinitionReader(in);
            final FacetDefinitionReaderIterator it = new FacetDefinitionReaderIterator(fdReader);

            return StreamSupport.stream(Spliterators.spliteratorUnknownSize(it, Spliterator.ORDERED), false);
        }, in::getInputStream);
    }","  public void test0()  throws Throwable  {
      ObjBoundaryReadHandler3D objBoundaryReadHandler3D0 = new ObjBoundaryReadHandler3D();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      StreamGeometryInput streamGeometryInput0 = new StreamGeometryInput(sequenceInputStream0);
      Stream<FacetDefinition> stream0 = objBoundaryReadHandler3D0.facets(streamGeometryInput0);
}"
1004,"    public Stream<PlaneConvexSubset> boundaries(final GeometryInput in, final Precision.DoubleEquivalence precision) {
        return facets(in)
                .map(f -> FacetDefinitions.toPolygon(f, precision));
    }","  public void test1()  throws Throwable  {
      CsvBoundaryReadHandler3D csvBoundaryReadHandler3D0 = new CsvBoundaryReadHandler3D();
      MockFile mockFile0 = new MockFile("""");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      FileGeometryInput fileGeometryInput0 = new FileGeometryInput(path0, charset0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Stream<PlaneConvexSubset> stream0 = csvBoundaryReadHandler3D0.boundaries(fileGeometryInput0, precision_DoubleEquivalence0);
}"
1005,"    public TriangleMesh readTriangleMesh(final GeometryInput in, final Precision.DoubleEquivalence precision) {
        final SimpleTriangleMesh.Builder meshBuilder = SimpleTriangleMesh.builder(precision);

        try (FacetDefinitionReader reader = facetDefinitionReader(in)) {
            FacetDefinition facet;
            while ((facet = reader.readFacet()) != null) {
                for (final Triangle3D tri : FacetDefinitions.toPolygon(facet, precision).toTriangles()) {
                    meshBuilder.addFaceUsingVertices(
                        tri.getPoint1(),
                        tri.getPoint2(),
                        tri.getPoint3()
                    );
                }
            }
        }

        return meshBuilder.build();
    }","  public void test2()  throws Throwable  {
      TextBoundaryReadHandler3D textBoundaryReadHandler3D0 = new TextBoundaryReadHandler3D();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        textBoundaryReadHandler3D0.readTriangleMesh((GeometryInput) null, precision_DoubleEquivalence0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1006,"    public TriangleMesh readTriangleMesh(final GeometryInput in, final Precision.DoubleEquivalence precision) {
        final SimpleTriangleMesh.Builder meshBuilder = SimpleTriangleMesh.builder(precision);

        try (FacetDefinitionReader reader = facetDefinitionReader(in)) {
            FacetDefinition facet;
            while ((facet = reader.readFacet()) != null) {
                for (final Triangle3D tri : FacetDefinitions.toPolygon(facet, precision).toTriangles()) {
                    meshBuilder.addFaceUsingVertices(
                        tri.getPoint1(),
                        tri.getPoint2(),
                        tri.getPoint3()
                    );
                }
            }
        }

        return meshBuilder.build();
    }","  public void test3()  throws Throwable  {
      StlBoundaryReadHandler3D stlBoundaryReadHandler3D0 = new StlBoundaryReadHandler3D();
      FileGeometryInput fileGeometryInput0 = new FileGeometryInput((Path) null);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        stlBoundaryReadHandler3D0.readTriangleMesh(fileGeometryInput0, precision_DoubleEquivalence0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.file.Files"", e);
      }
  }"
1007,"    public TriangleMesh readTriangleMesh(final GeometryInput in, final Precision.DoubleEquivalence precision) {
        final SimpleTriangleMesh.Builder meshBuilder = SimpleTriangleMesh.builder(precision);

        try (FacetDefinitionReader reader = facetDefinitionReader(in)) {
            FacetDefinition facet;
            while ((facet = reader.readFacet()) != null) {
                for (final Triangle3D tri : FacetDefinitions.toPolygon(facet, precision).toTriangles()) {
                    meshBuilder.addFaceUsingVertices(
                        tri.getPoint1(),
                        tri.getPoint2(),
                        tri.getPoint3()
                    );
                }
            }
        }

        return meshBuilder.build();
    }","  public void test4()  throws Throwable  {
      StlBoundaryReadHandler3D stlBoundaryReadHandler3D0 = new StlBoundaryReadHandler3D();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjBoundaryReadHandler3D objBoundaryReadHandler3D0 = new ObjBoundaryReadHandler3D();
      Charset charset0 = objBoundaryReadHandler3D0.getDefaultCharset();
      StreamGeometryInput streamGeometryInput0 = new StreamGeometryInput(byteArrayInputStream0, (String) null, charset0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        stlBoundaryReadHandler3D0.readTriangleMesh(streamGeometryInput0, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Failed to read STL header: data not available
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1008,"    public TriangleMesh readTriangleMesh(final GeometryInput in, final Precision.DoubleEquivalence precision) {
        final SimpleTriangleMesh.Builder meshBuilder = SimpleTriangleMesh.builder(precision);

        try (FacetDefinitionReader reader = facetDefinitionReader(in)) {
            FacetDefinition facet;
            while ((facet = reader.readFacet()) != null) {
                for (final Triangle3D tri : FacetDefinitions.toPolygon(facet, precision).toTriangles()) {
                    meshBuilder.addFaceUsingVertices(
                        tri.getPoint1(),
                        tri.getPoint2(),
                        tri.getPoint3()
                    );
                }
            }
        }

        return meshBuilder.build();
    }","  public void test5()  throws Throwable  {
      StlBoundaryReadHandler3D stlBoundaryReadHandler3D0 = new StlBoundaryReadHandler3D();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      StreamGeometryInput streamGeometryInput0 = new StreamGeometryInput(mockFileInputStream0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        stlBoundaryReadHandler3D0.readTriangleMesh(streamGeometryInput0, precision_DoubleEquivalence0);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // MockIOException: null
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1009,"    public BoundarySource3D read(final GeometryInput in, final Precision.DoubleEquivalence precision) {
        // read the input as a simple list of boundaries
        final List<PlaneConvexSubset> list = new ArrayList<>();

        try (FacetDefinitionReader reader = facetDefinitionReader(in)) {
            FacetDefinition facet;
            while ((facet = reader.readFacet()) != null) {
                list.add(FacetDefinitions.toPolygon(facet, precision));
            }
        }

        return new BoundaryList3D(list);
    }","  public void test6()  throws Throwable  {
      ObjBoundaryReadHandler3D objBoundaryReadHandler3D0 = new ObjBoundaryReadHandler3D();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        objBoundaryReadHandler3D0.read((GeometryInput) null, precision_DoubleEquivalence0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1010,"    public BoundarySource3D read(final GeometryInput in, final Precision.DoubleEquivalence precision) {
        // read the input as a simple list of boundaries
        final List<PlaneConvexSubset> list = new ArrayList<>();

        try (FacetDefinitionReader reader = facetDefinitionReader(in)) {
            FacetDefinition facet;
            while ((facet = reader.readFacet()) != null) {
                list.add(FacetDefinitions.toPolygon(facet, precision));
            }
        }

        return new BoundaryList3D(list);
    }","  public void test7()  throws Throwable  {
      StlBoundaryReadHandler3D stlBoundaryReadHandler3D0 = new StlBoundaryReadHandler3D();
      ObjBoundaryReadHandler3D objBoundaryReadHandler3D0 = new ObjBoundaryReadHandler3D();
      Charset charset0 = objBoundaryReadHandler3D0.getDefaultCharset();
      UrlGeometryInput urlGeometryInput0 = new UrlGeometryInput((URL) null, charset0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        stlBoundaryReadHandler3D0.read(urlGeometryInput0, precision_DoubleEquivalence0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.net.MockURL"", e);
      }
  }"
1011,"    public BoundarySource3D read(final GeometryInput in, final Precision.DoubleEquivalence precision) {
        // read the input as a simple list of boundaries
        final List<PlaneConvexSubset> list = new ArrayList<>();

        try (FacetDefinitionReader reader = facetDefinitionReader(in)) {
            FacetDefinition facet;
            while ((facet = reader.readFacet()) != null) {
                list.add(FacetDefinitions.toPolygon(facet, precision));
            }
        }

        return new BoundaryList3D(list);
    }","  public void test8()  throws Throwable  {
      CsvBoundaryReadHandler3D csvBoundaryReadHandler3D0 = new CsvBoundaryReadHandler3D();
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StreamGeometryInput streamGeometryInput0 = new StreamGeometryInput(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        csvBoundaryReadHandler3D0.read(streamGeometryInput0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: expected double but found empty token followed by [\u0000]
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1012,"    public BoundarySource3D read(final GeometryInput in, final Precision.DoubleEquivalence precision) {
        // read the input as a simple list of boundaries
        final List<PlaneConvexSubset> list = new ArrayList<>();

        try (FacetDefinitionReader reader = facetDefinitionReader(in)) {
            FacetDefinition facet;
            while ((facet = reader.readFacet()) != null) {
                list.add(FacetDefinitions.toPolygon(facet, precision));
            }
        }

        return new BoundaryList3D(list);
    }","  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ObjBoundaryReadHandler3D objBoundaryReadHandler3D0 = new ObjBoundaryReadHandler3D();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (byte)4);
      StreamGeometryInput streamGeometryInput0 = new StreamGeometryInput(byteArrayInputStream0, ""!>0kn'&8gUy"", (Charset) null);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        objBoundaryReadHandler3D0.read(streamGeometryInput0, precision_DoubleEquivalence0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.ByteArrayInputStream"", e);
      }
  }"
1013,"    public Stream<FacetDefinition> facets(final GeometryInput in) {
        return GeometryIOUtils.createCloseableStream(inputStream -> {
            final FacetDefinitionReader fdReader = facetDefinitionReader(in);
            final FacetDefinitionReaderIterator it = new FacetDefinitionReaderIterator(fdReader);

            return StreamSupport.stream(Spliterators.spliteratorUnknownSize(it, Spliterator.ORDERED), false);
        }, in::getInputStream);
    }","  public void test10()  throws Throwable  {
      TextBoundaryReadHandler3D textBoundaryReadHandler3D0 = new TextBoundaryReadHandler3D();
      // Undeclared exception!
      try { 
        textBoundaryReadHandler3D0.facets((GeometryInput) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.AbstractBoundaryReadHandler3D"", e);
      }
  }"
1014,"    public Stream<FacetDefinition> facets(final GeometryInput in) {
        return GeometryIOUtils.createCloseableStream(inputStream -> {
            final FacetDefinitionReader fdReader = facetDefinitionReader(in);
            final FacetDefinitionReaderIterator it = new FacetDefinitionReaderIterator(fdReader);

            return StreamSupport.stream(Spliterators.spliteratorUnknownSize(it, Spliterator.ORDERED), false);
        }, in::getInputStream);
    }","  public void test11()  throws Throwable  {
      StlBoundaryReadHandler3D stlBoundaryReadHandler3D0 = new StlBoundaryReadHandler3D();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Charset charset0 = Charset.defaultCharset();
      StreamGeometryInput streamGeometryInput0 = new StreamGeometryInput(sequenceInputStream0, ""org.apache.commons.geometry.io.euclidean.threed.AbstractBoundaryReadHandler3D"", charset0);
      // Undeclared exception!
      try { 
        stlBoundaryReadHandler3D0.facets(streamGeometryInput0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Cannot determine STL format: attempted to read 5 bytes but found only -1 available
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1015,"    public Stream<FacetDefinition> facets(final GeometryInput in) {
        return GeometryIOUtils.createCloseableStream(inputStream -> {
            final FacetDefinitionReader fdReader = facetDefinitionReader(in);
            final FacetDefinitionReaderIterator it = new FacetDefinitionReaderIterator(fdReader);

            return StreamSupport.stream(Spliterators.spliteratorUnknownSize(it, Spliterator.ORDERED), false);
        }, in::getInputStream);
    }","  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-12), (byte)78);
      StlBoundaryReadHandler3D stlBoundaryReadHandler3D0 = new StlBoundaryReadHandler3D();
      Charset charset0 = stlBoundaryReadHandler3D0.getDefaultCharset();
      StreamGeometryInput streamGeometryInput0 = new StreamGeometryInput(byteArrayInputStream0, """", charset0);
      // Undeclared exception!
      try { 
        stlBoundaryReadHandler3D0.facets(streamGeometryInput0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.ByteArrayInputStream"", e);
      }
  }"
1016,"    public Stream<FacetDefinition> facets(final GeometryInput in) {
        return GeometryIOUtils.createCloseableStream(inputStream -> {
            final FacetDefinitionReader fdReader = facetDefinitionReader(in);
            final FacetDefinitionReaderIterator it = new FacetDefinitionReaderIterator(fdReader);

            return StreamSupport.stream(Spliterators.spliteratorUnknownSize(it, Spliterator.ORDERED), false);
        }, in::getInputStream);
    }","  public void test13()  throws Throwable  {
      TextBoundaryReadHandler3D textBoundaryReadHandler3D0 = new TextBoundaryReadHandler3D();
      MockFile mockFile0 = new MockFile((File) null, ""p"");
      Path path0 = mockFile0.toPath();
      FileGeometryInput fileGeometryInput0 = new FileGeometryInput(path0);
      // Undeclared exception!
      try { 
        textBoundaryReadHandler3D0.facets(fileGeometryInput0);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // NoSuchFileException: p
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1017,"    public Stream<PlaneConvexSubset> boundaries(final GeometryInput in, final Precision.DoubleEquivalence precision) {
        return facets(in)
                .map(f -> FacetDefinitions.toPolygon(f, precision));
    }","  public void test14()  throws Throwable  {
      StlBoundaryReadHandler3D stlBoundaryReadHandler3D0 = new StlBoundaryReadHandler3D();
      URL uRL0 = MockURL.getFileExample();
      UrlGeometryInput urlGeometryInput0 = new UrlGeometryInput(uRL0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        stlBoundaryReadHandler3D0.boundaries(urlGeometryInput0, precision_DoubleEquivalence0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.net.URL"", e);
      }
  }"
1018,"    public Stream<PlaneConvexSubset> boundaries(final GeometryInput in, final Precision.DoubleEquivalence precision) {
        return facets(in)
                .map(f -> FacetDefinitions.toPolygon(f, precision));
    }","  public void test15()  throws Throwable  {
      StlBoundaryReadHandler3D stlBoundaryReadHandler3D0 = new StlBoundaryReadHandler3D();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = stlBoundaryReadHandler3D0.getDefaultCharset();
      StreamGeometryInput streamGeometryInput0 = new StreamGeometryInput(byteArrayInputStream0, """", charset0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        stlBoundaryReadHandler3D0.boundaries(streamGeometryInput0, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Cannot determine STL format: attempted to read 5 bytes but found only 4 available
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1019,"    public Stream<PlaneConvexSubset> boundaries(final GeometryInput in, final Precision.DoubleEquivalence precision) {
        return facets(in)
                .map(f -> FacetDefinitions.toPolygon(f, precision));
    }","  public void test16()  throws Throwable  {
      StlBoundaryReadHandler3D stlBoundaryReadHandler3D0 = new StlBoundaryReadHandler3D();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-77), 526);
      StreamGeometryInput streamGeometryInput0 = new StreamGeometryInput(byteArrayInputStream0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        stlBoundaryReadHandler3D0.boundaries(streamGeometryInput0, precision_DoubleEquivalence0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.ByteArrayInputStream"", e);
      }
  }"
1020,"    public Stream<PlaneConvexSubset> boundaries(final GeometryInput in, final Precision.DoubleEquivalence precision) {
        return facets(in)
                .map(f -> FacetDefinitions.toPolygon(f, precision));
    }","  public void test17()  throws Throwable  {
      ObjBoundaryReadHandler3D objBoundaryReadHandler3D0 = new ObjBoundaryReadHandler3D();
      URL uRL0 = MockURL.getHttpExample();
      UrlGeometryInput urlGeometryInput0 = new UrlGeometryInput(uRL0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        objBoundaryReadHandler3D0.boundaries(urlGeometryInput0, precision_DoubleEquivalence0);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // MockIOException: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1021,"    public Stream<FacetDefinition> facets(final GeometryInput in) {
        return GeometryIOUtils.createCloseableStream(inputStream -> {
            final FacetDefinitionReader fdReader = facetDefinitionReader(in);
            final FacetDefinitionReaderIterator it = new FacetDefinitionReaderIterator(fdReader);

            return StreamSupport.stream(Spliterators.spliteratorUnknownSize(it, Spliterator.ORDERED), false);
        }, in::getInputStream);
    }","  public void test18()  throws Throwable  {
      ObjBoundaryReadHandler3D objBoundaryReadHandler3D0 = new ObjBoundaryReadHandler3D();
      FileGeometryInput fileGeometryInput0 = new FileGeometryInput((Path) null);
      // Undeclared exception!
      try { 
        objBoundaryReadHandler3D0.facets(fileGeometryInput0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.file.Files"", e);
      }
  }"
1022,,"  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""o[;$T815\""y@]mS6/$(t"");
      ObjFacetDefinitionReader objFacetDefinitionReader0 = new ObjFacetDefinitionReader(stringReader0);
      AbstractBoundaryReadHandler3D.FacetDefinitionReaderIterator abstractBoundaryReadHandler3D_FacetDefinitionReaderIterator0 = new AbstractBoundaryReadHandler3D.FacetDefinitionReaderIterator(objFacetDefinitionReader0);
      abstractBoundaryReadHandler3D_FacetDefinitionReaderIterator0.hasNext();
      // Undeclared exception!
      try { 
        abstractBoundaryReadHandler3D_FacetDefinitionReaderIterator0.next();
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.AbstractBoundaryReadHandler3D$FacetDefinitionReaderIterator"", e);
      }
  }"
1023,"    public TriangleMesh readTriangleMesh(final GeometryInput in, final Precision.DoubleEquivalence precision) {
        final SimpleTriangleMesh.Builder meshBuilder = SimpleTriangleMesh.builder(precision);

        try (FacetDefinitionReader reader = facetDefinitionReader(in)) {
            FacetDefinition facet;
            while ((facet = reader.readFacet()) != null) {
                for (final Triangle3D tri : FacetDefinitions.toPolygon(facet, precision).toTriangles()) {
                    meshBuilder.addFaceUsingVertices(
                        tri.getPoint1(),
                        tri.getPoint2(),
                        tri.getPoint3()
                    );
                }
            }
        }

        return meshBuilder.build();
    }","  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      CsvBoundaryReadHandler3D csvBoundaryReadHandler3D0 = new CsvBoundaryReadHandler3D();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-12), (byte)78);
      StreamGeometryInput streamGeometryInput0 = new StreamGeometryInput(byteArrayInputStream0, ""P%0Qc=\""|"");
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        csvBoundaryReadHandler3D0.readTriangleMesh(streamGeometryInput0, precision_DoubleEquivalence0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.ByteArrayInputStream"", e);
      }
  }"
1024,"    public TriangleMesh readTriangleMesh(final GeometryInput in, final Precision.DoubleEquivalence precision) {
        final SimpleTriangleMesh.Builder meshBuilder = SimpleTriangleMesh.builder(precision);

        try (FacetDefinitionReader reader = facetDefinitionReader(in)) {
            FacetDefinition facet;
            while ((facet = reader.readFacet()) != null) {
                for (final Triangle3D tri : FacetDefinitions.toPolygon(facet, precision).toTriangles()) {
                    meshBuilder.addFaceUsingVertices(
                        tri.getPoint1(),
                        tri.getPoint2(),
                        tri.getPoint3()
                    );
                }
            }
        }

        return meshBuilder.build();
    }","  public void test21()  throws Throwable  {
      TextBoundaryReadHandler3D textBoundaryReadHandler3D0 = new TextBoundaryReadHandler3D();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StreamGeometryInput streamGeometryInput0 = new StreamGeometryInput(sequenceInputStream0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      TriangleMesh triangleMesh0 = textBoundaryReadHandler3D0.readTriangleMesh(streamGeometryInput0, precision_DoubleEquivalence0);
}"
1025,"    public BoundarySource3D read(final GeometryInput in, final Precision.DoubleEquivalence precision) {
        // read the input as a simple list of boundaries
        final List<PlaneConvexSubset> list = new ArrayList<>();

        try (FacetDefinitionReader reader = facetDefinitionReader(in)) {
            FacetDefinition facet;
            while ((facet = reader.readFacet()) != null) {
                list.add(FacetDefinitions.toPolygon(facet, precision));
            }
        }

        return new BoundaryList3D(list);
    }","  public void test22()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      ObjBoundaryReadHandler3D objBoundaryReadHandler3D0 = new ObjBoundaryReadHandler3D();
      MockFile mockFile0 = new MockFile("""");
      Path path0 = mockFile0.toPath();
      FileGeometryInput fileGeometryInput0 = new FileGeometryInput(path0);
      // Undeclared exception!
      try { 
        objBoundaryReadHandler3D0.read(fileGeometryInput0, precision_DoubleEquivalence0);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Is a directory
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1026,"    public BoundarySource3D read(final GeometryInput in, final Precision.DoubleEquivalence precision) {
        // read the input as a simple list of boundaries
        final List<PlaneConvexSubset> list = new ArrayList<>();

        try (FacetDefinitionReader reader = facetDefinitionReader(in)) {
            FacetDefinition facet;
            while ((facet = reader.readFacet()) != null) {
                list.add(FacetDefinitions.toPolygon(facet, precision));
            }
        }

        return new BoundaryList3D(list);
    }","  public void test23()  throws Throwable  {
      TextBoundaryReadHandler3D textBoundaryReadHandler3D0 = new TextBoundaryReadHandler3D();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StreamGeometryInput streamGeometryInput0 = new StreamGeometryInput(sequenceInputStream0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      BoundaryList3D boundaryList3D0 = (BoundaryList3D)textBoundaryReadHandler3D0.read(streamGeometryInput0, precision_DoubleEquivalence0);
}"
1027,"    public Stream<PlaneConvexSubset> boundaries(final GeometryInput in, final Precision.DoubleEquivalence precision) {
        return facets(in)
                .map(f -> FacetDefinitions.toPolygon(f, precision));
    }","  public void test24()  throws Throwable  {
      CsvBoundaryReadHandler3D csvBoundaryReadHandler3D0 = new CsvBoundaryReadHandler3D();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        csvBoundaryReadHandler3D0.boundaries((GeometryInput) null, precision_DoubleEquivalence0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.AbstractBoundaryReadHandler3D"", e);
      }
  }"
1028,,"  public void test0()  throws Throwable  {
      GeometryFormat3D[] geometryFormat3DArray0 = GeometryFormat3D.values();
}"
1029,"    public String getDefaultFileExtension() {
        return fileExtensions.get(0);
    }","  public void test1()  throws Throwable  {
      GeometryFormat3D geometryFormat3D0 = GeometryFormat3D.valueOf(""STL"");
}"
1030,"    public List<String> getFileExtensions() {
        return fileExtensions;
    }","  public void test2()  throws Throwable  {
      GeometryFormat3D geometryFormat3D0 = GeometryFormat3D.CSV;
      List<String> list0 = geometryFormat3D0.getFileExtensions();
}"
1031,"    public String getDefaultFileExtension() {
        return fileExtensions.get(0);
    }","  public void test3()  throws Throwable  {
      GeometryFormat3D geometryFormat3D0 = GeometryFormat3D.CSV;
      String string0 = geometryFormat3D0.getDefaultFileExtension();
}"
1032,"    public String getFormatName() {
        return name();
    }","  public void test4()  throws Throwable  {
      GeometryFormat3D geometryFormat3D0 = GeometryFormat3D.CSV;
      String string0 = geometryFormat3D0.getFormatName();
}"
1033,"    public static ConvexPolygon3D toPolygon(final Collection<Vector3D> vertices, final Vector3D normal,
            final Precision.DoubleEquivalence precision) {
        final ConvexPolygon3D polygon = Planes.convexPolygonFromVertices(vertices, precision);

        // ensure that the polygon normal matches whatever normal was defined, if any
        if (normal != null &&
                normal.dot(polygon.getPlane().getNormal()) < 0) {
            return polygon.reverse();
        }
        return polygon;
    }","  public void test0()  throws Throwable  {
      Stack<Vector3D> stack0 = new Stack<Vector3D>();
      Vector3D vector3D0 = Vector3D.of(0.0, 0.0, (-0.999999999999998));
      AxisSequence axisSequence0 = AxisSequence.YZY;
      Vector3D vector3D1 = axisSequence0.getAxis3();
      stack0.add(vector3D1);
      stack0.add(vector3D0);
      stack0.add(vector3D0);
      SimpleFacetDefinition simpleFacetDefinition0 = new SimpleFacetDefinition(stack0, vector3D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      // Undeclared exception!
      try { 
        FacetDefinitions.toPolygon((FacetDefinition) simpleFacetDefinition0, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
1034,"    public static ConvexPolygon3D toPolygon(final Collection<Vector3D> vertices, final Vector3D normal,
            final Precision.DoubleEquivalence precision) {
        final ConvexPolygon3D polygon = Planes.convexPolygonFromVertices(vertices, precision);

        // ensure that the polygon normal matches whatever normal was defined, if any
        if (normal != null &&
                normal.dot(polygon.getPlane().getNormal()) < 0) {
            return polygon.reverse();
        }
        return polygon;
    }","  public void test1()  throws Throwable  {
      Stack<Vector3D> stack0 = new Stack<Vector3D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      List<Vector3D> list0 = stack0.subList(0, 0);
      stack0.add((Vector3D) vector3D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        FacetDefinitions.toPolygon((Collection<Vector3D>) list0, (Vector3D) vector3D_Unit0, precision_DoubleEquivalence0);
        fail(""Expecting exception: ConcurrentModificationException"");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.SubList"", e);
      }
  }"
1035,"    public static ConvexPolygon3D toPolygon(final Collection<Vector3D> vertices, final Vector3D normal,
            final Precision.DoubleEquivalence precision) {
        final ConvexPolygon3D polygon = Planes.convexPolygonFromVertices(vertices, precision);

        // ensure that the polygon normal matches whatever normal was defined, if any
        if (normal != null &&
                normal.dot(polygon.getPlane().getNormal()) < 0) {
            return polygon.reverse();
        }
        return polygon;
    }","  public void test2()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        FacetDefinitions.toPolygon((Collection<Vector3D>) null, vector3D0, precision_DoubleEquivalence0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes"", e);
      }
  }"
1036,"    public static ConvexPolygon3D toPolygon(final Collection<Vector3D> vertices, final Vector3D normal,
            final Precision.DoubleEquivalence precision) {
        final ConvexPolygon3D polygon = Planes.convexPolygonFromVertices(vertices, precision);

        // ensure that the polygon normal matches whatever normal was defined, if any
        if (normal != null &&
                normal.dot(polygon.getPlane().getNormal()) < 0) {
            return polygon.reverse();
        }
        return polygon;
    }","  public void test3()  throws Throwable  {
      ArrayDeque<Vector3D> arrayDeque0 = new ArrayDeque<Vector3D>();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        FacetDefinitions.toPolygon((Collection<Vector3D>) arrayDeque0, (Vector3D) null, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Points do not define a plane: []
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes$PlaneBuilder"", e);
      }
  }"
1037,"    public static ConvexPolygon3D toPolygon(final Collection<Vector3D> vertices, final Vector3D normal,
            final Precision.DoubleEquivalence precision) {
        final ConvexPolygon3D polygon = Planes.convexPolygonFromVertices(vertices, precision);

        // ensure that the polygon normal matches whatever normal was defined, if any
        if (normal != null &&
                normal.dot(polygon.getPlane().getNormal()) < 0) {
            return polygon.reverse();
        }
        return polygon;
    }","  public void test4()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        FacetDefinitions.toPolygon((FacetDefinition) null, precision_DoubleEquivalence0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Facet cannot be null
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
1038,"    public void writeFacets(final Collection<? extends FacetDefinition> facets, final GeometryOutput out) {
        writeFacets(facets.stream(), out);
    }","  public void test0()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      HashSet<SimpleFacetDefinition> hashSet0 = new HashSet<SimpleFacetDefinition>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(pipedOutputStream0, (String) null);
      objBoundaryWriteHandler3D0.writeFacets((Collection<? extends FacetDefinition>) hashSet0, (GeometryOutput) streamGeometryOutput0);
}"
1039,"    public void writeFacets(final Collection<? extends FacetDefinition> facets, final GeometryOutput out) {
        writeFacets(facets.stream(), out);
    }","  public void test1()  throws Throwable  {
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      Stack<SimpleFacetDefinition> stack0 = new Stack<SimpleFacetDefinition>();
      MockFile mockFile0 = new MockFile("";J(6oKhT^M_"", "";J(6oKhT^M_"");
      Path path0 = mockFile0.toPath();
      stack0.setSize(1557);
      FileGeometryOutput fileGeometryOutput0 = new FileGeometryOutput(path0);
      // Undeclared exception!
      try { 
        stlBoundaryWriteHandler3D0.writeFacets((Collection<? extends FacetDefinition>) stack0, (GeometryOutput) fileGeometryOutput0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.StlBoundaryWriteHandler3D"", e);
      }
  }"
1040,"    public void writeFacets(final Collection<? extends FacetDefinition> facets, final GeometryOutput out) {
        writeFacets(facets.stream(), out);
    }","  public void test2()  throws Throwable  {
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      ArrayDeque<SimpleFacetDefinition> arrayDeque0 = new ArrayDeque<SimpleFacetDefinition>();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""E&xi%;0O  O"");
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockFileOutputStream0, ""E&xi%;0O  O"");
      // Undeclared exception!
      try { 
        stlBoundaryWriteHandler3D0.writeFacets((Collection<? extends FacetDefinition>) arrayDeque0, (GeometryOutput) streamGeometryOutput0);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // MockIOException: Error in writing to file
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1041,"    public void write(final BoundarySource3D src, final GeometryOutput out) {
        try (Stream<PlaneConvexSubset> stream = src.boundaryStream()) {
            write(stream, out);
        }
    }","  public void test3()  throws Throwable  {
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      MockFile mockFile0 = new MockFile("""");
      Path path0 = mockFile0.toPath();
      FileGeometryOutput fileGeometryOutput0 = new FileGeometryOutput(path0);
      // Undeclared exception!
      try { 
        csvBoundaryWriteHandler3D0.write((BoundarySource3D) null, (GeometryOutput) fileGeometryOutput0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.AbstractBoundaryWriteHandler3D"", e);
      }
  }"
1042,"    public void write(final BoundarySource3D src, final GeometryOutput out) {
        try (Stream<PlaneConvexSubset> stream = src.boundaryStream()) {
            write(stream, out);
        }
    }","  public void test4()  throws Throwable  {
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      ConvexVolume convexVolume0 = ConvexVolume.full();
      // Undeclared exception!
      try { 
        csvBoundaryWriteHandler3D0.write((BoundarySource3D) convexVolume0, (GeometryOutput) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1043,"    public void write(final BoundarySource3D src, final GeometryOutput out) {
        try (Stream<PlaneConvexSubset> stream = src.boundaryStream()) {
            write(stream, out);
        }
    }","  public void test5()  throws Throwable  {
      RegionBSPTree3D regionBSPTree3D0 = new RegionBSPTree3D();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(byteArrayOutputStream0);
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.write((BoundarySource3D) regionBSPTree3D0, (GeometryOutput) streamGeometryOutput0);
}"
1044,"    public void write(final BoundarySource3D src, final GeometryOutput out) {
        try (Stream<PlaneConvexSubset> stream = src.boundaryStream()) {
            write(stream, out);
        }
    }","  public void test6()  throws Throwable  {
      RegionBSPTree3D regionBSPTree3D0 = new RegionBSPTree3D();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(byteArrayOutputStream0);
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.setFacetVertexCount(1);
      // Undeclared exception!
      try { 
        textBoundaryWriteHandler3D0.write((BoundarySource3D) regionBSPTree3D0, (GeometryOutput) streamGeometryOutput0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Facet vertex count must be less than 0 or greater than 2; was 1
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter"", e);
      }
  }"
1045,"    public void writeFacets(final Collection<? extends FacetDefinition> facets, final GeometryOutput out) {
        writeFacets(facets.stream(), out);
    }","  public void test7()  throws Throwable  {
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      HashSet<SimpleFacetDefinition> hashSet0 = new HashSet<SimpleFacetDefinition>();
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput((OutputStream) null, ""Sj(E#6a"");
      // Undeclared exception!
      try { 
        csvBoundaryWriteHandler3D0.writeFacets((Collection<? extends FacetDefinition>) hashSet0, (GeometryOutput) streamGeometryOutput0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.Writer"", e);
      }
  }"
1046,"    public void writeFacets(final Stream<? extends FacetDefinition> facets, final GeometryOutput out,
            final GeometryFormat fmt) {
        requireWriteHandler(out, fmt).writeFacets(facets, out);
    }","  public void test0()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      Iterator<SimpleFacetDefinition> iterator0 = (Iterator<SimpleFacetDefinition>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      Stream<SimpleFacetDefinition> stream0 = (Stream<SimpleFacetDefinition>) mock(Stream.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(stream0).iterator();
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      Charset charset0 = csvBoundaryWriteHandler3D0.getDefaultCharset();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      GeometryOutput geometryOutput0 = mock(GeometryOutput.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, charset0).when(geometryOutput0).getCharset();
      doReturn(""org.apache.commons.geometry.io.euclidean.threed.BoundaryIOManager3D"").when(geometryOutput0).getFileName();
      doReturn(outputStream0).when(geometryOutput0).getOutputStream();
      boundaryIOManager3D0.registerDefaultHandlers();
      GeometryFormat geometryFormat0 = csvBoundaryWriteHandler3D0.getFormat();
      boundaryIOManager3D0.writeFacets(stream0, geometryOutput0, geometryFormat0);
}"
1047,"    public void write(final Stream<? extends PlaneConvexSubset> boundaries, final GeometryOutput out,
            final GeometryFormat fmt) {
        requireWriteHandler(out, fmt).write(boundaries, out);
    }","  public void test1()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      boundaryIOManager3D0.registerDefaultHandlers();
      ConvexVolume convexVolume0 = ConvexVolume.full();
      List<PlaneConvexSubset> list0 = convexVolume0.getBoundaries();
      BoundaryList3D boundaryList3D0 = new BoundaryList3D(list0);
      Stream<PlaneConvexSubset> stream0 = boundaryList3D0.boundaryStream();
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      Charset charset0 = objBoundaryWriteHandler3D0.getDefaultCharset();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      GeometryOutput geometryOutput0 = mock(GeometryOutput.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, (Charset) null).when(geometryOutput0).getCharset();
      doReturn((String) null).when(geometryOutput0).getFileName();
      doReturn(outputStream0).when(geometryOutput0).getOutputStream();
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      GeometryFormat geometryFormat0 = textBoundaryWriteHandler3D0.getFormat();
      // Undeclared exception!
      try { 
        boundaryIOManager3D0.write(stream0, geometryOutput0, geometryFormat0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException(""java.io.OutputStreamWriter"", e);
      }
  }"
1048,"    public TriangleMesh readTriangleMesh(final GeometryInput in, final GeometryFormat fmt,
            final Precision.DoubleEquivalence precision) {
        return requireReadHandler(in, fmt).readTriangleMesh(in, precision);
    }","  public void test2()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      boundaryIOManager3D0.registerDefaultHandlers();
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      Charset charset0 = csvBoundaryWriteHandler3D0.getDefaultCharset();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-3360)).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      GeometryInput geometryInput0 = mock(GeometryInput.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, charset0).when(geometryInput0).getCharset();
      doReturn(""org.apache.commons.geometry.core.partitioning.bsp.AbstractBSPTreeMergeOperator"").when(geometryInput0).getFileName();
      doReturn(inputStream0).when(geometryInput0).getInputStream();
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      GeometryFormat geometryFormat0 = objBoundaryWriteHandler3D0.getFormat();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      TriangleMesh triangleMesh0 = boundaryIOManager3D0.readTriangleMesh(geometryInput0, geometryFormat0, precision_DoubleEquivalence0);
}"
1049,"    public Stream<FacetDefinition> facets(final GeometryInput in, final GeometryFormat fmt) {
        return requireReadHandler(in, fmt).facets(in);
    }","  public void test3()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      boundaryIOManager3D0.registerDefaultHandlers();
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      Charset charset0 = csvBoundaryWriteHandler3D0.getDefaultCharset();
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      GeometryInput geometryInput0 = mock(GeometryInput.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, charset0).when(geometryInput0).getCharset();
      doReturn(""Cannot determine STL format: attempted to read {0} bytes but found only {1} available"").when(geometryInput0).getFileName();
      doReturn(inputStream0, inputStream0).when(geometryInput0).getInputStream();
      GeometryFormat geometryFormat0 = objBoundaryWriteHandler3D0.getFormat();
      Stream<FacetDefinition> stream0 = boundaryIOManager3D0.facets(geometryInput0, geometryFormat0);
}"
1050,"    public void writeFacets(final Stream<? extends FacetDefinition> facets, final GeometryOutput out,
            final GeometryFormat fmt) {
        requireWriteHandler(out, fmt).writeFacets(facets, out);
    }","  public void test4()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      Stream<SimpleFacetDefinition> stream0 = (Stream<SimpleFacetDefinition>) mock(Stream.class, new ViolatedAssumptionAnswer());
      boundaryIOManager3D0.registerDefaultHandlers();
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      GeometryFormat geometryFormat0 = csvBoundaryWriteHandler3D0.getFormat();
      GeometryOutput geometryOutput0 = mock(GeometryOutput.class, new ViolatedAssumptionAnswer());
      doReturn((Charset) null).when(geometryOutput0).getCharset();
      doReturn((String) null).when(geometryOutput0).getFileName();
      doReturn((OutputStream) null).when(geometryOutput0).getOutputStream();
      // Undeclared exception!
      try { 
        boundaryIOManager3D0.writeFacets(stream0, geometryOutput0, geometryFormat0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.Writer"", e);
      }
  }"
1051,"    public void writeFacets(final Stream<? extends FacetDefinition> facets, final GeometryOutput out,
            final GeometryFormat fmt) {
        requireWriteHandler(out, fmt).writeFacets(facets, out);
    }","  public void test5()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      Stream<SimpleFacetDefinition> stream0 = (Stream<SimpleFacetDefinition>) mock(Stream.class, new ViolatedAssumptionAnswer());
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      Charset charset0 = csvBoundaryWriteHandler3D0.getDefaultCharset();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      GeometryOutput geometryOutput0 = mock(GeometryOutput.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, (Charset) null).when(geometryOutput0).getCharset();
      doReturn(""org.apache.commons.geometry.io.euclidean.threed.BoundaryIOManager3D"").when(geometryOutput0).getFileName();
      doReturn(outputStream0).when(geometryOutput0).getOutputStream();
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D1 = new CsvBoundaryWriteHandler3D();
      boundaryIOManager3D0.registerDefaultHandlers();
      GeometryFormat geometryFormat0 = csvBoundaryWriteHandler3D1.getFormat();
      // Undeclared exception!
      try { 
        boundaryIOManager3D0.writeFacets(stream0, geometryOutput0, geometryFormat0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException(""java.io.OutputStreamWriter"", e);
      }
  }"
1052,"    public void writeFacets(final Stream<? extends FacetDefinition> facets, final GeometryOutput out,
            final GeometryFormat fmt) {
        requireWriteHandler(out, fmt).writeFacets(facets, out);
    }","  public void test6()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      GeometryOutput geometryOutput0 = mock(GeometryOutput.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(geometryOutput0).getFileName();
      // Undeclared exception!
      try { 
        boundaryIOManager3D0.writeFacets((Collection<? extends FacetDefinition>) null, geometryOutput0, (GeometryFormat) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to find handler: no format specified and no file extension available
         //
         verifyException(""org.apache.commons.geometry.io.core.BoundaryIOManager$HandlerRegistry"", e);
      }
  }"
1053,"    public void write(final Stream<? extends PlaneConvexSubset> boundaries, final GeometryOutput out,
            final GeometryFormat fmt) {
        requireWriteHandler(out, fmt).write(boundaries, out);
    }","  public void test7()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      boundaryIOManager3D0.registerDefaultHandlers();
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      Charset charset0 = csvBoundaryWriteHandler3D0.getDefaultCharset();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      GeometryOutput geometryOutput0 = mock(GeometryOutput.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, (Charset) null).when(geometryOutput0).getCharset();
      doReturn(""=,P\"""").when(geometryOutput0).getFileName();
      doReturn(outputStream0).when(geometryOutput0).getOutputStream();
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      GeometryFormat geometryFormat0 = textBoundaryWriteHandler3D0.getFormat();
      // Undeclared exception!
      try { 
        boundaryIOManager3D0.write((Stream<? extends PlaneConvexSubset>) null, geometryOutput0, geometryFormat0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException(""java.io.OutputStreamWriter"", e);
      }
  }"
1054,"    public Stream<Triangle3D> triangles(final GeometryInput in, final GeometryFormat fmt,
            final Precision.DoubleEquivalence precision) {
        return boundaries(in, fmt, precision)
                .flatMap(p -> p.toTriangles().stream());
    }","  public void test8()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      boundaryIOManager3D0.registerDefaultHandlers();
      GeometryInput geometryInput0 = mock(GeometryInput.class, new ViolatedAssumptionAnswer());
      doReturn((Charset) null).when(geometryInput0).getCharset();
      doReturn((String) null).when(geometryInput0).getFileName();
      doReturn((InputStream) null, (InputStream) null).when(geometryInput0).getInputStream();
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      GeometryFormat geometryFormat0 = stlBoundaryWriteHandler3D0.getFormat();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        boundaryIOManager3D0.triangles(geometryInput0, geometryFormat0, precision_DoubleEquivalence0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.StlFacetDefinitionReaders"", e);
      }
  }"
1055,"    public Stream<Triangle3D> triangles(final GeometryInput in, final GeometryFormat fmt,
            final Precision.DoubleEquivalence precision) {
        return boundaries(in, fmt, precision)
                .flatMap(p -> p.toTriangles().stream());
    }","  public void test9()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      boundaryIOManager3D0.registerDefaultHandlers();
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      Charset charset0 = csvBoundaryWriteHandler3D0.getDefaultCharset();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).read(any(byte[].class));
      GeometryInput geometryInput0 = mock(GeometryInput.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, (Charset) null).when(geometryInput0).getCharset();
      doReturn(""w}&6r"").when(geometryInput0).getFileName();
      doReturn(inputStream0, inputStream0).when(geometryInput0).getInputStream();
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      GeometryFormat geometryFormat0 = stlBoundaryWriteHandler3D0.getFormat();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        boundaryIOManager3D0.triangles(geometryInput0, geometryFormat0, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Cannot determine STL format: attempted to read 5 bytes but found only 0 available
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1056,"    public Stream<Triangle3D> triangles(final GeometryInput in, final GeometryFormat fmt,
            final Precision.DoubleEquivalence precision) {
        return boundaries(in, fmt, precision)
                .flatMap(p -> p.toTriangles().stream());
    }","  public void test10()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      GeometryInput geometryInput0 = mock(GeometryInput.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(geometryInput0).getFileName();
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      GeometryFormat geometryFormat0 = csvBoundaryWriteHandler3D0.getFormat();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        boundaryIOManager3D0.triangles(geometryInput0, geometryFormat0, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to find handler for format \""CSV\""
         //
         verifyException(""org.apache.commons.geometry.io.core.BoundaryIOManager$HandlerRegistry"", e);
      }
  }"
1057,"    public TriangleMesh readTriangleMesh(final GeometryInput in, final GeometryFormat fmt,
            final Precision.DoubleEquivalence precision) {
        return requireReadHandler(in, fmt).readTriangleMesh(in, precision);
    }","  public void test11()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      boundaryIOManager3D0.registerDefaultHandlers();
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      Charset charset0 = csvBoundaryWriteHandler3D0.getDefaultCharset();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      GeometryInput geometryInput0 = mock(GeometryInput.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, (Charset) null).when(geometryInput0).getCharset();
      doReturn(""org.apache.commons.geometry.core.partitioning.bsp.AbstractBSPTreeMergeOperator"").when(geometryInput0).getFileName();
      doReturn(inputStream0).when(geometryInput0).getInputStream();
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      GeometryFormat geometryFormat0 = objBoundaryWriteHandler3D0.getFormat();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        boundaryIOManager3D0.readTriangleMesh(geometryInput0, geometryFormat0, precision_DoubleEquivalence0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException(""java.io.InputStreamReader"", e);
      }
  }"
1058,"    public TriangleMesh readTriangleMesh(final GeometryInput in, final GeometryFormat fmt,
            final Precision.DoubleEquivalence precision) {
        return requireReadHandler(in, fmt).readTriangleMesh(in, precision);
    }","  public void test12()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      boundaryIOManager3D0.registerDefaultHandlers();
      GeometryInput geometryInput0 = mock(GeometryInput.class, new ViolatedAssumptionAnswer());
      doReturn((Charset) null).when(geometryInput0).getCharset();
      doReturn((String) null).when(geometryInput0).getFileName();
      doReturn((InputStream) null).when(geometryInput0).getInputStream();
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      GeometryFormat geometryFormat0 = stlBoundaryWriteHandler3D0.getFormat();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        boundaryIOManager3D0.readTriangleMesh(geometryInput0, geometryFormat0, precision_DoubleEquivalence0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.StlFacetDefinitionReaders"", e);
      }
  }"
1059,"    public TriangleMesh readTriangleMesh(final GeometryInput in, final GeometryFormat fmt,
            final Precision.DoubleEquivalence precision) {
        return requireReadHandler(in, fmt).readTriangleMesh(in, precision);
    }","  public void test13()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      boundaryIOManager3D0.registerDefaultHandlers();
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      Charset charset0 = csvBoundaryWriteHandler3D0.getDefaultCharset();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).read(any(byte[].class));
      GeometryInput geometryInput0 = mock(GeometryInput.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, (Charset) null).when(geometryInput0).getCharset();
      doReturn(""No token has been read from the character stream"").when(geometryInput0).getFileName();
      doReturn(inputStream0).when(geometryInput0).getInputStream();
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      GeometryFormat geometryFormat0 = stlBoundaryWriteHandler3D0.getFormat();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        boundaryIOManager3D0.readTriangleMesh(geometryInput0, geometryFormat0, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Cannot determine STL format: attempted to read 5 bytes but found only 0 available
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1060,"    public Stream<FacetDefinition> facets(final GeometryInput in, final GeometryFormat fmt) {
        return requireReadHandler(in, fmt).facets(in);
    }","  public void test14()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      GeometryFormat geometryFormat0 = textBoundaryWriteHandler3D0.getFormat();
      // Undeclared exception!
      try { 
        boundaryIOManager3D0.facets((GeometryInput) null, geometryFormat0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Input cannot be null
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
1061,"    public FacetDefinitionReader facetDefinitionReader(final GeometryInput in, final GeometryFormat fmt) {
        return requireReadHandler(in, fmt).facetDefinitionReader(in);
    }","  public void test15()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      GeometryFormat geometryFormat0 = csvBoundaryWriteHandler3D0.getFormat();
      // Undeclared exception!
      try { 
        boundaryIOManager3D0.facetDefinitionReader((GeometryInput) null, geometryFormat0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Input cannot be null
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
1062,"    public FacetDefinitionReader facetDefinitionReader(final GeometryInput in, final GeometryFormat fmt) {
        return requireReadHandler(in, fmt).facetDefinitionReader(in);
    }","  public void test16()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      GeometryInput geometryInput0 = mock(GeometryInput.class, new ViolatedAssumptionAnswer());
      doReturn((Charset) null).when(geometryInput0).getCharset();
      doReturn((String) null).when(geometryInput0).getFileName();
      doReturn((InputStream) null).when(geometryInput0).getInputStream();
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      boundaryIOManager3D0.registerDefaultHandlers();
      GeometryFormat geometryFormat0 = stlBoundaryWriteHandler3D0.getFormat();
      // Undeclared exception!
      try { 
        boundaryIOManager3D0.facetDefinitionReader(geometryInput0, geometryFormat0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.StlFacetDefinitionReaders"", e);
      }
  }"
1063,"    public FacetDefinitionReader facetDefinitionReader(final GeometryInput in, final GeometryFormat fmt) {
        return requireReadHandler(in, fmt).facetDefinitionReader(in);
    }","  public void test17()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      Charset charset0 = csvBoundaryWriteHandler3D0.getDefaultCharset();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).read(any(byte[].class));
      GeometryInput geometryInput0 = mock(GeometryInput.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, (Charset) null).when(geometryInput0).getCharset();
      doReturn(""'WoIs"").when(geometryInput0).getFileName();
      doReturn(inputStream0).when(geometryInput0).getInputStream();
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      boundaryIOManager3D0.registerDefaultHandlers();
      GeometryFormat geometryFormat0 = stlBoundaryWriteHandler3D0.getFormat();
      // Undeclared exception!
      try { 
        boundaryIOManager3D0.facetDefinitionReader(geometryInput0, geometryFormat0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Cannot determine STL format: attempted to read 5 bytes but found only 0 available
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1064,"    public Stream<FacetDefinition> facets(final GeometryInput in, final GeometryFormat fmt) {
        return requireReadHandler(in, fmt).facets(in);
    }","  public void test18()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      GeometryInput geometryInput0 = mock(GeometryInput.class, new ViolatedAssumptionAnswer());
      doReturn(""Cannot determine STL format: attempted to read {0} bytes but found only {1} available"").when(geometryInput0).getFileName();
      GeometryFormat geometryFormat0 = objBoundaryWriteHandler3D0.getFormat();
      // Undeclared exception!
      try { 
        boundaryIOManager3D0.facets(geometryInput0, geometryFormat0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to find handler for format \""OBJ\""
         //
         verifyException(""org.apache.commons.geometry.io.core.BoundaryIOManager$HandlerRegistry"", e);
      }
  }"
1065,"    public Stream<FacetDefinition> facets(final GeometryInput in, final GeometryFormat fmt) {
        return requireReadHandler(in, fmt).facets(in);
    }","  public void test19()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      boundaryIOManager3D0.registerDefaultHandlers();
      GeometryInput geometryInput0 = mock(GeometryInput.class, new ViolatedAssumptionAnswer());
      doReturn((Charset) null).when(geometryInput0).getCharset();
      doReturn((String) null).when(geometryInput0).getFileName();
      doReturn((InputStream) null, (InputStream) null).when(geometryInput0).getInputStream();
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      GeometryFormat geometryFormat0 = objBoundaryWriteHandler3D0.getFormat();
      // Undeclared exception!
      try { 
        boundaryIOManager3D0.facets(geometryInput0, geometryFormat0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.Reader"", e);
      }
  }"
1066,"    public void writeFacets(final Stream<? extends FacetDefinition> facets, final GeometryOutput out,
            final GeometryFormat fmt) {
        requireWriteHandler(out, fmt).writeFacets(facets, out);
    }","  public void test20()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      Stream<SimpleFacetDefinition> stream0 = (Stream<SimpleFacetDefinition>) mock(Stream.class, new ViolatedAssumptionAnswer());
      GeometryOutput geometryOutput0 = mock(GeometryOutput.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(geometryOutput0).getFileName();
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      GeometryFormat geometryFormat0 = textBoundaryWriteHandler3D0.getFormat();
      // Undeclared exception!
      try { 
        boundaryIOManager3D0.writeFacets(stream0, geometryOutput0, geometryFormat0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to find handler for format \""TXT\""
         //
         verifyException(""org.apache.commons.geometry.io.core.BoundaryIOManager$HandlerRegistry"", e);
      }
  }"
1067,"    public FacetDefinitionReader facetDefinitionReader(final GeometryInput in, final GeometryFormat fmt) {
        return requireReadHandler(in, fmt).facetDefinitionReader(in);
    }","  public void test21()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      GeometryInput geometryInput0 = mock(GeometryInput.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(geometryInput0).getFileName();
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      GeometryFormat geometryFormat0 = textBoundaryWriteHandler3D0.getFormat();
      // Undeclared exception!
      try { 
        boundaryIOManager3D0.facetDefinitionReader(geometryInput0, geometryFormat0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to find handler for format \""TXT\""
         //
         verifyException(""org.apache.commons.geometry.io.core.BoundaryIOManager$HandlerRegistry"", e);
      }
  }"
1068,"    public Stream<Triangle3D> triangles(final GeometryInput in, final GeometryFormat fmt,
            final Precision.DoubleEquivalence precision) {
        return boundaries(in, fmt, precision)
                .flatMap(p -> p.toTriangles().stream());
    }","  public void test22()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      GeometryFormat geometryFormat0 = textBoundaryWriteHandler3D0.getFormat();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        boundaryIOManager3D0.triangles((GeometryInput) null, geometryFormat0, precision_DoubleEquivalence0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Input cannot be null
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
1069,"    public void writeFacets(final Stream<? extends FacetDefinition> facets, final GeometryOutput out,
            final GeometryFormat fmt) {
        requireWriteHandler(out, fmt).writeFacets(facets, out);
    }","  public void test23()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      GeometryFormat geometryFormat0 = textBoundaryWriteHandler3D0.getFormat();
      // Undeclared exception!
      try { 
        boundaryIOManager3D0.writeFacets((Collection<? extends FacetDefinition>) null, (GeometryOutput) null, geometryFormat0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Output cannot be null
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
1070,"    public void write(final Stream<? extends PlaneConvexSubset> boundaries, final GeometryOutput out,
            final GeometryFormat fmt) {
        requireWriteHandler(out, fmt).write(boundaries, out);
    }","  public void test24()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      ConvexVolume convexVolume0 = ConvexVolume.full();
      Stream<PlaneConvexSubset> stream0 = convexVolume0.boundaryStream();
      GeometryOutput geometryOutput0 = mock(GeometryOutput.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(geometryOutput0).getFileName();
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      GeometryFormat geometryFormat0 = textBoundaryWriteHandler3D0.getFormat();
      // Undeclared exception!
      try { 
        boundaryIOManager3D0.write(stream0, geometryOutput0, geometryFormat0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to find handler for format \""TXT\""
         //
         verifyException(""org.apache.commons.geometry.io.core.BoundaryIOManager$HandlerRegistry"", e);
      }
  }"
1071,"    public TriangleMesh readTriangleMesh(final GeometryInput in, final GeometryFormat fmt,
            final Precision.DoubleEquivalence precision) {
        return requireReadHandler(in, fmt).readTriangleMesh(in, precision);
    }","  public void test25()  throws Throwable  {
      BoundaryIOManager3D boundaryIOManager3D0 = new BoundaryIOManager3D();
      GeometryInput geometryInput0 = mock(GeometryInput.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(geometryInput0).getFileName();
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      GeometryFormat geometryFormat0 = objBoundaryWriteHandler3D0.getFormat();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        boundaryIOManager3D0.readTriangleMesh(geometryInput0, geometryFormat0, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to find handler for format \""OBJ\""
         //
         verifyException(""org.apache.commons.geometry.io.core.BoundaryIOManager$HandlerRegistry"", e);
      }
  }"
1072,"    public int getAttributeValue() {
        return attributeValue;
    }","  public void test0()  throws Throwable  {
      Vector<Vector3D> vector0 = new Vector<Vector3D>();
      Vector3D vector3D0 = Vector3D.of((double) 1036, (double) 1036, (double) 1036);
      vector0.setSize(1036);
      BinaryStlFacetDefinition binaryStlFacetDefinition0 = new BinaryStlFacetDefinition(vector0, vector3D0, 837);
      int int0 = binaryStlFacetDefinition0.getAttributeValue();
}"
1073,"    public int getAttributeValue() {
        return attributeValue;
    }","  public void test1()  throws Throwable  {
      Vector<Vector3D> vector0 = new Vector<Vector3D>();
      Vector3D vector3D0 = Vector3D.of((double) 1036, (double) 1036, (double) 1036);
      vector0.setSize(1036);
      BinaryStlFacetDefinition binaryStlFacetDefinition0 = new BinaryStlFacetDefinition(vector0, vector3D0, (-1947));
      int int0 = binaryStlFacetDefinition0.getAttributeValue();
}"
1074,"    public BinaryStlFacetDefinition(final List<Vector3D> vertices, final Vector3D normal,
            final int attributeValue) {
        super(vertices, normal);
        this.attributeValue = attributeValue;
    }","  public void test2()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of((-4025.0), (-4025.0), (-1.0));
      BinaryStlFacetDefinition binaryStlFacetDefinition0 = null;
      try {
        binaryStlFacetDefinition0 = new BinaryStlFacetDefinition((List<Vector3D>) null, vector3D0, (-3173));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Facet vertex list cannot be null
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
1075,"    public BinaryStlFacetDefinition(final List<Vector3D> vertices, final Vector3D normal,
            final int attributeValue) {
        super(vertices, normal);
        this.attributeValue = attributeValue;
    }","  public void test3()  throws Throwable  {
      LinkedList<Vector3D> linkedList0 = new LinkedList<Vector3D>();
      Vector3D vector3D0 = Vector3D.NaN;
      BinaryStlFacetDefinition binaryStlFacetDefinition0 = null;
      try {
        binaryStlFacetDefinition0 = new BinaryStlFacetDefinition(linkedList0, vector3D0, 2304);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Facet vertex list must contain at least 3 points; found 0
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.SimpleFacetDefinition"", e);
      }
  }"
1076,"    public int getAttributeValue() {
        return attributeValue;
    }","  public void test4()  throws Throwable  {
      Vector<Vector3D> vector0 = new Vector<Vector3D>();
      Vector3D vector3D0 = Vector3D.of((double) 1036, (double) 1036, (double) 1036);
      vector0.setSize(1036);
      BinaryStlFacetDefinition binaryStlFacetDefinition0 = new BinaryStlFacetDefinition(vector0, vector3D0, 0);
      int int0 = binaryStlFacetDefinition0.getAttributeValue();
}"
1077,"    public FacetDefinition readFacet() {
        if (!foundSolidEnd && parser.hasMoreCharacters()) {
            ensureSolidStarted();

            nextWord();

            int choice = parser.chooseIgnoreCase(
                    StlConstants.FACET_START_KEYWORD,
                    StlConstants.SOLID_END_KEYWORD);

            if (choice == 0) {
                return readFacetInternal();
            } else {
                foundSolidEnd = true;
            }
        }

        return null;
    }","  public void test0()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Parsing failed at line %d, column %d: %s"");
      TextStlFacetDefinitionReader textStlFacetDefinitionReader0 = new TextStlFacetDefinitionReader(stringReader0);
      stringReader0.close();
      // Undeclared exception!
      try { 
        textStlFacetDefinitionReader0.readFacet();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1078,"    public String getSolidName() {
        ensureSolidStarted();

        return solidName;
    }","  public void test1()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""2ExmK*'8skW}6C0U"");
      TextStlFacetDefinitionReader textStlFacetDefinitionReader0 = new TextStlFacetDefinitionReader(stringReader0);
      stringReader0.close();
      // Undeclared exception!
      try { 
        textStlFacetDefinitionReader0.getSolidName();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1079,"    public TextStlFacetDefinitionReader(final Reader reader) {
        this.reader = reader;
        this.parser = new SimpleTextParser(reader);
    }","  public void test2()  throws Throwable  {
      TextStlFacetDefinitionReader textStlFacetDefinitionReader0 = null;
      try {
        textStlFacetDefinitionReader0 = new TextStlFacetDefinitionReader((Reader) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Reader cannot be null
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
1080,"    public String getSolidName() {
        ensureSolidStarted();

        return solidName;
    }","  public void test3()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""solid"");
      TextStlFacetDefinitionReader textStlFacetDefinitionReader0 = new TextStlFacetDefinitionReader(stringReader0);
      textStlFacetDefinitionReader0.getSolidName();
      String string0 = textStlFacetDefinitionReader0.getSolidName();
}"
1081,"    public FacetDefinition readFacet() {
        if (!foundSolidEnd && parser.hasMoreCharacters()) {
            ensureSolidStarted();

            nextWord();

            int choice = parser.chooseIgnoreCase(
                    StlConstants.FACET_START_KEYWORD,
                    StlConstants.SOLID_END_KEYWORD);

            if (choice == 0) {
                return readFacetInternal();
            } else {
                foundSolidEnd = true;
            }
        }

        return null;
    }","  public void test4()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""solid"");
      TextStlFacetDefinitionReader textStlFacetDefinitionReader0 = new TextStlFacetDefinitionReader(stringReader0);
      textStlFacetDefinitionReader0.getSolidName();
      FacetDefinition facetDefinition0 = textStlFacetDefinitionReader0.readFacet();
}"
1082,"    public FacetDefinition readFacet() {
        if (!foundSolidEnd && parser.hasMoreCharacters()) {
            ensureSolidStarted();

            nextWord();

            int choice = parser.chooseIgnoreCase(
                    StlConstants.FACET_START_KEYWORD,
                    StlConstants.SOLID_END_KEYWORD);

            if (choice == 0) {
                return readFacetInternal();
            } else {
                foundSolidEnd = true;
            }
        }

        return null;
    }","  public void test5()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""solid"");
      TextStlFacetDefinitionReader textStlFacetDefinitionReader0 = new TextStlFacetDefinitionReader(stringReader0);
      // Undeclared exception!
      try { 
        textStlFacetDefinitionReader0.readFacet();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 6: expected one of [facet, endsolid] but found end of content
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1083,"    public void close() {
        GeometryIOUtils.closeUnchecked(reader);
    }","  public void test6()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""solid"");
      TextStlFacetDefinitionReader textStlFacetDefinitionReader0 = new TextStlFacetDefinitionReader(stringReader0);
      textStlFacetDefinitionReader0.close();
  }"
1084,"    public String getSolidName() {
        ensureSolidStarted();

        return solidName;
    }","  public void test7()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      TextStlFacetDefinitionReader textStlFacetDefinitionReader0 = new TextStlFacetDefinitionReader(stringReader0);
      // Undeclared exception!
      try { 
        textStlFacetDefinitionReader0.getSolidName();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: expected [solid] but found end of content
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1085,"    static boolean pointsAreCounterClockwise(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            final Vector3D computedNormal = computeTriangleNormal(p1, p2, p3);
            if (computedNormal != null && normal.dot(computedNormal) < 0) {
                return false;
            }
        }

        return true;
    }","  public void test0()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D vector3D1 = vector3D0.add(0.0, (Vector3D) vector3D_Unit1);
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.from(vector3D1);
      StlUtils.pointsAreCounterClockwise(vector3D_Unit2, vector3D_Unit0, vector3D1, vector3D_Unit2);
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Vector3D.centroid((Vector3D) vector3D_Unit2, vector3DArray0);
      Vector3D vector3D2 = axisSequence0.getAxis2();
      Vector3D.Unit vector3D_Unit3 = vector3D_Unit2.normalizeOrNull();
      Vector3D.Unit vector3D_Unit4 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit5 = vector3D_Unit2.orthogonal();
      StlUtils.pointsAreCounterClockwise(vector3D2, vector3D_Unit4, vector3D_Unit5, vector3D_Unit3);
  }"
1086,"    static ByteBuffer byteBuffer(final int capacity) {
        return ByteBuffer.allocate(capacity)
                .order(StlConstants.BINARY_BYTE_ORDER);
    }","  public void test1()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D vector3D1 = vector3D0.add(0.0, (Vector3D) vector3D_Unit1);
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D0, vector3D0, vector3D0, vector3D0);
      StlUtils.pointsAreCounterClockwise(vector3D2, vector3D_Unit0, vector3D1, vector3D2);
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Vector3D vector3D3 = Vector3D.centroid(vector3D2, vector3DArray0);
      Vector3D vector3D4 = axisSequence0.getAxis2();
      StlUtils.determineNormal(vector3D2, vector3D1, vector3D_Unit0, vector3D4);
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit3 = vector3D2.orthogonal();
      StlUtils.pointsAreCounterClockwise(vector3D_Unit3, vector3D3, vector3D2, vector3D4);
      StlUtils.byteBuffer(635882485);
  }"
1087,"    static boolean pointsAreCounterClockwise(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            final Vector3D computedNormal = computeTriangleNormal(p1, p2, p3);
            if (computedNormal != null && normal.dot(computedNormal) < 0) {
                return false;
            }
        }

        return true;
    }","  public void test2()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(3.273390607896142E150, 0.0, 3.273390607896142E150);
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.normalizeOrNull();
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.orthogonal();
      StlUtils.pointsAreCounterClockwise(vector3D_Unit1, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      StlUtils.byteBuffer(6);
      Vector3D.Unit vector3D_Unit3 = vector3D_Unit0.negate();
      Vector3D.Unit vector3D_Unit4 = Vector3D.Unit.PLUS_Y;
      Vector3D vector3D0 = vector3D_Unit3.reject((Vector3D) vector3D_Unit4);
      vector3D_Unit4.distance((Vector3D) vector3D_Unit1);
      vector3D_Unit3.isFinite();
      Vector3D.Unit vector3D_Unit5 = vector3D_Unit3.orthogonal((Vector3D) vector3D_Unit4);
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      StlUtils.pointsAreCounterClockwise(vector3D_Unit3, vector3D_Unit4, vector3D_Unit4, vector3D_Unit3);
      Vector3D.Unit vector3D_Unit6 = Vector3D.Unit.from(3.273390607896142E150, (double) 6, (double) 6);
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D_Unit5, vector3D1, vector3D_Unit0, vector3D_Unit6);
}"
1088,"    static Vector3D determineNormal(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            // try to normalize it
            final Vector3D normalized = normal.normalizeOrNull();
            if (normalized != null) {
                return normalized;
            }
        }

        // try to compute one from the triangle points
        final Vector3D computed = computeTriangleNormal(p1, p2, p3);
        return computed != null ?
                computed :
                Vector3D.ZERO;
    }","  public void test3()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(3.273390607896142E150, 0.0, 3.273390607896142E150);
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.normalizeOrNull();
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.orthogonal();
      StlUtils.pointsAreCounterClockwise(vector3D_Unit1, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      StlUtils.byteBuffer(6);
      Vector3D.Unit vector3D_Unit3 = vector3D_Unit0.negate();
      Vector3D.Unit vector3D_Unit4 = Vector3D.Unit.PLUS_Y;
      Vector3D vector3D0 = vector3D_Unit3.reject((Vector3D) vector3D_Unit4);
      vector3D_Unit4.distance((Vector3D) vector3D_Unit1);
      vector3D_Unit3.isFinite();
      Vector3D.Unit vector3D_Unit5 = vector3D_Unit3.orthogonal((Vector3D) vector3D_Unit4);
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      StlUtils.pointsAreCounterClockwise(vector3D_Unit3, vector3D_Unit4, vector3D_Unit4, vector3D_Unit3);
      Vector3D.Unit vector3D_Unit6 = Vector3D.Unit.from(3.273390607896142E150, (double) 6, (double) 6);
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D_Unit5, vector3D1, vector3D_Unit0, vector3D_Unit6);
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D_Unit4, vector3D_Unit2, vector3D_Unit6, vector3D1);
}"
1089,"    static ByteBuffer byteBuffer(final int capacity) {
        return ByteBuffer.allocate(capacity)
                .order(StlConstants.BINARY_BYTE_ORDER);
    }","  public void test4()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(3.273390607896142E150, 0.0, 3.273390607896142E150);
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.normalizeOrNull();
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.orthogonal();
      StlUtils.pointsAreCounterClockwise(vector3D_Unit1, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      StlUtils.byteBuffer(6);
      Vector3D.Unit vector3D_Unit3 = vector3D_Unit0.negate();
      Vector3D.Unit vector3D_Unit4 = Vector3D.Unit.PLUS_Y;
      Vector3D vector3D0 = vector3D_Unit3.reject((Vector3D) vector3D_Unit4);
      vector3D_Unit4.distance((Vector3D) vector3D_Unit1);
      vector3D_Unit3.isFinite();
      Vector3D.Unit vector3D_Unit5 = vector3D_Unit3.orthogonal((Vector3D) vector3D_Unit4);
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      StlUtils.pointsAreCounterClockwise(vector3D_Unit3, vector3D_Unit4, vector3D_Unit4, vector3D_Unit3);
      Vector3D.Unit vector3D_Unit6 = Vector3D.Unit.from(3.273390607896142E150, (double) 6, (double) 6);
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D_Unit5, vector3D1, vector3D_Unit0, vector3D_Unit6);
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D_Unit4, vector3D_Unit2, vector3D_Unit6, vector3D1);
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(6);
}"
1090,"    static boolean pointsAreCounterClockwise(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            final Vector3D computedNormal = computeTriangleNormal(p1, p2, p3);
            if (computedNormal != null && normal.dot(computedNormal) < 0) {
                return false;
            }
        }

        return true;
    }","  public void test5()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(3.273390607896142E150, 0.0, 3.273390607896142E150);
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.normalizeOrNull();
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.orthogonal();
      StlUtils.pointsAreCounterClockwise(vector3D_Unit1, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      StlUtils.byteBuffer(6);
      Vector3D.Unit vector3D_Unit3 = vector3D_Unit0.negate();
      Vector3D.Unit vector3D_Unit4 = Vector3D.Unit.PLUS_Y;
      Vector3D vector3D0 = vector3D_Unit3.reject((Vector3D) vector3D_Unit4);
      vector3D_Unit4.distance((Vector3D) vector3D_Unit1);
      vector3D_Unit3.isFinite();
      Vector3D.Unit vector3D_Unit5 = vector3D_Unit3.orthogonal((Vector3D) vector3D_Unit4);
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      StlUtils.pointsAreCounterClockwise(vector3D_Unit3, vector3D_Unit4, vector3D_Unit4, vector3D_Unit3);
      Vector3D.Unit vector3D_Unit6 = Vector3D.Unit.from(3.273390607896142E150, (double) 6, (double) 6);
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D_Unit5, vector3D1, vector3D_Unit0, vector3D_Unit6);
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D_Unit4, vector3D_Unit2, vector3D_Unit6, vector3D1);
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(6);
      Vector3D.Unit vector3D_Unit7 = Vector3D.Unit.PLUS_X;
      Vector3D vector3D3 = StlUtils.determineNormal(vector3D_Unit7, vector3D_Unit7, vector3D0, vector3D1);
      Vector3D.Unit vector3D_Unit8 = vector3D_Unit1.negate();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D_Unit7, vector3D_Unit1, vector3D_Unit8, vector3D_Unit4);
      vector3D1.transform(quaternionRotation0);
      Vector3D.Unit vector3D_Unit9 = vector3D_Unit1.normalize();
      boolean boolean1 = StlUtils.pointsAreCounterClockwise(vector3D3, vector3D_Unit7, vector3D_Unit9, vector3D3);
}"
1091,"    static Vector3D determineNormal(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            // try to normalize it
            final Vector3D normalized = normal.normalizeOrNull();
            if (normalized != null) {
                return normalized;
            }
        }

        // try to compute one from the triangle points
        final Vector3D computed = computeTriangleNormal(p1, p2, p3);
        return computed != null ?
                computed :
                Vector3D.ZERO;
    }","  public void test6()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(3.273390607896142E150, 0.0, 3.273390607896142E150);
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.normalizeOrNull();
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.orthogonal();
      StlUtils.pointsAreCounterClockwise(vector3D_Unit1, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      StlUtils.byteBuffer(6);
      Vector3D.Unit vector3D_Unit3 = vector3D_Unit0.negate();
      Vector3D.Unit vector3D_Unit4 = Vector3D.Unit.PLUS_Y;
      Vector3D vector3D0 = vector3D_Unit3.reject((Vector3D) vector3D_Unit4);
      vector3D_Unit4.distance((Vector3D) vector3D_Unit1);
      vector3D_Unit3.isFinite();
      Vector3D.Unit vector3D_Unit5 = vector3D_Unit3.orthogonal((Vector3D) vector3D_Unit4);
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      StlUtils.pointsAreCounterClockwise(vector3D_Unit3, vector3D_Unit4, vector3D_Unit4, vector3D_Unit3);
      Vector3D.Unit vector3D_Unit6 = Vector3D.Unit.from(3.273390607896142E150, (double) 6, (double) 6);
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D_Unit5, vector3D1, vector3D_Unit0, vector3D_Unit6);
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D_Unit4, vector3D_Unit2, vector3D_Unit6, vector3D1);
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(6);
      Vector3D.Unit vector3D_Unit7 = Vector3D.Unit.PLUS_X;
      Vector3D vector3D3 = StlUtils.determineNormal(vector3D_Unit7, vector3D_Unit7, vector3D0, vector3D1);
      Vector3D.Unit vector3D_Unit8 = vector3D_Unit1.negate();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D_Unit7, vector3D_Unit1, vector3D_Unit8, vector3D_Unit4);
      vector3D1.transform(quaternionRotation0);
      Vector3D.Unit vector3D_Unit9 = vector3D_Unit1.normalize();
      boolean boolean1 = StlUtils.pointsAreCounterClockwise(vector3D3, vector3D_Unit7, vector3D_Unit9, vector3D3);
      StlUtils.determineNormal(vector3D_Unit1, vector3D_Unit4, vector3D1, vector3D3);
}"
1092,"    static boolean pointsAreCounterClockwise(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            final Vector3D computedNormal = computeTriangleNormal(p1, p2, p3);
            if (computedNormal != null && normal.dot(computedNormal) < 0) {
                return false;
            }
        }

        return true;
    }","  public void test7()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.normalize();
      Vector3D vector3D0 = vector3D_Unit0.subtract(0.0, (Vector3D) vector3D_Unit1);
      Vector3D vector3D1 = Vector3D.of((-1519.96533209), (-1519.96533209), Double.POSITIVE_INFINITY);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit1, (Vector3D) vector3D_Unit1, (Vector3D) vector3D_Unit1);
      AffineTransformMatrix3D.createTranslation((Vector3D) vector3D_Unit0);
      AffineTransformMatrix3D.createTranslation((-1.0), (-230.388), (-1519.96533209));
      Vector3D.Unit vector3D_Unit2 = affineTransformMatrix3D0.applyDirection((Vector3D) vector3D_Unit1);
      StlUtils.pointsAreCounterClockwise(vector3D_Unit2, vector3D_Unit2, vector3D_Unit2, vector3D_Unit0);
      Vector3D[] vector3DArray0 = new Vector3D[7];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit1;
      vector3DArray0[2] = (Vector3D) vector3D_Unit1;
      vector3DArray0[3] = (Vector3D) vector3D_Unit1;
      vector3DArray0[4] = (Vector3D) vector3D_Unit0;
      vector3DArray0[5] = vector3D1;
      vector3DArray0[6] = vector3D1;
      Vector3D vector3D2 = Vector3D.centroid(vector3D0, vector3DArray0);
      Vector3D vector3D3 = StlUtils.determineNormal(vector3D_Unit0, vector3D2, vector3DArray0[1], vector3D1);
      StlUtils.determineNormal(vector3D2, vector3D3, vector3D1, vector3D2);
      StlUtils.determineNormal(vector3DArray0[0], vector3DArray0[3], vector3DArray0[0], vector3D_Unit0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.ABSOLUTE;
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, (-924.52), 1.0, 0.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AffineTransformMatrix3D affineTransformMatrix3D1 = AffineTransformMatrix3D.createRotation(vector3DArray0[1], quaternionRotation0);
      Vector3D.Unit vector3D_Unit3 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit4 = affineTransformMatrix3D1.applyDirection((Vector3D) vector3D_Unit3);
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D_Unit4, vector3D1, vector3D1, vector3D_Unit4);
}"
1093,"    static ByteBuffer byteBuffer(final int capacity) {
        return ByteBuffer.allocate(capacity)
                .order(StlConstants.BINARY_BYTE_ORDER);
    }","  public void test8()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.normalize();
      Vector3D vector3D0 = vector3D_Unit0.subtract(0.0, (Vector3D) vector3D_Unit1);
      Vector3D vector3D1 = Vector3D.of((-1519.96533209), (-1519.96533209), Double.POSITIVE_INFINITY);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit1, (Vector3D) vector3D_Unit1, (Vector3D) vector3D_Unit1);
      AffineTransformMatrix3D.createTranslation((Vector3D) vector3D_Unit0);
      AffineTransformMatrix3D.createTranslation((-1.0), (-230.388), (-1519.96533209));
      Vector3D.Unit vector3D_Unit2 = affineTransformMatrix3D0.applyDirection((Vector3D) vector3D_Unit1);
      StlUtils.pointsAreCounterClockwise(vector3D_Unit2, vector3D_Unit2, vector3D_Unit2, vector3D_Unit0);
      Vector3D[] vector3DArray0 = new Vector3D[7];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit1;
      vector3DArray0[2] = (Vector3D) vector3D_Unit1;
      vector3DArray0[3] = (Vector3D) vector3D_Unit1;
      vector3DArray0[4] = (Vector3D) vector3D_Unit0;
      vector3DArray0[5] = vector3D1;
      vector3DArray0[6] = vector3D1;
      Vector3D vector3D2 = Vector3D.centroid(vector3D0, vector3DArray0);
      Vector3D vector3D3 = StlUtils.determineNormal(vector3D_Unit0, vector3D2, vector3DArray0[1], vector3D1);
      StlUtils.determineNormal(vector3D2, vector3D3, vector3D1, vector3D2);
      StlUtils.determineNormal(vector3DArray0[0], vector3DArray0[3], vector3DArray0[0], vector3D_Unit0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.ABSOLUTE;
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, (-924.52), 1.0, 0.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AffineTransformMatrix3D affineTransformMatrix3D1 = AffineTransformMatrix3D.createRotation(vector3DArray0[1], quaternionRotation0);
      Vector3D.Unit vector3D_Unit3 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit4 = affineTransformMatrix3D1.applyDirection((Vector3D) vector3D_Unit3);
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D_Unit4, vector3D1, vector3D1, vector3D_Unit4);
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(857);
}"
1094,"    static Vector3D determineNormal(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            // try to normalize it
            final Vector3D normalized = normal.normalizeOrNull();
            if (normalized != null) {
                return normalized;
            }
        }

        // try to compute one from the triangle points
        final Vector3D computed = computeTriangleNormal(p1, p2, p3);
        return computed != null ?
                computed :
                Vector3D.ZERO;
    }","  public void test9()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      Vector3D vector3D1 = Vector3D.NaN;
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D0, vector3D0, vector3D0, vector3D1);
}"
1095,"    static boolean pointsAreCounterClockwise(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            final Vector3D computedNormal = computeTriangleNormal(p1, p2, p3);
            if (computedNormal != null && normal.dot(computedNormal) < 0) {
                return false;
            }
        }

        return true;
    }","  public void test10()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      Vector3D vector3D1 = Vector3D.NaN;
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D0, vector3D0, vector3D0, vector3D1);
      StlUtils.byteBuffer(229);
      AxisSequence axisSequence1 = AxisSequence.YZY;
      Vector3D vector3D3 = axisSequence1.getAxis3();
      StlUtils.pointsAreCounterClockwise(vector3D0, vector3D3, vector3D1, vector3D2);
      StlUtils.byteBuffer(335);
      StlUtils.byteBuffer(0);
      StlUtils.byteBuffer(565);
      StlUtils.pointsAreCounterClockwise(vector3D0, vector3D1, vector3D1, vector3D2);
      Vector3D vector3D4 = Vector3D.of((double) 565, 4107.84904515, 0.6);
      Vector3D.Unit vector3D_Unit0 = vector3D4.directionTo(vector3D0);
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.normalizeOrNull();
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.normalize();
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D2, vector3D2, vector3D0, vector3D_Unit2);
}"
1096,"    static ByteBuffer byteBuffer(final int capacity) {
        return ByteBuffer.allocate(capacity)
                .order(StlConstants.BINARY_BYTE_ORDER);
    }","  public void test11()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      Vector3D vector3D1 = Vector3D.NaN;
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D0, vector3D0, vector3D0, vector3D1);
      StlUtils.byteBuffer(229);
      AxisSequence axisSequence1 = AxisSequence.YZY;
      Vector3D vector3D3 = axisSequence1.getAxis3();
      StlUtils.pointsAreCounterClockwise(vector3D0, vector3D3, vector3D1, vector3D2);
      StlUtils.byteBuffer(335);
      StlUtils.byteBuffer(0);
      StlUtils.byteBuffer(565);
      StlUtils.pointsAreCounterClockwise(vector3D0, vector3D1, vector3D1, vector3D2);
      Vector3D vector3D4 = Vector3D.of((double) 565, 4107.84904515, 0.6);
      Vector3D.Unit vector3D_Unit0 = vector3D4.directionTo(vector3D0);
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.normalizeOrNull();
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.normalize();
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D2, vector3D2, vector3D0, vector3D_Unit2);
      StlUtils.byteBuffer(0);
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(0);
}"
1097,"    static boolean pointsAreCounterClockwise(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            final Vector3D computedNormal = computeTriangleNormal(p1, p2, p3);
            if (computedNormal != null && normal.dot(computedNormal) < 0) {
                return false;
            }
        }

        return true;
    }","  public void test12()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      Vector3D vector3D1 = Vector3D.NaN;
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D0, vector3D0, vector3D0, vector3D1);
      StlUtils.byteBuffer(229);
      AxisSequence axisSequence1 = AxisSequence.YZY;
      Vector3D vector3D3 = axisSequence1.getAxis3();
      StlUtils.pointsAreCounterClockwise(vector3D0, vector3D3, vector3D1, vector3D2);
      StlUtils.byteBuffer(335);
      StlUtils.byteBuffer(0);
      StlUtils.byteBuffer(565);
      StlUtils.pointsAreCounterClockwise(vector3D0, vector3D1, vector3D1, vector3D2);
      Vector3D vector3D4 = Vector3D.of((double) 565, 4107.84904515, 0.6);
      Vector3D.Unit vector3D_Unit0 = vector3D4.directionTo(vector3D0);
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.normalizeOrNull();
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.normalize();
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D2, vector3D2, vector3D0, vector3D_Unit2);
      StlUtils.byteBuffer(0);
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(0);
      Vector3D.Unit vector3D_Unit3 = Vector3D.Unit.MINUS_Z;
      boolean boolean1 = StlUtils.pointsAreCounterClockwise(vector3D_Unit2, vector3D0, vector3D_Unit2, vector3D_Unit3);
}"
1098,"    static ByteBuffer byteBuffer(final int capacity) {
        return ByteBuffer.allocate(capacity)
                .order(StlConstants.BINARY_BYTE_ORDER);
    }","  public void test13()  throws Throwable  {
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(0);
}"
1099,"    static ByteBuffer byteBuffer(final int capacity) {
        return ByteBuffer.allocate(capacity)
                .order(StlConstants.BINARY_BYTE_ORDER);
    }","  public void test14()  throws Throwable  {
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(0);
}"
1100,"    static Vector3D determineNormal(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            // try to normalize it
            final Vector3D normalized = normal.normalizeOrNull();
            if (normalized != null) {
                return normalized;
            }
        }

        // try to compute one from the triangle points
        final Vector3D computed = computeTriangleNormal(p1, p2, p3);
        return computed != null ?
                computed :
                Vector3D.ZERO;
    }","  public void test15()  throws Throwable  {
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0, (-221.9), (-221.9));
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      Vector3D vector3D1 = StlUtils.determineNormal(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, vector3D0);
      StlUtils.determineNormal(vector3D1, vector3D1, vector3D1, vector3D_Unit0);
}"
1101,"    static Vector3D determineNormal(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            // try to normalize it
            final Vector3D normalized = normal.normalizeOrNull();
            if (normalized != null) {
                return normalized;
            }
        }

        // try to compute one from the triangle points
        final Vector3D computed = computeTriangleNormal(p1, p2, p3);
        return computed != null ?
                computed :
                Vector3D.ZERO;
    }","  public void test16()  throws Throwable  {
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0, (-221.9), (-221.9));
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      Vector3D vector3D1 = StlUtils.determineNormal(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, vector3D0);
      StlUtils.determineNormal(vector3D1, vector3D1, vector3D1, vector3D_Unit0);
}"
1102,"    static boolean pointsAreCounterClockwise(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            final Vector3D computedNormal = computeTriangleNormal(p1, p2, p3);
            if (computedNormal != null && normal.dot(computedNormal) < 0) {
                return false;
            }
        }

        return true;
    }","  public void test17()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Vector3D vector3D0 = vector3D_Unit0.add((Vector3D) vector3D_Unit1);
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.normalizeOrNull();
      Vector3D.Unit vector3D_Unit3 = Vector3D.Unit.from((Vector3D) vector3D_Unit2);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      vector3D0.withNorm(2332.54617702);
      vector3D_Unit2.isZero(precision_DoubleEquivalence0);
      Vector3D[] vector3DArray0 = new Vector3D[8];
      vector3DArray0[0] = (Vector3D) vector3D_Unit1;
      vector3DArray0[1] = (Vector3D) vector3D_Unit2;
      vector3DArray0[2] = (Vector3D) vector3D_Unit0;
      vector3DArray0[3] = (Vector3D) vector3D_Unit0;
      vector3DArray0[4] = (Vector3D) vector3D_Unit0;
      vector3DArray0[5] = (Vector3D) vector3D_Unit1;
      vector3D0.orthogonal();
      vector3DArray0[6] = (Vector3D) vector3D_Unit1;
      Vector3D.Unit.from((Vector3D) vector3D_Unit3);
      vector3DArray0[7] = vector3D0;
      Vector3D.max((Vector3D) vector3D_Unit1, vector3DArray0);
      StlUtils.determineNormal(vector3D_Unit2, vector3D_Unit2, vector3D_Unit0, vector3D_Unit1);
      // Undeclared exception!
      try { 
        StlUtils.pointsAreCounterClockwise(vector3DArray0[6], (Vector3D) null, vector3DArray0[1], vector3DArray0[5]);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
1103,"    static Vector3D determineNormal(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            // try to normalize it
            final Vector3D normalized = normal.normalizeOrNull();
            if (normalized != null) {
                return normalized;
            }
        }

        // try to compute one from the triangle points
        final Vector3D computed = computeTriangleNormal(p1, p2, p3);
        return computed != null ?
                computed :
                Vector3D.ZERO;
    }","  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1372.11150689402);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D vector3D1 = StlUtils.determineNormal(vector3D0, vector3D0, vector3D0, vector3D0);
}"
1104,"    static boolean pointsAreCounterClockwise(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            final Vector3D computedNormal = computeTriangleNormal(p1, p2, p3);
            if (computedNormal != null && normal.dot(computedNormal) < 0) {
                return false;
            }
        }

        return true;
    }","  public void test19()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D vector3D1 = vector3D0.add(0.0, (Vector3D) vector3D_Unit1);
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D0, vector3D0, vector3D0, vector3D0);
      StlUtils.pointsAreCounterClockwise(vector3D2, vector3D_Unit0, vector3D1, vector3D2);
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Vector3D.centroid(vector3D2, vector3DArray0);
      Vector3D vector3D3 = axisSequence0.getAxis2();
      Vector3D vector3D4 = StlUtils.determineNormal(vector3D2, vector3D1, vector3D_Unit0, vector3D3);
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit3 = vector3D2.orthogonal();
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D3, vector3D_Unit2, vector3D_Unit3, vector3D4);
}"
1105,"    static boolean pointsAreCounterClockwise(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            final Vector3D computedNormal = computeTriangleNormal(p1, p2, p3);
            if (computedNormal != null && normal.dot(computedNormal) < 0) {
                return false;
            }
        }

        return true;
    }","  public void test20()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D vector3D1 = vector3D0.add(0.0, (Vector3D) vector3D_Unit1);
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D0, vector3D0, vector3D0, vector3D0);
      StlUtils.pointsAreCounterClockwise(vector3D2, vector3D_Unit0, vector3D1, vector3D2);
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Vector3D.centroid(vector3D2, vector3DArray0);
      Vector3D vector3D3 = axisSequence0.getAxis2();
      Vector3D vector3D4 = StlUtils.determineNormal(vector3D2, vector3D1, vector3D_Unit0, vector3D3);
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit3 = vector3D2.orthogonal();
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D3, vector3D_Unit2, vector3D_Unit3, vector3D4);
}"
1106,"    static ByteBuffer byteBuffer(final int capacity) {
        return ByteBuffer.allocate(capacity)
                .order(StlConstants.BINARY_BYTE_ORDER);
    }","  public void test21()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Y;
      Vector3D vector3D0 = vector3D_Unit0.lerp((Vector3D) vector3D_Unit1, 0.0);
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.PLUS_Y;
      vector3D0.toString();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit2, (Vector3D) vector3D_Unit2, (Vector3D) vector3D_Unit2);
      Vector3D vector3D1 = vector3D_Unit0.transform(affineTransformMatrix3D0);
      StlUtils.pointsAreCounterClockwise(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      affineTransformMatrix3D0.scale(0.0, (-741.062302270303), Double.NEGATIVE_INFINITY);
      vector3D1.directionTo((Vector3D) vector3D_Unit1);
      StlUtils.byteBuffer(0);
      Vector3D vector3D2 = vector3D1.subtract((-1.0), vector3D0);
      StlUtils.pointsAreCounterClockwise(vector3D0, vector3D_Unit0, vector3D_Unit1, vector3D_Unit2);
      StlUtils.pointsAreCounterClockwise(vector3D_Unit2, vector3D_Unit1, vector3D1, vector3D_Unit1);
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(0);
}"
1107,"    static boolean pointsAreCounterClockwise(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            final Vector3D computedNormal = computeTriangleNormal(p1, p2, p3);
            if (computedNormal != null && normal.dot(computedNormal) < 0) {
                return false;
            }
        }

        return true;
    }","  public void test22()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Y;
      Vector3D vector3D0 = vector3D_Unit0.lerp((Vector3D) vector3D_Unit1, 0.0);
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.PLUS_Y;
      vector3D0.toString();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit2, (Vector3D) vector3D_Unit2, (Vector3D) vector3D_Unit2);
      Vector3D vector3D1 = vector3D_Unit0.transform(affineTransformMatrix3D0);
      StlUtils.pointsAreCounterClockwise(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      affineTransformMatrix3D0.scale(0.0, (-741.062302270303), Double.NEGATIVE_INFINITY);
      vector3D1.directionTo((Vector3D) vector3D_Unit1);
      StlUtils.byteBuffer(0);
      Vector3D vector3D2 = vector3D1.subtract((-1.0), vector3D0);
      StlUtils.pointsAreCounterClockwise(vector3D0, vector3D_Unit0, vector3D_Unit1, vector3D_Unit2);
      StlUtils.pointsAreCounterClockwise(vector3D_Unit2, vector3D_Unit1, vector3D1, vector3D_Unit1);
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(0);
      Vector3D vector3D3 = StlUtils.determineNormal(vector3D_Unit1, vector3D_Unit0, vector3D2, vector3D_Unit2);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.ABSOLUTE;
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 1.0, (-2158.7613685322945), 0.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D4 = quaternionRotation0.getAxis();
      Vector3D vector3D5 = quaternionRotation0.apply(vector3D0);
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D2, vector3D4, vector3D_Unit2, vector3D5);
}"
1108,"    static boolean pointsAreCounterClockwise(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            final Vector3D computedNormal = computeTriangleNormal(p1, p2, p3);
            if (computedNormal != null && normal.dot(computedNormal) < 0) {
                return false;
            }
        }

        return true;
    }","  public void test23()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Y;
      Vector3D vector3D0 = vector3D_Unit0.lerp((Vector3D) vector3D_Unit1, 0.0);
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.PLUS_Y;
      vector3D0.toString();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit2, (Vector3D) vector3D_Unit2, (Vector3D) vector3D_Unit2);
      Vector3D vector3D1 = vector3D_Unit0.transform(affineTransformMatrix3D0);
      StlUtils.pointsAreCounterClockwise(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      affineTransformMatrix3D0.scale(0.0, (-741.062302270303), Double.NEGATIVE_INFINITY);
      vector3D1.directionTo((Vector3D) vector3D_Unit1);
      StlUtils.byteBuffer(0);
      Vector3D vector3D2 = vector3D1.subtract((-1.0), vector3D0);
      StlUtils.pointsAreCounterClockwise(vector3D0, vector3D_Unit0, vector3D_Unit1, vector3D_Unit2);
      StlUtils.pointsAreCounterClockwise(vector3D_Unit2, vector3D_Unit1, vector3D1, vector3D_Unit1);
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(0);
      Vector3D vector3D3 = StlUtils.determineNormal(vector3D_Unit1, vector3D_Unit0, vector3D2, vector3D_Unit2);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.ABSOLUTE;
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 1.0, (-2158.7613685322945), 0.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D4 = quaternionRotation0.getAxis();
      Vector3D vector3D5 = quaternionRotation0.apply(vector3D0);
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D2, vector3D4, vector3D_Unit2, vector3D5);
}"
1109,"    static boolean pointsAreCounterClockwise(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            final Vector3D computedNormal = computeTriangleNormal(p1, p2, p3);
            if (computedNormal != null && normal.dot(computedNormal) < 0) {
                return false;
            }
        }

        return true;
    }","  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(Double.NaN, 0.0, 0.0);
      Vector3D[] vector3DArray0 = new Vector3D[5];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      vector3DArray0[3] = vector3D0;
      vector3DArray0[4] = vector3D0;
      Vector3D vector3D1 = Vector3D.centroid(vector3D0, vector3DArray0);
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D0, vector3D0, vector3D1, vector3D0);
}"
1110,"    static Vector3D determineNormal(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            // try to normalize it
            final Vector3D normalized = normal.normalizeOrNull();
            if (normalized != null) {
                return normalized;
            }
        }

        // try to compute one from the triangle points
        final Vector3D computed = computeTriangleNormal(p1, p2, p3);
        return computed != null ?
                computed :
                Vector3D.ZERO;
    }","  public void test25()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(1675.412693692, 1675.412693692, 1675.412693692);
      Vector3D vector3D0 = StlUtils.determineNormal((Vector3D) null, (Vector3D) null, (Vector3D) null, vector3D_Unit0);
}"
1111,"    static boolean pointsAreCounterClockwise(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            final Vector3D computedNormal = computeTriangleNormal(p1, p2, p3);
            if (computedNormal != null && normal.dot(computedNormal) < 0) {
                return false;
            }
        }

        return true;
    }","  public void test26()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YXY;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      AxisSequence axisSequence1 = AxisSequence.XZX;
      Vector3D vector3D1 = axisSequence1.getAxis2();
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D0, vector3D1, vector3D1, vector3D1);
}"
1112,"    static ByteBuffer byteBuffer(final int capacity) {
        return ByteBuffer.allocate(capacity)
                .order(StlConstants.BINARY_BYTE_ORDER);
    }","  public void test27()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      vector3D_Unit0.withNorm(1.0);
      Vector3D[] vector3DArray0 = new Vector3D[6];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      vector3DArray0[2] = (Vector3D) vector3D_Unit0;
      vector3DArray0[3] = (Vector3D) vector3D_Unit0;
      vector3DArray0[4] = (Vector3D) vector3D_Unit0;
      vector3DArray0[5] = (Vector3D) vector3D_Unit0;
      Vector3D vector3D0 = Vector3D.centroid((Vector3D) vector3D_Unit0, vector3DArray0);
      Vector3D.max(vector3DArray0[4], vector3DArray0);
      vector3D0.withNorm(0.0);
      StlUtils.pointsAreCounterClockwise(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, vector3D0);
      Vector3D vector3D1 = null;
      StlUtils.pointsAreCounterClockwise(vector3DArray0[3], vector3DArray0[0], vector3DArray0[0], (Vector3D) null);
      StlUtils.byteBuffer(272);
      // Undeclared exception!
      try { 
        StlUtils.byteBuffer((-526));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.ByteBuffer"", e);
      }
  }"
1113,"    static Vector3D determineNormal(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            // try to normalize it
            final Vector3D normalized = normal.normalizeOrNull();
            if (normalized != null) {
                return normalized;
            }
        }

        // try to compute one from the triangle points
        final Vector3D computed = computeTriangleNormal(p1, p2, p3);
        return computed != null ?
                computed :
                Vector3D.ZERO;
    }","  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        StlUtils.determineNormal((Vector3D) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.StlUtils"", e);
      }
  }"
1114,"    static Vector3D determineNormal(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            // try to normalize it
            final Vector3D normalized = normal.normalizeOrNull();
            if (normalized != null) {
                return normalized;
            }
        }

        // try to compute one from the triangle points
        final Vector3D computed = computeTriangleNormal(p1, p2, p3);
        return computed != null ?
                computed :
                Vector3D.ZERO;
    }","  public void test29()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = StlUtils.determineNormal(vector3D0, vector3D0, vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        vector3D1.orthogonal();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
1115,"    static Vector3D determineNormal(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            // try to normalize it
            final Vector3D normalized = normal.normalizeOrNull();
            if (normalized != null) {
                return normalized;
            }
        }

        // try to compute one from the triangle points
        final Vector3D computed = computeTriangleNormal(p1, p2, p3);
        return computed != null ?
                computed :
                Vector3D.ZERO;
    }","  public void test30()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D vector3D0 = StlUtils.determineNormal(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
}"
1116,"    static boolean pointsAreCounterClockwise(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            final Vector3D computedNormal = computeTriangleNormal(p1, p2, p3);
            if (computedNormal != null && normal.dot(computedNormal) < 0) {
                return false;
            }
        }

        return true;
    }","  public void test31()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D0, vector3D0, vector3D0, vector3D0);
}"
1117,"    static ByteBuffer byteBuffer(final int capacity) {
        return ByteBuffer.allocate(capacity)
                .order(StlConstants.BINARY_BYTE_ORDER);
    }","  public void test32()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(6);
}"
1118,"    static Vector3D determineNormal(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            // try to normalize it
            final Vector3D normalized = normal.normalizeOrNull();
            if (normalized != null) {
                return normalized;
            }
        }

        // try to compute one from the triangle points
        final Vector3D computed = computeTriangleNormal(p1, p2, p3);
        return computed != null ?
                computed :
                Vector3D.ZERO;
    }","  public void test33()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(6);
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.PLUS_X;
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      StlUtils.pointsAreCounterClockwise(vector3D_Unit2, vector3D0, vector3D_Unit0, vector3D_Unit2);
      Vector3D vector3D1 = StlUtils.determineNormal(vector3D_Unit2, vector3D_Unit1, vector3D_Unit0, vector3D0);
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D_Unit1, vector3D_Unit1, vector3D_Unit2, vector3D0);
}"
1119,"    static boolean pointsAreCounterClockwise(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            final Vector3D computedNormal = computeTriangleNormal(p1, p2, p3);
            if (computedNormal != null && normal.dot(computedNormal) < 0) {
                return false;
            }
        }

        return true;
    }","  public void test34()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(6);
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.PLUS_X;
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      StlUtils.pointsAreCounterClockwise(vector3D_Unit2, vector3D0, vector3D_Unit0, vector3D_Unit2);
      Vector3D vector3D1 = StlUtils.determineNormal(vector3D_Unit2, vector3D_Unit1, vector3D_Unit0, vector3D0);
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D_Unit1, vector3D_Unit1, vector3D_Unit2, vector3D0);
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D2, vector3D_Unit1, vector3D1, vector3D2);
}"
1120,"    static boolean pointsAreCounterClockwise(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            final Vector3D computedNormal = computeTriangleNormal(p1, p2, p3);
            if (computedNormal != null && normal.dot(computedNormal) < 0) {
                return false;
            }
        }

        return true;
    }","  public void test35()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(6);
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.PLUS_X;
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      StlUtils.pointsAreCounterClockwise(vector3D_Unit2, vector3D0, vector3D_Unit0, vector3D_Unit2);
      Vector3D vector3D1 = StlUtils.determineNormal(vector3D_Unit2, vector3D_Unit1, vector3D_Unit0, vector3D0);
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D_Unit1, vector3D_Unit1, vector3D_Unit2, vector3D0);
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D2, vector3D_Unit1, vector3D1, vector3D2);
}"
1121,"    static Vector3D determineNormal(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            // try to normalize it
            final Vector3D normalized = normal.normalizeOrNull();
            if (normalized != null) {
                return normalized;
            }
        }

        // try to compute one from the triangle points
        final Vector3D computed = computeTriangleNormal(p1, p2, p3);
        return computed != null ?
                computed :
                Vector3D.ZERO;
    }","  public void test36()  throws Throwable  {
      StlUtils.pointsAreCounterClockwise((Vector3D) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
      // Undeclared exception!
      try { 
        StlUtils.determineNormal((Vector3D) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.StlUtils"", e);
      }
  }"
1122,"    static boolean pointsAreCounterClockwise(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        if (normal != null) {
            final Vector3D computedNormal = computeTriangleNormal(p1, p2, p3);
            if (computedNormal != null && normal.dot(computedNormal) < 0) {
                return false;
            }
        }

        return true;
    }","  public void test37()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Vector3D vector3D1 = StlUtils.determineNormal(vector3D0, vector3D0, vector3D0, vector3D0);
      Vector3D vector3D2 = axisSequence0.getAxis2();
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D2, vector3D0, vector3D_Unit0, vector3D1);
}"
1123,"    public void writeTriangle(final Vector3D p1, final Vector3D p2, final Vector3D p3, final Vector3D normal) {
        if (!started) {
            throw new IllegalStateException(""Cannot write triangle: no solid has been started"");
        }

        write(StlConstants.FACET_START_KEYWORD);
        write(SPACE);
        writeVector(StlUtils.determineNormal(p1, p2, p3, normal));
        writeNewLine();

        write(StlConstants.OUTER_KEYWORD);
        write(SPACE);
        write(StlConstants.LOOP_START_KEYWORD);
        writeNewLine();

        writeTriangleVertex(p1);

        if (StlUtils.pointsAreCounterClockwise(p1, p2, p3, normal)) {
            writeTriangleVertex(p2);
            writeTriangleVertex(p3);
        } else {
            writeTriangleVertex(p3);
            writeTriangleVertex(p2);
        }

        write(StlConstants.LOOP_END_KEYWORD);
        writeNewLine();

        write(StlConstants.FACET_END_KEYWORD);
        writeNewLine();
    }","  public void test0()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(""DEFAULT"", ""DEFAULT"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      TextStlWriter textStlWriter0 = new TextStlWriter(mockPrintWriter0);
      textStlWriter0.startSolid(""DEFAULT"");
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-2535.501), (-2535.501), 0.99);
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.negate();
      textStlWriter0.writeTriangle(vector3D_Unit2, vector3D_Unit1, vector3D_Unit0, vector3D_Unit0);
}"
1124,"    public void writeTriangle(final Vector3D p1, final Vector3D p2, final Vector3D p3, final Vector3D normal) {
        if (!started) {
            throw new IllegalStateException(""Cannot write triangle: no solid has been started"");
        }

        write(StlConstants.FACET_START_KEYWORD);
        write(SPACE);
        writeVector(StlUtils.determineNormal(p1, p2, p3, normal));
        writeNewLine();

        write(StlConstants.OUTER_KEYWORD);
        write(SPACE);
        write(StlConstants.LOOP_START_KEYWORD);
        writeNewLine();

        writeTriangleVertex(p1);

        if (StlUtils.pointsAreCounterClockwise(p1, p2, p3, normal)) {
            writeTriangleVertex(p2);
            writeTriangleVertex(p3);
        } else {
            writeTriangleVertex(p3);
            writeTriangleVertex(p2);
        }

        write(StlConstants.LOOP_END_KEYWORD);
        writeNewLine();

        write(StlConstants.FACET_END_KEYWORD);
        writeNewLine();
    }","  public void test1()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(19);
      TextStlWriter textStlWriter0 = new TextStlWriter(stringWriter0);
      textStlWriter0.startSolid();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D[] vector3DArray0 = new Vector3D[5];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      vector3DArray0[2] = (Vector3D) vector3D_Unit0;
      vector3DArray0[3] = (Vector3D) vector3D_Unit0;
      vector3DArray0[4] = (Vector3D) vector3D_Unit0;
      Vector3D vector3D0 = Vector3D.min((Vector3D) vector3D_Unit0, vector3DArray0);
      textStlWriter0.writeTriangle(vector3D0, vector3D0, vector3D_Unit0, vector3D0);
}"
1125,"    public void writeTriangle(final Vector3D p1, final Vector3D p2, final Vector3D p3, final Vector3D normal) {
        if (!started) {
            throw new IllegalStateException(""Cannot write triangle: no solid has been started"");
        }

        write(StlConstants.FACET_START_KEYWORD);
        write(SPACE);
        writeVector(StlUtils.determineNormal(p1, p2, p3, normal));
        writeNewLine();

        write(StlConstants.OUTER_KEYWORD);
        write(SPACE);
        write(StlConstants.LOOP_START_KEYWORD);
        writeNewLine();

        writeTriangleVertex(p1);

        if (StlUtils.pointsAreCounterClockwise(p1, p2, p3, normal)) {
            writeTriangleVertex(p2);
            writeTriangleVertex(p3);
        } else {
            writeTriangleVertex(p3);
            writeTriangleVertex(p2);
        }

        write(StlConstants.LOOP_END_KEYWORD);
        writeNewLine();

        write(StlConstants.FACET_END_KEYWORD);
        writeNewLine();
    }","  public void test2()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(""DEFAULT"", ""DEFAULT"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      TextStlWriter textStlWriter0 = new TextStlWriter(mockPrintWriter0);
      textStlWriter0.startSolid(""DEFAULT"");
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-2535.501), (-2535.501), 0.99);
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      textStlWriter0.writeTriangle(vector3D_Unit0, vector3D_Unit1, vector3D_Unit0, vector3D_Unit0);
}"
1126,"    public void writeTriangles(final PlaneConvexSubset boundary) {
        for (final Triangle3D tri : boundary.toTriangles()) {
            writeTriangles(tri.getVertices(), tri.getPlane().getNormal());
        }
    }","  public void test3()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""DEFAULT"", ""DEFAULT"");
      TextStlWriter textStlWriter0 = new TextStlWriter(mockPrintWriter0);
      textStlWriter0.startSolid(""DEFAULT"");
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-2535.501), (-2535.501), (-2535.501));
      Stack<Vector3D> stack0 = new Stack<Vector3D>();
      stack0.add((Vector3D) vector3D_Unit0);
      stack0.add((Vector3D) vector3D_Unit0);
      stack0.add((Vector3D) vector3D_Unit0);
      SimpleFacetDefinition simpleFacetDefinition0 = new SimpleFacetDefinition(stack0);
      textStlWriter0.writeTriangles((FacetDefinition) simpleFacetDefinition0);
}"
1127,"    public void writeTriangles(final PlaneConvexSubset boundary) {
        for (final Triangle3D tri : boundary.toTriangles()) {
            writeTriangles(tri.getVertices(), tri.getPlane().getNormal());
        }
    }","  public void test4()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""q{e9!"", ""q{e9!"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      TextStlWriter textStlWriter0 = new TextStlWriter(mockPrintWriter0);
      PlaneConvexSubset planeConvexSubset0 = mock(PlaneConvexSubset.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(planeConvexSubset0).toTriangles();
      // Undeclared exception!
      try { 
        textStlWriter0.writeTriangles(planeConvexSubset0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.TextStlWriter"", e);
      }
  }"
1128,"    public void writeTriangles(final PlaneConvexSubset boundary) {
        for (final Triangle3D tri : boundary.toTriangles()) {
            writeTriangles(tri.getVertices(), tri.getPlane().getNormal());
        }
    }","  public void test5()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""loop"");
      TextStlWriter textStlWriter0 = new TextStlWriter(mockPrintWriter0);
      Vector<Triangle3D> vector0 = new Vector<Triangle3D>();
      Vector<Vector3D> vector1 = new Vector<Vector3D>();
      Plane plane0 = mock(Plane.class, new ViolatedAssumptionAnswer());
      Triangle3D triangle3D0 = mock(Triangle3D.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(triangle3D0).getVertices();
      doReturn((Plane) null).when(triangle3D0).getPlane();
      vector0.add(triangle3D0);
      PlaneConvexSubset planeConvexSubset0 = mock(PlaneConvexSubset.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(planeConvexSubset0).toTriangles();
      // Undeclared exception!
      try { 
        textStlWriter0.writeTriangles(planeConvexSubset0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.TextStlWriter"", e);
      }
  }"
1129,"    public void writeTriangles(final PlaneConvexSubset boundary) {
        for (final Triangle3D tri : boundary.toTriangles()) {
            writeTriangles(tri.getVertices(), tri.getPlane().getNormal());
        }
    }","  public void test6()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      TextStlWriter textStlWriter0 = new TextStlWriter(stringWriter0);
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        textStlWriter0.writeTriangles((List<Vector3D>) null, vector3D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.EuclideanUtils"", e);
      }
  }"
1130,"    public void writeTriangles(final PlaneConvexSubset boundary) {
        for (final Triangle3D tri : boundary.toTriangles()) {
            writeTriangles(tri.getVertices(), tri.getPlane().getNormal());
        }
    }","  public void test7()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""DEFAULT"");
      TextStlWriter textStlWriter0 = new TextStlWriter(mockPrintWriter0);
      textStlWriter0.startSolid(""DEFAULT"");
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-2535.501), (-2535.501), (-2535.501));
      Stack<Vector3D> stack0 = new Stack<Vector3D>();
      stack0.add((Vector3D) vector3D_Unit0);
      textStlWriter0.endSolid();
      stack0.add((Vector3D) vector3D_Unit0);
      stack0.add((Vector3D) vector3D_Unit0);
      // Undeclared exception!
      try { 
        textStlWriter0.writeTriangles((List<Vector3D>) stack0, (Vector3D) vector3D_Unit0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Cannot write triangle: no solid has been started
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.TextStlWriter"", e);
      }
  }"
1131,"    public void writeTriangle(final Vector3D p1, final Vector3D p2, final Vector3D p3, final Vector3D normal) {
        if (!started) {
            throw new IllegalStateException(""Cannot write triangle: no solid has been started"");
        }

        write(StlConstants.FACET_START_KEYWORD);
        write(SPACE);
        writeVector(StlUtils.determineNormal(p1, p2, p3, normal));
        writeNewLine();

        write(StlConstants.OUTER_KEYWORD);
        write(SPACE);
        write(StlConstants.LOOP_START_KEYWORD);
        writeNewLine();

        writeTriangleVertex(p1);

        if (StlUtils.pointsAreCounterClockwise(p1, p2, p3, normal)) {
            writeTriangleVertex(p2);
            writeTriangleVertex(p3);
        } else {
            writeTriangleVertex(p3);
            writeTriangleVertex(p2);
        }

        write(StlConstants.LOOP_END_KEYWORD);
        writeNewLine();

        write(StlConstants.FACET_END_KEYWORD);
        writeNewLine();
    }","  public void test8()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      TextStlWriter textStlWriter0 = new TextStlWriter(stringWriter0);
      textStlWriter0.startSolid("""");
      // Undeclared exception!
      try { 
        textStlWriter0.writeTriangle(vector3D_Unit0, vector3D_Unit0, (Vector3D) null, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
1132,"    public void startSolid() {
        startSolid(null);
    }","  public void test9()  throws Throwable  {
      TextStlWriter textStlWriter0 = new TextStlWriter((Writer) null);
      // Undeclared exception!
      try { 
        textStlWriter0.startSolid();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1133,"    public void close() {
        if (started) {
            endSolid();
        }

        super.close();
    }","  public void test10()  throws Throwable  {
      TextStlWriter textStlWriter0 = new TextStlWriter((Writer) null);
      // Undeclared exception!
      try { 
        textStlWriter0.close();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1134,"    public void startSolid() {
        startSolid(null);
    }","  public void test11()  throws Throwable  {
      TextStlWriter textStlWriter0 = new TextStlWriter((Writer) null);
      // Undeclared exception!
      try { 
        textStlWriter0.startSolid((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1135,"    public void startSolid() {
        startSolid(null);
    }","  public void test12()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""DEFAULT"", ""DEFAULT"");
      TextStlWriter textStlWriter0 = new TextStlWriter(mockPrintWriter0);
      textStlWriter0.startSolid(""DEFAULT"");
      // Undeclared exception!
      try { 
        textStlWriter0.startSolid(""DEFAULT"");
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Cannot start solid definition: a solid is already being written
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.TextStlWriter"", e);
      }
  }"
1136,"    public void close() {
        if (started) {
            endSolid();
        }

        super.close();
    }","  public void test13()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""vertex"");
      TextStlWriter textStlWriter0 = new TextStlWriter(mockPrintWriter0);
      textStlWriter0.startSolid();
      textStlWriter0.close();
}"
1137,"    public void writeTriangle(final Vector3D p1, final Vector3D p2, final Vector3D p3, final Vector3D normal) {
        if (!started) {
            throw new IllegalStateException(""Cannot write triangle: no solid has been started"");
        }

        write(StlConstants.FACET_START_KEYWORD);
        write(SPACE);
        writeVector(StlUtils.determineNormal(p1, p2, p3, normal));
        writeNewLine();

        write(StlConstants.OUTER_KEYWORD);
        write(SPACE);
        write(StlConstants.LOOP_START_KEYWORD);
        writeNewLine();

        writeTriangleVertex(p1);

        if (StlUtils.pointsAreCounterClockwise(p1, p2, p3, normal)) {
            writeTriangleVertex(p2);
            writeTriangleVertex(p3);
        } else {
            writeTriangleVertex(p3);
            writeTriangleVertex(p2);
        }

        write(StlConstants.LOOP_END_KEYWORD);
        writeNewLine();

        write(StlConstants.FACET_END_KEYWORD);
        writeNewLine();
    }","  public void test14()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""DEFAULT"");
      TextStlWriter textStlWriter0 = new TextStlWriter(mockPrintWriter0);
      textStlWriter0.startSolid(""DEFAULT"");
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.MINUS_X;
      textStlWriter0.writeTriangle(vector3D_Unit1, vector3D_Unit0, vector3D_Unit2, vector3D_Unit0);
}"
1138,"    public void writeTriangle(final Vector3D p1, final Vector3D p2, final Vector3D p3, final Vector3D normal) {
        if (!started) {
            throw new IllegalStateException(""Cannot write triangle: no solid has been started"");
        }

        write(StlConstants.FACET_START_KEYWORD);
        write(SPACE);
        writeVector(StlUtils.determineNormal(p1, p2, p3, normal));
        writeNewLine();

        write(StlConstants.OUTER_KEYWORD);
        write(SPACE);
        write(StlConstants.LOOP_START_KEYWORD);
        writeNewLine();

        writeTriangleVertex(p1);

        if (StlUtils.pointsAreCounterClockwise(p1, p2, p3, normal)) {
            writeTriangleVertex(p2);
            writeTriangleVertex(p3);
        } else {
            writeTriangleVertex(p3);
            writeTriangleVertex(p2);
        }

        write(StlConstants.LOOP_END_KEYWORD);
        writeNewLine();

        write(StlConstants.FACET_END_KEYWORD);
        writeNewLine();
    }","  public void test15()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""vertex"");
      TextStlWriter textStlWriter0 = new TextStlWriter(mockPrintWriter0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      // Undeclared exception!
      try { 
        textStlWriter0.writeTriangle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Cannot write triangle: no solid has been started
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.TextStlWriter"", e);
      }
  }"
1139,"    public void writeTriangles(final PlaneConvexSubset boundary) {
        for (final Triangle3D tri : boundary.toTriangles()) {
            writeTriangles(tri.getVertices(), tri.getPlane().getNormal());
        }
    }","  public void test16()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""DEFAULT"", ""DEFAULT"");
      TextStlWriter textStlWriter0 = new TextStlWriter(mockPrintWriter0);
      textStlWriter0.startSolid(""DEFAULT"");
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Stack<Vector3D> stack0 = new Stack<Vector3D>();
      stack0.add((Vector3D) vector3D_Unit0);
      stack0.add((Vector3D) vector3D_Unit0);
      stack0.add((Vector3D) vector3D_Unit0);
      textStlWriter0.writeTriangles((List<Vector3D>) stack0, (Vector3D) vector3D_Unit0);
}"
1140,"    public void endSolid() {
        if (!started) {
            throw new IllegalStateException(""Cannot end solid definition: no solid has been started"");
        }

        writeBeginOrEndLine(StlConstants.SOLID_END_KEYWORD);
        name = null;
        started = false;
    }","  public void test17()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextStlWriter textStlWriter0 = new TextStlWriter(stringWriter0);
      // Undeclared exception!
      try { 
        textStlWriter0.endSolid();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Cannot end solid definition: no solid has been started
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.TextStlWriter"", e);
      }
  }"
1141,"    public void startSolid() {
        startSolid(null);
    }","  public void test18()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""\n"");
      TextStlWriter textStlWriter0 = new TextStlWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        textStlWriter0.startSolid(""\n"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Solid name cannot contain new line characters
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.TextStlWriter"", e);
      }
  }"
1142,"    public void startSolid() {
        startSolid(null);
    }","  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""UblRIU/"", """");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      TextStlWriter textStlWriter0 = new TextStlWriter(mockPrintWriter0);
      textStlWriter0.startSolid(""UblRIU/"");
      // Undeclared exception!
      try { 
        textStlWriter0.startSolid();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Cannot start solid definition: a solid is already being written
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.TextStlWriter"", e);
      }
  }"
1143,"    public void writeTriangles(final PlaneConvexSubset boundary) {
        for (final Triangle3D tri : boundary.toTriangles()) {
            writeTriangles(tri.getVertices(), tri.getPlane().getNormal());
        }
    }","  public void test20()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""endloop"");
      TextStlWriter textStlWriter0 = new TextStlWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        textStlWriter0.writeTriangles((FacetDefinition) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.TextStlWriter"", e);
      }
  }"
1144,"    public FacetDefinitionReader facetDefinitionReader(final GeometryInput in) {
        final Charset inputCharset = in.getCharset() != null ?
                in.getCharset() :
                defaultCharset;

        return GeometryIOUtils.tryApplyCloseable(
                inputStream -> StlFacetDefinitionReaders.create(inputStream, inputCharset),
                in::getInputStream);
    }","  public void test0()  throws Throwable  {
      StlBoundaryReadHandler3D stlBoundaryReadHandler3D0 = new StlBoundaryReadHandler3D();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StreamGeometryInput streamGeometryInput0 = new StreamGeometryInput(byteArrayInputStream0, (String) null);
      FacetDefinitionReader facetDefinitionReader0 = stlBoundaryReadHandler3D0.facetDefinitionReader(streamGeometryInput0);
}"
1145,"    public FacetDefinitionReader facetDefinitionReader(final GeometryInput in) {
        final Charset inputCharset = in.getCharset() != null ?
                in.getCharset() :
                defaultCharset;

        return GeometryIOUtils.tryApplyCloseable(
                inputStream -> StlFacetDefinitionReaders.create(inputStream, inputCharset),
                in::getInputStream);
    }","  public void test1()  throws Throwable  {
      StlBoundaryReadHandler3D stlBoundaryReadHandler3D0 = new StlBoundaryReadHandler3D();
      // Undeclared exception!
      try { 
        stlBoundaryReadHandler3D0.facetDefinitionReader((GeometryInput) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.StlBoundaryReadHandler3D"", e);
      }
  }"
1146,"    public FacetDefinitionReader facetDefinitionReader(final GeometryInput in) {
        final Charset inputCharset = in.getCharset() != null ?
                in.getCharset() :
                defaultCharset;

        return GeometryIOUtils.tryApplyCloseable(
                inputStream -> StlFacetDefinitionReaders.create(inputStream, inputCharset),
                in::getInputStream);
    }","  public void test2()  throws Throwable  {
      StlBoundaryReadHandler3D stlBoundaryReadHandler3D0 = new StlBoundaryReadHandler3D();
      URL uRL0 = MockURL.getFileExample();
      UrlGeometryInput urlGeometryInput0 = new UrlGeometryInput(uRL0);
      // Undeclared exception!
      try { 
        stlBoundaryReadHandler3D0.facetDefinitionReader(urlGeometryInput0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.net.URL"", e);
      }
  }"
1147,"    public FacetDefinitionReader facetDefinitionReader(final GeometryInput in) {
        final Charset inputCharset = in.getCharset() != null ?
                in.getCharset() :
                defaultCharset;

        return GeometryIOUtils.tryApplyCloseable(
                inputStream -> StlFacetDefinitionReaders.create(inputStream, inputCharset),
                in::getInputStream);
    }","  public void test3()  throws Throwable  {
      StlBoundaryReadHandler3D stlBoundaryReadHandler3D0 = new StlBoundaryReadHandler3D();
      MockFile mockFile0 = new MockFile("""", ""LH*i}ql6$"");
      Path path0 = mockFile0.toPath();
      FileGeometryInput fileGeometryInput0 = new FileGeometryInput(path0);
      // Undeclared exception!
      try { 
        stlBoundaryReadHandler3D0.facetDefinitionReader(fileGeometryInput0);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // NoSuchFileException: /LH*i}ql6$
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1148,"    public FacetDefinitionReader facetDefinitionReader(final GeometryInput in) {
        final Charset inputCharset = in.getCharset() != null ?
                in.getCharset() :
                defaultCharset;

        return GeometryIOUtils.tryApplyCloseable(
                inputStream -> StlFacetDefinitionReaders.create(inputStream, inputCharset),
                in::getInputStream);
    }","  public void test4()  throws Throwable  {
      StlBoundaryReadHandler3D stlBoundaryReadHandler3D0 = new StlBoundaryReadHandler3D();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Charset charset0 = stlBoundaryReadHandler3D0.getDefaultCharset();
      StreamGeometryInput streamGeometryInput0 = new StreamGeometryInput(sequenceInputStream0, """", charset0);
      // Undeclared exception!
      try { 
        stlBoundaryReadHandler3D0.facetDefinitionReader(streamGeometryInput0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Cannot determine STL format: attempted to read 5 bytes but found only -1 available
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1149,"    public Charset getDefaultCharset() {
        return defaultCharset;
    }","  public void test5()  throws Throwable  {
      StlBoundaryReadHandler3D stlBoundaryReadHandler3D0 = new StlBoundaryReadHandler3D();
      stlBoundaryReadHandler3D0.setDefaultCharset((Charset) null);
      Charset charset0 = stlBoundaryReadHandler3D0.getDefaultCharset();
}"
1150,"    public GeometryFormat getFormat() {
        return GeometryFormat3D.STL;
    }","  public void test6()  throws Throwable  {
      StlBoundaryReadHandler3D stlBoundaryReadHandler3D0 = new StlBoundaryReadHandler3D();
      GeometryFormat geometryFormat0 = stlBoundaryReadHandler3D0.getFormat();
}"
1151,"    public void writeTriangle(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        writeTriangle(p1, p2, p3, normal, 0);
    }","  public void test0()  throws Throwable  {
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      BinaryStlWriter binaryStlWriter0 = new BinaryStlWriter(filterOutputStream0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Vector3D vector3D0 = Vector3D.max((Vector3D) vector3D_Unit0, vector3DArray0);
      // Undeclared exception!
      try { 
        binaryStlWriter0.writeTriangle(vector3D0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, vector3D0, (-998));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1152,"    public void writeTriangle(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        writeTriangle(p1, p2, p3, normal, 0);
    }","  public void test1()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 1);
      BinaryStlWriter binaryStlWriter0 = new BinaryStlWriter(bufferedOutputStream0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D vector3D0 = Vector3D.ZERO;
      // Undeclared exception!
      try { 
        binaryStlWriter0.writeTriangle((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, vector3D0, vector3D0);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Pipe not connected
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1153,"    public void writeHeader(final byte[] headerContent, final int triangleCount) {
        writeHeader(headerContent, triangleCount, out);
    }","  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""Axis reference frame cannot be null"", true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      BinaryStlWriter binaryStlWriter0 = new BinaryStlWriter(filterOutputStream0);
      binaryStlWriter0.writeHeader(byteArray0, 152);
}"
1154,"    public void writeTriangle(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        writeTriangle(p1, p2, p3, normal, 0);
    }","  public void test3()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""(b"");
      BinaryStlWriter binaryStlWriter0 = new BinaryStlWriter(mockFileOutputStream0);
      binaryStlWriter0.close();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      // Undeclared exception!
      try { 
        binaryStlWriter0.writeTriangle((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, 50);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // MockIOException: null
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1155,"    public void writeTriangle(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        writeTriangle(p1, p2, p3, normal, 0);
    }","  public void test4()  throws Throwable  {
      BinaryStlWriter binaryStlWriter0 = new BinaryStlWriter((OutputStream) null);
      // Undeclared exception!
      try { 
        binaryStlWriter0.writeTriangle((Vector3D) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.StlUtils"", e);
      }
  }"
1156,"    public void writeHeader(final byte[] headerContent, final int triangleCount) {
        writeHeader(headerContent, triangleCount, out);
    }","  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        BinaryStlWriter.writeHeader(byteArray0, (int) (byte)0, (OutputStream) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.BinaryStlWriter"", e);
      }
  }"
1157,"    public void writeHeader(final byte[] headerContent, final int triangleCount) {
        writeHeader(headerContent, triangleCount, out);
    }","  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        BinaryStlWriter.writeHeader(byteArray0, 1061, (OutputStream) pipedOutputStream0);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Pipe not connected
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1158,"    public void writeHeader(final byte[] headerContent, final int triangleCount) {
        writeHeader(headerContent, triangleCount, out);
    }","  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MockFile mockFile0 = new MockFile(""(lx]"", ""&U</"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BinaryStlWriter binaryStlWriter0 = new BinaryStlWriter(mockFileOutputStream0);
      binaryStlWriter0.close();
      // Undeclared exception!
      try { 
        binaryStlWriter0.writeHeader(byteArray0, (-1));
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // MockIOException: null
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1159,"    public void close() {
        GeometryIOUtils.closeUnchecked(out);
    }","  public void test8()  throws Throwable  {
      BinaryStlWriter binaryStlWriter0 = new BinaryStlWriter((OutputStream) null);
      // Undeclared exception!
      try { 
        binaryStlWriter0.close();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1160,"    public void writeHeader(final byte[] headerContent, final int triangleCount) {
        writeHeader(headerContent, triangleCount, out);
    }","  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""Axis reference frame cannot be null"", true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      BinaryStlWriter.writeHeader(byteArray0, (int) (byte)1, (OutputStream) filterOutputStream0);
}"
1161,"    public void writeTriangle(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        writeTriangle(p1, p2, p3, normal, 0);
    }","  public void test10()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BinaryStlWriter binaryStlWriter0 = new BinaryStlWriter(byteArrayOutputStream0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      binaryStlWriter0.writeTriangle((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, 2587);
}"
1162,"    public void writeTriangle(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        writeTriangle(p1, p2, p3, normal, 0);
    }","  public void test11()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BinaryStlWriter binaryStlWriter0 = new BinaryStlWriter(byteArrayOutputStream0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      binaryStlWriter0.writeTriangle((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, 2587);
}"
1163,"    public void writeTriangle(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        writeTriangle(p1, p2, p3, normal, 0);
    }","  public void test12()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""Axis reference frame cannot be null"", true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      BinaryStlWriter binaryStlWriter0 = new BinaryStlWriter(filterOutputStream0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-5688.0), (double) (byte)0, 4102.5871591);
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit0.directionTo((Vector3D) vector3D_Unit1);
      Vector3D.Unit vector3D_Unit3 = vector3D_Unit0.orthogonal((Vector3D) vector3D_Unit2);
      Vector3D.Unit vector3D_Unit4 = vector3D_Unit3.orthogonal();
      binaryStlWriter0.writeTriangle((Vector3D) vector3D_Unit4, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit3, (Vector3D) vector3D_Unit2, 152);
}"
1164,"    public void writeHeader(final byte[] headerContent, final int triangleCount) {
        writeHeader(headerContent, triangleCount, out);
    }","  public void test13()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BinaryStlWriter.writeHeader((byte[]) null, (-80), (OutputStream) byteArrayOutputStream0);
}"
1165,"    public void writeHeader(final byte[] headerContent, final int triangleCount) {
        writeHeader(headerContent, triangleCount, out);
    }","  public void test14()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BinaryStlWriter.writeHeader((byte[]) null, (-80), (OutputStream) byteArrayOutputStream0);
}"
1166,"    public void writeTriangle(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Vector3D normal) {
        writeTriangle(p1, p2, p3, normal, 0);
    }","  public void test15()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""Axis reference frame cannot be null"", true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      BinaryStlWriter binaryStlWriter0 = new BinaryStlWriter(filterOutputStream0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-5688.0), (double) (byte)0, 4102.5871591);
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.orthogonal();
      binaryStlWriter0.writeTriangle((Vector3D) vector3D_Unit2, (Vector3D) vector3D_Unit1, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit1);
}"
1167,"    public void writeHeader(final byte[] headerContent, final int triangleCount) {
        writeHeader(headerContent, triangleCount, out);
    }","  public void test16()  throws Throwable  {
      BinaryStlWriter binaryStlWriter0 = new BinaryStlWriter((OutputStream) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        binaryStlWriter0.writeHeader(byteArray0, 2428);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.BinaryStlWriter"", e);
      }
  }"
1168,"    public BinaryStlFacetDefinition readFacet() {
        beginRead();

        BinaryStlFacetDefinition facet = null;

        if (trianglesRead < triangleTotal) {
            facet = readFacetInternal();

            ++trianglesRead;
        }

        return facet;
    }","  public void test0()  throws Throwable  {
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader((InputStream) null);
      // Undeclared exception!
      try { 
        binaryStlFacetDefinitionReader0.readFacet();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.BinaryStlFacetDefinitionReader"", e);
      }
  }"
1169,"    public BinaryStlFacetDefinition readFacet() {
        beginRead();

        BinaryStlFacetDefinition facet = null;

        if (trianglesRead < triangleTotal) {
            facet = readFacetInternal();

            ++trianglesRead;
        }

        return facet;
    }","  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 2502);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 3548);
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader(bufferedInputStream0);
      // Undeclared exception!
      try { 
        binaryStlFacetDefinitionReader0.readFacet();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Failed to read STL header: data not available
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1170,"    public BinaryStlFacetDefinition readFacet() {
        beginRead();

        BinaryStlFacetDefinition facet = null;

        if (trianglesRead < triangleTotal) {
            facet = readFacetInternal();

            ++trianglesRead;
        }

        return facet;
    }","  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1612), 80);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader(sequenceInputStream0);
      // Undeclared exception!
      try { 
        binaryStlFacetDefinitionReader0.readFacet();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.ByteArrayInputStream"", e);
      }
  }"
1171,"    public BinaryStlFacetDefinition readFacet() {
        beginRead();

        BinaryStlFacetDefinition facet = null;

        if (trianglesRead < triangleTotal) {
            facet = readFacetInternal();

            ++trianglesRead;
        }

        return facet;
    }","  public void test3()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader(pipedInputStream0);
      // Undeclared exception!
      try { 
        binaryStlFacetDefinitionReader0.readFacet();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Pipe not connected
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1172,"    public long getNumTriangles() {
        beginRead();
        return triangleTotal;
    }","  public void test4()  throws Throwable  {
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader((InputStream) null);
      // Undeclared exception!
      try { 
        binaryStlFacetDefinitionReader0.getNumTriangles();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.BinaryStlFacetDefinitionReader"", e);
      }
  }"
1173,"    public long getNumTriangles() {
        beginRead();
        return triangleTotal;
    }","  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        binaryStlFacetDefinitionReader0.getNumTriangles();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Failed to read STL header: data not available
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1174,"    public long getNumTriangles() {
        beginRead();
        return triangleTotal;
    }","  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1909), (byte)3);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader(dataInputStream0);
      // Undeclared exception!
      try { 
        binaryStlFacetDefinitionReader0.getNumTriangles();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.ByteArrayInputStream"", e);
      }
  }"
1175,"    public long getNumTriangles() {
        beginRead();
        return triangleTotal;
    }","  public void test7()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader(pipedInputStream0);
      // Undeclared exception!
      try { 
        binaryStlFacetDefinitionReader0.getNumTriangles();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Pipe not connected
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1176,"    public String getHeaderAsString() {
        return getHeaderAsString(StlConstants.DEFAULT_CHARSET);
    }","  public void test8()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader(mockFileInputStream0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        binaryStlFacetDefinitionReader0.getHeaderAsString(charset0);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // MockIOException: null
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1177,"    public String getHeaderAsString() {
        return getHeaderAsString(StlConstants.DEFAULT_CHARSET);
    }","  public void test9()  throws Throwable  {
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader((InputStream) null);
      // Undeclared exception!
      try { 
        binaryStlFacetDefinitionReader0.getHeaderAsString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.BinaryStlFacetDefinitionReader"", e);
      }
  }"
1178,"    public String getHeaderAsString() {
        return getHeaderAsString(StlConstants.DEFAULT_CHARSET);
    }","  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        binaryStlFacetDefinitionReader0.getHeaderAsString();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Failed to read STL header: data not available
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1179,"    public String getHeaderAsString() {
        return getHeaderAsString(StlConstants.DEFAULT_CHARSET);
    }","  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2115), 9);
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        binaryStlFacetDefinitionReader0.getHeaderAsString();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.ByteArrayInputStream"", e);
      }
  }"
1180,"    public String getHeaderAsString() {
        return getHeaderAsString(StlConstants.DEFAULT_CHARSET);
    }","  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader(pipedInputStream0);
      // Undeclared exception!
      try { 
        binaryStlFacetDefinitionReader0.getHeaderAsString();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Pipe not connected
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1181,"    public ByteBuffer getHeader() {
        beginRead();
        return ByteBuffer.wrap(header.array().clone());
    }","  public void test13()  throws Throwable  {
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader((InputStream) null);
      // Undeclared exception!
      try { 
        binaryStlFacetDefinitionReader0.getHeader();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.BinaryStlFacetDefinitionReader"", e);
      }
  }"
1182,"    public ByteBuffer getHeader() {
        beginRead();
        return ByteBuffer.wrap(header.array().clone());
    }","  public void test14()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader(dataInputStream0);
      // Undeclared exception!
      try { 
        binaryStlFacetDefinitionReader0.getHeader();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Failed to read STL header: data not available
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1183,"    public ByteBuffer getHeader() {
        beginRead();
        return ByteBuffer.wrap(header.array().clone());
    }","  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-883), 1);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader(sequenceInputStream0);
      // Undeclared exception!
      try { 
        binaryStlFacetDefinitionReader0.getHeader();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.ByteArrayInputStream"", e);
      }
  }"
1184,"    public ByteBuffer getHeader() {
        beginRead();
        return ByteBuffer.wrap(header.array().clone());
    }","  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader(dataInputStream0);
      // Undeclared exception!
      try { 
        binaryStlFacetDefinitionReader0.getHeader();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Pipe not connected
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1185,"    public void close() {
        GeometryIOUtils.closeUnchecked(in);
    }","  public void test17()  throws Throwable  {
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader((InputStream) null);
      // Undeclared exception!
      try { 
        binaryStlFacetDefinitionReader0.close();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1186,"    public String getHeaderAsString() {
        return getHeaderAsString(StlConstants.DEFAULT_CHARSET);
    }","  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[84];
      byteArray0[43] = (byte) (-43);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader(byteArrayInputStream0);
      Charset charset0 = Charset.defaultCharset();
      String string0 = binaryStlFacetDefinitionReader0.getHeaderAsString(charset0);
}"
1187,"    public String getHeaderAsString() {
        return getHeaderAsString(StlConstants.DEFAULT_CHARSET);
    }","  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[84];
      byteArray0[43] = (byte) (-43);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader(byteArrayInputStream0);
      Charset charset0 = Charset.defaultCharset();
      String string0 = binaryStlFacetDefinitionReader0.getHeaderAsString(charset0);
}"
1188,"    public ByteBuffer getHeader() {
        beginRead();
        return ByteBuffer.wrap(header.array().clone());
    }","  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[84];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader(byteArrayInputStream0);
      binaryStlFacetDefinitionReader0.getHeader();
}"
1189,"    public BinaryStlFacetDefinition readFacet() {
        beginRead();

        BinaryStlFacetDefinition facet = null;

        if (trianglesRead < triangleTotal) {
            facet = readFacetInternal();

            ++trianglesRead;
        }

        return facet;
    }","  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[84];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader(byteArrayInputStream0);
      binaryStlFacetDefinitionReader0.readFacet();
}"
1190,"    public String getHeaderAsString() {
        return getHeaderAsString(StlConstants.DEFAULT_CHARSET);
    }","  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[84];
      byteArray0[43] = (byte) (-43);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader(byteArrayInputStream0);
      String string0 = binaryStlFacetDefinitionReader0.getHeaderAsString();
}"
1191,"    public String getHeaderAsString() {
        return getHeaderAsString(StlConstants.DEFAULT_CHARSET);
    }","  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[84];
      byteArray0[43] = (byte) (-43);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader(byteArrayInputStream0);
      String string0 = binaryStlFacetDefinitionReader0.getHeaderAsString();
}"
1192,"    public void close() {
        GeometryIOUtils.closeUnchecked(in);
    }","  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[84];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader(byteArrayInputStream0);
      binaryStlFacetDefinitionReader0.close();
  }"
1193,"    public String getHeaderAsString() {
        return getHeaderAsString(StlConstants.DEFAULT_CHARSET);
    }","  public void test25()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader(sequenceInputStream0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        binaryStlFacetDefinitionReader0.getHeaderAsString(charset0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Failed to read STL header: data not available
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1194,"    public long getNumTriangles() {
        beginRead();
        return triangleTotal;
    }","  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[84];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader(byteArrayInputStream0);
      binaryStlFacetDefinitionReader0.getNumTriangles();
}"
1195,"    public String getHeaderAsString() {
        return getHeaderAsString(StlConstants.DEFAULT_CHARSET);
    }","  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[84];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader(byteArrayInputStream0);
      binaryStlFacetDefinitionReader0.getHeaderAsString();
      Charset charset0 = Charset.defaultCharset();
      String string0 = binaryStlFacetDefinitionReader0.getHeaderAsString(charset0);
}"
1196,"    public String getHeaderAsString() {
        return getHeaderAsString(StlConstants.DEFAULT_CHARSET);
    }","  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[84];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader(byteArrayInputStream0);
      binaryStlFacetDefinitionReader0.getHeaderAsString();
      Charset charset0 = Charset.defaultCharset();
      String string0 = binaryStlFacetDefinitionReader0.getHeaderAsString(charset0);
}"
1197,"    public String getHeaderAsString() {
        return getHeaderAsString(StlConstants.DEFAULT_CHARSET);
    }","  public void test29()  throws Throwable  {
      BinaryStlFacetDefinitionReader binaryStlFacetDefinitionReader0 = new BinaryStlFacetDefinitionReader((InputStream) null);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        binaryStlFacetDefinitionReader0.getHeaderAsString(charset0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.BinaryStlFacetDefinitionReader"", e);
      }
  }"
1198,"    public void writeFacets(final Stream<? extends FacetDefinition> facets, final GeometryOutput out) {

        // write the triangle data to a buffer and track how many we write
        int triangleCount = 0;
        final ByteArrayOutputStream triangleBuffer = new ByteArrayOutputStream(initialBufferSize);

        try (BinaryStlWriter dataWriter = new BinaryStlWriter(triangleBuffer)) {
            final Iterator<? extends FacetDefinition> it = facets.iterator();

            FacetDefinition facet;
            int attributeValue;

            while (it.hasNext()) {
                facet = it.next();
                attributeValue = getFacetAttributeValue(facet);

                for (final List<Vector3D> tri :
                    EuclideanUtils.convexPolygonToTriangleFan(facet.getVertices(), t -> t)) {

                    dataWriter.writeTriangle(
                            tri.get(0),
                            tri.get(1),
                            tri.get(2),
                            facet.getNormal(),
                            attributeValue);

                    ++triangleCount;
                }
            }
        }

        // write the header and copy the data
        writeWithHeader(triangleBuffer, triangleCount, out);
    }","  public void test0()  throws Throwable  {
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      Stream<SimpleFacetDefinition> stream0 = Stream.empty();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(47);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(dataOutputStream0);
      stlBoundaryWriteHandler3D0.writeFacets((Stream<? extends FacetDefinition>) stream0, (GeometryOutput) streamGeometryOutput0);
}"
1199,"    public int getinitialBufferSize() {
        return initialBufferSize;
    }","  public void test1()  throws Throwable  {
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      Stream<SimpleFacetDefinition> stream0 = Stream.empty();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(47);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(dataOutputStream0);
      stlBoundaryWriteHandler3D0.writeFacets((Stream<? extends FacetDefinition>) stream0, (GeometryOutput) streamGeometryOutput0);
}"
1200,"    public void writeFacets(final Stream<? extends FacetDefinition> facets, final GeometryOutput out) {

        // write the triangle data to a buffer and track how many we write
        int triangleCount = 0;
        final ByteArrayOutputStream triangleBuffer = new ByteArrayOutputStream(initialBufferSize);

        try (BinaryStlWriter dataWriter = new BinaryStlWriter(triangleBuffer)) {
            final Iterator<? extends FacetDefinition> it = facets.iterator();

            FacetDefinition facet;
            int attributeValue;

            while (it.hasNext()) {
                facet = it.next();
                attributeValue = getFacetAttributeValue(facet);

                for (final List<Vector3D> tri :
                    EuclideanUtils.convexPolygonToTriangleFan(facet.getVertices(), t -> t)) {

                    dataWriter.writeTriangle(
                            tri.get(0),
                            tri.get(1),
                            tri.get(2),
                            facet.getNormal(),
                            attributeValue);

                    ++triangleCount;
                }
            }
        }

        // write the header and copy the data
        writeWithHeader(triangleBuffer, triangleCount, out);
    }","  public void test2()  throws Throwable  {
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      Stream<BinaryStlFacetDefinition> stream0 = Stream.empty();
      FileGeometryOutput fileGeometryOutput0 = new FileGeometryOutput((Path) null);
      // Undeclared exception!
      try { 
        stlBoundaryWriteHandler3D0.writeFacets((Stream<? extends FacetDefinition>) stream0, (GeometryOutput) fileGeometryOutput0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.file.Files"", e);
      }
  }"
1201,"    public void writeFacets(final Stream<? extends FacetDefinition> facets, final GeometryOutput out) {

        // write the triangle data to a buffer and track how many we write
        int triangleCount = 0;
        final ByteArrayOutputStream triangleBuffer = new ByteArrayOutputStream(initialBufferSize);

        try (BinaryStlWriter dataWriter = new BinaryStlWriter(triangleBuffer)) {
            final Iterator<? extends FacetDefinition> it = facets.iterator();

            FacetDefinition facet;
            int attributeValue;

            while (it.hasNext()) {
                facet = it.next();
                attributeValue = getFacetAttributeValue(facet);

                for (final List<Vector3D> tri :
                    EuclideanUtils.convexPolygonToTriangleFan(facet.getVertices(), t -> t)) {

                    dataWriter.writeTriangle(
                            tri.get(0),
                            tri.get(1),
                            tri.get(2),
                            facet.getNormal(),
                            attributeValue);

                    ++triangleCount;
                }
            }
        }

        // write the header and copy the data
        writeWithHeader(triangleBuffer, triangleCount, out);
    }","  public void test3()  throws Throwable  {
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      Stream<SimpleFacetDefinition> stream0 = Stream.empty();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(92);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(dataOutputStream0);
      Function<Object, DoubleStream> function0 = (Function<Object, DoubleStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      stream0.flatMapToDouble(function0);
      // Undeclared exception!
      try { 
        stlBoundaryWriteHandler3D0.writeFacets((Stream<? extends FacetDefinition>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // stream has already been operated upon or closed
         //
         verifyException(""java.util.stream.AbstractPipeline"", e);
      }
  }"
1202,"    public void writeFacets(final Stream<? extends FacetDefinition> facets, final GeometryOutput out) {

        // write the triangle data to a buffer and track how many we write
        int triangleCount = 0;
        final ByteArrayOutputStream triangleBuffer = new ByteArrayOutputStream(initialBufferSize);

        try (BinaryStlWriter dataWriter = new BinaryStlWriter(triangleBuffer)) {
            final Iterator<? extends FacetDefinition> it = facets.iterator();

            FacetDefinition facet;
            int attributeValue;

            while (it.hasNext()) {
                facet = it.next();
                attributeValue = getFacetAttributeValue(facet);

                for (final List<Vector3D> tri :
                    EuclideanUtils.convexPolygonToTriangleFan(facet.getVertices(), t -> t)) {

                    dataWriter.writeTriangle(
                            tri.get(0),
                            tri.get(1),
                            tri.get(2),
                            facet.getNormal(),
                            attributeValue);

                    ++triangleCount;
                }
            }
        }

        // write the header and copy the data
        writeWithHeader(triangleBuffer, triangleCount, out);
    }","  public void test4()  throws Throwable  {
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      Stream<BinaryStlFacetDefinition> stream0 = Stream.empty();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(pipedOutputStream0, (String) null);
      // Undeclared exception!
      try { 
        stlBoundaryWriteHandler3D0.writeFacets((Stream<? extends FacetDefinition>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Pipe not connected
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1203,"    public void write(final BoundarySource3D src, final GeometryOutput out) {
        // handle cases where we know the number of triangles to be written up front
        // and do not need to buffer the content
        if (src instanceof TriangleMesh) {
            writeTriangleMesh((TriangleMesh) src, out);
        } else {
            // unknown number of triangles; proceed with a buffered write
            super.write(src, out);
        }
    }","  public void test5()  throws Throwable  {
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      MockFile mockFile0 = new MockFile(""<.!*lrHn"");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      FileGeometryOutput fileGeometryOutput0 = new FileGeometryOutput(path0, charset0);
      // Undeclared exception!
      try { 
        stlBoundaryWriteHandler3D0.write((BoundarySource3D) null, (GeometryOutput) fileGeometryOutput0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.AbstractBoundaryWriteHandler3D"", e);
      }
  }"
1204,"    public void write(final BoundarySource3D src, final GeometryOutput out) {
        // handle cases where we know the number of triangles to be written up front
        // and do not need to buffer the content
        if (src instanceof TriangleMesh) {
            writeTriangleMesh((TriangleMesh) src, out);
        } else {
            // unknown number of triangles; proceed with a buffered write
            super.write(src, out);
        }
    }","  public void test6()  throws Throwable  {
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.full();
      // Undeclared exception!
      try { 
        stlBoundaryWriteHandler3D0.write((BoundarySource3D) regionBSPTree3D0, (GeometryOutput) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.StlBoundaryWriteHandler3D"", e);
      }
  }"
1205,"    public void write(final BoundarySource3D src, final GeometryOutput out) {
        // handle cases where we know the number of triangles to be written up front
        // and do not need to buffer the content
        if (src instanceof TriangleMesh) {
            writeTriangleMesh((TriangleMesh) src, out);
        } else {
            // unknown number of triangles; proceed with a buffered write
            super.write(src, out);
        }
    }","  public void test7()  throws Throwable  {
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.empty();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(pipedOutputStream0, """");
      stlBoundaryWriteHandler3D0.write((BoundarySource3D) regionBSPTree3D0, (GeometryOutput) streamGeometryOutput0);
      // Undeclared exception!
      try { 
        stlBoundaryWriteHandler3D0.write((BoundarySource3D) regionBSPTree3D0, (GeometryOutput) streamGeometryOutput0);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Pipe closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1206,"    public void write(final BoundarySource3D src, final GeometryOutput out) {
        // handle cases where we know the number of triangles to be written up front
        // and do not need to buffer the content
        if (src instanceof TriangleMesh) {
            writeTriangleMesh((TriangleMesh) src, out);
        } else {
            // unknown number of triangles; proceed with a buffered write
            super.write(src, out);
        }
    }","  public void test8()  throws Throwable  {
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      Plane[] planeArray0 = new Plane[0];
      ConvexVolume convexVolume0 = ConvexVolume.fromBounds(planeArray0);
      Stream<PlaneConvexSubset> stream0 = convexVolume0.boundaryStream();
      FileGeometryOutput fileGeometryOutput0 = new FileGeometryOutput((Path) null);
      // Undeclared exception!
      try { 
        stlBoundaryWriteHandler3D0.write((Stream<? extends PlaneConvexSubset>) stream0, (GeometryOutput) fileGeometryOutput0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.file.Files"", e);
      }
  }"
1207,"    public void write(final BoundarySource3D src, final GeometryOutput out) {
        // handle cases where we know the number of triangles to be written up front
        // and do not need to buffer the content
        if (src instanceof TriangleMesh) {
            writeTriangleMesh((TriangleMesh) src, out);
        } else {
            // unknown number of triangles; proceed with a buffered write
            super.write(src, out);
        }
    }","  public void test9()  throws Throwable  {
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      Stream<PlaneConvexSubset> stream0 = Stream.empty();
      Supplier<ConvexVolume> supplier0 = (Supplier<ConvexVolume>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConsumer<ConvexVolume, PlaneConvexSubset> biConsumer0 = (BiConsumer<ConvexVolume, PlaneConvexSubset>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Comparator<ConvexVolume> comparator0 = (Comparator<ConvexVolume>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      BinaryOperator<ConvexVolume> binaryOperator0 = BinaryOperator.minBy((Comparator<? super ConvexVolume>) comparator0);
      Collector.Characteristics[] collector_CharacteristicsArray0 = (Collector.Characteristics[]) Array.newInstance(Collector.Characteristics.class, 0);
      Collector<PlaneConvexSubset, ConvexVolume, ConvexVolume> collector0 = Collector.of(supplier0, biConsumer0, binaryOperator0, (Collector.Characteristics[]) collector_CharacteristicsArray0);
      stream0.collect((Collector<? super PlaneConvexSubset, ConvexVolume, ConvexVolume>) collector0);
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput((OutputStream) null, ""Ip-${"");
      // Undeclared exception!
      try { 
        stlBoundaryWriteHandler3D0.write((Stream<? extends PlaneConvexSubset>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // stream has already been operated upon or closed
         //
         verifyException(""java.util.stream.AbstractPipeline"", e);
      }
  }"
1208,"    public void write(final BoundarySource3D src, final GeometryOutput out) {
        // handle cases where we know the number of triangles to be written up front
        // and do not need to buffer the content
        if (src instanceof TriangleMesh) {
            writeTriangleMesh((TriangleMesh) src, out);
        } else {
            // unknown number of triangles; proceed with a buffered write
            super.write(src, out);
        }
    }","  public void test10()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""    "");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(dataOutputStream0);
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      ArrayList<PlaneConvexSubset> arrayList0 = new ArrayList<PlaneConvexSubset>();
      BoundaryList3D boundaryList3D0 = new BoundaryList3D(arrayList0);
      Stream<PlaneConvexSubset> stream0 = boundaryList3D0.boundaryStream();
      // Undeclared exception!
      try { 
        stlBoundaryWriteHandler3D0.write((Stream<? extends PlaneConvexSubset>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // MockIOException: Error in writing to file
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1209,"    public int getinitialBufferSize() {
        return initialBufferSize;
    }","  public void test11()  throws Throwable  {
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      MockPrintStream mockPrintStream0 = new MockPrintStream(""gkh{a"");
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockPrintStream0, ""gkh{a"");
      Stack<PlaneConvexSubset> stack0 = new Stack<PlaneConvexSubset>();
      BoundaryList3D boundaryList3D0 = new BoundaryList3D(stack0);
      Stream<PlaneConvexSubset> stream0 = boundaryList3D0.boundaryStream();
      stlBoundaryWriteHandler3D0.write((Stream<? extends PlaneConvexSubset>) stream0, (GeometryOutput) streamGeometryOutput0);
}"
1210,"    public void writeFacets(final Stream<? extends FacetDefinition> facets, final GeometryOutput out) {

        // write the triangle data to a buffer and track how many we write
        int triangleCount = 0;
        final ByteArrayOutputStream triangleBuffer = new ByteArrayOutputStream(initialBufferSize);

        try (BinaryStlWriter dataWriter = new BinaryStlWriter(triangleBuffer)) {
            final Iterator<? extends FacetDefinition> it = facets.iterator();

            FacetDefinition facet;
            int attributeValue;

            while (it.hasNext()) {
                facet = it.next();
                attributeValue = getFacetAttributeValue(facet);

                for (final List<Vector3D> tri :
                    EuclideanUtils.convexPolygonToTriangleFan(facet.getVertices(), t -> t)) {

                    dataWriter.writeTriangle(
                            tri.get(0),
                            tri.get(1),
                            tri.get(2),
                            facet.getNormal(),
                            attributeValue);

                    ++triangleCount;
                }
            }
        }

        // write the header and copy the data
        writeWithHeader(triangleBuffer, triangleCount, out);
    }","  public void test12()  throws Throwable  {
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      Stream<BinaryStlFacetDefinition> stream0 = Stream.empty();
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput((OutputStream) null);
      // Undeclared exception!
      try { 
        stlBoundaryWriteHandler3D0.writeFacets((Stream<? extends FacetDefinition>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.BinaryStlWriter"", e);
      }
  }"
1211,"    public void writeFacets(final Stream<? extends FacetDefinition> facets, final GeometryOutput out) {

        // write the triangle data to a buffer and track how many we write
        int triangleCount = 0;
        final ByteArrayOutputStream triangleBuffer = new ByteArrayOutputStream(initialBufferSize);

        try (BinaryStlWriter dataWriter = new BinaryStlWriter(triangleBuffer)) {
            final Iterator<? extends FacetDefinition> it = facets.iterator();

            FacetDefinition facet;
            int attributeValue;

            while (it.hasNext()) {
                facet = it.next();
                attributeValue = getFacetAttributeValue(facet);

                for (final List<Vector3D> tri :
                    EuclideanUtils.convexPolygonToTriangleFan(facet.getVertices(), t -> t)) {

                    dataWriter.writeTriangle(
                            tri.get(0),
                            tri.get(1),
                            tri.get(2),
                            facet.getNormal(),
                            attributeValue);

                    ++triangleCount;
                }
            }
        }

        // write the header and copy the data
        writeWithHeader(triangleBuffer, triangleCount, out);
    }","  public void test13()  throws Throwable  {
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      SimpleFacetDefinition simpleFacetDefinition0 = mock(SimpleFacetDefinition.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(simpleFacetDefinition0).getVertices();
      Supplier<SimpleFacetDefinition> supplier0 = (Supplier<SimpleFacetDefinition>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(simpleFacetDefinition0).when(supplier0).get();
      Stream<SimpleFacetDefinition> stream0 = Stream.generate(supplier0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        stlBoundaryWriteHandler3D0.writeFacets((Stream<? extends FacetDefinition>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.EuclideanUtils"", e);
      }
  }"
1212,"    public void write(final BoundarySource3D src, final GeometryOutput out) {
        // handle cases where we know the number of triangles to be written up front
        // and do not need to buffer the content
        if (src instanceof TriangleMesh) {
            writeTriangleMesh((TriangleMesh) src, out);
        } else {
            // unknown number of triangles; proceed with a buffered write
            super.write(src, out);
        }
    }","  public void test14()  throws Throwable  {
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      Supplier<PlaneConvexSubset> supplier0 = (Supplier<PlaneConvexSubset>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      Stream<PlaneConvexSubset> stream0 = Stream.generate(supplier0);
      FileGeometryOutput fileGeometryOutput0 = new FileGeometryOutput((Path) null);
      // Undeclared exception!
      try { 
        stlBoundaryWriteHandler3D0.write((Stream<? extends PlaneConvexSubset>) stream0, (GeometryOutput) fileGeometryOutput0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.StlBoundaryWriteHandler3D"", e);
      }
  }"
1213,"    public void setInitialBufferSize(final int initialBufferSize) {
        if (initialBufferSize < 1) {
            throw new IllegalArgumentException(""Buffer size must be greater than 0"");
        }
        this.initialBufferSize = initialBufferSize;
    }","  public void test15()  throws Throwable  {
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      // Undeclared exception!
      try { 
        stlBoundaryWriteHandler3D0.setInitialBufferSize((-2207));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Buffer size must be greater than 0
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.StlBoundaryWriteHandler3D"", e);
      }
  }"
1214,"    public int getinitialBufferSize() {
        return initialBufferSize;
    }","  public void test16()  throws Throwable  {
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      stlBoundaryWriteHandler3D0.setInitialBufferSize(492);
}"
1215,"    public int getinitialBufferSize() {
        return initialBufferSize;
    }","  public void test17()  throws Throwable  {
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      stlBoundaryWriteHandler3D0.getFormat();
}"
1216,"    public int getinitialBufferSize() {
        return initialBufferSize;
    }","  public void test18()  throws Throwable  {
      StlBoundaryWriteHandler3D stlBoundaryWriteHandler3D0 = new StlBoundaryWriteHandler3D();
      int int0 = stlBoundaryWriteHandler3D0.getinitialBufferSize();
}"
1217,"    public static FacetDefinitionReader create(final InputStream in, final Charset charset) {
        final Charset inputCharset = charset != null ?
                charset :
                StlConstants.DEFAULT_CHARSET;

        final byte[] testBytes = StlConstants.SOLID_START_KEYWORD.getBytes(inputCharset);
        final byte[] actualBytes = new byte[testBytes.length];

        final int read = GeometryIOUtils.applyAsIntUnchecked(in::read, actualBytes);
        if (read < actualBytes.length) {
            throw GeometryIOUtils.parseError(MessageFormat.format(
                    ""Cannot determine STL format: attempted to read {0} bytes but found only {1} available"",
                    actualBytes.length, read));
        }

        // ""unread"" the test bytes so that the created readers can start from the
        // beginning of the content
        final PushbackInputStream pushbackInput = new PushbackInputStream(in, actualBytes.length);
        GeometryIOUtils.acceptUnchecked(pushbackInput::unread, actualBytes);

        if (Arrays.equals(testBytes, actualBytes)) {
            // this is a text file
            return new TextStlFacetDefinitionReader(
                    new BufferedReader(new InputStreamReader(pushbackInput, inputCharset)));
        } else {
            // this is a binary file
            return new BinaryStlFacetDefinitionReader(pushbackInput);
        }
    }","  public void test0()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        StlFacetDefinitionReaders.create((InputStream) null, charset0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.stl.StlFacetDefinitionReaders"", e);
      }
  }"
1218,"    public static FacetDefinitionReader create(final InputStream in, final Charset charset) {
        final Charset inputCharset = charset != null ?
                charset :
                StlConstants.DEFAULT_CHARSET;

        final byte[] testBytes = StlConstants.SOLID_START_KEYWORD.getBytes(inputCharset);
        final byte[] actualBytes = new byte[testBytes.length];

        final int read = GeometryIOUtils.applyAsIntUnchecked(in::read, actualBytes);
        if (read < actualBytes.length) {
            throw GeometryIOUtils.parseError(MessageFormat.format(
                    ""Cannot determine STL format: attempted to read {0} bytes but found only {1} available"",
                    actualBytes.length, read));
        }

        // ""unread"" the test bytes so that the created readers can start from the
        // beginning of the content
        final PushbackInputStream pushbackInput = new PushbackInputStream(in, actualBytes.length);
        GeometryIOUtils.acceptUnchecked(pushbackInput::unread, actualBytes);

        if (Arrays.equals(testBytes, actualBytes)) {
            // this is a text file
            return new TextStlFacetDefinitionReader(
                    new BufferedReader(new InputStreamReader(pushbackInput, inputCharset)));
        } else {
            // this is a binary file
            return new BinaryStlFacetDefinitionReader(pushbackInput);
        }
    }","  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1396), (byte)1);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        StlFacetDefinitionReaders.create(sequenceInputStream0, charset0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }"
1219,"    public static FacetDefinitionReader create(final InputStream in, final Charset charset) {
        final Charset inputCharset = charset != null ?
                charset :
                StlConstants.DEFAULT_CHARSET;

        final byte[] testBytes = StlConstants.SOLID_START_KEYWORD.getBytes(inputCharset);
        final byte[] actualBytes = new byte[testBytes.length];

        final int read = GeometryIOUtils.applyAsIntUnchecked(in::read, actualBytes);
        if (read < actualBytes.length) {
            throw GeometryIOUtils.parseError(MessageFormat.format(
                    ""Cannot determine STL format: attempted to read {0} bytes but found only {1} available"",
                    actualBytes.length, read));
        }

        // ""unread"" the test bytes so that the created readers can start from the
        // beginning of the content
        final PushbackInputStream pushbackInput = new PushbackInputStream(in, actualBytes.length);
        GeometryIOUtils.acceptUnchecked(pushbackInput::unread, actualBytes);

        if (Arrays.equals(testBytes, actualBytes)) {
            // this is a text file
            return new TextStlFacetDefinitionReader(
                    new BufferedReader(new InputStreamReader(pushbackInput, inputCharset)));
        } else {
            // this is a binary file
            return new BinaryStlFacetDefinitionReader(pushbackInput);
        }
    }","  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      FacetDefinitionReader facetDefinitionReader0 = StlFacetDefinitionReaders.create(byteArrayInputStream0, charset0);
}"
1220,"    public static FacetDefinitionReader create(final InputStream in, final Charset charset) {
        final Charset inputCharset = charset != null ?
                charset :
                StlConstants.DEFAULT_CHARSET;

        final byte[] testBytes = StlConstants.SOLID_START_KEYWORD.getBytes(inputCharset);
        final byte[] actualBytes = new byte[testBytes.length];

        final int read = GeometryIOUtils.applyAsIntUnchecked(in::read, actualBytes);
        if (read < actualBytes.length) {
            throw GeometryIOUtils.parseError(MessageFormat.format(
                    ""Cannot determine STL format: attempted to read {0} bytes but found only {1} available"",
                    actualBytes.length, read));
        }

        // ""unread"" the test bytes so that the created readers can start from the
        // beginning of the content
        final PushbackInputStream pushbackInput = new PushbackInputStream(in, actualBytes.length);
        GeometryIOUtils.acceptUnchecked(pushbackInput::unread, actualBytes);

        if (Arrays.equals(testBytes, actualBytes)) {
            // this is a text file
            return new TextStlFacetDefinitionReader(
                    new BufferedReader(new InputStreamReader(pushbackInput, inputCharset)));
        } else {
            // this is a binary file
            return new BinaryStlFacetDefinitionReader(pushbackInput);
        }
    }","  public void test3()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, dataInputStream0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        StlFacetDefinitionReaders.create(sequenceInputStream0, charset0);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // MockIOException: null
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1221,"    public static FacetDefinitionReader create(final InputStream in, final Charset charset) {
        final Charset inputCharset = charset != null ?
                charset :
                StlConstants.DEFAULT_CHARSET;

        final byte[] testBytes = StlConstants.SOLID_START_KEYWORD.getBytes(inputCharset);
        final byte[] actualBytes = new byte[testBytes.length];

        final int read = GeometryIOUtils.applyAsIntUnchecked(in::read, actualBytes);
        if (read < actualBytes.length) {
            throw GeometryIOUtils.parseError(MessageFormat.format(
                    ""Cannot determine STL format: attempted to read {0} bytes but found only {1} available"",
                    actualBytes.length, read));
        }

        // ""unread"" the test bytes so that the created readers can start from the
        // beginning of the content
        final PushbackInputStream pushbackInput = new PushbackInputStream(in, actualBytes.length);
        GeometryIOUtils.acceptUnchecked(pushbackInput::unread, actualBytes);

        if (Arrays.equals(testBytes, actualBytes)) {
            // this is a text file
            return new TextStlFacetDefinitionReader(
                    new BufferedReader(new InputStreamReader(pushbackInput, inputCharset)));
        } else {
            // this is a binary file
            return new BinaryStlFacetDefinitionReader(pushbackInput);
        }
    }","  public void test4()  throws Throwable  {
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        StlFacetDefinitionReaders.create(pushbackInputStream0, (Charset) null);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Cannot determine STL format: attempted to read 5 bytes but found only -1 available
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1222,"    public String getVertexSeparator() {
        return vertexSeparator;
    }","  public void test0()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
}"
1223,"    public String getVertexComponentSeparator() {
        return vertexComponentSeparator;
    }","  public void test1()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.setVertexSeparator((String) null);
      textBoundaryWriteHandler3D0.getVertexSeparator();
}"
1224,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test2()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.setVertexSeparator((String) null);
      textBoundaryWriteHandler3D0.getVertexSeparator();
}"
1225,"    public String getVertexSeparator() {
        return vertexSeparator;
    }","  public void test3()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
}"
1226,"    public String getVertexComponentSeparator() {
        return vertexComponentSeparator;
    }","  public void test4()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.setVertexSeparator("""");
      textBoundaryWriteHandler3D0.getVertexSeparator();
}"
1227,"    public String getVertexComponentSeparator() {
        return vertexComponentSeparator;
    }","  public void test5()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
}"
1228,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test6()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.setVertexComponentSeparator((String) null);
      textBoundaryWriteHandler3D0.getVertexComponentSeparator();
}"
1229,"    public String getVertexSeparator() {
        return vertexSeparator;
    }","  public void test7()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.setVertexComponentSeparator((String) null);
      textBoundaryWriteHandler3D0.getVertexComponentSeparator();
}"
1230,"    public String getVertexComponentSeparator() {
        return vertexComponentSeparator;
    }","  public void test8()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
}"
1231,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test9()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.setVertexComponentSeparator("""");
      textBoundaryWriteHandler3D0.getVertexComponentSeparator();
}"
1232,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test10()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.setFacetVertexCount(326);
      int int0 = textBoundaryWriteHandler3D0.getFacetVertexCount();
}"
1233,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test11()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      Charset charset0 = textBoundaryWriteHandler3D0.getDefaultCharset();
      textBoundaryWriteHandler3D0.setFacetVertexCount(326);
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      GeometryOutput geometryOutput0 = mock(GeometryOutput.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, charset0).when(geometryOutput0).getCharset();
      doReturn(outputStream0).when(geometryOutput0).getOutputStream();
      textBoundaryWriteHandler3D0.getFacetDefinitionWriter(geometryOutput0);
}"
1234,"    public String getVertexComponentSeparator() {
        return vertexComponentSeparator;
    }","  public void test12()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      String string0 = textBoundaryWriteHandler3D0.getVertexComponentSeparator();
}"
1235,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test13()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      String string0 = textBoundaryWriteHandler3D0.getVertexComponentSeparator();
}"
1236,"    public String getVertexSeparator() {
        return vertexSeparator;
    }","  public void test14()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      String string0 = textBoundaryWriteHandler3D0.getVertexComponentSeparator();
}"
1237,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test15()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.getFormat();
}"
1238,"    public String getVertexSeparator() {
        return vertexSeparator;
    }","  public void test16()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.getFormat();
}"
1239,"    public String getVertexComponentSeparator() {
        return vertexComponentSeparator;
    }","  public void test17()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.getFormat();
}"
1240,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test18()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
}"
1241,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test19()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.setFacetVertexCount(0);
      int int0 = textBoundaryWriteHandler3D0.getFacetVertexCount();
}"
1242,"    public String getVertexSeparator() {
        return vertexSeparator;
    }","  public void test20()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      int int0 = textBoundaryWriteHandler3D0.getFacetVertexCount();
}"
1243,"    public String getVertexComponentSeparator() {
        return vertexComponentSeparator;
    }","  public void test21()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      int int0 = textBoundaryWriteHandler3D0.getFacetVertexCount();
}"
1244,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test22()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      int int0 = textBoundaryWriteHandler3D0.getFacetVertexCount();
}"
1245,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test23()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      String string0 = textBoundaryWriteHandler3D0.getVertexSeparator();
}"
1246,"    public String getVertexSeparator() {
        return vertexSeparator;
    }","  public void test24()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      String string0 = textBoundaryWriteHandler3D0.getVertexSeparator();
}"
1247,"    public String getVertexComponentSeparator() {
        return vertexComponentSeparator;
    }","  public void test25()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      String string0 = textBoundaryWriteHandler3D0.getVertexSeparator();
}"
1248,"    protected TextFacetDefinitionWriter getFacetDefinitionWriter(final GeometryOutput out) {
        final TextFacetDefinitionWriter facetWriter = super.getFacetDefinitionWriter(out);

        facetWriter.setVertexComponentSeparator(vertexComponentSeparator);
        facetWriter.setVertexSeparator(vertexSeparator);
        facetWriter.setFacetVertexCount(facetVertexCount);

        return facetWriter;
    }","  public void test26()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      Charset charset0 = textBoundaryWriteHandler3D0.getDefaultCharset();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      GeometryOutput geometryOutput0 = mock(GeometryOutput.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, (Charset) null).when(geometryOutput0).getCharset();
      doReturn(outputStream0).when(geometryOutput0).getOutputStream();
      // Undeclared exception!
      try { 
        textBoundaryWriteHandler3D0.getFacetDefinitionWriter(geometryOutput0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException(""java.io.OutputStreamWriter"", e);
      }
  }"
1249,"    public GeometryFormat getFormat() {
        return GeometryFormat3D.CSV;
    }","  public void test0()  throws Throwable  {
      CsvBoundaryReadHandler3D csvBoundaryReadHandler3D0 = new CsvBoundaryReadHandler3D();
      GeometryFormat geometryFormat0 = csvBoundaryReadHandler3D0.getFormat();
}"
1250,"    public String getCommentToken() {
        return commentToken;
    }","  public void test0()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""PTk}c"");
      TextFacetDefinitionReader textFacetDefinitionReader0 = new TextFacetDefinitionReader(stringReader0, (String) null);
      String string0 = textFacetDefinitionReader0.getCommentToken();
}"
1251,"    public FacetDefinition readFacet() {
        discardNonDataLines();
        if (parser.hasMoreCharacters()) {
            try {
                return readFacetInternal();
            } finally {
                // advance to the next line even if parsing failed for the
                // current line
                parser.discardLine();
            }
        }
        return null;
    }","  public void test1()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      stringReader0.close();
      TextFacetDefinitionReader textFacetDefinitionReader0 = new TextFacetDefinitionReader(stringReader0, ""f&PE{'GW|wf|f"");
      // Undeclared exception!
      try { 
        textFacetDefinitionReader0.readFacet();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1252,"    public TextFacetDefinitionReader(final Reader reader) {
        this(reader, DEFAULT_COMMENT_TOKEN);
    }","  public void test2()  throws Throwable  {
      TextFacetDefinitionReader textFacetDefinitionReader0 = null;
      try {
        textFacetDefinitionReader0 = new TextFacetDefinitionReader((Reader) null, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Reader cannot be null
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
1253,"    public TextFacetDefinitionReader(final Reader reader) {
        this(reader, DEFAULT_COMMENT_TOKEN);
    }","  public void test3()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Maximum string length cannot be less than zero; was "");
      TextFacetDefinitionReader textFacetDefinitionReader0 = null;
      try {
        textFacetDefinitionReader0 = new TextFacetDefinitionReader(stringReader0, ""Maximum string length cannot be less than zero; was "");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Comment token cannot contain whitespace; was [Maximum string length cannot be less than zero; was ]
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionReader"", e);
      }
  }"
1254,"    public TextFacetDefinitionReader(final Reader reader) {
        this(reader, DEFAULT_COMMENT_TOKEN);
    }","  public void test4()  throws Throwable  {
      TextFacetDefinitionReader textFacetDefinitionReader0 = null;
      try {
        textFacetDefinitionReader0 = new TextFacetDefinitionReader((Reader) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Reader cannot be null
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
1255,"    public String getCommentToken() {
        return commentToken;
    }","  public void test5()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      TextFacetDefinitionReader textFacetDefinitionReader0 = new TextFacetDefinitionReader(stringReader0, """");
      String string0 = textFacetDefinitionReader0.getCommentToken();
}"
1256,"    public void setCommentToken(final String commentToken) {
        setCommentTokenInternal(commentToken);
    }","  public void test6()  throws Throwable  {
      StringReader stringReader0 = new StringReader("" `^$HZ"");
      TextFacetDefinitionReader textFacetDefinitionReader0 = new TextFacetDefinitionReader(stringReader0);
      // Undeclared exception!
      try { 
        textFacetDefinitionReader0.setCommentToken("" `^$HZ"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Comment token cannot contain whitespace; was [ `^$HZ]
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionReader"", e);
      }
  }"
1257,"    public String getCommentToken() {
        return commentToken;
    }","  public void test7()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Comment token cannot contain whitespace; was ["");
      TextFacetDefinitionReader textFacetDefinitionReader0 = new TextFacetDefinitionReader(stringReader0);
      textFacetDefinitionReader0.setCommentToken((String) null);
}"
1258,"    public FacetDefinition readFacet() {
        discardNonDataLines();
        if (parser.hasMoreCharacters()) {
            try {
                return readFacetInternal();
            } finally {
                // advance to the next line even if parsing failed for the
                // current line
                parser.discardLine();
            }
        }
        return null;
    }","  public void test8()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""-2#G!B:"");
      TextFacetDefinitionReader textFacetDefinitionReader0 = new TextFacetDefinitionReader(stringReader0);
      // Undeclared exception!
      try { 
        textFacetDefinitionReader0.readFacet();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 8: expected double but found end of content
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1259,"    public FacetDefinition readFacet() {
        discardNonDataLines();
        if (parser.hasMoreCharacters()) {
            try {
                return readFacetInternal();
            } finally {
                // advance to the next line even if parsing failed for the
                // current line
                parser.discardLine();
            }
        }
        return null;
    }","  public void test9()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""5&.2):2F"");
      TextFacetDefinitionReader textFacetDefinitionReader0 = new TextFacetDefinitionReader(stringReader0);
      // Undeclared exception!
      try { 
        textFacetDefinitionReader0.readFacet();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 10: expected double but found end of content
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1260,"    public FacetDefinition readFacet() {
        discardNonDataLines();
        if (parser.hasMoreCharacters()) {
            try {
                return readFacetInternal();
            } finally {
                // advance to the next line even if parsing failed for the
                // current line
                parser.discardLine();
            }
        }
        return null;
    }","  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""O]"");
      TextFacetDefinitionReader textFacetDefinitionReader0 = new TextFacetDefinitionReader(stringReader0, ""O]"");
      FacetDefinition facetDefinition0 = textFacetDefinitionReader0.readFacet();
}"
1261,"    public String getCommentToken() {
        return commentToken;
    }","  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("" `^$HZ"");
      TextFacetDefinitionReader textFacetDefinitionReader0 = new TextFacetDefinitionReader(stringReader0);
      textFacetDefinitionReader0.close();
}"
1262,"    public FacetDefinition readFacet() {
        discardNonDataLines();
        if (parser.hasMoreCharacters()) {
            try {
                return readFacetInternal();
            } finally {
                // advance to the next line even if parsing failed for the
                // current line
                parser.discardLine();
            }
        }
        return null;
    }","  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""#"");
      TextFacetDefinitionReader textFacetDefinitionReader0 = new TextFacetDefinitionReader(stringReader0, ""#"");
      textFacetDefinitionReader0.setCommentToken("""");
      // Undeclared exception!
      try { 
        textFacetDefinitionReader0.readFacet();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: expected double but found empty token followed by [#]
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1263,"    public String getCommentToken() {
        return commentToken;
    }","  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""O]"");
      TextFacetDefinitionReader textFacetDefinitionReader0 = new TextFacetDefinitionReader(stringReader0, ""O]"");
      String string0 = textFacetDefinitionReader0.getCommentToken();
}"
1264,"    public void write(final BoundarySource3D src) {
        try (Stream<PlaneConvexSubset> stream = src.boundaryStream()) {
            final Iterator<PlaneConvexSubset> it = stream.iterator();
            while (it.hasNext()) {
                write(it.next());
            }
        }
    }","  public void test0()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(stringWriter0);
      LinkedList<Vector3D> linkedList0 = new LinkedList<Vector3D>();
      AxisSequence axisSequence0 = AxisSequence.ZYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      linkedList0.add(vector3D0);
      linkedList0.add(vector3D0);
      linkedList0.add(vector3D0);
      linkedList0.add(vector3D0);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.write((List<Vector3D>) linkedList0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Writer requires 3 vertices per facet; found 4
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter"", e);
      }
  }"
1265,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test1()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(mockPrintWriter0);
}"
1266,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test2()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(mockPrintWriter0);
      textFacetDefinitionWriter0.setFacetVertexCount((-3857));
}"
1267,"    public void write(final BoundarySource3D src) {
        try (Stream<PlaneConvexSubset> stream = src.boundaryStream()) {
            final Iterator<PlaneConvexSubset> it = stream.iterator();
            while (it.hasNext()) {
                write(it.next());
            }
        }
    }","  public void test3()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(stringWriter0);
      LinkedList<Vector3D> linkedList0 = new LinkedList<Vector3D>();
      AxisSequence axisSequence0 = AxisSequence.ZYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      linkedList0.add(vector3D0);
      linkedList0.add(vector3D0);
      linkedList0.add(vector3D0);
      SimpleFacetDefinition simpleFacetDefinition0 = new SimpleFacetDefinition(linkedList0, vector3D0);
      textFacetDefinitionWriter0.write((FacetDefinition) simpleFacetDefinition0);
}"
1268,"    public String getVertexSeparator() {
        return vertexSeparator;
    }","  public void test4()  throws Throwable  {
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter((Writer) null);
}"
1269,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test5()  throws Throwable  {
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter((Writer) null);
      textFacetDefinitionWriter0.setVertexSeparator((String) null);
      String string0 = textFacetDefinitionWriter0.getVertexSeparator();
}"
1270,"    public String getCommentToken() {
        return commentToken;
    }","  public void test6()  throws Throwable  {
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter((Writer) null);
      textFacetDefinitionWriter0.setVertexSeparator((String) null);
      String string0 = textFacetDefinitionWriter0.getVertexSeparator();
}"
1271,"    public String getVertexSeparator() {
        return vertexSeparator;
    }","  public void test7()  throws Throwable  {
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter((Writer) null);
      textFacetDefinitionWriter0.setVertexSeparator((String) null);
      String string0 = textFacetDefinitionWriter0.getVertexSeparator();
}"
1272,"    public String getVertexComponentSeparator() {
        return vertexComponentSeparator;
    }","  public void test8()  throws Throwable  {
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter((Writer) null);
      textFacetDefinitionWriter0.setVertexSeparator((String) null);
      String string0 = textFacetDefinitionWriter0.getVertexSeparator();
}"
1273,"    public String getVertexSeparator() {
        return vertexSeparator;
    }","  public void test9()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(3549);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
}"
1274,"    public String getVertexSeparator() {
        return vertexSeparator;
    }","  public void test10()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(3549);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      textFacetDefinitionWriter0.setVertexSeparator("""");
      textFacetDefinitionWriter0.getVertexSeparator();
}"
1275,"    public String getVertexComponentSeparator() {
        return vertexComponentSeparator;
    }","  public void test11()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(stringWriter0);
}"
1276,"    public String getVertexSeparator() {
        return vertexSeparator;
    }","  public void test12()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(stringWriter0);
      textFacetDefinitionWriter0.setVertexComponentSeparator((String) null);
      String string0 = textFacetDefinitionWriter0.getVertexComponentSeparator();
}"
1277,"    public String getVertexComponentSeparator() {
        return vertexComponentSeparator;
    }","  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(stringWriter0);
      textFacetDefinitionWriter0.setVertexComponentSeparator((String) null);
      String string0 = textFacetDefinitionWriter0.getVertexComponentSeparator();
}"
1278,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test14()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(stringWriter0);
      textFacetDefinitionWriter0.setVertexComponentSeparator((String) null);
      String string0 = textFacetDefinitionWriter0.getVertexComponentSeparator();
}"
1279,"    public String getVertexComponentSeparator() {
        return vertexComponentSeparator;
    }","  public void test15()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2128);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(stringWriter0);
}"
1280,"    public String getVertexComponentSeparator() {
        return vertexComponentSeparator;
    }","  public void test16()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2128);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(stringWriter0);
      textFacetDefinitionWriter0.setVertexComponentSeparator("""");
      textFacetDefinitionWriter0.getVertexComponentSeparator();
}"
1281,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test17()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""My]Bb"");
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(mockPrintWriter0);
      int int0 = textFacetDefinitionWriter0.getFacetVertexCount();
}"
1282,"    public String getCommentToken() {
        return commentToken;
    }","  public void test18()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""My]Bb"");
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(mockPrintWriter0);
      int int0 = textFacetDefinitionWriter0.getFacetVertexCount();
}"
1283,"    public String getVertexSeparator() {
        return vertexSeparator;
    }","  public void test19()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""My]Bb"");
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(mockPrintWriter0);
      int int0 = textFacetDefinitionWriter0.getFacetVertexCount();
}"
1284,"    public String getVertexComponentSeparator() {
        return vertexComponentSeparator;
    }","  public void test20()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""My]Bb"");
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(mockPrintWriter0);
      int int0 = textFacetDefinitionWriter0.getFacetVertexCount();
}"
1285,"    public String getVertexComponentSeparator() {
        return vertexComponentSeparator;
    }","  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""lA^<7Gz&^T8 "", ""lA^<7Gz&^T8 "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(mockPrintWriter0);
      String string0 = textFacetDefinitionWriter0.getCommentToken();
}"
1286,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""lA^<7Gz&^T8 "", ""lA^<7Gz&^T8 "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(mockPrintWriter0);
      String string0 = textFacetDefinitionWriter0.getCommentToken();
}"
1287,"    public String getCommentToken() {
        return commentToken;
    }","  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""lA^<7Gz&^T8 "", ""lA^<7Gz&^T8 "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(mockPrintWriter0);
      String string0 = textFacetDefinitionWriter0.getCommentToken();
}"
1288,"    public String getVertexSeparator() {
        return vertexSeparator;
    }","  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""lA^<7Gz&^T8 "", ""lA^<7Gz&^T8 "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(mockPrintWriter0);
      String string0 = textFacetDefinitionWriter0.getCommentToken();
}"
1289,"    public void writeComment(final String comment) {
        if (commentToken == null) {
            throw new IllegalStateException(""Cannot write comment: no comment token configured"");
        }

        if (comment != null) {
            for (final String line : comment.split(""\\R"")) {
                write(commentToken + line);
                writeNewLine();
            }
        }
    }","  public void test25()  throws Throwable  {
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter((Writer) null);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.writeComment(""WGp^3}-h2Ow@Q$k"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.utils.AbstractTextFormatWriter"", e);
      }
  }"
1290,"    public void writeBlankLine() {
        writeNewLine();
    }","  public void test26()  throws Throwable  {
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat((Writer) null);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.writeBlankLine();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.utils.AbstractTextFormatWriter"", e);
      }
  }"
1291,"    public void write(final BoundarySource3D src) {
        try (Stream<PlaneConvexSubset> stream = src.boundaryStream()) {
            final Iterator<PlaneConvexSubset> it = stream.iterator();
            while (it.hasNext()) {
                write(it.next());
            }
        }
    }","  public void test27()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(stringWriter0);
      LinkedList<Vector3D> linkedList0 = new LinkedList<Vector3D>();
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      linkedList0.add(vector3D0);
      linkedList0.add(vector3D0);
      linkedList0.add(vector3D0);
      textFacetDefinitionWriter0.setFacetVertexCount(4);
      SimpleFacetDefinition simpleFacetDefinition0 = new SimpleFacetDefinition(linkedList0);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.write((FacetDefinition) simpleFacetDefinition0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Writer requires 4 vertices per facet; found 3
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter"", e);
      }
  }"
1292,"    public void write(final BoundarySource3D src) {
        try (Stream<PlaneConvexSubset> stream = src.boundaryStream()) {
            final Iterator<PlaneConvexSubset> it = stream.iterator();
            while (it.hasNext()) {
                write(it.next());
            }
        }
    }","  public void test28()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""'Uu|}`~"");
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.write((PlaneConvexSubset) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter"", e);
      }
  }"
1293,"    public void write(final BoundarySource3D src) {
        try (Stream<PlaneConvexSubset> stream = src.boundaryStream()) {
            final Iterator<PlaneConvexSubset> it = stream.iterator();
            while (it.hasNext()) {
                write(it.next());
            }
        }
    }","  public void test29()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.write((BoundarySource3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter"", e);
      }
  }"
1294,"    public void write(final BoundarySource3D src) {
        try (Stream<PlaneConvexSubset> stream = src.boundaryStream()) {
            final Iterator<PlaneConvexSubset> it = stream.iterator();
            while (it.hasNext()) {
                write(it.next());
            }
        }
    }","  public void test30()  throws Throwable  {
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter((Writer) null);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.write((List<Vector3D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter"", e);
      }
  }"
1295,"    public String getCommentToken() {
        return commentToken;
    }","  public void test31()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(mockPrintWriter0);
}"
1296,"    public String getVertexComponentSeparator() {
        return vertexComponentSeparator;
    }","  public void test32()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(mockPrintWriter0);
      textFacetDefinitionWriter0.setCommentToken((String) null);
}"
1297,"    public String getVertexSeparator() {
        return vertexSeparator;
    }","  public void test33()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(mockPrintWriter0);
      textFacetDefinitionWriter0.setCommentToken((String) null);
}"
1298,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test34()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(mockPrintWriter0);
      textFacetDefinitionWriter0.setCommentToken((String) null);
}"
1299,"    public void write(final BoundarySource3D src) {
        try (Stream<PlaneConvexSubset> stream = src.boundaryStream()) {
            final Iterator<PlaneConvexSubset> it = stream.iterator();
            while (it.hasNext()) {
                write(it.next());
            }
        }
    }","  public void test35()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      ArrayList<Vector3D> arrayList0 = new ArrayList<Vector3D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      arrayList0.add((Vector3D) vector3D_Unit0);
      arrayList0.add((Vector3D) vector3D_Unit0);
      arrayList0.add((Vector3D) vector3D_Unit0);
      textFacetDefinitionWriter0.write((List<Vector3D>) arrayList0);
}"
1300,"    public void write(final BoundarySource3D src) {
        try (Stream<PlaneConvexSubset> stream = src.boundaryStream()) {
            final Iterator<PlaneConvexSubset> it = stream.iterator();
            while (it.hasNext()) {
                write(it.next());
            }
        }
    }","  public void test36()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(3549);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      ArrayList<Vector3D> arrayList0 = new ArrayList<Vector3D>();
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.write((List<Vector3D>) arrayList0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // At least 3 vertices are required per facet; found 0
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter"", e);
      }
  }"
1301,"    public void write(final BoundarySource3D src) {
        try (Stream<PlaneConvexSubset> stream = src.boundaryStream()) {
            final Iterator<PlaneConvexSubset> it = stream.iterator();
            while (it.hasNext()) {
                write(it.next());
            }
        }
    }","  public void test37()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""; "");
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(mockPrintWriter0);
      Stack<PlaneConvexSubset> stack0 = new Stack<PlaneConvexSubset>();
      stack0.add((PlaneConvexSubset) null);
      BoundarySource3D boundarySource3D0 = BoundarySource3D.of((Collection<PlaneConvexSubset>) stack0);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.write(boundarySource3D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter"", e);
      }
  }"
1302,"    public String getCommentToken() {
        return commentToken;
    }","  public void test38()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.empty();
      textFacetDefinitionWriter0.write((BoundarySource3D) regionBSPTree3D0);
}"
1303,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test39()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.empty();
      textFacetDefinitionWriter0.write((BoundarySource3D) regionBSPTree3D0);
}"
1304,"    public String getVertexComponentSeparator() {
        return vertexComponentSeparator;
    }","  public void test40()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.empty();
      textFacetDefinitionWriter0.write((BoundarySource3D) regionBSPTree3D0);
}"
1305,"    public String getVertexSeparator() {
        return vertexSeparator;
    }","  public void test41()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.empty();
      textFacetDefinitionWriter0.write((BoundarySource3D) regionBSPTree3D0);
}"
1306,"    public String getVertexComponentSeparator() {
        return vertexComponentSeparator;
    }","  public void test42()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      textFacetDefinitionWriter0.writeComment((String) null);
}"
1307,"    public String getVertexSeparator() {
        return vertexSeparator;
    }","  public void test43()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      textFacetDefinitionWriter0.writeComment((String) null);
}"
1308,"    public String getCommentToken() {
        return commentToken;
    }","  public void test44()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      textFacetDefinitionWriter0.writeComment((String) null);
}"
1309,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test45()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      textFacetDefinitionWriter0.writeComment((String) null);
}"
1310,"    public void writeComment(final String comment) {
        if (commentToken == null) {
            throw new IllegalStateException(""Cannot write comment: no comment token configured"");
        }

        if (comment != null) {
            for (final String line : comment.split(""\\R"")) {
                write(commentToken + line);
                writeNewLine();
            }
        }
    }","  public void test46()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(stringWriter0);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.writeComment("","");
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Cannot write comment: no comment token configured
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter"", e);
      }
  }"
1311,"    public void setCommentToken(final String commentToken) {
        if (commentToken != null) {
            if (commentToken.isEmpty()) {
                throw new IllegalArgumentException(""Comment token cannot be empty"");
            } else if (Character.isWhitespace(commentToken.charAt(0))) {
                throw new IllegalArgumentException(""Comment token cannot begin with whitespace"");
            }

        }

        this.commentToken = commentToken;
    }","  public void test47()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""T:3X[~ixi?}@baY}Wl"");
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.setCommentToken("" "");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Comment token cannot begin with whitespace
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter"", e);
      }
  }"
1312,"    public void setCommentToken(final String commentToken) {
        if (commentToken != null) {
            if (commentToken.isEmpty()) {
                throw new IllegalArgumentException(""Comment token cannot be empty"");
            } else if (Character.isWhitespace(commentToken.charAt(0))) {
                throw new IllegalArgumentException(""Comment token cannot begin with whitespace"");
            }

        }

        this.commentToken = commentToken;
    }","  public void test48()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.setCommentToken("""");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Comment token cannot be empty
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter"", e);
      }
  }"
1313,"    public void writeComment(final String comment) {
        if (commentToken == null) {
            throw new IllegalStateException(""Cannot write comment: no comment token configured"");
        }

        if (comment != null) {
            for (final String line : comment.split(""\\R"")) {
                write(commentToken + line);
                writeNewLine();
            }
        }
    }","  public void test49()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(stringWriter0);
      textFacetDefinitionWriter0.setCommentToken(""mAeTB4_Aa2q"");
      textFacetDefinitionWriter0.writeComment(""mAeTB4_Aa2q"");
}"
1314,"    public void setFacetVertexCount(final int vertexCount) {
        if (vertexCount > -1 &&  vertexCount < 3) {
            throw new IllegalArgumentException(""Facet vertex count must be less than 0 or greater than 2; was "" +
                    vertexCount);
        }

        this.facetVertexCount = Math.max(-1, vertexCount);
    }","  public void test50()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(stringWriter0);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.setFacetVertexCount(1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Facet vertex count must be less than 0 or greater than 2; was 1
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter"", e);
      }
  }"
1315,"    public String getCommentToken() {
        return commentToken;
    }","  public void test51()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      textFacetDefinitionWriter0.setFacetVertexCount((-1));
}"
1316,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test52()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      textFacetDefinitionWriter0.setFacetVertexCount((-1));
}"
1317,"    public String getVertexComponentSeparator() {
        return vertexComponentSeparator;
    }","  public void test53()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      textFacetDefinitionWriter0.setFacetVertexCount((-1));
}"
1318,"    public String getVertexSeparator() {
        return vertexSeparator;
    }","  public void test54()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      textFacetDefinitionWriter0.setFacetVertexCount((-1));
}"
1319,"    public String getVertexComponentSeparator() {
        return vertexComponentSeparator;
    }","  public void test55()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      String string0 = textFacetDefinitionWriter0.getVertexSeparator();
}"
1320,"    public String getVertexSeparator() {
        return vertexSeparator;
    }","  public void test56()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      String string0 = textFacetDefinitionWriter0.getVertexSeparator();
}"
1321,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test57()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      String string0 = textFacetDefinitionWriter0.getVertexSeparator();
}"
1322,"    public String getCommentToken() {
        return commentToken;
    }","  public void test58()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      String string0 = textFacetDefinitionWriter0.getVertexSeparator();
}"
1323,"    public String getCommentToken() {
        return commentToken;
    }","  public void test59()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      String string0 = textFacetDefinitionWriter0.getCommentToken();
}"
1324,"    public String getVertexSeparator() {
        return vertexSeparator;
    }","  public void test60()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      String string0 = textFacetDefinitionWriter0.getCommentToken();
}"
1325,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test61()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      String string0 = textFacetDefinitionWriter0.getCommentToken();
}"
1326,"    public String getVertexComponentSeparator() {
        return vertexComponentSeparator;
    }","  public void test62()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      String string0 = textFacetDefinitionWriter0.getCommentToken();
}"
1327,"    public void write(final BoundarySource3D src) {
        try (Stream<PlaneConvexSubset> stream = src.boundaryStream()) {
            final Iterator<PlaneConvexSubset> it = stream.iterator();
            while (it.hasNext()) {
                write(it.next());
            }
        }
    }","  public void test63()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""SFHQN#Bk[nCZ)"");
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        textFacetDefinitionWriter0.write((FacetDefinition) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter"", e);
      }
  }"
1328,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test64()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(mockPrintWriter0);
      String string0 = textFacetDefinitionWriter0.getVertexComponentSeparator();
}"
1329,"    public String getVertexSeparator() {
        return vertexSeparator;
    }","  public void test65()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(mockPrintWriter0);
      String string0 = textFacetDefinitionWriter0.getVertexComponentSeparator();
}"
1330,"    public String getVertexComponentSeparator() {
        return vertexComponentSeparator;
    }","  public void test66()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(mockPrintWriter0);
      String string0 = textFacetDefinitionWriter0.getVertexComponentSeparator();
}"
1331,"    public String getCommentToken() {
        return commentToken;
    }","  public void test67()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(mockPrintWriter0);
      String string0 = textFacetDefinitionWriter0.getVertexComponentSeparator();
}"
1332,"    public String getVertexComponentSeparator() {
        return vertexComponentSeparator;
    }","  public void test68()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      textFacetDefinitionWriter0.writeBlankLine();
}"
1333,"    public String getVertexSeparator() {
        return vertexSeparator;
    }","  public void test69()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      textFacetDefinitionWriter0.writeBlankLine();
}"
1334,"    public String getCommentToken() {
        return commentToken;
    }","  public void test70()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      textFacetDefinitionWriter0.writeBlankLine();
}"
1335,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test71()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = new TextFacetDefinitionWriter(stringWriter0);
      textFacetDefinitionWriter0.writeBlankLine();
}"
1336,"    public void write(final BoundarySource3D src) {
        try (Stream<PlaneConvexSubset> stream = src.boundaryStream()) {
            final Iterator<PlaneConvexSubset> it = stream.iterator();
            while (it.hasNext()) {
                write(it.next());
            }
        }
    }","  public void test72()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(stringWriter0);
      LinkedList<Vector3D> linkedList0 = new LinkedList<Vector3D>();
      AxisSequence axisSequence0 = AxisSequence.XZX;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      linkedList0.add(vector3D0);
      linkedList0.add(vector3D0);
      linkedList0.add(vector3D0);
      textFacetDefinitionWriter0.write((List<Vector3D>) linkedList0);
}"
1337,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test73()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(stringWriter0);
      LinkedList<Vector3D> linkedList0 = new LinkedList<Vector3D>();
      AxisSequence axisSequence0 = AxisSequence.XZX;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      linkedList0.add(vector3D0);
      linkedList0.add(vector3D0);
      linkedList0.add(vector3D0);
      textFacetDefinitionWriter0.write((List<Vector3D>) linkedList0);
}"
1338,"    public String getVertexComponentSeparator() {
        return vertexComponentSeparator;
    }","  public void test74()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""; "");
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(mockPrintWriter0);
      int int0 = textFacetDefinitionWriter0.getFacetVertexCount();
}"
1339,"    public int getFacetVertexCount() {
        return facetVertexCount;
    }","  public void test75()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""; "");
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(mockPrintWriter0);
      int int0 = textFacetDefinitionWriter0.getFacetVertexCount();
}"
1340,"    public String getVertexSeparator() {
        return vertexSeparator;
    }","  public void test76()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""; "");
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = TextFacetDefinitionWriter.csvFormat(mockPrintWriter0);
      int int0 = textFacetDefinitionWriter0.getFacetVertexCount();
}"
1341,"    protected TextFacetDefinitionWriter getFacetDefinitionWriter(final GeometryOutput out) {
        final TextFacetDefinitionWriter facetWriter = super.getFacetDefinitionWriter(out);

        facetWriter.setVertexComponentSeparator(TextFacetDefinitionWriter.CSV_SEPARATOR);
        facetWriter.setVertexSeparator(TextFacetDefinitionWriter.CSV_SEPARATOR);
        facetWriter.setFacetVertexCount(TextFacetDefinitionWriter.CSV_FACET_VERTEX_COUNT);

        return facetWriter;
    }","  public void test0()  throws Throwable  {
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      Charset charset0 = csvBoundaryWriteHandler3D0.getDefaultCharset();
      FileGeometryOutput fileGeometryOutput0 = new FileGeometryOutput((Path) null, charset0);
      // Undeclared exception!
      try { 
        csvBoundaryWriteHandler3D0.getFacetDefinitionWriter(fileGeometryOutput0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.file.Files"", e);
      }
  }"
1342,"    protected TextFacetDefinitionWriter getFacetDefinitionWriter(final GeometryOutput out) {
        final TextFacetDefinitionWriter facetWriter = super.getFacetDefinitionWriter(out);

        facetWriter.setVertexComponentSeparator(TextFacetDefinitionWriter.CSV_SEPARATOR);
        facetWriter.setVertexSeparator(TextFacetDefinitionWriter.CSV_SEPARATOR);
        facetWriter.setFacetVertexCount(TextFacetDefinitionWriter.CSV_FACET_VERTEX_COUNT);

        return facetWriter;
    }","  public void test1()  throws Throwable  {
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(outputStream0, ""*7c!Qn"");
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = csvBoundaryWriteHandler3D0.getFacetDefinitionWriter(streamGeometryOutput0);
}"
1343,"    protected TextFacetDefinitionWriter getFacetDefinitionWriter(final GeometryOutput out) {
        final TextFacetDefinitionWriter facetWriter = super.getFacetDefinitionWriter(out);

        facetWriter.setVertexComponentSeparator(TextFacetDefinitionWriter.CSV_SEPARATOR);
        facetWriter.setVertexSeparator(TextFacetDefinitionWriter.CSV_SEPARATOR);
        facetWriter.setFacetVertexCount(TextFacetDefinitionWriter.CSV_FACET_VERTEX_COUNT);

        return facetWriter;
    }","  public void test2()  throws Throwable  {
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(outputStream0, ""*7c!Qn"");
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = csvBoundaryWriteHandler3D0.getFacetDefinitionWriter(streamGeometryOutput0);
}"
1344,"    protected TextFacetDefinitionWriter getFacetDefinitionWriter(final GeometryOutput out) {
        final TextFacetDefinitionWriter facetWriter = super.getFacetDefinitionWriter(out);

        facetWriter.setVertexComponentSeparator(TextFacetDefinitionWriter.CSV_SEPARATOR);
        facetWriter.setVertexSeparator(TextFacetDefinitionWriter.CSV_SEPARATOR);
        facetWriter.setFacetVertexCount(TextFacetDefinitionWriter.CSV_FACET_VERTEX_COUNT);

        return facetWriter;
    }","  public void test3()  throws Throwable  {
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(outputStream0, ""*7c!Qn"");
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = csvBoundaryWriteHandler3D0.getFacetDefinitionWriter(streamGeometryOutput0);
}"
1345,"    public GeometryFormat getFormat() {
        return GeometryFormat3D.CSV;
    }","  public void test4()  throws Throwable  {
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      GeometryFormat geometryFormat0 = csvBoundaryWriteHandler3D0.getFormat();
}"
1346,"    public FacetDefinitionReader facetDefinitionReader(final GeometryInput in) {
        return new TextFacetDefinitionReader(GeometryIOUtils.createBufferedReader(in, defaultCharset));
    }","  public void test0()  throws Throwable  {
      TextBoundaryReadHandler3D textBoundaryReadHandler3D0 = new TextBoundaryReadHandler3D();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      StreamGeometryInput streamGeometryInput0 = new StreamGeometryInput(bufferedInputStream0);
      TextFacetDefinitionReader textFacetDefinitionReader0 = (TextFacetDefinitionReader)textBoundaryReadHandler3D0.facetDefinitionReader(streamGeometryInput0);
}"
1347,"    public FacetDefinitionReader facetDefinitionReader(final GeometryInput in) {
        return new TextFacetDefinitionReader(GeometryIOUtils.createBufferedReader(in, defaultCharset));
    }","  public void test1()  throws Throwable  {
      TextBoundaryReadHandler3D textBoundaryReadHandler3D0 = new TextBoundaryReadHandler3D();
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(path0).toString();
      doReturn((FileSystem) null).when(path0).getFileSystem();
      Charset charset0 = textBoundaryReadHandler3D0.getDefaultCharset();
      FileGeometryInput fileGeometryInput0 = new FileGeometryInput(path0, charset0);
      // Undeclared exception!
      try { 
        textBoundaryReadHandler3D0.facetDefinitionReader(fileGeometryInput0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.file.Files"", e);
      }
  }"
1348,"    public FacetDefinitionReader facetDefinitionReader(final GeometryInput in) {
        return new TextFacetDefinitionReader(GeometryIOUtils.createBufferedReader(in, defaultCharset));
    }","  public void test2()  throws Throwable  {
      TextBoundaryReadHandler3D textBoundaryReadHandler3D0 = new TextBoundaryReadHandler3D();
      MockFile mockFile0 = new MockFile(""M!FY{^_qKsQLq@6"");
      Path path0 = mockFile0.toPath();
      Charset charset0 = textBoundaryReadHandler3D0.getDefaultCharset();
      FileGeometryInput fileGeometryInput0 = new FileGeometryInput(path0, charset0);
      // Undeclared exception!
      try { 
        textBoundaryReadHandler3D0.facetDefinitionReader(fileGeometryInput0);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // NoSuchFileException: M!FY{^_qKsQLq@6
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1349,"    public GeometryFormat getFormat() {
        return GeometryFormat3D.TXT;
    }","  public void test3()  throws Throwable  {
      TextBoundaryReadHandler3D textBoundaryReadHandler3D0 = new TextBoundaryReadHandler3D();
      GeometryFormat geometryFormat0 = textBoundaryReadHandler3D0.getFormat();
}"
1350,"    public Charset getDefaultCharset() {
        return defaultCharset;
    }","  public void test4()  throws Throwable  {
      TextBoundaryReadHandler3D textBoundaryReadHandler3D0 = new TextBoundaryReadHandler3D();
      textBoundaryReadHandler3D0.setDefaultCharset((Charset) null);
      Charset charset0 = textBoundaryReadHandler3D0.getDefaultCharset();
}"
1351,"    public String getLineSeparator() {
        return lineSeparator;
    }","  public void test0()  throws Throwable  {
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      csvBoundaryWriteHandler3D0.setLineSeparator((String) null);
      String string0 = csvBoundaryWriteHandler3D0.getLineSeparator();
}"
1352,"    public String getLineSeparator() {
        return lineSeparator;
    }","  public void test1()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.setLineSeparator("""");
      String string0 = textBoundaryWriteHandler3D0.getLineSeparator();
}"
1353,"    public String getLineSeparator() {
        return lineSeparator;
    }","  public void test2()  throws Throwable  {
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""PLUS"", true);
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockFileOutputStream0);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = csvBoundaryWriteHandler3D0.getFacetDefinitionWriter(streamGeometryOutput0);
}"
1354,"    public String getLineSeparator() {
        return lineSeparator;
    }","  public void test3()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      MockPrintStream mockPrintStream0 = new MockPrintStream(""$B(.:#)M,?=>pDO"");
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockPrintStream0);
      TextFacetDefinitionWriter textFacetDefinitionWriter0 = textBoundaryWriteHandler3D0.getFacetDefinitionWriter(streamGeometryOutput0);
}"
1355,"    public String getLineSeparator() {
        return lineSeparator;
    }","  public void test4()  throws Throwable  {
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      csvBoundaryWriteHandler3D0.setDoubleFormat((DoubleFunction<String>) null);
      csvBoundaryWriteHandler3D0.getDoubleFormat();
}"
1356,"    public String getLineSeparator() {
        return lineSeparator;
    }","  public void test5()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.setDefaultCharset((Charset) null);
      textBoundaryWriteHandler3D0.getDefaultCharset();
}"
1357,"    public void writeFacets(final Stream<? extends FacetDefinition> facets, final GeometryOutput out) {
        try (TextFacetDefinitionWriter writer = getFacetDefinitionWriter(out)) {
            final Iterator<? extends FacetDefinition> it = facets.iterator();
            while (it.hasNext()) {
                writer.write(it.next());
            }
        }
    }","  public void test6()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      Supplier<SimpleFacetDefinition> supplier0 = (Supplier<SimpleFacetDefinition>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Stream<SimpleFacetDefinition> stream0 = Stream.generate(supplier0);
      // Undeclared exception!
      try { 
        textBoundaryWriteHandler3D0.writeFacets(stream0, (GeometryOutput) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1358,"    public void writeFacets(final Stream<? extends FacetDefinition> facets, final GeometryOutput out) {
        try (TextFacetDefinitionWriter writer = getFacetDefinitionWriter(out)) {
            final Iterator<? extends FacetDefinition> it = facets.iterator();
            while (it.hasNext()) {
                writer.write(it.next());
            }
        }
    }","  public void test7()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      SimpleFacetDefinition simpleFacetDefinition0 = mock(SimpleFacetDefinition.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(simpleFacetDefinition0).getVertices();
      Supplier<SimpleFacetDefinition> supplier0 = (Supplier<SimpleFacetDefinition>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(simpleFacetDefinition0).when(supplier0).get();
      Stream<SimpleFacetDefinition> stream0 = Stream.generate(supplier0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Charset charset0 = Charset.defaultCharset();
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(pipedOutputStream0, ""H!u8)_sGrde(q[4jSP2"", charset0);
      // Undeclared exception!
      try { 
        textBoundaryWriteHandler3D0.writeFacets((Stream<? extends FacetDefinition>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter"", e);
      }
  }"
1359,"    public void write(final Stream<? extends PlaneConvexSubset> boundaries, final GeometryOutput out) {
        try (TextFacetDefinitionWriter writer = getFacetDefinitionWriter(out)) {
            final Iterator<? extends PlaneConvexSubset> it = boundaries.iterator();
            while (it.hasNext()) {
                writer.write(it.next());
            }
        }
    }","  public void test8()  throws Throwable  {
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      PriorityQueue<Plane> priorityQueue0 = new PriorityQueue<Plane>();
      ConvexVolume convexVolume0 = ConvexVolume.fromBounds((Iterable<? extends Plane>) priorityQueue0);
      Stream<PlaneConvexSubset> stream0 = convexVolume0.boundaryStream();
      // Undeclared exception!
      try { 
        csvBoundaryWriteHandler3D0.write(stream0, (GeometryOutput) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1360,"    public void write(final Stream<? extends PlaneConvexSubset> boundaries, final GeometryOutput out) {
        try (TextFacetDefinitionWriter writer = getFacetDefinitionWriter(out)) {
            final Iterator<? extends PlaneConvexSubset> it = boundaries.iterator();
            while (it.hasNext()) {
                writer.write(it.next());
            }
        }
    }","  public void test9()  throws Throwable  {
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""PLUS"");
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockFileOutputStream0);
      Stream<PlaneConvexSubset> stream0 = Stream.empty();
      csvBoundaryWriteHandler3D0.write((Stream<? extends PlaneConvexSubset>) stream0, (GeometryOutput) streamGeometryOutput0);
      // Undeclared exception!
      try { 
        csvBoundaryWriteHandler3D0.write((Stream<? extends PlaneConvexSubset>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // stream has already been operated upon or closed
         //
         verifyException(""java.util.stream.AbstractPipeline"", e);
      }
  }"
1361,"    public void write(final Stream<? extends PlaneConvexSubset> boundaries, final GeometryOutput out) {
        try (TextFacetDefinitionWriter writer = getFacetDefinitionWriter(out)) {
            final Iterator<? extends PlaneConvexSubset> it = boundaries.iterator();
            while (it.hasNext()) {
                writer.write(it.next());
            }
        }
    }","  public void test10()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.setFacetVertexCount(2);
      LinkedList<PlaneConvexSubset> linkedList0 = new LinkedList<PlaneConvexSubset>();
      BoundaryList3D boundaryList3D0 = new BoundaryList3D(linkedList0);
      Stream<PlaneConvexSubset> stream0 = boundaryList3D0.boundaryStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(""$LA?<^t"");
      Charset charset0 = textBoundaryWriteHandler3D0.getDefaultCharset();
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockPrintStream0, """", charset0);
      // Undeclared exception!
      try { 
        textBoundaryWriteHandler3D0.write((Stream<? extends PlaneConvexSubset>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Facet vertex count must be less than 0 or greater than 2; was 2
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter"", e);
      }
  }"
1362,"    public void write(final Stream<? extends PlaneConvexSubset> boundaries, final GeometryOutput out) {
        try (TextFacetDefinitionWriter writer = getFacetDefinitionWriter(out)) {
            final Iterator<? extends PlaneConvexSubset> it = boundaries.iterator();
            while (it.hasNext()) {
                writer.write(it.next());
            }
        }
    }","  public void test11()  throws Throwable  {
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""PLUS"", true);
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockFileOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Stream<PlaneConvexSubset> stream0 = Stream.empty();
      // Undeclared exception!
      try { 
        csvBoundaryWriteHandler3D0.write((Stream<? extends PlaneConvexSubset>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Simulated IOException
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1363,"    protected TextFacetDefinitionWriter getFacetDefinitionWriter(final GeometryOutput out) {
        final TextFacetDefinitionWriter facetWriter =
                new TextFacetDefinitionWriter(GeometryIOUtils.createBufferedWriter(out, defaultCharset));

        facetWriter.setLineSeparator(lineSeparator);
        facetWriter.setDoubleFormat(doubleFormat);

        return facetWriter;
    }","  public void test12()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      // Undeclared exception!
      try { 
        textBoundaryWriteHandler3D0.getFacetDefinitionWriter((GeometryOutput) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1364,"    protected TextFacetDefinitionWriter getFacetDefinitionWriter(final GeometryOutput out) {
        final TextFacetDefinitionWriter facetWriter =
                new TextFacetDefinitionWriter(GeometryIOUtils.createBufferedWriter(out, defaultCharset));

        facetWriter.setLineSeparator(lineSeparator);
        facetWriter.setDoubleFormat(doubleFormat);

        return facetWriter;
    }","  public void test13()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.setFacetVertexCount(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("" "");
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockPrintStream0);
      // Undeclared exception!
      try { 
        textBoundaryWriteHandler3D0.getFacetDefinitionWriter(streamGeometryOutput0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Facet vertex count must be less than 0 or greater than 2; was 1
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter"", e);
      }
  }"
1365,"    public void writeFacets(final Stream<? extends FacetDefinition> facets, final GeometryOutput out) {
        try (TextFacetDefinitionWriter writer = getFacetDefinitionWriter(out)) {
            final Iterator<? extends FacetDefinition> it = facets.iterator();
            while (it.hasNext()) {
                writer.write(it.next());
            }
        }
    }","  public void test14()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      Stream<SimpleFacetDefinition> stream0 = Stream.empty();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""Expected end string: ]"", true);
      Charset charset0 = Charset.defaultCharset();
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockFileOutputStream0, """", charset0);
      textBoundaryWriteHandler3D0.writeFacets((Stream<? extends FacetDefinition>) stream0, (GeometryOutput) streamGeometryOutput0);
      // Undeclared exception!
      try { 
        textBoundaryWriteHandler3D0.writeFacets((Stream<? extends FacetDefinition>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // stream has already been operated upon or closed
         //
         verifyException(""java.util.stream.AbstractPipeline"", e);
      }
  }"
1366,"    public void write(final Stream<? extends PlaneConvexSubset> boundaries, final GeometryOutput out) {
        try (TextFacetDefinitionWriter writer = getFacetDefinitionWriter(out)) {
            final Iterator<? extends PlaneConvexSubset> it = boundaries.iterator();
            while (it.hasNext()) {
                writer.write(it.next());
            }
        }
    }","  public void test15()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      Supplier<PlaneConvexSubset> supplier0 = (Supplier<PlaneConvexSubset>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((PlaneConvexSubset) null).when(supplier0).get();
      Stream<PlaneConvexSubset> stream0 = Stream.generate(supplier0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""/1"");
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockPrintStream0);
      // Undeclared exception!
      try { 
        textBoundaryWriteHandler3D0.write((Stream<? extends PlaneConvexSubset>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.txt.TextFacetDefinitionWriter"", e);
      }
  }"
1367,"    public String getLineSeparator() {
        return lineSeparator;
    }","  public void test16()  throws Throwable  {
      CsvBoundaryWriteHandler3D csvBoundaryWriteHandler3D0 = new CsvBoundaryWriteHandler3D();
      String string0 = csvBoundaryWriteHandler3D0.getLineSeparator();
}"
1368,"    public String getLineSeparator() {
        return lineSeparator;
    }","  public void test17()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      DoubleFunction<String> doubleFunction0 = textBoundaryWriteHandler3D0.getDoubleFormat();
      textBoundaryWriteHandler3D0.setDoubleFormat(doubleFunction0);
}"
1369,"    public void writeFace(final int... vertexIndices) {
        writeFaceWithOffsets(0, vertexIndices, 0, null);
    }","  public void test0()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""+`^FUS72@ee=_4r "");
      ObjWriter objWriter0 = new ObjWriter(mockPrintWriter0);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'h';
      // Undeclared exception!
      try { 
        objWriter0.writeFace(intArray0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Vertex index out of bounds: 104
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.ObjWriter"", e);
      }
  }"
1370,"    public void writeFace(final int... vertexIndices) {
        writeFaceWithOffsets(0, vertexIndices, 0, null);
    }","  public void test1()  throws Throwable  {
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      ObjWriter objWriter0 = new ObjWriter(mockPrintWriter0);
      int[] intArray0 = new int[7];
      int[] intArray1 = new int[8];
      // Undeclared exception!
      try { 
        objWriter0.writeFace(intArray0, intArray1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Face normal index count must equal vertex index count; expected 7 but was 8
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.ObjWriter"", e);
      }
  }"
1371,"    public ObjWriter(final Writer writer) {
        super(writer);
    }","  public void test2()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      ObjWriter objWriter0 = new ObjWriter(mockPrintWriter0);
      ObjWriter.MeshBuffer objWriter_MeshBuffer0 = objWriter0.new MeshBuffer((-990));
      // Undeclared exception!
      try { 
        objWriter_MeshBuffer0.add((PlaneConvexSubset) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.ObjWriter$MeshBuffer"", e);
      }
  }"
1372,"    public int getVertexNormalCount() {
        return normalCount;
    }","  public void test3()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      ObjWriter objWriter0 = new ObjWriter(stringWriter0);
      ObjWriter.MeshBuffer objWriter_MeshBuffer0 = objWriter0.meshBuffer();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      objWriter_MeshBuffer0.addNormal(vector3D_Unit0);
      objWriter_MeshBuffer0.flush();
}"
1373,"    public MeshBuffer meshBuffer() {
        return meshBuffer(-1);
    }","  public void test4()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      ObjWriter objWriter0 = new ObjWriter(stringWriter0);
      ObjWriter.MeshBuffer objWriter_MeshBuffer0 = objWriter0.meshBuffer();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      objWriter_MeshBuffer0.addNormal(vector3D_Unit0);
      objWriter_MeshBuffer0.flush();
}"
1374,"    public MeshBuffer meshBuffer() {
        return meshBuffer(-1);
    }","  public void test5()  throws Throwable  {
      ObjWriter objWriter0 = new ObjWriter((Writer) null);
      ObjWriter.MeshBuffer objWriter_MeshBuffer0 = objWriter0.meshBuffer();
      Vector<Vector3D> vector0 = new Vector<Vector3D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      vector0.add((Vector3D) vector3D_Unit0);
      vector0.setSize(1487);
      SimpleFacetDefinition simpleFacetDefinition0 = new SimpleFacetDefinition(vector0);
      // Undeclared exception!
      try { 
        objWriter_MeshBuffer0.add((FacetDefinition) simpleFacetDefinition0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.ObjWriter"", e);
      }
  }"
1375,"    public int getVertexNormalCount() {
        return normalCount;
    }","  public void test6()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      ObjWriter objWriter0 = new ObjWriter(mockPrintWriter0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      objWriter0.writeVertexNormal(vector3D_Unit0);
      objWriter0.writeVertex(vector3D_Unit0);
      int[] intArray0 = new int[6];
      objWriter0.writeFace(intArray0, 0);
}"
1376,"    public int getVertexNormalCount() {
        return normalCount;
    }","  public void test7()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      ObjWriter objWriter0 = new ObjWriter(stringWriter0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      objWriter0.writeVertexNormal(vector3D_Unit0);
      int int0 = objWriter0.writeVertexNormal(vector3D_Unit0);
}"
1377,"    public int writeVertexNormal(final Vector3D normal) {
        return writeVertexNormalLine(createVectorString(normal));
    }","  public void test8()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      ObjWriter objWriter0 = new ObjWriter(stringWriter0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      objWriter0.writeVertexNormal(vector3D_Unit0);
      int int0 = objWriter0.writeVertexNormal(vector3D_Unit0);
}"
1378,"    public int getVertexCount() {
        return vertexCount;
    }","  public void test9()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      ObjWriter objWriter0 = new ObjWriter(mockPrintWriter0);
      ObjWriter.MeshBuffer objWriter_MeshBuffer0 = objWriter0.meshBuffer();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      objWriter_MeshBuffer0.addVertex(vector3D_Unit0);
      objWriter_MeshBuffer0.flush();
      int int0 = objWriter0.writeVertex(vector3D_Unit0);
}"
1379,"    public int writeVertex(final Vector3D vertex) {
        return writeVertexLine(createVectorString(vertex));
    }","  public void test10()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      ObjWriter objWriter0 = new ObjWriter(mockPrintWriter0);
      ObjWriter.MeshBuffer objWriter_MeshBuffer0 = objWriter0.meshBuffer();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      objWriter_MeshBuffer0.addVertex(vector3D_Unit0);
      objWriter_MeshBuffer0.flush();
      int int0 = objWriter0.writeVertex(vector3D_Unit0);
}"
1380,"    public int getVertexNormalCount() {
        return normalCount;
    }","  public void test11()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      ObjWriter objWriter0 = new ObjWriter(stringWriter0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      objWriter0.writeVertexNormal(vector3D_Unit0);
      int int0 = objWriter0.getVertexNormalCount();
}"
1381,"    public int getVertexCount() {
        return vertexCount;
    }","  public void test12()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      ObjWriter objWriter0 = new ObjWriter(mockPrintWriter0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      objWriter0.writeVertex(vector3D_Unit0);
      int int0 = objWriter0.getVertexCount();
}"
1382,"    public int writeVertexNormal(final Vector3D normal) {
        return writeVertexNormalLine(createVectorString(normal));
    }","  public void test13()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""?7YDvkz"");
      ObjWriter objWriter0 = new ObjWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        objWriter0.writeVertexNormal((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.ObjWriter"", e);
      }
  }"
1383,"    public int writeVertex(final Vector3D vertex) {
        return writeVertexLine(createVectorString(vertex));
    }","  public void test14()  throws Throwable  {
      ObjWriter objWriter0 = new ObjWriter((Writer) null);
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      // Undeclared exception!
      try { 
        objWriter0.writeVertex(vector3D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.utils.AbstractTextFormatWriter"", e);
      }
  }"
1384,"    public void writeObjectName(final String objectName) {
        writeKeywordLine(ObjConstants.OBJECT_KEYWORD, objectName);
    }","  public void test15()  throws Throwable  {
      ObjWriter objWriter0 = new ObjWriter((Writer) null);
      // Undeclared exception!
      try { 
        objWriter0.writeObjectName("""");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.utils.AbstractTextFormatWriter"", e);
      }
  }"
1385,"    public void writeGroupName(final String groupName) {
        writeKeywordLine(ObjConstants.GROUP_KEYWORD, groupName);
    }","  public void test16()  throws Throwable  {
      ObjWriter objWriter0 = new ObjWriter((Writer) null);
      // Undeclared exception!
      try { 
        objWriter0.writeGroupName("""");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.utils.AbstractTextFormatWriter"", e);
      }
  }"
1386,"    public void writeFace(final int... vertexIndices) {
        writeFaceWithOffsets(0, vertexIndices, 0, null);
    }","  public void test17()  throws Throwable  {
      ObjWriter objWriter0 = new ObjWriter((Writer) null);
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try { 
        objWriter0.writeFace(intArray0, intArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.utils.AbstractTextFormatWriter"", e);
      }
  }"
1387,"    public void writeFace(final int... vertexIndices) {
        writeFaceWithOffsets(0, vertexIndices, 0, null);
    }","  public void test18()  throws Throwable  {
      ObjWriter objWriter0 = new ObjWriter((Writer) null);
      // Undeclared exception!
      try { 
        objWriter0.writeFace((int[]) null, (-681));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.ObjWriter"", e);
      }
  }"
1388,"    public void writeFace(final int... vertexIndices) {
        writeFaceWithOffsets(0, vertexIndices, 0, null);
    }","  public void test19()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""Z'91Uj@<]N>p^%o}Ifh"");
      ObjWriter objWriter0 = new ObjWriter(mockPrintWriter0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        objWriter0.writeFace(intArray0, (-1802));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Face must have more than 3 vertices; found 0
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.ObjWriter"", e);
      }
  }"
1389,"    public void writeFace(final int... vertexIndices) {
        writeFaceWithOffsets(0, vertexIndices, 0, null);
    }","  public void test20()  throws Throwable  {
      ObjWriter objWriter0 = new ObjWriter((Writer) null);
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        objWriter0.writeFace(intArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.utils.AbstractTextFormatWriter"", e);
      }
  }"
1390,"    public void writeFace(final int... vertexIndices) {
        writeFaceWithOffsets(0, vertexIndices, 0, null);
    }","  public void test21()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      ObjWriter objWriter0 = new ObjWriter(stringWriter0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        objWriter0.writeFace(intArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Face must have more than 3 vertices; found 0
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.ObjWriter"", e);
      }
  }"
1391,"    public void writeComment(final String comment) {
        for (final String line : comment.split(""\\R"")) {
            write(ObjConstants.COMMENT_CHAR);
            write(SPACE);
            write(line);
            writeNewLine();
        }
    }","  public void test22()  throws Throwable  {
      ObjWriter objWriter0 = new ObjWriter((Writer) null);
      // Undeclared exception!
      try { 
        objWriter0.writeComment(""9"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.utils.AbstractTextFormatWriter"", e);
      }
  }"
1392,"    public void writeBoundaries(final BoundarySource3D src) {
        writeBoundaries(src, -1);
    }","  public void test23()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""org.apache.commons.geometry.core.partitioning.bsp.AbstractRegionBSPTree"");
      ObjWriter objWriter0 = new ObjWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        objWriter0.writeBoundaries((BoundarySource3D) null, 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.ObjWriter"", e);
      }
  }"
1393,"    public void writeBoundaries(final BoundarySource3D src) {
        writeBoundaries(src, -1);
    }","  public void test24()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Q;5e!j"");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 176);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      ObjWriter objWriter0 = new ObjWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        objWriter0.writeBoundaries((BoundarySource3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.ObjWriter"", e);
      }
  }"
1394,"    public void writeBoundaries(final BoundarySource3D src) {
        writeBoundaries(src, -1);
    }","  public void test25()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      ObjWriter objWriter0 = new ObjWriter(mockPrintWriter0);
      PlaneConvexSubset[] planeConvexSubsetArray0 = new PlaneConvexSubset[2];
      BoundarySource3D boundarySource3D0 = BoundarySource3D.of(planeConvexSubsetArray0);
      // Undeclared exception!
      try { 
        objWriter0.writeBoundaries(boundarySource3D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.ObjWriter$MeshBuffer"", e);
      }
  }"
1395,"    public MeshBuffer meshBuffer() {
        return meshBuffer(-1);
    }","  public void test26()  throws Throwable  {
      ObjWriter objWriter0 = new ObjWriter((Writer) null);
      ObjWriter.MeshBuffer objWriter_MeshBuffer0 = objWriter0.meshBuffer();
      Vector<Vector3D> vector0 = new Vector<Vector3D>();
      vector0.setSize(1487);
      SimpleFacetDefinition simpleFacetDefinition0 = new SimpleFacetDefinition(vector0);
      vector0.clear();
      objWriter_MeshBuffer0.add((FacetDefinition) simpleFacetDefinition0);
      // Undeclared exception!
      try { 
        objWriter_MeshBuffer0.flush();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Face must have more than 3 vertices; found 0
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.ObjWriter"", e);
      }
  }"
1396,"    public void writeFace(final int... vertexIndices) {
        writeFaceWithOffsets(0, vertexIndices, 0, null);
    }","  public void test27()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      ObjWriter objWriter0 = new ObjWriter(mockPrintWriter0);
      ObjWriter.MeshBuffer objWriter_MeshBuffer0 = objWriter0.meshBuffer();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      objWriter_MeshBuffer0.addVertex(vector3D_Unit0);
      objWriter0.writeVertexNormal(vector3D_Unit0);
      objWriter_MeshBuffer0.flush();
      int[] intArray0 = new int[6];
      objWriter0.writeFace(intArray0, intArray0);
}"
1397,"    public void writeFace(final int... vertexIndices) {
        writeFaceWithOffsets(0, vertexIndices, 0, null);
    }","  public void test28()  throws Throwable  {
      File file0 = MockFile.createTempFile(""iVA8>LH3Ap\""dQ-C"", ""iVA8>LH3Ap\""dQ-C"", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      ObjWriter objWriter0 = new ObjWriter(mockPrintWriter0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      objWriter0.writeVertex(vector3D_Unit0);
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        objWriter0.writeFace(intArray0, (-3309));
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Normal index out of bounds: -3309
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.ObjWriter"", e);
      }
  }"
1398,"    public void writeFace(final int... vertexIndices) {
        writeFaceWithOffsets(0, vertexIndices, 0, null);
    }","  public void test29()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      ObjWriter objWriter0 = new ObjWriter(mockPrintWriter0);
      ObjWriter.MeshBuffer objWriter_MeshBuffer0 = objWriter0.meshBuffer();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      objWriter_MeshBuffer0.addVertex(vector3D_Unit0);
      objWriter_MeshBuffer0.flush();
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        objWriter0.writeFace(intArray0, intArray0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Normal index out of bounds: 0
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.ObjWriter"", e);
      }
  }"
1399,"    public void writeFace(final int... vertexIndices) {
        writeFaceWithOffsets(0, vertexIndices, 0, null);
    }","  public void test30()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      ObjWriter objWriter0 = new ObjWriter(stringWriter0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-62);
      // Undeclared exception!
      try { 
        objWriter0.writeFace(intArray0, intArray0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Vertex index out of bounds: -62
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.ObjWriter"", e);
      }
  }"
1400,"    public int getVertexCount() {
        return vertexCount;
    }","  public void test31()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      ObjWriter objWriter0 = new ObjWriter(mockPrintWriter0);
      ObjWriter.MeshBuffer objWriter_MeshBuffer0 = objWriter0.meshBuffer();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      objWriter_MeshBuffer0.addVertex(vector3D_Unit0);
      objWriter_MeshBuffer0.flush();
      int[] intArray0 = new int[6];
      objWriter0.writeFace(intArray0);
}"
1401,"    public void writeFace(final int... vertexIndices) {
        writeFaceWithOffsets(0, vertexIndices, 0, null);
    }","  public void test32()  throws Throwable  {
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      int[] intArray0 = new int[4];
      int[] intArray1 = new int[20];
      ObjWriter objWriter0 = new ObjWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        objWriter0.writeFace(intArray1, intArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Face normal index count must equal vertex index count; expected 20 but was 4
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.ObjWriter"", e);
      }
  }"
1402,"    public void writeBoundaries(final BoundarySource3D src) {
        writeBoundaries(src, -1);
    }","  public void test33()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      ObjWriter objWriter0 = new ObjWriter(mockPrintWriter0);
      ArrayList<PlaneConvexSubset> arrayList0 = new ArrayList<PlaneConvexSubset>();
      BoundaryList3D boundaryList3D0 = new BoundaryList3D(arrayList0);
      arrayList0.add((PlaneConvexSubset) null);
      // Undeclared exception!
      try { 
        objWriter0.writeBoundaries((BoundarySource3D) boundaryList3D0, 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.ObjWriter$MeshBuffer"", e);
      }
  }"
1403,"    public void writeComment(final String comment) {
        for (final String line : comment.split(""\\R"")) {
            write(ObjConstants.COMMENT_CHAR);
            write(SPACE);
            write(line);
            writeNewLine();
        }
    }","  public void test34()  throws Throwable  {
      File file0 = MockFile.createTempFile(""iVA8>LH3Ap\""dQ-C"", ""iVA8>LH3Ap\""dQ-C"", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      ObjWriter objWriter0 = new ObjWriter(mockPrintWriter0);
      objWriter0.writeComment("""");
}"
1404,"    public void writeBoundaries(final BoundarySource3D src) {
        writeBoundaries(src, -1);
    }","  public void test35()  throws Throwable  {
      ObjWriter objWriter0 = new ObjWriter((Writer) null);
      HashSet<Plane> hashSet0 = new HashSet<Plane>();
      TreeSet<Plane> treeSet0 = new TreeSet<Plane>(hashSet0);
      ConvexVolume convexVolume0 = ConvexVolume.fromBounds((Iterable<? extends Plane>) treeSet0);
      BoundaryList3D boundaryList3D0 = convexVolume0.toList();
      objWriter0.writeBoundaries((BoundarySource3D) boundaryList3D0);
}"
1405,"    public int getVertexCount() {
        return vertexCount;
    }","  public void test36()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      ObjWriter objWriter0 = new ObjWriter(mockPrintWriter0);
      objWriter0.writeObjectName(""org.apache.commons.geometry.euclidean.threed.Vector3D$1"");
}"
1406,"    public int getVertexCount() {
        return vertexCount;
    }","  public void test37()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""+`^FUS72@ee=_4r "");
      ObjWriter objWriter0 = new ObjWriter(mockPrintWriter0);
      int int0 = objWriter0.getVertexCount();
}"
1407,"    public void writeFace(final int... vertexIndices) {
        writeFaceWithOffsets(0, vertexIndices, 0, null);
    }","  public void test38()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      ObjWriter objWriter0 = new ObjWriter(mockPrintWriter0);
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        objWriter0.writeFace(intArray0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Vertex index out of bounds: 0
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.ObjWriter"", e);
      }
  }"
1408,"    public void writeGroupName(final String groupName) {
        writeKeywordLine(ObjConstants.GROUP_KEYWORD, groupName);
    }","  public void test39()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      ObjWriter objWriter0 = new ObjWriter(stringWriter0);
      objWriter0.writeGroupName(""|UQM"");
}"
1409,"    public int getVertexNormalCount() {
        return normalCount;
    }","  public void test40()  throws Throwable  {
      File file0 = MockFile.createTempFile(""iVA8>LH3Ap\""dQ-C"", ""iVA8>LH3Ap\""dQ-C"", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      ObjWriter objWriter0 = new ObjWriter(mockPrintWriter0);
      int int0 = objWriter0.getVertexNormalCount();
}"
1410,"    public MeshBuffer meshBuffer() {
        return meshBuffer(-1);
    }","  public void test41()  throws Throwable  {
      ObjWriter objWriter0 = new ObjWriter((Writer) null);
      ObjWriter.MeshBuffer objWriter_MeshBuffer0 = objWriter0.meshBuffer((-15));
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      objWriter_MeshBuffer0.addNormal(vector3D_Unit0);
      // Undeclared exception!
      try { 
        objWriter_MeshBuffer0.flush();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.utils.AbstractTextFormatWriter"", e);
      }
  }"
1411,"    public void writeBoundaries(final BoundarySource3D src) {
        writeBoundaries(src, -1);
    }","  public void test42()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      ObjWriter objWriter0 = new ObjWriter(mockPrintWriter0);
      ArrayList<PlaneConvexSubset> arrayList0 = new ArrayList<PlaneConvexSubset>();
      BoundaryList3D boundaryList3D0 = new BoundaryList3D(arrayList0);
      objWriter0.writeBoundaries((BoundarySource3D) boundaryList3D0, 0);
}"
1412,"    protected PolygonObjParser.Face readFace() {
        while (parser.nextKeyword()) {
            switch (parser.getCurrentKeyword()) {
            case ObjConstants.VERTEX_KEYWORD:
                handleVertex(parser.readVector());
                break;
            case ObjConstants.VERTEX_NORMAL_KEYWORD:
                handleNormal(parser.readVector());
                break;
            case ObjConstants.FACE_KEYWORD:
                return parser.readFace();
            default:
                break;
            }
        }

        return null;
    }","  public void test0()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""vertex"");
      ObjFacetDefinitionReader objFacetDefinitionReader0 = new ObjFacetDefinitionReader(stringReader0);
      PolygonObjParser.Face polygonObjParser_Face0 = objFacetDefinitionReader0.readFace();
}"
1413,"    public boolean isFailOnNonPolygonKeywords() {
        return parser.isFailOnNonPolygonKeywords();
    }","  public void test1()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      ObjTriangleMeshReader objTriangleMeshReader0 = new ObjTriangleMeshReader(stringReader0, precision_DoubleEquivalence0);
      objTriangleMeshReader0.setFailOnNonPolygonKeywords(true);
      boolean boolean0 = objTriangleMeshReader0.isFailOnNonPolygonKeywords();
}"
1414,"    protected PolygonObjParser.Face readFace() {
        while (parser.nextKeyword()) {
            switch (parser.getCurrentKeyword()) {
            case ObjConstants.VERTEX_KEYWORD:
                handleVertex(parser.readVector());
                break;
            case ObjConstants.VERTEX_NORMAL_KEYWORD:
                handleNormal(parser.readVector());
                break;
            case ObjConstants.FACE_KEYWORD:
                return parser.readFace();
            default:
                break;
            }
        }

        return null;
    }","  public void test2()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""P"");
      ObjFacetDefinitionReader objFacetDefinitionReader0 = new ObjFacetDefinitionReader(stringReader0);
      objFacetDefinitionReader0.close();
      // Undeclared exception!
      try { 
        objFacetDefinitionReader0.readFace();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1415,,"  public void test3()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""vn"");
      ObjFacetDefinitionReader objFacetDefinitionReader0 = new ObjFacetDefinitionReader(stringReader0);
      // Undeclared exception!
      try { 
        objFacetDefinitionReader0.readFacet();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 3: expected double but found end of content
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1416,"    protected PolygonObjParser.Face readFace() {
        while (parser.nextKeyword()) {
            switch (parser.getCurrentKeyword()) {
            case ObjConstants.VERTEX_KEYWORD:
                handleVertex(parser.readVector());
                break;
            case ObjConstants.VERTEX_NORMAL_KEYWORD:
                handleNormal(parser.readVector());
                break;
            case ObjConstants.FACE_KEYWORD:
                return parser.readFace();
            default:
                break;
            }
        }

        return null;
    }","  public void test4()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""v"");
      ObjFacetDefinitionReader objFacetDefinitionReader0 = new ObjFacetDefinitionReader(stringReader0);
      // Undeclared exception!
      try { 
        objFacetDefinitionReader0.readFace();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 2: expected double but found end of content
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1417,,"  public void test5()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""f"");
      ObjFacetDefinitionReader objFacetDefinitionReader0 = new ObjFacetDefinitionReader(stringReader0);
      // Undeclared exception!
      try { 
        objFacetDefinitionReader0.readFacet();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 2: face must contain at least 3 vertices but found only 0
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1418,"    public boolean isFailOnNonPolygonKeywords() {
        return parser.isFailOnNonPolygonKeywords();
    }","  public void test6()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""P"");
      ObjFacetDefinitionReader objFacetDefinitionReader0 = new ObjFacetDefinitionReader(stringReader0);
      boolean boolean0 = objFacetDefinitionReader0.isFailOnNonPolygonKeywords();
}"
1419,"    public boolean nextKeyword() {
        currentKeyword = null;

        // advance to the next line if not at the start of a line
        if (parser.getColumnNumber() != 1) {
            discardDataLine();
        }

        // search for the next keyword
        while (currentKeyword == null && parser.hasMoreCharacters()) {
            if (!nextDataLineContent() ||
                    parser.peekChar() == ObjConstants.COMMENT_CHAR) {
                // use a standard line discard here so we don't interpret line continuations
                // within comments; the interpreted OBJ content should be the same regardless
                // of the presence of comments
                parser.discardLine();
            } else if (parser.getColumnNumber() != 1) {
                throw parser.parseError(""non-blank lines must begin with an OBJ keyword or comment character"");
            } else if (!readKeyword()) {
                throw parser.unexpectedToken(""OBJ keyword"");
            } else {
                final String keywordValue = parser.getCurrentToken();

                handleKeyword(keywordValue);

                currentKeyword = keywordValue;

                // advance past whitespace to the next data value
                discardDataLineWhitespace();
            }
        }

        return currentKeyword != null;
    }","  public void test0()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""!8NHbvJ'W"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      // Undeclared exception!
      try { 
        polygonObjParser0.nextKeyword();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: expected OBJ keyword but found empty token followed by [!]
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1420,"    public Vector3D readVector() {
        discardDataLineWhitespace();
        final double x = nextDouble();

        discardDataLineWhitespace();
        final double y = nextDouble();

        discardDataLineWhitespace();
        final double z = nextDouble();

        return Vector3D.of(x, y, z);
    }","  public void test1()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""N3"");
      stringReader0.read();
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      // Undeclared exception!
      try { 
        polygonObjParser0.readVector();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 2: expected double but found end of content
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1421,"    protected double nextDouble() {
        return parser.nextWithLineContinuation(ObjConstants.LINE_CONTINUATION_CHAR,
                SimpleTextParser::isNotWhitespace)
            .getCurrentTokenAsDouble();
    }","  public void test2()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""0 m"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      double double0 = polygonObjParser0.nextDouble();
}"
1422,"    protected double nextDouble() {
        return parser.nextWithLineContinuation(ObjConstants.LINE_CONTINUATION_CHAR,
                SimpleTextParser::isNotWhitespace)
            .getCurrentTokenAsDouble();
    }","  public void test3()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""N3"");
      stringReader0.read();
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      double double0 = polygonObjParser0.nextDouble();
}"
1423,"    protected boolean nextDataLineContent() {
        return discardDataLineWhitespace().hasMoreCharactersOnLine();
    }","  public void test4()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""OBJ keyword"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      boolean boolean0 = polygonObjParser0.nextDataLineContent();
}"
1424,"    protected boolean nextDataLineContent() {
        return discardDataLineWhitespace().hasMoreCharactersOnLine();
    }","  public void test5()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      boolean boolean0 = polygonObjParser0.nextDataLineContent();
}"
1425,"    protected SimpleTextParser getTextParser() {
        return parser;
    }","  public void test6()  throws Throwable  {
      PolygonObjParser polygonObjParser0 = new PolygonObjParser((SimpleTextParser) null);
      SimpleTextParser simpleTextParser0 = polygonObjParser0.getTextParser();
}"
1426,"    protected SimpleTextParser getTextParser() {
        return parser;
    }","  public void test7()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setLineNumber((-814));
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(simpleTextParser0);
      SimpleTextParser simpleTextParser1 = polygonObjParser0.getTextParser();
}"
1427,"    public boolean nextKeyword() {
        currentKeyword = null;

        // advance to the next line if not at the start of a line
        if (parser.getColumnNumber() != 1) {
            discardDataLine();
        }

        // search for the next keyword
        while (currentKeyword == null && parser.hasMoreCharacters()) {
            if (!nextDataLineContent() ||
                    parser.peekChar() == ObjConstants.COMMENT_CHAR) {
                // use a standard line discard here so we don't interpret line continuations
                // within comments; the interpreted OBJ content should be the same regardless
                // of the presence of comments
                parser.discardLine();
            } else if (parser.getColumnNumber() != 1) {
                throw parser.parseError(""non-blank lines must begin with an OBJ keyword or comment character"");
            } else if (!readKeyword()) {
                throw parser.unexpectedToken(""OBJ keyword"");
            } else {
                final String keywordValue = parser.getCurrentToken();

                handleKeyword(keywordValue);

                currentKeyword = keywordValue;

                // advance past whitespace to the next data value
                discardDataLineWhitespace();
            }
        }

        return currentKeyword != null;
    }","  public void test8()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""_z~^rQ"");
      stringReader0.read();
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      boolean boolean0 = polygonObjParser0.nextKeyword();
}"
1428,"    protected SimpleTextParser getTextParser() {
        return parser;
    }","  public void test9()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""_z~^rQ"");
      stringReader0.read();
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      boolean boolean0 = polygonObjParser0.nextKeyword();
      SimpleTextParser simpleTextParser0 = polygonObjParser0.getTextParser();
}"
1429,"    public String getCurrentKeyword() {
        return currentKeyword;
    }","  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""f2DD1"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      polygonObjParser0.nextKeyword();
      String string0 = polygonObjParser0.getCurrentKeyword();
}"
1430,"    protected SimpleTextParser discardDataLineWhitespace() {
        return parser.discardWithLineContinuation(
                ObjConstants.LINE_CONTINUATION_CHAR,
                SimpleTextParser::isLineWhitespace);
    }","  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 43, 43);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(simpleTextParser0);
      simpleTextParser0.setLineNumber(0);
      SimpleTextParser simpleTextParser1 = polygonObjParser0.discardDataLineWhitespace();
}"
1431,"    protected SimpleTextParser discardDataLineWhitespace() {
        return parser.discardWithLineContinuation(
                ObjConstants.LINE_CONTINUATION_CHAR,
                SimpleTextParser::isLineWhitespace);
    }","  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""#8sybvJ'W"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      polygonObjParser0.readDataLine();
      SimpleTextParser simpleTextParser0 = polygonObjParser0.discardDataLineWhitespace();
}"
1432,"    protected SimpleTextParser discardDataLineWhitespace() {
        return parser.discardWithLineContinuation(
                ObjConstants.LINE_CONTINUATION_CHAR,
                SimpleTextParser::isLineWhitespace);
    }","  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(simpleTextParser0);
      simpleTextParser0.setColumnNumber((-1));
      SimpleTextParser simpleTextParser1 = polygonObjParser0.discardDataLineWhitespace();
}"
1433,"    public Vector3D readVector() {
        discardDataLineWhitespace();
        final double x = nextDouble();

        discardDataLineWhitespace();
        final double y = nextDouble();

        discardDataLineWhitespace();
        final double z = nextDouble();

        return Vector3D.of(x, y, z);
    }","  public void test14()  throws Throwable  {
      PolygonObjParser polygonObjParser0 = new PolygonObjParser((SimpleTextParser) null);
      // Undeclared exception!
      try { 
        polygonObjParser0.readVector();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.AbstractObjParser"", e);
      }
  }"
1434,"    public Vector3D readVector() {
        discardDataLineWhitespace();
        final double x = nextDouble();

        discardDataLineWhitespace();
        final double y = nextDouble();

        discardDataLineWhitespace();
        final double z = nextDouble();

        return Vector3D.of(x, y, z);
    }","  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      stringReader0.close();
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      // Undeclared exception!
      try { 
        polygonObjParser0.readVector();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1435,"    public double[] readDoubles() {
        final List<Double> list = new ArrayList<>();

        while (nextDataLineContent()) {
            list.add(nextDouble());
        }

        // convert to primitive array
        final double[] arr = new double[list.size()];
        for (int i = 0; i < list.size(); ++i) {
            arr[i] = list.get(i);
        }

        return arr;
    }","  public void test16()  throws Throwable  {
      PolygonObjParser polygonObjParser0 = new PolygonObjParser((SimpleTextParser) null);
      // Undeclared exception!
      try { 
        polygonObjParser0.readDoubles();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.AbstractObjParser"", e);
      }
  }"
1436,"    public double[] readDoubles() {
        final List<Double> list = new ArrayList<>();

        while (nextDataLineContent()) {
            list.add(nextDouble());
        }

        // convert to primitive array
        final double[] arr = new double[list.size()];
        for (int i = 0; i < list.size(); ++i) {
            arr[i] = list.get(i);
        }

        return arr;
    }","  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""OBJ keyword"");
      stringReader0.close();
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      // Undeclared exception!
      try { 
        polygonObjParser0.readDoubles();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1437,"    public String readDataLine() {
        parser.nextWithLineContinuation(
                ObjConstants.LINE_CONTINUATION_CHAR,
                SimpleTextParser::isNotNewLinePart)
            .discardNewLineSequence();

        return parser.getCurrentToken();
    }","  public void test18()  throws Throwable  {
      PolygonObjParser polygonObjParser0 = new PolygonObjParser((SimpleTextParser) null);
      // Undeclared exception!
      try { 
        polygonObjParser0.readDataLine();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.AbstractObjParser"", e);
      }
  }"
1438,"    public String readDataLine() {
        parser.nextWithLineContinuation(
                ObjConstants.LINE_CONTINUATION_CHAR,
                SimpleTextParser::isNotNewLinePart)
            .discardNewLineSequence();

        return parser.getCurrentToken();
    }","  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""org.apache.commons.geometry.euclidean.threed.Vector3D$Unit"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      stringReader0.close();
      // Undeclared exception!
      try { 
        polygonObjParser0.readDataLine();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1439,"    public boolean nextKeyword() {
        currentKeyword = null;

        // advance to the next line if not at the start of a line
        if (parser.getColumnNumber() != 1) {
            discardDataLine();
        }

        // search for the next keyword
        while (currentKeyword == null && parser.hasMoreCharacters()) {
            if (!nextDataLineContent() ||
                    parser.peekChar() == ObjConstants.COMMENT_CHAR) {
                // use a standard line discard here so we don't interpret line continuations
                // within comments; the interpreted OBJ content should be the same regardless
                // of the presence of comments
                parser.discardLine();
            } else if (parser.getColumnNumber() != 1) {
                throw parser.parseError(""non-blank lines must begin with an OBJ keyword or comment character"");
            } else if (!readKeyword()) {
                throw parser.unexpectedToken(""OBJ keyword"");
            } else {
                final String keywordValue = parser.getCurrentToken();

                handleKeyword(keywordValue);

                currentKeyword = keywordValue;

                // advance past whitespace to the next data value
                discardDataLineWhitespace();
            }
        }

        return currentKeyword != null;
    }","  public void test20()  throws Throwable  {
      PolygonObjParser polygonObjParser0 = new PolygonObjParser((SimpleTextParser) null);
      // Undeclared exception!
      try { 
        polygonObjParser0.nextKeyword();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.AbstractObjParser"", e);
      }
  }"
1440,"    public boolean nextKeyword() {
        currentKeyword = null;

        // advance to the next line if not at the start of a line
        if (parser.getColumnNumber() != 1) {
            discardDataLine();
        }

        // search for the next keyword
        while (currentKeyword == null && parser.hasMoreCharacters()) {
            if (!nextDataLineContent() ||
                    parser.peekChar() == ObjConstants.COMMENT_CHAR) {
                // use a standard line discard here so we don't interpret line continuations
                // within comments; the interpreted OBJ content should be the same regardless
                // of the presence of comments
                parser.discardLine();
            } else if (parser.getColumnNumber() != 1) {
                throw parser.parseError(""non-blank lines must begin with an OBJ keyword or comment character"");
            } else if (!readKeyword()) {
                throw parser.unexpectedToken(""OBJ keyword"");
            } else {
                final String keywordValue = parser.getCurrentToken();

                handleKeyword(keywordValue);

                currentKeyword = keywordValue;

                // advance past whitespace to the next data value
                discardDataLineWhitespace();
            }
        }

        return currentKeyword != null;
    }","  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      stringReader0.close();
      // Undeclared exception!
      try { 
        polygonObjParser0.nextKeyword();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1441,"    protected double nextDouble() {
        return parser.nextWithLineContinuation(ObjConstants.LINE_CONTINUATION_CHAR,
                SimpleTextParser::isNotWhitespace)
            .getCurrentTokenAsDouble();
    }","  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(simpleTextParser0);
      // Undeclared exception!
      try { 
        polygonObjParser0.nextDouble();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: expected double but found end of content
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1442,"    protected double nextDouble() {
        return parser.nextWithLineContinuation(ObjConstants.LINE_CONTINUATION_CHAR,
                SimpleTextParser::isNotWhitespace)
            .getCurrentTokenAsDouble();
    }","  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""!>;mVVe!#"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      stringReader0.close();
      // Undeclared exception!
      try { 
        polygonObjParser0.nextDouble();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1443,"    protected boolean nextDataLineContent() {
        return discardDataLineWhitespace().hasMoreCharactersOnLine();
    }","  public void test24()  throws Throwable  {
      PolygonObjParser polygonObjParser0 = new PolygonObjParser((SimpleTextParser) null);
      // Undeclared exception!
      try { 
        polygonObjParser0.nextDataLineContent();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.AbstractObjParser"", e);
      }
  }"
1444,"    protected boolean nextDataLineContent() {
        return discardDataLineWhitespace().hasMoreCharactersOnLine();
    }","  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""OBJ keyword"");
      stringReader0.close();
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      // Undeclared exception!
      try { 
        polygonObjParser0.nextDataLineContent();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1445,"    protected SimpleTextParser discardDataLineWhitespace() {
        return parser.discardWithLineContinuation(
                ObjConstants.LINE_CONTINUATION_CHAR,
                SimpleTextParser::isLineWhitespace);
    }","  public void test26()  throws Throwable  {
      PolygonObjParser polygonObjParser0 = new PolygonObjParser((SimpleTextParser) null);
      // Undeclared exception!
      try { 
        polygonObjParser0.discardDataLineWhitespace();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.AbstractObjParser"", e);
      }
  }"
1446,"    protected SimpleTextParser discardDataLineWhitespace() {
        return parser.discardWithLineContinuation(
                ObjConstants.LINE_CONTINUATION_CHAR,
                SimpleTextParser::isLineWhitespace);
    }","  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""org.apache.commons.geometry.euclidean.oned.Vector1D"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      stringReader0.close();
      // Undeclared exception!
      try { 
        polygonObjParser0.discardDataLineWhitespace();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1447,"    public void discardDataLine() {
        parser.discardWithLineContinuation(
                ObjConstants.LINE_CONTINUATION_CHAR,
                SimpleTextParser::isNotNewLinePart)
            .discardNewLineSequence();
    }","  public void test28()  throws Throwable  {
      PolygonObjParser polygonObjParser0 = new PolygonObjParser((SimpleTextParser) null);
      // Undeclared exception!
      try { 
        polygonObjParser0.discardDataLine();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.AbstractObjParser"", e);
      }
  }"
1448,"    public void discardDataLine() {
        parser.discardWithLineContinuation(
                ObjConstants.LINE_CONTINUATION_CHAR,
                SimpleTextParser::isNotNewLinePart)
            .discardNewLineSequence();
    }","  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      stringReader0.close();
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      // Undeclared exception!
      try { 
        polygonObjParser0.discardDataLine();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1449,"    public String readDataLine() {
        parser.nextWithLineContinuation(
                ObjConstants.LINE_CONTINUATION_CHAR,
                SimpleTextParser::isNotNewLinePart)
            .discardNewLineSequence();

        return parser.getCurrentToken();
    }","  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""_z~^rQ"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      polygonObjParser0.discardDataLine();
      String string0 = polygonObjParser0.readDataLine();
}"
1450,"    public double[] readDoubles() {
        final List<Double> list = new ArrayList<>();

        while (nextDataLineContent()) {
            list.add(nextDouble());
        }

        // convert to primitive array
        final double[] arr = new double[list.size()];
        for (int i = 0; i < list.size(); ++i) {
            arr[i] = list.get(i);
        }

        return arr;
    }","  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Q5F"");
      stringReader0.read();
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      double[] doubleArray0 = polygonObjParser0.readDoubles();
}"
1451,"    public double[] readDoubles() {
        final List<Double> list = new ArrayList<>();

        while (nextDataLineContent()) {
            list.add(nextDouble());
        }

        // convert to primitive array
        final double[] arr = new double[list.size()];
        for (int i = 0; i < list.size(); ++i) {
            arr[i] = list.get(i);
        }

        return arr;
    }","  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Q5F"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      // Undeclared exception!
      try { 
        polygonObjParser0.readDoubles();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: expected double but found [Q5F]
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1452,"    public double[] readDoubles() {
        final List<Double> list = new ArrayList<>();

        while (nextDataLineContent()) {
            list.add(nextDouble());
        }

        // convert to primitive array
        final double[] arr = new double[list.size()];
        for (int i = 0; i < list.size(); ++i) {
            arr[i] = list.get(i);
        }

        return arr;
    }","  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""#8sybvJ'W"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      polygonObjParser0.nextKeyword();
      double[] doubleArray0 = polygonObjParser0.readDoubles();
}"
1453,"    public boolean nextKeyword() {
        currentKeyword = null;

        // advance to the next line if not at the start of a line
        if (parser.getColumnNumber() != 1) {
            discardDataLine();
        }

        // search for the next keyword
        while (currentKeyword == null && parser.hasMoreCharacters()) {
            if (!nextDataLineContent() ||
                    parser.peekChar() == ObjConstants.COMMENT_CHAR) {
                // use a standard line discard here so we don't interpret line continuations
                // within comments; the interpreted OBJ content should be the same regardless
                // of the presence of comments
                parser.discardLine();
            } else if (parser.getColumnNumber() != 1) {
                throw parser.parseError(""non-blank lines must begin with an OBJ keyword or comment character"");
            } else if (!readKeyword()) {
                throw parser.unexpectedToken(""OBJ keyword"");
            } else {
                final String keywordValue = parser.getCurrentToken();

                handleKeyword(keywordValue);

                currentKeyword = keywordValue;

                // advance past whitespace to the next data value
                discardDataLineWhitespace();
            }
        }

        return currentKeyword != null;
    }","  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("" V.}Usu|:'6Gd9HmXF"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      // Undeclared exception!
      try { 
        polygonObjParser0.nextKeyword();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 2: non-blank lines must begin with an OBJ keyword or comment character
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1454,"    public boolean nextKeyword() {
        currentKeyword = null;

        // advance to the next line if not at the start of a line
        if (parser.getColumnNumber() != 1) {
            discardDataLine();
        }

        // search for the next keyword
        while (currentKeyword == null && parser.hasMoreCharacters()) {
            if (!nextDataLineContent() ||
                    parser.peekChar() == ObjConstants.COMMENT_CHAR) {
                // use a standard line discard here so we don't interpret line continuations
                // within comments; the interpreted OBJ content should be the same regardless
                // of the presence of comments
                parser.discardLine();
            } else if (parser.getColumnNumber() != 1) {
                throw parser.parseError(""non-blank lines must begin with an OBJ keyword or comment character"");
            } else if (!readKeyword()) {
                throw parser.unexpectedToken(""OBJ keyword"");
            } else {
                final String keywordValue = parser.getCurrentToken();

                handleKeyword(keywordValue);

                currentKeyword = keywordValue;

                // advance past whitespace to the next data value
                discardDataLineWhitespace();
            }
        }

        return currentKeyword != null;
    }","  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""org.apahe.cOmmons.eomt'y.euclidean.threed.Vector3D"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      boolean boolean0 = polygonObjParser0.nextKeyword();
}"
1455,"    public boolean nextKeyword() {
        currentKeyword = null;

        // advance to the next line if not at the start of a line
        if (parser.getColumnNumber() != 1) {
            discardDataLine();
        }

        // search for the next keyword
        while (currentKeyword == null && parser.hasMoreCharacters()) {
            if (!nextDataLineContent() ||
                    parser.peekChar() == ObjConstants.COMMENT_CHAR) {
                // use a standard line discard here so we don't interpret line continuations
                // within comments; the interpreted OBJ content should be the same regardless
                // of the presence of comments
                parser.discardLine();
            } else if (parser.getColumnNumber() != 1) {
                throw parser.parseError(""non-blank lines must begin with an OBJ keyword or comment character"");
            } else if (!readKeyword()) {
                throw parser.unexpectedToken(""OBJ keyword"");
            } else {
                final String keywordValue = parser.getCurrentToken();

                handleKeyword(keywordValue);

                currentKeyword = keywordValue;

                // advance past whitespace to the next data value
                discardDataLineWhitespace();
            }
        }

        return currentKeyword != null;
    }","  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""org.apahe.cOmmons.eomt'y.euclidean.threed.Vector3D"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      boolean boolean0 = polygonObjParser0.nextKeyword();
      boolean boolean1 = polygonObjParser0.nextKeyword();
}"
1456,"    public String getCurrentKeyword() {
        return currentKeyword;
    }","  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Q5F"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      String string0 = polygonObjParser0.getCurrentKeyword();
}"
1457,"    protected double nextDouble() {
        return parser.nextWithLineContinuation(ObjConstants.LINE_CONTINUATION_CHAR,
                SimpleTextParser::isNotWhitespace)
            .getCurrentTokenAsDouble();
    }","  public void test38()  throws Throwable  {
      PolygonObjParser polygonObjParser0 = new PolygonObjParser((SimpleTextParser) null);
      // Undeclared exception!
      try { 
        polygonObjParser0.nextDouble();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.AbstractObjParser"", e);
      }
  }"
1458,"    public FacetDefinition readFacet() {
        final PolygonObjParser.Face face = readFace();
        if (face != null) {
            final List<Vector3D> faceVertices = face.getVertices(vertices::get);
            final Vector3D definedNormal = face.getDefinedCompositeNormal(normals::get);

            return new SimpleFacetDefinition(faceVertices, definedNormal);
        }

        return null;
    }","  public void test0()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""] but was ["");
      ObjFacetDefinitionReader objFacetDefinitionReader0 = new ObjFacetDefinitionReader(stringReader0);
      // Undeclared exception!
      try { 
        objFacetDefinitionReader0.readFacet();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: expected OBJ keyword but found empty token followed by []]
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1459,"    public FacetDefinition readFacet() {
        final PolygonObjParser.Face face = readFace();
        if (face != null) {
            final List<Vector3D> faceVertices = face.getVertices(vertices::get);
            final Vector3D definedNormal = face.getDefinedCompositeNormal(normals::get);

            return new SimpleFacetDefinition(faceVertices, definedNormal);
        }

        return null;
    }","  public void test1()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""G6c~ARmt/90&\""KOQ3"");
      ObjFacetDefinitionReader objFacetDefinitionReader0 = new ObjFacetDefinitionReader(stringReader0);
      stringReader0.close();
      // Undeclared exception!
      try { 
        objFacetDefinitionReader0.readFacet();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1460,"    public ObjFacetDefinitionReader(final Reader reader) {
        super(reader);
    }","  public void test2()  throws Throwable  {
      ObjFacetDefinitionReader objFacetDefinitionReader0 = null;
      try {
        objFacetDefinitionReader0 = new ObjFacetDefinitionReader((Reader) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Reader cannot be null
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
1461,"    public FacetDefinition readFacet() {
        final PolygonObjParser.Face face = readFace();
        if (face != null) {
            final List<Vector3D> faceVertices = face.getVertices(vertices::get);
            final Vector3D definedNormal = face.getDefinedCompositeNormal(normals::get);

            return new SimpleFacetDefinition(faceVertices, definedNormal);
        }

        return null;
    }","  public void test3()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""inalid Matrixelee[t:"");
      ObjFacetDefinitionReader objFacetDefinitionReader0 = new ObjFacetDefinitionReader(stringReader0);
      FacetDefinition facetDefinition0 = objFacetDefinitionReader0.readFacet();
}"
1462,"    protected void handleNormal(final Vector3D normal) {
        normals.add(normal);
    }","  public void test4()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""inalid Matrixelee[t:"");
      ObjFacetDefinitionReader objFacetDefinitionReader0 = new ObjFacetDefinitionReader(stringReader0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      objFacetDefinitionReader0.handleNormal(vector3D_Unit0);
}"
1463,"    protected void handleVertex(final Vector3D vertex) {
        vertices.add(vertex);
    }","  public void test5()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""G6c~ARmt/90&\""KOQ3"");
      ObjFacetDefinitionReader objFacetDefinitionReader0 = new ObjFacetDefinitionReader(stringReader0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      objFacetDefinitionReader0.handleVertex(vector3D_Unit0);
}"
1464,"    public TriangleMesh readTriangleMesh() {
        PolygonObjParser.Face face;
        Vector3D definedNormal;
        Iterator<PolygonObjParser.VertexAttributes> attrs;
        while ((face = readFace()) != null) {
            // get the face attributes in the proper counter-clockwise orientation
            definedNormal = face.getDefinedCompositeNormal(normals::get);
            attrs = face.getVertexAttributesCounterClockwise(definedNormal, meshBuilder::getVertex).iterator();

            // add the face vertices using a triangle fan
            final int p0 = attrs.next().getVertexIndex();
            int p1 = attrs.next().getVertexIndex();
            int p2;

            while (attrs.hasNext()) {
                p2 = attrs.next().getVertexIndex();

                meshBuilder.addFace(p0, p1, p2);

                p1 = p2;
            }
        }

        return meshBuilder.build();
    }","  public void test0()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""_mk="");
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      ObjTriangleMeshReader objTriangleMeshReader0 = new ObjTriangleMeshReader(stringReader0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        objTriangleMeshReader0.readTriangleMesh();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: expected OBJ keyword but found empty token followed by [_]
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1465,"    public TriangleMesh readTriangleMesh() {
        PolygonObjParser.Face face;
        Vector3D definedNormal;
        Iterator<PolygonObjParser.VertexAttributes> attrs;
        while ((face = readFace()) != null) {
            // get the face attributes in the proper counter-clockwise orientation
            definedNormal = face.getDefinedCompositeNormal(normals::get);
            attrs = face.getVertexAttributesCounterClockwise(definedNormal, meshBuilder::getVertex).iterator();

            // add the face vertices using a triangle fan
            final int p0 = attrs.next().getVertexIndex();
            int p1 = attrs.next().getVertexIndex();
            int p2;

            while (attrs.hasNext()) {
                p2 = attrs.next().getVertexIndex();

                meshBuilder.addFace(p0, p1, p2);

                p1 = p2;
            }
        }

        return meshBuilder.build();
    }","  public void test1()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""OJ+A4+- g W!yp"");
      stringReader0.close();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      ObjTriangleMeshReader objTriangleMeshReader0 = new ObjTriangleMeshReader(stringReader0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        objTriangleMeshReader0.readTriangleMesh();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1466,"    protected void handleVertex(final Vector3D vertex) {
        meshBuilder.addVertex(vertex);
    }","  public void test2()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      ObjTriangleMeshReader objTriangleMeshReader0 = new ObjTriangleMeshReader(stringReader0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        objTriangleMeshReader0.handleVertex((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Bounds3D$Builder"", e);
      }
  }"
1467,"    protected void handleVertex(final Vector3D vertex) {
        meshBuilder.addVertex(vertex);
    }","  public void test3()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""FwX s+%G@#%-q"");
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      ObjTriangleMeshReader objTriangleMeshReader0 = new ObjTriangleMeshReader(stringReader0, precision_DoubleEquivalence0);
      AxisSequence axisSequence0 = AxisSequence.YXY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      objTriangleMeshReader0.readTriangleMesh();
      // Undeclared exception!
      try { 
        objTriangleMeshReader0.handleVertex(vector3D0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Builder instance cannot be modified: mesh construction is complete
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.mesh.SimpleTriangleMesh$Builder"", e);
      }
  }"
1468,"    public ObjTriangleMeshReader(final Reader reader, final Precision.DoubleEquivalence precision) {
        super(reader);

        this.meshBuilder = SimpleTriangleMesh.builder(precision);
    }","  public void test4()  throws Throwable  {
      ObjTriangleMeshReader objTriangleMeshReader0 = null;
      try {
        objTriangleMeshReader0 = new ObjTriangleMeshReader((Reader) null, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Reader cannot be null
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
1469,"    protected void handleNormal(final Vector3D normal) {
        normals.add(normal);
    }","  public void test5()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      ObjTriangleMeshReader objTriangleMeshReader0 = new ObjTriangleMeshReader(stringReader0, precision_DoubleEquivalence0);
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      objTriangleMeshReader0.handleNormal(vector3D0);
}"
1470,"    public TriangleMesh readTriangleMesh() {
        PolygonObjParser.Face face;
        Vector3D definedNormal;
        Iterator<PolygonObjParser.VertexAttributes> attrs;
        while ((face = readFace()) != null) {
            // get the face attributes in the proper counter-clockwise orientation
            definedNormal = face.getDefinedCompositeNormal(normals::get);
            attrs = face.getVertexAttributesCounterClockwise(definedNormal, meshBuilder::getVertex).iterator();

            // add the face vertices using a triangle fan
            final int p0 = attrs.next().getVertexIndex();
            int p1 = attrs.next().getVertexIndex();
            int p2;

            while (attrs.hasNext()) {
                p2 = attrs.next().getVertexIndex();

                meshBuilder.addFace(p0, p1, p2);

                p1 = p2;
            }
        }

        return meshBuilder.build();
    }","  public void test6()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      ObjTriangleMeshReader objTriangleMeshReader0 = new ObjTriangleMeshReader(stringReader0, precision_DoubleEquivalence0);
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      objTriangleMeshReader0.handleVertex(vector3D0);
      TriangleMesh triangleMesh0 = objTriangleMeshReader0.readTriangleMesh();
}"
1471,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test0()  throws Throwable  {
      Vector<PolygonObjParser.VertexAttributes> vector0 = new Vector<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(1526, 1526, (-139));
      vector0.add(polygonObjParser_VertexAttributes0);
      vector0.add(polygonObjParser_VertexAttributes0);
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(vector0);
      vector0.add(polygonObjParser_VertexAttributes0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit3 = vector3D_Unit1.orthogonal();
      IntFunction<Vector3D> intFunction0 = (IntFunction<Vector3D>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(vector3D_Unit1, vector3D_Unit3, vector3D_Unit0, vector3D_Unit1, vector3D_Unit3).when(intFunction0).apply(anyInt());
      List<Vector3D> list0 = polygonObjParser_Face0.getVerticesCounterClockwise(vector3D_Unit2, intFunction0);
}"
1472,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test1()  throws Throwable  {
      LinkedList<PolygonObjParser.VertexAttributes> linkedList0 = new LinkedList<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(47, (-1999410896), (-1));
      linkedList0.add(polygonObjParser_VertexAttributes0);
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(linkedList0);
      IntFunction<Vector3D> intFunction0 = (IntFunction<Vector3D>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      Vector3D vector3D0 = polygonObjParser_Face0.getDefinedCompositeNormal(intFunction0);
}"
1473,"    public Face readFace() {
        final List<VertexAttributes> vertices = new ArrayList<>();

        while (nextDataLineContent()) {
            vertices.add(readFaceVertex());
        }

        if (vertices.size() < EuclideanUtils.TRIANGLE_VERTEX_COUNT) {
            throw getTextParser().parseError(
                    ""face must contain at least "" + EuclideanUtils.TRIANGLE_VERTEX_COUNT +
                    "" vertices but found only "" + vertices.size());
        }

        discardDataLine();

        return new Face(vertices);
    }","  public void test2()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""0Y'BRZ7w2On#N5!c"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      // Undeclared exception!
      try { 
        polygonObjParser0.readFace();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: vertex index cannot be used because no values of that type have been defined
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1474,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test3()  throws Throwable  {
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes((-1084), (-958), (-1084));
      int int0 = polygonObjParser_VertexAttributes0.getVertexIndex();
}"
1475,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test4()  throws Throwable  {
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes((-1084), (-958), (-1084));
      int int0 = polygonObjParser_VertexAttributes0.getVertexIndex();
}"
1476,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test5()  throws Throwable  {
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes((-1084), (-958), (-1084));
      int int0 = polygonObjParser_VertexAttributes0.getVertexIndex();
}"
1477,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test6()  throws Throwable  {
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(787, 787, 787);
      int int0 = polygonObjParser_VertexAttributes0.getNormalIndex();
}"
1478,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test7()  throws Throwable  {
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(787, 787, 787);
      int int0 = polygonObjParser_VertexAttributes0.getNormalIndex();
}"
1479,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test8()  throws Throwable  {
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(787, 787, 787);
      int int0 = polygonObjParser_VertexAttributes0.getNormalIndex();
}"
1480,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test9()  throws Throwable  {
      LinkedList<PolygonObjParser.VertexAttributes> linkedList0 = new LinkedList<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(linkedList0);
      IntFunction<Vector3D> intFunction0 = (IntFunction<Vector3D>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      List<PolygonObjParser.VertexAttributes> list0 = polygonObjParser_Face0.getVertexAttributesCounterClockwise((Vector3D) null, intFunction0);
}"
1481,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test10()  throws Throwable  {
      Stack<PolygonObjParser.VertexAttributes> stack0 = new Stack<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(stack0);
      // Undeclared exception!
      try { 
        polygonObjParser_Face0.computeNormalFromVertices((IntFunction<Vector3D>) null);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException(""java.util.Vector"", e);
      }
  }"
1482,"    public boolean isFailOnNonPolygonKeywords() {
        return failOnNonPolygonKeywords;
    }","  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""F^vk<5*0V*-H*2t[GU"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      polygonObjParser0.setFailOnNonPolygonKeywords(true);
      boolean boolean0 = polygonObjParser0.isFailOnNonPolygonKeywords();
}"
1483,"    public int getVertexCount() {
        return vertexCount;
    }","  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""v"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      polygonObjParser0.handleKeyword(""v"");
      int int0 = polygonObjParser0.getVertexCount();
}"
1484,"    public int getTextureCoordinateCount() {
        return textureCoordinateCount;
    }","  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""vt"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      polygonObjParser0.nextKeyword();
      int int0 = polygonObjParser0.getTextureCoordinateCount();
}"
1485,"    public Face readFace() {
        final List<VertexAttributes> vertices = new ArrayList<>();

        while (nextDataLineContent()) {
            vertices.add(readFaceVertex());
        }

        if (vertices.size() < EuclideanUtils.TRIANGLE_VERTEX_COUNT) {
            throw getTextParser().parseError(
                    ""face must contain at least "" + EuclideanUtils.TRIANGLE_VERTEX_COUNT +
                    "" vertices but found only "" + vertices.size());
        }

        discardDataLine();

        return new Face(vertices);
    }","  public void test14()  throws Throwable  {
      PolygonObjParser polygonObjParser0 = new PolygonObjParser((SimpleTextParser) null);
      // Undeclared exception!
      try { 
        polygonObjParser0.readFace();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.AbstractObjParser"", e);
      }
  }"
1486,"    public Face readFace() {
        final List<VertexAttributes> vertices = new ArrayList<>();

        while (nextDataLineContent()) {
            vertices.add(readFaceVertex());
        }

        if (vertices.size() < EuclideanUtils.TRIANGLE_VERTEX_COUNT) {
            throw getTextParser().parseError(
                    ""face must contain at least "" + EuclideanUtils.TRIANGLE_VERTEX_COUNT +
                    "" vertices but found only "" + vertices.size());
        }

        discardDataLine();

        return new Face(vertices);
    }","  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""@"");
      stringReader0.close();
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      // Undeclared exception!
      try { 
        polygonObjParser0.readFace();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1487,"    protected void handleKeyword(final String keywordValue) {
        if (failOnNonPolygonKeywords && !STANDARD_POLYGON_KEYWORDS.contains(keywordValue)) {
            final String allowedKeywords = STANDARD_POLYGON_KEYWORDS.stream()
                    .sorted()
                    .collect(Collectors.joining("", ""));

            throw getTextParser().tokenError(""expected keyword to be one of ["" + allowedKeywords +
                    ""] but was ["" + keywordValue + ""]"");
        }

        // update counts in order to validate face vertex attributes
        switch (keywordValue) {
        case ObjConstants.VERTEX_KEYWORD:
            ++vertexCount;
            break;
        case ObjConstants.VERTEX_NORMAL_KEYWORD:
            ++vertexNormalCount;
            break;
        case ObjConstants.TEXTURE_COORDINATE_KEYWORD:
            ++textureCoordinateCount;
            break;
        default:
            break;
        }
    }","  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""5?G27R9DP"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      // Undeclared exception!
      try { 
        polygonObjParser0.handleKeyword((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.PolygonObjParser"", e);
      }
  }"
1488,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test17()  throws Throwable  {
      PolygonObjParser polygonObjParser0 = null;
      try {
        polygonObjParser0 = new PolygonObjParser((Reader) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Reader cannot be null
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
1489,"    public int getVertexNormalCount() {
        return vertexNormalCount;
    }","  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""iMi/*w+9n&nG6JDj"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(simpleTextParser0);
      polygonObjParser0.handleKeyword(""vn"");
      int int0 = polygonObjParser0.getVertexNormalCount();
}"
1490,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test19()  throws Throwable  {
      Vector<PolygonObjParser.VertexAttributes> vector0 = new Vector<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(575, 575, 575);
      vector0.add(polygonObjParser_VertexAttributes0);
      vector0.add(polygonObjParser_VertexAttributes0);
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(vector0);
      vector0.add(polygonObjParser_VertexAttributes0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.orthogonal();
      IntFunction<Vector3D> intFunction0 = (IntFunction<Vector3D>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(vector3D_Unit1, vector3D_Unit2, vector3D_Unit0, vector3D_Unit1, vector3D_Unit2).when(intFunction0).apply(anyInt());
      List<Vector3D> list0 = polygonObjParser_Face0.getVerticesCounterClockwise(vector3D_Unit1, intFunction0);
}"
1491,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test20()  throws Throwable  {
      Vector<PolygonObjParser.VertexAttributes> vector0 = new Vector<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(1514, 1514, 1514);
      vector0.add(polygonObjParser_VertexAttributes0);
      vector0.add(polygonObjParser_VertexAttributes0);
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(vector0);
      vector0.add(polygonObjParser_VertexAttributes0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.orthogonal();
      IntFunction<Vector3D> intFunction0 = (IntFunction<Vector3D>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(vector3D_Unit1, vector3D_Unit2, vector3D_Unit0, vector3D_Unit2, vector3D_Unit1).when(intFunction0).apply(anyInt());
      List<Vector3D> list0 = polygonObjParser_Face0.getVerticesCounterClockwise(vector3D_Unit0, intFunction0);
}"
1492,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test21()  throws Throwable  {
      Vector<PolygonObjParser.VertexAttributes> vector0 = new Vector<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(575, 575, 575);
      vector0.add(polygonObjParser_VertexAttributes0);
      vector0.add(polygonObjParser_VertexAttributes0);
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(vector0);
      vector0.add(polygonObjParser_VertexAttributes0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      IntFunction<Vector3D> intFunction0 = (IntFunction<Vector3D>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0).when(intFunction0).apply(anyInt());
      List<Vector3D> list0 = polygonObjParser_Face0.getVerticesCounterClockwise(vector3D_Unit0, intFunction0);
}"
1493,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test22()  throws Throwable  {
      Vector<PolygonObjParser.VertexAttributes> vector0 = new Vector<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(1486, 1486, (-133));
      vector0.add(polygonObjParser_VertexAttributes0);
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(vector0);
      IntFunction<Vector3D> intFunction0 = (IntFunction<Vector3D>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      Vector3D vector3D0 = polygonObjParser_Face0.getDefinedCompositeNormal(intFunction0);
}"
1494,"    public Face readFace() {
        final List<VertexAttributes> vertices = new ArrayList<>();

        while (nextDataLineContent()) {
            vertices.add(readFaceVertex());
        }

        if (vertices.size() < EuclideanUtils.TRIANGLE_VERTEX_COUNT) {
            throw getTextParser().parseError(
                    ""face must contain at least "" + EuclideanUtils.TRIANGLE_VERTEX_COUNT +
                    "" vertices but found only "" + vertices.size());
        }

        discardDataLine();

        return new Face(vertices);
    }","  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""8"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      polygonObjParser0.handleKeyword(""v"");
      // Undeclared exception!
      try { 
        polygonObjParser0.readFace();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: vertex index must evaluate to be within the range [1, 1] but was 8
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1495,"    public Face readFace() {
        final List<VertexAttributes> vertices = new ArrayList<>();

        while (nextDataLineContent()) {
            vertices.add(readFaceVertex());
        }

        if (vertices.size() < EuclideanUtils.TRIANGLE_VERTEX_COUNT) {
            throw getTextParser().parseError(
                    ""face must contain at least "" + EuclideanUtils.TRIANGLE_VERTEX_COUNT +
                    "" vertices but found only "" + vertices.size());
        }

        discardDataLine();

        return new Face(vertices);
    }","  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""-2x6A46}{1*n\""N8vF"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      // Undeclared exception!
      try { 
        polygonObjParser0.readFace();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: vertex index cannot be used because no values of that type have been defined
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1496,"    public Face readFace() {
        final List<VertexAttributes> vertices = new ArrayList<>();

        while (nextDataLineContent()) {
            vertices.add(readFaceVertex());
        }

        if (vertices.size() < EuclideanUtils.TRIANGLE_VERTEX_COUNT) {
            throw getTextParser().parseError(
                    ""face must contain at least "" + EuclideanUtils.TRIANGLE_VERTEX_COUNT +
                    "" vertices but found only "" + vertices.size());
        }

        discardDataLine();

        return new Face(vertices);
    }","  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""1o<9Av4"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      polygonObjParser0.handleKeyword(""v"");
      // Undeclared exception!
      try { 
        polygonObjParser0.readFace();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 2: expected integer but found empty token followed by [o]
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1497,"    public Face readFace() {
        final List<VertexAttributes> vertices = new ArrayList<>();

        while (nextDataLineContent()) {
            vertices.add(readFaceVertex());
        }

        if (vertices.size() < EuclideanUtils.TRIANGLE_VERTEX_COUNT) {
            throw getTextParser().parseError(
                    ""face must contain at least "" + EuclideanUtils.TRIANGLE_VERTEX_COUNT +
                    "" vertices but found only "" + vertices.size());
        }

        discardDataLine();

        return new Face(vertices);
    }","  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""1o<9Av4"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      // Undeclared exception!
      try { 
        polygonObjParser0.readFace();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: vertex index cannot be used because no values of that type have been defined
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1498,"    public int getVertexCount() {
        return vertexCount;
    }","  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""1o<9Av4"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      polygonObjParser0.handleKeyword(""1o<9Av4"");
}"
1499,"    public int getVertexNormalCount() {
        return vertexNormalCount;
    }","  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""1o<9Av4"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      polygonObjParser0.handleKeyword(""1o<9Av4"");
}"
1500,"    public boolean isFailOnNonPolygonKeywords() {
        return failOnNonPolygonKeywords;
    }","  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""vt"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      polygonObjParser0.setFailOnNonPolygonKeywords(true);
      polygonObjParser0.handleKeyword(""vt"");
}"
1501,"    public Face readFace() {
        final List<VertexAttributes> vertices = new ArrayList<>();

        while (nextDataLineContent()) {
            vertices.add(readFaceVertex());
        }

        if (vertices.size() < EuclideanUtils.TRIANGLE_VERTEX_COUNT) {
            throw getTextParser().parseError(
                    ""face must contain at least "" + EuclideanUtils.TRIANGLE_VERTEX_COUNT +
                    "" vertices but found only "" + vertices.size());
        }

        discardDataLine();

        return new Face(vertices);
    }","  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""vt"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      polygonObjParser0.nextKeyword();
      // Undeclared exception!
      try { 
        polygonObjParser0.readFace();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 3: face must contain at least 3 vertices but found only 0
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1502,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test31()  throws Throwable  {
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(1514, 1514, 1514);
      int int0 = polygonObjParser_VertexAttributes0.getTextureIndex();
}"
1503,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test32()  throws Throwable  {
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(1514, 1514, 1514);
      int int0 = polygonObjParser_VertexAttributes0.getTextureIndex();
}"
1504,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test33()  throws Throwable  {
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(1514, 1514, 1514);
      int int0 = polygonObjParser_VertexAttributes0.getTextureIndex();
}"
1505,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test34()  throws Throwable  {
      Vector<PolygonObjParser.VertexAttributes> vector0 = new Vector<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(1514, 1514, 1514);
      vector0.add(polygonObjParser_VertexAttributes0);
}"
1506,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test35()  throws Throwable  {
      Vector<PolygonObjParser.VertexAttributes> vector0 = new Vector<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(1514, 1514, 1514);
      vector0.add(polygonObjParser_VertexAttributes0);
}"
1507,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test36()  throws Throwable  {
      Vector<PolygonObjParser.VertexAttributes> vector0 = new Vector<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(1514, 1514, 1514);
      vector0.add(polygonObjParser_VertexAttributes0);
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(vector0);
      int[] intArray0 = polygonObjParser_Face0.getVertexIndices();
}"
1508,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test37()  throws Throwable  {
      LinkedList<PolygonObjParser.VertexAttributes> linkedList0 = new LinkedList<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(linkedList0);
      IntFunction<Vector3D> intFunction0 = (IntFunction<Vector3D>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Vector3D) null).when(intFunction0).apply(anyInt());
      PolygonObjParser.VertexAttributes polygonObjParser_VertexAttributes0 = new PolygonObjParser.VertexAttributes(0, (-1999410896), 0);
      linkedList0.add(polygonObjParser_VertexAttributes0);
      // Undeclared exception!
      try { 
        polygonObjParser_Face0.getDefinedCompositeNormal(intFunction0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
1509,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test38()  throws Throwable  {
      LinkedList<PolygonObjParser.VertexAttributes> linkedList0 = new LinkedList<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(linkedList0);
      int[] intArray0 = polygonObjParser_Face0.getTextureIndices();
}"
1510,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test39()  throws Throwable  {
      Vector<PolygonObjParser.VertexAttributes> vector0 = new Vector<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(vector0);
      int[] intArray0 = polygonObjParser_Face0.getNormalIndices();
}"
1511,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test40()  throws Throwable  {
      Vector<PolygonObjParser.VertexAttributes> vector0 = new Vector<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(vector0);
      List<PolygonObjParser.VertexAttributes> list0 = polygonObjParser_Face0.getVertexAttributes();
}"
1512,"    public PolygonObjParser(final Reader reader) {
        this(new SimpleTextParser(reader));
    }","  public void test41()  throws Throwable  {
      Stack<PolygonObjParser.VertexAttributes> stack0 = new Stack<PolygonObjParser.VertexAttributes>();
      PolygonObjParser.Face polygonObjParser_Face0 = new PolygonObjParser.Face(stack0);
      IntFunction<Vector3D> intFunction0 = (IntFunction<Vector3D>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      List<Vector3D> list0 = polygonObjParser_Face0.getVertices(intFunction0);
}"
1513,"    public boolean isFailOnNonPolygonKeywords() {
        return failOnNonPolygonKeywords;
    }","  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""n"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      boolean boolean0 = polygonObjParser0.isFailOnNonPolygonKeywords();
}"
1514,"    protected void handleKeyword(final String keywordValue) {
        if (failOnNonPolygonKeywords && !STANDARD_POLYGON_KEYWORDS.contains(keywordValue)) {
            final String allowedKeywords = STANDARD_POLYGON_KEYWORDS.stream()
                    .sorted()
                    .collect(Collectors.joining("", ""));

            throw getTextParser().tokenError(""expected keyword to be one of ["" + allowedKeywords +
                    ""] but was ["" + keywordValue + ""]"");
        }

        // update counts in order to validate face vertex attributes
        switch (keywordValue) {
        case ObjConstants.VERTEX_KEYWORD:
            ++vertexCount;
            break;
        case ObjConstants.VERTEX_NORMAL_KEYWORD:
            ++vertexNormalCount;
            break;
        case ObjConstants.TEXTURE_COORDINATE_KEYWORD:
            ++textureCoordinateCount;
            break;
        default:
            break;
        }
    }","  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""e2 Prb%J:c"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      polygonObjParser0.setFailOnNonPolygonKeywords(true);
      // Undeclared exception!
      try { 
        polygonObjParser0.handleKeyword(""e2 Prb%J:c"");
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: expected keyword to be one of [f, g, mtllib, o, s, usemtl, v, vn, vt] but was [e2 Prb%J:c]
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1515,"    public int getVertexCount() {
        return vertexCount;
    }","  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""n"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      int int0 = polygonObjParser0.getVertexCount();
}"
1516,"    public int getTextureCoordinateCount() {
        return textureCoordinateCount;
    }","  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""n"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      int int0 = polygonObjParser0.getTextureCoordinateCount();
}"
1517,"    public int getVertexNormalCount() {
        return vertexNormalCount;
    }","  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""n"");
      PolygonObjParser polygonObjParser0 = new PolygonObjParser(stringReader0);
      int int0 = polygonObjParser0.getVertexNormalCount();
}"
1518,"    public String getLineSeparator() {
        return lineSeparator;
    }","  public void test0()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.empty();
      MockFile mockFile0 = new MockFile(""L2d@V9.}H%}-qR"", ""c3q-(3rE]!:0=*}"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockPrintStream0);
      objBoundaryWriteHandler3D0.write((BoundarySource3D) regionBSPTree3D0, (GeometryOutput) streamGeometryOutput0);
}"
1519,"    public int getMeshBufferBatchSize() {
        return meshBufferBatchSize;
    }","  public void test1()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.empty();
      MockFile mockFile0 = new MockFile(""L2d@V9.}H%}-qR"", ""c3q-(3rE]!:0=*}"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockPrintStream0);
      objBoundaryWriteHandler3D0.write((BoundarySource3D) regionBSPTree3D0, (GeometryOutput) streamGeometryOutput0);
}"
1520,"    public int getMeshBufferBatchSize() {
        return meshBufferBatchSize;
    }","  public void test2()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
}"
1521,"    public int getMeshBufferBatchSize() {
        return meshBufferBatchSize;
    }","  public void test3()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      objBoundaryWriteHandler3D0.setMeshBufferBatchSize(0);
      int int0 = objBoundaryWriteHandler3D0.getMeshBufferBatchSize();
}"
1522,"    public int getMeshBufferBatchSize() {
        return meshBufferBatchSize;
    }","  public void test4()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      objBoundaryWriteHandler3D0.setMeshBufferBatchSize(497);
      int int0 = objBoundaryWriteHandler3D0.getMeshBufferBatchSize();
}"
1523,"    public String getLineSeparator() {
        return lineSeparator;
    }","  public void test5()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
}"
1524,"    public int getMeshBufferBatchSize() {
        return meshBufferBatchSize;
    }","  public void test6()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      objBoundaryWriteHandler3D0.setLineSeparator((String) null);
      objBoundaryWriteHandler3D0.getLineSeparator();
}"
1525,"    public String getLineSeparator() {
        return lineSeparator;
    }","  public void test7()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
}"
1526,"    public int getMeshBufferBatchSize() {
        return meshBufferBatchSize;
    }","  public void test8()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      objBoundaryWriteHandler3D0.setLineSeparator("""");
      objBoundaryWriteHandler3D0.getLineSeparator();
}"
1527,"    public int getMeshBufferBatchSize() {
        return meshBufferBatchSize;
    }","  public void test9()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      objBoundaryWriteHandler3D0.setDoubleFormat((DoubleFunction<String>) null);
      objBoundaryWriteHandler3D0.getDoubleFormat();
}"
1528,"    public String getLineSeparator() {
        return lineSeparator;
    }","  public void test10()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      objBoundaryWriteHandler3D0.setDoubleFormat((DoubleFunction<String>) null);
      objBoundaryWriteHandler3D0.getDoubleFormat();
}"
1529,"    public String getLineSeparator() {
        return lineSeparator;
    }","  public void test11()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      objBoundaryWriteHandler3D0.setDefaultCharset((Charset) null);
      objBoundaryWriteHandler3D0.getDefaultCharset();
}"
1530,"    public int getMeshBufferBatchSize() {
        return meshBufferBatchSize;
    }","  public void test12()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      objBoundaryWriteHandler3D0.setDefaultCharset((Charset) null);
      objBoundaryWriteHandler3D0.getDefaultCharset();
}"
1531,"    public void writeFacets(final Stream<? extends FacetDefinition> facets, final GeometryOutput out) {
        try (ObjWriter writer = createWriter(out)) {
            final ObjWriter.MeshBuffer meshBuffer = writer.meshBuffer(meshBufferBatchSize);

            final Iterator<? extends FacetDefinition> it = facets.iterator();
            while (it.hasNext()) {
                meshBuffer.add(it.next());
            }

            meshBuffer.flush();
        }
    }","  public void test13()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      UnaryOperator<SimpleFacetDefinition> unaryOperator0 = UnaryOperator.identity();
      Stream<SimpleFacetDefinition> stream0 = Stream.iterate((SimpleFacetDefinition) null, unaryOperator0);
      FileGeometryOutput fileGeometryOutput0 = new FileGeometryOutput((Path) null);
      // Undeclared exception!
      try { 
        objBoundaryWriteHandler3D0.writeFacets((Stream<? extends FacetDefinition>) stream0, (GeometryOutput) fileGeometryOutput0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.file.Files"", e);
      }
  }"
1532,"    public void writeFacets(final Stream<? extends FacetDefinition> facets, final GeometryOutput out) {
        try (ObjWriter writer = createWriter(out)) {
            final ObjWriter.MeshBuffer meshBuffer = writer.meshBuffer(meshBufferBatchSize);

            final Iterator<? extends FacetDefinition> it = facets.iterator();
            while (it.hasNext()) {
                meshBuffer.add(it.next());
            }

            meshBuffer.flush();
        }
    }","  public void test14()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      Stream<SimpleFacetDefinition> stream0 = Stream.empty();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""\n"", true);
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockFileOutputStream0, ""\n"");
      objBoundaryWriteHandler3D0.writeFacets((Stream<? extends FacetDefinition>) stream0, (GeometryOutput) streamGeometryOutput0);
      // Undeclared exception!
      try { 
        objBoundaryWriteHandler3D0.writeFacets((Stream<? extends FacetDefinition>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // stream has already been operated upon or closed
         //
         verifyException(""java.util.stream.AbstractPipeline"", e);
      }
  }"
1533,"    public void writeFacets(final Stream<? extends FacetDefinition> facets, final GeometryOutput out) {
        try (ObjWriter writer = createWriter(out)) {
            final ObjWriter.MeshBuffer meshBuffer = writer.meshBuffer(meshBufferBatchSize);

            final Iterator<? extends FacetDefinition> it = facets.iterator();
            while (it.hasNext()) {
                meshBuffer.add(it.next());
            }

            meshBuffer.flush();
        }
    }","  public void test15()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Stream<SimpleFacetDefinition> stream0 = Stream.empty();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""\n"", false);
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockFileOutputStream0, ""org.apache.commons.geometry.euclidean.threed.rotation.AxisReferenceFrame"");
      // Undeclared exception!
      try { 
        objBoundaryWriteHandler3D0.writeFacets((Stream<? extends FacetDefinition>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Simulated IOException
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1534,"    public void write(final BoundarySource3D src, final GeometryOutput out) {
        // write meshes directly instead of iterating through boundaries
        if (src instanceof Mesh) {
            try (ObjWriter writer = createWriter(out)) {
                writer.writeMesh((Mesh<?>) src);
            }
        } else {
            super.write(src, out);
        }
    }","  public void test16()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      ConvexVolume convexVolume0 = ConvexVolume.full();
      // Undeclared exception!
      try { 
        objBoundaryWriteHandler3D0.write((BoundarySource3D) convexVolume0, (GeometryOutput) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1535,"    public void write(final BoundarySource3D src, final GeometryOutput out) {
        // write meshes directly instead of iterating through boundaries
        if (src instanceof Mesh) {
            try (ObjWriter writer = createWriter(out)) {
                writer.writeMesh((Mesh<?>) src);
            }
        } else {
            super.write(src, out);
        }
    }","  public void test17()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.empty();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""*e 2'gyp]"");
      Charset charset0 = Charset.defaultCharset();
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockFileOutputStream0, ""A"", charset0);
      // Undeclared exception!
      try { 
        objBoundaryWriteHandler3D0.write((BoundarySource3D) regionBSPTree3D0, (GeometryOutput) streamGeometryOutput0);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Simulated IOException
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1536,"    public void write(final BoundarySource3D src, final GeometryOutput out) {
        // write meshes directly instead of iterating through boundaries
        if (src instanceof Mesh) {
            try (ObjWriter writer = createWriter(out)) {
                writer.writeMesh((Mesh<?>) src);
            }
        } else {
            super.write(src, out);
        }
    }","  public void test18()  throws Throwable  {
      OutputStream outputStream0 = null;
      Locale locale0 = new Locale("""", """");
      Locale locale1 = Locale.CHINESE;
      locale0.getDisplayVariant(locale1);
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      PlaneConvexSubset planeConvexSubset0 = mock(PlaneConvexSubset.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(planeConvexSubset0).isInfinite();
      doReturn(false).when(planeConvexSubset0).isEmpty();
      doReturn((List) null).when(planeConvexSubset0).getVertices();
      Supplier<PlaneConvexSubset> supplier0 = (Supplier<PlaneConvexSubset>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(planeConvexSubset0).when(supplier0).get();
      Stream<PlaneConvexSubset> stream0 = Stream.generate(supplier0);
      objBoundaryWriteHandler3D0.getLineSeparator();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale.lookupTag(linkedList0, arrayList0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(pipedOutputStream0);
      // Undeclared exception!
      try { 
        objBoundaryWriteHandler3D0.write((Stream<? extends PlaneConvexSubset>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.ObjWriter$MeshBuffer"", e);
      }
  }"
1537,"    public void write(final BoundarySource3D src, final GeometryOutput out) {
        // write meshes directly instead of iterating through boundaries
        if (src instanceof Mesh) {
            try (ObjWriter writer = createWriter(out)) {
                writer.writeMesh((Mesh<?>) src);
            }
        } else {
            super.write(src, out);
        }
    }","  public void test19()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      PlaneConvexSubset planeConvexSubset0 = mock(PlaneConvexSubset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(planeConvexSubset0).toString();
      doReturn(true).when(planeConvexSubset0).isInfinite();
      Supplier<PlaneConvexSubset> supplier0 = (Supplier<PlaneConvexSubset>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(planeConvexSubset0).when(supplier0).get();
      Stream<PlaneConvexSubset> stream0 = Stream.generate(supplier0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(pipedOutputStream0);
      // Undeclared exception!
      try { 
        objBoundaryWriteHandler3D0.write((Stream<? extends PlaneConvexSubset>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // OBJ input geometry cannot be infinite: null
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.ObjWriter$MeshBuffer"", e);
      }
  }"
1538,"    public void write(final BoundarySource3D src, final GeometryOutput out) {
        // write meshes directly instead of iterating through boundaries
        if (src instanceof Mesh) {
            try (ObjWriter writer = createWriter(out)) {
                writer.writeMesh((Mesh<?>) src);
            }
        } else {
            super.write(src, out);
        }
    }","  public void test20()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      Stream<PlaneConvexSubset> stream0 = Stream.empty();
      MockFile mockFile0 = new MockFile(""G\""&zq%9q$"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset charset0 = objBoundaryWriteHandler3D0.getDefaultCharset();
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockFileOutputStream0, ""org.apache.commons.geometry.io.euclidean.threed.obj.ObjBoundaryWriteHandler3D"", charset0);
      // Undeclared exception!
      try { 
        objBoundaryWriteHandler3D0.write((Stream<? extends PlaneConvexSubset>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Simulated IOException
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
1539,"    public void writeFacets(final Stream<? extends FacetDefinition> facets, final GeometryOutput out) {
        try (ObjWriter writer = createWriter(out)) {
            final ObjWriter.MeshBuffer meshBuffer = writer.meshBuffer(meshBufferBatchSize);

            final Iterator<? extends FacetDefinition> it = facets.iterator();
            while (it.hasNext()) {
                meshBuffer.add(it.next());
            }

            meshBuffer.flush();
        }
    }","  public void test21()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      MockPrintStream mockPrintStream0 = new MockPrintStream(""v"");
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockPrintStream0, ""v"");
      Supplier<SimpleFacetDefinition> supplier0 = (Supplier<SimpleFacetDefinition>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      Stream<SimpleFacetDefinition> stream0 = Stream.generate(supplier0);
      // Undeclared exception!
      try { 
        objBoundaryWriteHandler3D0.writeFacets((Stream<? extends FacetDefinition>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.obj.ObjWriter$MeshBuffer"", e);
      }
  }"
1540,"    public void write(final BoundarySource3D src, final GeometryOutput out) {
        // write meshes directly instead of iterating through boundaries
        if (src instanceof Mesh) {
            try (ObjWriter writer = createWriter(out)) {
                writer.writeMesh((Mesh<?>) src);
            }
        } else {
            super.write(src, out);
        }
    }","  public void test22()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("","", ""U?^G4NjddWQ*Dp"");
      Path path0 = mockFile0.toPath();
      FileGeometryOutput fileGeometryOutput0 = new FileGeometryOutput(path0, charset0);
      // Undeclared exception!
      try { 
        objBoundaryWriteHandler3D0.write((BoundarySource3D) null, (GeometryOutput) fileGeometryOutput0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.euclidean.threed.AbstractBoundaryWriteHandler3D"", e);
      }
  }"
1541,"    public String getLineSeparator() {
        return lineSeparator;
    }","  public void test23()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      int int0 = objBoundaryWriteHandler3D0.getMeshBufferBatchSize();
}"
1542,"    public int getMeshBufferBatchSize() {
        return meshBufferBatchSize;
    }","  public void test24()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      int int0 = objBoundaryWriteHandler3D0.getMeshBufferBatchSize();
}"
1543,"    public void write(final BoundarySource3D src, final GeometryOutput out) {
        // write meshes directly instead of iterating through boundaries
        if (src instanceof Mesh) {
            try (ObjWriter writer = createWriter(out)) {
                writer.writeMesh((Mesh<?>) src);
            }
        } else {
            super.write(src, out);
        }
    }","  public void test25()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      Stream<PlaneConvexSubset> stream0 = Stream.empty();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""G\""&zq%9q$"");
      Charset charset0 = objBoundaryWriteHandler3D0.getDefaultCharset();
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockFileOutputStream0, ""G\""&zq%9q$"", charset0);
      objBoundaryWriteHandler3D0.write((Stream<? extends PlaneConvexSubset>) stream0, (GeometryOutput) streamGeometryOutput0);
      // Undeclared exception!
      try { 
        objBoundaryWriteHandler3D0.write((Stream<? extends PlaneConvexSubset>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // stream has already been operated upon or closed
         //
         verifyException(""java.util.stream.AbstractPipeline"", e);
      }
  }"
1544,"    public String getLineSeparator() {
        return lineSeparator;
    }","  public void test26()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      DoubleFunction<String> doubleFunction0 = objBoundaryWriteHandler3D0.getDoubleFormat();
      objBoundaryWriteHandler3D0.setDoubleFormat(doubleFunction0);
}"
1545,"    public int getMeshBufferBatchSize() {
        return meshBufferBatchSize;
    }","  public void test27()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      DoubleFunction<String> doubleFunction0 = objBoundaryWriteHandler3D0.getDoubleFormat();
      objBoundaryWriteHandler3D0.setDoubleFormat(doubleFunction0);
}"
1546,"    public String getLineSeparator() {
        return lineSeparator;
    }","  public void test28()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      objBoundaryWriteHandler3D0.getFormat();
}"
1547,"    public int getMeshBufferBatchSize() {
        return meshBufferBatchSize;
    }","  public void test29()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      objBoundaryWriteHandler3D0.getFormat();
}"
1548,,"  public void test0()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      // Undeclared exception!
      try { 
        Sphere.from(vector3D_Unit0, 72.02930029345471, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.AbstractNSphere"", e);
      }
  }"
1549,,"  public void test1()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        Circle.from(vector2D0, (-48.8), (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal center point: (Infinity, Infinity)
         //
         verifyException(""org.apache.commons.geometry.euclidean.AbstractNSphere"", e);
      }
  }"
1550,,"  public void test2()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      // Undeclared exception!
      try { 
        Sphere.from(vector3D_Unit0, Double.NEGATIVE_INFINITY, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal radius: -Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.AbstractNSphere"", e);
      }
  }"
1551,"    public abstract V vectorTo(V v);

    /** Return the unit vector representing the direction of displacement from this
     * vector to the given vector. This is exactly equivalent to {@code v.subtract(thisVector).normalize()}","  public void test0()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D vector3D0 = vector3D_Unit0.vectorTo(vector3D_Unit0);
}"
1552,"    public abstract V vectorTo(V v);

    /** Return the unit vector representing the direction of displacement from this
     * vector to the given vector. This is exactly equivalent to {@code v.subtract(thisVector).normalize()}","  public void test1()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D1 = vector1D0.vectorTo(vector1D_Unit0);
}"
1553,"    public abstract V lerp(V v, double t);

    /** Return true if the current instance and given vector are considered equal as evaluated by the
     * given precision context.
     *
     * <p>Equality is determined by comparing each pair of components in turn from the two
     * vectors. If all components evaluate as equal, then the vectors are considered equal. If any are
     * not equal, then the vectors are not considered equal. Note that this approach means that the
     * calculated distance between two ""equal"" vectors may be as much as <code>&radic;(n * eps<sup>2</sup>)</code>,
     * where {@code n}","  public void test2()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from(1819.85141);
      Vector1D vector1D0 = Vector1D.NaN;
      Vector1D vector1D1 = vector1D_Unit0.lerp(vector1D0, (-1.0));
}"
1554,"    public abstract V lerp(V v, double t);

    /** Return true if the current instance and given vector are considered equal as evaluated by the
     * given precision context.
     *
     * <p>Equality is determined by comparing each pair of components in turn from the two
     * vectors. If all components evaluate as equal, then the vectors are considered equal. If any are
     * not equal, then the vectors are not considered equal. Note that this approach means that the
     * calculated distance between two ""equal"" vectors may be as much as <code>&radic;(n * eps<sup>2</sup>)</code>,
     * where {@code n}","  public void test3()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of((-2056.7480733571315), 0.0, 0.0);
      Vector3D.Unit vector3D_Unit0 = vector3D0.normalizeOrNull();
      Vector3D vector3D1 = vector3D_Unit0.lerp(vector3D_Unit0, 0.0);
}"
1555,"    public abstract V lerp(V v, double t);

    /** Return true if the current instance and given vector are considered equal as evaluated by the
     * given precision context.
     *
     * <p>Equality is determined by comparing each pair of components in turn from the two
     * vectors. If all components evaluate as equal, then the vectors are considered equal. If any are
     * not equal, then the vectors are not considered equal. Note that this approach means that the
     * calculated distance between two ""equal"" vectors may be as much as <code>&radic;(n * eps<sup>2</sup>)</code>,
     * where {@code n}","  public void test4()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of(4.149515568880993E180);
      Vector1D.Unit vector1D_Unit0 = vector1D0.normalizeOrNull();
      Vector1D vector1D1 = vector1D_Unit0.lerp(vector1D0, 4.149515568880993E180);
}"
1556,"    public boolean isZero(final Precision.DoubleEquivalence precision) {
        return eq(getZero(), precision);
    }","  public void test5()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(2704.2842, (-6095.105), 0.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      boolean boolean0 = vector3D_Unit0.isZero(precision_DoubleEquivalence0);
}"
1557,"    public abstract boolean eq(V v, Precision.DoubleEquivalence precision);

    /** Return true if the current instance is considered equal to the zero vector as evaluated by the
     * given precision context. This is a convenience method equivalent to
     * {@code vec.equals(vec.getZero(), precision)}","  public void test6()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from(1.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      boolean boolean0 = vector1D_Unit0.eq(vector1D_Unit0, precision_DoubleEquivalence0);
}"
1558,"    public abstract boolean eq(V v, Precision.DoubleEquivalence precision);

    /** Return true if the current instance is considered equal to the zero vector as evaluated by the
     * given precision context. This is a convenience method equivalent to
     * {@code vec.equals(vec.getZero(), precision)}","  public void test7()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from(1.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      boolean boolean0 = vector1D_Unit0.eq(vector1D_Unit0, precision_DoubleEquivalence0);
}"
1559,"    public abstract V directionTo(V v);

    /** Get a vector constructed by linearly interpolating between this vector and the given vector.
     * The vector coordinates are generated by the equation {@code V = (1 - t)*A + t*B}","  public void test8()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(2704.2842, (-6095.105), 0.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, 0.0);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      Vector3D.Unit vector3D_Unit1 = (Vector3D.Unit)vector3D0.directionTo(vector3D_Unit0);
}"
1560,"    public abstract V vectorTo(V v);

    /** Return the unit vector representing the direction of displacement from this
     * vector to the given vector. This is exactly equivalent to {@code v.subtract(thisVector).normalize()}","  public void test9()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector3D0.vectorTo((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
1561,"    public abstract boolean eq(V v, Precision.DoubleEquivalence precision);

    /** Return true if the current instance is considered equal to the zero vector as evaluated by the
     * given precision context. This is a convenience method equivalent to
     * {@code vec.equals(vec.getZero(), precision)}","  public void test10()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from(1029.81);
      // Undeclared exception!
      try { 
        vector1D0.eq(vector1D_Unit0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Vector1D"", e);
      }
  }"
1562,"    public abstract V directionTo(V v);

    /** Get a vector constructed by linearly interpolating between this vector and the given vector.
     * The vector coordinates are generated by the equation {@code V = (1 - t)*A + t*B}","  public void test11()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      // Undeclared exception!
      try { 
        vector1D_Unit0.directionTo((Vector1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Vector1D"", e);
      }
  }"
1563,,"  public void test12()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(3.141592653589793, 3.141592653589793, 3.141592653589793);
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
}"
1564,"    public boolean isZero(final Precision.DoubleEquivalence precision) {
        return eq(getZero(), precision);
    }","  public void test13()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      // Undeclared exception!
      try { 
        vector2D_Unit0.isZero((Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
1565,"    public abstract V directionTo(V v);

    /** Get a vector constructed by linearly interpolating between this vector and the given vector.
     * The vector coordinates are generated by the equation {@code V = (1 - t)*A + t*B}","  public void test14()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      // Undeclared exception!
      try { 
        vector1D0.directionTo(vector1D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
1566,"    public abstract HyperplaneBoundedRegion<P> toRegion(Precision.DoubleEquivalence precision);

    /** Return true if the current instance and argument are considered equal as evaluated by the
     * given precision context. Bounds are considered equal if they contain equivalent min and max
     * points.
     * @param other bounds to compare with
     * @param precision precision context to compare floating point numbers
     * @return true if this instance is equivalent to the argument, as evaluated by the given
     *      precision context
     * @see EuclideanVector#eq(EuclideanVector, Precision.DoubleEquivalence)
     */
    public boolean eq(final B other, final Precision.DoubleEquivalence precision) {
        return min.eq(other.getMin(), precision) &&
                max.eq(other.getMax(), precision);
    }","  public void test0()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.PLUS_X;
      vector2DArray0[2] = (Vector2D) vector2D_Unit1;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      HyperplaneBoundedRegion<Vector2D> hyperplaneBoundedRegion0 = bounds2D0.toRegion(precision_DoubleEquivalence0);
}"
1567,"    public abstract boolean intersects(B other);

    /** Return the intersection of this bounding box and the argument, or null if no intersection exists.
     * Floating point comparisons are strict; values are considered equal only if they match exactly. Note
     * this this method may return bounding boxes with zero size in one or more coordinate axes.
     * @param other bounding box to intersect with
     * @return the intersection of this instance and the argument, or null if no such intersection
     *      exists
     * @see #intersects(AbstractBounds)
     */
    public abstract B intersection(B other);

    /** Return a hyperplane-bounded region containing the same points as this instance.
     * @param precision precision context used for floating point comparisons in the returned
     *      region instance
     * @return a hyperplane-bounded region containing the same points as this instance
     */
    public abstract HyperplaneBoundedRegion<P> toRegion(Precision.DoubleEquivalence precision);

    /** Return true if the current instance and argument are considered equal as evaluated by the
     * given precision context. Bounds are considered equal if they contain equivalent min and max
     * points.
     * @param other bounds to compare with
     * @param precision precision context to compare floating point numbers
     * @return true if this instance is equivalent to the argument, as evaluated by the given
     *      precision context
     * @see EuclideanVector#eq(EuclideanVector, Precision.DoubleEquivalence)
     */
    public boolean eq(final B other, final Precision.DoubleEquivalence precision) {
        return min.eq(other.getMin(), precision) &&
                max.eq(other.getMax(), precision);
    }","  public void test1()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = vector2DArray0[4];
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      boolean boolean0 = bounds2D0.intersects(bounds2D0);
}"
1568,"    public abstract B intersection(B other);

    /** Return a hyperplane-bounded region containing the same points as this instance.
     * @param precision precision context used for floating point comparisons in the returned
     *      region instance
     * @return a hyperplane-bounded region containing the same points as this instance
     */
    public abstract HyperplaneBoundedRegion<P> toRegion(Precision.DoubleEquivalence precision);

    /** Return true if the current instance and argument are considered equal as evaluated by the
     * given precision context. Bounds are considered equal if they contain equivalent min and max
     * points.
     * @param other bounds to compare with
     * @param precision precision context to compare floating point numbers
     * @return true if this instance is equivalent to the argument, as evaluated by the given
     *      precision context
     * @see EuclideanVector#eq(EuclideanVector, Precision.DoubleEquivalence)
     */
    public boolean eq(final B other, final Precision.DoubleEquivalence precision) {
        return min.eq(other.getMin(), precision) &&
                max.eq(other.getMax(), precision);
    }","  public void test2()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = vector2DArray0[5];
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      Bounds2D bounds2D1 = bounds2D0.intersection(bounds2D0);
}"
1569,"    public abstract boolean hasSize(Precision.DoubleEquivalence precision);

    /** Return true if the given point is strictly within or on the boundary of the bounding box.
     * In other words, true if returned if <code>p<sub>t</sub> &gt;= min<sub>t</sub></code> and
     * <code>p<sub>t</sub> &lt;= max<sub>t</sub></code> for each coordinate value <code>t</code>.
     * Floating point comparisons are strict; values are considered equal only if they match exactly.
     * @param pt the point to check
     * @return true if the given point is strictly within or on the boundary of the instance
     * @see #contains(EuclideanVector, Precision.DoubleEquivalence)
     */
    public abstract boolean contains(P pt);

    /** Return true if the given point is within or on the boundary of the bounding box, using the given
     * precision context for floating point comparisons. This is similar to {@link #contains(EuclideanVector)}","  public void test3()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[2];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      boolean boolean0 = bounds2D0.hasSize(precision_DoubleEquivalence0);
}"
1570,"    public abstract boolean hasSize(Precision.DoubleEquivalence precision);

    /** Return true if the given point is strictly within or on the boundary of the bounding box.
     * In other words, true if returned if <code>p<sub>t</sub> &gt;= min<sub>t</sub></code> and
     * <code>p<sub>t</sub> &lt;= max<sub>t</sub></code> for each coordinate value <code>t</code>.
     * Floating point comparisons are strict; values are considered equal only if they match exactly.
     * @param pt the point to check
     * @return true if the given point is strictly within or on the boundary of the instance
     * @see #contains(EuclideanVector, Precision.DoubleEquivalence)
     */
    public abstract boolean contains(P pt);

    /** Return true if the given point is within or on the boundary of the bounding box, using the given
     * precision context for floating point comparisons. This is similar to {@link #contains(EuclideanVector)}","  public void test4()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[2];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      boolean boolean0 = bounds2D0.hasSize(precision_DoubleEquivalence0);
}"
1571,"    public abstract boolean contains(P pt);

    /** Return true if the given point is within or on the boundary of the bounding box, using the given
     * precision context for floating point comparisons. This is similar to {@link #contains(EuclideanVector)}","  public void test5()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[5];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      boolean boolean0 = bounds2D0.contains((Vector2D) vector2D_Unit0, precision_DoubleEquivalence0);
}"
1572,"    public abstract boolean contains(P pt);

    /** Return true if the given point is within or on the boundary of the bounding box, using the given
     * precision context for floating point comparisons. This is similar to {@link #contains(EuclideanVector)}","  public void test6()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = vector2DArray0[2];
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      boolean boolean0 = bounds2D0.contains((Vector2D) vector2D_Unit0);
}"
1573,"    public abstract HyperplaneBoundedRegion<P> toRegion(Precision.DoubleEquivalence precision);

    /** Return true if the current instance and argument are considered equal as evaluated by the
     * given precision context. Bounds are considered equal if they contain equivalent min and max
     * points.
     * @param other bounds to compare with
     * @param precision precision context to compare floating point numbers
     * @return true if this instance is equivalent to the argument, as evaluated by the given
     *      precision context
     * @see EuclideanVector#eq(EuclideanVector, Precision.DoubleEquivalence)
     */
    public boolean eq(final B other, final Precision.DoubleEquivalence precision) {
        return min.eq(other.getMin(), precision) &&
                max.eq(other.getMax(), precision);
    }","  public void test7()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      // Undeclared exception!
      try { 
        bounds2D0.toRegion((Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.shape.Parallelogram"", e);
      }
  }"
1574,"    public abstract HyperplaneBoundedRegion<P> toRegion(Precision.DoubleEquivalence precision);

    /** Return true if the current instance and argument are considered equal as evaluated by the
     * given precision context. Bounds are considered equal if they contain equivalent min and max
     * points.
     * @param other bounds to compare with
     * @param precision precision context to compare floating point numbers
     * @return true if this instance is equivalent to the argument, as evaluated by the given
     *      precision context
     * @see EuclideanVector#eq(EuclideanVector, Precision.DoubleEquivalence)
     */
    public boolean eq(final B other, final Precision.DoubleEquivalence precision) {
        return min.eq(other.getMin(), precision) &&
                max.eq(other.getMax(), precision);
    }","  public void test8()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D[] vector2DArray0 = new Vector2D[5];
      vector2DArray0[0] = vector2D0;
      vector2DArray0[1] = vector2D0;
      vector2DArray0[2] = vector2D0;
      vector2DArray0[3] = vector2D0;
      vector2DArray0[4] = vector2D0;
      Bounds2D bounds2D0 = Bounds2D.from(vector2D0, vector2DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      // Undeclared exception!
      try { 
        bounds2D0.toRegion(precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
1575,"    public abstract boolean intersects(B other);

    /** Return the intersection of this bounding box and the argument, or null if no intersection exists.
     * Floating point comparisons are strict; values are considered equal only if they match exactly. Note
     * this this method may return bounding boxes with zero size in one or more coordinate axes.
     * @param other bounding box to intersect with
     * @return the intersection of this instance and the argument, or null if no such intersection
     *      exists
     * @see #intersects(AbstractBounds)
     */
    public abstract B intersection(B other);

    /** Return a hyperplane-bounded region containing the same points as this instance.
     * @param precision precision context used for floating point comparisons in the returned
     *      region instance
     * @return a hyperplane-bounded region containing the same points as this instance
     */
    public abstract HyperplaneBoundedRegion<P> toRegion(Precision.DoubleEquivalence precision);

    /** Return true if the current instance and argument are considered equal as evaluated by the
     * given precision context. Bounds are considered equal if they contain equivalent min and max
     * points.
     * @param other bounds to compare with
     * @param precision precision context to compare floating point numbers
     * @return true if this instance is equivalent to the argument, as evaluated by the given
     *      precision context
     * @see EuclideanVector#eq(EuclideanVector, Precision.DoubleEquivalence)
     */
    public boolean eq(final B other, final Precision.DoubleEquivalence precision) {
        return min.eq(other.getMin(), precision) &&
                max.eq(other.getMax(), precision);
    }","  public void test9()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = vector2DArray0[2];
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      // Undeclared exception!
      try { 
        bounds2D0.intersects((Bounds2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Bounds2D"", e);
      }
  }"
1576,"    public abstract B intersection(B other);

    /** Return a hyperplane-bounded region containing the same points as this instance.
     * @param precision precision context used for floating point comparisons in the returned
     *      region instance
     * @return a hyperplane-bounded region containing the same points as this instance
     */
    public abstract HyperplaneBoundedRegion<P> toRegion(Precision.DoubleEquivalence precision);

    /** Return true if the current instance and argument are considered equal as evaluated by the
     * given precision context. Bounds are considered equal if they contain equivalent min and max
     * points.
     * @param other bounds to compare with
     * @param precision precision context to compare floating point numbers
     * @return true if this instance is equivalent to the argument, as evaluated by the given
     *      precision context
     * @see EuclideanVector#eq(EuclideanVector, Precision.DoubleEquivalence)
     */
    public boolean eq(final B other, final Precision.DoubleEquivalence precision) {
        return min.eq(other.getMin(), precision) &&
                max.eq(other.getMax(), precision);
    }","  public void test10()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = vector2DArray0[2];
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      // Undeclared exception!
      try { 
        bounds2D0.intersection((Bounds2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Bounds2D"", e);
      }
  }"
1577,"    public boolean eq(final B other, final Precision.DoubleEquivalence precision) {
        return min.eq(other.getMin(), precision) &&
                max.eq(other.getMax(), precision);
    }","  public void test11()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[9];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      vector2DArray0[7] = (Vector2D) vector2D_Unit0;
      vector2DArray0[8] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        bounds2D0.eq((Bounds2D) null, precision_DoubleEquivalence0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.AbstractBounds"", e);
      }
  }"
1578,"    public abstract boolean contains(P pt);

    /** Return true if the given point is within or on the boundary of the bounding box, using the given
     * precision context for floating point comparisons. This is similar to {@link #contains(EuclideanVector)}","  public void test12()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = vector2DArray0[2];
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      // Undeclared exception!
      try { 
        bounds2D0.contains(vector2DArray0[0], (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Bounds2D"", e);
      }
  }"
1579,"    public P getDiagonal() {
        return min.vectorTo(max);
    }","  public void test13()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[5];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      Vector2D vector2D0 = bounds2D0.getDiagonal();
}"
1580,"    public P getMax() {
        return max;
    }","  public void test14()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = vector2DArray0[5];
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      Vector2D vector2D0 = bounds2D0.getMax();
}"
1581,"    public P getMin() {
        return min;
    }","  public void test15()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[2];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      Vector2D vector2D0 = bounds2D0.getMin();
}"
1582,"    public boolean eq(final B other, final Precision.DoubleEquivalence precision) {
        return min.eq(other.getMin(), precision) &&
                max.eq(other.getMax(), precision);
    }","  public void test16()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = vector2DArray0[3];
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      boolean boolean0 = bounds2D0.eq(bounds2D0, precision_DoubleEquivalence0);
}"
1583,"    public boolean eq(final B other, final Precision.DoubleEquivalence precision) {
        return min.eq(other.getMin(), precision) &&
                max.eq(other.getMax(), precision);
    }","  public void test17()  throws Throwable  {
      LinkedList<Vector3D> linkedList0 = new LinkedList<Vector3D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      linkedList0.add((Vector3D) vector3D_Unit0);
      Bounds3D bounds3D0 = Bounds3D.from((Iterable<Vector3D>) linkedList0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      boolean boolean0 = bounds3D0.eq(bounds3D0, precision_DoubleEquivalence0);
}"
1584,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName())
            .append(""[min= "")
            .append(min)
            .append("", max= "")
            .append(max)
            .append(']');

        return sb.toString();
    }","  public void test18()  throws Throwable  {
      LinkedList<Vector3D> linkedList0 = new LinkedList<Vector3D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      linkedList0.add((Vector3D) vector3D_Unit0);
      Bounds3D bounds3D0 = Bounds3D.from((Iterable<Vector3D>) linkedList0);
      String string0 = bounds3D0.toString();
}"
1585,"    public P getCentroid() {
        return min.lerp(max, 0.5);
    }","  public void test19()  throws Throwable  {
      LinkedList<Vector3D> linkedList0 = new LinkedList<Vector3D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      linkedList0.add((Vector3D) vector3D_Unit0);
      Bounds3D bounds3D0 = Bounds3D.from((Iterable<Vector3D>) linkedList0);
      Vector3D vector3D0 = bounds3D0.getCentroid();
}"
1586,"    public abstract V reject(V base);

    /** Get a unit vector orthogonal to the instance.
     * @return a unit vector orthogonal to the current instance
     * @throws IllegalArgumentException if the norm of the current instance is zero, NaN, or infinite
     */
    public abstract V orthogonal();

    /** Get a unit vector orthogonal to the current vector and pointing in the direction
     * of {@code dir}","  public void test0()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-296.6924278035967), (-296.6924278035967));
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-296.6924278035967), (-296.6924278035967));
      Vector2D vector2D1 = vector2D0.reject(vector2D_Unit0);
}"
1587,"    public abstract V reject(V base);

    /** Get a unit vector orthogonal to the instance.
     * @return a unit vector orthogonal to the current instance
     * @throws IllegalArgumentException if the norm of the current instance is zero, NaN, or infinite
     */
    public abstract V orthogonal();

    /** Get a unit vector orthogonal to the current vector and pointing in the direction
     * of {@code dir}","  public void test1()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D vector2D1 = vector2D0.reject(vector2D_Unit0);
}"
1588,"    public abstract V project(V base);

    /** Get the rejection of the instance from the given base vector. The returned
     * vector is orthogonal to {@code base}","  public void test2()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D vector3D1 = vector3D0.project(vector3D_Unit0);
}"
1589,"    public abstract V project(V base);

    /** Get the rejection of the instance from the given base vector. The returned
     * vector is orthogonal to {@code base}","  public void test3()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.project(vector2D_Unit0);
}"
1590,"    public abstract V orthogonal();

    /** Get a unit vector orthogonal to the current vector and pointing in the direction
     * of {@code dir}","  public void test4()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1102.6197568781938), (-1102.6197568781938));
      Vector2D.Unit vector2D_Unit1 = (Vector2D.Unit)vector2D_Unit0.orthogonal((Vector2D) vector2D_Unit0);
}"
1591,"    public abstract V orthogonal();

    /** Get a unit vector orthogonal to the current vector and pointing in the direction
     * of {@code dir}","  public void test5()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Vector3D vector3D0 = vector3D_Unit0.orthogonal();
}"
1592,"    public abstract V reject(V base);

    /** Get a unit vector orthogonal to the instance.
     * @return a unit vector orthogonal to the current instance
     * @throws IllegalArgumentException if the norm of the current instance is zero, NaN, or infinite
     */
    public abstract V orthogonal();

    /** Get a unit vector orthogonal to the current vector and pointing in the direction
     * of {@code dir}","  public void test6()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of((-1.0), (-1.0), (-1.0));
      // Undeclared exception!
      try { 
        vector3D0.reject((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
1593,"    public abstract V reject(V base);

    /** Get a unit vector orthogonal to the instance.
     * @return a unit vector orthogonal to the current instance
     * @throws IllegalArgumentException if the norm of the current instance is zero, NaN, or infinite
     */
    public abstract V orthogonal();

    /** Get a unit vector orthogonal to the current vector and pointing in the direction
     * of {@code dir}","  public void test7()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = vector2D_Unit0.vectorTo((Vector2D) vector2D_Unit0);
      // Undeclared exception!
      try { 
        vector2D_Unit0.reject(vector2D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
1594,"    public abstract V project(V base);

    /** Get the rejection of the instance from the given base vector. The returned
     * vector is orthogonal to {@code base}","  public void test8()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      // Undeclared exception!
      try { 
        vector2D0.project((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
1595,"    public abstract V project(V base);

    /** Get the rejection of the instance from the given base vector. The returned
     * vector is orthogonal to {@code base}","  public void test9()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = Vector2D.NaN;
      // Undeclared exception!
      try { 
        vector2D_Unit0.project(vector2D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
1596,"    public abstract V orthogonal();

    /** Get a unit vector orthogonal to the current vector and pointing in the direction
     * of {@code dir}","  public void test10()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      // Undeclared exception!
      try { 
        vector2D0.orthogonal((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
1597,"    public abstract V orthogonal();

    /** Get a unit vector orthogonal to the current vector and pointing in the direction
     * of {@code dir}","  public void test11()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(0.0, 2.409919865102884E-181);
      // Undeclared exception!
      try { 
        vector2D_Unit0.orthogonal((Vector2D) vector2D_Unit0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
1598,"    public abstract V orthogonal();

    /** Get a unit vector orthogonal to the current vector and pointing in the direction
     * of {@code dir}","  public void test12()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      // Undeclared exception!
      try { 
        vector2D0.orthogonal();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
1599,"    public boolean preservesOrientation() {
        return determinant() > 0.0;
    }","  public void test0()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(0.0, 799.2);
      boolean boolean0 = affineTransformMatrix2D0.preservesOrientation();
}"
1600,"    public abstract M linearTranspose();

    /** Return a transform suitable for transforming normals. The returned matrix is
     * the inverse transpose of the linear portion of this instance, i.e.
     * <code>N = (L<sup>-1</sup>)<sup>T</sup></code>, where <code>L</code> is the linear portion
     * of this instance and <code>N</code> is the returned matrix. Note that normals
     * transformed with the returned matrix may be scaled during transformation and require
     * normalization.
     * @return a transform suitable for transforming normals
     * @throws IllegalStateException if the matrix cannot be inverted
     * @see <a href=""https://en.wikipedia.org/wiki/Normal_(geometry)#Transforming_normals"">Transforming normals</a>
     */
    public M normalTransform() {
        return inverse().linearTranspose();
    }","  public void test1()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      AffineTransformMatrix3D affineTransformMatrix3D1 = affineTransformMatrix3D0.linearTranspose();
}"
1601,"    public abstract M linear();

    /** Return a matrix containing the transpose of the linear portion of this transform.
     * The returned instance is linear, meaning it has a translation component of zero.
     * @return a matrix containing the transpose of the linear portion of this transform
     */
    public abstract M linearTranspose();

    /** Return a transform suitable for transforming normals. The returned matrix is
     * the inverse transpose of the linear portion of this instance, i.e.
     * <code>N = (L<sup>-1</sup>)<sup>T</sup></code>, where <code>L</code> is the linear portion
     * of this instance and <code>N</code> is the returned matrix. Note that normals
     * transformed with the returned matrix may be scaled during transformation and require
     * normalization.
     * @return a transform suitable for transforming normals
     * @throws IllegalStateException if the matrix cannot be inverted
     * @see <a href=""https://en.wikipedia.org/wiki/Normal_(geometry)#Transforming_normals"">Transforming normals</a>
     */
    public M normalTransform() {
        return inverse().linearTranspose();
    }","  public void test2()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation((Vector2D) vector2D_Unit0, 462.030185895411);
      AffineTransformMatrix2D affineTransformMatrix2D1 = affineTransformMatrix2D0.linear();
}"
1602,"    public abstract M inverse();

    /** Return a matrix containing only the linear portion of this transform.
     * The returned instance contains the same matrix elements as this instance
     * but with the translation component set to zero.
     * @return a matrix containing only the linear portion of this transform
     */
    public abstract M linear();

    /** Return a matrix containing the transpose of the linear portion of this transform.
     * The returned instance is linear, meaning it has a translation component of zero.
     * @return a matrix containing the transpose of the linear portion of this transform
     */
    public abstract M linearTranspose();

    /** Return a transform suitable for transforming normals. The returned matrix is
     * the inverse transpose of the linear portion of this instance, i.e.
     * <code>N = (L<sup>-1</sup>)<sup>T</sup></code>, where <code>L</code> is the linear portion
     * of this instance and <code>N</code> is the returned matrix. Note that normals
     * transformed with the returned matrix may be scaled during transformation and require
     * normalization.
     * @return a transform suitable for transforming normals
     * @throws IllegalStateException if the matrix cannot be inverted
     * @see <a href=""https://en.wikipedia.org/wiki/Normal_(geometry)#Transforming_normals"">Transforming normals</a>
     */
    public M normalTransform() {
        return inverse().linearTranspose();
    }","  public void test3()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(1290.06140147);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.inverse();
}"
1603,"    public abstract double determinant();

    /** {@inheritDoc}","  public void test4()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      double double0 = affineTransformMatrix3D0.determinant();
}"
1604,"    public abstract double determinant();

    /** {@inheritDoc}","  public void test5()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      double double0 = affineTransformMatrix1D0.determinant();
}"
1605,"    public abstract double determinant();

    /** {@inheritDoc}","  public void test6()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-865.2472145684965));
      double double0 = affineTransformMatrix1D0.determinant();
}"
1606,"    public abstract V applyDirection(V vec);

    /** Get the determinant of the matrix.
     * @return the determinant of the matrix
     */
    public abstract double determinant();

    /** {@inheritDoc}","  public void test7()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(283.951790118378, 283.951790118378, 0.0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors(vector3D0, vector3D0, vector3D0);
      Vector3D vector3D1 = affineTransformMatrix3D0.applyDirection(vector3D0);
}"
1607,"    public M normalTransform() {
        return inverse().linearTranspose();
    }","  public void test8()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(0.0);
      // Undeclared exception!
      try { 
        affineTransformMatrix2D0.normalTransform();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Matrix is not invertible; matrix determinant is 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Matrices"", e);
      }
  }"
1608,"    public abstract M inverse();

    /** Return a matrix containing only the linear portion of this transform.
     * The returned instance contains the same matrix elements as this instance
     * but with the translation component set to zero.
     * @return a matrix containing only the linear portion of this transform
     */
    public abstract M linear();

    /** Return a matrix containing the transpose of the linear portion of this transform.
     * The returned instance is linear, meaning it has a translation component of zero.
     * @return a matrix containing the transpose of the linear portion of this transform
     */
    public abstract M linearTranspose();

    /** Return a transform suitable for transforming normals. The returned matrix is
     * the inverse transpose of the linear portion of this instance, i.e.
     * <code>N = (L<sup>-1</sup>)<sup>T</sup></code>, where <code>L</code> is the linear portion
     * of this instance and <code>N</code> is the returned matrix. Note that normals
     * transformed with the returned matrix may be scaled during transformation and require
     * normalization.
     * @return a transform suitable for transforming normals
     * @throws IllegalStateException if the matrix cannot be inverted
     * @see <a href=""https://en.wikipedia.org/wiki/Normal_(geometry)#Transforming_normals"">Transforming normals</a>
     */
    public M normalTransform() {
        return inverse().linearTranspose();
    }","  public void test9()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors(vector3D0, vector3D0, vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        affineTransformMatrix3D0.inverse();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Matrix is not invertible; matrix determinant is 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Matrices"", e);
      }
  }"
1609,"    public abstract V applyDirection(V vec);

    /** Get the determinant of the matrix.
     * @return the determinant of the matrix
     */
    public abstract double determinant();

    /** {@inheritDoc}","  public void test10()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      // Undeclared exception!
      try { 
        affineTransformMatrix3D0.applyDirection((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D"", e);
      }
  }"
1610,"    public abstract V applyDirection(V vec);

    /** Get the determinant of the matrix.
     * @return the determinant of the matrix
     */
    public abstract double determinant();

    /** {@inheritDoc}","  public void test11()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((-44.82733308452892));
      Vector1D vector1D0 = Vector1D.NaN;
      // Undeclared exception!
      try { 
        affineTransformMatrix1D0.applyDirection(vector1D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
1611,"    public boolean preservesOrientation() {
        return determinant() > 0.0;
    }","  public void test12()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((-44.82733308452892));
      boolean boolean0 = affineTransformMatrix1D0.preservesOrientation();
}"
1612,"    public M normalTransform() {
        return inverse().linearTranspose();
    }","  public void test13()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.normalTransform();
}"
1613,"    public boolean preservesOrientation() {
        return determinant() > 0.0;
    }","  public void test14()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-849.1986229250926));
      boolean boolean0 = affineTransformMatrix1D0.preservesOrientation();
}"
1614,"    public double getAbscissa() {
        return abscissa;
    }","  public void test0()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-2.9), (-2.9));
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-2.9));
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D_Unit0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D0, vector2D0, line0);
      double double0 = linecastPoint2D0.getAbscissa();
}"
1615,"    public double getAbscissa() {
        return abscissa;
    }","  public void test1()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D_Unit0, vector2D_Unit0, line0);
      double double0 = linecastPoint2D0.getAbscissa();
}"
1616,"    public P getPoint() {
        return point;
    }","  public void test2()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D_Unit0, vector2D_Unit0, line0);
      Vector2D vector2D0 = linecastPoint2D0.getPoint();
}"
1617,"    public L getLine() {
        return line;
    }","  public void test3()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      doReturn((String) null).when(line0).toString();
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D_Unit0, vector2D_Unit0, line0);
      Line line1 = linecastPoint2D0.getLine();
}"
1618,"    public U getNormal() {
        return normal;
    }","  public void test4()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-2.9), 3416.096);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-2.9));
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D_Unit0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D0, vector2D0, line0);
      Vector2D.Unit vector2D_Unit0 = linecastPoint2D0.getNormal();
}"
1619,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || !getClass().equals(obj.getClass())) {
            return false;
        }

        final AbstractLinecastPoint<?, ?, ?> other = (AbstractLinecastPoint<?, ?, ?>) obj;

        return Objects.equals(point, other.point) &&
                Objects.equals(normal, other.normal) &&
                Objects.equals(line, other.line);
    }","  public void test5()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(12.746990173484287, 12.746990173484287);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D_Unit0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D0, vector2D0, line0);
      Line line1 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D_Unit0).when(line1).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LinecastPoint2D linecastPoint2D1 = new LinecastPoint2D(vector2D0, vector2D0, line1);
      boolean boolean0 = linecastPoint2D1.equals(linecastPoint2D0);
}"
1620,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || !getClass().equals(obj.getClass())) {
            return false;
        }

        final AbstractLinecastPoint<?, ?, ?> other = (AbstractLinecastPoint<?, ?, ?>) obj;

        return Objects.equals(point, other.point) &&
                Objects.equals(normal, other.normal) &&
                Objects.equals(line, other.line);
    }","  public void test6()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(26.720774464321998, 26.720774464321998);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D_Unit0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D0, vector2D0, line0);
      boolean boolean0 = linecastPoint2D0.equals(vector2D0);
}"
1621,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || !getClass().equals(obj.getClass())) {
            return false;
        }

        final AbstractLinecastPoint<?, ?, ?> other = (AbstractLinecastPoint<?, ?, ?>) obj;

        return Objects.equals(point, other.point) &&
                Objects.equals(normal, other.normal) &&
                Objects.equals(line, other.line);
    }","  public void test7()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(26.720774464321998, 26.720774464321998);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D_Unit0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D0, vector2D0, line0);
      boolean boolean0 = linecastPoint2D0.equals((Object) null);
}"
1622,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || !getClass().equals(obj.getClass())) {
            return false;
        }

        final AbstractLinecastPoint<?, ?, ?> other = (AbstractLinecastPoint<?, ?, ?>) obj;

        return Objects.equals(point, other.point) &&
                Objects.equals(normal, other.normal) &&
                Objects.equals(line, other.line);
    }","  public void test8()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-2.9), (-2.9));
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-2.9));
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D_Unit0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D0, vector2D0, line0);
      boolean boolean0 = linecastPoint2D0.equals(linecastPoint2D0);
}"
1623,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || !getClass().equals(obj.getClass())) {
            return false;
        }

        final AbstractLinecastPoint<?, ?, ?> other = (AbstractLinecastPoint<?, ?, ?>) obj;

        return Objects.equals(point, other.point) &&
                Objects.equals(normal, other.normal) &&
                Objects.equals(line, other.line);
    }","  public void test9()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(26.720774464321998, 26.720774464321998);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D_Unit0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D0, vector2D0, line0);
      Line line1 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D_Unit0).when(line1).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LinecastPoint2D linecastPoint2D1 = new LinecastPoint2D((Vector2D) null, vector2D0, line1);
      boolean boolean0 = linecastPoint2D1.equals(linecastPoint2D0);
}"
1624,"    public int hashCode() {
        return Objects.hash(point, normal, line);
    }","  public void test10()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(26.720774464321998, 26.720774464321998);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D_Unit0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D0, vector2D0, line0);
      linecastPoint2D0.hashCode();
  }"
1625,"    public String toString() {
        final StringBuilder sb = new StringBuilder(50);
        sb.append(getClass().getSimpleName())
            .append(""[point= "")
            .append(getPoint())
            .append("", normal= "")
            .append(getNormal())
            .append("", abscissa= "")
            .append(getAbscissa())
            .append("", line= "")
            .append(getLine())
            .append(']');

        return sb.toString();
    }","  public void test11()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(12.746990173484287, 12.746990173484287);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D_Unit0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      doReturn((String) null, (String) null).when(line0).toString();
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D0, vector2D0, line0);
      String string0 = linecastPoint2D0.toString();
}"
1626,"    public void accept(final V vec) {
        add(vec);
    }","  public void test0()  throws Throwable  {
      Vector1D.Sum vector1D_Sum0 = Vector1D.Sum.create();
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      vector1D_Sum0.accept((Vector1D) vector1D_Unit0);
}"
1627,"    public abstract EuclideanVectorSum<V> addScaled(double scale, V vec);
}
","  public void test1()  throws Throwable  {
      Vector1D.Sum vector1D_Sum0 = Vector1D.Sum.create();
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      EuclideanVectorSum<Vector1D> euclideanVectorSum0 = vector1D_Sum0.addScaled(1762.403092, vector1D_Unit0);
}"
1628,"    public abstract EuclideanVectorSum<V> add(V vec);

    /** Add a scaled vector to this instance. In general, the result produced by this method
     * will be more accurate than if the vector was scaled first and then added directly. In other
     * words, {@code sum.addScale(scale, vec)}","  public void test2()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = vector2D0;
      vector2DArray0[1] = vector2D0;
      vector2DArray0[2] = vector2D0;
      Vector2D.Sum vector2D_Sum0 = Vector2D.Sum.of(vector2D0, vector2DArray0);
      EuclideanVectorSum<Vector2D> euclideanVectorSum0 = vector2D_Sum0.add(vector2DArray0[0]);
}"
1629,"    public abstract EuclideanVectorSum<V> addScaled(double scale, V vec);
}
","  public void test3()  throws Throwable  {
      Vector2D.Sum vector2D_Sum0 = Vector2D.Sum.create();
      // Undeclared exception!
      try { 
        vector2D_Sum0.addScaled(1065.4, (Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
1630,"    public void accept(final V vec) {
        add(vec);
    }","  public void test4()  throws Throwable  {
      Vector1D.Sum vector1D_Sum0 = Vector1D.Sum.create();
      // Undeclared exception!
      try { 
        vector1D_Sum0.accept((Vector1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Vector1D"", e);
      }
  }"
1631,"    public double determinant() {
        return m00;
    }","  public void test0()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(1264.199029514);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.multiply(affineTransformMatrix1D0);
}"
1632,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test1()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(1264.199029514);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.multiply(affineTransformMatrix1D0);
}"
1633,"    public double determinant() {
        return m00;
    }","  public void test2()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(1264.199029514);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.multiply(affineTransformMatrix1D0);
}"
1634,"    public double determinant() {
        return m00;
    }","  public void test3()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(998.72019);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from(998.72019);
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      AffineTransformMatrix1D affineTransformMatrix1D2 = affineTransformMatrix1D0.multiply(affineTransformMatrix1D1);
}"
1635,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test4()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(998.72019);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from(998.72019);
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      AffineTransformMatrix1D affineTransformMatrix1D2 = affineTransformMatrix1D0.multiply(affineTransformMatrix1D1);
}"
1636,"    public static AffineTransformMatrix1D from(final UnaryOperator<Vector1D> fn) {
        final Vector1D tOne = fn.apply(Vector1D.Unit.PLUS);
        final Vector1D tZero = fn.apply(Vector1D.ZERO);

        final double scale = tOne.subtract(tZero).getX();
        final double translate = tZero.getX();

        final AffineTransformMatrix1D mat =  AffineTransformMatrix1D.of(scale, translate);

        final double det = mat.determinant();
        if (!Vectors.isRealNonZero(det)) {
            throw new IllegalArgumentException(""Transform function is invalid: matrix determinant is "" + det);
        }

        return mat;
    }","  public void test5()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(vector1D0);
      // Undeclared exception!
      try { 
        AffineTransformMatrix1D.from(affineTransformMatrix1D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Transform function is invalid: matrix determinant is NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D"", e);
      }
  }"
1637,"    public static AffineTransformMatrix1D of(final double... arr) {
        if (arr.length != NUM_ELEMENTS) {
            throw new IllegalArgumentException(""Dimension mismatch: "" + arr.length + "" != "" + NUM_ELEMENTS);
        }

        return new AffineTransformMatrix1D(arr[0], arr[1]);
    }","  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        AffineTransformMatrix1D.of(doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Dimension mismatch: 0 != 2
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D"", e);
      }
  }"
1638,"    public double determinant() {
        return m00;
    }","  public void test7()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.inverse();
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
}"
1639,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test8()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.inverse();
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
}"
1640,"    public double determinant() {
        return m00;
    }","  public void test9()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.inverse();
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
}"
1641,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test10()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.inverse();
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
}"
1642,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test11()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(118.762);
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createTranslation(1264.199029514);
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
}"
1643,"    public double determinant() {
        return m00;
    }","  public void test12()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(118.762);
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createTranslation(1264.199029514);
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
}"
1644,"    public double determinant() {
        return m00;
    }","  public void test13()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(118.762);
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createTranslation(1264.199029514);
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
}"
1645,"    public double determinant() {
        return m00;
    }","  public void test14()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((-2677.550286));
      affineTransformMatrix1D0.hashCode();
}"
1646,"    public double determinant() {
        return m00;
    }","  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-4440.4);
      doubleArray0[1] = 89.5413016549757;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.of(doubleArray0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.inverse();
}"
1647,"    public double determinant() {
        return m00;
    }","  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-4440.4);
      doubleArray0[1] = 89.5413016549757;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.of(doubleArray0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.inverse();
}"
1648,"    public double determinant() {
        return m00;
    }","  public void test17()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(1.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.normalTransform();
}"
1649,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test18()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(1.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.normalTransform();
}"
1650,"    public double determinant() {
        return m00;
    }","  public void test19()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(1.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.normalTransform();
}"
1651,"    public double determinant() {
        return m00;
    }","  public void test20()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(vector1D0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate(vector1D0);
}"
1652,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test21()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(vector1D0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate(vector1D0);
}"
1653,"    public double determinant() {
        return m00;
    }","  public void test22()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(vector1D0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate(vector1D0);
}"
1654,"    public double determinant() {
        return m00;
    }","  public void test23()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(vector1D0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate(vector1D0);
}"
1655,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test24()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(vector1D0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate(vector1D0);
}"
1656,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test25()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate(0.0);
}"
1657,"    public double determinant() {
        return m00;
    }","  public void test26()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate(0.0);
}"
1658,"    public double determinant() {
        return m00;
    }","  public void test27()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate(1.0);
}"
1659,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test28()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate(1.0);
}"
1660,"    public double determinant() {
        return m00;
    }","  public void test29()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate(1.0);
}"
1661,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test30()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.scale((Vector1D) vector1D_Unit0);
}"
1662,"    public double determinant() {
        return m00;
    }","  public void test31()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.scale((Vector1D) vector1D_Unit0);
}"
1663,"    public double determinant() {
        return m00;
    }","  public void test32()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(118.762);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createScale(vector1D0);
      AffineTransformMatrix1D affineTransformMatrix1D2 = affineTransformMatrix1D1.multiply(affineTransformMatrix1D0);
      AffineTransformMatrix1D affineTransformMatrix1D3 = affineTransformMatrix1D2.scale((Vector1D) vector1D_Unit0);
}"
1664,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test33()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(118.762);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createScale(vector1D0);
      AffineTransformMatrix1D affineTransformMatrix1D2 = affineTransformMatrix1D1.multiply(affineTransformMatrix1D0);
      AffineTransformMatrix1D affineTransformMatrix1D3 = affineTransformMatrix1D2.scale((Vector1D) vector1D_Unit0);
}"
1665,"    public double determinant() {
        return m00;
    }","  public void test34()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(118.762);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createScale(vector1D0);
      AffineTransformMatrix1D affineTransformMatrix1D2 = affineTransformMatrix1D1.multiply(affineTransformMatrix1D0);
      AffineTransformMatrix1D affineTransformMatrix1D3 = affineTransformMatrix1D2.scale((Vector1D) vector1D_Unit0);
}"
1666,"    public double determinant() {
        return m00;
    }","  public void test35()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.scale((-1.0));
}"
1667,"    public double determinant() {
        return m00;
    }","  public void test36()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.premultiply(affineTransformMatrix1D0);
}"
1668,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test37()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.premultiply(affineTransformMatrix1D0);
}"
1669,"    public double determinant() {
        return m00;
    }","  public void test38()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-4328.660026558));
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      AffineTransformMatrix1D affineTransformMatrix1D2 = affineTransformMatrix1D1.premultiply(affineTransformMatrix1D0);
}"
1670,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test39()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-4328.660026558));
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      AffineTransformMatrix1D affineTransformMatrix1D2 = affineTransformMatrix1D1.premultiply(affineTransformMatrix1D0);
}"
1671,"    public double determinant() {
        return m00;
    }","  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.of(doubleArray0);
}"
1672,"    public double determinant() {
        return m00;
    }","  public void test41()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createScale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D2 = affineTransformMatrix1D1.multiply(affineTransformMatrix1D0);
}"
1673,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test42()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createScale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D2 = affineTransformMatrix1D1.multiply(affineTransformMatrix1D0);
}"
1674,"    public double determinant() {
        return m00;
    }","  public void test43()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(vector1D0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.linearTranspose();
}"
1675,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test44()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(vector1D0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.linearTranspose();
}"
1676,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test45()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-3735.5257488578));
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.linearTranspose();
}"
1677,"    public double determinant() {
        return m00;
    }","  public void test46()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-3735.5257488578));
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.linearTranspose();
}"
1678,"    public double determinant() {
        return m00;
    }","  public void test47()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.scale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D2 = affineTransformMatrix1D1.linear();
}"
1679,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test48()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.scale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D2 = affineTransformMatrix1D1.linear();
}"
1680,"    public double determinant() {
        return m00;
    }","  public void test49()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.scale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D2 = affineTransformMatrix1D1.linear();
}"
1681,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test50()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(541.866053703588);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.linear();
}"
1682,"    public double determinant() {
        return m00;
    }","  public void test51()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(541.866053703588);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.linear();
}"
1683,"    public double determinant() {
        return m00;
    }","  public void test52()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.from(affineTransformMatrix1D0);
}"
1684,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test53()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.from(affineTransformMatrix1D0);
}"
1685,"    public double determinant() {
        return m00;
    }","  public void test54()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.scale(0.0);
      double double0 = affineTransformMatrix1D1.determinant();
}"
1686,"    public double determinant() {
        return m00;
    }","  public void test55()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      double double0 = affineTransformMatrix1D0.determinant();
}"
1687,"    public double applyX(final double x) {
        return applyVectorX(x) + m01;
    }","  public void test56()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      double double0 = affineTransformMatrix1D0.applyX(0.0);
}"
1688,"    public double applyX(final double x) {
        return applyVectorX(x) + m01;
    }","  public void test57()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      double double0 = affineTransformMatrix1D0.applyX(1.0);
}"
1689,"    public double applyVectorX(final double x) {
        return x * m00;
    }","  public void test58()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      double double0 = affineTransformMatrix1D0.applyVectorX(1417.8261);
}"
1690,"    public double applyVectorX(final double x) {
        return x * m00;
    }","  public void test59()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-882.636370970737));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      double double0 = affineTransformMatrix1D0.applyVectorX(570.561943822);
}"
1691,"    public Vector1D applyVector(final Vector1D vec) {
        return Vector1D.of(applyVectorX(vec.getX()));
    }","  public void test60()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      Vector1D vector1D0 = Vector1D.of(0.0);
      Vector1D vector1D1 = affineTransformMatrix1D0.applyVector(vector1D0);
}"
1692,"    public Vector1D applyVector(final Vector1D vec) {
        return Vector1D.of(applyVectorX(vec.getX()));
    }","  public void test61()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(118.762);
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = affineTransformMatrix1D0.applyVector(vector1D0);
}"
1693,"    public double determinant() {
        return m00;
    }","  public void test62()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      Vector1D vector1D0 = Vector1D.NaN;
      affineTransformMatrix1D0.applyVector(vector1D0);
}"
1694,"    public double determinant() {
        return m00;
    }","  public void test63()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      Vector1D.Unit vector1D_Unit1 = affineTransformMatrix1D0.applyDirection((Vector1D) vector1D_Unit0);
}"
1695,"    public Vector1D.Unit applyDirection(final Vector1D vec) {
        return Vector1D.Unit.from(applyVectorX(vec.getX()));
    }","  public void test64()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      Vector1D.Unit vector1D_Unit1 = affineTransformMatrix1D0.applyDirection((Vector1D) vector1D_Unit0);
}"
1696,"    public Vector1D apply(final Vector1D vec) {
        return Vector1D.of(applyX(vec.getX()));
    }","  public void test65()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(vector1D0);
      Vector1D vector1D1 = affineTransformMatrix1D0.apply(vector1D0);
}"
1697,"    public Vector1D apply(final Vector1D vec) {
        return Vector1D.of(applyX(vec.getX()));
    }","  public void test66()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Vector1D vector1D0 = Vector1D.of(0.0);
      Vector1D vector1D1 = affineTransformMatrix1D0.apply(vector1D0);
}"
1698,"    public Vector1D apply(final Vector1D vec) {
        return Vector1D.of(applyX(vec.getX()));
    }","  public void test67()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = affineTransformMatrix1D0.apply(vector1D0);
}"
1699,"    public AffineTransformMatrix1D translate(final Vector1D translation) {
        return translate(translation.getX());
    }","  public void test68()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((-1044.2));
      // Undeclared exception!
      try { 
        affineTransformMatrix1D0.translate((Vector1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D"", e);
      }
  }"
1700,"    public AffineTransformMatrix1D scale(final Vector1D scaleFactor) {
        return scale(scaleFactor.getX());
    }","  public void test69()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      // Undeclared exception!
      try { 
        affineTransformMatrix1D0.scale((Vector1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D"", e);
      }
  }"
1701,"    public AffineTransformMatrix1D premultiply(final AffineTransformMatrix1D m) {
        return multiply(m, this);
    }","  public void test70()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-910.337848047));
      // Undeclared exception!
      try { 
        affineTransformMatrix1D0.premultiply((AffineTransformMatrix1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D"", e);
      }
  }"
1702,"    public static AffineTransformMatrix1D of(final double... arr) {
        if (arr.length != NUM_ELEMENTS) {
            throw new IllegalArgumentException(""Dimension mismatch: "" + arr.length + "" != "" + NUM_ELEMENTS);
        }

        return new AffineTransformMatrix1D(arr[0], arr[1]);
    }","  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        AffineTransformMatrix1D.of((double[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D"", e);
      }
  }"
1703,"    public AffineTransformMatrix1D multiply(final AffineTransformMatrix1D m) {
        return multiply(this, m);
    }","  public void test72()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      // Undeclared exception!
      try { 
        affineTransformMatrix1D0.multiply((AffineTransformMatrix1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D"", e);
      }
  }"
1704,"    public AffineTransformMatrix1D inverse() {

        final double det = Matrices.checkDeterminantForInverse(determinant());

        Matrices.checkElementForInverse(m01);

        final double invDet = 1.0 / det;

        final double c01 = -(this.m01 * invDet);

        return new AffineTransformMatrix1D(invDet, c01);
    }","  public void test73()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      // Undeclared exception!
      try { 
        affineTransformMatrix1D0.inverse();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Matrix is not invertible; matrix determinant is 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Matrices"", e);
      }
  }"
1705,"    public static AffineTransformMatrix1D from(final UnaryOperator<Vector1D> fn) {
        final Vector1D tOne = fn.apply(Vector1D.Unit.PLUS);
        final Vector1D tZero = fn.apply(Vector1D.ZERO);

        final double scale = tOne.subtract(tZero).getX();
        final double translate = tZero.getX();

        final AffineTransformMatrix1D mat =  AffineTransformMatrix1D.of(scale, translate);

        final double det = mat.determinant();
        if (!Vectors.isRealNonZero(det)) {
            throw new IllegalArgumentException(""Transform function is invalid: matrix determinant is "" + det);
        }

        return mat;
    }","  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        AffineTransformMatrix1D.from((UnaryOperator<Vector1D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D"", e);
      }
  }"
1706,"    public static AffineTransformMatrix1D createTranslation(final Vector1D translation) {
        return createTranslation(translation.getX());
    }","  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        AffineTransformMatrix1D.createTranslation((Vector1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D"", e);
      }
  }"
1707,"    public static AffineTransformMatrix1D createScale(final Vector1D factor) {
        return createScale(factor.getX());
    }","  public void test76()  throws Throwable  {
      // Undeclared exception!
      try { 
        AffineTransformMatrix1D.createScale((Vector1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D"", e);
      }
  }"
1708,"    public Vector1D.Unit applyDirection(final Vector1D vec) {
        return Vector1D.Unit.from(applyVectorX(vec.getX()));
    }","  public void test77()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(1.0);
      // Undeclared exception!
      try { 
        affineTransformMatrix1D0.applyDirection((Vector1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D"", e);
      }
  }"
1709,"    public Vector1D.Unit applyDirection(final Vector1D vec) {
        return Vector1D.Unit.from(applyVectorX(vec.getX()));
    }","  public void test78()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        affineTransformMatrix1D0.applyDirection(vector1D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
1710,"    public Vector1D apply(final Vector1D vec) {
        return Vector1D.of(applyX(vec.getX()));
    }","  public void test79()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((-922.2979108));
      // Undeclared exception!
      try { 
        affineTransformMatrix1D0.apply((Vector1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D"", e);
      }
  }"
1711,"    public double determinant() {
        return m00;
    }","  public void test80()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.of(doubleArray0);
}"
1712,"    public double determinant() {
        return m00;
    }","  public void test81()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(998.72019);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.scale(998.72019);
}"
1713,"    public double determinant() {
        return m00;
    }","  public void test82()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(998.72019);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.scale(998.72019);
}"
1714,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test83()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-3735.5257488578));
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.linear();
}"
1715,"    public double determinant() {
        return m00;
    }","  public void test84()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-3735.5257488578));
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.linear();
}"
1716,"    public double applyX(final double x) {
        return applyVectorX(x) + m01;
    }","  public void test85()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((-2677.550286));
      double double0 = affineTransformMatrix1D0.applyX((-2677.550286));
}"
1717,"    public double applyVectorX(final double x) {
        return x * m00;
    }","  public void test86()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      double double0 = affineTransformMatrix1D0.applyVectorX(0.0);
}"
1718,"    public double determinant() {
        return m00;
    }","  public void test87()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      double double0 = affineTransformMatrix1D0.applyVectorX(0.0);
}"
1719,"    public double determinant() {
        return m00;
    }","  public void test88()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      double double0 = affineTransformMatrix1D0.determinant();
}"
1720,"    public double determinant() {
        return m00;
    }","  public void test89()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate((-2715.17871124839));
}"
1721,"    public double determinant() {
        return m00;
    }","  public void test90()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate((-2715.17871124839));
}"
1722,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test91()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate((-2715.17871124839));
}"
1723,"    public static AffineTransformMatrix1D of(final double... arr) {
        if (arr.length != NUM_ELEMENTS) {
            throw new IllegalArgumentException(""Dimension mismatch: "" + arr.length + "" != "" + NUM_ELEMENTS);
        }

        return new AffineTransformMatrix1D(arr[0], arr[1]);
    }","  public void test92()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        AffineTransformMatrix1D.of(doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Dimension mismatch: 3 != 2
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D"", e);
      }
  }"
1724,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test93()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.inverse();
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
}"
1725,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test94()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.identity();
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
}"
1726,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test95()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.identity();
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
}"
1727,"    public double determinant() {
        return m00;
    }","  public void test96()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.identity();
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
}"
1728,"    public double determinant() {
        return m00;
    }","  public void test97()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      boolean boolean0 = affineTransformMatrix1D0.equals(vector1D_Unit0);
}"
1729,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test98()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      boolean boolean0 = affineTransformMatrix1D0.equals(vector1D_Unit0);
}"
1730,"    public double determinant() {
        return m00;
    }","  public void test99()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D0);
}"
1731,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test100()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D0);
}"
1732,"    public double determinant() {
        return m00;
    }","  public void test101()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createTranslation(1264.199029514);
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
}"
1733,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test102()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createTranslation(1264.199029514);
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
}"
1734,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test103()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createTranslation(1264.199029514);
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
}"
1735,"    public double determinant() {
        return m00;
    }","  public void test104()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-4328.660026558));
      Vector1D.Unit vector1D_Unit1 = affineTransformMatrix1D0.applyDirection((Vector1D) vector1D_Unit0);
}"
1736,"    public Vector1D.Unit applyDirection(final Vector1D vec) {
        return Vector1D.Unit.from(applyVectorX(vec.getX()));
    }","  public void test105()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-4328.660026558));
      Vector1D.Unit vector1D_Unit1 = affineTransformMatrix1D0.applyDirection((Vector1D) vector1D_Unit0);
}"
1737,"    public double[] toArray() {
        return new double[] {
            m00, m01
        };
    }","  public void test106()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      double[] doubleArray0 = affineTransformMatrix1D0.toArray();
}"
1738,"    public double determinant() {
        return m00;
    }","  public void test107()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.premultiply(affineTransformMatrix1D0);
}"
1739,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test108()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.premultiply(affineTransformMatrix1D0);
}"
1740,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test109()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.scale((Vector1D) vector1D_Unit0);
}"
1741,"    public double determinant() {
        return m00;
    }","  public void test110()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.linearTranspose();
}"
1742,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test111()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.linearTranspose();
}"
1743,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test112()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.from(affineTransformMatrix1D0);
}"
1744,"    public double determinant() {
        return m00;
    }","  public void test113()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.from(affineTransformMatrix1D0);
}"
1745,"    public String toString() {
        final StringBuilder sb = new StringBuilder();

        sb.append(MATRIX_START)

            .append(m00)
            .append(ELEMENT_SEPARATOR)
            .append(m01)

            .append(MATRIX_END);

        return sb.toString();
    }","  public void test114()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      String string0 = affineTransformMatrix1D0.toString();
}"
1746,"    public Vector1D applyVector(final Vector1D vec) {
        return Vector1D.of(applyVectorX(vec.getX()));
    }","  public void test115()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(1111.774135);
      // Undeclared exception!
      try { 
        affineTransformMatrix1D0.applyVector((Vector1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D"", e);
      }
  }"
1747,"    public double determinant() {
        return m00;
    }","  public void test116()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-4328.660026558));
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate((Vector1D) vector1D_Unit0);
}"
1748,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix1D)) {
            return false;
        }
        final AffineTransformMatrix1D other = (AffineTransformMatrix1D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0;
    }","  public void test117()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-4328.660026558));
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate((Vector1D) vector1D_Unit0);
}"
1749,"    public double determinant() {
        return m00;
    }","  public void test118()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-4328.660026558));
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate((Vector1D) vector1D_Unit0);
}"
1750,,"  public void test0()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        Vector1D.Unit.from(vector1D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
1751,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector1D) {
            final Vector1D rhs = (Vector1D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0;
        }
        return false;
    }","  public void test1()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      boolean boolean0 = vector1D0.equals(vector1D_Unit0);
}"
1752,"    public double angle(final Vector1D v) {
        // validate the norm values
        getCheckedNorm();
        v.getCheckedNorm();

        final double sig1 = Math.signum(x);
        final double sig2 = Math.signum(v.x);

        // the angle is 0 if the x value signs are the same and pi if not
        return (sig1 == sig2) ? 0.0 : Math.PI;
    }","  public void test2()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = vector1D_Unit0.negate();
      double double0 = vector1D0.angle((Vector1D) vector1D_Unit0);
}"
1753,"    public double norm() {
        return Vectors.norm(x);
    }","  public void test3()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = vector1D_Unit0.negate();
      double double0 = vector1D0.angle((Vector1D) vector1D_Unit0);
}"
1754,"    public double dot(final Vector1D v) {
        return x * v.x;
    }","  public void test4()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = vector1D_Unit0.NaN.subtract(0.6, (Vector1D) vector1D_Unit0);
      double double0 = vector1D0.dot(vector1D0);
}"
1755,"    public Unit normalize() {
        return Unit.from(x);
    }","  public void test5()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D.Unit vector1D_Unit1 = vector1D_Unit0.normalize();
}"
1756,"    public double getX() {
        return x;
    }","  public void test6()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1193.5595279131));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(vector1D0);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      double double0 = vector1D_Unit0.norm();
}"
1757,"    public double getX() {
        return x;
    }","  public void test7()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1193.5595279131));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(vector1D0);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      double double0 = vector1D_Unit0.norm();
}"
1758,"    public double norm() {
        return Vectors.norm(x);
    }","  public void test8()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1193.5595279131));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(vector1D0);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      double double0 = vector1D_Unit0.norm();
}"
1759,"    public Vector1D add(final Vector1D v) {
        return new Vector1D(x + v.x);
    }","  public void test9()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D[] vector1DArray0 = new Vector1D[9];
      vector1DArray0[0] = (Vector1D) vector1D_Unit0;
      vector1DArray0[1] = (Vector1D) vector1D_Unit0;
      vector1DArray0[2] = (Vector1D) vector1D_Unit0;
      vector1DArray0[3] = (Vector1D) vector1D_Unit0;
      vector1DArray0[4] = (Vector1D) vector1D_Unit0;
      vector1DArray0[5] = (Vector1D) vector1D_Unit0;
      vector1DArray0[6] = (Vector1D) vector1D_Unit0;
      vector1DArray0[7] = vector1DArray0[5];
      vector1DArray0[8] = (Vector1D) vector1D_Unit0;
      Vector1D.Sum vector1D_Sum0 = Vector1D.Sum.of((Vector1D) vector1D_Unit0, vector1DArray0);
      Vector1D.Sum vector1D_Sum1 = vector1D_Sum0.add((Vector1D) vector1D_Unit0);
}"
1760,"    public boolean isNaN() {
        return Double.isNaN(x);
    }","  public void test10()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D0 = vector1D_Unit0.withNorm(Double.NaN);
}"
1761,"    public double getX() {
        return x;
    }","  public void test11()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = vector1D_Unit0.withNorm(Double.NEGATIVE_INFINITY);
}"
1762,"    public double getX() {
        return x;
    }","  public void test12()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1193.5595279131));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(vector1D0);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      Vector1D vector1D1 = vector1D_Unit0.withNorm(0.0);
}"
1763,"    public double getX() {
        return x;
    }","  public void test13()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1193.5595279131));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(vector1D0);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      Vector1D vector1D1 = vector1D_Unit0.withNorm(0.0);
}"
1764,"    public double getX() {
        return x;
    }","  public void test14()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = vector1D_Unit0.POSITIVE_INFINITY.vectorTo((Vector1D) vector1D_Unit0);
}"
1765,"    public double getX() {
        return x;
    }","  public void test15()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = vector1D_Unit0.vectorTo((Vector1D) vector1D_Unit0);
}"
1766,"    public boolean isNaN() {
        return Double.isNaN(x);
    }","  public void test16()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector1D vector1D1 = vector1D0.NaN.vectorTo(vector1D0);
}"
1767,"    public double getX() {
        return x;
    }","  public void test17()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-1424.0));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      vector1D_Unit0.NaN.transform(affineTransformMatrix1D0);
}"
1768,"    public double getX() {
        return x;
    }","  public void test18()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(vector1D0);
      Vector1D vector1D1 = vector1D0.transform(affineTransformMatrix1D0);
}"
1769,"    public double getX() {
        return x;
    }","  public void test19()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-1003.4713486276197));
      UnaryOperator<Vector1D> unaryOperator0 = UnaryOperator.identity();
      Vector1D vector1D0 = vector1D_Unit0.transform(unaryOperator0);
}"
1770,"    public double getX() {
        return x;
    }","  public void test20()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D0 = vector1D_Unit0.NEGATIVE_INFINITY.subtract((Vector1D) vector1D_Unit0);
}"
1771,"    public double getX() {
        return x;
    }","  public void test21()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D0 = vector1D_Unit0.subtract((Vector1D) vector1D_Unit0);
}"
1772,"    public double getX() {
        return x;
    }","  public void test22()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D0 = vector1D_Unit0.ZERO.subtract(0.0, (Vector1D) vector1D_Unit0);
}"
1773,"    public double getX() {
        return x;
    }","  public void test23()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.parse(""(-Infinity)"");
}"
1774,"    public double getX() {
        return x;
    }","  public void test24()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.parse(""(-0.0)"");
}"
1775,"    public int getDimension() {
        return 1;
    }","  public void test25()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.parse(""(NaN)"");
}"
1776,"    public int getDimension() {
        return 1;
    }","  public void test26()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of(Double.NaN);
}"
1777,"    public double getX() {
        return x;
    }","  public void test27()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of(Double.NEGATIVE_INFINITY);
}"
1778,"    public double getX() {
        return x;
    }","  public void test28()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of(0.0);
}"
1779,"    public double getX() {
        return x;
    }","  public void test29()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of(21.65459095187051);
      Vector1D.Unit vector1D_Unit0 = vector1D0.normalizeOrNull();
      Vector1D.Unit vector1D_Unit1 = vector1D_Unit0.normalize();
}"
1780,"    public double normSq() {
        return Vectors.normSq(x);
    }","  public void test30()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      double double0 = vector1D0.normSq();
}"
1781,"    public double norm() {
        return Vectors.norm(x);
    }","  public void test31()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      double double0 = vector1D_Unit0.ZERO.norm();
}"
1782,"    public double getX() {
        return x;
    }","  public void test32()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = vector1D0.negate();
}"
1783,"    public double getX() {
        return x;
    }","  public void test33()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector1D vector1D1 = vector1D0.negate();
}"
1784,"    public double getX() {
        return x;
    }","  public void test34()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D0 = vector1D_Unit0.NEGATIVE_INFINITY.multiply(0.0);
}"
1785,"    public double getX() {
        return x;
    }","  public void test35()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector1D vector1D1 = vector1D0.ZERO.multiply((-1003.4713486276197));
}"
1786,"    public double getX() {
        return x;
    }","  public void test36()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector1D vector1D1 = vector1D0.NEGATIVE_INFINITY.multiply(2846.4740752);
}"
1787,"    public double getX() {
        return x;
    }","  public void test37()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1088.75));
      Vector1D.Unit vector1D_Unit0 = vector1D0.normalizeOrNull();
      Vector1D vector1D1 = vector1D_Unit0.POSITIVE_INFINITY.lerp(vector1D0, 874.2909482201);
}"
1788,"    public double getX() {
        return x;
    }","  public void test38()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1088.75));
      Vector1D.Unit vector1D_Unit0 = vector1D0.normalizeOrNull();
      Vector1D vector1D1 = vector1D_Unit0.POSITIVE_INFINITY.lerp(vector1D0, 874.2909482201);
}"
1789,"    public double getX() {
        return x;
    }","  public void test39()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1193.5595279131));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(vector1D0);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      Vector1D vector1D1 = vector1D0.ZERO.lerp((Vector1D) vector1D_Unit0, 0.0);
}"
1790,"    public double getX() {
        return x;
    }","  public void test40()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1193.5595279131));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(vector1D0);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      Vector1D vector1D1 = vector1D0.ZERO.lerp((Vector1D) vector1D_Unit0, 0.0);
}"
1791,"    public double getX() {
        return x;
    }","  public void test41()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Vector1D vector1D1 = vector1D0.lerp(vector1D0, Double.NaN);
}"
1792,"    public boolean isNaN() {
        return Double.isNaN(x);
    }","  public void test42()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D0 = vector1D_Unit0.NaN.add(Double.NEGATIVE_INFINITY, (Vector1D) vector1D_Unit0);
      boolean boolean0 = vector1D0.isNaN();
}"
1793,"    public boolean isFinite() {
        return Double.isFinite(x);
    }","  public void test43()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      boolean boolean0 = vector1D0.ZERO.isFinite();
}"
1794,"    public double getX() {
        return x;
    }","  public void test44()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      double double0 = vector1D0.getX();
}"
1795,"    public double getX() {
        return x;
    }","  public void test45()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      double double0 = vector1D_Unit0.getX();
}"
1796,"    public double getX() {
        return x;
    }","  public void test46()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1193.5595279131));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(vector1D0);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      vector1D_Unit0.eq((Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
}"
1797,"    public double getX() {
        return x;
    }","  public void test47()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1193.5595279131));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(vector1D0);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      vector1D_Unit0.eq((Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
}"
1798,"    public double dot(final Vector1D v) {
        return x * v.x;
    }","  public void test48()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of(21.65459095187051);
      Vector1D.Unit vector1D_Unit0 = vector1D0.normalizeOrNull();
      Vector1D vector1D1 = vector1D0.getZero();
      double double0 = vector1D1.dot((Vector1D) vector1D_Unit0);
}"
1799,"    public double dot(final Vector1D v) {
        return x * v.x;
    }","  public void test49()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of(21.65459095187051);
      Vector1D.Unit vector1D_Unit0 = vector1D0.normalizeOrNull();
      Vector1D.Unit vector1D_Unit1 = Vector1D.Unit.MINUS;
      double double0 = vector1D_Unit1.dot((Vector1D) vector1D_Unit0);
}"
1800,"    public double distanceSq(final Vector1D v) {
        return Vectors.normSq(x - v.x);
    }","  public void test50()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      double double0 = vector1D_Unit0.NEGATIVE_INFINITY.distanceSq(vector1D0);
}"
1801,"    public double getX() {
        return x;
    }","  public void test51()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D.Unit vector1D_Unit1 = vector1D0.directionTo((Vector1D) vector1D_Unit0);
}"
1802,"    public double getX() {
        return x;
    }","  public void test52()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D.Unit vector1D_Unit1 = vector1D0.directionTo((Vector1D) vector1D_Unit0);
}"
1803,"    public boolean isInfinite() {
        return !isNaN() && Double.isInfinite(x);
    }","  public void test53()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = vector1D0.NaN.add(vector1D0);
}"
1804,"    public double getX() {
        return x;
    }","  public void test54()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      Vector1D vector1D0 = vector1D_Unit0.ZERO.transform(affineTransformMatrix1D0);
      Vector1D vector1D1 = vector1D_Unit0.ZERO.add(vector1D0);
}"
1805,"    public double getX() {
        return x;
    }","  public void test55()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      Vector1D vector1D0 = vector1D_Unit0.ZERO.transform(affineTransformMatrix1D0);
      Vector1D vector1D1 = vector1D_Unit0.ZERO.add(vector1D0);
}"
1806,"    public double getX() {
        return x;
    }","  public void test56()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D1 = vector1D_Unit0.NEGATIVE_INFINITY.add(vector1D0);
}"
1807,"    public boolean isNaN() {
        return Double.isNaN(x);
    }","  public void test57()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = vector1D0.NEGATIVE_INFINITY.add(0.0, vector1D0);
}"
1808,"    public double getX() {
        return x;
    }","  public void test58()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = vector1D0.add(1286.95974294396, (Vector1D) vector1D_Unit0);
}"
1809,"    public double getX() {
        return x;
    }","  public void test59()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-1.0));
      Vector1D vector1D0 = vector1D_Unit0.add((-1.0), (Vector1D) vector1D_Unit0);
}"
1810,"    public double getX() {
        return x;
    }","  public void test60()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-1.0));
      Vector1D vector1D0 = vector1D_Unit0.add((-1.0), (Vector1D) vector1D_Unit0);
}"
1811,"    public Vector1D withNorm(final double magnitude) {
        getCheckedNorm(); // validate our norm value
        return (x > 0.0) ? new Vector1D(magnitude) : new Vector1D(-magnitude);
    }","  public void test61()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector1D0.withNorm((-0.9999999999));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
1812,"    public Vector1D subtract(final Vector1D v) {
        return new Vector1D(x - v.x);
    }","  public void test62()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      // Undeclared exception!
      try { 
        vector1D_Unit0.subtract((Vector1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Vector1D"", e);
      }
  }"
1813,"    public Vector1D subtract(final Vector1D v) {
        return new Vector1D(x - v.x);
    }","  public void test63()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      // Undeclared exception!
      try { 
        vector1D_Unit0.subtract(4750.026206086907, (Vector1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Vector1D"", e);
      }
  }"
1814,"    public static Vector1D parse(final String str) {
        return SimpleTupleFormat.getDefault().parse(str, Vector1D::new);
    }","  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector1D.parse("""");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \""\"" at index 0: expected \""(\"" but found \""\""
         //
         verifyException(""org.apache.commons.geometry.core.internal.SimpleTupleFormat"", e);
      }
  }"
1815,"    public Unit normalize() {
        return Unit.from(x);
    }","  public void test65()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector1D0.normalize();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
1816,"    public Vector1D lerp(final Vector1D p, final double t) {
        return Sum.create()
                .addScaled(1.0 - t, this)
                .addScaled(t, p).get();
    }","  public void test66()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from(508.7469742);
      // Undeclared exception!
      try { 
        vector1D_Unit0.NEGATIVE_INFINITY.lerp((Vector1D) null, 508.7469742);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Vector1D"", e);
      }
  }"
1817,"    public boolean eq(final Vector1D vec, final Precision.DoubleEquivalence precision) {
        return precision.eq(x, vec.x);
    }","  public void test67()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      // Undeclared exception!
      try { 
        vector1D_Unit0.eq((Vector1D) vector1D_Unit0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Vector1D"", e);
      }
  }"
1818,"    public double dot(final Vector1D v) {
        return x * v.x;
    }","  public void test68()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      // Undeclared exception!
      try { 
        vector1D_Unit0.dot((Vector1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Vector1D"", e);
      }
  }"
1819,"    public double distanceSq(final Vector1D v) {
        return Vectors.normSq(x - v.x);
    }","  public void test69()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector1D0.NEGATIVE_INFINITY.distanceSq((Vector1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Vector1D"", e);
      }
  }"
1820,"    public double distance(final Vector1D v) {
        return Vectors.norm(x - v.x);
    }","  public void test70()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      // Undeclared exception!
      try { 
        vector1D_Unit0.distance((Vector1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Vector1D"", e);
      }
  }"
1821,"    public Unit directionTo(final Vector1D v) {
        return vectorTo(v).normalize();
    }","  public void test71()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      // Undeclared exception!
      try { 
        vector1D0.directionTo((Vector1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Vector1D"", e);
      }
  }"
1822,"    public double angle(final Vector1D v) {
        // validate the norm values
        getCheckedNorm();
        v.getCheckedNorm();

        final double sig1 = Math.signum(x);
        final double sig2 = Math.signum(v.x);

        // the angle is 0 if the x value signs are the same and pi if not
        return (sig1 == sig2) ? 0.0 : Math.PI;
    }","  public void test72()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-1003.47134862762));
      // Undeclared exception!
      try { 
        vector1D_Unit0.angle((Vector1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Vector1D"", e);
      }
  }"
1823,"    public double angle(final Vector1D v) {
        // validate the norm values
        getCheckedNorm();
        v.getCheckedNorm();

        final double sig1 = Math.signum(x);
        final double sig2 = Math.signum(v.x);

        // the angle is 0 if the x value signs are the same and pi if not
        return (sig1 == sig2) ? 0.0 : Math.PI;
    }","  public void test73()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      // Undeclared exception!
      try { 
        vector1D0.angle(vector1D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
1824,"    public Vector1D add(final Vector1D v) {
        return new Vector1D(x + v.x);
    }","  public void test74()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      // Undeclared exception!
      try { 
        vector1D0.ZERO.add((Vector1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Vector1D"", e);
      }
  }"
1825,"    public Vector1D add(final Vector1D v) {
        return new Vector1D(x + v.x);
    }","  public void test75()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      // Undeclared exception!
      try { 
        vector1D_Unit0.add(0.0, (Vector1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Vector1D"", e);
      }
  }"
1826,"    public double getX() {
        return x;
    }","  public void test76()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D.Sum vector1D_Sum0 = new Vector1D.Sum(vector1D_Unit0);
      Vector1D vector1D0 = vector1D_Sum0.get();
}"
1827,"    public double getX() {
        return x;
    }","  public void test77()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1088.75));
      vector1D0.isNaN();
}"
1828,"    public boolean isInfinite() {
        return !isNaN() && Double.isInfinite(x);
    }","  public void test78()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = vector1D0.multiply((-64.28071));
      double double0 = vector1D1.distance(vector1D0);
}"
1829,"    public double distance(final Vector1D v) {
        return Vectors.norm(x - v.x);
    }","  public void test79()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = vector1D0.multiply((-64.28071));
      double double0 = vector1D1.distance(vector1D0);
}"
1830,"    public int getDimension() {
        return 1;
    }","  public void test80()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D1 = vector1D0.subtract((Vector1D) vector1D_Unit0);
}"
1831,,"  public void test81()  throws Throwable  {
      Vector1D.Sum vector1D_Sum0 = Vector1D.Sum.create();
}"
1832,"    public double norm() {
        return Vectors.norm(x);
    }","  public void test82()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      double double0 = vector1D0.norm();
}"
1833,"    public double getX() {
        return x;
    }","  public void test83()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1193.5595279131));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(vector1D0);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      vector1D_Unit0.eq((Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
}"
1834,"    public double getX() {
        return x;
    }","  public void test84()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1193.5595279131));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(vector1D0);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      vector1D_Unit0.eq((Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
}"
1835,"    public double getX() {
        return x;
    }","  public void test85()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      double double0 = vector1D_Unit0.getX();
}"
1836,"    public Vector1D vectorTo(final Vector1D v) {
        return v.subtract(this);
    }","  public void test86()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D.Unit vector1D_Unit0 = vector1D0.POSITIVE_INFINITY.normalizeOrNull();
      Vector1D vector1D1 = vector1D_Unit0.ZERO.subtract((-347.916396299), vector1D0);
      // Undeclared exception!
      try { 
        vector1D1.vectorTo((Vector1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Vector1D"", e);
      }
  }"
1837,"    public double getX() {
        return x;
    }","  public void test87()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-1.0));
      Vector1D.Sum vector1D_Sum0 = new Vector1D.Sum(vector1D_Unit0);
      vector1D_Sum0.addScaled(0.0, (Vector1D) vector1D_Unit0);
}"
1838,,"  public void test88()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D.Unit vector1D_Unit1 = Vector1D.Unit.from((Vector1D) vector1D_Unit0);
}"
1839,"    public double getX() {
        return x;
    }","  public void test89()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = vector1D_Unit0.negate();
}"
1840,"    public double getX() {
        return x;
    }","  public void test90()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D0 = vector1D_Unit0.negate();
}"
1841,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector1D) {
            final Vector1D rhs = (Vector1D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0;
        }
        return false;
    }","  public void test91()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D0 = Vector1D.parse(""(-1.0)"");
      boolean boolean0 = vector1D_Unit0.equals(vector1D0);
}"
1842,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector1D) {
            final Vector1D rhs = (Vector1D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0;
        }
        return false;
    }","  public void test92()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = vector1D_Unit0.NaN.subtract(0.6, (Vector1D) vector1D_Unit0);
      boolean boolean0 = vector1D_Unit0.equals(vector1D0);
}"
1843,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector1D) {
            final Vector1D rhs = (Vector1D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0;
        }
        return false;
    }","  public void test93()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-0.999999999999998));
      Vector1D.Unit vector1D_Unit0 = vector1D0.normalize();
      Object object0 = new Object();
      boolean boolean0 = vector1D_Unit0.equals(object0);
}"
1844,"    public double getX() {
        return x;
    }","  public void test94()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-0.999999999999998));
      Vector1D.Unit vector1D_Unit0 = vector1D0.normalize();
      Object object0 = new Object();
      boolean boolean0 = vector1D_Unit0.equals(object0);
}"
1845,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector1D) {
            final Vector1D rhs = (Vector1D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0;
        }
        return false;
    }","  public void test95()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      boolean boolean0 = vector1D_Unit0.equals(vector1D_Unit0);
}"
1846,"    public int hashCode() {
        if (isNaN()) {
            return 857;
        }
        return 403 * Double.hashCode(x);
    }","  public void test96()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      vector1D0.NaN.hashCode();
  }"
1847,"    public double getX() {
        return x;
    }","  public void test97()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-1003.47134862762));
      vector1D_Unit0.hashCode();
}"
1848,"    public double norm() {
        return Vectors.norm(x);
    }","  public void test98()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D.Unit vector1D_Unit1 = Vector1D.Unit.from(0.6);
      double double0 = vector1D_Unit1.angle((Vector1D) vector1D_Unit0);
}"
1849,"    public double angle(final Vector1D v) {
        // validate the norm values
        getCheckedNorm();
        v.getCheckedNorm();

        final double sig1 = Math.signum(x);
        final double sig2 = Math.signum(v.x);

        // the angle is 0 if the x value signs are the same and pi if not
        return (sig1 == sig2) ? 0.0 : Math.PI;
    }","  public void test99()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D.Unit vector1D_Unit1 = Vector1D.Unit.from(0.6);
      double double0 = vector1D_Unit1.angle((Vector1D) vector1D_Unit0);
}"
1850,"    public boolean isInfinite() {
        return !isNaN() && Double.isInfinite(x);
    }","  public void test100()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      boolean boolean0 = vector1D0.isInfinite();
}"
1851,"    public boolean isInfinite() {
        return !isNaN() && Double.isInfinite(x);
    }","  public void test101()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      boolean boolean0 = vector1D_Unit0.isInfinite();
}"
1852,"    public boolean isInfinite() {
        return !isNaN() && Double.isInfinite(x);
    }","  public void test102()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      boolean boolean0 = vector1D0.isInfinite();
}"
1853,"    public Vector1D transform(final UnaryOperator<Vector1D> fn) {
        return fn.apply(this);
    }","  public void test103()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      // Undeclared exception!
      try { 
        vector1D_Unit0.POSITIVE_INFINITY.transform((UnaryOperator<Vector1D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Vector1D"", e);
      }
  }"
1854,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector1D) {
            final Vector1D rhs = (Vector1D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0;
        }
        return false;
    }","  public void test104()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D.Unit vector1D_Unit1 = Vector1D.Unit.MINUS;
      boolean boolean0 = vector1D_Unit0.equals(vector1D_Unit1);
}"
1855,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector1D) {
            final Vector1D rhs = (Vector1D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0;
        }
        return false;
    }","  public void test105()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D.Unit vector1D_Unit1 = Vector1D.Unit.MINUS;
      boolean boolean0 = vector1D_Unit0.equals(vector1D_Unit1);
}"
1856,"    public String toString() {
        return SimpleTupleFormat.getDefault().format(x);
    }","  public void test106()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      String string0 = vector1D_Unit0.toString();
}"
1857,"    public double distanceSq(final Vector1D v) {
        return Vectors.normSq(x - v.x);
    }","  public void test107()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      double double0 = vector1D_Unit0.distanceSq((Vector1D) vector1D_Unit0);
}"
1858,"    public boolean isNaN() {
        return Double.isNaN(x);
    }","  public void test108()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = vector1D_Unit0.NaN.subtract(0.6, (Vector1D) vector1D_Unit0);
      Vector1D vector1D1 = vector1D0.negate();
}"
1859,"    public boolean isFinite() {
        return Double.isFinite(x);
    }","  public void test109()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      boolean boolean0 = vector1D_Unit0.POSITIVE_INFINITY.isFinite();
}"
1860,,"  public void test110()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        Vector1D.Unit.from(vector1D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
1861,"    public double dot(final Vector1D v) {
        return x * v.x;
    }","  public void test111()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      double double0 = vector1D_Unit0.dot((Vector1D) vector1D_Unit0);
}"
1862,"    public double distance(final Vector1D v) {
        return Vectors.norm(x - v.x);
    }","  public void test112()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      double double0 = vector1D_Unit0.distance((Vector1D) vector1D_Unit0);
}"
1863,"    public double getX() {
        return x;
    }","  public void test113()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-0.999999999999998));
      Vector1D.Unit vector1D_Unit0 = vector1D0.normalize();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      vector1D_Unit0.POSITIVE_INFINITY.isZero(precision_DoubleEquivalence0);
}"
1864,"    public Unit directionTo(final Vector1D v) {
        return vectorTo(v).normalize();
    }","  public void test114()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector1D0.directionTo(vector1D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
1865,"    public static Vector1D parse(final String str) {
        return SimpleTupleFormat.getDefault().parse(str, Vector1D::new);
    }","  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector1D.parse((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.internal.SimpleTupleFormat"", e);
      }
  }"
1866,"    public int getDimension() {
        return 1;
    }","  public void test116()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      int int0 = vector1D_Unit0.getDimension();
}"
1867,"    public double getX() {
        return x;
    }","  public void test117()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D0 = vector1D_Unit0.subtract(0.989, (Vector1D) vector1D_Unit0);
      Vector1D vector1D1 = vector1D0.withNorm(0.989);
}"
1868,"    public double getX() {
        return x;
    }","  public void test118()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D0 = vector1D_Unit0.subtract(0.989, (Vector1D) vector1D_Unit0);
      Vector1D vector1D1 = vector1D0.withNorm(0.989);
}"
1869,"    public double getX() {
        return x;
    }","  public void test119()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = vector1D_Unit0.add(4791.6, (Vector1D) vector1D_Unit0);
      Vector1D vector1D1 = vector1D0.withNorm(4791.6);
}"
1870,"    public double getX() {
        return x;
    }","  public void test120()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = vector1D_Unit0.add(4791.6, (Vector1D) vector1D_Unit0);
      Vector1D vector1D1 = vector1D0.withNorm(4791.6);
}"
1871,"    public double normSq() {
        return Vectors.normSq(x);
    }","  public void test121()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      double double0 = vector1D_Unit0.normSq();
}"
1872,"    public double getX() {
        return x;
    }","  public void test122()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D0 = vector1D_Unit0.withNorm(0.0);
}"
1873,"    public double norm() {
        return Vectors.norm(x);
    }","  public void test123()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      double double0 = vector1D_Unit0.angle((Vector1D) vector1D_Unit0);
}"
1874,"    public double angle(final Vector1D v) {
        // validate the norm values
        getCheckedNorm();
        v.getCheckedNorm();

        final double sig1 = Math.signum(x);
        final double sig2 = Math.signum(v.x);

        // the angle is 0 if the x value signs are the same and pi if not
        return (sig1 == sig2) ? 0.0 : Math.PI;
    }","  public void test124()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      double double0 = vector1D_Unit0.angle((Vector1D) vector1D_Unit0);
}"
1875,"    public boolean isInfinite() {
        return !isNaN() && Double.isInfinite(x);
    }","  public void test125()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D.Unit vector1D_Unit1 = vector1D_Unit0.normalizeOrNull();
}"
1876,"    public static Vector1D of(final double x) {
        return new Vector1D(x);
    }","  public void test126()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D.Sum vector1D_Sum0 = Vector1D.Sum.of((Vector1D) vector1D_Unit0);
}"
1877,"    public static Vector1D of(final double x) {
        return new Vector1D(x);
    }","  public void test127()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D[] vector1DArray0 = new Vector1D[9];
      // Undeclared exception!
      try { 
        Vector1D.Sum.of((Vector1D) vector1D_Unit0, vector1DArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Vector1D"", e);
      }
  }"
1878,"    public static Interval of(final double a, final double b, final Precision.DoubleEquivalence precision) {
        validateIntervalValues(a, b);

        final double min = Math.min(a, b);
        final double max = Math.max(a, b);

        final OrientedPoint minBoundary = Double.isFinite(min) ?
                OrientedPoints.fromLocationAndDirection(min, false, precision) :
                null;

        final OrientedPoint maxBoundary = Double.isFinite(max) ?
                OrientedPoints.fromLocationAndDirection(max, true, precision) :
                null;

        if (minBoundary == null && maxBoundary == null) {
            return FULL;
        }

        return new Interval(minBoundary, maxBoundary);
    }","  public void test0()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of(0.0, 0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      UnaryOperator<Vector1D> unaryOperator0 = UnaryOperator.identity();
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.from(unaryOperator0);
      OrientedPoint orientedPoint1 = orientedPoint0.transform(affineTransformMatrix1D0);
      // Undeclared exception!
      try { 
        Interval.of(orientedPoint1, orientedPoint0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval: hyperplanes have same orientation: OrientedPoint[point= (0.0), direction= (-1.0)], OrientedPoint[point= (0.0), direction= (-1.0)]
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Interval"", e);
      }
  }"
1879,"    public Interval transform(final Transform<Vector1D> transform) {
        final OrientedPoint transformedMin = (minBoundary != null) ?
                minBoundary.transform(transform) :
                null;
        final OrientedPoint transformedMax = (maxBoundary != null) ?
                maxBoundary.transform(transform) :
                null;

        return of(transformedMin, transformedMax);
    }","  public void test1()  throws Throwable  {
      Interval interval0 = Interval.full();
      Interval interval1 = interval0.transform((Transform<Vector1D>) null);
}"
1880,"    public double getSize() {
        if (isInfinite()) {
            return Double.POSITIVE_INFINITY;
        }

        return getMax() - getMin();
    }","  public void test2()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(0.0, 0.0, 0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      OrientedPoint orientedPoint1 = orientedPoint0.transform(affineTransformMatrix1D0);
      OrientedPoint orientedPoint2 = orientedPoint1.reverse();
      Interval interval0 = Interval.of(orientedPoint2, orientedPoint0);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
}"
1881,"    public double getSize() {
        if (isInfinite()) {
            return Double.POSITIVE_INFINITY;
        }

        return getMax() - getMin();
    }","  public void test3()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(0.0, 0.0, 0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      OrientedPoint orientedPoint1 = orientedPoint0.transform(affineTransformMatrix1D0);
      OrientedPoint orientedPoint2 = orientedPoint1.reverse();
      Interval interval0 = Interval.of(orientedPoint2, orientedPoint0);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
}"
1882,"    public double getSize() {
        if (isInfinite()) {
            return Double.POSITIVE_INFINITY;
        }

        return getMax() - getMin();
    }","  public void test4()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.min(1603.3, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(1603.3);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
}"
1883,"    public double getMin() {
        return (minBoundary != null) ? minBoundary.getLocation() : Double.NEGATIVE_INFINITY;
    }","  public void test5()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.min(1603.3, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(1603.3);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
}"
1884,"    public double getMin() {
        return (minBoundary != null) ? minBoundary.getLocation() : Double.NEGATIVE_INFINITY;
    }","  public void test6()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.min(1603.3, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(1603.3);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
}"
1885,"    public boolean isInfinite() {
        return minBoundary == null || maxBoundary == null;
    }","  public void test7()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.max((-2759.48456), precision_DoubleEquivalence0);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
}"
1886,"    public double getMax() {
        return (maxBoundary != null) ? maxBoundary.getLocation() : Double.POSITIVE_INFINITY;
    }","  public void test8()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.max((-2759.48456), precision_DoubleEquivalence0);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
}"
1887,"    public double getMax() {
        return (maxBoundary != null) ? maxBoundary.getLocation() : Double.POSITIVE_INFINITY;
    }","  public void test9()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.max((-2759.48456), precision_DoubleEquivalence0);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
}"
1888,"    public boolean hasMinBoundary() {
        return minBoundary != null;
    }","  public void test10()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.max((-2759.48456), precision_DoubleEquivalence0);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
}"
1889,"    public double getMin() {
        return (minBoundary != null) ? minBoundary.getLocation() : Double.NEGATIVE_INFINITY;
    }","  public void test11()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(0.0, 0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      OrientedPoint orientedPoint1 = orientedPoint0.reverse();
      Interval interval1 = Interval.of(orientedPoint1, orientedPoint0);
}"
1890,"    public double getMin() {
        return (minBoundary != null) ? minBoundary.getLocation() : Double.NEGATIVE_INFINITY;
    }","  public void test12()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(0.0, 0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      OrientedPoint orientedPoint1 = orientedPoint0.reverse();
      Interval interval1 = Interval.of(orientedPoint1, orientedPoint0);
}"
1891,"    public static Interval of(final double a, final double b, final Precision.DoubleEquivalence precision) {
        validateIntervalValues(a, b);

        final double min = Math.min(a, b);
        final double max = Math.max(a, b);

        final OrientedPoint minBoundary = Double.isFinite(min) ?
                OrientedPoints.fromLocationAndDirection(min, false, precision) :
                null;

        final OrientedPoint maxBoundary = Double.isFinite(max) ?
                OrientedPoints.fromLocationAndDirection(max, true, precision) :
                null;

        if (minBoundary == null && maxBoundary == null) {
            return FULL;
        }

        return new Interval(minBoundary, maxBoundary);
    }","  public void test13()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(0.0, 0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      OrientedPoint orientedPoint1 = orientedPoint0.reverse();
      Interval interval1 = Interval.of(orientedPoint1, orientedPoint0);
}"
1892,"    public boolean hasMaxBoundary() {
        return maxBoundary != null;
    }","  public void test14()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min(Double.NEGATIVE_INFINITY, precision_DoubleEquivalence0);
}"
1893,"    public double getMin() {
        return (minBoundary != null) ? minBoundary.getLocation() : Double.NEGATIVE_INFINITY;
    }","  public void test15()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max(Double.POSITIVE_INFINITY, precision_DoubleEquivalence0);
}"
1894,"    public double getSize() {
        if (isInfinite()) {
            return Double.POSITIVE_INFINITY;
        }

        return getMax() - getMin();
    }","  public void test16()  throws Throwable  {
      Interval interval0 = Interval.point(370.95824183326, (Precision.DoubleEquivalence) null);
      double double0 = interval0.getSize();
}"
1895,"    public double getSize() {
        if (isInfinite()) {
            return Double.POSITIVE_INFINITY;
        }

        return getMax() - getMin();
    }","  public void test17()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-1.0));
      OrientedPoint orientedPoint1 = orientedPoint0.transform(affineTransformMatrix1D0);
      Interval interval0 = Interval.of(orientedPoint1, orientedPoint0);
      double double0 = interval0.getSize();
}"
1896,"    public OrientedPoint getMinBoundary() {
        return minBoundary;
    }","  public void test18()  throws Throwable  {
      Interval interval0 = Interval.full();
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
}"
1897,"    public double getSize() {
        if (isInfinite()) {
            return Double.POSITIVE_INFINITY;
        }

        return getMax() - getMin();
    }","  public void test19()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(1166.7329232, 0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
}"
1898,"    public OrientedPoint getMinBoundary() {
        return minBoundary;
    }","  public void test20()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(1166.7329232, 0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
}"
1899,"    public OrientedPoint getMinBoundary() {
        return minBoundary;
    }","  public void test21()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(1166.7329232, 0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
}"
1900,"    public double getSize() {
        if (isInfinite()) {
            return Double.POSITIVE_INFINITY;
        }

        return getMax() - getMin();
    }","  public void test22()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(1386.307566, precision_DoubleEquivalence0);
      double double0 = interval0.getMin();
}"
1901,"    public double getMin() {
        return (minBoundary != null) ? minBoundary.getLocation() : Double.NEGATIVE_INFINITY;
    }","  public void test23()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(1386.307566, precision_DoubleEquivalence0);
      double double0 = interval0.getMin();
}"
1902,"    public OrientedPoint getMaxBoundary() {
        return maxBoundary;
    }","  public void test24()  throws Throwable  {
      Interval interval0 = Interval.full();
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
}"
1903,"    public double getMin() {
        return (minBoundary != null) ? minBoundary.getLocation() : Double.NEGATIVE_INFINITY;
    }","  public void test25()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
}"
1904,"    public OrientedPoint getMaxBoundary() {
        return maxBoundary;
    }","  public void test26()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
}"
1905,"    public OrientedPoint getMaxBoundary() {
        return maxBoundary;
    }","  public void test27()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
}"
1906,"    public boolean isInfinite() {
        return minBoundary == null || maxBoundary == null;
    }","  public void test28()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max((-1177.029681), precision_DoubleEquivalence0);
      double double0 = interval0.getMax();
}"
1907,"    public double getMax() {
        return (maxBoundary != null) ? maxBoundary.getLocation() : Double.POSITIVE_INFINITY;
    }","  public void test29()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max((-1177.029681), precision_DoubleEquivalence0);
      double double0 = interval0.getMax();
}"
1908,"    public Vector1D project(final Vector1D pt) {

        OrientedPoint boundary = null;

        if (minBoundary != null && maxBoundary != null) {
            // both boundaries are present; use the closest
            final double minOffset = minBoundary.offset(pt.getX());
            final double maxOffset = maxBoundary.offset(pt.getX());

            final double minDist = Math.abs(minOffset);
            final double maxDist = Math.abs(maxOffset);

            // Project onto the max boundary if it's the closest or the point is on its plus side.
            // Otherwise, project onto the min boundary.
            if (maxDist < minDist || maxOffset > 0) {
                boundary = maxBoundary;
            } else {
                boundary = minBoundary;
            }
        } else if (minBoundary != null) {
            // only the min boundary is present
            boundary = minBoundary;
        } else if (maxBoundary != null) {
            // only the max boundary is present
            boundary = maxBoundary;
        }

        return (boundary != null) ? boundary.project(pt) : null;
    }","  public void test30()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(0.0, precision_DoubleEquivalence0);
      Vector1D vector1D0 = interval0.getCentroid();
      Vector1D vector1D1 = interval0.project(vector1D0);
}"
1909,"    public double getMax() {
        return (maxBoundary != null) ? maxBoundary.getLocation() : Double.POSITIVE_INFINITY;
    }","  public void test31()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(0.0, precision_DoubleEquivalence0);
      Vector1D vector1D0 = interval0.getCentroid();
      Vector1D vector1D1 = interval0.project(vector1D0);
}"
1910,"    public Vector1D getCentroid() {
        if (isInfinite()) {
            return null;
        }

        final double min = getMin();
        final double max = getMax();

        return Vector1D.of((0.5 * (max - min)) + min);
    }","  public void test32()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((-2802.579228931), (-1069.845395603), precision_DoubleEquivalence0);
      Vector1D vector1D0 = interval0.getCentroid();
}"
1911,"    public Interval transform(final Transform<Vector1D> transform) {
        final OrientedPoint transformedMin = (minBoundary != null) ?
                minBoundary.transform(transform) :
                null;
        final OrientedPoint transformedMax = (maxBoundary != null) ?
                maxBoundary.transform(transform) :
                null;

        return of(transformedMin, transformedMax);
    }","  public void test33()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 277.60882242, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        interval0.transform((Transform<Vector1D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.OrientedPoint"", e);
      }
  }"
1912,"    public Split<Interval> split(final Hyperplane<Vector1D> splitter) {
        final OrientedPoint splitOrientedPoint = (OrientedPoint) splitter;
        final Vector1D splitPoint = splitOrientedPoint.getPoint();

        final HyperplaneLocation splitterMinLoc = (minBoundary != null) ? minBoundary.classify(splitPoint) : null;
        final HyperplaneLocation splitterMaxLoc = (maxBoundary != null) ? maxBoundary.classify(splitPoint) : null;

        Interval low = null;
        Interval high = null;

        if (splitterMinLoc != HyperplaneLocation.ON || splitterMaxLoc != HyperplaneLocation.ON) {

            if (splitterMinLoc != null && splitterMinLoc != HyperplaneLocation.MINUS) {
                // splitter is on or below min boundary
                high = this;
            } else if (splitterMaxLoc != null && splitterMaxLoc != HyperplaneLocation.MINUS) {
                // splitter is on or above max boundary
                low = this;
            } else {
                // the interval is split in two
                low = new Interval(minBoundary, OrientedPoints.createPositiveFacing(
                        splitPoint, splitOrientedPoint.getPrecision()));
                high = new Interval(OrientedPoints.createNegativeFacing(
                        splitPoint, splitOrientedPoint.getPrecision()), maxBoundary);
            }
        }

        // assign minus/plus based on the orientation of the splitter
        final boolean lowIsMinus = splitOrientedPoint.isPositiveFacing();
        final Interval minus = lowIsMinus ? low : high;
        final Interval plus = lowIsMinus ? high : low;

        return new Split<>(minus, plus);
    }","  public void test34()  throws Throwable  {
      Interval interval0 = Interval.max(1326.2228774699652, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        interval0.split((Hyperplane<Vector1D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Interval"", e);
      }
  }"
1913,"    public Vector1D project(final Vector1D pt) {

        OrientedPoint boundary = null;

        if (minBoundary != null && maxBoundary != null) {
            // both boundaries are present; use the closest
            final double minOffset = minBoundary.offset(pt.getX());
            final double maxOffset = maxBoundary.offset(pt.getX());

            final double minDist = Math.abs(minOffset);
            final double maxDist = Math.abs(maxOffset);

            // Project onto the max boundary if it's the closest or the point is on its plus side.
            // Otherwise, project onto the min boundary.
            if (maxDist < minDist || maxOffset > 0) {
                boundary = maxBoundary;
            } else {
                boundary = minBoundary;
            }
        } else if (minBoundary != null) {
            // only the min boundary is present
            boundary = minBoundary;
        } else if (maxBoundary != null) {
            // only the max boundary is present
            boundary = maxBoundary;
        }

        return (boundary != null) ? boundary.project(pt) : null;
    }","  public void test35()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 0.0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        interval0.project((Vector1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Interval"", e);
      }
  }"
1914,"    public static Interval point(final double location, final Precision.DoubleEquivalence precision) {
        return of(location, location, precision);
    }","  public void test36()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Interval.point(Double.NEGATIVE_INFINITY, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval values: [-\u221E, -\u221E]
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Interval"", e);
      }
  }"
1915,"    public static Interval of(final double a, final double b, final Precision.DoubleEquivalence precision) {
        validateIntervalValues(a, b);

        final double min = Math.min(a, b);
        final double max = Math.max(a, b);

        final OrientedPoint minBoundary = Double.isFinite(min) ?
                OrientedPoints.fromLocationAndDirection(min, false, precision) :
                null;

        final OrientedPoint maxBoundary = Double.isFinite(max) ?
                OrientedPoints.fromLocationAndDirection(max, true, precision) :
                null;

        if (minBoundary == null && maxBoundary == null) {
            return FULL;
        }

        return new Interval(minBoundary, maxBoundary);
    }","  public void test37()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Interval.of((Vector1D) null, (Vector1D) null, precision_DoubleEquivalence0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Interval"", e);
      }
  }"
1916,"    public static Interval of(final double a, final double b, final Precision.DoubleEquivalence precision) {
        validateIntervalValues(a, b);

        final double min = Math.min(a, b);
        final double max = Math.max(a, b);

        final OrientedPoint minBoundary = Double.isFinite(min) ?
                OrientedPoints.fromLocationAndDirection(min, false, precision) :
                null;

        final OrientedPoint maxBoundary = Double.isFinite(max) ?
                OrientedPoints.fromLocationAndDirection(max, true, precision) :
                null;

        if (minBoundary == null && maxBoundary == null) {
            return FULL;
        }

        return new Interval(minBoundary, maxBoundary);
    }","  public void test38()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        Interval.of(vector1D0, vector1D0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval values: [\u221E, \u221E]
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Interval"", e);
      }
  }"
1917,"    public static Interval of(final double a, final double b, final Precision.DoubleEquivalence precision) {
        validateIntervalValues(a, b);

        final double min = Math.min(a, b);
        final double max = Math.max(a, b);

        final OrientedPoint minBoundary = Double.isFinite(min) ?
                OrientedPoints.fromLocationAndDirection(min, false, precision) :
                null;

        final OrientedPoint maxBoundary = Double.isFinite(max) ?
                OrientedPoints.fromLocationAndDirection(max, true, precision) :
                null;

        if (minBoundary == null && maxBoundary == null) {
            return FULL;
        }

        return new Interval(minBoundary, maxBoundary);
    }","  public void test39()  throws Throwable  {
      Interval interval0 = Interval.point(2.409919865102884E-181, (Precision.DoubleEquivalence) null);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      OrientedPoint orientedPoint1 = interval0.getMinBoundary();
      // Undeclared exception!
      try { 
        Interval.of(orientedPoint0, orientedPoint1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.OrientedPoint"", e);
      }
  }"
1918,"    public static Interval of(final double a, final double b, final Precision.DoubleEquivalence precision) {
        validateIntervalValues(a, b);

        final double min = Math.min(a, b);
        final double max = Math.max(a, b);

        final OrientedPoint minBoundary = Double.isFinite(min) ?
                OrientedPoints.fromLocationAndDirection(min, false, precision) :
                null;

        final OrientedPoint maxBoundary = Double.isFinite(max) ?
                OrientedPoints.fromLocationAndDirection(max, true, precision) :
                null;

        if (minBoundary == null && maxBoundary == null) {
            return FULL;
        }

        return new Interval(minBoundary, maxBoundary);
    }","  public void test40()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Interval.of(Double.NaN, Double.NaN, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval values: [\uFFFD, \uFFFD]
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Interval"", e);
      }
  }"
1919,"    public boolean contains(final double x) {
        return classify(x) != RegionLocation.OUTSIDE;
    }","  public void test41()  throws Throwable  {
      Interval interval0 = Interval.max((-2556.783116914), (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        interval0.contains((-1.0));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.OrientedPoint"", e);
      }
  }"
1920,"    public RegionLocation classify(final Vector1D pt) {
        return classify(pt.getX());
    }","  public void test42()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point((-461.7278720759529), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        interval0.classify((Vector1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Interval"", e);
      }
  }"
1921,"    public RegionLocation classify(final Vector1D pt) {
        return classify(pt.getX());
    }","  public void test43()  throws Throwable  {
      Interval interval0 = Interval.min((-2556.783116914), (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        interval0.classify((-1294.4));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.OrientedPoint"", e);
      }
  }"
1922,"    public double getSize() {
        if (isInfinite()) {
            return Double.POSITIVE_INFINITY;
        }

        return getMax() - getMin();
    }","  public void test44()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point((-1568.5505671361), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Interval interval1 = Interval.of((OrientedPoint) null, orientedPoint0);
}"
1923,"    public double getMax() {
        return (maxBoundary != null) ? maxBoundary.getLocation() : Double.POSITIVE_INFINITY;
    }","  public void test45()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point((-1568.5505671361), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Interval interval1 = Interval.of((OrientedPoint) null, orientedPoint0);
}"
1924,"    public double getSize() {
        if (isInfinite()) {
            return Double.POSITIVE_INFINITY;
        }

        return getMax() - getMin();
    }","  public void test46()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point((-1568.5505671361), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Interval interval1 = Interval.of((OrientedPoint) null, orientedPoint0);
}"
1925,"    public boolean isEmpty() {
        return false;
    }","  public void test47()  throws Throwable  {
      Interval interval0 = Interval.of(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, (Precision.DoubleEquivalence) null);
}"
1926,"    public boolean isInfinite() {
        return minBoundary == null || maxBoundary == null;
    }","  public void test48()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, Double.NEGATIVE_INFINITY, precision_DoubleEquivalence0);
}"
1927,"    public double getMax() {
        return (maxBoundary != null) ? maxBoundary.getLocation() : Double.POSITIVE_INFINITY;
    }","  public void test49()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, Double.NEGATIVE_INFINITY, precision_DoubleEquivalence0);
}"
1928,"    public double getMin() {
        return (minBoundary != null) ? minBoundary.getLocation() : Double.NEGATIVE_INFINITY;
    }","  public void test50()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(116.43503181).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.min(116.43503181, precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify(116.43503181);
}"
1929,"    public RegionLocation classify(final Vector1D pt) {
        return classify(pt.getX());
    }","  public void test51()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(116.43503181).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.min(116.43503181, precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify(116.43503181);
}"
1930,"    public boolean isFinite() {
        return !isInfinite();
    }","  public void test52()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(116.43503181).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.min(116.43503181, precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify(116.43503181);
}"
1931,"    public double getMax() {
        return (maxBoundary != null) ? maxBoundary.getLocation() : Double.POSITIVE_INFINITY;
    }","  public void test53()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.max(780.319272543376, precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify(780.319272543376);
}"
1932,"    public boolean isFinite() {
        return !isInfinite();
    }","  public void test54()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.max(780.319272543376, precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify(780.319272543376);
}"
1933,"    public RegionLocation classify(final Vector1D pt) {
        return classify(pt.getX());
    }","  public void test55()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.max(780.319272543376, precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify(780.319272543376);
}"
1934,"    public double getSize() {
        if (isInfinite()) {
            return Double.POSITIVE_INFINITY;
        }

        return getMax() - getMin();
    }","  public void test56()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.point((-2540.88), precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify((-2540.88));
}"
1935,"    public RegionLocation classify(final Vector1D pt) {
        return classify(pt.getX());
    }","  public void test57()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.point((-2540.88), precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify((-2540.88));
}"
1936,"    public double getSize() {
        if (isInfinite()) {
            return Double.POSITIVE_INFINITY;
        }

        return getMax() - getMin();
    }","  public void test58()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point((-1139.094493753), precision_DoubleEquivalence0);
      interval0.isInfinite();
}"
1937,"    public double getMin() {
        return (minBoundary != null) ? minBoundary.getLocation() : Double.NEGATIVE_INFINITY;
    }","  public void test59()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min(0.0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isInfinite();
}"
1938,"    public boolean isInfinite() {
        return minBoundary == null || maxBoundary == null;
    }","  public void test60()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min(0.0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isInfinite();
}"
1939,"    public double getMax() {
        return (maxBoundary != null) ? maxBoundary.getLocation() : Double.POSITIVE_INFINITY;
    }","  public void test61()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(0.0, precision_DoubleEquivalence0);
      double double0 = interval0.getMax();
}"
1940,"    public double getMin() {
        return (minBoundary != null) ? minBoundary.getLocation() : Double.NEGATIVE_INFINITY;
    }","  public void test62()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(0.0, precision_DoubleEquivalence0);
      double double0 = interval0.getMax();
}"
1941,"    public double getMax() {
        return (maxBoundary != null) ? maxBoundary.getLocation() : Double.POSITIVE_INFINITY;
    }","  public void test63()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min((-390.863487546476), precision_DoubleEquivalence0);
      double double0 = interval0.getMax();
}"
1942,"    public double getMin() {
        return (minBoundary != null) ? minBoundary.getLocation() : Double.NEGATIVE_INFINITY;
    }","  public void test64()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min((-390.863487546476), precision_DoubleEquivalence0);
      double double0 = interval0.getMax();
}"
1943,"    public double getMin() {
        return (minBoundary != null) ? minBoundary.getLocation() : Double.NEGATIVE_INFINITY;
    }","  public void test65()  throws Throwable  {
      Interval interval0 = Interval.full();
      double double0 = interval0.getMin();
}"
1944,"    public double getMin() {
        return (minBoundary != null) ? minBoundary.getLocation() : Double.NEGATIVE_INFINITY;
    }","  public void test66()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 1431.0878063748687, precision_DoubleEquivalence0);
      double double0 = interval0.getMin();
}"
1945,"    public double getSize() {
        if (isInfinite()) {
            return Double.POSITIVE_INFINITY;
        }

        return getMax() - getMin();
    }","  public void test67()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 1431.0878063748687, precision_DoubleEquivalence0);
      double double0 = interval0.getMin();
}"
1946,"    public RegionLocation classify(final Vector1D pt) {
        return classify(pt.getX());
    }","  public void test68()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1277.5065134));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      Interval interval0 = Interval.of(orientedPoint0, (OrientedPoint) null);
      RegionLocation regionLocation0 = interval0.classify(vector1D0);
}"
1947,"    public double getMax() {
        return (maxBoundary != null) ? maxBoundary.getLocation() : Double.POSITIVE_INFINITY;
    }","  public void test69()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1277.5065134));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      Interval interval0 = Interval.of(orientedPoint0, (OrientedPoint) null);
      RegionLocation regionLocation0 = interval0.classify(vector1D0);
}"
1948,"    public static Interval min(final double min, final Precision.DoubleEquivalence precision) {
        return of(min, Double.POSITIVE_INFINITY, precision);
    }","  public void test70()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Interval.min(Double.POSITIVE_INFINITY, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval values: [\u221E, \u221E]
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Interval"", e);
      }
  }"
1949,"    public static Interval max(final double max, final Precision.DoubleEquivalence precision) {
        return of(Double.NEGATIVE_INFINITY, max, precision);
    }","  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.max(Double.NaN, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval values: [-\u221E, \uFFFD]
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Interval"", e);
      }
  }"
1950,"    public double getMin() {
        return (minBoundary != null) ? minBoundary.getLocation() : Double.NEGATIVE_INFINITY;
    }","  public void test72()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(0.0, 0.0, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
}"
1951,"    public boolean isFinite() {
        return !isInfinite();
    }","  public void test73()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(0.0, 0.0, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
}"
1952,"    public double getSize() {
        if (isInfinite()) {
            return Double.POSITIVE_INFINITY;
        }

        return getMax() - getMin();
    }","  public void test74()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(0.0, 0.0, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
}"
1953,"    public static Interval of(final double a, final double b, final Precision.DoubleEquivalence precision) {
        validateIntervalValues(a, b);

        final double min = Math.min(a, b);
        final double max = Math.max(a, b);

        final OrientedPoint minBoundary = Double.isFinite(min) ?
                OrientedPoints.fromLocationAndDirection(min, false, precision) :
                null;

        final OrientedPoint maxBoundary = Double.isFinite(max) ?
                OrientedPoints.fromLocationAndDirection(max, true, precision) :
                null;

        if (minBoundary == null && maxBoundary == null) {
            return FULL;
        }

        return new Interval(minBoundary, maxBoundary);
    }","  public void test75()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint1 = orientedPoint0.reverse();
      // Undeclared exception!
      try { 
        Interval.of(orientedPoint1, orientedPoint0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval: hyperplanes do not form interval: OrientedPoint[point= (NaN), direction= (1.0)], OrientedPoint[point= (NaN), direction= (-1.0)]
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Interval"", e);
      }
  }"
1954,"    public Interval transform(final Transform<Vector1D> transform) {
        final OrientedPoint transformedMin = (minBoundary != null) ?
                minBoundary.transform(transform) :
                null;
        final OrientedPoint transformedMax = (maxBoundary != null) ?
                maxBoundary.transform(transform) :
                null;

        return of(transformedMin, transformedMax);
    }","  public void test76()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn((-189.53204134020137), 1.9563291713325808).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.point((-189.53204134020137), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        interval0.transform(affineTransformMatrix1D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval: hyperplanes do not form interval: OrientedPoint[point= (-189.53204134020137), direction= (-1.0)], OrientedPoint[point= (-189.53204134020137), direction= (1.0)]
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Interval"", e);
      }
  }"
1955,"    public double getMin() {
        return (minBoundary != null) ? minBoundary.getLocation() : Double.NEGATIVE_INFINITY;
    }","  public void test77()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      Interval interval0 = Interval.of((OrientedPoint) null, orientedPoint0);
}"
1956,"    public double getMax() {
        return (maxBoundary != null) ? maxBoundary.getLocation() : Double.POSITIVE_INFINITY;
    }","  public void test78()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      Interval interval0 = Interval.of((OrientedPoint) null, orientedPoint0);
}"
1957,"    public double getMax() {
        return (maxBoundary != null) ? maxBoundary.getLocation() : Double.POSITIVE_INFINITY;
    }","  public void test79()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 1.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Interval interval1 = Interval.of(orientedPoint0, (OrientedPoint) null);
}"
1958,"    public double getMin() {
        return (minBoundary != null) ? minBoundary.getLocation() : Double.NEGATIVE_INFINITY;
    }","  public void test80()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 1.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Interval interval1 = Interval.of(orientedPoint0, (OrientedPoint) null);
}"
1959,"    public boolean isInfinite() {
        return minBoundary == null || maxBoundary == null;
    }","  public void test81()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 1.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Interval interval1 = Interval.of(orientedPoint0, (OrientedPoint) null);
}"
1960,"    public boolean hasMinBoundary() {
        return minBoundary != null;
    }","  public void test82()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = Vector1D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(vector1D1, vector1D0, precision_DoubleEquivalence0);
}"
1961,"    public Split<Interval> split(final Hyperplane<Vector1D> splitter) {
        final OrientedPoint splitOrientedPoint = (OrientedPoint) splitter;
        final Vector1D splitPoint = splitOrientedPoint.getPoint();

        final HyperplaneLocation splitterMinLoc = (minBoundary != null) ? minBoundary.classify(splitPoint) : null;
        final HyperplaneLocation splitterMaxLoc = (maxBoundary != null) ? maxBoundary.classify(splitPoint) : null;

        Interval low = null;
        Interval high = null;

        if (splitterMinLoc != HyperplaneLocation.ON || splitterMaxLoc != HyperplaneLocation.ON) {

            if (splitterMinLoc != null && splitterMinLoc != HyperplaneLocation.MINUS) {
                // splitter is on or below min boundary
                high = this;
            } else if (splitterMaxLoc != null && splitterMaxLoc != HyperplaneLocation.MINUS) {
                // splitter is on or above max boundary
                low = this;
            } else {
                // the interval is split in two
                low = new Interval(minBoundary, OrientedPoints.createPositiveFacing(
                        splitPoint, splitOrientedPoint.getPrecision()));
                high = new Interval(OrientedPoints.createNegativeFacing(
                        splitPoint, splitOrientedPoint.getPrecision()), maxBoundary);
            }
        }

        // assign minus/plus based on the orientation of the splitter
        final boolean lowIsMinus = splitOrientedPoint.isPositiveFacing();
        final Interval minus = lowIsMinus ? low : high;
        final Interval plus = lowIsMinus ? high : low;

        return new Split<>(minus, plus);
    }","  public void test83()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of((-1576.4973813883212), (-1576.4973813883212), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Split<Interval> split0 = interval0.split(orientedPoint0);
}"
1962,"    public Split<Interval> split(final Hyperplane<Vector1D> splitter) {
        final OrientedPoint splitOrientedPoint = (OrientedPoint) splitter;
        final Vector1D splitPoint = splitOrientedPoint.getPoint();

        final HyperplaneLocation splitterMinLoc = (minBoundary != null) ? minBoundary.classify(splitPoint) : null;
        final HyperplaneLocation splitterMaxLoc = (maxBoundary != null) ? maxBoundary.classify(splitPoint) : null;

        Interval low = null;
        Interval high = null;

        if (splitterMinLoc != HyperplaneLocation.ON || splitterMaxLoc != HyperplaneLocation.ON) {

            if (splitterMinLoc != null && splitterMinLoc != HyperplaneLocation.MINUS) {
                // splitter is on or below min boundary
                high = this;
            } else if (splitterMaxLoc != null && splitterMaxLoc != HyperplaneLocation.MINUS) {
                // splitter is on or above max boundary
                low = this;
            } else {
                // the interval is split in two
                low = new Interval(minBoundary, OrientedPoints.createPositiveFacing(
                        splitPoint, splitOrientedPoint.getPrecision()));
                high = new Interval(OrientedPoints.createNegativeFacing(
                        splitPoint, splitOrientedPoint.getPrecision()), maxBoundary);
            }
        }

        // assign minus/plus based on the orientation of the splitter
        final boolean lowIsMinus = splitOrientedPoint.isPositiveFacing();
        final Interval minus = lowIsMinus ? low : high;
        final Interval plus = lowIsMinus ? high : low;

        return new Split<>(minus, plus);
    }","  public void test84()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of((-1576.4973813883212), (-1576.4973813883212), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Split<Interval> split0 = interval0.split(orientedPoint0);
}"
1963,"    public double getSize() {
        if (isInfinite()) {
            return Double.POSITIVE_INFINITY;
        }

        return getMax() - getMin();
    }","  public void test85()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of((-1576.4973813883212), (-1576.4973813883212), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Split<Interval> split0 = interval0.split(orientedPoint0);
}"
1964,"    public Split<Interval> split(final Hyperplane<Vector1D> splitter) {
        final OrientedPoint splitOrientedPoint = (OrientedPoint) splitter;
        final Vector1D splitPoint = splitOrientedPoint.getPoint();

        final HyperplaneLocation splitterMinLoc = (minBoundary != null) ? minBoundary.classify(splitPoint) : null;
        final HyperplaneLocation splitterMaxLoc = (maxBoundary != null) ? maxBoundary.classify(splitPoint) : null;

        Interval low = null;
        Interval high = null;

        if (splitterMinLoc != HyperplaneLocation.ON || splitterMaxLoc != HyperplaneLocation.ON) {

            if (splitterMinLoc != null && splitterMinLoc != HyperplaneLocation.MINUS) {
                // splitter is on or below min boundary
                high = this;
            } else if (splitterMaxLoc != null && splitterMaxLoc != HyperplaneLocation.MINUS) {
                // splitter is on or above max boundary
                low = this;
            } else {
                // the interval is split in two
                low = new Interval(minBoundary, OrientedPoints.createPositiveFacing(
                        splitPoint, splitOrientedPoint.getPrecision()));
                high = new Interval(OrientedPoints.createNegativeFacing(
                        splitPoint, splitOrientedPoint.getPrecision()), maxBoundary);
            }
        }

        // assign minus/plus based on the orientation of the splitter
        final boolean lowIsMinus = splitOrientedPoint.isPositiveFacing();
        final Interval minus = lowIsMinus ? low : high;
        final Interval plus = lowIsMinus ? high : low;

        return new Split<>(minus, plus);
    }","  public void test86()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 1.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(0.0, 1.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Split<Interval> split0 = interval0.split(orientedPoint0);
}"
1965,"    public double getMin() {
        return (minBoundary != null) ? minBoundary.getLocation() : Double.NEGATIVE_INFINITY;
    }","  public void test87()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 1.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(0.0, 1.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Split<Interval> split0 = interval0.split(orientedPoint0);
}"
1966,"    public double getSize() {
        if (isInfinite()) {
            return Double.POSITIVE_INFINITY;
        }

        return getMax() - getMin();
    }","  public void test88()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 1.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(0.0, 1.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Split<Interval> split0 = interval0.split(orientedPoint0);
}"
1967,"    public Split<Interval> split(final Hyperplane<Vector1D> splitter) {
        final OrientedPoint splitOrientedPoint = (OrientedPoint) splitter;
        final Vector1D splitPoint = splitOrientedPoint.getPoint();

        final HyperplaneLocation splitterMinLoc = (minBoundary != null) ? minBoundary.classify(splitPoint) : null;
        final HyperplaneLocation splitterMaxLoc = (maxBoundary != null) ? maxBoundary.classify(splitPoint) : null;

        Interval low = null;
        Interval high = null;

        if (splitterMinLoc != HyperplaneLocation.ON || splitterMaxLoc != HyperplaneLocation.ON) {

            if (splitterMinLoc != null && splitterMinLoc != HyperplaneLocation.MINUS) {
                // splitter is on or below min boundary
                high = this;
            } else if (splitterMaxLoc != null && splitterMaxLoc != HyperplaneLocation.MINUS) {
                // splitter is on or above max boundary
                low = this;
            } else {
                // the interval is split in two
                low = new Interval(minBoundary, OrientedPoints.createPositiveFacing(
                        splitPoint, splitOrientedPoint.getPrecision()));
                high = new Interval(OrientedPoints.createNegativeFacing(
                        splitPoint, splitOrientedPoint.getPrecision()), maxBoundary);
            }
        }

        // assign minus/plus based on the orientation of the splitter
        final boolean lowIsMinus = splitOrientedPoint.isPositiveFacing();
        final Interval minus = lowIsMinus ? low : high;
        final Interval plus = lowIsMinus ? high : low;

        return new Split<>(minus, plus);
    }","  public void test89()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max((-189.53204134020137), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Interval interval1 = Interval.full();
      Split<Interval> split0 = interval1.split(orientedPoint0);
}"
1968,"    public Split<Interval> split(final Hyperplane<Vector1D> splitter) {
        final OrientedPoint splitOrientedPoint = (OrientedPoint) splitter;
        final Vector1D splitPoint = splitOrientedPoint.getPoint();

        final HyperplaneLocation splitterMinLoc = (minBoundary != null) ? minBoundary.classify(splitPoint) : null;
        final HyperplaneLocation splitterMaxLoc = (maxBoundary != null) ? maxBoundary.classify(splitPoint) : null;

        Interval low = null;
        Interval high = null;

        if (splitterMinLoc != HyperplaneLocation.ON || splitterMaxLoc != HyperplaneLocation.ON) {

            if (splitterMinLoc != null && splitterMinLoc != HyperplaneLocation.MINUS) {
                // splitter is on or below min boundary
                high = this;
            } else if (splitterMaxLoc != null && splitterMaxLoc != HyperplaneLocation.MINUS) {
                // splitter is on or above max boundary
                low = this;
            } else {
                // the interval is split in two
                low = new Interval(minBoundary, OrientedPoints.createPositiveFacing(
                        splitPoint, splitOrientedPoint.getPrecision()));
                high = new Interval(OrientedPoints.createNegativeFacing(
                        splitPoint, splitOrientedPoint.getPrecision()), maxBoundary);
            }
        }

        // assign minus/plus based on the orientation of the splitter
        final boolean lowIsMinus = splitOrientedPoint.isPositiveFacing();
        final Interval minus = lowIsMinus ? low : high;
        final Interval plus = lowIsMinus ? high : low;

        return new Split<>(minus, plus);
    }","  public void test90()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max((-189.53204134020137), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Interval interval1 = Interval.full();
      Split<Interval> split0 = interval1.split(orientedPoint0);
}"
1969,"    public Split<Interval> split(final Hyperplane<Vector1D> splitter) {
        final OrientedPoint splitOrientedPoint = (OrientedPoint) splitter;
        final Vector1D splitPoint = splitOrientedPoint.getPoint();

        final HyperplaneLocation splitterMinLoc = (minBoundary != null) ? minBoundary.classify(splitPoint) : null;
        final HyperplaneLocation splitterMaxLoc = (maxBoundary != null) ? maxBoundary.classify(splitPoint) : null;

        Interval low = null;
        Interval high = null;

        if (splitterMinLoc != HyperplaneLocation.ON || splitterMaxLoc != HyperplaneLocation.ON) {

            if (splitterMinLoc != null && splitterMinLoc != HyperplaneLocation.MINUS) {
                // splitter is on or below min boundary
                high = this;
            } else if (splitterMaxLoc != null && splitterMaxLoc != HyperplaneLocation.MINUS) {
                // splitter is on or above max boundary
                low = this;
            } else {
                // the interval is split in two
                low = new Interval(minBoundary, OrientedPoints.createPositiveFacing(
                        splitPoint, splitOrientedPoint.getPrecision()));
                high = new Interval(OrientedPoints.createNegativeFacing(
                        splitPoint, splitOrientedPoint.getPrecision()), maxBoundary);
            }
        }

        // assign minus/plus based on the orientation of the splitter
        final boolean lowIsMinus = splitOrientedPoint.isPositiveFacing();
        final Interval minus = lowIsMinus ? low : high;
        final Interval plus = lowIsMinus ? high : low;

        return new Split<>(minus, plus);
    }","  public void test91()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max((-189.53204134020137), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Interval interval1 = Interval.full();
      Split<Interval> split0 = interval1.split(orientedPoint0);
}"
1970,"    public boolean isInfinite() {
        return minBoundary == null || maxBoundary == null;
    }","  public void test92()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max((-189.53204134020137), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Interval interval1 = Interval.full();
      Split<Interval> split0 = interval1.split(orientedPoint0);
}"
1971,"    public double getSize() {
        if (isInfinite()) {
            return Double.POSITIVE_INFINITY;
        }

        return getMax() - getMin();
    }","  public void test93()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-980.43904926), (-980.43904926)).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(1338.1161294, (-980.43904926), precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence1);
      Split<Interval> split0 = interval0.split(orientedPoint0);
}"
1972,"    public Split<Interval> split(final Hyperplane<Vector1D> splitter) {
        final OrientedPoint splitOrientedPoint = (OrientedPoint) splitter;
        final Vector1D splitPoint = splitOrientedPoint.getPoint();

        final HyperplaneLocation splitterMinLoc = (minBoundary != null) ? minBoundary.classify(splitPoint) : null;
        final HyperplaneLocation splitterMaxLoc = (maxBoundary != null) ? maxBoundary.classify(splitPoint) : null;

        Interval low = null;
        Interval high = null;

        if (splitterMinLoc != HyperplaneLocation.ON || splitterMaxLoc != HyperplaneLocation.ON) {

            if (splitterMinLoc != null && splitterMinLoc != HyperplaneLocation.MINUS) {
                // splitter is on or below min boundary
                high = this;
            } else if (splitterMaxLoc != null && splitterMaxLoc != HyperplaneLocation.MINUS) {
                // splitter is on or above max boundary
                low = this;
            } else {
                // the interval is split in two
                low = new Interval(minBoundary, OrientedPoints.createPositiveFacing(
                        splitPoint, splitOrientedPoint.getPrecision()));
                high = new Interval(OrientedPoints.createNegativeFacing(
                        splitPoint, splitOrientedPoint.getPrecision()), maxBoundary);
            }
        }

        // assign minus/plus based on the orientation of the splitter
        final boolean lowIsMinus = splitOrientedPoint.isPositiveFacing();
        final Interval minus = lowIsMinus ? low : high;
        final Interval plus = lowIsMinus ? high : low;

        return new Split<>(minus, plus);
    }","  public void test94()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-980.43904926), (-980.43904926)).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(1338.1161294, (-980.43904926), precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence1);
      Split<Interval> split0 = interval0.split(orientedPoint0);
}"
1973,"    public double getMax() {
        return (maxBoundary != null) ? maxBoundary.getLocation() : Double.POSITIVE_INFINITY;
    }","  public void test95()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.max((-189.53204134020137), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Split<Interval> split0 = interval0.split(orientedPoint0);
}"
1974,"    public Split<Interval> split(final Hyperplane<Vector1D> splitter) {
        final OrientedPoint splitOrientedPoint = (OrientedPoint) splitter;
        final Vector1D splitPoint = splitOrientedPoint.getPoint();

        final HyperplaneLocation splitterMinLoc = (minBoundary != null) ? minBoundary.classify(splitPoint) : null;
        final HyperplaneLocation splitterMaxLoc = (maxBoundary != null) ? maxBoundary.classify(splitPoint) : null;

        Interval low = null;
        Interval high = null;

        if (splitterMinLoc != HyperplaneLocation.ON || splitterMaxLoc != HyperplaneLocation.ON) {

            if (splitterMinLoc != null && splitterMinLoc != HyperplaneLocation.MINUS) {
                // splitter is on or below min boundary
                high = this;
            } else if (splitterMaxLoc != null && splitterMaxLoc != HyperplaneLocation.MINUS) {
                // splitter is on or above max boundary
                low = this;
            } else {
                // the interval is split in two
                low = new Interval(minBoundary, OrientedPoints.createPositiveFacing(
                        splitPoint, splitOrientedPoint.getPrecision()));
                high = new Interval(OrientedPoints.createNegativeFacing(
                        splitPoint, splitOrientedPoint.getPrecision()), maxBoundary);
            }
        }

        // assign minus/plus based on the orientation of the splitter
        final boolean lowIsMinus = splitOrientedPoint.isPositiveFacing();
        final Interval minus = lowIsMinus ? low : high;
        final Interval plus = lowIsMinus ? high : low;

        return new Split<>(minus, plus);
    }","  public void test96()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.max((-189.53204134020137), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Split<Interval> split0 = interval0.split(orientedPoint0);
}"
1975,"    public double getSize() {
        if (isInfinite()) {
            return Double.POSITIVE_INFINITY;
        }

        return getMax() - getMin();
    }","  public void test97()  throws Throwable  {
      Interval interval0 = Interval.full();
      double double0 = interval0.getSize();
}"
1976,"    public boolean isInfinite() {
        return minBoundary == null || maxBoundary == null;
    }","  public void test98()  throws Throwable  {
      Interval interval0 = Interval.full();
      double double0 = interval0.getSize();
}"
1977,"    public boolean isFull() {
        return minBoundary == null && maxBoundary == null;
    }","  public void test99()  throws Throwable  {
      Interval interval0 = Interval.full();
      boolean boolean0 = interval0.isFull();
}"
1978,"    public boolean isInfinite() {
        return minBoundary == null || maxBoundary == null;
    }","  public void test100()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max(1603.3, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isFull();
}"
1979,"    public boolean isFull() {
        return minBoundary == null && maxBoundary == null;
    }","  public void test101()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max(1603.3, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isFull();
}"
1980,"    public double getMax() {
        return (maxBoundary != null) ? maxBoundary.getLocation() : Double.POSITIVE_INFINITY;
    }","  public void test102()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max(1603.3, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isFull();
}"
1981,"    public double getMin() {
        return (minBoundary != null) ? minBoundary.getLocation() : Double.NEGATIVE_INFINITY;
    }","  public void test103()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isFull();
}"
1982,"    public double getMax() {
        return (maxBoundary != null) ? maxBoundary.getLocation() : Double.POSITIVE_INFINITY;
    }","  public void test104()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isFull();
}"
1983,"    public boolean isFull() {
        return minBoundary == null && maxBoundary == null;
    }","  public void test105()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isFull();
}"
1984,"    public double getMax() {
        return (maxBoundary != null) ? maxBoundary.getLocation() : Double.POSITIVE_INFINITY;
    }","  public void test106()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.max(0.0, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
}"
1985,"    public double getMax() {
        return (maxBoundary != null) ? maxBoundary.getLocation() : Double.POSITIVE_INFINITY;
    }","  public void test107()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.max(0.0, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
}"
1986,"    public boolean isInfinite() {
        return minBoundary == null || maxBoundary == null;
    }","  public void test108()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.max(0.0, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
}"
1987,"    public boolean isFinite() {
        return !isInfinite();
    }","  public void test109()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.max(0.0, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
}"
1988,"    public Vector1D project(final Vector1D pt) {

        OrientedPoint boundary = null;

        if (minBoundary != null && maxBoundary != null) {
            // both boundaries are present; use the closest
            final double minOffset = minBoundary.offset(pt.getX());
            final double maxOffset = maxBoundary.offset(pt.getX());

            final double minDist = Math.abs(minOffset);
            final double maxDist = Math.abs(maxOffset);

            // Project onto the max boundary if it's the closest or the point is on its plus side.
            // Otherwise, project onto the min boundary.
            if (maxDist < minDist || maxOffset > 0) {
                boundary = maxBoundary;
            } else {
                boundary = minBoundary;
            }
        } else if (minBoundary != null) {
            // only the min boundary is present
            boundary = minBoundary;
        } else if (maxBoundary != null) {
            // only the max boundary is present
            boundary = maxBoundary;
        }

        return (boundary != null) ? boundary.project(pt) : null;
    }","  public void test110()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max(1603.3, precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = interval0.project((Vector1D) vector1D_Unit0);
}"
1989,"    public double getMax() {
        return (maxBoundary != null) ? maxBoundary.getLocation() : Double.POSITIVE_INFINITY;
    }","  public void test111()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max(1603.3, precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = interval0.project((Vector1D) vector1D_Unit0);
}"
1990,"    public boolean isInfinite() {
        return minBoundary == null || maxBoundary == null;
    }","  public void test112()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max(1603.3, precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = interval0.project((Vector1D) vector1D_Unit0);
}"
1991,"    public double getSize() {
        if (isInfinite()) {
            return Double.POSITIVE_INFINITY;
        }

        return getMax() - getMin();
    }","  public void test113()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point((-256.0), precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      interval0.project((Vector1D) vector1D_Unit0);
}"
1992,"    public Vector1D getCentroid() {
        if (isInfinite()) {
            return null;
        }

        final double min = getMin();
        final double max = getMax();

        return Vector1D.of((0.5 * (max - min)) + min);
    }","  public void test114()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(3764.46, 3764.46, precision_DoubleEquivalence0);
      Vector1D vector1D0 = interval0.getCentroid();
}"
1993,"    public Vector1D project(final Vector1D pt) {

        OrientedPoint boundary = null;

        if (minBoundary != null && maxBoundary != null) {
            // both boundaries are present; use the closest
            final double minOffset = minBoundary.offset(pt.getX());
            final double maxOffset = maxBoundary.offset(pt.getX());

            final double minDist = Math.abs(minOffset);
            final double maxDist = Math.abs(maxOffset);

            // Project onto the max boundary if it's the closest or the point is on its plus side.
            // Otherwise, project onto the min boundary.
            if (maxDist < minDist || maxOffset > 0) {
                boundary = maxBoundary;
            } else {
                boundary = minBoundary;
            }
        } else if (minBoundary != null) {
            // only the min boundary is present
            boundary = minBoundary;
        } else if (maxBoundary != null) {
            // only the max boundary is present
            boundary = maxBoundary;
        }

        return (boundary != null) ? boundary.project(pt) : null;
    }","  public void test115()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(3764.46, 3764.46, precision_DoubleEquivalence0);
      Vector1D vector1D0 = interval0.getCentroid();
      Interval interval1 = Interval.of(1.0, 3764.46, (Precision.DoubleEquivalence) null);
      Vector1D vector1D1 = interval1.project(vector1D0);
}"
1994,"    public double getSize() {
        if (isInfinite()) {
            return Double.POSITIVE_INFINITY;
        }

        return getMax() - getMin();
    }","  public void test116()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(3764.46, 3764.46, precision_DoubleEquivalence0);
      Vector1D vector1D0 = interval0.getCentroid();
      Interval interval1 = Interval.of(1.0, 3764.46, (Precision.DoubleEquivalence) null);
      Vector1D vector1D1 = interval1.project(vector1D0);
}"
1995,"    public Vector1D project(final Vector1D pt) {

        OrientedPoint boundary = null;

        if (minBoundary != null && maxBoundary != null) {
            // both boundaries are present; use the closest
            final double minOffset = minBoundary.offset(pt.getX());
            final double maxOffset = maxBoundary.offset(pt.getX());

            final double minDist = Math.abs(minOffset);
            final double maxDist = Math.abs(maxOffset);

            // Project onto the max boundary if it's the closest or the point is on its plus side.
            // Otherwise, project onto the min boundary.
            if (maxDist < minDist || maxOffset > 0) {
                boundary = maxBoundary;
            } else {
                boundary = minBoundary;
            }
        } else if (minBoundary != null) {
            // only the min boundary is present
            boundary = minBoundary;
        } else if (maxBoundary != null) {
            // only the max boundary is present
            boundary = maxBoundary;
        }

        return (boundary != null) ? boundary.project(pt) : null;
    }","  public void test117()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1277.5065134));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      Interval interval0 = Interval.of(orientedPoint0, (OrientedPoint) null);
      Vector1D vector1D1 = interval0.project(vector1D0);
}"
1996,"    public boolean hasMaxBoundary() {
        return maxBoundary != null;
    }","  public void test118()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1277.5065134));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      Interval interval0 = Interval.of(orientedPoint0, (OrientedPoint) null);
      Vector1D vector1D1 = interval0.project(vector1D0);
}"
1997,"    public double getMax() {
        return (maxBoundary != null) ? maxBoundary.getLocation() : Double.POSITIVE_INFINITY;
    }","  public void test119()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(1338.1161294, (-980.43904926), precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = interval0.project((Vector1D) vector1D_Unit0);
}"
1998,"    public Vector1D project(final Vector1D pt) {

        OrientedPoint boundary = null;

        if (minBoundary != null && maxBoundary != null) {
            // both boundaries are present; use the closest
            final double minOffset = minBoundary.offset(pt.getX());
            final double maxOffset = maxBoundary.offset(pt.getX());

            final double minDist = Math.abs(minOffset);
            final double maxDist = Math.abs(maxOffset);

            // Project onto the max boundary if it's the closest or the point is on its plus side.
            // Otherwise, project onto the min boundary.
            if (maxDist < minDist || maxOffset > 0) {
                boundary = maxBoundary;
            } else {
                boundary = minBoundary;
            }
        } else if (minBoundary != null) {
            // only the min boundary is present
            boundary = minBoundary;
        } else if (maxBoundary != null) {
            // only the max boundary is present
            boundary = maxBoundary;
        }

        return (boundary != null) ? boundary.project(pt) : null;
    }","  public void test120()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(1338.1161294, (-980.43904926), precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = interval0.project((Vector1D) vector1D_Unit0);
}"
1999,"    public Vector1D project(final Vector1D pt) {

        OrientedPoint boundary = null;

        if (minBoundary != null && maxBoundary != null) {
            // both boundaries are present; use the closest
            final double minOffset = minBoundary.offset(pt.getX());
            final double maxOffset = maxBoundary.offset(pt.getX());

            final double minDist = Math.abs(minOffset);
            final double maxDist = Math.abs(maxOffset);

            // Project onto the max boundary if it's the closest or the point is on its plus side.
            // Otherwise, project onto the min boundary.
            if (maxDist < minDist || maxOffset > 0) {
                boundary = maxBoundary;
            } else {
                boundary = minBoundary;
            }
        } else if (minBoundary != null) {
            // only the min boundary is present
            boundary = minBoundary;
        } else if (maxBoundary != null) {
            // only the max boundary is present
            boundary = maxBoundary;
        }

        return (boundary != null) ? boundary.project(pt) : null;
    }","  public void test121()  throws Throwable  {
      Interval interval0 = Interval.full();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, true, precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = orientedPoint0.getDirection();
      Vector1D vector1D0 = interval0.project((Vector1D) vector1D_Unit0);
}"
2000,"    public boolean contains(final double x) {
        return classify(x) != RegionLocation.OUTSIDE;
    }","  public void test122()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-980.43904926), (-980.43904926)).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(1338.1161294, (-980.43904926), precision_DoubleEquivalence0);
      boolean boolean0 = interval0.contains(Double.POSITIVE_INFINITY);
}"
2001,"    public double getSize() {
        if (isInfinite()) {
            return Double.POSITIVE_INFINITY;
        }

        return getMax() - getMin();
    }","  public void test123()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-980.43904926), (-980.43904926)).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(1338.1161294, (-980.43904926), precision_DoubleEquivalence0);
      boolean boolean0 = interval0.contains(Double.POSITIVE_INFINITY);
}"
2002,"    public double getSize() {
        if (isInfinite()) {
            return Double.POSITIVE_INFINITY;
        }

        return getMax() - getMin();
    }","  public void test124()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-524.73524298), Double.POSITIVE_INFINITY).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.contains(vector1D_Unit0);
}"
2003,"    public boolean contains(final double x) {
        return classify(x) != RegionLocation.OUTSIDE;
    }","  public void test125()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-524.73524298), Double.POSITIVE_INFINITY).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.contains(vector1D_Unit0);
}"
2004,"    public boolean contains(final double x) {
        return classify(x) != RegionLocation.OUTSIDE;
    }","  public void test126()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min(0.0, precision_DoubleEquivalence0);
      Vector1D vector1D0 = Vector1D.NaN;
      boolean boolean0 = interval0.contains(vector1D0);
}"
2005,"    public double getMin() {
        return (minBoundary != null) ? minBoundary.getLocation() : Double.NEGATIVE_INFINITY;
    }","  public void test127()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min(0.0, precision_DoubleEquivalence0);
      Vector1D vector1D0 = Vector1D.NaN;
      boolean boolean0 = interval0.contains(vector1D0);
}"
2006,"    public boolean hasMaxBoundary() {
        return maxBoundary != null;
    }","  public void test128()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min(0.0, precision_DoubleEquivalence0);
      Vector1D vector1D0 = Vector1D.NaN;
      boolean boolean0 = interval0.contains(vector1D0);
}"
2007,"    public double getMax() {
        return (maxBoundary != null) ? maxBoundary.getLocation() : Double.POSITIVE_INFINITY;
    }","  public void test129()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.25).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.max(780.319272543376, precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify(780.319272543376);
}"
2008,"    public RegionLocation classify(final Vector1D pt) {
        return classify(pt.getX());
    }","  public void test130()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.25).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.max(780.319272543376, precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify(780.319272543376);
}"
2009,"    public boolean isFinite() {
        return !isInfinite();
    }","  public void test131()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.25).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.max(780.319272543376, precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify(780.319272543376);
}"
2010,"    public boolean contains(final double x) {
        return classify(x) != RegionLocation.OUTSIDE;
    }","  public void test132()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(4254.0, 4254.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.contains(4254.0);
}"
2011,"    public double getMin() {
        return (minBoundary != null) ? minBoundary.getLocation() : Double.NEGATIVE_INFINITY;
    }","  public void test133()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(4254.0, 4254.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.contains(4254.0);
}"
2012,"    public double getMax() {
        return (maxBoundary != null) ? maxBoundary.getLocation() : Double.POSITIVE_INFINITY;
    }","  public void test134()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(4254.0, 4254.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.contains(4254.0);
}"
2013,"    public RegionLocation classify(final Vector1D pt) {
        return classify(pt.getX());
    }","  public void test135()  throws Throwable  {
      Interval interval0 = Interval.of((OrientedPoint) null, (OrientedPoint) null);
      RegionLocation regionLocation0 = interval0.classify(780.319272543376);
}"
2014,"    public boolean isFinite() {
        return !isInfinite();
    }","  public void test136()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isFinite();
}"
2015,"    public double getSize() {
        if (isInfinite()) {
            return Double.POSITIVE_INFINITY;
        }

        return getMax() - getMin();
    }","  public void test137()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isFinite();
}"
2016,"    public boolean isFinite() {
        return !isInfinite();
    }","  public void test138()  throws Throwable  {
      Interval interval0 = Interval.full();
      boolean boolean0 = interval0.isFinite();
}"
2017,"    public Vector1D getCentroid() {
        if (isInfinite()) {
            return null;
        }

        final double min = getMin();
        final double max = getMax();

        return Vector1D.of((0.5 * (max - min)) + min);
    }","  public void test139()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min((-390.863487546476), precision_DoubleEquivalence0);
      Vector1D vector1D0 = interval0.getCentroid();
}"
2018,"    public double getMin() {
        return (minBoundary != null) ? minBoundary.getLocation() : Double.NEGATIVE_INFINITY;
    }","  public void test140()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min((-390.863487546476), precision_DoubleEquivalence0);
      Vector1D vector1D0 = interval0.getCentroid();
}"
2019,"    public boolean isInfinite() {
        return minBoundary == null || maxBoundary == null;
    }","  public void test141()  throws Throwable  {
      Interval interval0 = Interval.of((OrientedPoint) null, (OrientedPoint) null);
      boolean boolean0 = interval0.isInfinite();
}"
2020,"    public double getMax() {
        return (maxBoundary != null) ? maxBoundary.getLocation() : Double.POSITIVE_INFINITY;
    }","  public void test142()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.hasMaxBoundary();
}"
2021,"    public double getMin() {
        return (minBoundary != null) ? minBoundary.getLocation() : Double.NEGATIVE_INFINITY;
    }","  public void test143()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.hasMaxBoundary();
}"
2022,"    public boolean hasMaxBoundary() {
        return maxBoundary != null;
    }","  public void test144()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.hasMaxBoundary();
}"
2023,"    public boolean hasMaxBoundary() {
        return maxBoundary != null;
    }","  public void test145()  throws Throwable  {
      Interval interval0 = Interval.full();
      boolean boolean0 = interval0.hasMaxBoundary();
}"
2024,"    public boolean hasMinBoundary() {
        return minBoundary != null;
    }","  public void test146()  throws Throwable  {
      Interval interval0 = Interval.min((-2555.8158955202953), (Precision.DoubleEquivalence) null);
      boolean boolean0 = interval0.hasMinBoundary();
}"
2025,"    public double getMin() {
        return (minBoundary != null) ? minBoundary.getLocation() : Double.NEGATIVE_INFINITY;
    }","  public void test147()  throws Throwable  {
      Interval interval0 = Interval.min((-2555.8158955202953), (Precision.DoubleEquivalence) null);
      boolean boolean0 = interval0.hasMinBoundary();
}"
2026,"    public boolean isInfinite() {
        return minBoundary == null || maxBoundary == null;
    }","  public void test148()  throws Throwable  {
      Interval interval0 = Interval.min((-2555.8158955202953), (Precision.DoubleEquivalence) null);
      boolean boolean0 = interval0.hasMinBoundary();
}"
2027,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(this.getClass().getSimpleName())
            .append(""[min= "")
            .append(getMin())
            .append("", max= "")
            .append(getMax())
            .append(']');

        return sb.toString();
    }","  public void test149()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max((-189.53204134020137), precision_DoubleEquivalence0);
      String string0 = interval0.toString();
}"
2028,"    public boolean hasMinBoundary() {
        return minBoundary != null;
    }","  public void test150()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max((-189.53204134020137), precision_DoubleEquivalence0);
      String string0 = interval0.toString();
}"
2029,"    public double getSize() {
        if (isInfinite()) {
            return Double.POSITIVE_INFINITY;
        }

        return getMax() - getMin();
    }","  public void test151()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 1.0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isEmpty();
}"
2030,"    public boolean isEmpty() {
        return false;
    }","  public void test152()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 1.0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isEmpty();
}"
2031,"    public double getMin() {
        return (minBoundary != null) ? minBoundary.getLocation() : Double.NEGATIVE_INFINITY;
    }","  public void test153()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 1.0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isEmpty();
}"
2032,"    public double getSize() {
        if (isInfinite()) {
            return Double.POSITIVE_INFINITY;
        }

        return getMax() - getMin();
    }","  public void test154()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(3764.46, 3764.46, precision_DoubleEquivalence0);
      double double0 = interval0.getBoundarySize();
}"
2033,"    public double getBoundarySize() {
        return 0;
    }","  public void test155()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(3764.46, 3764.46, precision_DoubleEquivalence0);
      double double0 = interval0.getBoundarySize();
}"
2034,"    public boolean hasMinBoundary() {
        return minBoundary != null;
    }","  public void test156()  throws Throwable  {
      Interval interval0 = Interval.full();
      boolean boolean0 = interval0.hasMinBoundary();
}"
2035,"    public double getSize() {
        if (isInfinite()) {
            return Double.POSITIVE_INFINITY;
        }

        return getMax() - getMin();
    }","  public void test157()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(3764.46, 3764.46, precision_DoubleEquivalence0);
      interval0.toTree();
}"
2036,"    public static OrientedPoint fromPointAndDirection(final Vector1D point, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, positiveFacing, precision);
    }","  public void test0()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(1426.67);
      Vector1D vector1D0 = Vector1D.of(1426.67);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      OrientedPoint orientedPoint0 = OrientedPoints.fromPointAndDirection((Vector1D) vector1D_Unit0, vector1D0, precision_DoubleEquivalence0);
}"
2037,"    public static OrientedPoint fromPointAndDirection(final Vector1D point, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, positiveFacing, precision);
    }","  public void test1()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(1426.67);
      Vector1D vector1D0 = Vector1D.of(1426.67);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      OrientedPoint orientedPoint0 = OrientedPoints.fromPointAndDirection((Vector1D) vector1D_Unit0, vector1D0, precision_DoubleEquivalence0);
}"
2038,"    public static OrientedPoint fromPointAndDirection(final Vector1D point, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, positiveFacing, precision);
    }","  public void test2()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = OrientedPoints.fromPointAndDirection(vector1D0, true, precision_DoubleEquivalence0);
}"
2039,"    public static OrientedPoint fromPointAndDirection(final Vector1D point, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, positiveFacing, precision);
    }","  public void test3()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = OrientedPoints.fromPointAndDirection(vector1D0, false, precision_DoubleEquivalence0);
}"
2040,"    public static OrientedPoint fromPointAndDirection(final Vector1D point, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, positiveFacing, precision);
    }","  public void test4()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      OrientedPoint orientedPoint0 = OrientedPoints.fromPointAndDirection((Vector1D) vector1D_Unit0, true, (Precision.DoubleEquivalence) null);
}"
2041,"    public static OrientedPoint fromPointAndDirection(final Vector1D point, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, positiveFacing, precision);
    }","  public void test5()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      OrientedPoint orientedPoint0 = OrientedPoints.fromPointAndDirection(vector1D0, vector1D0, precision_DoubleEquivalence0);
}"
2042,"    public static OrientedPoint fromLocationAndDirection(final double location, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return fromPointAndDirection(Vector1D.of(location), positiveFacing, precision);
    }","  public void test6()  throws Throwable  {
      OrientedPoint orientedPoint0 = OrientedPoints.fromLocationAndDirection(0.0, false, (Precision.DoubleEquivalence) null);
}"
2043,"    public static OrientedPoint fromLocationAndDirection(final double location, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return fromPointAndDirection(Vector1D.of(location), positiveFacing, precision);
    }","  public void test7()  throws Throwable  {
      OrientedPoint orientedPoint0 = OrientedPoints.fromLocationAndDirection(0.0, false, (Precision.DoubleEquivalence) null);
}"
2044,"    public static OrientedPoint fromLocationAndDirection(final double location, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return fromPointAndDirection(Vector1D.of(location), positiveFacing, precision);
    }","  public void test8()  throws Throwable  {
      OrientedPoint orientedPoint0 = OrientedPoints.fromLocationAndDirection(1389.037, true, (Precision.DoubleEquivalence) null);
}"
2045,"    public static OrientedPoint fromLocationAndDirection(final double location, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return fromPointAndDirection(Vector1D.of(location), positiveFacing, precision);
    }","  public void test9()  throws Throwable  {
      OrientedPoint orientedPoint0 = OrientedPoints.fromLocationAndDirection(1389.037, true, (Precision.DoubleEquivalence) null);
}"
2046,"    public static OrientedPoint createPositiveFacing(final Vector1D point,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, true, precision);
    }","  public void test10()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = OrientedPoints.createPositiveFacing(vector1D0, precision_DoubleEquivalence0);
}"
2047,"    public static OrientedPoint createPositiveFacing(final Vector1D point,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, true, precision);
    }","  public void test11()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      OrientedPoint orientedPoint0 = OrientedPoints.createPositiveFacing((Vector1D) vector1D_Unit0, (Precision.DoubleEquivalence) null);
}"
2048,"    public static OrientedPoint createPositiveFacing(final Vector1D point,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, true, precision);
    }","  public void test12()  throws Throwable  {
      OrientedPoint orientedPoint0 = OrientedPoints.createPositiveFacing(0.0, (Precision.DoubleEquivalence) null);
}"
2049,"    public static OrientedPoint createPositiveFacing(final Vector1D point,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, true, precision);
    }","  public void test13()  throws Throwable  {
      OrientedPoint orientedPoint0 = OrientedPoints.createPositiveFacing(0.0, (Precision.DoubleEquivalence) null);
}"
2050,"    public static OrientedPoint createPositiveFacing(final Vector1D point,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, true, precision);
    }","  public void test14()  throws Throwable  {
      OrientedPoint orientedPoint0 = OrientedPoints.createPositiveFacing(41.90458228363, (Precision.DoubleEquivalence) null);
}"
2051,"    public static OrientedPoint createPositiveFacing(final Vector1D point,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, true, precision);
    }","  public void test15()  throws Throwable  {
      OrientedPoint orientedPoint0 = OrientedPoints.createPositiveFacing(41.90458228363, (Precision.DoubleEquivalence) null);
}"
2052,"    public static OrientedPoint createNegativeFacing(final Vector1D point,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, false, precision);
    }","  public void test16()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = OrientedPoints.createNegativeFacing(vector1D0, precision_DoubleEquivalence0);
}"
2053,"    public static OrientedPoint createNegativeFacing(final Vector1D point,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, false, precision);
    }","  public void test17()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      OrientedPoint orientedPoint0 = OrientedPoints.createNegativeFacing((Vector1D) vector1D_Unit0, (Precision.DoubleEquivalence) null);
}"
2054,"    public static OrientedPoint createNegativeFacing(final Vector1D point,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, false, precision);
    }","  public void test18()  throws Throwable  {
      OrientedPoint orientedPoint0 = OrientedPoints.createNegativeFacing(0.0, (Precision.DoubleEquivalence) null);
}"
2055,"    public static OrientedPoint createNegativeFacing(final Vector1D point,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, false, precision);
    }","  public void test19()  throws Throwable  {
      OrientedPoint orientedPoint0 = OrientedPoints.createNegativeFacing(0.0, (Precision.DoubleEquivalence) null);
}"
2056,"    public static OrientedPoint createNegativeFacing(final Vector1D point,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, false, precision);
    }","  public void test20()  throws Throwable  {
      OrientedPoint orientedPoint0 = OrientedPoints.createNegativeFacing(1002.0, (Precision.DoubleEquivalence) null);
}"
2057,"    public static OrientedPoint createNegativeFacing(final Vector1D point,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, false, precision);
    }","  public void test21()  throws Throwable  {
      OrientedPoint orientedPoint0 = OrientedPoints.createNegativeFacing(1002.0, (Precision.DoubleEquivalence) null);
}"
2058,"    public static OrientedPoint fromPointAndDirection(final Vector1D point, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, positiveFacing, precision);
    }","  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        OrientedPoints.fromPointAndDirection((Vector1D) null, (Vector1D) null, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.OrientedPoints"", e);
      }
  }"
2059,"    public static OrientedPoint fromPointAndDirection(final Vector1D point, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, positiveFacing, precision);
    }","  public void test23()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      // Undeclared exception!
      try { 
        OrientedPoints.fromPointAndDirection(vector1D0, vector1D0, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Oriented point direction cannot be zero
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.OrientedPoints"", e);
      }
  }"
2060,"    public static OrientedPoint fromPointAndDirection(final Vector1D point, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, positiveFacing, precision);
    }","  public void test24()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-939.73767));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      OrientedPoint orientedPoint0 = OrientedPoints.fromPointAndDirection((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
}"
2061,"    public static OrientedPoint createPositiveFacing(final Vector1D point,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, true, precision);
    }","  public void test25()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = OrientedPoints.createPositiveFacing(vector1D0, precision_DoubleEquivalence0);
}"
2062,"    public static OrientedPoint createNegativeFacing(final Vector1D point,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, false, precision);
    }","  public void test26()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = OrientedPoints.createNegativeFacing((-939.73767), precision_DoubleEquivalence0);
}"
2063,"    public static OrientedPoint createNegativeFacing(final Vector1D point,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, false, precision);
    }","  public void test27()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = OrientedPoints.createNegativeFacing((-939.73767), precision_DoubleEquivalence0);
}"
2064,"    public static OrientedPoint createNegativeFacing(final Vector1D point,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, false, precision);
    }","  public void test28()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = OrientedPoints.createNegativeFacing(vector1D0, precision_DoubleEquivalence0);
}"
2065,"    public static OrientedPoint fromLocationAndDirection(final double location, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return fromPointAndDirection(Vector1D.of(location), positiveFacing, precision);
    }","  public void test29()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = OrientedPoints.fromLocationAndDirection((-1.651), true, precision_DoubleEquivalence0);
}"
2066,"    public static OrientedPoint fromLocationAndDirection(final double location, final boolean positiveFacing,
            final Precision.DoubleEquivalence precision) {
        return fromPointAndDirection(Vector1D.of(location), positiveFacing, precision);
    }","  public void test30()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = OrientedPoints.fromLocationAndDirection((-1.651), true, precision_DoubleEquivalence0);
}"
2067,"    public static OrientedPoint createPositiveFacing(final Vector1D point,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, true, precision);
    }","  public void test31()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = OrientedPoints.createPositiveFacing((-1.651), precision_DoubleEquivalence0);
}"
2068,"    public static OrientedPoint createPositiveFacing(final Vector1D point,
            final Precision.DoubleEquivalence precision) {
        return new OrientedPoint(point, true, precision);
    }","  public void test32()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = OrientedPoints.createPositiveFacing((-1.651), precision_DoubleEquivalence0);
}"
2069,"    public static RegionBSPTree1D full() {
        return new RegionBSPTree1D(true);
    }","  public void test0()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.full();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(59.80488, 1027.40681667, precision_DoubleEquivalence0);
      RegionBSPTree1D regionBSPTree1D1 = interval0.toTree();
      regionBSPTree1D0.intersection((AbstractRegionBSPTree<Vector1D, RegionBSPTree1D.RegionNode1D>) regionBSPTree1D1);
      boolean boolean0 = regionBSPTree1D0.isInfinite();
}"
2070,"    public Vector1D project(final Vector1D pt) {
        // use our custom projector so that we can disambiguate points that are
        // actually equidistant from the target point
        final BoundaryProjector1D projector = new BoundaryProjector1D(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test1()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(6.696928794914171E299, 0.0, precision_DoubleEquivalence0);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      Vector1D vector1D0 = interval0.getCentroid();
      Vector1D vector1D1 = regionBSPTree1D0.project(vector1D0);
}"
2071,"    public Vector1D project(final Vector1D pt) {
        // use our custom projector so that we can disambiguate points that are
        // actually equidistant from the target point
        final BoundaryProjector1D projector = new BoundaryProjector1D(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test2()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, 1.0, 1.0, 1.0, (-1778.92)).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(0.4989577157558549, 1.0, precision_DoubleEquivalence0);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      vector1D0.normalizeOrNull();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-1151.3847924245242), 0.0, 0.0, 0.0, 0.0).when(precision_DoubleEquivalence1).signum(anyDouble());
      Interval interval1 = Interval.of(1.0, (-1151.3847924245242), precision_DoubleEquivalence1);
      Interval[] intervalArray0 = new Interval[2];
      intervalArray0[0] = interval1;
      intervalArray0[1] = interval1;
      RegionBSPTree1D.from(interval0, intervalArray0);
      OrientedPoint orientedPoint0 = interval1.getMaxBoundary();
      HyperplaneConvexSubset<Vector1D> hyperplaneConvexSubset0 = orientedPoint0.span();
      RegionCutRule regionCutRule0 = RegionCutRule.INHERIT;
      regionBSPTree1D0.insert((HyperplaneSubset<Vector1D>) hyperplaneConvexSubset0, regionCutRule0);
      // Undeclared exception!
      try { 
        regionBSPTree1D0.project(vector1D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.partitioning.bsp.AbstractRegionBSPTree$BoundaryProjector"", e);
      }
  }"
2072,"    public List<Interval> toIntervals() {

        final List<BoundaryPair> boundaryPairs = new ArrayList<>();

        visitInsideIntervals((min, max) -> boundaryPairs.add(new BoundaryPair(min, max)));
        boundaryPairs.sort(BOUNDARY_PAIR_COMPARATOR);

        final List<Interval> intervals = new ArrayList<>();

        BoundaryPair start = null;
        BoundaryPair end = null;

        for (final BoundaryPair current : boundaryPairs) {
            if (start == null) {
                start = current;
                end = current;
            } else if (Objects.equals(end.getMax(), current.getMin())) {
                // these intervals should be merged
                end = current;
            } else {
                // these intervals should not be merged
                intervals.add(createInterval(start, end));

                // queue up the next pair
                start = current;
                end = current;
            }
        }

        if (start != null) {
            intervals.add(createInterval(start, end));
        }

        return intervals;
    }","  public void test3()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn((-1.5707963267948966), (-1.5707963267948966), (-1.5707963267948966), (-695.42327082)).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of((-1.5707963267948966), (-1.5707963267948966), precision_DoubleEquivalence0);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      regionBSPTree1D0.complement();
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-695.42327082));
      regionBSPTree1D0.transform(affineTransformMatrix1D0);
      HyperplaneConvexSubset<Vector1D> hyperplaneConvexSubset0 = orientedPoint0.span();
      regionBSPTree1D0.insert((HyperplaneSubset<Vector1D>) hyperplaneConvexSubset0);
      List<Interval> list0 = regionBSPTree1D0.toIntervals();
}"
2073,,"  public void test4()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((-1.5707963267948966), (-1.5707963267948966), precision_DoubleEquivalence0);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      RegionBSPTree1D.RegionNode1D regionBSPTree1D_RegionNode1D0 = regionBSPTree1D0.getRoot();
      RegionBSPTree1D.RegionNode1D regionBSPTree1D_RegionNode1D1 = regionBSPTree1D_RegionNode1D0.getSelf();
}"
2074,"    public Vector1D project(final Vector1D pt) {
        // use our custom projector so that we can disambiguate points that are
        // actually equidistant from the target point
        final BoundaryProjector1D projector = new BoundaryProjector1D(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test5()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.empty();
      Vector1D vector1D0 = regionBSPTree1D0.project((Vector1D) null);
}"
2075,"    public Vector1D project(final Vector1D pt) {
        // use our custom projector so that we can disambiguate points that are
        // actually equidistant from the target point
        final BoundaryProjector1D projector = new BoundaryProjector1D(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test6()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.empty();
      Vector1D vector1D0 = Vector1D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true, precision_DoubleEquivalence0);
      HyperplaneConvexSubset<Vector1D> hyperplaneConvexSubset0 = orientedPoint0.span();
      RegionCutRule regionCutRule0 = RegionCutRule.PLUS_INSIDE;
      regionBSPTree1D0.insert(hyperplaneConvexSubset0, regionCutRule0);
      Vector1D vector1D1 = regionBSPTree1D0.project(vector1D0);
}"
2076,"    public Vector1D project(final Vector1D pt) {
        // use our custom projector so that we can disambiguate points that are
        // actually equidistant from the target point
        final BoundaryProjector1D projector = new BoundaryProjector1D(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test7()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-1.6763323658950924)).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of((-1.6763323658950924), (-1.6763323658950924), precision_DoubleEquivalence0);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector1D vector1D1 = regionBSPTree1D0.project(vector1D0);
}"
2077,"    public double getMin() {
        double min = Double.POSITIVE_INFINITY;

        RegionNode1D node = getRoot();
        OrientedPoint pt;

        while (!node.isLeaf()) {
            pt = (OrientedPoint) node.getCutHyperplane();

            min = pt.getLocation();
            node = pt.isPositiveFacing() ? node.getMinus() : node.getPlus();
        }

        return node.isInside() ? Double.NEGATIVE_INFINITY : min;
    }","  public void test8()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of(0.5);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      Interval[] intervalArray0 = new Interval[1];
      intervalArray0[0] = interval0;
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.from(interval0, intervalArray0);
      double double0 = regionBSPTree1D0.getMin();
}"
2078,"    public boolean contains(final double x) {
        return contains(Vector1D.of(x));
    }","  public void test9()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.empty();
      boolean boolean0 = regionBSPTree1D0.contains(1234.0);
}"
2079,"    public RegionLocation classify(final double x) {
        return classify(Vector1D.of(x));
    }","  public void test10()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.full();
      RegionBSPTree1D.RegionNode1D regionBSPTree1D_RegionNode1D0 = regionBSPTree1D0.createNode();
      regionBSPTree1D0.extract(regionBSPTree1D_RegionNode1D0);
      regionBSPTree1D0.classify(0.0);
  }"
2080,"    public List<Interval> toIntervals() {

        final List<BoundaryPair> boundaryPairs = new ArrayList<>();

        visitInsideIntervals((min, max) -> boundaryPairs.add(new BoundaryPair(min, max)));
        boundaryPairs.sort(BOUNDARY_PAIR_COMPARATOR);

        final List<Interval> intervals = new ArrayList<>();

        BoundaryPair start = null;
        BoundaryPair end = null;

        for (final BoundaryPair current : boundaryPairs) {
            if (start == null) {
                start = current;
                end = current;
            } else if (Objects.equals(end.getMax(), current.getMin())) {
                // these intervals should be merged
                end = current;
            } else {
                // these intervals should not be merged
                intervals.add(createInterval(start, end));

                // queue up the next pair
                start = current;
                end = current;
            }
        }

        if (start != null) {
            intervals.add(createInterval(start, end));
        }

        return intervals;
    }","  public void test11()  throws Throwable  {
      Interval interval0 = Interval.of(3048.12691704277, 2115.8142795312, (Precision.DoubleEquivalence) null);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      // Undeclared exception!
      try { 
        regionBSPTree1D0.toIntervals();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.OrientedPoint"", e);
      }
  }"
2081,"    public List<Interval> toIntervals() {

        final List<BoundaryPair> boundaryPairs = new ArrayList<>();

        visitInsideIntervals((min, max) -> boundaryPairs.add(new BoundaryPair(min, max)));
        boundaryPairs.sort(BOUNDARY_PAIR_COMPARATOR);

        final List<Interval> intervals = new ArrayList<>();

        BoundaryPair start = null;
        BoundaryPair end = null;

        for (final BoundaryPair current : boundaryPairs) {
            if (start == null) {
                start = current;
                end = current;
            } else if (Objects.equals(end.getMax(), current.getMin())) {
                // these intervals should be merged
                end = current;
            } else {
                // these intervals should not be merged
                intervals.add(createInterval(start, end));

                // queue up the next pair
                start = current;
                end = current;
            }
        }

        if (start != null) {
            intervals.add(createInterval(start, end));
        }

        return intervals;
    }","  public void test12()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of((-1.5707963267948966), (-1.5707963267948966), precision_DoubleEquivalence0);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      regionBSPTree1D0.toIntervals();
  }"
2082,"    public Split<RegionBSPTree1D> split(final Hyperplane<Vector1D> splitter) {
        return split(splitter, RegionBSPTree1D.empty(), RegionBSPTree1D.empty());
    }","  public void test13()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.max(2921.87988, precision_DoubleEquivalence0);
      Interval[] intervalArray0 = new Interval[3];
      intervalArray0[0] = interval0;
      intervalArray0[1] = interval0;
      intervalArray0[2] = interval0;
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.from(interval0, intervalArray0);
      // Undeclared exception!
      try { 
        regionBSPTree1D0.split((Hyperplane<Vector1D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.partitioning.bsp.AbstractBSPTree"", e);
      }
  }"
2083,"    public Vector1D project(final Vector1D pt) {
        // use our custom projector so that we can disambiguate points that are
        // actually equidistant from the target point
        final BoundaryProjector1D projector = new BoundaryProjector1D(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test14()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.empty();
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(155.0710404).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.point(2.409919865102884E-181, precision_DoubleEquivalence0);
      regionBSPTree1D0.add(interval0);
      // Undeclared exception!
      try { 
        regionBSPTree1D0.project(vector1D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.partitioning.bsp.AbstractRegionBSPTree$BoundaryProjector"", e);
      }
  }"
2084,"    public double getMin() {
        double min = Double.POSITIVE_INFINITY;

        RegionNode1D node = getRoot();
        OrientedPoint pt;

        while (!node.isLeaf()) {
            pt = (OrientedPoint) node.getCutHyperplane();

            min = pt.getLocation();
            node = pt.isPositiveFacing() ? node.getMinus() : node.getPlus();
        }

        return node.isInside() ? Double.NEGATIVE_INFINITY : min;
    }","  public void test15()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D();
      RegionBSPTree1D.RegionNode1D regionBSPTree1D_RegionNode1D0 = regionBSPTree1D0.createNode();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, false, precision_DoubleEquivalence0);
      regionBSPTree1D_RegionNode1D0.cut((Hyperplane<Vector1D>) orientedPoint0);
      HyperplaneConvexSubset<Vector1D> hyperplaneConvexSubset0 = regionBSPTree1D_RegionNode1D0.getCut();
      RegionCutRule regionCutRule0 = RegionCutRule.MINUS_INSIDE;
      regionBSPTree1D0.insert(hyperplaneConvexSubset0, regionCutRule0);
      // Undeclared exception!
      try { 
        regionBSPTree1D0.getMin();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.OrientedPoint"", e);
      }
  }"
2085,"    public double getMax() {
        double max = Double.NEGATIVE_INFINITY;

        RegionNode1D node = getRoot();
        OrientedPoint pt;

        while (!node.isLeaf()) {
            pt = (OrientedPoint) node.getCutHyperplane();

            max = pt.getLocation();
            node = pt.isPositiveFacing() ? node.getPlus() : node.getMinus();
        }

        return node.isInside() ? Double.POSITIVE_INFINITY : max;
    }","  public void test16()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.full();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, true, precision_DoubleEquivalence0);
      HyperplaneConvexSubset<Vector1D> hyperplaneConvexSubset0 = orientedPoint0.span();
      regionBSPTree1D0.insert(hyperplaneConvexSubset0);
      // Undeclared exception!
      try { 
        regionBSPTree1D0.getMax();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.OrientedPoint"", e);
      }
  }"
2086,"    public static RegionBSPTree1D from(final Interval interval, final Interval... more) {
        final RegionBSPTree1D tree = intervalToTree(interval);

        for (final Interval additional : more) {
            tree.add(additional);
        }

        return tree;
    }","  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RegionBSPTree1D.from((Iterable<Interval>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.RegionBSPTree1D"", e);
      }
  }"
2087,"    public void add(final Interval interval) {
        union(intervalToTree(interval));
    }","  public void test18()  throws Throwable  {
      Class<Interval> class0 = Interval.class;
      ServiceLoader<Interval> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.from((Iterable<Interval>) serviceLoader0);
      // Undeclared exception!
      try { 
        regionBSPTree1D0.add((Interval) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.RegionBSPTree1D"", e);
      }
  }"
2088,"    public double getBoundarySize() {
        return 0;
    }","  public void test19()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
}"
2089,"    public static RegionBSPTree1D empty() {
        return new RegionBSPTree1D(false);
    }","  public void test20()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.empty();
      double double0 = regionBSPTree1D0.getSize();
}"
2090,"    public static RegionBSPTree1D full() {
        return new RegionBSPTree1D(true);
    }","  public void test21()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.full();
      boolean boolean0 = regionBSPTree1D0.isInfinite();
}"
2091,"    public Vector1D project(final Vector1D pt) {
        // use our custom projector so that we can disambiguate points that are
        // actually equidistant from the target point
        final BoundaryProjector1D projector = new BoundaryProjector1D(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test22()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(0.0, 16.14886398, precision_DoubleEquivalence0);
      Interval[] intervalArray0 = new Interval[1];
      intervalArray0[0] = interval0;
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.from(interval0, intervalArray0);
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = regionBSPTree1D0.project(vector1D0);
}"
2092,"    public Vector1D project(final Vector1D pt) {
        // use our custom projector so that we can disambiguate points that are
        // actually equidistant from the target point
        final BoundaryProjector1D projector = new BoundaryProjector1D(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test23()  throws Throwable  {
      Stack<Interval> stack0 = new Stack<Interval>();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.point(0, precision_DoubleEquivalence0);
      stack0.add(interval0);
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.from((Iterable<Interval>) stack0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D0 = regionBSPTree1D0.project((Vector1D) vector1D_Unit0);
}"
2093,"    public static RegionBSPTree1D from(final Interval interval, final Interval... more) {
        final RegionBSPTree1D tree = intervalToTree(interval);

        for (final Interval additional : more) {
            tree.add(additional);
        }

        return tree;
    }","  public void test24()  throws Throwable  {
      Interval interval0 = Interval.of((OrientedPoint) null, (OrientedPoint) null);
      // Undeclared exception!
      try { 
        RegionBSPTree1D.from(interval0, (Interval[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.RegionBSPTree1D"", e);
      }
  }"
2094,"    public List<Interval> toIntervals() {

        final List<BoundaryPair> boundaryPairs = new ArrayList<>();

        visitInsideIntervals((min, max) -> boundaryPairs.add(new BoundaryPair(min, max)));
        boundaryPairs.sort(BOUNDARY_PAIR_COMPARATOR);

        final List<Interval> intervals = new ArrayList<>();

        BoundaryPair start = null;
        BoundaryPair end = null;

        for (final BoundaryPair current : boundaryPairs) {
            if (start == null) {
                start = current;
                end = current;
            } else if (Objects.equals(end.getMax(), current.getMin())) {
                // these intervals should be merged
                end = current;
            } else {
                // these intervals should not be merged
                intervals.add(createInterval(start, end));

                // queue up the next pair
                start = current;
                end = current;
            }
        }

        if (start != null) {
            intervals.add(createInterval(start, end));
        }

        return intervals;
    }","  public void test25()  throws Throwable  {
      ArrayDeque<Interval> arrayDeque0 = new ArrayDeque<Interval>();
      LinkedList<Interval> linkedList0 = new LinkedList<Interval>(arrayDeque0);
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.from((Iterable<Interval>) linkedList0);
      List<Interval> list0 = regionBSPTree1D0.toIntervals();
}"
2095,"    public List<Interval> toIntervals() {

        final List<BoundaryPair> boundaryPairs = new ArrayList<>();

        visitInsideIntervals((min, max) -> boundaryPairs.add(new BoundaryPair(min, max)));
        boundaryPairs.sort(BOUNDARY_PAIR_COMPARATOR);

        final List<Interval> intervals = new ArrayList<>();

        BoundaryPair start = null;
        BoundaryPair end = null;

        for (final BoundaryPair current : boundaryPairs) {
            if (start == null) {
                start = current;
                end = current;
            } else if (Objects.equals(end.getMax(), current.getMin())) {
                // these intervals should be merged
                end = current;
            } else {
                // these intervals should not be merged
                intervals.add(createInterval(start, end));

                // queue up the next pair
                start = current;
                end = current;
            }
        }

        if (start != null) {
            intervals.add(createInterval(start, end));
        }

        return intervals;
    }","  public void test26()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((-1.5707963267948966), (-1.5707963267948966), precision_DoubleEquivalence0);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      regionBSPTree1D0.complement();
      List<Interval> list0 = regionBSPTree1D0.toIntervals();
}"
2096,"    public List<Interval> toIntervals() {

        final List<BoundaryPair> boundaryPairs = new ArrayList<>();

        visitInsideIntervals((min, max) -> boundaryPairs.add(new BoundaryPair(min, max)));
        boundaryPairs.sort(BOUNDARY_PAIR_COMPARATOR);

        final List<Interval> intervals = new ArrayList<>();

        BoundaryPair start = null;
        BoundaryPair end = null;

        for (final BoundaryPair current : boundaryPairs) {
            if (start == null) {
                start = current;
                end = current;
            } else if (Objects.equals(end.getMax(), current.getMin())) {
                // these intervals should be merged
                end = current;
            } else {
                // these intervals should not be merged
                intervals.add(createInterval(start, end));

                // queue up the next pair
                start = current;
                end = current;
            }
        }

        if (start != null) {
            intervals.add(createInterval(start, end));
        }

        return intervals;
    }","  public void test27()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(2921.87988, 298.23043135500353, 687.01317607492, 298.23043135500353, 298.23043135500353).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.max(2921.87988, precision_DoubleEquivalence0);
      Interval[] intervalArray0 = new Interval[3];
      intervalArray0[0] = interval0;
      intervalArray0[1] = interval0;
      intervalArray0[2] = interval0;
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.from(interval0, intervalArray0);
      List<Interval> list0 = regionBSPTree1D0.toIntervals();
}"
2097,"    public double getMax() {
        double max = Double.NEGATIVE_INFINITY;

        RegionNode1D node = getRoot();
        OrientedPoint pt;

        while (!node.isLeaf()) {
            pt = (OrientedPoint) node.getCutHyperplane();

            max = pt.getLocation();
            node = pt.isPositiveFacing() ? node.getPlus() : node.getMinus();
        }

        return node.isInside() ? Double.POSITIVE_INFINITY : max;
    }","  public void test28()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.full();
      double double0 = regionBSPTree1D0.getMax();
}"
2098,"    public double getMax() {
        double max = Double.NEGATIVE_INFINITY;

        RegionNode1D node = getRoot();
        OrientedPoint pt;

        while (!node.isLeaf()) {
            pt = (OrientedPoint) node.getCutHyperplane();

            max = pt.getLocation();
            node = pt.isPositiveFacing() ? node.getPlus() : node.getMinus();
        }

        return node.isInside() ? Double.POSITIVE_INFINITY : max;
    }","  public void test29()  throws Throwable  {
      Stack<Interval> stack0 = new Stack<Interval>();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(0, precision_DoubleEquivalence0);
      stack0.add(interval0);
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.from((Iterable<Interval>) stack0);
      double double0 = regionBSPTree1D0.getMax();
}"
2099,"    public double getMax() {
        double max = Double.NEGATIVE_INFINITY;

        RegionNode1D node = getRoot();
        OrientedPoint pt;

        while (!node.isLeaf()) {
            pt = (OrientedPoint) node.getCutHyperplane();

            max = pt.getLocation();
            node = pt.isPositiveFacing() ? node.getPlus() : node.getMinus();
        }

        return node.isInside() ? Double.POSITIVE_INFINITY : max;
    }","  public void test30()  throws Throwable  {
      Stack<Interval> stack0 = new Stack<Interval>();
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.from((Iterable<Interval>) stack0);
      double double0 = regionBSPTree1D0.getMax();
}"
2100,"    public double getMin() {
        double min = Double.POSITIVE_INFINITY;

        RegionNode1D node = getRoot();
        OrientedPoint pt;

        while (!node.isLeaf()) {
            pt = (OrientedPoint) node.getCutHyperplane();

            min = pt.getLocation();
            node = pt.isPositiveFacing() ? node.getMinus() : node.getPlus();
        }

        return node.isInside() ? Double.NEGATIVE_INFINITY : min;
    }","  public void test31()  throws Throwable  {
      Stack<Interval> stack0 = new Stack<Interval>();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(0, precision_DoubleEquivalence0);
      stack0.add(interval0);
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.from((Iterable<Interval>) stack0);
      double double0 = regionBSPTree1D0.getMin();
}"
2101,"    public double getMin() {
        double min = Double.POSITIVE_INFINITY;

        RegionNode1D node = getRoot();
        OrientedPoint pt;

        while (!node.isLeaf()) {
            pt = (OrientedPoint) node.getCutHyperplane();

            min = pt.getLocation();
            node = pt.isPositiveFacing() ? node.getMinus() : node.getPlus();
        }

        return node.isInside() ? Double.NEGATIVE_INFINITY : min;
    }","  public void test32()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.max(2921.87988, precision_DoubleEquivalence0);
      Interval[] intervalArray0 = new Interval[3];
      intervalArray0[0] = interval0;
      intervalArray0[1] = interval0;
      intervalArray0[2] = interval0;
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.from(interval0, intervalArray0);
      double double0 = regionBSPTree1D0.getMin();
}"
2102,"    public boolean contains(final double x) {
        return contains(Vector1D.of(x));
    }","  public void test33()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D();
      Interval interval0 = Interval.max(1258.50920871, (Precision.DoubleEquivalence) null);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      HyperplaneConvexSubset<Vector1D> hyperplaneConvexSubset0 = orientedPoint0.span();
      RegionCutRule regionCutRule0 = RegionCutRule.INHERIT;
      regionBSPTree1D0.insert(hyperplaneConvexSubset0, regionCutRule0);
      // Undeclared exception!
      try { 
        regionBSPTree1D0.contains((-2038.2714));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.OrientedPoint"", e);
      }
  }"
2103,"    public Vector1D project(final Vector1D pt) {
        // use our custom projector so that we can disambiguate points that are
        // actually equidistant from the target point
        final BoundaryProjector1D projector = new BoundaryProjector1D(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test34()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(1.0, 1.0, precision_DoubleEquivalence0);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector1D vector1D1 = regionBSPTree1D0.project(vector1D0);
}"
2104,"    protected boolean swapsInsideOutside(final Transform<Vector1D> transform) {
        return false;
    }","  public void test35()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.empty();
      Vector1D vector1D0 = Vector1D.ZERO;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(vector1D0);
      boolean boolean0 = regionBSPTree1D0.swapsInsideOutside(affineTransformMatrix1D0);
}"
2105,"    public Split<RegionBSPTree1D> split(final Hyperplane<Vector1D> splitter) {
        return split(splitter, RegionBSPTree1D.empty(), RegionBSPTree1D.empty());
    }","  public void test36()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(1.0, 1.0, precision_DoubleEquivalence0);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Split<RegionBSPTree1D> split0 = regionBSPTree1D0.split(orientedPoint0);
}"
2106,"    public boolean contains(final double x) {
        return contains(Vector1D.of(x));
    }","  public void test37()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(0.0, 16.14886398, precision_DoubleEquivalence0);
      Interval[] intervalArray0 = new Interval[1];
      intervalArray0[0] = interval0;
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.from(interval0, intervalArray0);
      boolean boolean0 = regionBSPTree1D0.contains(0.0);
}"
2107,"    public RegionLocation classify(final double x) {
        return classify(Vector1D.of(x));
    }","  public void test38()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(1.0, 1.0, precision_DoubleEquivalence0);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      RegionLocation regionLocation0 = regionBSPTree1D0.classify((-1151.3847924245242));
}"
2108,"    public double getBoundarySize() {
        return 0;
    }","  public void test39()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(6.696928794914171E299, 0.0, precision_DoubleEquivalence0);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      double double0 = regionBSPTree1D0.getBoundarySize();
}"
2109,,"  public void test40()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((-1.5707963267948966), (-1.5707963267948966), precision_DoubleEquivalence0);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      boolean boolean0 = regionBSPTree1D0.isInfinite();
}"
2110,"    public RegionBSPTree1D copy() {
        final RegionBSPTree1D result = RegionBSPTree1D.empty();
        result.copy(this);

        return result;
    }","  public void test41()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(1.0, 1.0, precision_DoubleEquivalence0);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      RegionBSPTree1D regionBSPTree1D1 = regionBSPTree1D0.copy();
}"
2111,,"  public void test42()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((-1.5707963267948966), (-1.5707963267948966), precision_DoubleEquivalence0);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      RegionBSPTree1D.RegionNode1D regionBSPTree1D_RegionNode1D0 = regionBSPTree1D0.getRoot();
      regionBSPTree1D_RegionNode1D0.getNodeRegion();
}"
2112,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test0()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true, precision_DoubleEquivalence0);
      orientedPoint0.hashCode();
}"
2113,"    public HyperplaneLocation classify(final Vector1D pt) {
        return classify(pt.getX());
    }","  public void test1()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-2166.75364868), 1048.109419777, 1048.109419777, Double.NaN).when(precision_DoubleEquivalence0).signum(anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      HyperplaneLocation hyperplaneLocation0 = orientedPoint0.classify(vector1D0);
}"
2114,"    public HyperplaneLocation classify(final Vector1D pt) {
        return classify(pt.getX());
    }","  public void test2()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-2166.75364868), 1048.109419777, 1048.109419777, Double.NaN).when(precision_DoubleEquivalence0).signum(anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      HyperplaneLocation hyperplaneLocation0 = orientedPoint0.classify(vector1D0);
      orientedPoint0.classify(1659.0234);
      HyperplaneLocation hyperplaneLocation1 = orientedPoint0.classify(1659.0234);
}"
2115,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test3()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-2166.75364868), 1048.109419777, 1048.109419777, Double.NaN).when(precision_DoubleEquivalence0).signum(anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      HyperplaneLocation hyperplaneLocation0 = orientedPoint0.classify(vector1D0);
      orientedPoint0.classify(1659.0234);
      HyperplaneLocation hyperplaneLocation1 = orientedPoint0.classify(1659.0234);
      HyperplaneLocation hyperplaneLocation2 = orientedPoint0.classify(vector1D0);
}"
2116,"    public HyperplaneLocation classify(final Vector1D pt) {
        return classify(pt.getX());
    }","  public void test4()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-2166.75364868), 1048.109419777, 1048.109419777, Double.NaN).when(precision_DoubleEquivalence0).signum(anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      HyperplaneLocation hyperplaneLocation0 = orientedPoint0.classify(vector1D0);
      orientedPoint0.classify(1659.0234);
      HyperplaneLocation hyperplaneLocation1 = orientedPoint0.classify(1659.0234);
      HyperplaneLocation hyperplaneLocation2 = orientedPoint0.classify(vector1D0);
}"
2117,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof OrientedPoint)) {
            return false;
        }

        final OrientedPoint other = (OrientedPoint) obj;

        return Objects.equals(this.point, other.point) &&
                this.positiveFacing == other.positiveFacing &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test5()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      OrientedPoint orientedPoint1 = orientedPoint0.transform(affineTransformMatrix1D0);
}"
2118,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof OrientedPoint)) {
            return false;
        }

        final OrientedPoint other = (OrientedPoint) obj;

        return Objects.equals(this.point, other.point) &&
                this.positiveFacing == other.positiveFacing &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test6()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint1 = orientedPoint0.reverse();
}"
2119,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test7()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true, precision_DoubleEquivalence0);
      orientedPoint0.project(vector1D0);
}"
2120,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test8()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true, precision_DoubleEquivalence0);
      orientedPoint0.project(vector1D0);
}"
2121,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test9()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, true, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-2235.548734766));
      OrientedPoint orientedPoint1 = orientedPoint0.transform(affineTransformMatrix1D0);
      orientedPoint1.project((Vector1D) vector1D_Unit0);
}"
2122,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test10()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, true, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-2235.548734766));
      OrientedPoint orientedPoint1 = orientedPoint0.transform(affineTransformMatrix1D0);
      orientedPoint1.project((Vector1D) vector1D_Unit0);
}"
2123,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test11()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      orientedPoint0.project(vector1D0);
}"
2124,"    public double offset(final Vector1D pt) {
        return offset(pt.getX());
    }","  public void test12()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-2251.568622));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-2251.568622));
      OrientedPoint orientedPoint1 = orientedPoint0.transform(affineTransformMatrix1D0);
      OrientedPoint orientedPoint2 = orientedPoint1.reverse();
      double double0 = orientedPoint2.offset(vector1D0);
}"
2125,"    public double offset(final Vector1D pt) {
        return offset(pt.getX());
    }","  public void test13()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of(0.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      double double0 = orientedPoint0.offset(0.0);
}"
2126,"    public double offset(final Vector1D pt) {
        return offset(pt.getX());
    }","  public void test14()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      double double0 = orientedPoint0.offset((-1.0));
}"
2127,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test15()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, true, precision_DoubleEquivalence0);
      boolean boolean0 = orientedPoint0.isPositiveFacing();
}"
2128,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test16()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      orientedPoint0.getPoint();
}"
2129,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test17()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      orientedPoint0.getPoint();
}"
2130,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test18()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true, precision_DoubleEquivalence0);
      orientedPoint0.getPoint();
}"
2131,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test19()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      orientedPoint0.getLocation();
}"
2132,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test20()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, true, precision_DoubleEquivalence0);
      orientedPoint0.getLocation();
}"
2133,"    public OrientedPoint transform(final Transform<Vector1D> transform) {
        final Vector1D transformedPoint = transform.apply(point);

        final Vector1D transformedDir;
        if (point.isInfinite()) {
            // use a test point to determine if the direction switches or not
            final Vector1D transformedZero = transform.apply(Vector1D.ZERO);
            final Vector1D transformedZeroDir = transform.apply(getDirection());

            transformedDir = transformedZero.vectorTo(transformedZeroDir);
        } else {
            final Vector1D transformedPointPlusDir = transform.apply(point.add(getDirection()));
            transformedDir = transformedPoint.vectorTo(transformedPointPlusDir);
        }

        return OrientedPoints.fromPointAndDirection(
                    transformedPoint,
                    transformedDir,
                    getPrecision()
                );
    }","  public void test21()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, true, precision_DoubleEquivalence0);
      double[] doubleArray0 = new double[2];
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.of(doubleArray0);
      // Undeclared exception!
      try { 
        orientedPoint0.transform(affineTransformMatrix1D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D"", e);
      }
  }"
2134,"    public OrientedPoint transform(final Transform<Vector1D> transform) {
        final Vector1D transformedPoint = transform.apply(point);

        final Vector1D transformedDir;
        if (point.isInfinite()) {
            // use a test point to determine if the direction switches or not
            final Vector1D transformedZero = transform.apply(Vector1D.ZERO);
            final Vector1D transformedZeroDir = transform.apply(getDirection());

            transformedDir = transformedZero.vectorTo(transformedZeroDir);
        } else {
            final Vector1D transformedPointPlusDir = transform.apply(point.add(getDirection()));
            transformedDir = transformedPoint.vectorTo(transformedPointPlusDir);
        }

        return OrientedPoints.fromPointAndDirection(
                    transformedPoint,
                    transformedDir,
                    getPrecision()
                );
    }","  public void test22()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, true, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-2908.3555972));
      // Undeclared exception!
      try { 
        orientedPoint0.transform(affineTransformMatrix1D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Oriented point direction cannot be zero
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.OrientedPoints"", e);
      }
  }"
2135,"    public boolean similarOrientation(final Hyperplane<Vector1D> other) {
        return positiveFacing == ((OrientedPoint) other).positiveFacing;
    }","  public void test23()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        orientedPoint0.similarOrientation((Hyperplane<Vector1D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.OrientedPoint"", e);
      }
  }"
2136,"    public double offset(final Vector1D pt) {
        return offset(pt.getX());
    }","  public void test24()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, true, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        orientedPoint0.offset((Vector1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.OrientedPoint"", e);
      }
  }"
2137,"    public double offset(final Vector1D pt) {
        return offset(pt.getX());
    }","  public void test25()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, false, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        orientedPoint0.offset((-1907.0353047647286));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.OrientedPoint"", e);
      }
  }"
2138,"    public double getLocation() {
        return point.getX();
    }","  public void test26()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, false, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        orientedPoint0.getLocation();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.OrientedPoint"", e);
      }
  }"
2139,"    public boolean eq(final OrientedPoint other, final Precision.DoubleEquivalence precision) {
        return point.eq(other.point, precision) &&
                positiveFacing == other.positiveFacing;
    }","  public void test27()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        orientedPoint0.eq(orientedPoint0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Vector1D"", e);
      }
  }"
2140,"    public HyperplaneLocation classify(final Vector1D pt) {
        return classify(pt.getX());
    }","  public void test28()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, true, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        orientedPoint0.classify((Vector1D) vector1D_Unit0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.OrientedPoint"", e);
      }
  }"
2141,"    public HyperplaneLocation classify(final Vector1D pt) {
        return classify(pt.getX());
    }","  public void test29()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, true, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        orientedPoint0.classify(1901.672);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.OrientedPoint"", e);
      }
  }"
2142,"    public HyperplaneLocation classify(final Vector1D pt) {
        return classify(pt.getX());
    }","  public void test30()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.39903552594313924, 0.39903552594313924, 0.39903552594313924, (-1590.42730105213)).when(precision_DoubleEquivalence0).signum(anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true, precision_DoubleEquivalence0);
      orientedPoint0.contains(vector1D0);
      orientedPoint0.contains(vector1D0);
      HyperplaneLocation hyperplaneLocation0 = orientedPoint0.classify((-2746.2818818));
}"
2143,"    public HyperplaneLocation classify(final Vector1D pt) {
        return classify(pt.getX());
    }","  public void test31()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.39903552594313924, 0.39903552594313924, 0.39903552594313924, (-1590.42730105213)).when(precision_DoubleEquivalence0).signum(anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true, precision_DoubleEquivalence0);
      orientedPoint0.contains(vector1D0);
      orientedPoint0.contains(vector1D0);
      HyperplaneLocation hyperplaneLocation0 = orientedPoint0.classify((-2746.2818818));
      HyperplaneLocation hyperplaneLocation1 = orientedPoint0.classify(Double.NaN);
}"
2144,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test32()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.39903552594313924, 0.39903552594313924, 0.39903552594313924, (-1590.42730105213)).when(precision_DoubleEquivalence0).signum(anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true, precision_DoubleEquivalence0);
      orientedPoint0.contains(vector1D0);
      orientedPoint0.contains(vector1D0);
      HyperplaneLocation hyperplaneLocation0 = orientedPoint0.classify((-2746.2818818));
      HyperplaneLocation hyperplaneLocation1 = orientedPoint0.classify(Double.NaN);
}"
2145,"    public double offset(final Vector1D pt) {
        return offset(pt.getX());
    }","  public void test33()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true, precision_DoubleEquivalence0);
      double double0 = orientedPoint0.offset((-654.9302196545567));
}"
2146,"    public Vector1D.Unit getDirection() {
        return positiveFacing ? Vector1D.Unit.PLUS : Vector1D.Unit.MINUS;
    }","  public void test34()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true, precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = orientedPoint0.getDirection();
}"
2147,"    public Vector1D.Unit getDirection() {
        return positiveFacing ? Vector1D.Unit.PLUS : Vector1D.Unit.MINUS;
    }","  public void test35()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = orientedPoint0.getDirection();
}"
2148,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof OrientedPoint)) {
            return false;
        }

        final OrientedPoint other = (OrientedPoint) obj;

        return Objects.equals(this.point, other.point) &&
                this.positiveFacing == other.positiveFacing &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test36()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-916.27717937));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint1 = orientedPoint0.reverse();
      OrientedPoint orientedPoint2 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence1);
      OrientedPoint orientedPoint3 = orientedPoint2.reverse();
      boolean boolean0 = orientedPoint1.equals(orientedPoint3);
}"
2149,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof OrientedPoint)) {
            return false;
        }

        final OrientedPoint other = (OrientedPoint) obj;

        return Objects.equals(this.point, other.point) &&
                this.positiveFacing == other.positiveFacing &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test37()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-916.27717937));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint1 = orientedPoint0.reverse();
      OrientedPoint orientedPoint2 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence1);
      OrientedPoint orientedPoint3 = orientedPoint2.reverse();
      boolean boolean0 = orientedPoint1.equals(orientedPoint3);
}"
2150,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof OrientedPoint)) {
            return false;
        }

        final OrientedPoint other = (OrientedPoint) obj;

        return Objects.equals(this.point, other.point) &&
                this.positiveFacing == other.positiveFacing &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test38()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of(1169.564831381051);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from(vector1D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, true, precision_DoubleEquivalence0);
      Vector1D vector1D1 = vector1D0.add(1.4487647751035, (Vector1D) vector1D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint1 = new OrientedPoint(vector1D1, true, precision_DoubleEquivalence1);
      boolean boolean0 = orientedPoint0.equals(orientedPoint1);
}"
2151,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test39()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of(1169.564831381051);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from(vector1D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, true, precision_DoubleEquivalence0);
      Vector1D vector1D1 = vector1D0.add(1.4487647751035, (Vector1D) vector1D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint1 = new OrientedPoint(vector1D1, true, precision_DoubleEquivalence1);
      boolean boolean0 = orientedPoint0.equals(orientedPoint1);
}"
2152,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof OrientedPoint)) {
            return false;
        }

        final OrientedPoint other = (OrientedPoint) obj;

        return Objects.equals(this.point, other.point) &&
                this.positiveFacing == other.positiveFacing &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test40()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of(1169.564831381051);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from(vector1D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, true, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint1 = orientedPoint0.reverse();
      boolean boolean0 = orientedPoint1.equals(orientedPoint0);
}"
2153,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof OrientedPoint)) {
            return false;
        }

        final OrientedPoint other = (OrientedPoint) obj;

        return Objects.equals(this.point, other.point) &&
                this.positiveFacing == other.positiveFacing &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test41()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      boolean boolean0 = orientedPoint0.equals(orientedPoint0);
}"
2154,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test42()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      boolean boolean0 = orientedPoint0.equals(orientedPoint0);
}"
2155,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test43()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      boolean boolean0 = orientedPoint0.equals(affineTransformMatrix1D0);
}"
2156,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof OrientedPoint)) {
            return false;
        }

        final OrientedPoint other = (OrientedPoint) obj;

        return Objects.equals(this.point, other.point) &&
                this.positiveFacing == other.positiveFacing &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test44()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      boolean boolean0 = orientedPoint0.equals(affineTransformMatrix1D0);
}"
2157,"    public boolean eq(final OrientedPoint other, final Precision.DoubleEquivalence precision) {
        return point.eq(other.point, precision) &&
                positiveFacing == other.positiveFacing;
    }","  public void test45()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint1 = orientedPoint0.reverse();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence1).eq(anyDouble() , anyDouble());
      boolean boolean0 = orientedPoint0.eq(orientedPoint1, precision_DoubleEquivalence1);
}"
2158,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test46()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence1).eq(anyDouble() , anyDouble());
      boolean boolean0 = orientedPoint0.eq(orientedPoint0, precision_DoubleEquivalence1);
}"
2159,"    public boolean eq(final OrientedPoint other, final Precision.DoubleEquivalence precision) {
        return point.eq(other.point, precision) &&
                positiveFacing == other.positiveFacing;
    }","  public void test47()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence1).eq(anyDouble() , anyDouble());
      boolean boolean0 = orientedPoint0.eq(orientedPoint0, precision_DoubleEquivalence1);
}"
2160,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test48()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eq(anyDouble() , anyDouble());
      boolean boolean0 = orientedPoint0.eq(orientedPoint0, precision_DoubleEquivalence1);
}"
2161,"    public boolean eq(final OrientedPoint other, final Precision.DoubleEquivalence precision) {
        return point.eq(other.point, precision) &&
                positiveFacing == other.positiveFacing;
    }","  public void test49()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eq(anyDouble() , anyDouble());
      boolean boolean0 = orientedPoint0.eq(orientedPoint0, precision_DoubleEquivalence1);
}"
2162,"    public boolean similarOrientation(final Hyperplane<Vector1D> other) {
        return positiveFacing == ((OrientedPoint) other).positiveFacing;
    }","  public void test50()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      boolean boolean0 = orientedPoint0.similarOrientation(orientedPoint0);
}"
2163,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test51()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      boolean boolean0 = orientedPoint0.similarOrientation(orientedPoint0);
}"
2164,"    public boolean similarOrientation(final Hyperplane<Vector1D> other) {
        return positiveFacing == ((OrientedPoint) other).positiveFacing;
    }","  public void test52()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-916.27717937));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint1 = orientedPoint0.reverse();
      boolean boolean0 = orientedPoint1.similarOrientation(orientedPoint0);
}"
2165,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test53()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of(1169.564831381051);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from(vector1D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, true, precision_DoubleEquivalence0);
      HyperplaneLocation hyperplaneLocation0 = orientedPoint0.classify(628.3);
}"
2166,"    public HyperplaneLocation classify(final Vector1D pt) {
        return classify(pt.getX());
    }","  public void test54()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of(1169.564831381051);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from(vector1D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, true, precision_DoubleEquivalence0);
      HyperplaneLocation hyperplaneLocation0 = orientedPoint0.classify(628.3);
}"
2167,"    public double offset(final Vector1D pt) {
        return offset(pt.getX());
    }","  public void test55()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint1 = orientedPoint0.reverse();
      double double0 = orientedPoint1.offset((Vector1D) vector1D_Unit0);
}"
2168,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test56()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint1 = orientedPoint0.reverse();
      double double0 = orientedPoint1.offset((Vector1D) vector1D_Unit0);
}"
2169,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof OrientedPoint)) {
            return false;
        }

        final OrientedPoint other = (OrientedPoint) obj;

        return Objects.equals(this.point, other.point) &&
                this.positiveFacing == other.positiveFacing &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test57()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      OrientedPoint orientedPoint1 = orientedPoint0.transform(affineTransformMatrix1D0);
      boolean boolean0 = orientedPoint0.equals(orientedPoint1);
}"
2170,"    public double offset(final Vector1D pt) {
        return offset(pt.getX());
    }","  public void test58()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      OrientedPoint orientedPoint1 = orientedPoint0.transform(affineTransformMatrix1D0);
      OrientedPoint orientedPoint2 = orientedPoint1.reverse();
      double double0 = orientedPoint2.offset((Vector1D) vector1D_Unit0);
}"
2171,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test59()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      boolean boolean0 = orientedPoint0.isPositiveFacing();
}"
2172,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test60()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      orientedPoint0.span();
}"
2173,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(this.getClass().getSimpleName())
            .append(""[point= "")
            .append(point)
            .append("", direction= "")
            .append(getDirection())
            .append(']');

        return sb.toString();
    }","  public void test61()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, true, precision_DoubleEquivalence0);
      String string0 = orientedPoint0.toString();
}"
2174,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test62()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      orientedPoint0.getLocation();
}"
2175,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test63()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, true, precision_DoubleEquivalence0);
      orientedPoint0.getPoint();
}"
2176,"    public boolean isPositiveFacing() {
        return positiveFacing;
    }","  public void test64()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, true, precision_DoubleEquivalence0);
      orientedPoint0.project((Vector1D) null);
}"
2177,"    public void add(final PlaneConvexSubset subset) {
        Planes.validatePlanesEquivalent(getPlane(), subset.getPlane());

        final PlaneConvexSubset.Embedded embedded = subset.getEmbedded();
        final Rotation2D rot = getEmbeddedRegionRotation(embedded);

        final ConvexArea subspaceArea = embedded.getSubspaceRegion();

        final ConvexArea toAdd = rot != null ?
                subspaceArea.transform(rot) :
                subspaceArea;

        region.add(toAdd);
    }","  public void test0()  throws Throwable  {
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null);
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset1 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null);
      // Undeclared exception!
      try { 
        embeddedTreePlaneSubset0.add(embeddedTreePlaneSubset1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes"", e);
      }
  }"
2178,"    public EmbeddedTreePlaneSubset transform(final Transform<Vector3D> transform) {
        final EmbeddingPlane.SubspaceTransform subTransform =
                getPlane().getEmbedding().subspaceTransform(transform);

        final RegionBSPTree2D tRegion = RegionBSPTree2D.empty();
        tRegion.copy(region);
        tRegion.transform(subTransform.getTransform());

        return new EmbeddedTreePlaneSubset(subTransform.getPlane(), tRegion);
    }","  public void test1()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 1621.053206683114, (Precision.DoubleEquivalence) null);
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset(embeddingPlane0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of((-871.6897371), 1621.053206683114, (-871.6897371), (-1.0));
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset1 = embeddedTreePlaneSubset0.transform(quaternionRotation0);
}"
2179,"    public List<PlaneConvexSubset> toConvex() {
        final List<ConvexArea> areas = region.toConvex();

        final List<PlaneConvexSubset> facets = new ArrayList<>(areas.size());

        for (final ConvexArea area : areas) {
            facets.add(Planes.subsetFromConvexArea(getPlane(), area));
        }

        return facets;
    }","  public void test2()  throws Throwable  {
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null);
      List<PlaneConvexSubset> list0 = embeddedTreePlaneSubset0.toConvex();
}"
2180,"    public RegionBSPTree2D getSubspaceRegion() {
        return region;
    }","  public void test3()  throws Throwable  {
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null, (RegionBSPTree2D) null);
      RegionBSPTree2D regionBSPTree2D0 = embeddedTreePlaneSubset0.getSubspaceRegion();
}"
2181,"    public EmbeddedTreePlaneSubset transform(final Transform<Vector3D> transform) {
        final EmbeddingPlane.SubspaceTransform subTransform =
                getPlane().getEmbedding().subspaceTransform(transform);

        final RegionBSPTree2D tRegion = RegionBSPTree2D.empty();
        tRegion.copy(region);
        tRegion.transform(subTransform.getTransform());

        return new EmbeddedTreePlaneSubset(subTransform.getPlane(), tRegion);
    }","  public void test4()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 3855.821674529065, (Precision.DoubleEquivalence) null);
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset(embeddingPlane0, false);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(3855.821674529065, 2666.10641, 1.0);
      // Undeclared exception!
      try { 
        embeddedTreePlaneSubset0.transform(affineTransformMatrix3D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
2182,"    public List<Triangle3D> toTriangles() {
        final EmbeddingPlane plane = getPlane();
        final List<Triangle3D> triangles = new ArrayList<>();

        List<Vector3D> vertices;
        for (final ConvexArea area : region.toConvex()) {
            if (area.isInfinite()) {
                throw new IllegalStateException(""Cannot convert infinite plane subset to triangles: "" + this);
            }

            vertices = plane.toSpace(area.getVertices());

            triangles.addAll(Planes.convexPolygonToTriangleFan(plane, vertices));
        }

        return triangles;
    }","  public void test5()  throws Throwable  {
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null, (RegionBSPTree2D) null);
      // Undeclared exception!
      try { 
        embeddedTreePlaneSubset0.toTriangles();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.EmbeddedTreePlaneSubset"", e);
      }
  }"
2183,"    public List<PlaneConvexSubset> toConvex() {
        final List<ConvexArea> areas = region.toConvex();

        final List<PlaneConvexSubset> facets = new ArrayList<>(areas.size());

        for (final ConvexArea area : areas) {
            facets.add(Planes.subsetFromConvexArea(getPlane(), area));
        }

        return facets;
    }","  public void test6()  throws Throwable  {
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null, (RegionBSPTree2D) null);
      // Undeclared exception!
      try { 
        embeddedTreePlaneSubset0.toConvex();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.EmbeddedTreePlaneSubset"", e);
      }
  }"
2184,"    public Bounds3D getBounds() {
        return getBoundsFromSubspace(region);
    }","  public void test7()  throws Throwable  {
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null, (RegionBSPTree2D) null);
      // Undeclared exception!
      try { 
        embeddedTreePlaneSubset0.getBounds();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AbstractEmbeddedRegionPlaneSubset"", e);
      }
  }"
2185,"    public void add(final PlaneConvexSubset subset) {
        Planes.validatePlanesEquivalent(getPlane(), subset.getPlane());

        final PlaneConvexSubset.Embedded embedded = subset.getEmbedded();
        final Rotation2D rot = getEmbeddedRegionRotation(embedded);

        final ConvexArea subspaceArea = embedded.getSubspaceRegion();

        final ConvexArea toAdd = rot != null ?
                subspaceArea.transform(rot) :
                subspaceArea;

        region.add(toAdd);
    }","  public void test8()  throws Throwable  {
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null);
      // Undeclared exception!
      try { 
        embeddedTreePlaneSubset0.add((PlaneConvexSubset) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.EmbeddedTreePlaneSubset"", e);
      }
  }"
2186,"    public RegionBSPTree2D getSubspaceRegion() {
        return region;
    }","  public void test9()  throws Throwable  {
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null, false);
      RegionBSPTree2D regionBSPTree2D0 = embeddedTreePlaneSubset0.getSubspaceRegion();
}"
2187,"    public List<Triangle3D> toTriangles() {
        final EmbeddingPlane plane = getPlane();
        final List<Triangle3D> triangles = new ArrayList<>();

        List<Vector3D> vertices;
        for (final ConvexArea area : region.toConvex()) {
            if (area.isInfinite()) {
                throw new IllegalStateException(""Cannot convert infinite plane subset to triangles: "" + this);
            }

            vertices = plane.toSpace(area.getVertices());

            triangles.addAll(Planes.convexPolygonToTriangleFan(plane, vertices));
        }

        return triangles;
    }","  public void test10()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = RegionBSPTree2D.full();
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null, regionBSPTree2D0);
      // Undeclared exception!
      try { 
        embeddedTreePlaneSubset0.toTriangles();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Cannot convert infinite plane subset to triangles: EmbeddedTreePlaneSubset[plane= null, subspaceRegion= RegionBSPTree2D[count= 1, height= 0]]
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.EmbeddedTreePlaneSubset"", e);
      }
  }"
2188,"    public List<Triangle3D> toTriangles() {
        final EmbeddingPlane plane = getPlane();
        final List<Triangle3D> triangles = new ArrayList<>();

        List<Vector3D> vertices;
        for (final ConvexArea area : region.toConvex()) {
            if (area.isInfinite()) {
                throw new IllegalStateException(""Cannot convert infinite plane subset to triangles: "" + this);
            }

            vertices = plane.toSpace(area.getVertices());

            triangles.addAll(Planes.convexPolygonToTriangleFan(plane, vertices));
        }

        return triangles;
    }","  public void test11()  throws Throwable  {
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null);
      List<Triangle3D> list0 = embeddedTreePlaneSubset0.toTriangles();
}"
2189,"    public List<PlaneConvexSubset> toConvex() {
        final List<ConvexArea> areas = region.toConvex();

        final List<PlaneConvexSubset> facets = new ArrayList<>(areas.size());

        for (final ConvexArea area : areas) {
            facets.add(Planes.subsetFromConvexArea(getPlane(), area));
        }

        return facets;
    }","  public void test12()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = RegionBSPTree2D.full();
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null, regionBSPTree2D0);
      List<PlaneConvexSubset> list0 = embeddedTreePlaneSubset0.toConvex();
}"
2190,"    public Bounds3D getBounds() {
        return getBoundsFromSubspace(region);
    }","  public void test13()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = RegionBSPTree2D.full();
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null, regionBSPTree2D0);
      Bounds3D bounds3D0 = embeddedTreePlaneSubset0.getBounds();
}"
2191,"    public PlaneSubset.Embedded getEmbedded() {
        return this;
    }","  public void test14()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = RegionBSPTree2D.full();
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null, regionBSPTree2D0);
      PlaneSubset.Embedded planeSubset_Embedded0 = embeddedTreePlaneSubset0.getEmbedded();
}"
2192,"    public EmbeddedTreePlaneSubset transform(final Transform<Vector3D> transform) {
        final EmbeddingPlane.SubspaceTransform subTransform =
                getPlane().getEmbedding().subspaceTransform(transform);

        final RegionBSPTree2D tRegion = RegionBSPTree2D.empty();
        tRegion.copy(region);
        tRegion.transform(subTransform.getTransform());

        return new EmbeddedTreePlaneSubset(subTransform.getPlane(), tRegion);
    }","  public void test15()  throws Throwable  {
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null, true);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(0.0, 0.0, (-1.0));
      // Undeclared exception!
      try { 
        embeddedTreePlaneSubset0.transform(affineTransformMatrix3D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.EmbeddedTreePlaneSubset"", e);
      }
  }"
2193,"    public Split<EmbeddedTreePlaneSubset> split(final Hyperplane<Vector3D> splitter) {
        return Planes.subspaceSplit((Plane) splitter, this,
            (p, r) -> new EmbeddedTreePlaneSubset(p, (RegionBSPTree2D) r));
    }","  public void test16()  throws Throwable  {
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null);
      // Undeclared exception!
      try { 
        embeddedTreePlaneSubset0.split((Hyperplane<Vector3D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes"", e);
      }
  }"
2194,"    public BoundaryList3D toList() {
        return this;
    }","  public void test0()  throws Throwable  {
      ArrayList<SimpleTriangle3D> arrayList0 = new ArrayList<SimpleTriangle3D>();
      BoundaryList3D boundaryList3D0 = new BoundaryList3D(arrayList0);
      arrayList0.add((SimpleTriangle3D) null);
      BoundaryList3D boundaryList3D1 = boundaryList3D0.toList();
}"
2195,"    public BoundaryList3D(final List<? extends PlaneConvexSubset> boundaries) {
        super(boundaries);
    }","  public void test1()  throws Throwable  {
      BoundaryList3D boundaryList3D0 = null;
      try {
        boundaryList3D0 = new BoundaryList3D((List<? extends PlaneConvexSubset>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableCollection"", e);
      }
  }"
2196,"    public BoundaryList3D toList() {
        return this;
    }","  public void test2()  throws Throwable  {
      Vector<VertexListConvexPolygon3D> vector0 = new Vector<VertexListConvexPolygon3D>();
      BoundaryList3D boundaryList3D0 = new BoundaryList3D(vector0);
      BoundaryList3D boundaryList3D1 = boundaryList3D0.toList();
}"
2197,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test0()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = line3D0.getPrecision();
      Plane plane2 = plane1.transform(quaternionRotation0);
}"
2198,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test1()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = line3D0.getPrecision();
      Plane plane2 = plane1.transform(quaternionRotation0);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      plane1.eq(embeddingPlane0, precision_DoubleEquivalence1);
}"
2199,"    public Vector3D project(final Vector3D point) {
        return getOrigin().add(point.reject(normal));
    }","  public void test2()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, (-0.999999999999998), (Precision.DoubleEquivalence) null);
      Line3D line3D0 = mock(Line3D.class, new ViolatedAssumptionAnswer());
      doReturn(vector3D_Unit0).when(line3D0).getDirection();
      doReturn((Vector3D) null).when(line3D0).getOrigin();
      // Undeclared exception!
      try { 
        plane0.project(line3D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
2200,"    public double offset(final Vector3D point) {
        return point.dot(normal) + originOffset;
    }","  public void test3()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, precision_DoubleEquivalence0);
      Plane plane1 = plane0.translate(vector3D_Unit0);
      double double0 = plane0.offset(plane1);
}"
2201,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test4()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, 1.0, precision_DoubleEquivalence0);
      Plane plane1 = plane0.translate(vector3D_Unit0);
}"
2202,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test5()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      Plane plane1 = plane0.reverse();
      Plane plane2 = plane1.translate(vector3D_Unit0);
}"
2203,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test6()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      Plane plane1 = plane0.reverse();
      Plane plane2 = plane1.translate(vector3D_Unit0);
}"
2204,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test7()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZXY;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 0.0, 0.0, 1.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      Plane plane1 = embeddingPlane0.transform(quaternionRotation0);
}"
2205,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test8()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZXY;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 0.0, 0.0, 1.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      Plane plane1 = embeddingPlane0.transform(quaternionRotation0);
}"
2206,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test9()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      Plane plane2 = plane1.transform(quaternionRotation0);
}"
2207,"    public Vector3D project(final Vector3D point) {
        return getOrigin().add(point.reject(normal));
    }","  public void test10()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      Plane plane2 = plane1.transform(quaternionRotation0);
      plane1.contains(plane0);
      Vector3D vector3D0 = plane0.intersection(line3D0);
      plane1.project(vector3D0);
}"
2208,"    public Vector3D project(final Vector3D point) {
        return getOrigin().add(point.reject(normal));
    }","  public void test11()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      Plane plane2 = plane1.transform(quaternionRotation0);
      plane1.contains(plane0);
      Vector3D vector3D0 = plane0.intersection(line3D0);
      plane1.project(vector3D0);
}"
2209,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test12()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-2815.689008), 0.25, (-130.449));
      Plane plane0 = new Plane(vector3D_Unit0, (-130.449), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      Vector3D vector3D0 = embeddingPlane0.project((Vector3D) vector3D_Unit0);
}"
2210,"    public Vector3D project(final Vector3D point) {
        return getOrigin().add(point.reject(normal));
    }","  public void test13()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-2815.689008), 0.25, (-130.449));
      Plane plane0 = new Plane(vector3D_Unit0, (-130.449), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      Vector3D vector3D0 = embeddingPlane0.project((Vector3D) vector3D_Unit0);
}"
2211,"    public Vector3D project(final Vector3D point) {
        return getOrigin().add(point.reject(normal));
    }","  public void test14()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 1.0, (Precision.DoubleEquivalence) null);
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Y;
      Vector3D vector3D0 = plane0.project((Vector3D) vector3D_Unit1);
}"
2212,"    public Vector3D project(final Vector3D point) {
        return getOrigin().add(point.reject(normal));
    }","  public void test15()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 1.0, (Precision.DoubleEquivalence) null);
      Vector3D vector3D0 = plane0.project((Vector3D) vector3D_Unit0);
}"
2213,"    public double offset(final Vector3D point) {
        return point.dot(normal) + originOffset;
    }","  public void test16()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Plane plane2 = plane1.reverse();
      Line3D line3D0 = plane2.intersection(plane0);
      Plane plane3 = plane2.transform(quaternionRotation0);
      double double0 = plane3.offset(line3D0);
}"
2214,"    public double offset(final Vector3D point) {
        return point.dot(normal) + originOffset;
    }","  public void test17()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      Plane plane1 = plane0.translate(vector3D_Unit0);
      double double0 = plane1.offset((Vector3D) vector3D_Unit0);
}"
2215,"    public double offset(final Vector3D point) {
        return point.dot(normal) + originOffset;
    }","  public void test18()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, 1345.05, (Precision.DoubleEquivalence) null);
      double double0 = plane0.offset((Vector3D) vector3D_Unit0);
}"
2216,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test19()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      Plane plane2 = plane1.transform(quaternionRotation0);
}"
2217,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test20()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      Plane plane2 = plane1.transform(quaternionRotation0);
      plane1.contains(plane0);
      plane0.isParallel(line3D0);
}"
2218,"    public boolean isParallel(final Line3D line) {
        final double dot = normal.dot(line.getDirection());

        return getPrecision().eqZero(dot);
    }","  public void test21()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      plane1.intersection(plane0);
      plane1.transform(quaternionRotation0);
      boolean boolean0 = plane0.isParallel(plane0);
}"
2219,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test22()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      plane0.isParallel(plane0);
}"
2220,"    public Vector3D intersection(final Line3D line) {
        final Vector3D direction = line.getDirection();
        final double dot = normal.dot(direction);

        if (getPrecision().eqZero(dot)) {
            return null;
        }

        final Vector3D point = line.pointAt(0);
        final double k = -(originOffset + normal.dot(point)) / dot;

        return Vector3D.Sum.of(point)
                .addScaled(k, direction)
                .get();
    }","  public void test23()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-272.8028254), precision_DoubleEquivalence0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 0.0, 3517.0, 208.42999396);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Plane plane1 = plane0.transform(quaternionRotation0);
      EmbeddingPlane embeddingPlane0 = plane1.getEmbedding();
      Line3D line3D0 = plane0.intersection(plane1);
      Line3D line3D1 = embeddingPlane0.project(line3D0);
      Vector3D vector3D0 = embeddingPlane0.intersection(line3D1);
}"
2221,"    public Vector3D intersection(final Line3D line) {
        final Vector3D direction = line.getDirection();
        final double dot = normal.dot(direction);

        if (getPrecision().eqZero(dot)) {
            return null;
        }

        final Vector3D point = line.pointAt(0);
        final double k = -(originOffset + normal.dot(point)) / dot;

        return Vector3D.Sum.of(point)
                .addScaled(k, direction)
                .get();
    }","  public void test24()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-272.8028254), precision_DoubleEquivalence0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 0.0, 3517.0, 208.42999396);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Plane plane1 = plane0.transform(quaternionRotation0);
      EmbeddingPlane embeddingPlane0 = plane1.getEmbedding();
      Line3D line3D0 = plane0.intersection(plane1);
      Line3D line3D1 = embeddingPlane0.project(line3D0);
      Vector3D vector3D0 = embeddingPlane0.intersection(line3D1);
}"
2222,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test25()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = line3D0.getPrecision();
      Plane plane2 = plane1.transform(quaternionRotation0);
}"
2223,"    public Vector3D intersection(final Line3D line) {
        final Vector3D direction = line.getDirection();
        final double dot = normal.dot(direction);

        if (getPrecision().eqZero(dot)) {
            return null;
        }

        final Vector3D point = line.pointAt(0);
        final double k = -(originOffset + normal.dot(point)) / dot;

        return Vector3D.Sum.of(point)
                .addScaled(k, direction)
                .get();
    }","  public void test26()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = line3D0.getPrecision();
      Plane plane2 = plane1.transform(quaternionRotation0);
      plane1.contains(plane0);
      Plane plane3 = new Plane(vector3D_Unit0, 3.141592653589793, precision_DoubleEquivalence1);
      Line3D line3D1 = plane3.project(line3D0);
      Vector3D vector3D0 = plane1.intersection(line3D1);
}"
2224,"    public Vector3D intersection(final Line3D line) {
        final Vector3D direction = line.getDirection();
        final double dot = normal.dot(direction);

        if (getPrecision().eqZero(dot)) {
            return null;
        }

        final Vector3D point = line.pointAt(0);
        final double k = -(originOffset + normal.dot(point)) / dot;

        return Vector3D.Sum.of(point)
                .addScaled(k, direction)
                .get();
    }","  public void test27()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Plane plane2 = plane1.transform(quaternionRotation0);
      Vector3D vector3D0 = Plane.intersection(plane0, plane1, plane2);
}"
2225,"    public Vector3D intersection(final Line3D line) {
        final Vector3D direction = line.getDirection();
        final double dot = normal.dot(direction);

        if (getPrecision().eqZero(dot)) {
            return null;
        }

        final Vector3D point = line.pointAt(0);
        final double k = -(originOffset + normal.dot(point)) / dot;

        return Vector3D.Sum.of(point)
                .addScaled(k, direction)
                .get();
    }","  public void test28()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Plane plane2 = plane1.transform(quaternionRotation0);
      Vector3D vector3D0 = Plane.intersection(plane0, plane1, plane2);
}"
2226,"    public double offset(final Vector3D point) {
        return point.dot(normal) + originOffset;
    }","  public void test29()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = line3D0.getPrecision();
      Plane plane2 = plane0.transform(quaternionRotation0);
      double double0 = plane2.offset(plane0);
}"
2227,"    public Vector3D intersection(final Line3D line) {
        final Vector3D direction = line.getDirection();
        final double dot = normal.dot(direction);

        if (getPrecision().eqZero(dot)) {
            return null;
        }

        final Vector3D point = line.pointAt(0);
        final double k = -(originOffset + normal.dot(point)) / dot;

        return Vector3D.Sum.of(point)
                .addScaled(k, direction)
                .get();
    }","  public void test30()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = line3D0.getPrecision();
      Plane plane2 = plane0.transform(quaternionRotation0);
      double double0 = plane2.offset(plane0);
      Plane plane3 = new Plane(vector3D_Unit0, 3.141592653589793, precision_DoubleEquivalence1);
      Vector3D vector3D0 = Plane.intersection(plane3, plane1, plane2);
}"
2228,"    public Vector3D intersection(final Line3D line) {
        final Vector3D direction = line.getDirection();
        final double dot = normal.dot(direction);

        if (getPrecision().eqZero(dot)) {
            return null;
        }

        final Vector3D point = line.pointAt(0);
        final double k = -(originOffset + normal.dot(point)) / dot;

        return Vector3D.Sum.of(point)
                .addScaled(k, direction)
                .get();
    }","  public void test31()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = line3D0.getPrecision();
      Plane plane2 = plane0.transform(quaternionRotation0);
      double double0 = plane2.offset(plane0);
      Plane plane3 = new Plane(vector3D_Unit0, 3.141592653589793, precision_DoubleEquivalence1);
      Vector3D vector3D0 = Plane.intersection(plane3, plane1, plane2);
}"
2229,"    public Vector3D intersection(final Line3D line) {
        final Vector3D direction = line.getDirection();
        final double dot = normal.dot(direction);

        if (getPrecision().eqZero(dot)) {
            return null;
        }

        final Vector3D point = line.pointAt(0);
        final double k = -(originOffset + normal.dot(point)) / dot;

        return Vector3D.Sum.of(point)
                .addScaled(k, direction)
                .get();
    }","  public void test32()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Plane plane2 = plane1.transform(quaternionRotation0);
      Vector3D vector3D0 = Plane.intersection(plane2, plane1, plane2);
}"
2230,"    public Vector3D intersection(final Line3D line) {
        final Vector3D direction = line.getDirection();
        final double dot = normal.dot(direction);

        if (getPrecision().eqZero(dot)) {
            return null;
        }

        final Vector3D point = line.pointAt(0);
        final double k = -(originOffset + normal.dot(point)) / dot;

        return Vector3D.Sum.of(point)
                .addScaled(k, direction)
                .get();
    }","  public void test33()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Plane plane2 = plane1.transform(quaternionRotation0);
      Vector3D vector3D0 = Plane.intersection(plane2, plane1, plane2);
}"
2231,"    public Vector3D intersection(final Line3D line) {
        final Vector3D direction = line.getDirection();
        final double dot = normal.dot(direction);

        if (getPrecision().eqZero(dot)) {
            return null;
        }

        final Vector3D point = line.pointAt(0);
        final double k = -(originOffset + normal.dot(point)) / dot;

        return Vector3D.Sum.of(point)
                .addScaled(k, direction)
                .get();
    }","  public void test34()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Plane plane2 = plane1.transform(quaternionRotation0);
      Vector3D vector3D0 = Plane.intersection(plane2, plane1, plane2);
}"
2232,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test35()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Plane plane2 = plane1.transform(quaternionRotation0);
      Vector3D vector3D0 = Plane.intersection(plane2, plane1, plane2);
}"
2233,"    public Vector3D intersection(final Line3D line) {
        final Vector3D direction = line.getDirection();
        final double dot = normal.dot(direction);

        if (getPrecision().eqZero(dot)) {
            return null;
        }

        final Vector3D point = line.pointAt(0);
        final double k = -(originOffset + normal.dot(point)) / dot;

        return Vector3D.Sum.of(point)
                .addScaled(k, direction)
                .get();
    }","  public void test36()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Plane plane2 = plane1.transform(quaternionRotation0);
      Vector3D vector3D0 = Plane.intersection(plane0, plane1, plane2);
}"
2234,"    public Vector3D intersection(final Line3D line) {
        final Vector3D direction = line.getDirection();
        final double dot = normal.dot(direction);

        if (getPrecision().eqZero(dot)) {
            return null;
        }

        final Vector3D point = line.pointAt(0);
        final double k = -(originOffset + normal.dot(point)) / dot;

        return Vector3D.Sum.of(point)
                .addScaled(k, direction)
                .get();
    }","  public void test37()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Plane plane2 = plane1.transform(quaternionRotation0);
      Vector3D vector3D0 = Plane.intersection(plane0, plane1, plane2);
}"
2235,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test38()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      double double0 = plane0.getOriginOffset();
}"
2236,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test39()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(957.52745443211, (-3214.562), 3625.9);
      Plane plane0 = new Plane(vector3D_Unit0, Double.NEGATIVE_INFINITY, precision_DoubleEquivalence0);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      Vector3D vector3D0 = embeddingPlane0.getOrigin();
}"
2237,"    public Vector3D getOrigin() {
        return normal.multiply(-originOffset);
    }","  public void test40()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(957.52745443211, (-3214.562), 3625.9);
      Plane plane0 = new Plane(vector3D_Unit0, Double.NEGATIVE_INFINITY, precision_DoubleEquivalence0);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      Vector3D vector3D0 = embeddingPlane0.getOrigin();
}"
2238,"    public Vector3D getOrigin() {
        return normal.multiply(-originOffset);
    }","  public void test41()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, Double.NEGATIVE_INFINITY, precision_DoubleEquivalence0);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      Vector3D vector3D0 = embeddingPlane0.getOrigin();
}"
2239,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test42()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, Double.NEGATIVE_INFINITY, precision_DoubleEquivalence0);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      Vector3D vector3D0 = embeddingPlane0.getOrigin();
}"
2240,"    public Vector3D getOrigin() {
        return normal.multiply(-originOffset);
    }","  public void test43()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      Vector3D vector3D0 = plane0.getOrigin();
}"
2241,"    public Vector3D getOrigin() {
        return normal.multiply(-originOffset);
    }","  public void test44()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 0.9999, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      Vector3D vector3D0 = embeddingPlane0.getOrigin();
}"
2242,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test45()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 0.9999, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      Vector3D vector3D0 = embeddingPlane0.getOrigin();
}"
2243,"    public Vector3D getOrigin() {
        return normal.multiply(-originOffset);
    }","  public void test46()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Plane plane2 = plane1.transform(quaternionRotation0);
      Vector3D vector3D0 = plane2.getOrigin();
}"
2244,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test47()  throws Throwable  {
      Plane plane0 = new Plane((Vector3D.Unit) null, (-718.0), (Precision.DoubleEquivalence) null);
      plane0.getNormal();
}"
2245,"    public Vector3D.Unit getNormal() {
        return normal;
    }","  public void test48()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Plane plane2 = plane1.transform(quaternionRotation0);
      Vector3D.Unit vector3D_Unit1 = plane2.getNormal();
}"
2246,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test49()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Plane plane0 = new Plane(vector3D_Unit0, 2392.0253141, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      embeddingPlane0.getNormal();
}"
2247,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test50()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Plane plane0 = new Plane(vector3D_Unit0, 2392.0253141, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      embeddingPlane0.getNormal();
}"
2248,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test51()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, (-1868.09176), (Precision.DoubleEquivalence) null);
      plane0.getNormal();
}"
2249,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test52()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, (-193.982), (Precision.DoubleEquivalence) null);
      plane0.getNormal();
}"
2250,"    public boolean contains(final Vector3D p) {
        return getPrecision().eqZero(offset(p));
    }","  public void test53()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      plane1.intersection(plane0);
      Plane plane2 = plane1.transform(quaternionRotation0);
      boolean boolean0 = plane1.contains(plane0);
}"
2251,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test54()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      plane1.intersection(plane0);
      Plane plane2 = plane1.transform(quaternionRotation0);
      boolean boolean0 = plane1.contains(plane0);
      plane2.contains((Vector3D) vector3D_Unit0);
}"
2252,"    public Plane translate(final Vector3D translation) {
        final Vector3D tOrigin = getOrigin().add(translation);

        return Planes.fromPointAndNormal(tOrigin, normal, getPrecision());
    }","  public void test55()  throws Throwable  {
      Plane plane0 = new Plane((Vector3D.Unit) null, 1.5707963267948966, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        plane0.translate((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2253,"    public Plane transform(final Transform<Vector3D> transform) {
        // create 3 representation points lying on the plane, transform them,
        // and use the transformed points to create a new plane

        final Vector3D u = normal.orthogonal();
        final Vector3D v = normal.cross(u);

        final Vector3D p1 = getOrigin();
        final Vector3D p2 = p1.add(u);
        final Vector3D p3 = p1.add(v);

        final Vector3D t1 = transform.apply(p1);
        final Vector3D t2 = transform.apply(p2);
        final Vector3D t3 = transform.apply(p3);

        return Planes.fromPoints(t1, t2, t3, getPrecision());
    }","  public void test56()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale((-1618.98114));
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 0.9999999999999998, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        plane0.transform(affineTransformMatrix3D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2254,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName())
            .append(""[origin= "")
            .append(getOrigin())
            .append("", normal= "")
            .append(normal)
            .append(']');

        return sb.toString();
    }","  public void test57()  throws Throwable  {
      Plane plane0 = new Plane((Vector3D.Unit) null, (-3686.1), (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        plane0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2255,"    public PlaneConvexSubset span() {
        return Planes.subsetFromConvexArea(getEmbedding(), ConvexArea.full());
    }","  public void test58()  throws Throwable  {
      Plane plane0 = new Plane((Vector3D.Unit) null, (-0.9999623328013688), (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        plane0.span();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
2256,"    public boolean similarOrientation(final Hyperplane<Vector3D> other) {
        return (((Plane) other).normal).dot(normal) > 0;
    }","  public void test59()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        plane0.similarOrientation((Hyperplane<Vector3D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
2257,"    public Plane rotate(final Vector3D center, final QuaternionRotation rotation) {
        final Vector3D delta = getOrigin().subtract(center);
        final Vector3D tOrigin = center.add(rotation.apply(delta));

        // we can directly apply the rotation to the normal since it will transform
        // it properly (there is no translation or scaling involved)
        final Vector3D.Unit tNormal = rotation.apply(normal).normalize();

        return Planes.fromPointAndNormal(tOrigin, tNormal, getPrecision());
    }","  public void test60()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, (-2769.5397987508372), (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        plane0.rotate(vector3D_Unit0, (QuaternionRotation) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
2258,"    public Plane reverse() {
        return new Plane(normal.negate(), -originOffset, getPrecision());
    }","  public void test61()  throws Throwable  {
      Plane plane0 = new Plane((Vector3D.Unit) null, (-3318.2470822397), (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        plane0.reverse();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
2259,"    public Vector3D project(final Vector3D point) {
        return getOrigin().add(point.reject(normal));
    }","  public void test62()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      plane1.transform(quaternionRotation0);
      // Undeclared exception!
      try { 
        plane1.project(line3D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Line direction cannot be zero
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Lines3D"", e);
      }
  }"
2260,"    public Vector3D project(final Vector3D point) {
        return getOrigin().add(point.reject(normal));
    }","  public void test63()  throws Throwable  {
      Plane plane0 = new Plane((Vector3D.Unit) null, 1303.842492026, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        plane0.project((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2261,"    public double offset(final Vector3D point) {
        return point.dot(normal) + originOffset;
    }","  public void test64()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        plane0.offset((Line3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
2262,"    public double offset(final Vector3D point) {
        return point.dot(normal) + originOffset;
    }","  public void test65()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        plane0.offset((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
2263,"    public double offset(final Vector3D point) {
        return point.dot(normal) + originOffset;
    }","  public void test66()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        plane0.offset(plane0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
2264,"    public boolean isParallel(final Line3D line) {
        final double dot = normal.dot(line.getDirection());

        return getPrecision().eqZero(dot);
    }","  public void test67()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, (-1608.76763), (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        plane0.isParallel((Line3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
2265,"    public Vector3D intersection(final Line3D line) {
        final Vector3D direction = line.getDirection();
        final double dot = normal.dot(direction);

        if (getPrecision().eqZero(dot)) {
            return null;
        }

        final Vector3D point = line.pointAt(0);
        final double k = -(originOffset + normal.dot(point)) / dot;

        return Vector3D.Sum.of(point)
                .addScaled(k, direction)
                .get();
    }","  public void test68()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, 3.141592653589793, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        plane0.intersection((Line3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
2266,"    public Vector3D intersection(final Line3D line) {
        final Vector3D direction = line.getDirection();
        final double dot = normal.dot(direction);

        if (getPrecision().eqZero(dot)) {
            return null;
        }

        final Vector3D point = line.pointAt(0);
        final double k = -(originOffset + normal.dot(point)) / dot;

        return Vector3D.Sum.of(point)
                .addScaled(k, direction)
                .get();
    }","  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        Plane.intersection((Plane) null, (Plane) null, (Plane) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
2267,"    public Vector3D intersection(final Line3D line) {
        final Vector3D direction = line.getDirection();
        final double dot = normal.dot(direction);

        if (getPrecision().eqZero(dot)) {
            return null;
        }

        final Vector3D point = line.pointAt(0);
        final double k = -(originOffset + normal.dot(point)) / dot;

        return Vector3D.Sum.of(point)
                .addScaled(k, direction)
                .get();
    }","  public void test70()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, (-193.982), (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        plane0.intersection(plane0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
2268,"    public Vector3D intersection(final Line3D line) {
        final Vector3D direction = line.getDirection();
        final double dot = normal.dot(direction);

        if (getPrecision().eqZero(dot)) {
            return null;
        }

        final Vector3D point = line.pointAt(0);
        final double k = -(originOffset + normal.dot(point)) / dot;

        return Vector3D.Sum.of(point)
                .addScaled(k, direction)
                .get();
    }","  public void test71()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, 1158.51268537929, precision_DoubleEquivalence0);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      // Undeclared exception!
      try { 
        embeddingPlane0.intersection((Plane) embeddingPlane0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
2269,"    public Vector3D getOrigin() {
        return normal.multiply(-originOffset);
    }","  public void test72()  throws Throwable  {
      Plane plane0 = new Plane((Vector3D.Unit) null, (-1081.282676655188), (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        plane0.getOrigin();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2270,"    public EmbeddingPlane getEmbedding() {
        final Vector3D.Unit u = normal.orthogonal();
        final Vector3D.Unit v = normal.cross(u).normalize();

        return new EmbeddingPlane(u, v, normal, originOffset, getPrecision());
    }","  public void test73()  throws Throwable  {
      Plane plane0 = new Plane((Vector3D.Unit) null, 3.141592653589793, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        plane0.getEmbedding();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
2271,"    public boolean eq(final Plane other, final Precision.DoubleEquivalence precision) {
        return getOrigin().eq(other.getOrigin(), precision) &&
                normal.eq(other.normal, precision);
    }","  public void test74()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, 2.409919865102884E-181, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        plane0.eq(plane0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2272,"    public boolean contains(final Vector3D p) {
        return getPrecision().eqZero(offset(p));
    }","  public void test75()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, (-1868.09176), (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        plane0.contains((Line3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
2273,"    public boolean contains(final Vector3D p) {
        return getPrecision().eqZero(offset(p));
    }","  public void test76()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 2804.3686008, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        plane0.contains((Vector3D) vector3D_Unit0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
2274,"    public boolean contains(final Vector3D p) {
        return getPrecision().eqZero(offset(p));
    }","  public void test77()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, (-1037.48063476), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      // Undeclared exception!
      try { 
        embeddingPlane0.contains(plane0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
2275,"    public Vector3D intersection(final Line3D line) {
        final Vector3D direction = line.getDirection();
        final double dot = normal.dot(direction);

        if (getPrecision().eqZero(dot)) {
            return null;
        }

        final Vector3D point = line.pointAt(0);
        final double k = -(originOffset + normal.dot(point)) / dot;

        return Vector3D.Sum.of(point)
                .addScaled(k, direction)
                .get();
    }","  public void test78()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      Vector3D vector3D0 = Plane.intersection(plane0, plane0, plane0);
}"
2276,"    public Vector3D intersection(final Line3D line) {
        final Vector3D direction = line.getDirection();
        final double dot = normal.dot(direction);

        if (getPrecision().eqZero(dot)) {
            return null;
        }

        final Vector3D point = line.pointAt(0);
        final double k = -(originOffset + normal.dot(point)) / dot;

        return Vector3D.Sum.of(point)
                .addScaled(k, direction)
                .get();
    }","  public void test79()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      Vector3D vector3D0 = Plane.intersection(plane0, plane0, plane0);
}"
2277,"    public boolean similarOrientation(final Hyperplane<Vector3D> other) {
        return (((Plane) other).normal).dot(normal) > 0;
    }","  public void test80()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      boolean boolean0 = plane0.similarOrientation(plane1);
}"
2278,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test81()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      boolean boolean0 = plane0.similarOrientation(plane1);
}"
2279,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test82()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Plane plane2 = plane1.reverse();
      boolean boolean0 = plane0.similarOrientation(plane2);
}"
2280,"    public boolean similarOrientation(final Hyperplane<Vector3D> other) {
        return (((Plane) other).normal).dot(normal) > 0;
    }","  public void test83()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Plane plane2 = plane1.reverse();
      boolean boolean0 = plane0.similarOrientation(plane2);
}"
2281,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test84()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, (-2068.333748260624), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      double double0 = embeddingPlane0.offset((Vector3D) vector3D_Unit0);
}"
2282,"    public double offset(final Vector3D point) {
        return point.dot(normal) + originOffset;
    }","  public void test85()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, (-2068.333748260624), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      double double0 = embeddingPlane0.offset((Vector3D) vector3D_Unit0);
}"
2283,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test86()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, precision_DoubleEquivalence0);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      embeddingPlane0.project((Vector3D) vector3D_Unit0);
}"
2284,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test87()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, precision_DoubleEquivalence0);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      embeddingPlane0.project((Vector3D) vector3D_Unit0);
}"
2285,"    public boolean isParallel(final Line3D line) {
        final double dot = normal.dot(line.getDirection());

        return getPrecision().eqZero(dot);
    }","  public void test88()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 2459.95273567874, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        plane0.isParallel(plane0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
2286,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test89()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, (-1868.09176), (Precision.DoubleEquivalence) null);
      double double0 = plane0.getOriginOffset();
}"
2287,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test90()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, 12.51452606972697, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(12.51452606972697, 12.51452606972697, 12.51452606972697, 12.51452606972697);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      plane1.intersection(plane0);
      Plane plane2 = plane1.transform(quaternionRotation0);
      Plane.intersection(plane0, plane1, plane2);
}"
2288,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (obj == null || obj.getClass() != this.getClass()) {
            return false;
        }

        final Plane other = (Plane) obj;

        return Objects.equals(this.normal, other.normal) &&
                Double.compare(this.originOffset, other.originOffset) == 0 &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test91()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, 3.141592653589793, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Vector3D vector3D0 = plane0.getOrigin();
      Plane plane2 = plane0.rotate(vector3D0, quaternionRotation0);
      boolean boolean0 = plane1.equals(plane2);
}"
2289,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (obj == null || obj.getClass() != this.getClass()) {
            return false;
        }

        final Plane other = (Plane) obj;

        return Objects.equals(this.normal, other.normal) &&
                Double.compare(this.originOffset, other.originOffset) == 0 &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test92()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, 3.141592653589793, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Vector3D vector3D0 = plane0.getOrigin();
      Plane plane2 = plane0.rotate(vector3D0, quaternionRotation0);
      boolean boolean0 = plane1.equals(plane2);
}"
2290,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test93()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, 3.141592653589793, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Vector3D vector3D0 = plane0.getOrigin();
      Plane plane2 = plane0.rotate(vector3D0, quaternionRotation0);
      boolean boolean0 = plane1.equals(plane2);
}"
2291,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (obj == null || obj.getClass() != this.getClass()) {
            return false;
        }

        final Plane other = (Plane) obj;

        return Objects.equals(this.normal, other.normal) &&
                Double.compare(this.originOffset, other.originOffset) == 0 &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test94()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, 3.141592653589793, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Plane plane2 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      boolean boolean0 = plane1.equals(plane2);
}"
2292,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (obj == null || obj.getClass() != this.getClass()) {
            return false;
        }

        final Plane other = (Plane) obj;

        return Objects.equals(this.normal, other.normal) &&
                Double.compare(this.originOffset, other.originOffset) == 0 &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test95()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, 3.141592653589793, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Plane plane2 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      boolean boolean0 = plane1.equals(plane2);
}"
2293,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test96()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, 3.141592653589793, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Plane plane2 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      boolean boolean0 = plane1.equals(plane2);
}"
2294,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test97()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      boolean boolean0 = plane0.equals(""Plane[origin= (0.0, 1024.24, 0.0), normal= (0.0, 1.0, 0.0)]"");
}"
2295,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (obj == null || obj.getClass() != this.getClass()) {
            return false;
        }

        final Plane other = (Plane) obj;

        return Objects.equals(this.normal, other.normal) &&
                Double.compare(this.originOffset, other.originOffset) == 0 &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test98()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      boolean boolean0 = plane0.equals(""Plane[origin= (0.0, 1024.24, 0.0), normal= (0.0, 1.0, 0.0)]"");
}"
2296,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test99()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, 3.141592653589793, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      boolean boolean0 = plane1.equals(plane0);
}"
2297,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (obj == null || obj.getClass() != this.getClass()) {
            return false;
        }

        final Plane other = (Plane) obj;

        return Objects.equals(this.normal, other.normal) &&
                Double.compare(this.originOffset, other.originOffset) == 0 &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test100()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, 3.141592653589793, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      boolean boolean0 = plane1.equals(plane0);
}"
2298,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test101()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 0.9999, (Precision.DoubleEquivalence) null);
      boolean boolean0 = plane0.equals(plane0);
}"
2299,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (obj == null || obj.getClass() != this.getClass()) {
            return false;
        }

        final Plane other = (Plane) obj;

        return Objects.equals(this.normal, other.normal) &&
                Double.compare(this.originOffset, other.originOffset) == 0 &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test102()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 0.9999, (Precision.DoubleEquivalence) null);
      boolean boolean0 = plane0.equals(plane0);
}"
2300,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (obj == null || obj.getClass() != this.getClass()) {
            return false;
        }

        final Plane other = (Plane) obj;

        return Objects.equals(this.normal, other.normal) &&
                Double.compare(this.originOffset, other.originOffset) == 0 &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test103()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, 3.141592653589793, precision_DoubleEquivalence0);
      boolean boolean0 = plane0.equals((Object) null);
}"
2301,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test104()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, 3.141592653589793, precision_DoubleEquivalence0);
      boolean boolean0 = plane0.equals((Object) null);
}"
2302,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test105()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Plane plane2 = plane1.reverse();
      Line3D line3D0 = plane2.intersection(plane0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = line3D0.getPrecision();
      plane0.eq(plane2, precision_DoubleEquivalence1);
}"
2303,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test106()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Plane plane2 = plane1.reverse();
      Line3D line3D0 = plane2.intersection(plane0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = line3D0.getPrecision();
      plane0.eq(plane2, precision_DoubleEquivalence1);
}"
2304,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test107()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1012.7241701952687), precision_DoubleEquivalence0);
      plane0.intersection(plane0);
}"
2305,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test108()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, 3.141592653589793, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      Plane plane2 = plane1.transform(quaternionRotation0);
}"
2306,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test109()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, 3.141592653589793, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      Plane plane2 = plane1.transform(quaternionRotation0);
      plane0.intersection(line3D0);
}"
2307,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test110()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, 3.141592653589793, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      Plane plane2 = plane1.transform(quaternionRotation0);
}"
2308,"    public boolean contains(final Vector3D p) {
        return getPrecision().eqZero(offset(p));
    }","  public void test111()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, 3.141592653589793, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      Plane plane2 = plane1.transform(quaternionRotation0);
      boolean boolean0 = plane1.contains(plane0);
}"
2309,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (obj == null || obj.getClass() != this.getClass()) {
            return false;
        }

        final Plane other = (Plane) obj;

        return Objects.equals(this.normal, other.normal) &&
                Double.compare(this.originOffset, other.originOffset) == 0 &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test112()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, 3.141592653589793, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      Plane plane2 = plane1.transform(quaternionRotation0);
      boolean boolean0 = plane1.contains(plane0);
      Vector3D vector3D0 = plane0.intersection(line3D0);
      Plane plane3 = plane0.rotate(vector3D0, quaternionRotation0);
      plane1.equals(plane3);
}"
2310,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test113()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, 12.51452606972697, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(12.51452606972697, 12.51452606972697, 12.51452606972697, 12.51452606972697);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Plane plane2 = plane1.reverse();
      plane2.intersection(plane0);
      Plane plane3 = plane2.transform(quaternionRotation0);
}"
2311,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test114()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, 12.51452606972697, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(12.51452606972697, 12.51452606972697, 12.51452606972697, 12.51452606972697);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Plane plane2 = plane1.reverse();
      plane2.intersection(plane0);
      Plane plane3 = plane2.transform(quaternionRotation0);
      plane1.contains(plane0);
}"
2312,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test115()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, 3.0126544945764846, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.0126544945764846, 3.0126544945764846, 3.0126544945764846, 3.0126544945764846);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      Plane plane2 = plane1.transform(quaternionRotation0);
      plane2.contains(line3D0);
}"
2313,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test116()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, 12.51452606972697, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(12.51452606972697, 12.51452606972697, 12.51452606972697, 12.51452606972697);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      Plane plane2 = plane1.transform(quaternionRotation0);
      plane2.contains(line3D0);
}"
2314,"    public boolean contains(final Vector3D p) {
        return getPrecision().eqZero(offset(p));
    }","  public void test117()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, 3.141592653589793, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      boolean boolean0 = plane1.contains(plane0);
}"
2315,"    public double offset(final Vector3D point) {
        return point.dot(normal) + originOffset;
    }","  public void test118()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, 3.141592653589793, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      boolean boolean0 = plane1.contains(plane0);
      double double0 = plane1.offset(plane0);
}"
2316,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test119()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, 3.141592653589793, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      boolean boolean0 = plane1.contains(plane0);
      double double0 = plane1.offset(plane0);
      plane1.contains(line3D0);
}"
2317,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test120()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1012.7241701952687), precision_DoubleEquivalence0);
      double double0 = plane0.offset(plane0);
}"
2318,"    public double offset(final Vector3D point) {
        return point.dot(normal) + originOffset;
    }","  public void test121()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1012.7241701952687), precision_DoubleEquivalence0);
      double double0 = plane0.offset(plane0);
}"
2319,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test122()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-0.9999585567629317), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of((-0.9999585567629317), (-0.9999585567629317), (-0.9999585567629317), (-0.9999585567629317));
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      double double0 = plane1.offset(line3D0);
}"
2320,"    public double offset(final Vector3D point) {
        return point.dot(normal) + originOffset;
    }","  public void test123()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-0.9999585567629317), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of((-0.9999585567629317), (-0.9999585567629317), (-0.9999585567629317), (-0.9999585567629317));
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      double double0 = plane1.offset(line3D0);
}"
2321,"    public Vector3D intersection(final Line3D line) {
        final Vector3D direction = line.getDirection();
        final double dot = normal.dot(direction);

        if (getPrecision().eqZero(dot)) {
            return null;
        }

        final Vector3D point = line.pointAt(0);
        final double k = -(originOffset + normal.dot(point)) / dot;

        return Vector3D.Sum.of(point)
                .addScaled(k, direction)
                .get();
    }","  public void test124()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
}"
2322,"    public double offset(final Vector3D point) {
        return point.dot(normal) + originOffset;
    }","  public void test125()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      Plane plane2 = plane0.transform(quaternionRotation0);
      double double0 = plane2.offset(line3D0);
}"
2323,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test126()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(3.141592653589793, (-1024.24), 3.141592653589793, 3.141592653589793);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      Line3D line3D0 = plane1.intersection(plane0);
      plane1.isParallel(line3D0);
}"
2324,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test127()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      plane0.span();
}"
2325,"    public double offset(final Vector3D point) {
        return point.dot(normal) + originOffset;
    }","  public void test128()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      double double0 = plane0.offset(plane0);
}"
2326,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test129()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      double double0 = plane0.offset(plane0);
}"
2327,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName())
            .append(""[origin= "")
            .append(getOrigin())
            .append("", normal= "")
            .append(normal)
            .append(']');

        return sb.toString();
    }","  public void test130()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      String string0 = plane0.toString();
}"
2328,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test131()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      Plane plane1 = plane0.reverse();
      double double0 = plane1.getOriginOffset();
}"
2329,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test132()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      Plane plane1 = plane0.reverse();
      double double0 = plane1.getOriginOffset();
}"
2330,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test133()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, (-1024.24), precision_DoubleEquivalence0);
      plane0.contains((Vector3D) vector3D_Unit0);
}"
2331,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test134()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, 3.141592653589793, precision_DoubleEquivalence0);
      plane0.hashCode();
}"
2332,"    public Plane transform(final Transform<Vector3D> transform) {
        // create 3 representation points lying on the plane, transform them,
        // and use the transformed points to create a new plane

        final Vector3D u = normal.orthogonal();
        final Vector3D v = normal.cross(u);

        final Vector3D p1 = getOrigin();
        final Vector3D p2 = p1.add(u);
        final Vector3D p3 = p1.add(v);

        final Vector3D t1 = transform.apply(p1);
        final Vector3D t2 = transform.apply(p2);
        final Vector3D t3 = transform.apply(p3);

        return Planes.fromPoints(t1, t2, t3, getPrecision());
    }","  public void test135()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, precision_DoubleEquivalence0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale((Vector3D) vector3D_Unit0);
      // Undeclared exception!
      try { 
        plane0.transform(affineTransformMatrix3D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
2333,"    public LinecastPoint3D linecastFirst(final LineConvexSubset3D subset) {
        try (Stream<LinecastPoint3D> stream = getIntersectionStream(subset)) {
            return stream.min(LinecastPoint3D.ABSCISSA_ORDER)
                    .orElse(null);
        }
    }","  public void test0()  throws Throwable  {
      BoundarySourceLinecaster3D boundarySourceLinecaster3D0 = new BoundarySourceLinecaster3D((BoundarySource3D) null);
      // Undeclared exception!
      try { 
        boundarySourceLinecaster3D0.linecastFirst((LineConvexSubset3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.BoundarySourceLinecaster3D"", e);
      }
  }"
2334,"    public List<LinecastPoint3D> linecast(final LineConvexSubset3D subset) {
        try (Stream<LinecastPoint3D> stream = getIntersectionStream(subset)) {

            final List<LinecastPoint3D> results = stream.collect(Collectors.toCollection(ArrayList::new));
            LinecastPoint3D.sortAndFilter(results);

            return results;
        }
    }","  public void test1()  throws Throwable  {
      LinkedList<PlaneConvexSubset> linkedList0 = new LinkedList<PlaneConvexSubset>();
      BoundaryList3D boundaryList3D0 = new BoundaryList3D(linkedList0);
      RegionBSPTree3D regionBSPTree3D0 = boundaryList3D0.toTree();
      BoundarySourceLinecaster3D boundarySourceLinecaster3D0 = new BoundarySourceLinecaster3D(regionBSPTree3D0);
      List<LinecastPoint3D> list0 = boundarySourceLinecaster3D0.linecast((LineConvexSubset3D) null);
}"
2335,"    public LinecastPoint3D linecastFirst(final LineConvexSubset3D subset) {
        try (Stream<LinecastPoint3D> stream = getIntersectionStream(subset)) {
            return stream.min(LinecastPoint3D.ABSCISSA_ORDER)
                    .orElse(null);
        }
    }","  public void test2()  throws Throwable  {
      LinkedList<PlaneConvexSubset> linkedList0 = new LinkedList<PlaneConvexSubset>();
      BoundaryList3D boundaryList3D0 = new BoundaryList3D(linkedList0);
      linkedList0.add((PlaneConvexSubset) null);
      BoundarySourceLinecaster3D boundarySourceLinecaster3D0 = new BoundarySourceLinecaster3D(boundaryList3D0);
      // Undeclared exception!
      try { 
        boundarySourceLinecaster3D0.linecastFirst((LineConvexSubset3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.BoundarySourceLinecaster3D"", e);
      }
  }"
2336,"    public LinecastPoint3D linecastFirst(final LineConvexSubset3D subset) {
        try (Stream<LinecastPoint3D> stream = getIntersectionStream(subset)) {
            return stream.min(LinecastPoint3D.ABSCISSA_ORDER)
                    .orElse(null);
        }
    }","  public void test3()  throws Throwable  {
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.empty();
      BoundarySourceLinecaster3D boundarySourceLinecaster3D0 = new BoundarySourceLinecaster3D(regionBSPTree3D0);
      LinecastPoint3D linecastPoint3D0 = boundarySourceLinecaster3D0.linecastFirst((LineConvexSubset3D) null);
}"
2337,"    public List<LinecastPoint3D> linecast(final LineConvexSubset3D subset) {
        try (Stream<LinecastPoint3D> stream = getIntersectionStream(subset)) {

            final List<LinecastPoint3D> results = stream.collect(Collectors.toCollection(ArrayList::new));
            LinecastPoint3D.sortAndFilter(results);

            return results;
        }
    }","  public void test4()  throws Throwable  {
      LinkedList<PlaneConvexSubset> linkedList0 = new LinkedList<PlaneConvexSubset>();
      BoundaryList3D boundaryList3D0 = new BoundaryList3D(linkedList0);
      linkedList0.add((PlaneConvexSubset) null);
      BoundarySourceLinecaster3D boundarySourceLinecaster3D0 = new BoundarySourceLinecaster3D(boundaryList3D0);
      // Undeclared exception!
      try { 
        boundarySourceLinecaster3D0.linecast((LineConvexSubset3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.BoundarySourceLinecaster3D"", e);
      }
  }"
2338,"    public List<LinecastPoint3D> linecast(final LineConvexSubset3D subset) {
        try (Stream<LinecastPoint3D> stream = getIntersectionStream(subset)) {

            final List<LinecastPoint3D> results = stream.collect(Collectors.toCollection(ArrayList::new));
            LinecastPoint3D.sortAndFilter(results);

            return results;
        }
    }","  public void test5()  throws Throwable  {
      BoundarySourceLinecaster3D boundarySourceLinecaster3D0 = new BoundarySourceLinecaster3D((BoundarySource3D) null);
      // Undeclared exception!
      try { 
        boundarySourceLinecaster3D0.linecast((LineConvexSubset3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.BoundarySourceLinecaster3D"", e);
      }
  }"
2339,"    public double getRadius() {
        return radius;
    }","  public void test0()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian((Vector3D) vector3D_Unit0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2340,"    public double getAzimuth() {
        return azimuth;
    }","  public void test1()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian((Vector3D) vector3D_Unit0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2341,"    public double getAzimuth() {
        return azimuth;
    }","  public void test2()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian((Vector3D) vector3D_Unit0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2342,"    public double getPolar() {
        return polar;
    }","  public void test3()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian((Vector3D) vector3D_Unit0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2343,"    public double getRadius() {
        return radius;
    }","  public void test4()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian((Vector3D) vector3D_Unit0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2344,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof SphericalCoordinates) {
            final SphericalCoordinates rhs = (SphericalCoordinates) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(radius, rhs.radius) == 0 &&
                    Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(polar, rhs.polar) == 0;
        }
        return false;
    }","  public void test5()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian((Vector3D) vector3D_Unit0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2345,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof SphericalCoordinates) {
            final SphericalCoordinates rhs = (SphericalCoordinates) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(radius, rhs.radius) == 0 &&
                    Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(polar, rhs.polar) == 0;
        }
        return false;
    }","  public void test6()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian((Vector3D) vector3D_Unit0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2346,"    public double getRadius() {
        return radius;
    }","  public void test7()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(499.781, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2347,"    public double getPolar() {
        return polar;
    }","  public void test8()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(499.781, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2348,"    public double getRadius() {
        return radius;
    }","  public void test9()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(499.781, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2349,"    public double getAzimuth() {
        return azimuth;
    }","  public void test10()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(499.781, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2350,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof SphericalCoordinates) {
            final SphericalCoordinates rhs = (SphericalCoordinates) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(radius, rhs.radius) == 0 &&
                    Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(polar, rhs.polar) == 0;
        }
        return false;
    }","  public void test11()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(499.781, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2351,"    public double getPolar() {
        return polar;
    }","  public void test12()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(499.781, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2352,"    public double getAzimuth() {
        return azimuth;
    }","  public void test13()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(499.781, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2353,"    public double getRadius() {
        return radius;
    }","  public void test14()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(527.0, 3.141592653589793, 3.141592653589793);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(3.141592653589793, 3.141592653589793, 3.141592653589793);
      boolean boolean0 = sphericalCoordinates1.equals(sphericalCoordinates0);
}"
2354,"    public double getAzimuth() {
        return azimuth;
    }","  public void test15()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(527.0, 3.141592653589793, 3.141592653589793);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(3.141592653589793, 3.141592653589793, 3.141592653589793);
      boolean boolean0 = sphericalCoordinates1.equals(sphericalCoordinates0);
}"
2355,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof SphericalCoordinates) {
            final SphericalCoordinates rhs = (SphericalCoordinates) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(radius, rhs.radius) == 0 &&
                    Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(polar, rhs.polar) == 0;
        }
        return false;
    }","  public void test16()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(527.0, 3.141592653589793, 3.141592653589793);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(3.141592653589793, 3.141592653589793, 3.141592653589793);
      boolean boolean0 = sphericalCoordinates1.equals(sphericalCoordinates0);
}"
2356,"    public double getPolar() {
        return polar;
    }","  public void test17()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(527.0, 3.141592653589793, 3.141592653589793);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(3.141592653589793, 3.141592653589793, 3.141592653589793);
      boolean boolean0 = sphericalCoordinates1.equals(sphericalCoordinates0);
}"
2357,"    public double getRadius() {
        return radius;
    }","  public void test18()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      sphericalCoordinates0.hashCode();
}"
2358,"    public boolean isNaN() {
        return Double.isNaN(radius) || Double.isNaN(azimuth) || Double.isNaN(polar);
    }","  public void test19()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      sphericalCoordinates0.hashCode();
}"
2359,"    public double getAzimuth() {
        return azimuth;
    }","  public void test20()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      sphericalCoordinates0.hashCode();
}"
2360,"    public double getPolar() {
        return polar;
    }","  public void test21()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      sphericalCoordinates0.hashCode();
}"
2361,"    public double getAzimuth() {
        return azimuth;
    }","  public void test22()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(1342.429689523293, Double.POSITIVE_INFINITY, 1.4916681462400413E-154);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
}"
2362,"    public Vector3D toVector() {
        return toCartesian(radius, azimuth, polar);
    }","  public void test23()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(1342.429689523293, Double.POSITIVE_INFINITY, 1.4916681462400413E-154);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
}"
2363,"    public Vector3D toVector() {
        return toCartesian(radius, azimuth, polar);
    }","  public void test24()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(1342.429689523293, Double.POSITIVE_INFINITY, 1.4916681462400413E-154);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
}"
2364,"    public Vector3D toVector() {
        return toCartesian(radius, azimuth, polar);
    }","  public void test25()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(1342.429689523293, Double.POSITIVE_INFINITY, 1.4916681462400413E-154);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
}"
2365,"    public double getPolar() {
        return polar;
    }","  public void test26()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(0.0, 1.0, 1.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
}"
2366,"    public Vector3D toVector() {
        return toCartesian(radius, azimuth, polar);
    }","  public void test27()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(0.0, 1.0, 1.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
}"
2367,"    public double getAzimuth() {
        return azimuth;
    }","  public void test28()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(0.0, 1.0, 1.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
}"
2368,"    public Vector3D toVector() {
        return toCartesian(radius, azimuth, polar);
    }","  public void test29()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(0.0, 1.0, 1.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
}"
2369,"    public Vector3D toVector() {
        return toCartesian(radius, azimuth, polar);
    }","  public void test30()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(0.0, 1.0, 1.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
}"
2370,"    public Vector3D toVector() {
        return toCartesian(radius, azimuth, polar);
    }","  public void test31()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 3.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
}"
2371,"    public Vector3D toVector() {
        return toCartesian(radius, azimuth, polar);
    }","  public void test32()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 3.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
}"
2372,"    public Vector3D toVector() {
        return toCartesian(radius, azimuth, polar);
    }","  public void test33()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 3.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
}"
2373,"    public Vector3D toVector() {
        return toCartesian(radius, azimuth, polar);
    }","  public void test34()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 0.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
}"
2374,"    public Vector3D toVector() {
        return toCartesian(radius, azimuth, polar);
    }","  public void test35()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 0.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
}"
2375,"    public Vector3D toVector() {
        return toCartesian(radius, azimuth, polar);
    }","  public void test36()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 0.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
}"
2376,"    public Vector3D toVector() {
        return toCartesian(radius, azimuth, polar);
    }","  public void test37()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian((-3.141592653589793), (-5386.954909765198), 0.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
}"
2377,"    public Vector3D toVector() {
        return toCartesian(radius, azimuth, polar);
    }","  public void test38()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian((-3.141592653589793), (-5386.954909765198), 0.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
}"
2378,"    public Vector3D toVector() {
        return toCartesian(radius, azimuth, polar);
    }","  public void test39()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian((-3.141592653589793), (-5386.954909765198), 0.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
}"
2379,"    public static Vector3D toCartesian(final double radius, final double azimuth, final double polar) {
        final double xyLength = radius * Math.sin(polar);

        final double x = xyLength * Math.cos(azimuth);
        final double y = xyLength * Math.sin(azimuth);
        final double z = radius * Math.cos(polar);

        return Vector3D.of(x, y, z);
    }","  public void test40()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(0.0, Double.NaN, 0.0);
}"
2380,"    public static Vector3D toCartesian(final double radius, final double azimuth, final double polar) {
        final double xyLength = radius * Math.sin(polar);

        final double x = xyLength * Math.cos(azimuth);
        final double y = xyLength * Math.sin(azimuth);
        final double z = radius * Math.cos(polar);

        return Vector3D.of(x, y, z);
    }","  public void test41()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(0.0, Double.NaN, 0.0);
}"
2381,"    public static Vector3D toCartesian(final double radius, final double azimuth, final double polar) {
        final double xyLength = radius * Math.sin(polar);

        final double x = xyLength * Math.cos(azimuth);
        final double y = xyLength * Math.sin(azimuth);
        final double z = radius * Math.cos(polar);

        return Vector3D.of(x, y, z);
    }","  public void test42()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(0.0, Double.NaN, 0.0);
}"
2382,"    public static Vector3D toCartesian(final double radius, final double azimuth, final double polar) {
        final double xyLength = radius * Math.sin(polar);

        final double x = xyLength * Math.cos(azimuth);
        final double y = xyLength * Math.sin(azimuth);
        final double z = radius * Math.cos(polar);

        return Vector3D.of(x, y, z);
    }","  public void test43()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(Double.POSITIVE_INFINITY, 637.6303654150395, (-1.0));
}"
2383,"    public static Vector3D toCartesian(final double radius, final double azimuth, final double polar) {
        final double xyLength = radius * Math.sin(polar);

        final double x = xyLength * Math.cos(azimuth);
        final double y = xyLength * Math.sin(azimuth);
        final double z = radius * Math.cos(polar);

        return Vector3D.of(x, y, z);
    }","  public void test44()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(Double.POSITIVE_INFINITY, 637.6303654150395, (-1.0));
}"
2384,"    public static Vector3D toCartesian(final double radius, final double azimuth, final double polar) {
        final double xyLength = radius * Math.sin(polar);

        final double x = xyLength * Math.cos(azimuth);
        final double y = xyLength * Math.sin(azimuth);
        final double z = radius * Math.cos(polar);

        return Vector3D.of(x, y, z);
    }","  public void test45()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(Double.POSITIVE_INFINITY, 637.6303654150395, (-1.0));
}"
2385,"    public static Vector3D toCartesian(final double radius, final double azimuth, final double polar) {
        final double xyLength = radius * Math.sin(polar);

        final double x = xyLength * Math.cos(azimuth);
        final double y = xyLength * Math.sin(azimuth);
        final double z = radius * Math.cos(polar);

        return Vector3D.of(x, y, z);
    }","  public void test46()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(0.0, 3.0, 0.0);
}"
2386,"    public static Vector3D toCartesian(final double radius, final double azimuth, final double polar) {
        final double xyLength = radius * Math.sin(polar);

        final double x = xyLength * Math.cos(azimuth);
        final double y = xyLength * Math.sin(azimuth);
        final double z = radius * Math.cos(polar);

        return Vector3D.of(x, y, z);
    }","  public void test47()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(0.0, 3.0, 0.0);
}"
2387,"    public static Vector3D toCartesian(final double radius, final double azimuth, final double polar) {
        final double xyLength = radius * Math.sin(polar);

        final double x = xyLength * Math.cos(azimuth);
        final double y = xyLength * Math.sin(azimuth);
        final double z = radius * Math.cos(polar);

        return Vector3D.of(x, y, z);
    }","  public void test48()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(0.0, 3.0, 0.0);
}"
2388,"    public static Vector3D toCartesian(final double radius, final double azimuth, final double polar) {
        final double xyLength = radius * Math.sin(polar);

        final double x = xyLength * Math.cos(azimuth);
        final double y = xyLength * Math.sin(azimuth);
        final double z = radius * Math.cos(polar);

        return Vector3D.of(x, y, z);
    }","  public void test49()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(6.696928794914171E299, 4645.812826677649, 3.141592653589793);
}"
2389,"    public static Vector3D toCartesian(final double radius, final double azimuth, final double polar) {
        final double xyLength = radius * Math.sin(polar);

        final double x = xyLength * Math.cos(azimuth);
        final double y = xyLength * Math.sin(azimuth);
        final double z = radius * Math.cos(polar);

        return Vector3D.of(x, y, z);
    }","  public void test50()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(6.696928794914171E299, 4645.812826677649, 3.141592653589793);
}"
2390,"    public static Vector3D toCartesian(final double radius, final double azimuth, final double polar) {
        final double xyLength = radius * Math.sin(polar);

        final double x = xyLength * Math.cos(azimuth);
        final double y = xyLength * Math.sin(azimuth);
        final double z = radius * Math.cos(polar);

        return Vector3D.of(x, y, z);
    }","  public void test51()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(6.696928794914171E299, 4645.812826677649, 3.141592653589793);
}"
2391,"    public double getPolar() {
        return polar;
    }","  public void test52()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse(""(NaN, NaN, 0.0)"");
}"
2392,"    public double getAzimuth() {
        return azimuth;
    }","  public void test53()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse(""(NaN, NaN, 0.0)"");
}"
2393,"    public double getRadius() {
        return radius;
    }","  public void test54()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse(""(NaN, NaN, 0.0)"");
}"
2394,"    public double getAzimuth() {
        return azimuth;
    }","  public void test55()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse(""(0.0, 0.0, 0.0)"");
}"
2395,"    public double getRadius() {
        return radius;
    }","  public void test56()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse(""(0.0, 0.0, 0.0)"");
}"
2396,"    public double getPolar() {
        return polar;
    }","  public void test57()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse(""(4.682878303135726, 0.7853981633974483, 1.5707963267948966)"");
}"
2397,"    public double getRadius() {
        return radius;
    }","  public void test58()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse(""(4.682878303135726, 0.7853981633974483, 1.5707963267948966)"");
}"
2398,"    public double getAzimuth() {
        return azimuth;
    }","  public void test59()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse(""(4.682878303135726, 0.7853981633974483, 1.5707963267948966)"");
}"
2399,"    public double getAzimuth() {
        return azimuth;
    }","  public void test60()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse(""(Infinity, -Infinity, -Infinity)"");
}"
2400,"    public double getRadius() {
        return radius;
    }","  public void test61()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse(""(Infinity, -Infinity, -Infinity)"");
}"
2401,"    public double getPolar() {
        return polar;
    }","  public void test62()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse(""(Infinity, -Infinity, -Infinity)"");
}"
2402,"    public static double normalizePolar(final double polar) {
        // normalize the polar angle; this is the angle between the polar vector and the point ray
        // so it is unsigned (unlike the azimuth) and should be in the range [0, pi]
        if (Double.isFinite(polar)) {
            return Math.abs(Angle.Rad.WITHIN_MINUS_PI_AND_PI.applyAsDouble(polar));
        }

        return polar;
    }","  public void test63()  throws Throwable  {
      double double0 = SphericalCoordinates.normalizePolar(0.0);
}"
2403,"    public static double normalizeAzimuth(final double azimuth) {
        return PolarCoordinates.normalizeAzimuth(azimuth);
    }","  public void test64()  throws Throwable  {
      double double0 = SphericalCoordinates.normalizeAzimuth(0.0);
}"
2404,"    public static double normalizeAzimuth(final double azimuth) {
        return PolarCoordinates.normalizeAzimuth(azimuth);
    }","  public void test65()  throws Throwable  {
      double double0 = SphericalCoordinates.normalizeAzimuth(Double.NEGATIVE_INFINITY);
}"
2405,"    public double getPolar() {
        return polar;
    }","  public void test66()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(527.0, 3.141592653589793, 3.141592653589793);
      double double0 = sphericalCoordinates0.getRadius();
}"
2406,"    public double getAzimuth() {
        return azimuth;
    }","  public void test67()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(527.0, 3.141592653589793, 3.141592653589793);
      double double0 = sphericalCoordinates0.getRadius();
}"
2407,"    public double getRadius() {
        return radius;
    }","  public void test68()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(527.0, 3.141592653589793, 3.141592653589793);
      double double0 = sphericalCoordinates0.getRadius();
}"
2408,"    public double getAzimuth() {
        return azimuth;
    }","  public void test69()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 0.0);
      double double0 = sphericalCoordinates0.getPolar();
}"
2409,"    public double getRadius() {
        return radius;
    }","  public void test70()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 0.0);
      double double0 = sphericalCoordinates0.getPolar();
}"
2410,"    public double getPolar() {
        return polar;
    }","  public void test71()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 0.0);
      double double0 = sphericalCoordinates0.getPolar();
}"
2411,"    public double getPolar() {
        return polar;
    }","  public void test72()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-1774.886281501992), 3.141592653589793, Double.NEGATIVE_INFINITY);
      double double0 = sphericalCoordinates0.getPolar();
}"
2412,"    public double getRadius() {
        return radius;
    }","  public void test73()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-1774.886281501992), 3.141592653589793, Double.NEGATIVE_INFINITY);
      double double0 = sphericalCoordinates0.getPolar();
}"
2413,"    public double getAzimuth() {
        return azimuth;
    }","  public void test74()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-1774.886281501992), 3.141592653589793, Double.NEGATIVE_INFINITY);
      double double0 = sphericalCoordinates0.getPolar();
}"
2414,"    public double getPolar() {
        return polar;
    }","  public void test75()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      double double0 = sphericalCoordinates0.getAzimuth();
}"
2415,"    public double getRadius() {
        return radius;
    }","  public void test76()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      double double0 = sphericalCoordinates0.getAzimuth();
}"
2416,"    public double getAzimuth() {
        return azimuth;
    }","  public void test77()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      double double0 = sphericalCoordinates0.getAzimuth();
}"
2417,"    public double getRadius() {
        return radius;
    }","  public void test78()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 3.141592653589793);
      double double0 = sphericalCoordinates0.getAzimuth();
}"
2418,"    public double getPolar() {
        return polar;
    }","  public void test79()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 3.141592653589793);
      double double0 = sphericalCoordinates0.getAzimuth();
}"
2419,"    public double getAzimuth() {
        return azimuth;
    }","  public void test80()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 3.141592653589793);
      double double0 = sphericalCoordinates0.getAzimuth();
}"
2420,"    public double getPolar() {
        return polar;
    }","  public void test81()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1731.0);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (-304.63048471266);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
}"
2421,"    public double getRadius() {
        return radius;
    }","  public void test82()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1731.0);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (-304.63048471266);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
}"
2422,"    public double getAzimuth() {
        return azimuth;
    }","  public void test83()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1731.0);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (-304.63048471266);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
}"
2423,"    public double getAzimuth() {
        return azimuth;
    }","  public void test84()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      double double0 = sphericalCoordinates0.getRadius();
}"
2424,"    public double getRadius() {
        return radius;
    }","  public void test85()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      double double0 = sphericalCoordinates0.getRadius();
}"
2425,"    public double getPolar() {
        return polar;
    }","  public void test86()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      double double0 = sphericalCoordinates0.getRadius();
}"
2426,"    public double getPolar() {
        return polar;
    }","  public void test87()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(0.0, Double.NaN, 659.0);
}"
2427,"    public double getAzimuth() {
        return azimuth;
    }","  public void test88()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(0.0, Double.NaN, 659.0);
}"
2428,"    public double getRadius() {
        return radius;
    }","  public void test89()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(0.0, Double.NaN, 659.0);
}"
2429,"    public double getPolar() {
        return polar;
    }","  public void test90()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(527.0, 3.141592653589793, 3.141592653589793);
      double double0 = sphericalCoordinates0.getPolar();
}"
2430,"    public double getAzimuth() {
        return azimuth;
    }","  public void test91()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(527.0, 3.141592653589793, 3.141592653589793);
      double double0 = sphericalCoordinates0.getPolar();
}"
2431,"    public double getRadius() {
        return radius;
    }","  public void test92()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(527.0, 3.141592653589793, 3.141592653589793);
      double double0 = sphericalCoordinates0.getPolar();
}"
2432,"    public static SphericalCoordinates parse(final String input) {
        return SimpleTupleFormat.getDefault().parse(input, SphericalCoordinates::new);
    }","  public void test93()  throws Throwable  {
      // Undeclared exception!
      try { 
        SphericalCoordinates.parse("""");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \""\"" at index 0: expected \""(\"" but found \""\""
         //
         verifyException(""org.apache.commons.geometry.core.internal.SimpleTupleFormat"", e);
      }
  }"
2433,"    public static SphericalCoordinates parse(final String input) {
        return SimpleTupleFormat.getDefault().parse(input, SphericalCoordinates::new);
    }","  public void test94()  throws Throwable  {
      // Undeclared exception!
      try { 
        SphericalCoordinates.parse((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.internal.SimpleTupleFormat"", e);
      }
  }"
2434,"    public static SphericalCoordinates fromCartesian(final double x, final double y, final double z) {
        final double radius = Vectors.norm(x, y, z);
        final double azimuth = Math.atan2(y, x);

        // default the polar angle to 0 when the radius is 0
        final double polar = (radius > 0.0) ? Math.acos(z / radius) : 0.0;

        return new SphericalCoordinates(radius, azimuth, polar);
    }","  public void test95()  throws Throwable  {
      // Undeclared exception!
      try { 
        SphericalCoordinates.fromCartesian((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.SphericalCoordinates"", e);
      }
  }"
2435,"    public static double normalizePolar(final double polar) {
        // normalize the polar angle; this is the angle between the polar vector and the point ray
        // so it is unsigned (unlike the azimuth) and should be in the range [0, pi]
        if (Double.isFinite(polar)) {
            return Math.abs(Angle.Rad.WITHIN_MINUS_PI_AND_PI.applyAsDouble(polar));
        }

        return polar;
    }","  public void test96()  throws Throwable  {
      double double0 = SphericalCoordinates.normalizePolar(527.0);
}"
2436,"    public static double normalizePolar(final double polar) {
        // normalize the polar angle; this is the angle between the polar vector and the point ray
        // so it is unsigned (unlike the azimuth) and should be in the range [0, pi]
        if (Double.isFinite(polar)) {
            return Math.abs(Angle.Rad.WITHIN_MINUS_PI_AND_PI.applyAsDouble(polar));
        }

        return polar;
    }","  public void test97()  throws Throwable  {
      double double0 = SphericalCoordinates.normalizePolar(Double.NEGATIVE_INFINITY);
}"
2437,"    public double getRadius() {
        return radius;
    }","  public void test98()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.isNaN();
}"
2438,"    public double getAzimuth() {
        return azimuth;
    }","  public void test99()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.isNaN();
}"
2439,"    public boolean isNaN() {
        return Double.isNaN(radius) || Double.isNaN(azimuth) || Double.isNaN(polar);
    }","  public void test100()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.isNaN();
}"
2440,"    public double getRadius() {
        return radius;
    }","  public void test101()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3055.81696143, Double.NaN, 1.9005111028024437);
      boolean boolean0 = sphericalCoordinates0.isNaN();
}"
2441,"    public double getPolar() {
        return polar;
    }","  public void test102()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3055.81696143, Double.NaN, 1.9005111028024437);
      boolean boolean0 = sphericalCoordinates0.isNaN();
}"
2442,"    public boolean isNaN() {
        return Double.isNaN(radius) || Double.isNaN(azimuth) || Double.isNaN(polar);
    }","  public void test103()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3055.81696143, Double.NaN, 1.9005111028024437);
      boolean boolean0 = sphericalCoordinates0.isNaN();
}"
2443,"    public boolean isNaN() {
        return Double.isNaN(radius) || Double.isNaN(azimuth) || Double.isNaN(polar);
    }","  public void test104()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, 958.81, 1.0);
      boolean boolean0 = sphericalCoordinates0.isNaN();
}"
2444,"    public double getPolar() {
        return polar;
    }","  public void test105()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, 958.81, 1.0);
      boolean boolean0 = sphericalCoordinates0.isNaN();
}"
2445,"    public double getAzimuth() {
        return azimuth;
    }","  public void test106()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, 958.81, 1.0);
      boolean boolean0 = sphericalCoordinates0.isNaN();
}"
2446,"    public double getAzimuth() {
        return azimuth;
    }","  public void test107()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.isNaN();
}"
2447,"    public double getPolar() {
        return polar;
    }","  public void test108()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.isNaN();
}"
2448,"    public double getRadius() {
        return radius;
    }","  public void test109()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.isNaN();
}"
2449,"    public boolean isNaN() {
        return Double.isNaN(radius) || Double.isNaN(azimuth) || Double.isNaN(polar);
    }","  public void test110()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.isNaN();
}"
2450,"    public static double normalizeAzimuth(final double azimuth) {
        return PolarCoordinates.normalizeAzimuth(azimuth);
    }","  public void test111()  throws Throwable  {
      double double0 = SphericalCoordinates.normalizeAzimuth((-65.0));
}"
2451,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof SphericalCoordinates) {
            final SphericalCoordinates rhs = (SphericalCoordinates) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(radius, rhs.radius) == 0 &&
                    Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(polar, rhs.polar) == 0;
        }
        return false;
    }","  public void test112()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2452,"    public double getAzimuth() {
        return azimuth;
    }","  public void test113()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2453,"    public double getPolar() {
        return polar;
    }","  public void test114()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2454,"    public double getRadius() {
        return radius;
    }","  public void test115()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2455,"    public boolean isNaN() {
        return Double.isNaN(radius) || Double.isNaN(azimuth) || Double.isNaN(polar);
    }","  public void test116()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2456,"    public double getAzimuth() {
        return azimuth;
    }","  public void test117()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2457,"    public double getPolar() {
        return polar;
    }","  public void test118()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2458,"    public double getAzimuth() {
        return azimuth;
    }","  public void test119()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2459,"    public double getPolar() {
        return polar;
    }","  public void test120()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2460,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof SphericalCoordinates) {
            final SphericalCoordinates rhs = (SphericalCoordinates) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(radius, rhs.radius) == 0 &&
                    Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(polar, rhs.polar) == 0;
        }
        return false;
    }","  public void test121()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2461,"    public double getRadius() {
        return radius;
    }","  public void test122()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2462,"    public double getRadius() {
        return radius;
    }","  public void test123()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2463,"    public double getPolar() {
        return polar;
    }","  public void test124()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(0.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2464,"    public double getAzimuth() {
        return azimuth;
    }","  public void test125()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(0.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2465,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof SphericalCoordinates) {
            final SphericalCoordinates rhs = (SphericalCoordinates) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(radius, rhs.radius) == 0 &&
                    Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(polar, rhs.polar) == 0;
        }
        return false;
    }","  public void test126()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(0.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2466,"    public double getPolar() {
        return polar;
    }","  public void test127()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(0.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2467,"    public double getRadius() {
        return radius;
    }","  public void test128()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(vector3D1);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2468,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof SphericalCoordinates) {
            final SphericalCoordinates rhs = (SphericalCoordinates) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(radius, rhs.radius) == 0 &&
                    Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(polar, rhs.polar) == 0;
        }
        return false;
    }","  public void test129()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(vector3D1);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2469,"    public double getAzimuth() {
        return azimuth;
    }","  public void test130()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(vector3D1);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2470,"    public double getAzimuth() {
        return azimuth;
    }","  public void test131()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(vector3D1);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2471,"    public double getPolar() {
        return polar;
    }","  public void test132()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(vector3D1);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2472,"    public boolean isInfinite() {
        return !isNaN() && (Double.isInfinite(radius) || Double.isInfinite(azimuth) || Double.isInfinite(polar));
    }","  public void test133()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(vector3D1);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2473,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof SphericalCoordinates) {
            final SphericalCoordinates rhs = (SphericalCoordinates) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(radius, rhs.radius) == 0 &&
                    Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(polar, rhs.polar) == 0;
        }
        return false;
    }","  public void test134()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(vector3D1);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2474,"    public double getRadius() {
        return radius;
    }","  public void test135()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, (-1885.44957076), 1.4916681462400413E-154);
      Object object0 = new Object();
      boolean boolean0 = sphericalCoordinates0.equals(object0);
}"
2475,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof SphericalCoordinates) {
            final SphericalCoordinates rhs = (SphericalCoordinates) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(radius, rhs.radius) == 0 &&
                    Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(polar, rhs.polar) == 0;
        }
        return false;
    }","  public void test136()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, (-1885.44957076), 1.4916681462400413E-154);
      Object object0 = new Object();
      boolean boolean0 = sphericalCoordinates0.equals(object0);
}"
2476,"    public double getAzimuth() {
        return azimuth;
    }","  public void test137()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, (-1885.44957076), 1.4916681462400413E-154);
      Object object0 = new Object();
      boolean boolean0 = sphericalCoordinates0.equals(object0);
}"
2477,"    public double getPolar() {
        return polar;
    }","  public void test138()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, (-1885.44957076), 1.4916681462400413E-154);
      Object object0 = new Object();
      boolean boolean0 = sphericalCoordinates0.equals(object0);
}"
2478,"    public double getPolar() {
        return polar;
    }","  public void test139()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates0);
}"
2479,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof SphericalCoordinates) {
            final SphericalCoordinates rhs = (SphericalCoordinates) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(radius, rhs.radius) == 0 &&
                    Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(polar, rhs.polar) == 0;
        }
        return false;
    }","  public void test140()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates0);
}"
2480,"    public double getAzimuth() {
        return azimuth;
    }","  public void test141()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates0);
}"
2481,"    public double getRadius() {
        return radius;
    }","  public void test142()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates0);
}"
2482,"    public double getRadius() {
        return radius;
    }","  public void test143()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2483,"    public double getPolar() {
        return polar;
    }","  public void test144()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2484,"    public double getAzimuth() {
        return azimuth;
    }","  public void test145()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2485,"    public double getAzimuth() {
        return azimuth;
    }","  public void test146()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2486,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof SphericalCoordinates) {
            final SphericalCoordinates rhs = (SphericalCoordinates) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(radius, rhs.radius) == 0 &&
                    Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(polar, rhs.polar) == 0;
        }
        return false;
    }","  public void test147()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2487,"    public double getPolar() {
        return polar;
    }","  public void test148()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2488,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof SphericalCoordinates) {
            final SphericalCoordinates rhs = (SphericalCoordinates) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(radius, rhs.radius) == 0 &&
                    Double.compare(azimuth, rhs.azimuth) == 0 &&
                    Double.compare(polar, rhs.polar) == 0;
        }
        return false;
    }","  public void test149()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
}"
2489,"    public boolean isFinite() {
        return Double.isFinite(radius) && Double.isFinite(azimuth) && Double.isFinite(polar);
    }","  public void test150()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, 1.4916681462400413E-154, Double.POSITIVE_INFINITY);
      boolean boolean0 = sphericalCoordinates0.isFinite();
}"
2490,"    public double getPolar() {
        return polar;
    }","  public void test151()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, 1.4916681462400413E-154, Double.POSITIVE_INFINITY);
      boolean boolean0 = sphericalCoordinates0.isFinite();
}"
2491,"    public double getRadius() {
        return radius;
    }","  public void test152()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, 1.4916681462400413E-154, Double.POSITIVE_INFINITY);
      boolean boolean0 = sphericalCoordinates0.isFinite();
}"
2492,"    public double getAzimuth() {
        return azimuth;
    }","  public void test153()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, 1.4916681462400413E-154, Double.POSITIVE_INFINITY);
      boolean boolean0 = sphericalCoordinates0.isFinite();
}"
2493,"    public double getPolar() {
        return polar;
    }","  public void test154()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, Double.POSITIVE_INFINITY, 1342.429689523293);
      boolean boolean0 = sphericalCoordinates0.isFinite();
}"
2494,"    public boolean isFinite() {
        return Double.isFinite(radius) && Double.isFinite(azimuth) && Double.isFinite(polar);
    }","  public void test155()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, Double.POSITIVE_INFINITY, 1342.429689523293);
      boolean boolean0 = sphericalCoordinates0.isFinite();
}"
2495,"    public double getAzimuth() {
        return azimuth;
    }","  public void test156()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, Double.POSITIVE_INFINITY, 1342.429689523293);
      boolean boolean0 = sphericalCoordinates0.isFinite();
}"
2496,"    public double getRadius() {
        return radius;
    }","  public void test157()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, Double.POSITIVE_INFINITY, 1342.429689523293);
      boolean boolean0 = sphericalCoordinates0.isFinite();
}"
2497,"    public double getPolar() {
        return polar;
    }","  public void test158()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.isFinite();
}"
2498,"    public boolean isFinite() {
        return Double.isFinite(radius) && Double.isFinite(azimuth) && Double.isFinite(polar);
    }","  public void test159()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.isFinite();
}"
2499,"    public double getAzimuth() {
        return azimuth;
    }","  public void test160()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.isFinite();
}"
2500,"    public double getRadius() {
        return radius;
    }","  public void test161()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.isFinite();
}"
2501,"    public double getPolar() {
        return polar;
    }","  public void test162()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, 958.81, 1.0);
      boolean boolean0 = sphericalCoordinates0.isFinite();
}"
2502,"    public double getAzimuth() {
        return azimuth;
    }","  public void test163()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, 958.81, 1.0);
      boolean boolean0 = sphericalCoordinates0.isFinite();
}"
2503,"    public boolean isFinite() {
        return Double.isFinite(radius) && Double.isFinite(azimuth) && Double.isFinite(polar);
    }","  public void test164()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, 958.81, 1.0);
      boolean boolean0 = sphericalCoordinates0.isFinite();
}"
2504,"    public double getPolar() {
        return polar;
    }","  public void test165()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, 1.4916681462400413E-154, Double.POSITIVE_INFINITY);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
}"
2505,"    public double getAzimuth() {
        return azimuth;
    }","  public void test166()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, 1.4916681462400413E-154, Double.POSITIVE_INFINITY);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
}"
2506,"    public double getRadius() {
        return radius;
    }","  public void test167()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, 1.4916681462400413E-154, Double.POSITIVE_INFINITY);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
}"
2507,"    public boolean isInfinite() {
        return !isNaN() && (Double.isInfinite(radius) || Double.isInfinite(azimuth) || Double.isInfinite(polar));
    }","  public void test168()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, 1.4916681462400413E-154, Double.POSITIVE_INFINITY);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
}"
2508,"    public double getRadius() {
        return radius;
    }","  public void test169()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, Double.POSITIVE_INFINITY, 1342.429689523293);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
}"
2509,"    public double getAzimuth() {
        return azimuth;
    }","  public void test170()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, Double.POSITIVE_INFINITY, 1342.429689523293);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
}"
2510,"    public double getPolar() {
        return polar;
    }","  public void test171()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, Double.POSITIVE_INFINITY, 1342.429689523293);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
}"
2511,"    public boolean isInfinite() {
        return !isNaN() && (Double.isInfinite(radius) || Double.isInfinite(azimuth) || Double.isInfinite(polar));
    }","  public void test172()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, Double.POSITIVE_INFINITY, 1342.429689523293);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
}"
2512,"    public double getAzimuth() {
        return azimuth;
    }","  public void test173()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(Double.POSITIVE_INFINITY, (-1.245328525806152), (-1.245328525806152));
      boolean boolean0 = sphericalCoordinates0.isInfinite();
}"
2513,"    public double getRadius() {
        return radius;
    }","  public void test174()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(Double.POSITIVE_INFINITY, (-1.245328525806152), (-1.245328525806152));
      boolean boolean0 = sphericalCoordinates0.isInfinite();
}"
2514,"    public boolean isInfinite() {
        return !isNaN() && (Double.isInfinite(radius) || Double.isInfinite(azimuth) || Double.isInfinite(polar));
    }","  public void test175()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(Double.POSITIVE_INFINITY, (-1.245328525806152), (-1.245328525806152));
      boolean boolean0 = sphericalCoordinates0.isInfinite();
}"
2515,"    public double getPolar() {
        return polar;
    }","  public void test176()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(Double.POSITIVE_INFINITY, (-1.245328525806152), (-1.245328525806152));
      boolean boolean0 = sphericalCoordinates0.isInfinite();
}"
2516,"    public double getRadius() {
        return radius;
    }","  public void test177()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 3.0);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
}"
2517,"    public double getAzimuth() {
        return azimuth;
    }","  public void test178()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 3.0);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
}"
2518,"    public boolean isInfinite() {
        return !isNaN() && (Double.isInfinite(radius) || Double.isInfinite(azimuth) || Double.isInfinite(polar));
    }","  public void test179()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 3.0);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
}"
2519,"    public boolean isNaN() {
        return Double.isNaN(radius) || Double.isNaN(azimuth) || Double.isNaN(polar);
    }","  public void test180()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 3.0);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
}"
2520,"    public double getAzimuth() {
        return azimuth;
    }","  public void test181()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      sphericalCoordinates0.hashCode();
}"
2521,"    public double getRadius() {
        return radius;
    }","  public void test182()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      sphericalCoordinates0.hashCode();
}"
2522,"    public boolean isNaN() {
        return Double.isNaN(radius) || Double.isNaN(azimuth) || Double.isNaN(polar);
    }","  public void test183()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      sphericalCoordinates0.hashCode();
}"
2523,"    public boolean isNaN() {
        return Double.isNaN(radius) || Double.isNaN(azimuth) || Double.isNaN(polar);
    }","  public void test184()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, Double.NaN, Double.NaN);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
}"
2524,"    public boolean isInfinite() {
        return !isNaN() && (Double.isInfinite(radius) || Double.isInfinite(azimuth) || Double.isInfinite(polar));
    }","  public void test185()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, Double.NaN, Double.NaN);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
}"
2525,"    public String toString() {
        return SimpleTupleFormat.getDefault().format(radius, azimuth, polar);
    }","  public void test186()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, Double.NaN, Double.NaN);
      String string0 = sphericalCoordinates0.toString();
}"
2526,"    public int getDimension() {
        return 3;
    }","  public void test187()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, Double.NaN, Double.NaN);
      int int0 = sphericalCoordinates0.getDimension();
}"
2527,"    public boolean isInfinite() {
        return !isNaN() && (Double.isInfinite(radius) || Double.isInfinite(azimuth) || Double.isInfinite(polar));
    }","  public void test188()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, Double.NaN, Double.NaN);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
}"
2528,"    public double getAzimuth() {
        return azimuth;
    }","  public void test189()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      double double0 = sphericalCoordinates0.getAzimuth();
}"
2529,"    public double getRadius() {
        return radius;
    }","  public void test190()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      double double0 = sphericalCoordinates0.getAzimuth();
}"
2530,"    public double getPolar() {
        return polar;
    }","  public void test191()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      double double0 = sphericalCoordinates0.getAzimuth();
}"
2531,"    SimpleTriangle3D(final Plane plane, final Vector3D p1, final Vector3D p2, final Vector3D p3) {
        super(plane);

        this.p1 = p1;
        this.p2 = p2;
        this.p3 = p3;
    }","  public void test0()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D0, vector3D0, vector3D0);
      boolean boolean0 = simpleTriangle3D0.isInfinite();
}"
2532,"    public Vector3D getPoint3() {
        return p3;
    }","  public void test1()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, (Vector3D) null, (Vector3D) null, (Vector3D) null);
      Vector3D vector3D0 = simpleTriangle3D0.getPoint3();
}"
2533,"    public Vector3D getPoint3() {
        return p3;
    }","  public void test2()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D0, vector3D0, vector3D0);
      Vector3D vector3D1 = simpleTriangle3D0.getPoint3();
}"
2534,"    public Vector3D getPoint3() {
        return p3;
    }","  public void test3()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      Vector3D vector3D0 = simpleTriangle3D0.getPoint3();
}"
2535,"    public Vector3D getPoint3() {
        return p3;
    }","  public void test4()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D0, vector3D0, vector3D0);
      Vector3D vector3D1 = simpleTriangle3D0.getPoint3();
}"
2536,"    public Vector3D getPoint3() {
        return p3;
    }","  public void test5()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, (-1011.20471493188), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createTranslation((-1011.20471493188), (-1011.20471493188), (-1011.20471493188));
      SimpleTriangle3D simpleTriangle3D1 = simpleTriangle3D0.transform(affineTransformMatrix3D0);
      Vector3D vector3D0 = simpleTriangle3D1.getPoint3();
}"
2537,"    public Vector3D getPoint2() {
        return p2;
    }","  public void test6()  throws Throwable  {
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
      Vector3D vector3D0 = simpleTriangle3D0.getPoint2();
}"
2538,"    public Vector3D getPoint2() {
        return p2;
    }","  public void test7()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Plane plane0 = new Plane(vector3D_Unit0, 3148.377492271555, (Precision.DoubleEquivalence) null);
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(plane0, vector3D_Unit0, vector3D0, vector3D_Unit0);
      Vector3D vector3D1 = simpleTriangle3D0.getPoint2();
}"
2539,"    public Vector3D getPoint2() {
        return p2;
    }","  public void test8()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, 2384.4780395627004, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      Vector3D vector3D0 = Vector3D.NaN;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D0, vector3D_Unit0);
      Vector3D vector3D1 = simpleTriangle3D0.getPoint2();
}"
2540,"    public Vector3D getPoint2() {
        return p2;
    }","  public void test9()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      Vector3D vector3D0 = simpleTriangle3D0.getPoint2();
}"
2541,"    public Vector3D getPoint2() {
        return p2;
    }","  public void test10()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 3148.377492271555, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      Vector3D vector3D0 = simpleTriangle3D0.getPoint2();
}"
2542,"    public Vector3D getPoint2() {
        return p2;
    }","  public void test11()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-3578.751744), 1436.9786684800968, (-3578.751744));
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      Vector3D vector3D0 = simpleTriangle3D0.getPoint2();
}"
2543,"    public Vector3D getPoint1() {
        return p1;
    }","  public void test12()  throws Throwable  {
      Plane plane0 = new Plane((Vector3D.Unit) null, 0.0, (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(plane0, (Vector3D) null, (Vector3D) null, (Vector3D) null);
      Vector3D vector3D0 = simpleTriangle3D0.getPoint1();
}"
2544,"    public Vector3D getPoint1() {
        return p1;
    }","  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D1 = Vector3D.NaN;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D1, vector3D0, vector3D0);
      Vector3D vector3D2 = simpleTriangle3D0.getPoint1();
}"
2545,"    public Vector3D getPoint1() {
        return p1;
    }","  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D0, vector3D0, vector3D0);
      Vector3D vector3D1 = simpleTriangle3D0.getPoint1();
}"
2546,"    public Vector3D getPoint1() {
        return p1;
    }","  public void test15()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      Vector3D vector3D0 = simpleTriangle3D0.getPoint1();
}"
2547,"    public Vector3D getPoint1() {
        return p1;
    }","  public void test16()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      Vector3D vector3D0 = simpleTriangle3D0.getPoint1();
}"
2548,"    public Vector3D getPoint1() {
        return p1;
    }","  public void test17()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, Double.NEGATIVE_INFINITY, (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(plane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      Vector3D vector3D0 = simpleTriangle3D0.getPoint1();
}"
2549,"    public Vector3D getCentroid() {
        return Vector3D.centroid(p1, p2, p3);
    }","  public void test18()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D0, vector3D0, vector3D0);
      Vector3D vector3D1 = simpleTriangle3D0.getCentroid();
}"
2550,"    public Vector3D getCentroid() {
        return Vector3D.centroid(p1, p2, p3);
    }","  public void test19()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 3148.377492271555, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      Vector3D vector3D0 = simpleTriangle3D0.getCentroid();
}"
2551,"    public Vector3D getCentroid() {
        return Vector3D.centroid(p1, p2, p3);
    }","  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D0, vector3D0, vector3D0);
      Vector3D vector3D1 = simpleTriangle3D0.getCentroid();
}"
2552,"    public SimpleTriangle3D transform(final Transform<Vector3D> transform) {
        final Plane tPlane = getPlane().transform(transform);
        final Vector3D t1 = transform.apply(p1);
        final Vector3D t2 = transform.apply(p2);
        final Vector3D t3 = transform.apply(p3);

        return new SimpleTriangle3D(tPlane, t1, t2, t3);
    }","  public void test21()  throws Throwable  {
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      // Undeclared exception!
      try { 
        simpleTriangle3D0.transform(quaternionRotation0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.SimpleTriangle3D"", e);
      }
  }"
2553,"    public SimpleTriangle3D transform(final Transform<Vector3D> transform) {
        final Plane tPlane = getPlane().transform(transform);
        final Vector3D t1 = transform.apply(p1);
        final Vector3D t2 = transform.apply(p2);
        final Vector3D t3 = transform.apply(p3);

        return new SimpleTriangle3D(tPlane, t1, t2, t3);
    }","  public void test22()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Plane plane0 = new Plane(vector3D_Unit0, 2073.0329836, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createTranslation(Double.NEGATIVE_INFINITY, (-1.0), 2073.0329836);
      // Undeclared exception!
      try { 
        simpleTriangle3D0.transform(affineTransformMatrix3D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
2554,"    public SimpleTriangle3D reverse() {
        final Plane rPlane = getPlane().reverse();

        return new SimpleTriangle3D(rPlane, p1, p3, p2); // reverse point ordering
    }","  public void test23()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D0, vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        simpleTriangle3D0.reverse();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.SimpleTriangle3D"", e);
      }
  }"
2555,"    public double getSize() {
        final Vector3D v1 = p1.vectorTo(p2);
        final Vector3D v2 = p1.vectorTo(p3);
        return 0.5 * v1.cross(v2).norm();
    }","  public void test24()  throws Throwable  {
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
      // Undeclared exception!
      try { 
        simpleTriangle3D0.getSize();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.SimpleTriangle3D"", e);
      }
  }"
2556,"    public Vector3D getCentroid() {
        return Vector3D.centroid(p1, p2, p3);
    }","  public void test25()  throws Throwable  {
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
      // Undeclared exception!
      try { 
        simpleTriangle3D0.getCentroid();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
2557,"    public Vector3D getCentroid() {
        return Vector3D.centroid(p1, p2, p3);
    }","  public void test26()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, (-1011.20471493188), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createTranslation((-1011.20471493188), (-1011.20471493188), (-1011.20471493188));
      SimpleTriangle3D simpleTriangle3D1 = simpleTriangle3D0.transform(affineTransformMatrix3D0);
      Vector3D vector3D0 = simpleTriangle3D1.getCentroid();
}"
2558,"    public Vector3D getCentroid() {
        return Vector3D.centroid(p1, p2, p3);
    }","  public void test27()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, (-1011.20471493188), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      Vector3D vector3D0 = simpleTriangle3D0.getCentroid();
}"
2559,"    public List<Vector3D> getVertices() {
        return Arrays.asList(p1, p2, p3);
    }","  public void test28()  throws Throwable  {
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
      List<Vector3D> list0 = simpleTriangle3D0.getVertices();
}"
2560,"    public double getSize() {
        final Vector3D v1 = p1.vectorTo(p2);
        final Vector3D v2 = p1.vectorTo(p3);
        return 0.5 * v1.cross(v2).norm();
    }","  public void test29()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, (-1011.20471493188), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      double double0 = simpleTriangle3D0.getSize();
}"
2561,"    public SimpleTriangle3D reverse() {
        final Plane rPlane = getPlane().reverse();

        return new SimpleTriangle3D(rPlane, p1, p3, p2); // reverse point ordering
    }","  public void test30()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, (-1011.20471493188), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      SimpleTriangle3D simpleTriangle3D1 = simpleTriangle3D0.reverse();
}"
2562,"    public Vector3D getPoint3() {
        return p3;
    }","  public void test31()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, (-1011.20471493188), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      Vector3D vector3D0 = simpleTriangle3D0.getPoint3();
}"
2563,"    public VertexListConvexPolygon3D reverse() {
        final Plane rPlane = getPlane().reverse();
        final List<Vector3D> rVertices = new ArrayList<>(vertices);
        Collections.reverse(rVertices);

        return new VertexListConvexPolygon3D(rPlane, rVertices);
    }","  public void test0()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, 1.4916681462400413E-154, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      List<Vector3D> list0 = simpleTriangle3D0.getVertices();
      VertexListConvexPolygon3D vertexListConvexPolygon3D0 = new VertexListConvexPolygon3D(embeddingPlane0, list0);
      VertexListConvexPolygon3D vertexListConvexPolygon3D1 = vertexListConvexPolygon3D0.reverse();
}"
2564,"    public VertexListConvexPolygon3D transform(final Transform<Vector3D> transform) {
        final Plane tPlane = getPlane().transform(transform);
        final List<Vector3D> tVertices = vertices.stream()
                .map(transform)
                .collect(Collectors.toList());

        return new VertexListConvexPolygon3D(tPlane, tVertices);
    }","  public void test1()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, (-1657.869417505397), (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(plane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      List<Vector3D> list0 = simpleTriangle3D0.getVertices();
      VertexListConvexPolygon3D vertexListConvexPolygon3D0 = new VertexListConvexPolygon3D(plane0, list0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale((Vector3D) vector3D_Unit0);
      // Undeclared exception!
      try { 
        vertexListConvexPolygon3D0.transform(affineTransformMatrix3D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
2565,"    public VertexListConvexPolygon3D transform(final Transform<Vector3D> transform) {
        final Plane tPlane = getPlane().transform(transform);
        final List<Vector3D> tVertices = vertices.stream()
                .map(transform)
                .collect(Collectors.toList());

        return new VertexListConvexPolygon3D(tPlane, tVertices);
    }","  public void test2()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 1520.75048619, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      List<Vector3D> list0 = simpleTriangle3D0.getVertices();
      VertexListConvexPolygon3D vertexListConvexPolygon3D0 = new VertexListConvexPolygon3D(embeddingPlane0, list0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale((Vector3D) vector3D_Unit0);
      // Undeclared exception!
      try { 
        vertexListConvexPolygon3D0.transform(affineTransformMatrix3D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
2566,"    VertexListConvexPolygon3D(final Plane plane, final List<Vector3D> vertices) {
        super(plane);

        // sanity check
        if (vertices.size() < EuclideanUtils.TRIANGLE_VERTEX_COUNT) {
            throw new IllegalArgumentException(""Convex polygon requires at least "" +
                    EuclideanUtils.TRIANGLE_VERTEX_COUNT + "" points; found "" + vertices.size());
        }

        this.vertices = Collections.unmodifiableList(vertices);
    }","  public void test3()  throws Throwable  {
      VertexListConvexPolygon3D vertexListConvexPolygon3D0 = null;
      try {
        vertexListConvexPolygon3D0 = new VertexListConvexPolygon3D((Plane) null, (List<Vector3D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.VertexListConvexPolygon3D"", e);
      }
  }"
2567,"    VertexListConvexPolygon3D(final Plane plane, final List<Vector3D> vertices) {
        super(plane);

        // sanity check
        if (vertices.size() < EuclideanUtils.TRIANGLE_VERTEX_COUNT) {
            throw new IllegalArgumentException(""Convex polygon requires at least "" +
                    EuclideanUtils.TRIANGLE_VERTEX_COUNT + "" points; found "" + vertices.size());
        }

        this.vertices = Collections.unmodifiableList(vertices);
    }","  public void test4()  throws Throwable  {
      Stack<Vector3D> stack0 = new Stack<Vector3D>();
      VertexListConvexPolygon3D vertexListConvexPolygon3D0 = null;
      try {
        vertexListConvexPolygon3D0 = new VertexListConvexPolygon3D((Plane) null, stack0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Convex polygon requires at least 3 points; found 0
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.VertexListConvexPolygon3D"", e);
      }
  }"
2568,"    public List<Triangle3D> toTriangles() {
        return Planes.convexPolygonToTriangleFan(getPlane(), vertices);
    }","  public void test5()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D0, vector3D0, vector3D0);
      List<Vector3D> list0 = simpleTriangle3D0.getVertices();
      VertexListConvexPolygon3D vertexListConvexPolygon3D0 = new VertexListConvexPolygon3D((Plane) null, list0);
      List<Triangle3D> list1 = vertexListConvexPolygon3D0.toTriangles();
}"
2569,"    public VertexListConvexPolygon3D transform(final Transform<Vector3D> transform) {
        final Plane tPlane = getPlane().transform(transform);
        final List<Vector3D> tVertices = vertices.stream()
                .map(transform)
                .collect(Collectors.toList());

        return new VertexListConvexPolygon3D(tPlane, tVertices);
    }","  public void test6()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, 1.4916681462400413E-154, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      AxisSequence axisSequence0 = AxisSequence.ZYZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 1.4916681462400413E-154, 1.4916681462400413E-154, 1.4916681462400413E-154);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      List<Vector3D> list0 = simpleTriangle3D0.getVertices();
      VertexListConvexPolygon3D vertexListConvexPolygon3D0 = new VertexListConvexPolygon3D(embeddingPlane0, list0);
      VertexListConvexPolygon3D vertexListConvexPolygon3D1 = vertexListConvexPolygon3D0.transform(quaternionRotation0);
}"
2570,"    public List<Vector3D> getVertices() {
        return vertices;
    }","  public void test7()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, 1.4916681462400413E-154, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      List<Vector3D> list0 = simpleTriangle3D0.getVertices();
      VertexListConvexPolygon3D vertexListConvexPolygon3D0 = new VertexListConvexPolygon3D(embeddingPlane0, list0);
      List<Vector3D> list1 = vertexListConvexPolygon3D0.getVertices();
}"
2571,"    public VertexListConvexPolygon3D reverse() {
        final Plane rPlane = getPlane().reverse();
        final List<Vector3D> rVertices = new ArrayList<>(vertices);
        Collections.reverse(rVertices);

        return new VertexListConvexPolygon3D(rPlane, rVertices);
    }","  public void test8()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      List<Vector3D> list0 = simpleTriangle3D0.getVertices();
      VertexListConvexPolygon3D vertexListConvexPolygon3D0 = new VertexListConvexPolygon3D((Plane) null, list0);
      // Undeclared exception!
      try { 
        vertexListConvexPolygon3D0.reverse();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.VertexListConvexPolygon3D"", e);
      }
  }"
2572,"    public EmbeddedAreaPlaneConvexSubset transform(final Transform<Vector3D> transform) {
        final EmbeddingPlane.SubspaceTransform st = getPlane().subspaceTransform(transform);
        final ConvexArea tArea = area.transform(st.getTransform());

        return new EmbeddedAreaPlaneConvexSubset(st.getPlane().getEmbedding(), tArea);
    }","  public void test0()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, (-12.685213311052907), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      ConvexArea convexArea0 = ConvexArea.full();
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset(embeddingPlane0, convexArea0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createTranslation((Vector3D) vector3D_Unit0);
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset1 = embeddedAreaPlaneConvexSubset0.transform(affineTransformMatrix3D0);
}"
2573,"    public ConvexArea getSubspaceRegion() {
        return area;
    }","  public void test1()  throws Throwable  {
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset((EmbeddingPlane) null, (ConvexArea) null);
      ConvexArea convexArea0 = embeddedAreaPlaneConvexSubset0.getSubspaceRegion();
}"
2574,"    public EmbeddedAreaPlaneConvexSubset transform(final Transform<Vector3D> transform) {
        final EmbeddingPlane.SubspaceTransform st = getPlane().subspaceTransform(transform);
        final ConvexArea tArea = area.transform(st.getTransform());

        return new EmbeddedAreaPlaneConvexSubset(st.getPlane().getEmbedding(), tArea);
    }","  public void test2()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-1635.748), (Precision.DoubleEquivalence) null);
      ConvexArea convexArea0 = ConvexArea.full();
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset(embeddingPlane0, convexArea0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale((-1635.748));
      // Undeclared exception!
      try { 
        embeddedAreaPlaneConvexSubset0.transform(affineTransformMatrix3D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
2575,"    public List<Triangle3D> toTriangles() {
        if (isInfinite()) {
            throw new IllegalStateException(""Cannot convert infinite plane subset to triangles: "" + this);
        }

        final EmbeddingPlane plane = getPlane();
        final List<Vector3D> vertices = plane.toSpace(area.getVertices());

        return Planes.convexPolygonToTriangleFan(plane, vertices);
    }","  public void test3()  throws Throwable  {
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset((EmbeddingPlane) null, (ConvexArea) null);
      // Undeclared exception!
      try { 
        embeddedAreaPlaneConvexSubset0.toTriangles();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AbstractEmbeddedRegionPlaneSubset"", e);
      }
  }"
2576,"    public EmbeddedAreaPlaneConvexSubset reverse() {
        final EmbeddingPlane plane = getPlane();
        final EmbeddingPlane rPlane = plane.reverse();

        final Vector2D rU = rPlane.toSubspace(plane.toSpace(Vector2D.Unit.PLUS_X));
        final Vector2D rV = rPlane.toSubspace(plane.toSpace(Vector2D.Unit.PLUS_Y));

        final AffineTransformMatrix2D transform =
                AffineTransformMatrix2D.fromColumnVectors(rU, rV);

        return new EmbeddedAreaPlaneConvexSubset(rPlane, area.transform(transform));
    }","  public void test4()  throws Throwable  {
      ConvexArea convexArea0 = ConvexArea.full();
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset((EmbeddingPlane) null, convexArea0);
      // Undeclared exception!
      try { 
        embeddedAreaPlaneConvexSubset0.reverse();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.EmbeddedAreaPlaneConvexSubset"", e);
      }
  }"
2577,"    public List<Vector3D> getVertices() {
        return getPlane().toSpace(area.getVertices());
    }","  public void test5()  throws Throwable  {
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset((EmbeddingPlane) null, (ConvexArea) null);
      // Undeclared exception!
      try { 
        embeddedAreaPlaneConvexSubset0.getVertices();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.EmbeddedAreaPlaneConvexSubset"", e);
      }
  }"
2578,"    public Bounds3D getBounds() {
        return getBoundsFromSubspace(area);
    }","  public void test6()  throws Throwable  {
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset((EmbeddingPlane) null, (ConvexArea) null);
      // Undeclared exception!
      try { 
        embeddedAreaPlaneConvexSubset0.getBounds();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AbstractEmbeddedRegionPlaneSubset"", e);
      }
  }"
2579,"    public ConvexArea getSubspaceRegion() {
        return area;
    }","  public void test7()  throws Throwable  {
      ConvexArea convexArea0 = ConvexArea.full();
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset((EmbeddingPlane) null, convexArea0);
      ConvexArea convexArea1 = embeddedAreaPlaneConvexSubset0.getSubspaceRegion();
}"
2580,"    public EmbeddedAreaPlaneConvexSubset reverse() {
        final EmbeddingPlane plane = getPlane();
        final EmbeddingPlane rPlane = plane.reverse();

        final Vector2D rU = rPlane.toSubspace(plane.toSpace(Vector2D.Unit.PLUS_X));
        final Vector2D rV = rPlane.toSubspace(plane.toSpace(Vector2D.Unit.PLUS_Y));

        final AffineTransformMatrix2D transform =
                AffineTransformMatrix2D.fromColumnVectors(rU, rV);

        return new EmbeddedAreaPlaneConvexSubset(rPlane, area.transform(transform));
    }","  public void test8()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, (-12.685213311052907), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      ConvexArea convexArea0 = ConvexArea.full();
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset(embeddingPlane0, convexArea0);
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset1 = embeddedAreaPlaneConvexSubset0.reverse();
}"
2581,"    public Bounds3D getBounds() {
        return getBoundsFromSubspace(area);
    }","  public void test9()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, (-12.685213311052907), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      ConvexArea convexArea0 = ConvexArea.full();
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset(embeddingPlane0, convexArea0);
      Bounds3D bounds3D0 = embeddedAreaPlaneConvexSubset0.getBounds();
}"
2582,"    public List<Vector3D> getVertices() {
        return getPlane().toSpace(area.getVertices());
    }","  public void test10()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, (-12.685213311052907), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      ConvexArea convexArea0 = ConvexArea.full();
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset(embeddingPlane0, convexArea0);
      List<Vector3D> list0 = embeddedAreaPlaneConvexSubset0.getVertices();
}"
2583,"    public List<Triangle3D> toTriangles() {
        if (isInfinite()) {
            throw new IllegalStateException(""Cannot convert infinite plane subset to triangles: "" + this);
        }

        final EmbeddingPlane plane = getPlane();
        final List<Vector3D> vertices = plane.toSpace(area.getVertices());

        return Planes.convexPolygonToTriangleFan(plane, vertices);
    }","  public void test11()  throws Throwable  {
      TreeSet<Line> treeSet0 = new TreeSet<Line>();
      Vector<Line> vector0 = new Vector<Line>(treeSet0);
      ConvexArea convexArea0 = ConvexArea.fromBounds((Iterable<Line>) vector0);
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset((EmbeddingPlane) null, convexArea0);
      // Undeclared exception!
      try { 
        embeddedAreaPlaneConvexSubset0.toTriangles();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Cannot convert infinite plane subset to triangles: EmbeddedAreaPlaneConvexSubset[plane= null, subspaceRegion= ConvexArea[boundaries= []]]
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.EmbeddedAreaPlaneConvexSubset"", e);
      }
  }"
2584,"    public Split<PlaneConvexSubset> split(final Hyperplane<Vector3D> splitter) {
        // delegate back to the Planes factory method so that it has a chance to decide
        // on the best possible implementation for the given area
        return Planes.subspaceSplit((Plane) splitter, this,
            (p, r) -> Planes.subsetFromConvexArea(p, (ConvexArea) r));
    }","  public void test12()  throws Throwable  {
      ConvexArea convexArea0 = ConvexArea.full();
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset((EmbeddingPlane) null, convexArea0);
      // Undeclared exception!
      try { 
        embeddedAreaPlaneConvexSubset0.split((Hyperplane<Vector3D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes"", e);
      }
  }"
2585,"    public EmbeddedAreaPlaneConvexSubset transform(final Transform<Vector3D> transform) {
        final EmbeddingPlane.SubspaceTransform st = getPlane().subspaceTransform(transform);
        final ConvexArea tArea = area.transform(st.getTransform());

        return new EmbeddedAreaPlaneConvexSubset(st.getPlane().getEmbedding(), tArea);
    }","  public void test13()  throws Throwable  {
      ConvexArea convexArea0 = ConvexArea.full();
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset((EmbeddingPlane) null, convexArea0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      // Undeclared exception!
      try { 
        embeddedAreaPlaneConvexSubset0.transform(affineTransformMatrix3D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.EmbeddedAreaPlaneConvexSubset"", e);
      }
  }"
2586,"    public PlaneConvexSubset.Embedded getEmbedded() {
        return this;
    }","  public void test14()  throws Throwable  {
      ConvexArea convexArea0 = ConvexArea.full();
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset((EmbeddingPlane) null, convexArea0);
      PlaneConvexSubset.Embedded planeConvexSubset_Embedded0 = embeddedAreaPlaneConvexSubset0.getEmbedded();
}"
2587,"    protected RegionNode3D createNode() {
        return new RegionNode3D(this);
    }","  public void test0()  throws Throwable  {
      PriorityQueue<EmbeddedAreaPlaneConvexSubset> priorityQueue0 = new PriorityQueue<EmbeddedAreaPlaneConvexSubset>(1051);
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.from((Iterable<? extends PlaneConvexSubset>) priorityQueue0);
      RegionBSPTree3D.RegionNode3D regionBSPTree3D_RegionNode3D0 = regionBSPTree3D0.createNode();
      RegionBSPTree3D.RegionNode3D regionBSPTree3D_RegionNode3D1 = regionBSPTree3D_RegionNode3D0.getSelf();
}"
2588,"    public static RegionBSPTree3D full() {
        return new RegionBSPTree3D(true);
    }","  public void test1()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      RegionBSPTree3D.PartitionedRegionBuilder3D regionBSPTree3D_PartitionedRegionBuilder3D0 = RegionBSPTree3D.partitionedRegionBuilder();
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      ConvexArea convexArea0 = ConvexArea.full();
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset(embeddingPlane0, convexArea0);
      RegionBSPTree3D.PartitionedRegionBuilder3D regionBSPTree3D_PartitionedRegionBuilder3D1 = regionBSPTree3D_PartitionedRegionBuilder3D0.insertPartition((PlaneConvexSubset) embeddedAreaPlaneConvexSubset0);
}"
2589,"    public static PartitionedRegionBuilder3D partitionedRegionBuilder() {
        return new PartitionedRegionBuilder3D();
    }","  public void test2()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      RegionBSPTree3D.PartitionedRegionBuilder3D regionBSPTree3D_PartitionedRegionBuilder3D0 = RegionBSPTree3D.partitionedRegionBuilder();
      Plane plane0 = new Plane(vector3D_Unit0, (-1555.2458468797254), (Precision.DoubleEquivalence) null);
      RegionBSPTree3D.PartitionedRegionBuilder3D regionBSPTree3D_PartitionedRegionBuilder3D1 = regionBSPTree3D_PartitionedRegionBuilder3D0.insertPartition(plane0);
}"
2590,"    public static PartitionedRegionBuilder3D partitionedRegionBuilder() {
        return new PartitionedRegionBuilder3D();
    }","  public void test3()  throws Throwable  {
      RegionBSPTree3D.PartitionedRegionBuilder3D regionBSPTree3D_PartitionedRegionBuilder3D0 = RegionBSPTree3D.partitionedRegionBuilder();
      Vector3D vector3D0 = Vector3D.ZERO;
      // Undeclared exception!
      try { 
        regionBSPTree3D_PartitionedRegionBuilder3D0.insertAxisAlignedPartitions(vector3D0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
2591,"    public static PartitionedRegionBuilder3D partitionedRegionBuilder() {
        return new PartitionedRegionBuilder3D();
    }","  public void test4()  throws Throwable  {
      RegionBSPTree3D.PartitionedRegionBuilder3D regionBSPTree3D_PartitionedRegionBuilder3D0 = RegionBSPTree3D.partitionedRegionBuilder();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      RegionBSPTree3D.PartitionedRegionBuilder3D regionBSPTree3D_PartitionedRegionBuilder3D1 = regionBSPTree3D_PartitionedRegionBuilder3D0.insertBoundary(simpleTriangle3D0);
}"
2592,"    public Split<RegionBSPTree3D> split(final Hyperplane<Vector3D> splitter) {
        return split(splitter, RegionBSPTree3D.empty(), RegionBSPTree3D.empty());
    }","  public void test5()  throws Throwable  {
      RegionBSPTree3D regionBSPTree3D0 = new RegionBSPTree3D();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 3083.506521958974, (Precision.DoubleEquivalence) null);
      Split<RegionBSPTree3D> split0 = regionBSPTree3D0.split(embeddingPlane0);
}"
2593,"    public Vector3D project(final Vector3D pt) {
        // use our custom projector so that we can disambiguate points that are
        // actually equidistant from the target point
        final BoundaryProjector3D projector = new BoundaryProjector3D(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test6()  throws Throwable  {
      PriorityQueue<EmbeddedAreaPlaneConvexSubset> priorityQueue0 = new PriorityQueue<EmbeddedAreaPlaneConvexSubset>(1051);
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.from((Iterable<? extends PlaneConvexSubset>) priorityQueue0);
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.from(0.0, (-1897.7288191458), 3724.8865673992645);
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit1, vector3D_Unit0, 3724.8865673992645, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.translate(vector3D0);
      HyperplaneConvexSubset<Vector3D> hyperplaneConvexSubset0 = embeddingPlane1.span();
      RegionCutRule regionCutRule0 = RegionCutRule.MINUS_INSIDE;
      regionBSPTree3D0.insert((HyperplaneSubset<Vector3D>) hyperplaneConvexSubset0, regionCutRule0);
      Vector3D vector3D1 = regionBSPTree3D0.project(vector3D0);
}"
2594,"    public Vector3D project(final Vector3D pt) {
        // use our custom projector so that we can disambiguate points that are
        // actually equidistant from the target point
        final BoundaryProjector3D projector = new BoundaryProjector3D(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test7()  throws Throwable  {
      PriorityQueue<EmbeddedAreaPlaneConvexSubset> priorityQueue0 = new PriorityQueue<EmbeddedAreaPlaneConvexSubset>(1051);
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.from((Iterable<? extends PlaneConvexSubset>) priorityQueue0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.from((double) 1051, (double) 1051, 3724.8865673992645);
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit1, vector3D_Unit0, 3724.8865673992645, (Precision.DoubleEquivalence) null);
      HyperplaneConvexSubset<Vector3D> hyperplaneConvexSubset0 = embeddingPlane0.span();
      RegionCutRule regionCutRule0 = RegionCutRule.MINUS_INSIDE;
      regionBSPTree3D0.insert((HyperplaneSubset<Vector3D>) hyperplaneConvexSubset0, regionCutRule0);
      Vector3D vector3D0 = regionBSPTree3D0.project((Vector3D) vector3D_Unit1);
}"
2595,"    public Vector3D project(final Vector3D pt) {
        // use our custom projector so that we can disambiguate points that are
        // actually equidistant from the target point
        final BoundaryProjector3D projector = new BoundaryProjector3D(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test8()  throws Throwable  {
      PriorityQueue<EmbeddedAreaPlaneConvexSubset> priorityQueue0 = new PriorityQueue<EmbeddedAreaPlaneConvexSubset>(1051);
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.from((Iterable<? extends PlaneConvexSubset>) priorityQueue0);
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 3724.8865673992645, (Precision.DoubleEquivalence) null);
      HyperplaneConvexSubset<Vector3D> hyperplaneConvexSubset0 = embeddingPlane0.span();
      RegionCutRule regionCutRule0 = RegionCutRule.INHERIT;
      regionBSPTree3D0.insert((HyperplaneSubset<Vector3D>) hyperplaneConvexSubset0, regionCutRule0);
      // Undeclared exception!
      try { 
        regionBSPTree3D0.project(vector3D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.partitioning.bsp.AbstractRegionBSPTree$BoundaryProjector"", e);
      }
  }"
2596,"    public static RegionBSPTree3D from(final Iterable<? extends PlaneConvexSubset> boundaries) {
        return from(boundaries, false);
    }","  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        RegionBSPTree3D.from((Iterable<? extends PlaneConvexSubset>) null, false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.partitioning.bsp.AbstractRegionBSPTree"", e);
      }
  }"
2597,"    public static RegionBSPTree3D from(final Iterable<? extends PlaneConvexSubset> boundaries) {
        return from(boundaries, false);
    }","  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        RegionBSPTree3D.from((Iterable<? extends PlaneConvexSubset>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.partitioning.bsp.AbstractRegionBSPTree"", e);
      }
  }"
2598,"    public List<ConvexVolume> toConvex() {
        final List<ConvexVolume> result = new ArrayList<>();

        toConvexRecursive(getRoot(), ConvexVolume.full(), result);

        return result;
    }","  public void test11()  throws Throwable  {
      PriorityQueue<EmbeddedAreaPlaneConvexSubset> priorityQueue0 = new PriorityQueue<EmbeddedAreaPlaneConvexSubset>(1051);
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.from((Iterable<? extends PlaneConvexSubset>) priorityQueue0);
      List<ConvexVolume> list0 = regionBSPTree3D0.toConvex();
}"
2599,"    public RegionBSPTree3D() {
        this(false);
    }","  public void test12()  throws Throwable  {
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.empty();
      RegionBSPTree3D.RegionNode3D regionBSPTree3D_RegionNode3D0 = new RegionBSPTree3D.RegionNode3D(regionBSPTree3D0);
}"
2600,"    public Stream<PlaneConvexSubset> boundaryStream() {
        return StreamSupport.stream(boundaries().spliterator(), false);
    }","  public void test13()  throws Throwable  {
      HashSet<EmbeddedAreaPlaneConvexSubset> hashSet0 = new HashSet<EmbeddedAreaPlaneConvexSubset>();
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.from((Iterable<? extends PlaneConvexSubset>) hashSet0);
      Stream<PlaneConvexSubset> stream0 = regionBSPTree3D0.boundaryStream();
}"
2601,"    public static PartitionedRegionBuilder3D partitionedRegionBuilder() {
        return new PartitionedRegionBuilder3D();
    }","  public void test14()  throws Throwable  {
      HashSet<EmbeddedAreaPlaneConvexSubset> hashSet0 = new HashSet<EmbeddedAreaPlaneConvexSubset>();
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.from((Iterable<? extends PlaneConvexSubset>) hashSet0);
      Iterable<PlaneConvexSubset> iterable0 = regionBSPTree3D0.boundaries();
      RegionBSPTree3D.PartitionedRegionBuilder3D regionBSPTree3D_PartitionedRegionBuilder3D0 = RegionBSPTree3D.partitionedRegionBuilder();
      RegionBSPTree3D.PartitionedRegionBuilder3D regionBSPTree3D_PartitionedRegionBuilder3D1 = regionBSPTree3D_PartitionedRegionBuilder3D0.insertBoundaries(iterable0);
}"
2602,"    public static RegionBSPTree3D from(final Iterable<? extends PlaneConvexSubset> boundaries) {
        return from(boundaries, false);
    }","  public void test15()  throws Throwable  {
      RegionBSPTree3D.PartitionedRegionBuilder3D regionBSPTree3D_PartitionedRegionBuilder3D0 = RegionBSPTree3D.partitionedRegionBuilder();
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      RegionBSPTree3D.PartitionedRegionBuilder3D regionBSPTree3D_PartitionedRegionBuilder3D1 = regionBSPTree3D_PartitionedRegionBuilder3D0.insertAxisAlignedGrid(bounds3D0, (-45), (Precision.DoubleEquivalence) null);
}"
2603,"    protected RegionNode3D createNode() {
        return new RegionNode3D(this);
    }","  public void test16()  throws Throwable  {
      PriorityQueue<VertexListConvexPolygon3D> priorityQueue0 = new PriorityQueue<VertexListConvexPolygon3D>();
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.from((Iterable<? extends PlaneConvexSubset>) priorityQueue0, false);
      RegionBSPTree3D.RegionNode3D regionBSPTree3D_RegionNode3D0 = regionBSPTree3D0.createNode();
      ConvexVolume convexVolume0 = regionBSPTree3D_RegionNode3D0.getNodeRegion();
}"
2604,"    public RegionBSPTree3D() {
        this(false);
    }","  public void test17()  throws Throwable  {
      RegionBSPTree3D regionBSPTree3D0 = new RegionBSPTree3D(true);
      boolean boolean0 = regionBSPTree3D0.isInfinite();
}"
2605,"    public static RegionBSPTree3D from(final Iterable<? extends PlaneConvexSubset> boundaries) {
        return from(boundaries, false);
    }","  public void test18()  throws Throwable  {
      PriorityQueue<VertexListConvexPolygon3D> priorityQueue0 = new PriorityQueue<VertexListConvexPolygon3D>();
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.from((Iterable<? extends PlaneConvexSubset>) priorityQueue0, false);
      boolean boolean0 = regionBSPTree3D0.isFinite();
}"
2606,"    public List<ConvexVolume> toConvex() {
        final List<ConvexVolume> result = new ArrayList<>();

        toConvexRecursive(getRoot(), ConvexVolume.full(), result);

        return result;
    }","  public void test19()  throws Throwable  {
      RegionBSPTree3D regionBSPTree3D0 = new RegionBSPTree3D(true);
      List<ConvexVolume> list0 = regionBSPTree3D0.toConvex();
}"
2607,"    public List<ConvexVolume> toConvex() {
        final List<ConvexVolume> result = new ArrayList<>();

        toConvexRecursive(getRoot(), ConvexVolume.full(), result);

        return result;
    }","  public void test20()  throws Throwable  {
      PriorityQueue<EmbeddedAreaPlaneConvexSubset> priorityQueue0 = new PriorityQueue<EmbeddedAreaPlaneConvexSubset>(1051);
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.from((Iterable<? extends PlaneConvexSubset>) priorityQueue0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 3724.8865673992645, (Precision.DoubleEquivalence) null);
      HyperplaneConvexSubset<Vector3D> hyperplaneConvexSubset0 = embeddingPlane0.span();
      RegionCutRule regionCutRule0 = RegionCutRule.INHERIT;
      regionBSPTree3D0.insert((HyperplaneSubset<Vector3D>) hyperplaneConvexSubset0, regionCutRule0);
      List<ConvexVolume> list0 = regionBSPTree3D0.toConvex();
}"
2608,"    public List<PlaneConvexSubset> getBoundaries() {
        return createBoundaryList(PlaneConvexSubset.class::cast);
    }","  public void test21()  throws Throwable  {
      HashSet<EmbeddedAreaPlaneConvexSubset> hashSet0 = new HashSet<EmbeddedAreaPlaneConvexSubset>();
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.from((Iterable<? extends PlaneConvexSubset>) hashSet0);
      List<PlaneConvexSubset> list0 = regionBSPTree3D0.getBoundaries();
}"
2609,"    public RegionBSPTree3D toTree() {
        return this;
    }","  public void test22()  throws Throwable  {
      PriorityQueue<VertexListConvexPolygon3D> priorityQueue0 = new PriorityQueue<VertexListConvexPolygon3D>();
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.from((Iterable<? extends PlaneConvexSubset>) priorityQueue0, false);
      RegionBSPTree3D regionBSPTree3D1 = regionBSPTree3D0.toTree();
}"
2610,"    public Vector3D project(final Vector3D pt) {
        // use our custom projector so that we can disambiguate points that are
        // actually equidistant from the target point
        final BoundaryProjector3D projector = new BoundaryProjector3D(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test23()  throws Throwable  {
      PriorityQueue<VertexListConvexPolygon3D> priorityQueue0 = new PriorityQueue<VertexListConvexPolygon3D>();
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.from((Iterable<? extends PlaneConvexSubset>) priorityQueue0, false);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D vector3D0 = regionBSPTree3D0.project((Vector3D) vector3D_Unit0);
}"
2611,"    public static RegionBSPTree3D full() {
        return new RegionBSPTree3D(true);
    }","  public void test24()  throws Throwable  {
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.full();
}"
2612,"    public Split<RegionBSPTree3D> split(final Hyperplane<Vector3D> splitter) {
        return split(splitter, RegionBSPTree3D.empty(), RegionBSPTree3D.empty());
    }","  public void test25()  throws Throwable  {
      RegionBSPTree3D regionBSPTree3D0 = new RegionBSPTree3D();
      // Undeclared exception!
      try { 
        regionBSPTree3D0.split((Hyperplane<Vector3D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.partitioning.bsp.AbstractBSPTree"", e);
      }
  }"
2613,"    public List<LinecastPoint3D> linecast(final LineConvexSubset3D subset) {
        final LinecastVisitor visitor = new LinecastVisitor(subset, false);
        accept(visitor);

        return visitor.getResults();
    }","  public void test26()  throws Throwable  {
      PriorityQueue<VertexListConvexPolygon3D> priorityQueue0 = new PriorityQueue<VertexListConvexPolygon3D>();
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.from((Iterable<? extends PlaneConvexSubset>) priorityQueue0, false);
      List<LinecastPoint3D> list0 = regionBSPTree3D0.linecast((LineConvexSubset3D) null);
}"
2614,"    public RegionBSPTree3D copy() {
        final RegionBSPTree3D result = RegionBSPTree3D.empty();
        result.copy(this);

        return result;
    }","  public void test27()  throws Throwable  {
      PriorityQueue<VertexListConvexPolygon3D> priorityQueue0 = new PriorityQueue<VertexListConvexPolygon3D>();
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.from((Iterable<? extends PlaneConvexSubset>) priorityQueue0, false);
      RegionBSPTree3D regionBSPTree3D1 = regionBSPTree3D0.copy();
}"
2615,"    public static PartitionedRegionBuilder3D partitionedRegionBuilder() {
        return new PartitionedRegionBuilder3D();
    }","  public void test28()  throws Throwable  {
      RegionBSPTree3D.PartitionedRegionBuilder3D regionBSPTree3D_PartitionedRegionBuilder3D0 = RegionBSPTree3D.partitionedRegionBuilder();
      RegionBSPTree3D regionBSPTree3D0 = regionBSPTree3D_PartitionedRegionBuilder3D0.build();
}"
2616,"    public static RegionBSPTree3D from(final Iterable<? extends PlaneConvexSubset> boundaries) {
        return from(boundaries, false);
    }","  public void test29()  throws Throwable  {
      RegionBSPTree3D.PartitionedRegionBuilder3D regionBSPTree3D_PartitionedRegionBuilder3D0 = RegionBSPTree3D.partitionedRegionBuilder();
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      // Undeclared exception!
      try { 
        regionBSPTree3D_PartitionedRegionBuilder3D0.insertAxisAlignedGrid(bounds3D0, 274, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
2617,"    public LinecastPoint3D linecastFirst(final LineConvexSubset3D subset) {
        final LinecastVisitor visitor = new LinecastVisitor(subset, true);
        accept(visitor);

        return visitor.getFirstResult();
    }","  public void test30()  throws Throwable  {
      PriorityQueue<VertexListConvexPolygon3D> priorityQueue0 = new PriorityQueue<VertexListConvexPolygon3D>();
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.from((Iterable<? extends PlaneConvexSubset>) priorityQueue0, false);
      LinecastPoint3D linecastPoint3D0 = regionBSPTree3D0.linecastFirst((LineConvexSubset3D) null);
}"
2618,"    public static PartitionedRegionBuilder3D partitionedRegionBuilder() {
        return new PartitionedRegionBuilder3D();
    }","  public void test31()  throws Throwable  {
      HashSet<EmbeddedAreaPlaneConvexSubset> hashSet0 = new HashSet<EmbeddedAreaPlaneConvexSubset>();
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.from((Iterable<? extends PlaneConvexSubset>) hashSet0);
      RegionBSPTree3D.PartitionedRegionBuilder3D regionBSPTree3D_PartitionedRegionBuilder3D0 = RegionBSPTree3D.partitionedRegionBuilder();
      RegionBSPTree3D.PartitionedRegionBuilder3D regionBSPTree3D_PartitionedRegionBuilder3D1 = regionBSPTree3D_PartitionedRegionBuilder3D0.insertBoundaries((BoundarySource3D) regionBSPTree3D0);
}"
2619,"    public Bounds3D intersection(final Bounds3D other) {
        if (intersects(other)) {
            final Vector3D aMin = getMin();
            final Vector3D aMax = getMax();

            final Vector3D bMin = other.getMin();
            final Vector3D bMax = other.getMax();

            // get the max of the mins and the mins of the maxes
            final double minX = Math.max(aMin.getX(), bMin.getX());
            final double minY = Math.max(aMin.getY(), bMin.getY());
            final double minZ = Math.max(aMin.getZ(), bMin.getZ());

            final double maxX = Math.min(aMax.getX(), bMax.getX());
            final double maxY = Math.min(aMax.getY(), bMax.getY());
            final double maxZ = Math.min(aMax.getZ(), bMax.getZ());

            return new Bounds3D(
                    Vector3D.of(minX, minY, minZ),
                    Vector3D.of(maxX, maxY, maxZ));
        }

        return null; // no intersection
    }","  public void test0()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D[] vector3DArray0 = new Vector3D[7];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      vector3DArray0[2] = (Vector3D) vector3D_Unit0;
      vector3DArray0[3] = (Vector3D) vector3D_Unit0;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_X;
      vector3DArray0[4] = (Vector3D) vector3D_Unit1;
      vector3DArray0[5] = (Vector3D) vector3D_Unit0;
      vector3DArray0[6] = (Vector3D) vector3D_Unit0;
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      Bounds3D bounds3D1 = bounds3D0.intersection(bounds3D0);
}"
2620,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        } else if (!(obj instanceof Bounds3D)) {
            return false;
        }

        final Bounds3D other = (Bounds3D) obj;

        return getMin().equals(other.getMin()) &&
                getMax().equals(other.getMax());
    }","  public void test1()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D[] vector3DArray0 = new Vector3D[7];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      vector3DArray0[2] = (Vector3D) vector3D_Unit0;
      vector3DArray0[3] = (Vector3D) vector3D_Unit0;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_X;
      vector3DArray0[4] = (Vector3D) vector3D_Unit1;
      vector3DArray0[5] = (Vector3D) vector3D_Unit0;
      vector3DArray0[6] = (Vector3D) vector3D_Unit0;
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      Bounds3D bounds3D1 = bounds3D0.intersection(bounds3D0);
}"
2621,"    public Bounds3D intersection(final Bounds3D other) {
        if (intersects(other)) {
            final Vector3D aMin = getMin();
            final Vector3D aMax = getMax();

            final Vector3D bMin = other.getMin();
            final Vector3D bMax = other.getMax();

            // get the max of the mins and the mins of the maxes
            final double minX = Math.max(aMin.getX(), bMin.getX());
            final double minY = Math.max(aMin.getY(), bMin.getY());
            final double minZ = Math.max(aMin.getZ(), bMin.getZ());

            final double maxX = Math.min(aMax.getX(), bMax.getX());
            final double maxY = Math.min(aMax.getY(), bMax.getY());
            final double maxZ = Math.min(aMax.getZ(), bMax.getZ());

            return new Bounds3D(
                    Vector3D.of(minX, minY, minZ),
                    Vector3D.of(maxX, maxY, maxZ));
        }

        return null; // no intersection
    }","  public void test2()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Bounds3D bounds3D1 = Bounds3D.from(vector3DArray0[2], vector3DArray0);
      Bounds3D bounds3D2 = bounds3D0.intersection(bounds3D1);
}"
2622,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        } else if (!(obj instanceof Bounds3D)) {
            return false;
        }

        final Bounds3D other = (Bounds3D) obj;

        return getMin().equals(other.getMin()) &&
                getMax().equals(other.getMax());
    }","  public void test3()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Bounds3D bounds3D1 = Bounds3D.from(vector3DArray0[2], vector3DArray0);
      Bounds3D bounds3D2 = bounds3D0.intersection(bounds3D1);
}"
2623,"    public boolean intersects(final Bounds3D other) {
        final Vector3D aMin = getMin();
        final Vector3D aMax = getMax();

        final Vector3D bMin = other.getMin();
        final Vector3D bMax = other.getMax();

        return aMin.getX() <= bMax.getX() && aMax.getX() >= bMin.getX() &&
                aMin.getY() <= bMax.getY() && aMax.getY() >= bMin.getY() &&
                aMin.getZ() <= bMax.getZ() && aMax.getZ() >= bMin.getZ();
    }","  public void test4()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[8];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      Vector3D vector3D1 = Vector3D.ZERO;
      vector3DArray0[2] = vector3D1;
      vector3DArray0[3] = vector3D0;
      vector3DArray0[4] = vector3D0;
      vector3DArray0[5] = vector3D0;
      vector3DArray0[6] = vector3D0;
      vector3DArray0[7] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      boolean boolean0 = bounds3D0.intersects(bounds3D0);
}"
2624,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        } else if (!(obj instanceof Bounds3D)) {
            return false;
        }

        final Bounds3D other = (Bounds3D) obj;

        return getMin().equals(other.getMin()) &&
                getMax().equals(other.getMax());
    }","  public void test5()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1927);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      Bounds3D bounds3D1 = bounds3D0.intersection(bounds3D0);
}"
2625,"    public Bounds3D intersection(final Bounds3D other) {
        if (intersects(other)) {
            final Vector3D aMin = getMin();
            final Vector3D aMax = getMax();

            final Vector3D bMin = other.getMin();
            final Vector3D bMax = other.getMax();

            // get the max of the mins and the mins of the maxes
            final double minX = Math.max(aMin.getX(), bMin.getX());
            final double minY = Math.max(aMin.getY(), bMin.getY());
            final double minZ = Math.max(aMin.getZ(), bMin.getZ());

            final double maxX = Math.min(aMax.getX(), bMax.getX());
            final double maxY = Math.min(aMax.getY(), bMax.getY());
            final double maxZ = Math.min(aMax.getZ(), bMax.getZ());

            return new Bounds3D(
                    Vector3D.of(minX, minY, minZ),
                    Vector3D.of(maxX, maxY, maxZ));
        }

        return null; // no intersection
    }","  public void test6()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1927);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      Bounds3D bounds3D1 = bounds3D0.intersection(bounds3D0);
}"
2626,"    public boolean contains(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        final Vector3D min = getMin();
        final Vector3D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY() &&
                z >= min.getZ() && z <= max.getZ();
    }","  public void test7()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D[] vector3DArray0 = new Vector3D[5];
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Z;
      vector3DArray0[0] = (Vector3D) vector3D_Unit1;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      vector3DArray0[2] = (Vector3D) vector3D_Unit0;
      vector3DArray0[3] = (Vector3D) vector3D_Unit0;
      vector3DArray0[4] = (Vector3D) vector3D_Unit0;
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      boolean boolean0 = bounds3D0.contains(vector3DArray0[1]);
}"
2627,"    public boolean contains(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        final Vector3D min = getMin();
        final Vector3D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY() &&
                z >= min.getZ() && z <= max.getZ();
    }","  public void test8()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D[] vector3DArray0 = new Vector3D[7];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      vector3DArray0[2] = (Vector3D) vector3D_Unit0;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3DArray0[2], vector3DArray0[0]);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      vector3DArray0[3] = vector3D0;
      vector3DArray0[4] = (Vector3D) vector3D_Unit0;
      vector3DArray0[5] = (Vector3D) vector3D_Unit0;
      vector3DArray0[6] = (Vector3D) vector3D_Unit0;
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      boolean boolean0 = bounds3D0.contains(vector3D0);
}"
2628,"    public boolean contains(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        final Vector3D min = getMin();
        final Vector3D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY() &&
                z >= min.getZ() && z <= max.getZ();
    }","  public void test9()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D[] vector3DArray0 = new Vector3D[7];
      vector3DArray0[0] = (Vector3D) vector3D_Unit1;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      vector3DArray0[2] = (Vector3D) vector3D_Unit0;
      vector3DArray0[3] = (Vector3D) vector3D_Unit1;
      vector3DArray0[4] = (Vector3D) vector3D_Unit0;
      vector3DArray0[5] = (Vector3D) vector3D_Unit0;
      vector3DArray0[6] = (Vector3D) vector3D_Unit1;
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit1, vector3DArray0);
      boolean boolean0 = bounds3D0.contains((Vector3D) vector3D_Unit0);
}"
2629,"    public static Bounds3D from(final Vector3D first, final Vector3D... more) {
        final Builder builder = builder();

        builder.add(first);
        builder.addAll(Arrays.asList(more));

        return builder.build();
    }","  public void test10()  throws Throwable  {
      Stack<Vector3D> stack0 = new Stack<Vector3D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      stack0.add((Vector3D) vector3D_Unit0);
      Bounds3D bounds3D0 = Bounds3D.from((Iterable<Vector3D>) stack0);
}"
2630,"    public Parallelepiped toRegion(final Precision.DoubleEquivalence precision) {
        return Parallelepiped.axisAligned(getMin(), getMax(), precision);
    }","  public void test11()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      // Undeclared exception!
      try { 
        bounds3D0.toRegion(precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
2631,"    public boolean intersects(final Bounds3D other) {
        final Vector3D aMin = getMin();
        final Vector3D aMax = getMax();

        final Vector3D bMin = other.getMin();
        final Vector3D bMax = other.getMax();

        return aMin.getX() <= bMax.getX() && aMax.getX() >= bMin.getX() &&
                aMin.getY() <= bMax.getY() && aMax.getY() >= bMin.getY() &&
                aMin.getZ() <= bMax.getZ() && aMax.getZ() >= bMin.getZ();
    }","  public void test12()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D[] vector3DArray0 = new Vector3D[7];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      vector3DArray0[2] = (Vector3D) vector3D_Unit0;
      vector3DArray0[3] = (Vector3D) vector3D_Unit0;
      vector3DArray0[4] = (Vector3D) vector3D_Unit0;
      vector3DArray0[5] = (Vector3D) vector3D_Unit0;
      vector3DArray0[6] = (Vector3D) vector3D_Unit0;
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      // Undeclared exception!
      try { 
        bounds3D0.intersects((Bounds3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Bounds3D"", e);
      }
  }"
2632,"    public Bounds3D intersection(final Bounds3D other) {
        if (intersects(other)) {
            final Vector3D aMin = getMin();
            final Vector3D aMax = getMax();

            final Vector3D bMin = other.getMin();
            final Vector3D bMax = other.getMax();

            // get the max of the mins and the mins of the maxes
            final double minX = Math.max(aMin.getX(), bMin.getX());
            final double minY = Math.max(aMin.getY(), bMin.getY());
            final double minZ = Math.max(aMin.getZ(), bMin.getZ());

            final double maxX = Math.min(aMax.getX(), bMax.getX());
            final double maxY = Math.min(aMax.getY(), bMax.getY());
            final double maxZ = Math.min(aMax.getZ(), bMax.getZ());

            return new Bounds3D(
                    Vector3D.of(minX, minY, minZ),
                    Vector3D.of(maxX, maxY, maxZ));
        }

        return null; // no intersection
    }","  public void test13()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D[] vector3DArray0 = new Vector3D[2];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      // Undeclared exception!
      try { 
        bounds3D0.intersection((Bounds3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Bounds3D"", e);
      }
  }"
2633,"    public boolean hasSize(final Precision.DoubleEquivalence precision) {
        final Vector3D diag = getDiagonal();

        return !precision.eqZero(diag.getX()) &&
                !precision.eqZero(diag.getY()) &&
                !precision.eqZero(diag.getZ());
    }","  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      // Undeclared exception!
      try { 
        bounds3D0.hasSize((Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Bounds3D"", e);
      }
  }"
2634,"    public static Bounds3D from(final Vector3D first, final Vector3D... more) {
        final Builder builder = builder();

        builder.add(first);
        builder.addAll(Arrays.asList(more));

        return builder.build();
    }","  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D[] vector3DArray0 = new Vector3D[5];
      // Undeclared exception!
      try { 
        Bounds3D.from(vector3D0, vector3DArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2635,"    public static Bounds3D from(final Vector3D first, final Vector3D... more) {
        final Builder builder = builder();

        builder.add(first);
        builder.addAll(Arrays.asList(more));

        return builder.build();
    }","  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Bounds3D.from((Iterable<Vector3D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Bounds3D$Builder"", e);
      }
  }"
2636,"    public boolean contains(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        final Vector3D min = getMin();
        final Vector3D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY() &&
                z >= min.getZ() && z <= max.getZ();
    }","  public void test17()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(0.0, (-0.999999999999998), 1084.0);
      Vector3D[] vector3DArray0 = new Vector3D[1];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        bounds3D0.contains((Vector3D) null, precision_DoubleEquivalence0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Bounds3D"", e);
      }
  }"
2637,"    public boolean contains(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        final Vector3D min = getMin();
        final Vector3D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY() &&
                z >= min.getZ() && z <= max.getZ();
    }","  public void test18()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[8];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3DArray0[1];
      vector3DArray0[3] = vector3D0;
      vector3DArray0[4] = vector3D0;
      vector3DArray0[5] = vector3D0;
      vector3DArray0[6] = vector3D0;
      vector3DArray0[7] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      // Undeclared exception!
      try { 
        bounds3D0.contains((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Bounds3D"", e);
      }
  }"
2638,"    public static Builder builder() {
        return new Builder();
    }","  public void test19()  throws Throwable  {
      Bounds3D.Builder bounds3D_Builder0 = Bounds3D.builder();
      // Undeclared exception!
      try { 
        bounds3D_Builder0.build();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Cannot construct bounds: no points given
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Bounds3D$Builder"", e);
      }
  }"
2639,"    public static Builder builder() {
        return new Builder();
    }","  public void test20()  throws Throwable  {
      Bounds3D.Builder bounds3D_Builder0 = Bounds3D.builder();
      Vector3D vector3D0 = Vector3D.NaN;
      bounds3D_Builder0.add(vector3D0);
      // Undeclared exception!
      try { 
        bounds3D_Builder0.build();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Invalid bounds: min= (NaN, NaN, NaN), max= (NaN, NaN, NaN)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Bounds3D$Builder"", e);
      }
  }"
2640,"    public static Builder builder() {
        return new Builder();
    }","  public void test21()  throws Throwable  {
      Bounds3D.Builder bounds3D_Builder0 = Bounds3D.builder();
      LinkedHashSet<Vector3D> linkedHashSet0 = new LinkedHashSet<Vector3D>();
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      linkedHashSet0.add(vector3D0);
      ArrayList<Vector3D> arrayList0 = new ArrayList<Vector3D>(linkedHashSet0);
      bounds3D_Builder0.addAll(arrayList0);
      // Undeclared exception!
      try { 
        bounds3D_Builder0.build();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Invalid bounds: min= (-Infinity, -Infinity, -Infinity), max= (-Infinity, -Infinity, -Infinity)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Bounds3D$Builder"", e);
      }
  }"
2641,"    public static Builder builder() {
        return new Builder();
    }","  public void test22()  throws Throwable  {
      Bounds3D.Builder bounds3D_Builder0 = Bounds3D.builder();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      bounds3D_Builder0.add((Vector3D) vector3D_Unit0);
      Bounds3D bounds3D0 = bounds3D_Builder0.build();
}"
2642,"    public static Builder builder() {
        return new Builder();
    }","  public void test23()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of((double) 1, (double) 1, Double.NEGATIVE_INFINITY);
      Bounds3D.Builder bounds3D_Builder0 = Bounds3D.builder();
      Bounds3D.Builder bounds3D_Builder1 = bounds3D_Builder0.add(vector3D0);
      boolean boolean0 = bounds3D_Builder1.hasBounds();
}"
2643,"    public static Builder builder() {
        return new Builder();
    }","  public void test24()  throws Throwable  {
      Bounds3D.Builder bounds3D_Builder0 = Bounds3D.builder();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      bounds3D_Builder0.add((Vector3D) vector3D_Unit0);
      boolean boolean0 = bounds3D_Builder0.hasBounds();
}"
2644,"    public static Builder builder() {
        return new Builder();
    }","  public void test25()  throws Throwable  {
      Bounds3D.Builder bounds3D_Builder0 = Bounds3D.builder();
      boolean boolean0 = bounds3D_Builder0.hasBounds();
}"
2645,"    public static Builder builder() {
        return new Builder();
    }","  public void test26()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Bounds3D.Builder bounds3D_Builder0 = Bounds3D.builder();
      Bounds3D.Builder bounds3D_Builder1 = bounds3D_Builder0.add(vector3D0);
      // Undeclared exception!
      try { 
        bounds3D_Builder1.build();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Invalid bounds: min= (Infinity, Infinity, Infinity), max= (Infinity, Infinity, Infinity)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Bounds3D$Builder"", e);
      }
  }"
2646,"    public static Bounds3D from(final Vector3D first, final Vector3D... more) {
        final Builder builder = builder();

        builder.add(first);
        builder.addAll(Arrays.asList(more));

        return builder.build();
    }","  public void test27()  throws Throwable  {
      ArrayList<Vector3D> arrayList0 = new ArrayList<Vector3D>();
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      arrayList0.add(vector3D0);
      // Undeclared exception!
      try { 
        Bounds3D.from((Iterable<Vector3D>) arrayList0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Invalid bounds: min= (-Infinity, -Infinity, -Infinity), max= (-Infinity, -Infinity, -Infinity)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Bounds3D$Builder"", e);
      }
  }"
2647,"    public static Bounds3D from(final Vector3D first, final Vector3D... more) {
        final Builder builder = builder();

        builder.add(first);
        builder.addAll(Arrays.asList(more));

        return builder.build();
    }","  public void test28()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1.0, (-863.6), Double.POSITIVE_INFINITY);
      Vector3D[] vector3DArray0 = new Vector3D[3];
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      vector3DArray0[2] = vector3D0;
      // Undeclared exception!
      try { 
        Bounds3D.from(vector3DArray0[1], vector3DArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Invalid bounds: min= (0.0, -863.6, 1.0), max= (1.0, 0.0, Infinity)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Bounds3D$Builder"", e);
      }
  }"
2648,"    public static Bounds3D from(final Vector3D first, final Vector3D... more) {
        final Builder builder = builder();

        builder.add(first);
        builder.addAll(Arrays.asList(more));

        return builder.build();
    }","  public void test29()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1.0, Double.POSITIVE_INFINITY, (-863.6));
      Vector3D[] vector3DArray0 = new Vector3D[3];
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      // Undeclared exception!
      try { 
        Bounds3D.from(vector3D0, vector3DArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Invalid bounds: min= (0.0, 0.0, -863.6), max= (1.0, Infinity, 1.0)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Bounds3D$Builder"", e);
      }
  }"
2649,"    public static Bounds3D from(final Vector3D first, final Vector3D... more) {
        final Builder builder = builder();

        builder.add(first);
        builder.addAll(Arrays.asList(more));

        return builder.build();
    }","  public void test30()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D1 = Vector3D.ZERO;
      Vector3D[] vector3DArray0 = new Vector3D[1];
      vector3DArray0[0] = vector3D1;
      // Undeclared exception!
      try { 
        Bounds3D.from(vector3D0, vector3DArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Invalid bounds: min= (0.0, 0.0, 0.0), max= (Infinity, Infinity, Infinity)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Bounds3D$Builder"", e);
      }
  }"
2650,"    public static Builder builder() {
        return new Builder();
    }","  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Bounds3D.Builder bounds3D_Builder0 = Bounds3D.builder();
      Bounds3D.Builder bounds3D_Builder1 = bounds3D_Builder0.add(vector3D0);
      boolean boolean0 = bounds3D_Builder1.hasBounds();
}"
2651,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        } else if (!(obj instanceof Bounds3D)) {
            return false;
        }

        final Bounds3D other = (Bounds3D) obj;

        return getMin().equals(other.getMin()) &&
                getMax().equals(other.getMax());
    }","  public void test32()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D vector3D0 = Vector3D.of(1539.2, (-1.0), 0.9999999999);
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      Bounds3D bounds3D1 = Bounds3D.from(vector3D0, vector3DArray0);
      boolean boolean0 = bounds3D0.equals(bounds3D1);
}"
2652,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        } else if (!(obj instanceof Bounds3D)) {
            return false;
        }

        final Bounds3D other = (Bounds3D) obj;

        return getMin().equals(other.getMin()) &&
                getMax().equals(other.getMax());
    }","  public void test33()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      Bounds3D bounds3D1 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      boolean boolean0 = bounds3D0.equals(bounds3D1);
}"
2653,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        } else if (!(obj instanceof Bounds3D)) {
            return false;
        }

        final Bounds3D other = (Bounds3D) obj;

        return getMin().equals(other.getMin()) &&
                getMax().equals(other.getMax());
    }","  public void test34()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      boolean boolean0 = bounds3D0.equals(bounds3D0);
}"
2654,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        } else if (!(obj instanceof Bounds3D)) {
            return false;
        }

        final Bounds3D other = (Bounds3D) obj;

        return getMin().equals(other.getMin()) &&
                getMax().equals(other.getMax());
    }","  public void test35()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      boolean boolean0 = bounds3D0.equals(vector3DArray0[2]);
}"
2655,"    public Bounds3D intersection(final Bounds3D other) {
        if (intersects(other)) {
            final Vector3D aMin = getMin();
            final Vector3D aMax = getMax();

            final Vector3D bMin = other.getMin();
            final Vector3D bMax = other.getMax();

            // get the max of the mins and the mins of the maxes
            final double minX = Math.max(aMin.getX(), bMin.getX());
            final double minY = Math.max(aMin.getY(), bMin.getY());
            final double minZ = Math.max(aMin.getZ(), bMin.getZ());

            final double maxX = Math.min(aMax.getX(), bMax.getX());
            final double maxY = Math.min(aMax.getY(), bMax.getY());
            final double maxZ = Math.min(aMax.getZ(), bMax.getZ());

            return new Bounds3D(
                    Vector3D.of(minX, minY, minZ),
                    Vector3D.of(maxX, maxY, maxZ));
        }

        return null; // no intersection
    }","  public void test36()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D vector3D0 = Vector3D.of(1539.2, (-1.0), 0.9999999999);
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      Bounds3D bounds3D1 = Bounds3D.from(vector3D0, vector3DArray0);
      Bounds3D bounds3D2 = bounds3D1.intersection(bounds3D0);
}"
2656,"    public boolean intersects(final Bounds3D other) {
        final Vector3D aMin = getMin();
        final Vector3D aMax = getMax();

        final Vector3D bMin = other.getMin();
        final Vector3D bMax = other.getMax();

        return aMin.getX() <= bMax.getX() && aMax.getX() >= bMin.getX() &&
                aMin.getY() <= bMax.getY() && aMax.getY() >= bMin.getY() &&
                aMin.getZ() <= bMax.getZ() && aMax.getZ() >= bMin.getZ();
    }","  public void test37()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Z;
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit1, vector3DArray0);
      Bounds3D bounds3D1 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      boolean boolean0 = bounds3D1.intersects(bounds3D0);
}"
2657,"    public boolean intersects(final Bounds3D other) {
        final Vector3D aMin = getMin();
        final Vector3D aMax = getMax();

        final Vector3D bMin = other.getMin();
        final Vector3D bMax = other.getMax();

        return aMin.getX() <= bMax.getX() && aMax.getX() >= bMin.getX() &&
                aMin.getY() <= bMax.getY() && aMax.getY() >= bMin.getY() &&
                aMin.getZ() <= bMax.getZ() && aMax.getZ() >= bMin.getZ();
    }","  public void test38()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      Bounds3D bounds3D1 = Bounds3D.from(vector3D0, vector3DArray0);
      boolean boolean0 = bounds3D0.intersects(bounds3D1);
}"
2658,"    public boolean intersects(final Bounds3D other) {
        final Vector3D aMin = getMin();
        final Vector3D aMax = getMax();

        final Vector3D bMin = other.getMin();
        final Vector3D bMax = other.getMax();

        return aMin.getX() <= bMax.getX() && aMax.getX() >= bMin.getX() &&
                aMin.getY() <= bMax.getY() && aMax.getY() >= bMin.getY() &&
                aMin.getZ() <= bMax.getZ() && aMax.getZ() >= bMin.getZ();
    }","  public void test39()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Z;
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit1, vector3DArray0);
      Bounds3D bounds3D1 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      boolean boolean0 = bounds3D0.intersects(bounds3D1);
}"
2659,"    public boolean intersects(final Bounds3D other) {
        final Vector3D aMin = getMin();
        final Vector3D aMax = getMax();

        final Vector3D bMin = other.getMin();
        final Vector3D bMax = other.getMax();

        return aMin.getX() <= bMax.getX() && aMax.getX() >= bMin.getX() &&
                aMin.getY() <= bMax.getY() && aMax.getY() >= bMin.getY() &&
                aMin.getZ() <= bMax.getZ() && aMax.getZ() >= bMin.getZ();
    }","  public void test40()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Z;
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit1, vector3DArray0);
      Bounds3D bounds3D1 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      boolean boolean0 = bounds3D1.intersects(bounds3D0);
}"
2660,"    public boolean intersects(final Bounds3D other) {
        final Vector3D aMin = getMin();
        final Vector3D aMax = getMax();

        final Vector3D bMin = other.getMin();
        final Vector3D bMax = other.getMax();

        return aMin.getX() <= bMax.getX() && aMax.getX() >= bMin.getX() &&
                aMin.getY() <= bMax.getY() && aMax.getY() >= bMin.getY() &&
                aMin.getZ() <= bMax.getZ() && aMax.getZ() >= bMin.getZ();
    }","  public void test41()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D vector3D0 = Vector3D.of(1537.1447537044326, 1537.1447537044326, 1537.1447537044326);
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      Bounds3D bounds3D1 = Bounds3D.from(vector3D0, vector3DArray0);
      boolean boolean0 = bounds3D0.intersects(bounds3D1);
}"
2661,"    public boolean intersects(final Bounds3D other) {
        final Vector3D aMin = getMin();
        final Vector3D aMax = getMax();

        final Vector3D bMin = other.getMin();
        final Vector3D bMax = other.getMax();

        return aMin.getX() <= bMax.getX() && aMax.getX() >= bMin.getX() &&
                aMin.getY() <= bMax.getY() && aMax.getY() >= bMin.getY() &&
                aMin.getZ() <= bMax.getZ() && aMax.getZ() >= bMin.getZ();
    }","  public void test42()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D vector3D0 = Vector3D.of(1539.2, (-1.0), 0.9999999999);
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      Bounds3D bounds3D1 = Bounds3D.from(vector3D0, vector3DArray0);
      boolean boolean0 = bounds3D1.intersects(bounds3D0);
}"
2662,"    public boolean contains(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        final Vector3D min = getMin();
        final Vector3D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY() &&
                z >= min.getZ() && z <= max.getZ();
    }","  public void test43()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      doReturn(true, true, false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      boolean boolean0 = bounds3D0.contains(vector3D0, precision_DoubleEquivalence0);
}"
2663,"    public boolean contains(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        final Vector3D min = getMin();
        final Vector3D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY() &&
                z >= min.getZ() && z <= max.getZ();
    }","  public void test44()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYZ;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Vector3D[] vector3DArray0 = new Vector3D[8];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      vector3DArray0[3] = vector3D0;
      vector3DArray0[4] = vector3D0;
      vector3DArray0[5] = vector3D0;
      vector3DArray0[6] = vector3D0;
      vector3DArray0[7] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      doReturn(true, true, true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      boolean boolean0 = bounds3D0.contains(vector3DArray0[7], precision_DoubleEquivalence0);
}"
2664,"    public boolean contains(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        final Vector3D min = getMin();
        final Vector3D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY() &&
                z >= min.getZ() && z <= max.getZ();
    }","  public void test45()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYZ;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Vector3D[] vector3DArray0 = new Vector3D[8];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      vector3DArray0[3] = vector3D0;
      vector3DArray0[4] = vector3D0;
      vector3DArray0[5] = vector3D0;
      vector3DArray0[6] = vector3D0;
      vector3DArray0[7] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      doReturn(true, true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      boolean boolean0 = bounds3D0.contains(vector3DArray0[7], precision_DoubleEquivalence0);
}"
2665,"    public boolean contains(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        final Vector3D min = getMin();
        final Vector3D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY() &&
                z >= min.getZ() && z <= max.getZ();
    }","  public void test46()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      boolean boolean0 = bounds3D0.contains(vector3D0, precision_DoubleEquivalence0);
}"
2666,"    public boolean contains(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        final Vector3D min = getMin();
        final Vector3D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY() &&
                z >= min.getZ() && z <= max.getZ();
    }","  public void test47()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      boolean boolean0 = bounds3D0.contains(vector3D0, precision_DoubleEquivalence0);
}"
2667,"    public boolean contains(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        final Vector3D min = getMin();
        final Vector3D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY() &&
                z >= min.getZ() && z <= max.getZ();
    }","  public void test48()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      doReturn(true, false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      boolean boolean0 = bounds3D0.contains(vector3D0, precision_DoubleEquivalence0);
}"
2668,"    public boolean contains(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        final Vector3D min = getMin();
        final Vector3D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY() &&
                z >= min.getZ() && z <= max.getZ();
    }","  public void test49()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      Vector3D[] vector3DArray0 = new Vector3D[6];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      vector3DArray0[3] = vector3D0;
      vector3DArray0[4] = vector3D0;
      vector3DArray0[5] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      boolean boolean0 = bounds3D0.contains(vector3DArray0[0], precision_DoubleEquivalence0);
}"
2669,"    public boolean contains(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        final Vector3D min = getMin();
        final Vector3D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY() &&
                z >= min.getZ() && z <= max.getZ();
    }","  public void test50()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Z;
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      boolean boolean0 = bounds3D0.contains((Vector3D) vector3D_Unit1);
}"
2670,"    public boolean contains(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        final Vector3D min = getMin();
        final Vector3D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY() &&
                z >= min.getZ() && z <= max.getZ();
    }","  public void test51()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      boolean boolean0 = bounds3D0.contains(vector3D0);
}"
2671,"    public boolean contains(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        final Vector3D min = getMin();
        final Vector3D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY() &&
                z >= min.getZ() && z <= max.getZ();
    }","  public void test52()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Z;
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit1, vector3DArray0);
      boolean boolean0 = bounds3D0.contains((Vector3D) vector3D_Unit0);
}"
2672,"    public boolean contains(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        final Vector3D min = getMin();
        final Vector3D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY() &&
                z >= min.getZ() && z <= max.getZ();
    }","  public void test53()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      boolean boolean0 = bounds3D0.contains((Vector3D) vector3D_Unit0);
}"
2673,"    public boolean contains(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        final Vector3D min = getMin();
        final Vector3D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY() &&
                z >= min.getZ() && z <= max.getZ();
    }","  public void test54()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D vector3D0 = Vector3D.of(1537.1447537044326, 1537.1447537044326, 1537.1447537044326);
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      boolean boolean0 = bounds3D0.contains(vector3D0);
}"
2674,"    public boolean contains(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        final Vector3D min = getMin();
        final Vector3D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY() &&
                z >= min.getZ() && z <= max.getZ();
    }","  public void test55()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_Z;
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit1, vector3DArray0);
      boolean boolean0 = bounds3D0.contains((Vector3D) vector3D_Unit0);
}"
2675,"    public boolean hasSize(final Precision.DoubleEquivalence precision) {
        final Vector3D diag = getDiagonal();

        return !precision.eqZero(diag.getX()) &&
                !precision.eqZero(diag.getY()) &&
                !precision.eqZero(diag.getZ());
    }","  public void test56()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      boolean boolean0 = bounds3D0.hasSize(precision_DoubleEquivalence0);
}"
2676,"    public boolean hasSize(final Precision.DoubleEquivalence precision) {
        final Vector3D diag = getDiagonal();

        return !precision.eqZero(diag.getX()) &&
                !precision.eqZero(diag.getY()) &&
                !precision.eqZero(diag.getZ());
    }","  public void test57()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      boolean boolean0 = bounds3D0.hasSize(precision_DoubleEquivalence0);
}"
2677,"    public boolean hasSize(final Precision.DoubleEquivalence precision) {
        final Vector3D diag = getDiagonal();

        return !precision.eqZero(diag.getX()) &&
                !precision.eqZero(diag.getY()) &&
                !precision.eqZero(diag.getZ());
    }","  public void test58()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D[] vector3DArray0 = new Vector3D[5];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      vector3DArray0[2] = (Vector3D) vector3D_Unit0;
      vector3DArray0[3] = (Vector3D) vector3D_Unit0;
      vector3DArray0[4] = (Vector3D) vector3D_Unit0;
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      boolean boolean0 = bounds3D0.hasSize(precision_DoubleEquivalence0);
}"
2678,"    public boolean hasSize(final Precision.DoubleEquivalence precision) {
        final Vector3D diag = getDiagonal();

        return !precision.eqZero(diag.getX()) &&
                !precision.eqZero(diag.getY()) &&
                !precision.eqZero(diag.getZ());
    }","  public void test59()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      boolean boolean0 = bounds3D0.hasSize(precision_DoubleEquivalence0);
}"
2679,"    public static Bounds3D from(final Vector3D first, final Vector3D... more) {
        final Builder builder = builder();

        builder.add(first);
        builder.addAll(Arrays.asList(more));

        return builder.build();
    }","  public void test60()  throws Throwable  {
      Bounds3D.Builder bounds3D_Builder0 = Bounds3D.builder();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D[] vector3DArray0 = new Vector3D[5];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      vector3DArray0[2] = (Vector3D) vector3D_Unit0;
      vector3DArray0[3] = (Vector3D) vector3D_Unit0;
      vector3DArray0[4] = (Vector3D) vector3D_Unit0;
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      Bounds3D.Builder bounds3D_Builder1 = bounds3D_Builder0.add(bounds3D0);
}"
2680,"    public int hashCode() {
        return Objects.hash(getMin(), getMax());
    }","  public void test61()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D[] vector3DArray0 = new Vector3D[3];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      Bounds3D bounds3D0 = Bounds3D.from(vector3D0, vector3DArray0);
      bounds3D0.hashCode();
  }"
2681,"    public Parallelepiped toRegion(final Precision.DoubleEquivalence precision) {
        return Parallelepiped.axisAligned(getMin(), getMax(), precision);
    }","  public void test62()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D[] vector3DArray0 = new Vector3D[5];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      vector3DArray0[2] = (Vector3D) vector3D_Unit0;
      vector3DArray0[3] = (Vector3D) vector3D_Unit0;
      vector3DArray0[4] = (Vector3D) vector3D_Unit0;
      Bounds3D bounds3D0 = Bounds3D.from((Vector3D) vector3D_Unit0, vector3DArray0);
      // Undeclared exception!
      try { 
        bounds3D0.toRegion((Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.shape.Parallelepiped"", e);
      }
  }"
2682,"    public Vector3D closest(final Vector3D pt) {
        final Vector3D normal = plane.getNormal();
        final Precision.DoubleEquivalence precision = plane.getPrecision();

        final List<Vector3D> vertices = getVertices();

        final Vector3D projPt = plane.project(pt);

        Vector3D edgeVec;
        Vector3D edgePlusVec;
        Vector3D testVec;

        Vector3D offsetVec;
        double offsetSign;
        double offset;
        int cmp;

        Vector3D boundaryVec;
        double boundaryPointT;
        Vector3D boundaryPoint;
        double boundaryPointDistSq;

        double closestBoundaryPointDistSq = Double.POSITIVE_INFINITY;
        Vector3D closestBoundaryPoint = null;

        Vector3D startVertex = vertices.get(vertices.size() - 1);
        for (final Vector3D nextVertex : vertices) {

            edgeVec = startVertex.vectorTo(nextVertex);
            edgePlusVec = edgeVec.cross(normal);

            testVec = startVertex.vectorTo(projPt);

            offsetVec = testVec.reject(edgeVec);
            offsetSign = Math.signum(offsetVec.dot(edgePlusVec));
            offset = offsetSign * offsetVec.norm();

            cmp = precision.compare(offset, 0.0);
            if (cmp >= 0) {
                // the point is on directly on the boundary or on its plus side; project the point onto the
                // boundary, taking care to restrict the point to the actual extent of the boundary,
                // and select the point with the shortest distance
                boundaryVec = testVec.subtract(offsetVec);
                boundaryPointT =
                        Math.signum(boundaryVec.dot(edgeVec)) * (boundaryVec.norm() / Vectors.checkedNorm(edgeVec));
                boundaryPointT = Math.max(0, Math.min(1, boundaryPointT));

                boundaryPoint = startVertex.lerp(nextVertex, boundaryPointT);

                boundaryPointDistSq = boundaryPoint.distanceSq(projPt);
                if (boundaryPointDistSq < closestBoundaryPointDistSq) {
                    closestBoundaryPointDistSq = boundaryPointDistSq;
                    closestBoundaryPoint = boundaryPoint;
                }
            }

            startVertex = nextVertex;
        }

        if (closestBoundaryPoint != null) {
            // the point is on the outside of the polygon; return the closest point on the boundary
            return closestBoundaryPoint;
        }

        // the projected point is on the inside of all boundaries and therefore on the inside of the subset
        return projPt;
    }","  public void test0()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-1281.5664889383), (-9.28), 0.0);
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit1, (-1837.39), (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit1, vector3D_Unit1);
      // Undeclared exception!
      try { 
        simpleTriangle3D0.closest((Vector3D) vector3D_Unit1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AbstractConvexPolygon3D"", e);
      }
  }"
2683,"    public Vector3D closest(final Vector3D pt) {
        final Vector3D normal = plane.getNormal();
        final Precision.DoubleEquivalence precision = plane.getPrecision();

        final List<Vector3D> vertices = getVertices();

        final Vector3D projPt = plane.project(pt);

        Vector3D edgeVec;
        Vector3D edgePlusVec;
        Vector3D testVec;

        Vector3D offsetVec;
        double offsetSign;
        double offset;
        int cmp;

        Vector3D boundaryVec;
        double boundaryPointT;
        Vector3D boundaryPoint;
        double boundaryPointDistSq;

        double closestBoundaryPointDistSq = Double.POSITIVE_INFINITY;
        Vector3D closestBoundaryPoint = null;

        Vector3D startVertex = vertices.get(vertices.size() - 1);
        for (final Vector3D nextVertex : vertices) {

            edgeVec = startVertex.vectorTo(nextVertex);
            edgePlusVec = edgeVec.cross(normal);

            testVec = startVertex.vectorTo(projPt);

            offsetVec = testVec.reject(edgeVec);
            offsetSign = Math.signum(offsetVec.dot(edgePlusVec));
            offset = offsetSign * offsetVec.norm();

            cmp = precision.compare(offset, 0.0);
            if (cmp >= 0) {
                // the point is on directly on the boundary or on its plus side; project the point onto the
                // boundary, taking care to restrict the point to the actual extent of the boundary,
                // and select the point with the shortest distance
                boundaryVec = testVec.subtract(offsetVec);
                boundaryPointT =
                        Math.signum(boundaryVec.dot(edgeVec)) * (boundaryVec.norm() / Vectors.checkedNorm(edgeVec));
                boundaryPointT = Math.max(0, Math.min(1, boundaryPointT));

                boundaryPoint = startVertex.lerp(nextVertex, boundaryPointT);

                boundaryPointDistSq = boundaryPoint.distanceSq(projPt);
                if (boundaryPointDistSq < closestBoundaryPointDistSq) {
                    closestBoundaryPointDistSq = boundaryPointDistSq;
                    closestBoundaryPoint = boundaryPoint;
                }
            }

            startVertex = nextVertex;
        }

        if (closestBoundaryPoint != null) {
            // the point is on the outside of the polygon; return the closest point on the boundary
            return closestBoundaryPoint;
        }

        // the projected point is on the inside of all boundaries and therefore on the inside of the subset
        return projPt;
    }","  public void test1()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      Plane plane0 = embeddingPlane0.reverse();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(plane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      // Undeclared exception!
      try { 
        simpleTriangle3D0.closest(vector3D_Unit0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
2684,"    public Vector3D closest(final Vector3D pt) {
        final Vector3D normal = plane.getNormal();
        final Precision.DoubleEquivalence precision = plane.getPrecision();

        final List<Vector3D> vertices = getVertices();

        final Vector3D projPt = plane.project(pt);

        Vector3D edgeVec;
        Vector3D edgePlusVec;
        Vector3D testVec;

        Vector3D offsetVec;
        double offsetSign;
        double offset;
        int cmp;

        Vector3D boundaryVec;
        double boundaryPointT;
        Vector3D boundaryPoint;
        double boundaryPointDistSq;

        double closestBoundaryPointDistSq = Double.POSITIVE_INFINITY;
        Vector3D closestBoundaryPoint = null;

        Vector3D startVertex = vertices.get(vertices.size() - 1);
        for (final Vector3D nextVertex : vertices) {

            edgeVec = startVertex.vectorTo(nextVertex);
            edgePlusVec = edgeVec.cross(normal);

            testVec = startVertex.vectorTo(projPt);

            offsetVec = testVec.reject(edgeVec);
            offsetSign = Math.signum(offsetVec.dot(edgePlusVec));
            offset = offsetSign * offsetVec.norm();

            cmp = precision.compare(offset, 0.0);
            if (cmp >= 0) {
                // the point is on directly on the boundary or on its plus side; project the point onto the
                // boundary, taking care to restrict the point to the actual extent of the boundary,
                // and select the point with the shortest distance
                boundaryVec = testVec.subtract(offsetVec);
                boundaryPointT =
                        Math.signum(boundaryVec.dot(edgeVec)) * (boundaryVec.norm() / Vectors.checkedNorm(edgeVec));
                boundaryPointT = Math.max(0, Math.min(1, boundaryPointT));

                boundaryPoint = startVertex.lerp(nextVertex, boundaryPointT);

                boundaryPointDistSq = boundaryPoint.distanceSq(projPt);
                if (boundaryPointDistSq < closestBoundaryPointDistSq) {
                    closestBoundaryPointDistSq = boundaryPointDistSq;
                    closestBoundaryPoint = boundaryPoint;
                }
            }

            startVertex = nextVertex;
        }

        if (closestBoundaryPoint != null) {
            // the point is on the outside of the polygon; return the closest point on the boundary
            return closestBoundaryPoint;
        }

        // the projected point is on the inside of all boundaries and therefore on the inside of the subset
        return projPt;
    }","  public void test2()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(plane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        simpleTriangle3D0.closest(vector3D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
2685,"    public Vector3D closest(final Vector3D pt) {
        final Vector3D normal = plane.getNormal();
        final Precision.DoubleEquivalence precision = plane.getPrecision();

        final List<Vector3D> vertices = getVertices();

        final Vector3D projPt = plane.project(pt);

        Vector3D edgeVec;
        Vector3D edgePlusVec;
        Vector3D testVec;

        Vector3D offsetVec;
        double offsetSign;
        double offset;
        int cmp;

        Vector3D boundaryVec;
        double boundaryPointT;
        Vector3D boundaryPoint;
        double boundaryPointDistSq;

        double closestBoundaryPointDistSq = Double.POSITIVE_INFINITY;
        Vector3D closestBoundaryPoint = null;

        Vector3D startVertex = vertices.get(vertices.size() - 1);
        for (final Vector3D nextVertex : vertices) {

            edgeVec = startVertex.vectorTo(nextVertex);
            edgePlusVec = edgeVec.cross(normal);

            testVec = startVertex.vectorTo(projPt);

            offsetVec = testVec.reject(edgeVec);
            offsetSign = Math.signum(offsetVec.dot(edgePlusVec));
            offset = offsetSign * offsetVec.norm();

            cmp = precision.compare(offset, 0.0);
            if (cmp >= 0) {
                // the point is on directly on the boundary or on its plus side; project the point onto the
                // boundary, taking care to restrict the point to the actual extent of the boundary,
                // and select the point with the shortest distance
                boundaryVec = testVec.subtract(offsetVec);
                boundaryPointT =
                        Math.signum(boundaryVec.dot(edgeVec)) * (boundaryVec.norm() / Vectors.checkedNorm(edgeVec));
                boundaryPointT = Math.max(0, Math.min(1, boundaryPointT));

                boundaryPoint = startVertex.lerp(nextVertex, boundaryPointT);

                boundaryPointDistSq = boundaryPoint.distanceSq(projPt);
                if (boundaryPointDistSq < closestBoundaryPointDistSq) {
                    closestBoundaryPointDistSq = boundaryPointDistSq;
                    closestBoundaryPoint = boundaryPoint;
                }
            }

            startVertex = nextVertex;
        }

        if (closestBoundaryPoint != null) {
            // the point is on the outside of the polygon; return the closest point on the boundary
            return closestBoundaryPoint;
        }

        // the projected point is on the inside of all boundaries and therefore on the inside of the subset
        return projPt;
    }","  public void test3()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(plane0, vector3D_Unit0, (Vector3D) null, vector3D_Unit0);
      SimpleTriangle3D simpleTriangle3D1 = simpleTriangle3D0.reverse();
      // Undeclared exception!
      try { 
        simpleTriangle3D1.closest((Vector3D) vector3D_Unit0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AbstractConvexPolygon3D"", e);
      }
  }"
2686,"    public double getSize() {
        // see http://geomalgorithms.com/a01-_area.html#3D-Planar-Polygons
        final List<Vector3D> vertices = getVertices();

        double crossSumX = 0.0;
        double crossSumY = 0.0;
        double crossSumZ = 0.0;

        Vector3D prevPt = vertices.get(vertices.size() - 1);
        Vector3D cross;
        for (final Vector3D curPt : vertices) {
            cross = prevPt.cross(curPt);

            crossSumX += cross.getX();
            crossSumY += cross.getY();
            crossSumZ += cross.getZ();

            prevPt = curPt;
        }

        return 0.5 * plane.getNormal().dot(Vector3D.of(crossSumX, crossSumY, crossSumZ));
    }","  public void test4()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-0.5322896399820491), (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      List<Vector3D> list0 = simpleTriangle3D0.getVertices();
      Vector<Vector3D> vector0 = new Vector<Vector3D>(list0);
      Vector3D vector3D0 = Vector3D.NaN;
      vector0.add(vector3D0);
      VertexListConvexPolygon3D vertexListConvexPolygon3D0 = new VertexListConvexPolygon3D(embeddingPlane0, vector0);
      double double0 = vertexListConvexPolygon3D0.getSize();
}"
2687,"    public double getSize() {
        // see http://geomalgorithms.com/a01-_area.html#3D-Planar-Polygons
        final List<Vector3D> vertices = getVertices();

        double crossSumX = 0.0;
        double crossSumY = 0.0;
        double crossSumZ = 0.0;

        Vector3D prevPt = vertices.get(vertices.size() - 1);
        Vector3D cross;
        for (final Vector3D curPt : vertices) {
            cross = prevPt.cross(curPt);

            crossSumX += cross.getX();
            crossSumY += cross.getY();
            crossSumZ += cross.getZ();

            prevPt = curPt;
        }

        return 0.5 * plane.getNormal().dot(Vector3D.of(crossSumX, crossSumY, crossSumZ));
    }","  public void test5()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_X;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D_Unit0, vector3D_Unit0, vector3D_Unit1);
      List<Vector3D> list0 = simpleTriangle3D0.getVertices();
      VertexListConvexPolygon3D vertexListConvexPolygon3D0 = new VertexListConvexPolygon3D((Plane) null, list0);
      // Undeclared exception!
      try { 
        vertexListConvexPolygon3D0.getSize();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AbstractConvexPolygon3D"", e);
      }
  }"
2688,"    public double getSize() {
        // see http://geomalgorithms.com/a01-_area.html#3D-Planar-Polygons
        final List<Vector3D> vertices = getVertices();

        double crossSumX = 0.0;
        double crossSumY = 0.0;
        double crossSumZ = 0.0;

        Vector3D prevPt = vertices.get(vertices.size() - 1);
        Vector3D cross;
        for (final Vector3D curPt : vertices) {
            cross = prevPt.cross(curPt);

            crossSumX += cross.getX();
            crossSumY += cross.getY();
            crossSumZ += cross.getZ();

            prevPt = curPt;
        }

        return 0.5 * plane.getNormal().dot(Vector3D.of(crossSumX, crossSumY, crossSumZ));
    }","  public void test6()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.651, (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      List<Vector3D> list0 = simpleTriangle3D0.getVertices();
      Vector<Vector3D> vector0 = new Vector<Vector3D>(list0);
      VertexListConvexPolygon3D vertexListConvexPolygon3D0 = new VertexListConvexPolygon3D(embeddingPlane0, vector0);
      AxisSequence axisSequence0 = AxisSequence.XYX;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      vector0.add(vector3D0);
      double double0 = vertexListConvexPolygon3D0.getSize();
}"
2689,"    public boolean isFull() {
        return false;
    }","  public void test7()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-1491.0), (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      boolean boolean0 = simpleTriangle3D0.isFull();
}"
2690,"    public boolean isEmpty() {
        return false;
    }","  public void test8()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-616.6), (-1485.8777994), (-616.6));
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-1.0), (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      boolean boolean0 = simpleTriangle3D0.isEmpty();
}"
2691,"    public double getSize() {
        // see http://geomalgorithms.com/a01-_area.html#3D-Planar-Polygons
        final List<Vector3D> vertices = getVertices();

        double crossSumX = 0.0;
        double crossSumY = 0.0;
        double crossSumZ = 0.0;

        Vector3D prevPt = vertices.get(vertices.size() - 1);
        Vector3D cross;
        for (final Vector3D curPt : vertices) {
            cross = prevPt.cross(curPt);

            crossSumX += cross.getX();
            crossSumY += cross.getY();
            crossSumZ += cross.getZ();

            prevPt = curPt;
        }

        return 0.5 * plane.getNormal().dot(Vector3D.of(crossSumX, crossSumY, crossSumZ));
    }","  public void test9()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Z;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit1, 967.9, (Precision.DoubleEquivalence) null);
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit0.negate();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit2, vector3D_Unit1);
      double double0 = simpleTriangle3D0.getSize();
}"
2692,"    public Plane getPlane() {
        return plane;
    }","  public void test10()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit1, vector3D_Unit1, (-1491.0), (Precision.DoubleEquivalence) null);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.rotate(vector3D_Unit1, quaternionRotation0);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane1, vector3D_Unit1, vector3D_Unit1, vector3D_Unit1);
      Plane plane0 = simpleTriangle3D0.getPlane();
}"
2693,"    public Plane getPlane() {
        return plane;
    }","  public void test11()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit1, vector3D_Unit1, (-1491.0), (Precision.DoubleEquivalence) null);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit1, (-1491.0));
      Plane plane0 = embeddingPlane0.rotate(vector3D_Unit0, quaternionRotation0);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(plane0, vector3D_Unit1, vector3D_Unit1, vector3D_Unit1);
      Plane plane1 = simpleTriangle3D0.getPlane();
}"
2694,"    public Plane getPlane() {
        return plane;
    }","  public void test12()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 2554.89, (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      SimpleTriangle3D simpleTriangle3D1 = simpleTriangle3D0.reverse();
      Plane plane0 = simpleTriangle3D1.getPlane();
}"
2695,"    public Vector3D getCentroid() {
        final List<Vector3D> vertices = getVertices();

        double areaSum = 0.0;
        double scaledCentroidSumX = 0.0;
        double scaledCentroidSumY = 0.0;
        double scaledCentroidSumZ = 0.0;

        final Iterator<Vector3D> it = vertices.iterator();

        final Vector3D startPt = it.next();

        Vector3D prevPt = it.next();
        Vector3D curPt;

        Vector3D prevVec = startPt.vectorTo(prevPt);
        Vector3D curVec;

        double triArea;
        Vector3D triCentroid;
        while (it.hasNext()) {
            curPt = it.next();
            curVec = startPt.vectorTo(curPt);

            triArea = 0.5 * prevVec.cross(curVec).norm();
            triCentroid = Vector3D.centroid(startPt, prevPt, curPt);

            areaSum += triArea;

            scaledCentroidSumX += triArea * triCentroid.getX();
            scaledCentroidSumY += triArea * triCentroid.getY();
            scaledCentroidSumZ += triArea * triCentroid.getZ();

            prevPt = curPt;
            prevVec = curVec;
        }

        if (areaSum > 0) {
            final double scale = 1 / areaSum;
            return Vector3D.of(
                        scale * scaledCentroidSumX,
                        scale * scaledCentroidSumY,
                        scale * scaledCentroidSumZ
                    );
        }

        // zero area, which means that the points are all linear; return the point midway between the
        // min and max points
        final Vector3D min = Vector3D.min(vertices);
        final Vector3D max = Vector3D.max(vertices);

        return min.lerp(max, 0.5);
    }","  public void test13()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-0.5322896399820491), (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      List<Vector3D> list0 = simpleTriangle3D0.getVertices();
      Vector<Vector3D> vector0 = new Vector<Vector3D>(list0);
      Vector3D vector3D0 = Vector3D.NaN;
      vector0.add(vector3D0);
      VertexListConvexPolygon3D vertexListConvexPolygon3D0 = new VertexListConvexPolygon3D(embeddingPlane0, vector0);
      Vector3D vector3D1 = vertexListConvexPolygon3D0.getCentroid();
}"
2696,"    public Vector3D getCentroid() {
        final List<Vector3D> vertices = getVertices();

        double areaSum = 0.0;
        double scaledCentroidSumX = 0.0;
        double scaledCentroidSumY = 0.0;
        double scaledCentroidSumZ = 0.0;

        final Iterator<Vector3D> it = vertices.iterator();

        final Vector3D startPt = it.next();

        Vector3D prevPt = it.next();
        Vector3D curPt;

        Vector3D prevVec = startPt.vectorTo(prevPt);
        Vector3D curVec;

        double triArea;
        Vector3D triCentroid;
        while (it.hasNext()) {
            curPt = it.next();
            curVec = startPt.vectorTo(curPt);

            triArea = 0.5 * prevVec.cross(curVec).norm();
            triCentroid = Vector3D.centroid(startPt, prevPt, curPt);

            areaSum += triArea;

            scaledCentroidSumX += triArea * triCentroid.getX();
            scaledCentroidSumY += triArea * triCentroid.getY();
            scaledCentroidSumZ += triArea * triCentroid.getZ();

            prevPt = curPt;
            prevVec = curVec;
        }

        if (areaSum > 0) {
            final double scale = 1 / areaSum;
            return Vector3D.of(
                        scale * scaledCentroidSumX,
                        scale * scaledCentroidSumY,
                        scale * scaledCentroidSumZ
                    );
        }

        // zero area, which means that the points are all linear; return the point midway between the
        // min and max points
        final Vector3D min = Vector3D.min(vertices);
        final Vector3D max = Vector3D.max(vertices);

        return min.lerp(max, 0.5);
    }","  public void test14()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D0, vector3D_Unit0, vector3D0);
      List<Vector3D> list0 = simpleTriangle3D0.getVertices();
      VertexListConvexPolygon3D vertexListConvexPolygon3D0 = new VertexListConvexPolygon3D((Plane) null, list0);
      Vector3D vector3D1 = vertexListConvexPolygon3D0.getCentroid();
}"
2697,"    public Vector3D getCentroid() {
        final List<Vector3D> vertices = getVertices();

        double areaSum = 0.0;
        double scaledCentroidSumX = 0.0;
        double scaledCentroidSumY = 0.0;
        double scaledCentroidSumZ = 0.0;

        final Iterator<Vector3D> it = vertices.iterator();

        final Vector3D startPt = it.next();

        Vector3D prevPt = it.next();
        Vector3D curPt;

        Vector3D prevVec = startPt.vectorTo(prevPt);
        Vector3D curVec;

        double triArea;
        Vector3D triCentroid;
        while (it.hasNext()) {
            curPt = it.next();
            curVec = startPt.vectorTo(curPt);

            triArea = 0.5 * prevVec.cross(curVec).norm();
            triCentroid = Vector3D.centroid(startPt, prevPt, curPt);

            areaSum += triArea;

            scaledCentroidSumX += triArea * triCentroid.getX();
            scaledCentroidSumY += triArea * triCentroid.getY();
            scaledCentroidSumZ += triArea * triCentroid.getZ();

            prevPt = curPt;
            prevVec = curVec;
        }

        if (areaSum > 0) {
            final double scale = 1 / areaSum;
            return Vector3D.of(
                        scale * scaledCentroidSumX,
                        scale * scaledCentroidSumY,
                        scale * scaledCentroidSumZ
                    );
        }

        // zero area, which means that the points are all linear; return the point midway between the
        // min and max points
        final Vector3D min = Vector3D.min(vertices);
        final Vector3D max = Vector3D.max(vertices);

        return min.lerp(max, 0.5);
    }","  public void test15()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.651, (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      List<Vector3D> list0 = simpleTriangle3D0.getVertices();
      Vector<Vector3D> vector0 = new Vector<Vector3D>(list0);
      VertexListConvexPolygon3D vertexListConvexPolygon3D0 = new VertexListConvexPolygon3D(embeddingPlane0, vector0);
      Vector3D vector3D0 = vertexListConvexPolygon3D0.getCentroid();
}"
2698,"    public Vector3D getCentroid() {
        final List<Vector3D> vertices = getVertices();

        double areaSum = 0.0;
        double scaledCentroidSumX = 0.0;
        double scaledCentroidSumY = 0.0;
        double scaledCentroidSumZ = 0.0;

        final Iterator<Vector3D> it = vertices.iterator();

        final Vector3D startPt = it.next();

        Vector3D prevPt = it.next();
        Vector3D curPt;

        Vector3D prevVec = startPt.vectorTo(prevPt);
        Vector3D curVec;

        double triArea;
        Vector3D triCentroid;
        while (it.hasNext()) {
            curPt = it.next();
            curVec = startPt.vectorTo(curPt);

            triArea = 0.5 * prevVec.cross(curVec).norm();
            triCentroid = Vector3D.centroid(startPt, prevPt, curPt);

            areaSum += triArea;

            scaledCentroidSumX += triArea * triCentroid.getX();
            scaledCentroidSumY += triArea * triCentroid.getY();
            scaledCentroidSumZ += triArea * triCentroid.getZ();

            prevPt = curPt;
            prevVec = curVec;
        }

        if (areaSum > 0) {
            final double scale = 1 / areaSum;
            return Vector3D.of(
                        scale * scaledCentroidSumX,
                        scale * scaledCentroidSumY,
                        scale * scaledCentroidSumZ
                    );
        }

        // zero area, which means that the points are all linear; return the point midway between the
        // min and max points
        final Vector3D min = Vector3D.min(vertices);
        final Vector3D max = Vector3D.max(vertices);

        return min.lerp(max, 0.5);
    }","  public void test16()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D0, vector3D0, vector3D0);
      Vector3D vector3D1 = simpleTriangle3D0.getCentroid();
}"
2699,"    public Bounds3D getBounds() {
        return Bounds3D.from(getVertices());
    }","  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D0, vector3D0, vector3D0);
      Bounds3D bounds3D0 = simpleTriangle3D0.getBounds();
}"
2700,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName())
            .append(""[normal= "")
            .append(getPlane().getNormal())
            .append("", vertices= "")
            .append(getVertices())
            .append(']');

        return sb.toString();
    }","  public void test18()  throws Throwable  {
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
      // Undeclared exception!
      try { 
        simpleTriangle3D0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AbstractConvexPolygon3D"", e);
      }
  }"
2701,"    public double getSize() {
        // see http://geomalgorithms.com/a01-_area.html#3D-Planar-Polygons
        final List<Vector3D> vertices = getVertices();

        double crossSumX = 0.0;
        double crossSumY = 0.0;
        double crossSumZ = 0.0;

        Vector3D prevPt = vertices.get(vertices.size() - 1);
        Vector3D cross;
        for (final Vector3D curPt : vertices) {
            cross = prevPt.cross(curPt);

            crossSumX += cross.getX();
            crossSumY += cross.getY();
            crossSumZ += cross.getZ();

            prevPt = curPt;
        }

        return 0.5 * plane.getNormal().dot(Vector3D.of(crossSumX, crossSumY, crossSumZ));
    }","  public void test19()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.5, (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      List<Vector3D> list0 = simpleTriangle3D0.getVertices();
      Vector<Vector3D> vector0 = new Vector<Vector3D>(list0);
      VertexListConvexPolygon3D vertexListConvexPolygon3D0 = new VertexListConvexPolygon3D(embeddingPlane0, vector0);
      vector0.setSize(0);
      // Undeclared exception!
      try { 
        vertexListConvexPolygon3D0.getSize();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException(""java.util.Vector"", e);
      }
  }"
2702,"    public PlaneConvexSubset.Embedded getEmbedded() {
        final EmbeddingPlane embeddingPlane = plane.getEmbedding();
        final List<Vector2D> subspaceVertices = embeddingPlane.toSubspace(getVertices());
        final ConvexArea area = ConvexArea.convexPolygonFromVertices(subspaceVertices,
                embeddingPlane.getPrecision());

        return new EmbeddedAreaPlaneConvexSubset(embeddingPlane, area);
    }","  public void test20()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-1491.0), (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      // Undeclared exception!
      try { 
        simpleTriangle3D0.getEmbedded();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Unable to create line segment: no vertex precision specified
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder"", e);
      }
  }"
2703,"    public Vector3D getCentroid() {
        final List<Vector3D> vertices = getVertices();

        double areaSum = 0.0;
        double scaledCentroidSumX = 0.0;
        double scaledCentroidSumY = 0.0;
        double scaledCentroidSumZ = 0.0;

        final Iterator<Vector3D> it = vertices.iterator();

        final Vector3D startPt = it.next();

        Vector3D prevPt = it.next();
        Vector3D curPt;

        Vector3D prevVec = startPt.vectorTo(prevPt);
        Vector3D curVec;

        double triArea;
        Vector3D triCentroid;
        while (it.hasNext()) {
            curPt = it.next();
            curVec = startPt.vectorTo(curPt);

            triArea = 0.5 * prevVec.cross(curVec).norm();
            triCentroid = Vector3D.centroid(startPt, prevPt, curPt);

            areaSum += triArea;

            scaledCentroidSumX += triArea * triCentroid.getX();
            scaledCentroidSumY += triArea * triCentroid.getY();
            scaledCentroidSumZ += triArea * triCentroid.getZ();

            prevPt = curPt;
            prevVec = curVec;
        }

        if (areaSum > 0) {
            final double scale = 1 / areaSum;
            return Vector3D.of(
                        scale * scaledCentroidSumX,
                        scale * scaledCentroidSumY,
                        scale * scaledCentroidSumZ
                    );
        }

        // zero area, which means that the points are all linear; return the point midway between the
        // min and max points
        final Vector3D min = Vector3D.min(vertices);
        final Vector3D max = Vector3D.max(vertices);

        return min.lerp(max, 0.5);
    }","  public void test21()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.5, (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      List<Vector3D> list0 = simpleTriangle3D0.getVertices();
      Vector<Vector3D> vector0 = new Vector<Vector3D>(list0);
      VertexListConvexPolygon3D vertexListConvexPolygon3D0 = new VertexListConvexPolygon3D(embeddingPlane0, vector0);
      vector0.setSize(0);
      // Undeclared exception!
      try { 
        vertexListConvexPolygon3D0.getCentroid();
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Vector$Itr"", e);
      }
  }"
2704,"    public Vector3D getCentroid() {
        final List<Vector3D> vertices = getVertices();

        double areaSum = 0.0;
        double scaledCentroidSumX = 0.0;
        double scaledCentroidSumY = 0.0;
        double scaledCentroidSumZ = 0.0;

        final Iterator<Vector3D> it = vertices.iterator();

        final Vector3D startPt = it.next();

        Vector3D prevPt = it.next();
        Vector3D curPt;

        Vector3D prevVec = startPt.vectorTo(prevPt);
        Vector3D curVec;

        double triArea;
        Vector3D triCentroid;
        while (it.hasNext()) {
            curPt = it.next();
            curVec = startPt.vectorTo(curPt);

            triArea = 0.5 * prevVec.cross(curVec).norm();
            triCentroid = Vector3D.centroid(startPt, prevPt, curPt);

            areaSum += triArea;

            scaledCentroidSumX += triArea * triCentroid.getX();
            scaledCentroidSumY += triArea * triCentroid.getY();
            scaledCentroidSumZ += triArea * triCentroid.getZ();

            prevPt = curPt;
            prevVec = curVec;
        }

        if (areaSum > 0) {
            final double scale = 1 / areaSum;
            return Vector3D.of(
                        scale * scaledCentroidSumX,
                        scale * scaledCentroidSumY,
                        scale * scaledCentroidSumZ
                    );
        }

        // zero area, which means that the points are all linear; return the point midway between the
        // min and max points
        final Vector3D min = Vector3D.min(vertices);
        final Vector3D max = Vector3D.max(vertices);

        return min.lerp(max, 0.5);
    }","  public void test22()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-1281.5664889383), (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, (Vector3D) null, vector3D_Unit0, vector3D_Unit0);
      // Undeclared exception!
      try { 
        simpleTriangle3D0.getCentroid();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
2705,"    public Bounds3D getBounds() {
        return Bounds3D.from(getVertices());
    }","  public void test23()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D0, vector3D_Unit0, vector3D0);
      // Undeclared exception!
      try { 
        simpleTriangle3D0.getBounds();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Invalid bounds: min= (0.0, 1.0, 0.0), max= (Infinity, Infinity, Infinity)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Bounds3D$Builder"", e);
      }
  }"
2706,"    public RegionLocation classify(final Vector3D pt) {
        if (plane.contains(pt)) {
            final List<Vector3D> vertices = getVertices();
            final Precision.DoubleEquivalence precision = plane.getPrecision();

            final Vector3D normal = plane.getNormal();
            Vector3D edgeVec;
            Vector3D edgePlusVec;
            Vector3D testVec;

            Vector3D offsetVec;
            double offsetSign;
            double offset;
            int cmp;

            boolean onBoundary = false;

            Vector3D startVertex = vertices.get(vertices.size() - 1);
            for (final Vector3D nextVertex : vertices) {

                edgeVec = startVertex.vectorTo(nextVertex);
                edgePlusVec = edgeVec.cross(normal);

                testVec = startVertex.vectorTo(pt);

                offsetVec = testVec.reject(edgeVec);
                offsetSign = Math.signum(offsetVec.dot(edgePlusVec));
                offset = offsetSign * offsetVec.norm();

                cmp = precision.compare(offset, 0.0);
                if (cmp > 0) {
                    // the point is on the plus side (outside) of a boundary
                    return RegionLocation.OUTSIDE;
                } else if (cmp == 0) {
                    onBoundary = true;
                }

                startVertex = nextVertex;
            }

            if (onBoundary) {
                // the point is not on the outside of any boundaries and is directly on at least one
                return RegionLocation.BOUNDARY;
            }

            // the point is on the inside of all boundaries
            return RegionLocation.INSIDE;
        }

        // the point is not on the plane
        return RegionLocation.OUTSIDE;
    }","  public void test24()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D0, vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        simpleTriangle3D0.classify(vector3D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AbstractConvexPolygon3D"", e);
      }
  }"
2707,"    public Plane getPlane() {
        return plane;
    }","  public void test25()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      Plane plane0 = simpleTriangle3D0.getPlane();
}"
2708,"    public Split<PlaneConvexSubset> split(final Hyperplane<Vector3D> splitter) {
        final Plane splitterPlane = (Plane) splitter;
        final List<Vector3D> vertices = getVertices();

        final int size = vertices.size();

        int minusPlusTransitionIdx = -1;
        Vector3D minusPlusInsertVertex = null;

        int plusMinusTransitionIdx = -1;
        Vector3D plusMinusInsertVertex = null;

        int transitionCount = 0;

        Vector3D curVertex;
        HyperplaneLocation curLoc;

        int lastSideIdx = -1;
        Vector3D lastSideVertex = null;
        HyperplaneLocation lastSideLoc = null;

        int lastBoundaryIdx = -1;

        for (int i = 0; i <= size || transitionCount == 1; ++i) {

            curVertex = vertices.get(i % size);
            curLoc = splitter.classify(curVertex);

            if (lastSideLoc == HyperplaneLocation.MINUS && curLoc == HyperplaneLocation.PLUS) {
                // transitioned from minus side to plus side
                minusPlusTransitionIdx = Math.max(lastSideIdx, lastBoundaryIdx);
                ++transitionCount;

                if (lastBoundaryIdx < 0) {
                    // no shared boundary point; compute a new vertex
                    minusPlusInsertVertex = splitterPlane.intersection(
                            Lines3D.fromPoints(lastSideVertex, curVertex, splitterPlane.getPrecision()));
                }
            } else if (lastSideLoc == HyperplaneLocation.PLUS && curLoc == HyperplaneLocation.MINUS) {
                // transitioned from plus side to minus side
                plusMinusTransitionIdx = Math.max(lastSideIdx, lastBoundaryIdx);
                ++transitionCount;

                if (lastBoundaryIdx < 0) {
                    // no shared boundary point; compute a new vertex
                    plusMinusInsertVertex = splitterPlane.intersection(
                            Lines3D.fromPoints(lastSideVertex, curVertex, splitterPlane.getPrecision()));
                }
            }

            if (curLoc == HyperplaneLocation.ON) {
                lastBoundaryIdx = i;
            } else {
                lastBoundaryIdx = -1;

                lastSideIdx = i;
                lastSideVertex = curVertex;
                lastSideLoc = curLoc;
            }
        }

        if (minusPlusTransitionIdx > -1 && plusMinusTransitionIdx > -1) {
            // we've split; compute the vertex list for each side
            final List<Vector3D> minusVertices =  buildPolygonSplitVertexList(
                    plusMinusTransitionIdx, plusMinusInsertVertex,
                    minusPlusTransitionIdx, minusPlusInsertVertex, vertices);
            final List<Vector3D> plusVertices = buildPolygonSplitVertexList(
                    minusPlusTransitionIdx, minusPlusInsertVertex,
                    plusMinusTransitionIdx, plusMinusInsertVertex, vertices);

            // delegate back to the Planes factory methods to determine the concrete types
            // for each side of the split
            return new Split<>(
                    Planes.fromConvexPlanarVertices(plane, minusVertices),
                    Planes.fromConvexPlanarVertices(plane, plusVertices));

        } else if (lastSideLoc == HyperplaneLocation.PLUS) {
            // we lie entirely on the plus side of the splitter
            return new Split<>(null, this);
        } else if (lastSideLoc == HyperplaneLocation.MINUS) {
            // we lie entirely on the minus side of the splitter
            return new Split<>(this, null);
        }

        // we lie entirely on the splitter
        return new Split<>(null, null);
    }","  public void test26()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-3379.2156456329853), (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      // Undeclared exception!
      try { 
        simpleTriangle3D0.split(embeddingPlane0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.partitioning.AbstractHyperplane"", e);
      }
  }"
2709,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName())
            .append(""[normal= "")
            .append(getPlane().getNormal())
            .append("", vertices= "")
            .append(getVertices())
            .append(']');

        return sb.toString();
    }","  public void test27()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-172.70274903296), (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      String string0 = simpleTriangle3D0.toString();
}"
2710,"    public PlaneConvexSubset.Embedded getEmbedded() {
        final EmbeddingPlane embeddingPlane = plane.getEmbedding();
        final List<Vector2D> subspaceVertices = embeddingPlane.toSubspace(getVertices());
        final ConvexArea area = ConvexArea.convexPolygonFromVertices(subspaceVertices,
                embeddingPlane.getPrecision());

        return new EmbeddedAreaPlaneConvexSubset(embeddingPlane, area);
    }","  public void test28()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(plane0, vector3D_Unit0, vector3D_Unit0, (Vector3D) null);
      // Undeclared exception!
      try { 
        simpleTriangle3D0.getEmbedded();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.EmbeddingPlane"", e);
      }
  }"
2711,"    public Bounds3D getBounds() {
        return Bounds3D.from(getVertices());
    }","  public void test29()  throws Throwable  {
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
      // Undeclared exception!
      try { 
        simpleTriangle3D0.getBounds();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Bounds3D$Builder"", e);
      }
  }"
2712,"    public Bounds3D getBounds(final BoundarySource3D src) {
        final Bounds3D.Builder builder = Bounds3D.builder();

        try (Stream<PlaneConvexSubset> stream = src.boundaryStream()) {
            final Iterator<PlaneConvexSubset> it = stream.iterator();

            PlaneConvexSubset boundary;
            while (it.hasNext()) {
                boundary = it.next();

                if (!boundary.isFinite()) {
                    return null;
                }

                builder.addAll(boundary.getVertices());
            }
        }

        return builder.hasBounds() ?
                builder.build() :
                null;
    }","  public void test0()  throws Throwable  {
      BoundarySourceBoundsBuilder3D boundarySourceBoundsBuilder3D0 = new BoundarySourceBoundsBuilder3D();
      // Undeclared exception!
      try { 
        boundarySourceBoundsBuilder3D0.getBounds((BoundarySource3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.BoundarySourceBoundsBuilder3D"", e);
      }
  }"
2713,"    public Bounds3D getBounds(final BoundarySource3D src) {
        final Bounds3D.Builder builder = Bounds3D.builder();

        try (Stream<PlaneConvexSubset> stream = src.boundaryStream()) {
            final Iterator<PlaneConvexSubset> it = stream.iterator();

            PlaneConvexSubset boundary;
            while (it.hasNext()) {
                boundary = it.next();

                if (!boundary.isFinite()) {
                    return null;
                }

                builder.addAll(boundary.getVertices());
            }
        }

        return builder.hasBounds() ?
                builder.build() :
                null;
    }","  public void test1()  throws Throwable  {
      BoundarySourceBoundsBuilder3D boundarySourceBoundsBuilder3D0 = new BoundarySourceBoundsBuilder3D();
      Stack<VertexListConvexPolygon3D> stack0 = new Stack<VertexListConvexPolygon3D>();
      BoundaryList3D boundaryList3D0 = new BoundaryList3D(stack0);
      stack0.add((VertexListConvexPolygon3D) null);
      // Undeclared exception!
      try { 
        boundarySourceBoundsBuilder3D0.getBounds(boundaryList3D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.BoundarySourceBoundsBuilder3D"", e);
      }
  }"
2714,"    public Bounds3D getBounds(final BoundarySource3D src) {
        final Bounds3D.Builder builder = Bounds3D.builder();

        try (Stream<PlaneConvexSubset> stream = src.boundaryStream()) {
            final Iterator<PlaneConvexSubset> it = stream.iterator();

            PlaneConvexSubset boundary;
            while (it.hasNext()) {
                boundary = it.next();

                if (!boundary.isFinite()) {
                    return null;
                }

                builder.addAll(boundary.getVertices());
            }
        }

        return builder.hasBounds() ?
                builder.build() :
                null;
    }","  public void test2()  throws Throwable  {
      BoundarySourceBoundsBuilder3D boundarySourceBoundsBuilder3D0 = new BoundarySourceBoundsBuilder3D();
      ArrayList<SimpleTriangle3D> arrayList0 = new ArrayList<SimpleTriangle3D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(0.0, 1339.187635483226, 0.0);
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 1339.187635483226, (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      arrayList0.add(simpleTriangle3D0);
      BoundaryList3D boundaryList3D0 = new BoundaryList3D(arrayList0);
      Bounds3D bounds3D0 = boundarySourceBoundsBuilder3D0.getBounds(boundaryList3D0);
}"
2715,"    public Bounds3D getBounds(final BoundarySource3D src) {
        final Bounds3D.Builder builder = Bounds3D.builder();

        try (Stream<PlaneConvexSubset> stream = src.boundaryStream()) {
            final Iterator<PlaneConvexSubset> it = stream.iterator();

            PlaneConvexSubset boundary;
            while (it.hasNext()) {
                boundary = it.next();

                if (!boundary.isFinite()) {
                    return null;
                }

                builder.addAll(boundary.getVertices());
            }
        }

        return builder.hasBounds() ?
                builder.build() :
                null;
    }","  public void test3()  throws Throwable  {
      BoundarySourceBoundsBuilder3D boundarySourceBoundsBuilder3D0 = new BoundarySourceBoundsBuilder3D();
      ArrayList<SimpleTriangle3D> arrayList0 = new ArrayList<SimpleTriangle3D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(0.0, 1339.187635483226, 0.0);
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 1339.187635483226, (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(embeddingPlane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      arrayList0.add(simpleTriangle3D0);
      BoundaryList3D boundaryList3D0 = new BoundaryList3D(arrayList0);
      RegionBSPTree3D regionBSPTree3D0 = boundaryList3D0.toTree();
      Bounds3D bounds3D0 = boundarySourceBoundsBuilder3D0.getBounds(regionBSPTree3D0);
}"
2716,"    public Bounds3D getBounds(final BoundarySource3D src) {
        final Bounds3D.Builder builder = Bounds3D.builder();

        try (Stream<PlaneConvexSubset> stream = src.boundaryStream()) {
            final Iterator<PlaneConvexSubset> it = stream.iterator();

            PlaneConvexSubset boundary;
            while (it.hasNext()) {
                boundary = it.next();

                if (!boundary.isFinite()) {
                    return null;
                }

                builder.addAll(boundary.getVertices());
            }
        }

        return builder.hasBounds() ?
                builder.build() :
                null;
    }","  public void test4()  throws Throwable  {
      BoundarySourceBoundsBuilder3D boundarySourceBoundsBuilder3D0 = new BoundarySourceBoundsBuilder3D();
      ArrayList<PlaneConvexSubset> arrayList0 = new ArrayList<PlaneConvexSubset>();
      ConvexVolume convexVolume0 = new ConvexVolume(arrayList0);
      Bounds3D bounds3D0 = boundarySourceBoundsBuilder3D0.getBounds(convexVolume0);
}"
2717,"    static ConvexPolygon3D fromConvexPlanarVertices(final Plane plane, final List<Vector3D> vertices) {
        final int size = vertices.size();

        if (size == EuclideanUtils.TRIANGLE_VERTEX_COUNT) {
            return new SimpleTriangle3D(plane, vertices.get(0), vertices.get(1), vertices.get(2));
        }

        return new VertexListConvexPolygon3D(plane, vertices);
    }","  public void test0()  throws Throwable  {
      Vector<Vector3D> vector0 = new Vector<Vector3D>();
      vector0.setSize(2422);
      ConvexPolygon3D convexPolygon3D0 = Planes.fromConvexPlanarVertices((Plane) null, vector0);
}"
2718,"    static void validatePlanesEquivalent(final Plane expected, final Plane actual) {
        if (!expected.eq(actual, expected.getPrecision())) {
            throw new IllegalArgumentException(""Arguments do not represent the same plane. Expected "" +
                    expected + "" but was "" + actual + ""."");
        }
    }","  public void test1()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Plane plane0 = new Plane(vector3D_Unit0, 1.0, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      // Undeclared exception!
      try { 
        Planes.validatePlanesEquivalent(embeddingPlane0, plane0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
2719,"    public static List<ConvexPolygon3D> indexedConvexPolygons(final Vector3D[] vertices, final int[][] faceIndices,
            final Precision.DoubleEquivalence precision) {
        return indexedConvexPolygons(Arrays.asList(vertices), faceIndices, precision);
    }","  public void test2()  throws Throwable  {
      LinkedList<Vector3D> linkedList0 = new LinkedList<Vector3D>();
      int[][] intArray0 = new int[6][1];
      int[] intArray1 = new int[3];
      intArray1[0] = (-1677);
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        Planes.indexedConvexPolygons((List<? extends Vector3D>) linkedList0, intArray0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1677, Size: 0
         //
         verifyException(""java.util.LinkedList"", e);
      }
  }"
2720,"    public static List<Triangle3D> indexedTriangles(final Vector3D[] vertices, final int[][] faceIndices,
            final Precision.DoubleEquivalence precision) {
        return indexedTriangles(Arrays.asList(vertices), faceIndices, precision);
    }","  public void test3()  throws Throwable  {
      ArrayList<Vector3D> arrayList0 = new ArrayList<Vector3D>();
      int[][] intArray0 = new int[8][4];
      int[] intArray1 = new int[1];
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        Planes.indexedTriangles((List<? extends Vector3D>) arrayList0, intArray0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid number of vertex indices for face at index 0: expected 3 but found 1
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes"", e);
      }
  }"
2721,"    public static Triangle3D triangleFromVertices(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Precision.DoubleEquivalence precision) {
        final Plane plane = fromPoints(p1, p2, p3, precision);
        return new SimpleTriangle3D(plane, p1, p2, p3);
    }","  public void test4()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D vector3D0 = Vector3D.NaN;
      // Undeclared exception!
      try { 
        Planes.triangleFromVertices(vector3D0, vector3D0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
2722,"    public static Plane fromPoints(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Precision.DoubleEquivalence precision) {
        return fromPoints(Arrays.asList(p1, p2, p3), precision);
    }","  public void test5()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D[] vector3DArray0 = new Vector3D[4];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      // Undeclared exception!
      try { 
        Planes.fromPoints(vector3DArray0[0], (Vector3D) vector3D_Unit0, vector3DArray0[2], (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
2723,"    static List<Triangle3D> convexPolygonToTriangleFan(final Plane plane, final List<Vector3D> vertices) {
        return EuclideanUtils.convexPolygonToTriangleFan(vertices,
                tri -> new SimpleTriangle3D(plane, tri.get(0), tri.get(1), tri.get(2)));
    }","  public void test6()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Plane plane0 = Planes.fromPointAndNormal(vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(plane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      List<Vector3D> list0 = simpleTriangle3D0.getVertices();
      Planes.convexPolygonToTriangleFan(plane0, list0);
}"
2724,"    static <T extends PlaneSubset> Split<T> subspaceSplit(final Plane splitter, final T subset,
            final BiFunction<? super EmbeddingPlane, ? super HyperplaneBoundedRegion<Vector2D>, T> factory) {

        final EmbeddingPlane thisPlane = subset.getPlane().getEmbedding();

        final Line3D intersection = thisPlane.intersection(splitter);
        if (intersection == null) {
            return getNonIntersectingSplitResult(splitter, subset);
        } else {
            final EmbeddingPlane embeddingPlane = subset.getPlane().getEmbedding();

            // the lines intersect; split the subregion
            final Vector3D intersectionOrigin = intersection.getOrigin();
            final Vector2D subspaceP1 = embeddingPlane.toSubspace(intersectionOrigin);
            final Vector2D subspaceP2 = embeddingPlane.toSubspace(intersectionOrigin.add(intersection.getDirection()));

            final Line subspaceSplitter = Lines.fromPoints(subspaceP1, subspaceP2, thisPlane.getPrecision());

            final Split<? extends HyperplaneBoundedRegion<Vector2D>> split =
                    subset.getEmbedded().getSubspaceRegion().split(subspaceSplitter);
            final SplitLocation subspaceSplitLoc = split.getLocation();

            if (SplitLocation.MINUS == subspaceSplitLoc) {
                return new Split<>(subset, null);
            } else if (SplitLocation.PLUS == subspaceSplitLoc) {
                return new Split<>(null, subset);
            }

            final T minus = (split.getMinus() != null) ? factory.apply(thisPlane, split.getMinus()) : null;
            final T plus = (split.getPlus() != null) ? factory.apply(thisPlane, split.getPlus()) : null;

            return new Split<>(minus, plus);
        }
    }","  public void test7()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Plane plane0 = new Plane(vector3D_Unit0, 1.0, (Precision.DoubleEquivalence) null);
      PlaneConvexSubset planeConvexSubset0 = plane0.span();
      BiFunction<Object, Object, EmbeddedAreaPlaneConvexSubset> biFunction0 = (BiFunction<Object, Object, EmbeddedAreaPlaneConvexSubset>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Planes.subspaceSplit(plane0, (EmbeddedAreaPlaneConvexSubset) planeConvexSubset0, (BiFunction<? super EmbeddingPlane, ? super HyperplaneBoundedRegion<Vector2D>, EmbeddedAreaPlaneConvexSubset>) biFunction0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
2725,"    public static List<Triangle3D> indexedTriangles(final Vector3D[] vertices, final int[][] faceIndices,
            final Precision.DoubleEquivalence precision) {
        return indexedTriangles(Arrays.asList(vertices), faceIndices, precision);
    }","  public void test8()  throws Throwable  {
      Vector3D[] vector3DArray0 = new Vector3D[0];
      int[][] intArray0 = new int[0][7];
      List<Triangle3D> list0 = Planes.indexedTriangles(vector3DArray0, intArray0, (Precision.DoubleEquivalence) null);
}"
2726,"    public static EmbeddingPlane fromPointAndPlaneVectors(final Vector3D p, final Vector3D u, final Vector3D v,
            final Precision.DoubleEquivalence precision) {
        final Vector3D.Unit uNorm = u.normalize();
        final Vector3D.Unit vNorm = uNorm.orthogonal(v);
        final Vector3D.Unit wNorm = uNorm.cross(vNorm).normalize();
        final double originOffset = -p.dot(wNorm);

        return new EmbeddingPlane(uNorm, vNorm, wNorm, originOffset, precision);
    }","  public void test9()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D vector3D0 = Vector3D.of((-774.233047158135), (-2688.802562569059), 3960.807749191827);
      EmbeddingPlane embeddingPlane0 = Planes.fromPointAndPlaneVectors(vector3D_Unit1, vector3D0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
}"
2727,"    public static EmbeddingPlane fromPointAndPlaneVectors(final Vector3D p, final Vector3D u, final Vector3D v,
            final Precision.DoubleEquivalence precision) {
        final Vector3D.Unit uNorm = u.normalize();
        final Vector3D.Unit vNorm = uNorm.orthogonal(v);
        final Vector3D.Unit wNorm = uNorm.cross(vNorm).normalize();
        final double originOffset = -p.dot(wNorm);

        return new EmbeddingPlane(uNorm, vNorm, wNorm, originOffset, precision);
    }","  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1376.941683925691, (-3106.3274259577865), (-1257.0));
      EmbeddingPlane embeddingPlane0 = Planes.fromPointAndPlaneVectors(vector3D0, vector3D0, vector3D0, (Precision.DoubleEquivalence) null);
}"
2728,"    public static Plane fromPointAndNormal(final Vector3D p, final Vector3D normal,
            final Precision.DoubleEquivalence precision) {
        final Vector3D.Unit unitNormal = normal.normalize();
        final double originOffset = -p.dot(unitNormal);

        return new Plane(unitNormal, originOffset, precision);
    }","  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = Vector3D.of(1368.988457, (-3105.2900485), (-1257.0));
      Plane plane0 = Planes.fromPointAndNormal(vector3D0, vector3D1, (Precision.DoubleEquivalence) null);
}"
2729,"    public static Plane fromPointAndNormal(final Vector3D p, final Vector3D normal,
            final Precision.DoubleEquivalence precision) {
        final Vector3D.Unit unitNormal = normal.normalize();
        final double originOffset = -p.dot(unitNormal);

        return new Plane(unitNormal, originOffset, precision);
    }","  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D1 = Vector3D.of(1368.988457, (-3105.2900485), (-1257.0));
      Plane plane0 = Planes.fromPointAndNormal(vector3D0, vector3D1, (Precision.DoubleEquivalence) null);
}"
2730,"    public static Plane fromNormal(final Vector3D normal, final Precision.DoubleEquivalence precision) {
        return fromPointAndNormal(Vector3D.ZERO, normal, precision);
    }","  public void test13()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Plane plane0 = Planes.fromNormal(vector3D_Unit0, (Precision.DoubleEquivalence) null);
}"
2731,"    public static Triangle3D triangleFromVertices(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Precision.DoubleEquivalence precision) {
        final Plane plane = fromPoints(p1, p2, p3, precision);
        return new SimpleTriangle3D(plane, p1, p2, p3);
    }","  public void test14()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      // Undeclared exception!
      try { 
        Planes.triangleFromVertices((Vector3D) null, vector3D_Unit0, (Vector3D) null, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
2732,"    public static PlaneConvexSubset subsetFromConvexArea(final EmbeddingPlane plane, final ConvexArea area) {
        if (area.isFinite()) {
            // prefer a vertex-based representation for finite areas
            final List<Vector3D> vertices = plane.toSpace(area.getVertices());
            return fromConvexPlanarVertices(plane, vertices);
        }

        return new EmbeddedAreaPlaneConvexSubset(plane, area);
    }","  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Planes.subsetFromConvexArea((EmbeddingPlane) null, (ConvexArea) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes"", e);
      }
  }"
2733,"    static Vector3D intersection(final PlaneSubset planeSubset, final Line3D line) {
        final Vector3D pt = planeSubset.getPlane().intersection(line);
        return (pt != null && planeSubset.contains(pt)) ? pt : null;
    }","  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Planes.intersection((PlaneSubset) null, (LineConvexSubset3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes"", e);
      }
  }"
2734,"    static Vector3D intersection(final PlaneSubset planeSubset, final Line3D line) {
        final Vector3D pt = planeSubset.getPlane().intersection(line);
        return (pt != null && planeSubset.contains(pt)) ? pt : null;
    }","  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Planes.intersection((PlaneSubset) null, (Line3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes"", e);
      }
  }"
2735,"    public static List<Triangle3D> indexedTriangles(final Vector3D[] vertices, final int[][] faceIndices,
            final Precision.DoubleEquivalence precision) {
        return indexedTriangles(Arrays.asList(vertices), faceIndices, precision);
    }","  public void test18()  throws Throwable  {
      Vector3D[] vector3DArray0 = new Vector3D[0];
      // Undeclared exception!
      try { 
        Planes.indexedTriangles(vector3DArray0, (int[][]) null, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes"", e);
      }
  }"
2736,"    public static List<Triangle3D> indexedTriangles(final Vector3D[] vertices, final int[][] faceIndices,
            final Precision.DoubleEquivalence precision) {
        return indexedTriangles(Arrays.asList(vertices), faceIndices, precision);
    }","  public void test19()  throws Throwable  {
      int[][] intArray0 = new int[7][4];
      int[] intArray1 = new int[3];
      intArray1[2] = 649;
      intArray0[0] = intArray1;
      Vector3D[] vector3DArray0 = new Vector3D[1];
      // Undeclared exception!
      try { 
        Planes.indexedTriangles(vector3DArray0, intArray0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 649
         //
         verifyException(""java.util.Arrays$ArrayList"", e);
      }
  }"
2737,"    public static List<Triangle3D> indexedTriangles(final Vector3D[] vertices, final int[][] faceIndices,
            final Precision.DoubleEquivalence precision) {
        return indexedTriangles(Arrays.asList(vertices), faceIndices, precision);
    }","  public void test20()  throws Throwable  {
      LinkedList<Vector3D> linkedList0 = new LinkedList<Vector3D>();
      // Undeclared exception!
      try { 
        Planes.indexedTriangles((List<? extends Vector3D>) linkedList0, (int[][]) null, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes"", e);
      }
  }"
2738,"    public static List<Triangle3D> indexedTriangles(final Vector3D[] vertices, final int[][] faceIndices,
            final Precision.DoubleEquivalence precision) {
        return indexedTriangles(Arrays.asList(vertices), faceIndices, precision);
    }","  public void test21()  throws Throwable  {
      ArrayList<Vector3D> arrayList0 = new ArrayList<Vector3D>();
      int[][] intArray0 = new int[5][5];
      int[] intArray1 = new int[3];
      intArray1[0] = (-58);
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        Planes.indexedTriangles((List<? extends Vector3D>) arrayList0, intArray0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2739,"    public static List<ConvexPolygon3D> indexedConvexPolygons(final Vector3D[] vertices, final int[][] faceIndices,
            final Precision.DoubleEquivalence precision) {
        return indexedConvexPolygons(Arrays.asList(vertices), faceIndices, precision);
    }","  public void test22()  throws Throwable  {
      Vector3D[] vector3DArray0 = new Vector3D[0];
      int[][] intArray0 = new int[6][0];
      int[] intArray1 = new int[6];
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        Planes.indexedConvexPolygons(vector3DArray0, intArray0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException(""java.util.Arrays$ArrayList"", e);
      }
  }"
2740,"    public static List<ConvexPolygon3D> indexedConvexPolygons(final Vector3D[] vertices, final int[][] faceIndices,
            final Precision.DoubleEquivalence precision) {
        return indexedConvexPolygons(Arrays.asList(vertices), faceIndices, precision);
    }","  public void test23()  throws Throwable  {
      int[][] intArray0 = new int[8][7];
      // Undeclared exception!
      try { 
        Planes.indexedConvexPolygons((List<? extends Vector3D>) null, intArray0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes"", e);
      }
  }"
2741,"    public static List<ConvexPolygon3D> indexedConvexPolygons(final Vector3D[] vertices, final int[][] faceIndices,
            final Precision.DoubleEquivalence precision) {
        return indexedConvexPolygons(Arrays.asList(vertices), faceIndices, precision);
    }","  public void test24()  throws Throwable  {
      Stack<Vector3D> stack0 = new Stack<Vector3D>();
      int[][] intArray0 = new int[5][1];
      int[] intArray1 = new int[8];
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        Planes.indexedConvexPolygons((List<? extends Vector3D>) stack0, intArray0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException(""java.util.Vector"", e);
      }
  }"
2742,"    public static Plane fromPoints(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Precision.DoubleEquivalence precision) {
        return fromPoints(Arrays.asList(p1, p2, p3), precision);
    }","  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Planes.fromPoints((Vector3D) null, (Vector3D) null, (Vector3D) null, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Points do not define a plane: [null, null, null]
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes$PlaneBuilder"", e);
      }
  }"
2743,"    public static Plane fromPoints(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Precision.DoubleEquivalence precision) {
        return fromPoints(Arrays.asList(p1, p2, p3), precision);
    }","  public void test26()  throws Throwable  {
      LinkedHashSet<Vector3D> linkedHashSet0 = new LinkedHashSet<Vector3D>();
      // Undeclared exception!
      try { 
        Planes.fromPoints((Collection<Vector3D>) linkedHashSet0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Points do not define a plane: []
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes$PlaneBuilder"", e);
      }
  }"
2744,"    public static EmbeddingPlane fromPointAndPlaneVectors(final Vector3D p, final Vector3D u, final Vector3D v,
            final Precision.DoubleEquivalence precision) {
        final Vector3D.Unit uNorm = u.normalize();
        final Vector3D.Unit vNorm = uNorm.orthogonal(v);
        final Vector3D.Unit wNorm = uNorm.cross(vNorm).normalize();
        final double originOffset = -p.dot(wNorm);

        return new EmbeddingPlane(uNorm, vNorm, wNorm, originOffset, precision);
    }","  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Planes.fromPointAndPlaneVectors((Vector3D) null, (Vector3D) null, (Vector3D) null, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes"", e);
      }
  }"
2745,"    public static EmbeddingPlane fromPointAndPlaneVectors(final Vector3D p, final Vector3D u, final Vector3D v,
            final Precision.DoubleEquivalence precision) {
        final Vector3D.Unit uNorm = u.normalize();
        final Vector3D.Unit vNorm = uNorm.orthogonal(v);
        final Vector3D.Unit wNorm = uNorm.cross(vNorm).normalize();
        final double originOffset = -p.dot(wNorm);

        return new EmbeddingPlane(uNorm, vNorm, wNorm, originOffset, precision);
    }","  public void test28()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      // Undeclared exception!
      try { 
        Planes.fromPointAndPlaneVectors(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
2746,"    public static Plane fromPointAndNormal(final Vector3D p, final Vector3D normal,
            final Precision.DoubleEquivalence precision) {
        final Vector3D.Unit unitNormal = normal.normalize();
        final double originOffset = -p.dot(unitNormal);

        return new Plane(unitNormal, originOffset, precision);
    }","  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Planes.fromPointAndNormal((Vector3D) null, (Vector3D) null, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes"", e);
      }
  }"
2747,"    public static Plane fromPointAndNormal(final Vector3D p, final Vector3D normal,
            final Precision.DoubleEquivalence precision) {
        final Vector3D.Unit unitNormal = normal.normalize();
        final double originOffset = -p.dot(unitNormal);

        return new Plane(unitNormal, originOffset, precision);
    }","  public void test30()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      // Undeclared exception!
      try { 
        Planes.fromPointAndNormal(vector3D0, vector3D0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
2748,"    public static Plane fromNormal(final Vector3D normal, final Precision.DoubleEquivalence precision) {
        return fromPointAndNormal(Vector3D.ZERO, normal, precision);
    }","  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        Planes.fromNormal((Vector3D) null, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes"", e);
      }
  }"
2749,"    static ConvexPolygon3D fromConvexPlanarVertices(final Plane plane, final List<Vector3D> vertices) {
        final int size = vertices.size();

        if (size == EuclideanUtils.TRIANGLE_VERTEX_COUNT) {
            return new SimpleTriangle3D(plane, vertices.get(0), vertices.get(1), vertices.get(2));
        }

        return new VertexListConvexPolygon3D(plane, vertices);
    }","  public void test32()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(4.149515568880993E180, 4.149515568880993E180, 4.149515568880993E180);
      Plane plane0 = Planes.fromPointAndNormal(vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        Planes.fromConvexPlanarVertices(plane0, (List<Vector3D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes"", e);
      }
  }"
2750,"    public static List<PlaneConvexSubset> extrudeVertexLoop(final List<Vector2D> vertices,
            final EmbeddingPlane plane, final Vector3D extrusionVector, final Precision.DoubleEquivalence precision) {
        final LinePath path = LinePath.fromVertexLoop(vertices, precision);
        return extrude(path, plane, extrusionVector, precision);
    }","  public void test33()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.ABSOLUTE;
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 0.0, 0.0, 0.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      // Undeclared exception!
      try { 
        Planes.extrudeVertexLoop((List<Vector2D>) null, (EmbeddingPlane) null, vector3D0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder"", e);
      }
  }"
2751,"    public static List<PlaneConvexSubset> extrudeVertexLoop(final List<Vector2D> vertices,
            final EmbeddingPlane plane, final Vector3D extrusionVector, final Precision.DoubleEquivalence precision) {
        final LinePath path = LinePath.fromVertexLoop(vertices, precision);
        return extrude(path, plane, extrusionVector, precision);
    }","  public void test34()  throws Throwable  {
      LinkedList<Vector2D> linkedList0 = new LinkedList<Vector2D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      linkedList0.add((Vector2D) null);
      // Undeclared exception!
      try { 
        Planes.extrudeVertexLoop(linkedList0, embeddingPlane0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Unable to create line segment: no vertex precision specified
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder"", e);
      }
  }"
2752,"    public static List<PlaneConvexSubset> extrude(final LinePath path, final EmbeddingPlane plane,
            final Vector3D extrusionVector, final Precision.DoubleEquivalence precision) {
        return extrude(path.toTree(), plane, extrusionVector, precision);
    }","  public void test35()  throws Throwable  {
      LinePath linePath0 = LinePath.empty();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 1.0, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        Planes.extrude(linePath0, embeddingPlane0, (Vector3D) vector3D_Unit0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
2753,"    public static List<PlaneConvexSubset> extrude(final LinePath path, final EmbeddingPlane plane,
            final Vector3D extrusionVector, final Precision.DoubleEquivalence precision) {
        return extrude(path.toTree(), plane, extrusionVector, precision);
    }","  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1368.988457, (-3105.2900485), (-1257.0));
      RegionBSPTree2D regionBSPTree2D0 = new RegionBSPTree2D();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(vector3D0);
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 1555.93666159, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        Planes.extrude(regionBSPTree2D0, embeddingPlane0, vector3D0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
2754,"    static List<Triangle3D> convexPolygonToTriangleFan(final Plane plane, final List<Vector3D> vertices) {
        return EuclideanUtils.convexPolygonToTriangleFan(vertices,
                tri -> new SimpleTriangle3D(plane, tri.get(0), tri.get(1), tri.get(2)));
    }","  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        Planes.convexPolygonToTriangleFan((Plane) null, (List<Vector3D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.EuclideanUtils"", e);
      }
  }"
2755,"    public static ConvexPolygon3D convexPolygonFromVertices(final Collection<Vector3D> pts,
            final Precision.DoubleEquivalence precision) {
        final List<Vector3D> vertices = new ArrayList<>(pts.size());
        final Plane plane = new PlaneBuilder(pts, precision).buildForConvexPolygon(vertices);

        // make sure that the first point is not repeated at the end
        final Vector3D firstPt = vertices.get(0);
        final Vector3D lastPt = vertices.get(vertices.size() - 1);
        if (firstPt.eq(lastPt, precision)) {
            vertices.remove(vertices.size() - 1);
        }

        if (vertices.size() == EuclideanUtils.TRIANGLE_VERTEX_COUNT) {
            return new SimpleTriangle3D(plane, vertices.get(0), vertices.get(1), vertices.get(2));
        }
        return new VertexListConvexPolygon3D(plane, vertices);
    }","  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        Planes.convexPolygonFromVertices((Collection<Vector3D>) null, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes"", e);
      }
  }"
2756,"    public static List<ConvexPolygon3D> indexedConvexPolygons(final Vector3D[] vertices, final int[][] faceIndices,
            final Precision.DoubleEquivalence precision) {
        return indexedConvexPolygons(Arrays.asList(vertices), faceIndices, precision);
    }","  public void test39()  throws Throwable  {
      Stack<Vector3D> stack0 = new Stack<Vector3D>();
      int[][] intArray0 = new int[5][1];
      int[] intArray1 = new int[8];
      stack0.add((Vector3D) null);
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        Planes.indexedConvexPolygons((List<? extends Vector3D>) stack0, intArray0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Points do not define a plane: [null, null, null, null, null, null, null, null]
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes$PlaneBuilder"", e);
      }
  }"
2757,"    public static List<ConvexPolygon3D> indexedConvexPolygons(final Vector3D[] vertices, final int[][] faceIndices,
            final Precision.DoubleEquivalence precision) {
        return indexedConvexPolygons(Arrays.asList(vertices), faceIndices, precision);
    }","  public void test40()  throws Throwable  {
      LinkedList<Vector3D> linkedList0 = new LinkedList<Vector3D>();
      int[][] intArray0 = new int[6][1];
      // Undeclared exception!
      try { 
        Planes.indexedConvexPolygons((List<? extends Vector3D>) linkedList0, intArray0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid number of vertex indices for face at index 0: required at least 3 but found 1
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes"", e);
      }
  }"
2758,"    public static List<ConvexPolygon3D> indexedConvexPolygons(final Vector3D[] vertices, final int[][] faceIndices,
            final Precision.DoubleEquivalence precision) {
        return indexedConvexPolygons(Arrays.asList(vertices), faceIndices, precision);
    }","  public void test41()  throws Throwable  {
      LinkedList<Vector3D> linkedList0 = new LinkedList<Vector3D>();
      int[][] intArray0 = new int[0][6];
      List<ConvexPolygon3D> list0 = Planes.indexedConvexPolygons((List<? extends Vector3D>) linkedList0, intArray0, (Precision.DoubleEquivalence) null);
}"
2759,"    public static List<Triangle3D> indexedTriangles(final Vector3D[] vertices, final int[][] faceIndices,
            final Precision.DoubleEquivalence precision) {
        return indexedTriangles(Arrays.asList(vertices), faceIndices, precision);
    }","  public void test42()  throws Throwable  {
      ArrayList<Vector3D> arrayList0 = new ArrayList<Vector3D>();
      int[][] intArray0 = new int[5][5];
      int[] intArray1 = new int[3];
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        Planes.indexedTriangles((List<? extends Vector3D>) arrayList0, intArray0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException(""java.util.ArrayList"", e);
      }
  }"
2760,"    public static List<Triangle3D> indexedTriangles(final Vector3D[] vertices, final int[][] faceIndices,
            final Precision.DoubleEquivalence precision) {
        return indexedTriangles(Arrays.asList(vertices), faceIndices, precision);
    }","  public void test43()  throws Throwable  {
      ArrayList<Vector3D> arrayList0 = new ArrayList<Vector3D>();
      int[][] intArray0 = new int[3][9];
      // Undeclared exception!
      try { 
        Planes.indexedTriangles((List<? extends Vector3D>) arrayList0, intArray0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid number of vertex indices for face at index 0: expected 3 but found 9
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes"", e);
      }
  }"
2761,"    public static List<PlaneConvexSubset> extrude(final LinePath path, final EmbeddingPlane plane,
            final Vector3D extrusionVector, final Precision.DoubleEquivalence precision) {
        return extrude(path.toTree(), plane, extrusionVector, precision);
    }","  public void test44()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = RegionBSPTree2D.empty();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        Planes.extrude(regionBSPTree2D0, embeddingPlane0, (Vector3D) vector3D_Unit0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
2762,"    public static Plane fromPoints(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Precision.DoubleEquivalence precision) {
        return fromPoints(Arrays.asList(p1, p2, p3), precision);
    }","  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        Planes.fromPoints((Collection<Vector3D>) null, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes$PlaneBuilder"", e);
      }
  }"
2763,"    public static List<ConvexPolygon3D> indexedConvexPolygons(final Vector3D[] vertices, final int[][] faceIndices,
            final Precision.DoubleEquivalence precision) {
        return indexedConvexPolygons(Arrays.asList(vertices), faceIndices, precision);
    }","  public void test46()  throws Throwable  {
      Vector3D[] vector3DArray0 = new Vector3D[8];
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      int[][] intArray0 = new int[11][4];
      // Undeclared exception!
      try { 
        Planes.indexedConvexPolygons(vector3DArray0, intArray0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
2764,"    static ConvexPolygon3D fromConvexPlanarVertices(final Plane plane, final List<Vector3D> vertices) {
        final int size = vertices.size();

        if (size == EuclideanUtils.TRIANGLE_VERTEX_COUNT) {
            return new SimpleTriangle3D(plane, vertices.get(0), vertices.get(1), vertices.get(2));
        }

        return new VertexListConvexPolygon3D(plane, vertices);
    }","  public void test47()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(1698.5276133214652, 1698.5276133214652, 1698.5276133214652);
      Plane plane0 = new Plane(vector3D_Unit0, 1698.5276133214652, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D(plane0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      List<Vector3D> list0 = simpleTriangle3D0.getVertices();
      ConvexPolygon3D convexPolygon3D0 = Planes.fromConvexPlanarVertices(embeddingPlane0, list0);
}"
2765,"    static ConvexPolygon3D fromConvexPlanarVertices(final Plane plane, final List<Vector3D> vertices) {
        final int size = vertices.size();

        if (size == EuclideanUtils.TRIANGLE_VERTEX_COUNT) {
            return new SimpleTriangle3D(plane, vertices.get(0), vertices.get(1), vertices.get(2));
        }

        return new VertexListConvexPolygon3D(plane, vertices);
    }","  public void test48()  throws Throwable  {
      Vector<Vector3D> vector0 = new Vector<Vector3D>();
      // Undeclared exception!
      try { 
        Planes.fromConvexPlanarVertices((Plane) null, vector0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Convex polygon requires at least 3 points; found 0
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.VertexListConvexPolygon3D"", e);
      }
  }"
2766,"    public static List<ConvexPolygon3D> indexedConvexPolygons(final Vector3D[] vertices, final int[][] faceIndices,
            final Precision.DoubleEquivalence precision) {
        return indexedConvexPolygons(Arrays.asList(vertices), faceIndices, precision);
    }","  public void test49()  throws Throwable  {
      Vector3D[] vector3DArray0 = new Vector3D[0];
      int[][] intArray0 = new int[2][1];
      // Undeclared exception!
      try { 
        Planes.indexedConvexPolygons(vector3DArray0, intArray0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid number of vertex indices for face at index 0: required at least 3 but found 1
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes"", e);
      }
  }"
2767,"    public static List<ConvexPolygon3D> indexedConvexPolygons(final Vector3D[] vertices, final int[][] faceIndices,
            final Precision.DoubleEquivalence precision) {
        return indexedConvexPolygons(Arrays.asList(vertices), faceIndices, precision);
    }","  public void test50()  throws Throwable  {
      Vector3D[] vector3DArray0 = new Vector3D[1];
      int[][] intArray0 = new int[0][4];
      List<ConvexPolygon3D> list0 = Planes.indexedConvexPolygons(vector3DArray0, intArray0, (Precision.DoubleEquivalence) null);
}"
2768,"    public static List<Triangle3D> indexedTriangles(final Vector3D[] vertices, final int[][] faceIndices,
            final Precision.DoubleEquivalence precision) {
        return indexedTriangles(Arrays.asList(vertices), faceIndices, precision);
    }","  public void test51()  throws Throwable  {
      int[][] intArray0 = new int[7][4];
      int[] intArray1 = new int[3];
      intArray0[0] = intArray1;
      Vector3D[] vector3DArray0 = new Vector3D[1];
      // Undeclared exception!
      try { 
        Planes.indexedTriangles(vector3DArray0, intArray0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Points do not define a plane: [null, null, null]
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes$PlaneBuilder"", e);
      }
  }"
2769,"    public static List<Triangle3D> indexedTriangles(final Vector3D[] vertices, final int[][] faceIndices,
            final Precision.DoubleEquivalence precision) {
        return indexedTriangles(Arrays.asList(vertices), faceIndices, precision);
    }","  public void test52()  throws Throwable  {
      int[][] intArray0 = new int[0][9];
      List<Triangle3D> list0 = Planes.indexedTriangles((List<? extends Vector3D>) null, intArray0, (Precision.DoubleEquivalence) null);
}"
2770,"    public static PlaneConvexSubset subsetFromConvexArea(final EmbeddingPlane plane, final ConvexArea area) {
        if (area.isFinite()) {
            // prefer a vertex-based representation for finite areas
            final List<Vector3D> vertices = plane.toSpace(area.getVertices());
            return fromConvexPlanarVertices(plane, vertices);
        }

        return new EmbeddedAreaPlaneConvexSubset(plane, area);
    }","  public void test53()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-643.696548108386), (-715.01986), (-715.01986));
      EmbeddingPlane embeddingPlane0 = Planes.fromPointAndPlaneVectors(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      HashSet<Line> hashSet0 = new HashSet<Line>(8);
      ConvexArea convexArea0 = ConvexArea.fromBounds((Iterable<Line>) hashSet0);
      Planes.subsetFromConvexArea(embeddingPlane0, convexArea0);
}"
2771,"    public static List<PlaneConvexSubset> extrudeVertexLoop(final List<Vector2D> vertices,
            final EmbeddingPlane plane, final Vector3D extrusionVector, final Precision.DoubleEquivalence precision) {
        final LinePath path = LinePath.fromVertexLoop(vertices, precision);
        return extrude(path, plane, extrusionVector, precision);
    }","  public void test54()  throws Throwable  {
      LinkedList<Vector2D> linkedList0 = new LinkedList<Vector2D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        Planes.extrudeVertexLoop(linkedList0, embeddingPlane0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
2772,"    static List<Triangle3D> convexPolygonToTriangleFan(final Plane plane, final List<Vector3D> vertices) {
        return EuclideanUtils.convexPolygonToTriangleFan(vertices,
                tri -> new SimpleTriangle3D(plane, tri.get(0), tri.get(1), tri.get(2)));
    }","  public void test55()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = Planes.fromPointAndNormal(vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      ArrayList<Vector3D> arrayList0 = new ArrayList<Vector3D>();
      // Undeclared exception!
      try { 
        Planes.convexPolygonToTriangleFan(plane0, arrayList0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot create triangle fan: 3 or more vertices are required but found only 0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.EuclideanUtils"", e);
      }
  }"
2773,"    public static Triangle3D triangleFromVertices(final Vector3D p1, final Vector3D p2, final Vector3D p3,
            final Precision.DoubleEquivalence precision) {
        final Plane plane = fromPoints(p1, p2, p3, precision);
        return new SimpleTriangle3D(plane, p1, p2, p3);
    }","  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        Planes.triangleFromVertices((Vector3D) null, (Vector3D) null, (Vector3D) null, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Points do not define a plane: [null, null, null]
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes$PlaneBuilder"", e);
      }
  }"
2774,"    public static Plane fromNormal(final Vector3D normal, final Precision.DoubleEquivalence precision) {
        return fromPointAndNormal(Vector3D.ZERO, normal, precision);
    }","  public void test57()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      // Undeclared exception!
      try { 
        Planes.fromNormal(vector3D0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
2775,"    public static List<PlaneConvexSubset> extrude(final LinePath path, final EmbeddingPlane plane,
            final Vector3D extrusionVector, final Precision.DoubleEquivalence precision) {
        return extrude(path.toTree(), plane, extrusionVector, precision);
    }","  public void test58()  throws Throwable  {
      LinePath linePath0 = LinePath.empty();
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D1 = Vector3D.of(1370.0299019704473, 1370.0299019704473, 1370.0299019704473);
      Plane plane0 = Planes.fromPointAndNormal(vector3D0, vector3D1, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      // Undeclared exception!
      try { 
        Planes.extrude(linePath0, embeddingPlane0, vector3D1, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
2776,"    public static ConvexPolygon3D convexPolygonFromVertices(final Collection<Vector3D> pts,
            final Precision.DoubleEquivalence precision) {
        final List<Vector3D> vertices = new ArrayList<>(pts.size());
        final Plane plane = new PlaneBuilder(pts, precision).buildForConvexPolygon(vertices);

        // make sure that the first point is not repeated at the end
        final Vector3D firstPt = vertices.get(0);
        final Vector3D lastPt = vertices.get(vertices.size() - 1);
        if (firstPt.eq(lastPt, precision)) {
            vertices.remove(vertices.size() - 1);
        }

        if (vertices.size() == EuclideanUtils.TRIANGLE_VERTEX_COUNT) {
            return new SimpleTriangle3D(plane, vertices.get(0), vertices.get(1), vertices.get(2));
        }
        return new VertexListConvexPolygon3D(plane, vertices);
    }","  public void test59()  throws Throwable  {
      ArrayList<Vector3D> arrayList0 = new ArrayList<Vector3D>();
      // Undeclared exception!
      try { 
        Planes.convexPolygonFromVertices(arrayList0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Points do not define a plane: []
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes$PlaneBuilder"", e);
      }
  }"
2777,"    public Plane getHyperplane() {
        return getPlane();
    }","  public void test0()  throws Throwable  {
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null, false);
      Plane plane0 = embeddedTreePlaneSubset0.getHyperplane();
}"
2778,"    public Plane getHyperplane() {
        return getPlane();
    }","  public void test1()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-2514.785571042), 2533.1777845, (-1608.18));
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      TreeSet<Line> treeSet0 = new TreeSet<Line>();
      ConvexArea convexArea0 = ConvexArea.fromBounds((Iterable<Line>) treeSet0);
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset(embeddingPlane0, convexArea0);
      Plane plane0 = embeddedAreaPlaneConvexSubset0.getHyperplane();
}"
2779,"    public Plane getHyperplane() {
        return getPlane();
    }","  public void test2()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Plane plane0 = new Plane(vector3D_Unit0, 34.0, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset(embeddingPlane0, false);
      Plane plane1 = embeddedTreePlaneSubset0.getHyperplane();
}"
2780,"    public Vector3D intersection(final Line3D line) {
        return Planes.intersection(this, line);
    }","  public void test3()  throws Throwable  {
      ConvexArea convexArea0 = ConvexArea.full();
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset((EmbeddingPlane) null, convexArea0);
      // Undeclared exception!
      try { 
        embeddedAreaPlaneConvexSubset0.intersection((Line3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes"", e);
      }
  }"
2781,"    public Plane getHyperplane() {
        return getPlane();
    }","  public void test4()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      SimpleTriangle3D simpleTriangle3D0 = new SimpleTriangle3D((Plane) null, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      Plane plane0 = simpleTriangle3D0.getHyperplane();
}"
2782,"    public Vector3D intersection(final Line3D line) {
        return Planes.intersection(this, line);
    }","  public void test5()  throws Throwable  {
      ConvexArea convexArea0 = ConvexArea.full();
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset((EmbeddingPlane) null, convexArea0);
      // Undeclared exception!
      try { 
        embeddedAreaPlaneConvexSubset0.intersection((LineConvexSubset3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Planes"", e);
      }
  }"
2783,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (obj == null || obj.getClass() != EmbeddingPlane.class) {
            return false;
        }

        final EmbeddingPlane other = (EmbeddingPlane) obj;

        return Objects.equals(this.getNormal(), other.getNormal()) &&
                Double.compare(this.getOriginOffset(), other.getOriginOffset()) == 0 &&
                Objects.equals(this.u, other.u) &&
                Objects.equals(this.v, other.v) &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test0()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Plane plane0 = new Plane(vector3D_Unit0, 4715.92812372521, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.translate(vector3D_Unit0);
      boolean boolean0 = embeddingPlane0.equals(embeddingPlane1);
}"
2784,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (obj == null || obj.getClass() != EmbeddingPlane.class) {
            return false;
        }

        final EmbeddingPlane other = (EmbeddingPlane) obj;

        return Objects.equals(this.getNormal(), other.getNormal()) &&
                Double.compare(this.getOriginOffset(), other.getOriginOffset()) == 0 &&
                Objects.equals(this.u, other.u) &&
                Objects.equals(this.v, other.v) &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test1()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Plane plane0 = new Plane(vector3D_Unit0, 4715.92812372521, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.translate(vector3D_Unit0);
      boolean boolean0 = embeddingPlane0.equals(embeddingPlane1);
}"
2785,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (obj == null || obj.getClass() != EmbeddingPlane.class) {
            return false;
        }

        final EmbeddingPlane other = (EmbeddingPlane) obj;

        return Objects.equals(this.getNormal(), other.getNormal()) &&
                Double.compare(this.getOriginOffset(), other.getOriginOffset()) == 0 &&
                Objects.equals(this.u, other.u) &&
                Objects.equals(this.v, other.v) &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test2()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Plane plane0 = new Plane(vector3D_Unit0, 4715.92812372521, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.translate(vector3D_Unit0);
      boolean boolean0 = embeddingPlane0.equals(embeddingPlane1);
}"
2786,"    public EmbeddingPlane transform(final Transform<Vector3D> transform) {
        final Vector3D origin = getOrigin();
        final Vector3D plusU = origin.add(u);
        final Vector3D plusV = origin.add(v);

        final Vector3D tOrigin = transform.apply(origin);
        final Vector3D tPlusU = transform.apply(plusU);
        final Vector3D tPlusV = transform.apply(plusV);

        final Vector3D.Unit tU = tOrigin.directionTo(tPlusU);
        final Vector3D.Unit tV = tOrigin.directionTo(tPlusV);
        final Vector3D.Unit tW = tU.cross(tV).normalize();

        final double tOriginOffset = -tOrigin.dot(tW);

        return new EmbeddingPlane(tU, tV, tW, tOriginOffset, getPrecision());
    }","  public void test3()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit0.directionTo((Vector3D) vector3D_Unit1);
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit2, vector3D_Unit1, vector3D_Unit2, 0.0, (Precision.DoubleEquivalence) null);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale((Vector3D) vector3D_Unit2);
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.transform(affineTransformMatrix3D0);
}"
2787,"    public EmbeddingPlane transform(final Transform<Vector3D> transform) {
        final Vector3D origin = getOrigin();
        final Vector3D plusU = origin.add(u);
        final Vector3D plusV = origin.add(v);

        final Vector3D tOrigin = transform.apply(origin);
        final Vector3D tPlusU = transform.apply(plusU);
        final Vector3D tPlusV = transform.apply(plusV);

        final Vector3D.Unit tU = tOrigin.directionTo(tPlusU);
        final Vector3D.Unit tV = tOrigin.directionTo(tPlusV);
        final Vector3D.Unit tW = tU.cross(tV).normalize();

        final double tOriginOffset = -tOrigin.dot(tW);

        return new EmbeddingPlane(tU, tV, tW, tOriginOffset, getPrecision());
    }","  public void test4()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(1.0, 1.0, 1.0, 1.0);
      Vector3D.Unit vector3D_Unit0 = (Vector3D.Unit)quaternionRotation0.getAxis();
      Plane plane0 = new Plane(vector3D_Unit0, (-0.999999999999998), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.transform(quaternionRotation0);
}"
2788,"    public Vector2D toSubspace(final Vector3D point) {
        return Vector2D.of(point.dot(u), point.dot(v));
    }","  public void test5()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Plane plane0 = new Plane(vector3D_Unit0, 4707.16349805194, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      Vector3D vector3D0 = Vector3D.NaN;
      Vector2D vector2D0 = embeddingPlane0.toSubspace(vector3D0);
}"
2789,"    public Vector2D toSubspace(final Vector3D point) {
        return Vector2D.of(point.dot(u), point.dot(v));
    }","  public void test6()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createTranslation((Vector3D) vector3D_Unit0);
      Vector3D vector3D1 = vector3D0.transform(affineTransformMatrix3D0);
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      Vector2D vector2D0 = embeddingPlane0.toSubspace(vector3D1);
}"
2790,"    public Vector2D toSubspace(final Vector3D point) {
        return Vector2D.of(point.dot(u), point.dot(v));
    }","  public void test7()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-336.74413), (-336.74413), (-336.74413));
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 1339.4717008301861, (Precision.DoubleEquivalence) null);
      Vector3D vector3D0 = Vector3D.of(653.3309598310976, (-0.999999999999998), 0.0);
      Vector2D vector2D0 = embeddingPlane0.toSubspace(vector3D0);
}"
2791,"    public Vector3D toSpace(final Vector2D point) {
        return Vector3D.Sum.create()
                .addScaled(point.getX(), u)
                .addScaled(point.getY(), v)
                .addScaled(-getOriginOffset(), getNormal()).get();
    }","  public void test8()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-336.74413), (-336.74413), (-336.74413));
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-336.74413), (Precision.DoubleEquivalence) null);
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector3D vector3D0 = embeddingPlane0.toSpace(vector2D0);
}"
2792,"    public Vector3D toSpace(final Vector2D point) {
        return Vector3D.Sum.create()
                .addScaled(point.getX(), u)
                .addScaled(point.getY(), v)
                .addScaled(-getOriginOffset(), getNormal()).get();
    }","  public void test9()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, precision_DoubleEquivalence0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector3D vector3D0 = embeddingPlane0.toSpace((Vector2D) vector2D_Unit0);
}"
2793,"    public Vector3D toSpace(final Vector2D point) {
        return Vector3D.Sum.create()
                .addScaled(point.getX(), u)
                .addScaled(point.getY(), v)
                .addScaled(-getOriginOffset(), getNormal()).get();
    }","  public void test10()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      Vector2D vector2D0 = embeddingPlane0.toSubspace((Vector3D) vector3D_Unit0);
      Vector3D vector3D0 = embeddingPlane0.toSpace(vector2D0);
}"
2794,"    public Vector3D toSpace(final Vector2D point) {
        return Vector3D.Sum.create()
                .addScaled(point.getX(), u)
                .addScaled(point.getY(), v)
                .addScaled(-getOriginOffset(), getNormal()).get();
    }","  public void test11()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Plane plane0 = new Plane(vector3D_Unit0, 4707.16349805194, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector3D vector3D0 = embeddingPlane0.toSpace(vector2D0);
}"
2795,"    public SubspaceTransform subspaceTransform(final Transform<Vector3D> transform) {
        final Vector3D origin = getOrigin();

        final Vector3D tOrigin = transform.apply(origin);
        final Vector3D tPlusU = transform.apply(origin.add(u));
        final Vector3D tPlusV = transform.apply(origin.add(v));

        final EmbeddingPlane tPlane = Planes.fromPointAndPlaneVectors(
                tOrigin,
                tOrigin.vectorTo(tPlusU),
                tOrigin.vectorTo(tPlusV),
                getPrecision());

        final Vector2D tSubspaceOrigin = tPlane.toSubspace(tOrigin);
        final Vector2D tSubspaceU = tSubspaceOrigin.vectorTo(tPlane.toSubspace(tPlusU));
        final Vector2D tSubspaceV = tSubspaceOrigin.vectorTo(tPlane.toSubspace(tPlusV));

        final AffineTransformMatrix2D subspaceTransform =
                AffineTransformMatrix2D.fromColumnVectors(tSubspaceU, tSubspaceV, tSubspaceOrigin);

        return new SubspaceTransform(tPlane, subspaceTransform);
    }","  public void test12()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, 4707.16349805194, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      EmbeddingPlane.SubspaceTransform embeddingPlane_SubspaceTransform0 = embeddingPlane0.subspaceTransform(affineTransformMatrix3D0);
}"
2796,"    public EmbeddingPlane rotate(final Vector3D center, final QuaternionRotation rotation) {
        final Vector3D delta = getOrigin().subtract(center);
        final Vector3D tOrigin = center.add(rotation.apply(delta));
        final Vector3D.Unit tU = rotation.apply(u).normalize();
        final Vector3D.Unit tV = rotation.apply(v).normalize();

        return Planes.fromPointAndPlaneVectors(tOrigin, tU, tV, getPrecision());
    }","  public void test13()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit0.directionTo((Vector3D) vector3D_Unit1);
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit2, vector3D_Unit1, vector3D_Unit2, 0.0, (Precision.DoubleEquivalence) null);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit2, 0.0);
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.rotate(vector3D_Unit0, quaternionRotation0);
}"
2797,"    public EmbeddingPlane rotate(final Vector3D center, final QuaternionRotation rotation) {
        final Vector3D delta = getOrigin().subtract(center);
        final Vector3D tOrigin = center.add(rotation.apply(delta));
        final Vector3D.Unit tU = rotation.apply(u).normalize();
        final Vector3D.Unit tV = rotation.apply(v).normalize();

        return Planes.fromPointAndPlaneVectors(tOrigin, tU, tV, getPrecision());
    }","  public void test14()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(1.0, 1.0, 1.0, 1.0);
      Vector3D.Unit vector3D_Unit0 = (Vector3D.Unit)quaternionRotation0.getAxis();
      Plane plane0 = new Plane(vector3D_Unit0, (-0.999999999999998), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.reverse();
      EmbeddingPlane embeddingPlane2 = embeddingPlane1.rotate(vector3D_Unit0, quaternionRotation0);
}"
2798,"    public EmbeddingPlane rotate(final Vector3D center, final QuaternionRotation rotation) {
        final Vector3D delta = getOrigin().subtract(center);
        final Vector3D tOrigin = center.add(rotation.apply(delta));
        final Vector3D.Unit tU = rotation.apply(u).normalize();
        final Vector3D.Unit tV = rotation.apply(v).normalize();

        return Planes.fromPointAndPlaneVectors(tOrigin, tU, tV, getPrecision());
    }","  public void test15()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 1536.3678654470375, (Precision.DoubleEquivalence) null);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of((-1335.972), 0.0, 1536.3678654470375, 2227.85690994703);
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.rotate(vector3D_Unit0, quaternionRotation0);
}"
2799,"    public EmbeddingPlane reverse() {
        return new EmbeddingPlane(v, u, getNormal().negate(), -getOriginOffset(), getPrecision());
    }","  public void test16()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.reverse();
}"
2800,"    public EmbeddingPlane reverse() {
        return new EmbeddingPlane(v, u, getNormal().negate(), -getOriginOffset(), getPrecision());
    }","  public void test17()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, 1.0, precision_DoubleEquivalence0);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.reverse();
}"
2801,"    public Vector3D pointAt(final Vector2D inPlane, final double offset) {
        return Vector3D.Sum.create()
                .addScaled(inPlane.getX(), u)
                .addScaled(inPlane.getY(), v)
                .addScaled(offset - getOriginOffset(), getNormal()).get();
    }","  public void test18()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Plane plane0 = new Plane(vector3D_Unit0, 4707.16349805194, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector3D vector3D0 = embeddingPlane0.pointAt(vector2D_Unit0, (-2249.97833412));
}"
2802,"    public Vector3D pointAt(final Vector2D inPlane, final double offset) {
        return Vector3D.Sum.create()
                .addScaled(inPlane.getX(), u)
                .addScaled(inPlane.getY(), v)
                .addScaled(offset - getOriginOffset(), getNormal()).get();
    }","  public void test19()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-1595.3), (Precision.DoubleEquivalence) null);
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector3D vector3D0 = embeddingPlane0.pointAt(vector2D0, 253.16);
}"
2803,"    public Vector3D pointAt(final Vector2D inPlane, final double offset) {
        return Vector3D.Sum.create()
                .addScaled(inPlane.getX(), u)
                .addScaled(inPlane.getY(), v)
                .addScaled(offset - getOriginOffset(), getNormal()).get();
    }","  public void test20()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      Vector2D vector2D0 = Vector2D.of(0.0, 1329.7);
      Vector3D vector3D0 = embeddingPlane0.pointAt(vector2D0, 2115.562);
}"
2804,"    public Vector3D pointAt(final Vector2D inPlane, final double offset) {
        return Vector3D.Sum.create()
                .addScaled(inPlane.getX(), u)
                .addScaled(inPlane.getY(), v)
                .addScaled(offset - getOriginOffset(), getNormal()).get();
    }","  public void test21()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-1594.0781637180103), (Precision.DoubleEquivalence) null);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1593.0781637180103), (-1594.0781637180103));
      Vector3D vector3D0 = embeddingPlane0.pointAt(vector2D_Unit0, (-1593.0781637180103));
}"
2805,"    public Vector3D pointAt(final Vector2D inPlane, final double offset) {
        return Vector3D.Sum.create()
                .addScaled(inPlane.getX(), u)
                .addScaled(inPlane.getY(), v)
                .addScaled(offset - getOriginOffset(), getNormal()).get();
    }","  public void test22()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-1595.3), (Precision.DoubleEquivalence) null);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1594.3), 0.25);
      Vector3D vector3D0 = embeddingPlane0.pointAt(vector2D_Unit0, (-625.087));
}"
2806,"    public Vector3D.Unit getW() {
        return getNormal();
    }","  public void test23()  throws Throwable  {
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane((Vector3D.Unit) null, (Vector3D.Unit) null, (Vector3D.Unit) null, 0.0, (Precision.DoubleEquivalence) null);
      Vector3D.Unit vector3D_Unit0 = embeddingPlane0.getW();
}"
2807,"    public Vector3D.Unit getW() {
        return getNormal();
    }","  public void test24()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-1595.3), (Precision.DoubleEquivalence) null);
      Vector3D.Unit vector3D_Unit1 = embeddingPlane0.getW();
}"
2808,"    public Vector3D.Unit getW() {
        return getNormal();
    }","  public void test25()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 1.0, (Precision.DoubleEquivalence) null);
      Vector3D.Unit vector3D_Unit1 = embeddingPlane0.getW();
}"
2809,"    public Vector3D.Unit getW() {
        return getNormal();
    }","  public void test26()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.from(1.0, 1.0, (-1380.0982406));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Plane plane0 = new Plane(vector3D_Unit1, 1.0, precision_DoubleEquivalence0);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D_Unit1, vector3D_Unit1);
      Plane plane1 = embeddingPlane0.rotate(vector3D_Unit1, quaternionRotation0);
      Line3D line3D0 = embeddingPlane0.intersection(plane1);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = line3D0.getPrecision();
      EmbeddingPlane embeddingPlane1 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, precision_DoubleEquivalence1);
      embeddingPlane1.getW();
}"
2810,"    public Vector3D.Unit getW() {
        return getNormal();
    }","  public void test27()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, (-1.0), precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(1772.063894, (-1.0), (-1.0), (-1.0));
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      EmbeddingPlane embeddingPlane0 = plane1.getEmbedding();
      Vector3D.Unit vector3D_Unit1 = embeddingPlane0.getW();
}"
2811,"    public Vector3D.Unit getV() {
        return v;
    }","  public void test28()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, (Vector3D.Unit) null, (Vector3D.Unit) null, 0.0, (Precision.DoubleEquivalence) null);
      Vector3D.Unit vector3D_Unit1 = embeddingPlane0.getV();
}"
2812,"    public Vector3D.Unit getV() {
        return v;
    }","  public void test29()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.from(1.0, 0.0, 1006.4);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit1, vector3D_Unit0, 1006.4, precision_DoubleEquivalence0);
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.translate(vector3D_Unit1);
      Line3D line3D0 = embeddingPlane0.intersection((Plane) embeddingPlane1);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = line3D0.getPrecision();
      Plane plane0 = new Plane(vector3D_Unit0, 1.0, precision_DoubleEquivalence1);
      EmbeddingPlane embeddingPlane2 = plane0.getEmbedding();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(0.0, 1.0, (-1484.4299669125), 1.0);
      EmbeddingPlane embeddingPlane3 = embeddingPlane2.transform(quaternionRotation0);
      Vector3D.Unit vector3D_Unit2 = embeddingPlane3.getV();
}"
2813,"    public Vector3D.Unit getV() {
        return v;
    }","  public void test30()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.from(1.0, 0.0, 1006.4);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit1, vector3D_Unit0, 1006.4, precision_DoubleEquivalence0);
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.translate(vector3D_Unit1);
      Line3D line3D0 = embeddingPlane0.intersection((Plane) embeddingPlane1);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = line3D0.getPrecision();
      Plane plane0 = new Plane(vector3D_Unit0, 1.0, precision_DoubleEquivalence1);
      EmbeddingPlane embeddingPlane2 = plane0.getEmbedding();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(0.0, 1.0, (-1484.4299669125), 1.0);
      EmbeddingPlane embeddingPlane3 = embeddingPlane2.transform(quaternionRotation0);
      Vector3D.Unit vector3D_Unit2 = embeddingPlane3.getV();
}"
2814,"    public Vector3D.Unit getV() {
        return v;
    }","  public void test31()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, 872.1, precision_DoubleEquivalence0);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      Vector3D.Unit vector3D_Unit1 = embeddingPlane0.getV();
}"
2815,"    public Vector3D.Unit getV() {
        return v;
    }","  public void test32()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.from(1.0, 0.0, 1006.4);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit1, vector3D_Unit0, 1006.4, precision_DoubleEquivalence0);
      Vector3D.Unit vector3D_Unit2 = embeddingPlane0.getV();
}"
2816,"    public Vector3D.Unit getU() {
        return u;
    }","  public void test33()  throws Throwable  {
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane((Vector3D.Unit) null, (Vector3D.Unit) null, (Vector3D.Unit) null, (-949.18108829), (Precision.DoubleEquivalence) null);
      Vector3D.Unit vector3D_Unit0 = embeddingPlane0.getU();
}"
2817,"    public Vector3D.Unit getU() {
        return u;
    }","  public void test34()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, 0.16127209496169437, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(1772.063894, 0.16127209496169437, 0.16127209496169437, 0.16127209496169437);
      Plane plane1 = plane0.rotate(vector3D_Unit0, quaternionRotation0);
      EmbeddingPlane embeddingPlane0 = plane1.getEmbedding();
      Vector3D.Unit vector3D_Unit1 = embeddingPlane0.getU();
}"
2818,"    public Vector3D.Unit getU() {
        return u;
    }","  public void test35()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Plane plane0 = new Plane(vector3D_Unit0, 4707.16349805194, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      Vector3D.Unit vector3D_Unit1 = embeddingPlane0.getU();
}"
2819,"    public Vector3D.Unit getU() {
        return u;
    }","  public void test36()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-1595.3), (Precision.DoubleEquivalence) null);
      Vector3D.Unit vector3D_Unit1 = embeddingPlane0.getU();
}"
2820,"    public Vector3D.Unit getU() {
        return u;
    }","  public void test37()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-1594.0781637180103), (Precision.DoubleEquivalence) null);
      Vector3D.Unit vector3D_Unit1 = embeddingPlane0.getU();
}"
2821,"    public EmbeddingPlane getEmbedding() {
        return this;
    }","  public void test38()  throws Throwable  {
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane((Vector3D.Unit) null, (Vector3D.Unit) null, (Vector3D.Unit) null, 0.0, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.getEmbedding();
}"
2822,"    public EmbeddingPlane getEmbedding() {
        return this;
    }","  public void test39()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, 1.0, precision_DoubleEquivalence0);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.getEmbedding();
}"
2823,"    public EmbeddingPlane translate(final Vector3D translation) {
        final Vector3D tOrigin = getOrigin().add(translation);

        return Planes.fromPointAndPlaneVectors(tOrigin, u, v, getPrecision());
    }","  public void test40()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane((Vector3D.Unit) null, (Vector3D.Unit) null, (Vector3D.Unit) null, 2166.68, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        embeddingPlane0.translate((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
2824,"    public EmbeddingPlane translate(final Vector3D translation) {
        final Vector3D tOrigin = getOrigin().add(translation);

        return Planes.fromPointAndPlaneVectors(tOrigin, u, v, getPrecision());
    }","  public void test41()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        embeddingPlane0.translate(vector3D_Unit0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
2825,"    public EmbeddingPlane transform(final Transform<Vector3D> transform) {
        final Vector3D origin = getOrigin();
        final Vector3D plusU = origin.add(u);
        final Vector3D plusV = origin.add(v);

        final Vector3D tOrigin = transform.apply(origin);
        final Vector3D tPlusU = transform.apply(plusU);
        final Vector3D tPlusV = transform.apply(plusV);

        final Vector3D.Unit tU = tOrigin.directionTo(tPlusU);
        final Vector3D.Unit tV = tOrigin.directionTo(tPlusV);
        final Vector3D.Unit tW = tU.cross(tV).normalize();

        final double tOriginOffset = -tOrigin.dot(tW);

        return new EmbeddingPlane(tU, tV, tW, tOriginOffset, getPrecision());
    }","  public void test42()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-1322.290955696142), (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        embeddingPlane0.transform((Transform<Vector3D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.EmbeddingPlane"", e);
      }
  }"
2826,"    public EmbeddingPlane transform(final Transform<Vector3D> transform) {
        final Vector3D origin = getOrigin();
        final Vector3D plusU = origin.add(u);
        final Vector3D plusV = origin.add(v);

        final Vector3D tOrigin = transform.apply(origin);
        final Vector3D tPlusU = transform.apply(plusU);
        final Vector3D tPlusV = transform.apply(plusV);

        final Vector3D.Unit tU = tOrigin.directionTo(tPlusU);
        final Vector3D.Unit tV = tOrigin.directionTo(tPlusV);
        final Vector3D.Unit tW = tU.cross(tV).normalize();

        final double tOriginOffset = -tOrigin.dot(tW);

        return new EmbeddingPlane(tU, tV, tW, tOriginOffset, getPrecision());
    }","  public void test43()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, 4707.16349805194, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      // Undeclared exception!
      try { 
        embeddingPlane0.transform(affineTransformMatrix3D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
2827,"    public Vector2D toSubspace(final Vector3D point) {
        return Vector2D.of(point.dot(u), point.dot(v));
    }","  public void test44()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, (Vector3D.Unit) null, vector3D_Unit0, 842.51255887, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        embeddingPlane0.toSubspace((Vector3D) vector3D_Unit0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
2828,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName())
            .append(""[origin= "")
            .append(getOrigin())
            .append("", u= "")
            .append(u)
            .append("", v= "")
            .append(v)
            .append("", w= "")
            .append(getNormal())
            .append(']');

        return sb.toString();
    }","  public void test45()  throws Throwable  {
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane((Vector3D.Unit) null, (Vector3D.Unit) null, (Vector3D.Unit) null, (-1123.0), (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        embeddingPlane0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
2829,"    public Vector3D toSpace(final Vector2D point) {
        return Vector3D.Sum.create()
                .addScaled(point.getX(), u)
                .addScaled(point.getY(), v)
                .addScaled(-getOriginOffset(), getNormal()).get();
    }","  public void test46()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Plane plane0 = new Plane(vector3D_Unit0, 4707.16349805194, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      // Undeclared exception!
      try { 
        embeddingPlane0.toSpace((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.EmbeddingPlane"", e);
      }
  }"
2830,"    public SubspaceTransform subspaceTransform(final Transform<Vector3D> transform) {
        final Vector3D origin = getOrigin();

        final Vector3D tOrigin = transform.apply(origin);
        final Vector3D tPlusU = transform.apply(origin.add(u));
        final Vector3D tPlusV = transform.apply(origin.add(v));

        final EmbeddingPlane tPlane = Planes.fromPointAndPlaneVectors(
                tOrigin,
                tOrigin.vectorTo(tPlusU),
                tOrigin.vectorTo(tPlusV),
                getPrecision());

        final Vector2D tSubspaceOrigin = tPlane.toSubspace(tOrigin);
        final Vector2D tSubspaceU = tSubspaceOrigin.vectorTo(tPlane.toSubspace(tPlusU));
        final Vector2D tSubspaceV = tSubspaceOrigin.vectorTo(tPlane.toSubspace(tPlusV));

        final AffineTransformMatrix2D subspaceTransform =
                AffineTransformMatrix2D.fromColumnVectors(tSubspaceU, tSubspaceV, tSubspaceOrigin);

        return new SubspaceTransform(tPlane, subspaceTransform);
    }","  public void test47()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-2395.486363540187), (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        embeddingPlane0.subspaceTransform((Transform<Vector3D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.EmbeddingPlane"", e);
      }
  }"
2831,"    public EmbeddingPlane rotate(final Vector3D center, final QuaternionRotation rotation) {
        final Vector3D delta = getOrigin().subtract(center);
        final Vector3D tOrigin = center.add(rotation.apply(delta));
        final Vector3D.Unit tU = rotation.apply(u).normalize();
        final Vector3D.Unit tV = rotation.apply(v).normalize();

        return Planes.fromPointAndPlaneVectors(tOrigin, tU, tV, getPrecision());
    }","  public void test48()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane((Vector3D.Unit) null, (Vector3D.Unit) null, (Vector3D.Unit) null, 2.409919865102884E-181, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        embeddingPlane0.rotate(vector3D0, quaternionRotation0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
2832,"    public EmbeddingPlane reverse() {
        return new EmbeddingPlane(v, u, getNormal().negate(), -getOriginOffset(), getPrecision());
    }","  public void test49()  throws Throwable  {
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane((Vector3D.Unit) null, (Vector3D.Unit) null, (Vector3D.Unit) null, 0.0, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        embeddingPlane0.reverse();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.EmbeddingPlane"", e);
      }
  }"
2833,"    public Vector3D pointAt(final Vector2D inPlane, final double offset) {
        return Vector3D.Sum.create()
                .addScaled(inPlane.getX(), u)
                .addScaled(inPlane.getY(), v)
                .addScaled(offset - getOriginOffset(), getNormal()).get();
    }","  public void test50()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(794.103807, (-206.183001111837), 2.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, precision_DoubleEquivalence0);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      // Undeclared exception!
      try { 
        embeddingPlane0.pointAt((Vector2D) null, 2252.4975);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.EmbeddingPlane"", e);
      }
  }"
2834,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (obj == null || obj.getClass() != EmbeddingPlane.class) {
            return false;
        }

        final EmbeddingPlane other = (EmbeddingPlane) obj;

        return Objects.equals(this.getNormal(), other.getNormal()) &&
                Double.compare(this.getOriginOffset(), other.getOriginOffset()) == 0 &&
                Objects.equals(this.u, other.u) &&
                Objects.equals(this.v, other.v) &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test51()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Plane plane0 = new Plane(vector3D_Unit0, 4707.16349805194, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(4707.16349805194);
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.transform(affineTransformMatrix3D0);
      boolean boolean0 = embeddingPlane0.equals(embeddingPlane1);
}"
2835,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (obj == null || obj.getClass() != EmbeddingPlane.class) {
            return false;
        }

        final EmbeddingPlane other = (EmbeddingPlane) obj;

        return Objects.equals(this.getNormal(), other.getNormal()) &&
                Double.compare(this.getOriginOffset(), other.getOriginOffset()) == 0 &&
                Objects.equals(this.u, other.u) &&
                Objects.equals(this.v, other.v) &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test52()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Plane plane0 = new Plane(vector3D_Unit0, 4707.16349805194, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(4707.16349805194);
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.transform(affineTransformMatrix3D0);
      boolean boolean0 = embeddingPlane0.equals(embeddingPlane1);
}"
2836,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (obj == null || obj.getClass() != EmbeddingPlane.class) {
            return false;
        }

        final EmbeddingPlane other = (EmbeddingPlane) obj;

        return Objects.equals(this.getNormal(), other.getNormal()) &&
                Double.compare(this.getOriginOffset(), other.getOriginOffset()) == 0 &&
                Objects.equals(this.u, other.u) &&
                Objects.equals(this.v, other.v) &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test53()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, 4707.16349805194, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.transform(affineTransformMatrix3D0);
      boolean boolean0 = embeddingPlane1.equals(embeddingPlane0);
}"
2837,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (obj == null || obj.getClass() != EmbeddingPlane.class) {
            return false;
        }

        final EmbeddingPlane other = (EmbeddingPlane) obj;

        return Objects.equals(this.getNormal(), other.getNormal()) &&
                Double.compare(this.getOriginOffset(), other.getOriginOffset()) == 0 &&
                Objects.equals(this.u, other.u) &&
                Objects.equals(this.v, other.v) &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test54()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-1.0), precision_DoubleEquivalence0);
      Object object0 = new Object();
      boolean boolean0 = embeddingPlane0.equals(object0);
}"
2838,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (obj == null || obj.getClass() != EmbeddingPlane.class) {
            return false;
        }

        final EmbeddingPlane other = (EmbeddingPlane) obj;

        return Objects.equals(this.getNormal(), other.getNormal()) &&
                Double.compare(this.getOriginOffset(), other.getOriginOffset()) == 0 &&
                Objects.equals(this.u, other.u) &&
                Objects.equals(this.v, other.v) &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test55()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 4.4809043009793035, (Precision.DoubleEquivalence) null);
      boolean boolean0 = embeddingPlane0.equals((Object) null);
}"
2839,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (obj == null || obj.getClass() != EmbeddingPlane.class) {
            return false;
        }

        final EmbeddingPlane other = (EmbeddingPlane) obj;

        return Objects.equals(this.getNormal(), other.getNormal()) &&
                Double.compare(this.getOriginOffset(), other.getOriginOffset()) == 0 &&
                Objects.equals(this.u, other.u) &&
                Objects.equals(this.v, other.v) &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test56()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Plane plane0 = new Plane(vector3D_Unit0, 4707.16349805194, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      boolean boolean0 = embeddingPlane0.equals(embeddingPlane0);
}"
2840,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (obj == null || obj.getClass() != EmbeddingPlane.class) {
            return false;
        }

        final EmbeddingPlane other = (EmbeddingPlane) obj;

        return Objects.equals(this.getNormal(), other.getNormal()) &&
                Double.compare(this.getOriginOffset(), other.getOriginOffset()) == 0 &&
                Objects.equals(this.u, other.u) &&
                Objects.equals(this.v, other.v) &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test57()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-1595.3), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.reverse();
      boolean boolean0 = embeddingPlane1.equals(embeddingPlane0);
}"
2841,"    public SubspaceTransform subspaceTransform(final Transform<Vector3D> transform) {
        final Vector3D origin = getOrigin();

        final Vector3D tOrigin = transform.apply(origin);
        final Vector3D tPlusU = transform.apply(origin.add(u));
        final Vector3D tPlusV = transform.apply(origin.add(v));

        final EmbeddingPlane tPlane = Planes.fromPointAndPlaneVectors(
                tOrigin,
                tOrigin.vectorTo(tPlusU),
                tOrigin.vectorTo(tPlusV),
                getPrecision());

        final Vector2D tSubspaceOrigin = tPlane.toSubspace(tOrigin);
        final Vector2D tSubspaceU = tSubspaceOrigin.vectorTo(tPlane.toSubspace(tPlusU));
        final Vector2D tSubspaceV = tSubspaceOrigin.vectorTo(tPlane.toSubspace(tPlusV));

        final AffineTransformMatrix2D subspaceTransform =
                AffineTransformMatrix2D.fromColumnVectors(tSubspaceU, tSubspaceV, tSubspaceOrigin);

        return new SubspaceTransform(tPlane, subspaceTransform);
    }","  public void test58()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-1595.3), (Precision.DoubleEquivalence) null);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale((Vector3D) vector3D_Unit0);
      // Undeclared exception!
      try { 
        embeddingPlane0.subspaceTransform(affineTransformMatrix3D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
2842,"    public EmbeddingPlane rotate(final Vector3D center, final QuaternionRotation rotation) {
        final Vector3D delta = getOrigin().subtract(center);
        final Vector3D tOrigin = center.add(rotation.apply(delta));
        final Vector3D.Unit tU = rotation.apply(u).normalize();
        final Vector3D.Unit tV = rotation.apply(v).normalize();

        return Planes.fromPointAndPlaneVectors(tOrigin, tU, tV, getPrecision());
    }","  public void test59()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 4.4809043009793035, (Precision.DoubleEquivalence) null);
      Quaternion quaternion0 = Quaternion.ONE;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(quaternion0);
      // Undeclared exception!
      try { 
        embeddingPlane0.rotate(vector3D_Unit0, quaternionRotation0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
2843,"    public Vector3D.Unit getV() {
        return v;
    }","  public void test60()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Plane plane0 = new Plane(vector3D_Unit0, 4707.16349805194, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      Vector3D.Unit vector3D_Unit1 = embeddingPlane0.getV();
}"
2844,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName())
            .append(""[origin= "")
            .append(getOrigin())
            .append("", u= "")
            .append(u)
            .append("", v= "")
            .append(v)
            .append("", w= "")
            .append(getNormal())
            .append(']');

        return sb.toString();
    }","  public void test61()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-1595.3), (Precision.DoubleEquivalence) null);
      String string0 = embeddingPlane0.toString();
}"
2845,"    public EmbeddingPlane translate(final Vector3D translation) {
        final Vector3D tOrigin = getOrigin().add(translation);

        return Planes.fromPointAndPlaneVectors(tOrigin, u, v, getPrecision());
    }","  public void test62()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(794.103807, (-206.183001111837), 2.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, precision_DoubleEquivalence0);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.translate(vector3D_Unit0);
}"
2846,"    public Vector3D toSpace(final Vector2D point) {
        return Vector3D.Sum.create()
                .addScaled(point.getX(), u)
                .addScaled(point.getY(), v)
                .addScaled(-getOriginOffset(), getNormal()).get();
    }","  public void test63()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-1594.0781637180103), (Precision.DoubleEquivalence) null);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1593.0781637180103), (-1594.0781637180103));
      Vector3D vector3D0 = embeddingPlane0.toSpace((Vector2D) vector2D_Unit0);
}"
2847,"    public EmbeddingPlane getEmbedding() {
        return this;
    }","  public void test64()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-1595.3), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.getEmbedding();
}"
2848,"    public int hashCode() {
        return Objects.hash(getNormal(), getOriginOffset(), u, v, getPrecision());
    }","  public void test65()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-5.8582459853999), (Precision.DoubleEquivalence) null);
      embeddingPlane0.hashCode();
  }"
2849,"    public Vector3D.Unit getU() {
        return u;
    }","  public void test66()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-1595.3), (Precision.DoubleEquivalence) null);
      Vector3D.Unit vector3D_Unit1 = embeddingPlane0.getU();
}"
2850,"    public Vector3D.Unit getW() {
        return getNormal();
    }","  public void test67()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-1594.0781637180103), (Precision.DoubleEquivalence) null);
      Vector3D.Unit vector3D_Unit1 = embeddingPlane0.getW();
}"
2851,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (obj == null || obj.getClass() != EmbeddingPlane.class) {
            return false;
        }

        final EmbeddingPlane other = (EmbeddingPlane) obj;

        return Objects.equals(this.getNormal(), other.getNormal()) &&
                Double.compare(this.getOriginOffset(), other.getOriginOffset()) == 0 &&
                Objects.equals(this.u, other.u) &&
                Objects.equals(this.v, other.v) &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test68()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 4707.1634981, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.transform(affineTransformMatrix3D0);
      boolean boolean0 = embeddingPlane0.equals(embeddingPlane1);
}"
2852,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (obj == null || obj.getClass() != EmbeddingPlane.class) {
            return false;
        }

        final EmbeddingPlane other = (EmbeddingPlane) obj;

        return Objects.equals(this.getNormal(), other.getNormal()) &&
                Double.compare(this.getOriginOffset(), other.getOriginOffset()) == 0 &&
                Objects.equals(this.u, other.u) &&
                Objects.equals(this.v, other.v) &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test69()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 4707.1634981, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.transform(affineTransformMatrix3D0);
      boolean boolean0 = embeddingPlane0.equals(embeddingPlane1);
}"
2853,"    EmbeddingPlane(final Vector3D.Unit u, final Vector3D.Unit v, final Vector3D.Unit w, final double originOffset,
                   final Precision.DoubleEquivalence precision) {
        super(w, originOffset, precision);

        this.u = u;
        this.v = v;
    }","  public void test70()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale((Vector2D) vector2D_Unit0);
      EmbeddingPlane.SubspaceTransform embeddingPlane_SubspaceTransform0 = new EmbeddingPlane.SubspaceTransform((EmbeddingPlane) null, affineTransformMatrix2D0);
      EmbeddingPlane embeddingPlane0 = embeddingPlane_SubspaceTransform0.getPlane();
}"
2854,"    EmbeddingPlane(final Vector3D.Unit u, final Vector3D.Unit v, final Vector3D.Unit w, final double originOffset,
                   final Precision.DoubleEquivalence precision) {
        super(w, originOffset, precision);

        this.u = u;
        this.v = v;
    }","  public void test71()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale((Vector2D) vector2D_Unit0);
      EmbeddingPlane.SubspaceTransform embeddingPlane_SubspaceTransform0 = new EmbeddingPlane.SubspaceTransform((EmbeddingPlane) null, affineTransformMatrix2D0);
      AffineTransformMatrix2D affineTransformMatrix2D1 = embeddingPlane_SubspaceTransform0.getTransform();
}"
2855,"    public AffineTransformMatrix3D rotate(final QuaternionRotation rotation) {
        return multiply(rotation.toMatrix(), this);
    }","  public void test0()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createTranslation((-3454.238850015), (-3454.238850015), (-3454.238850015));
      AxisSequence axisSequence0 = AxisSequence.ZXY;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of((-1159.14817381), (-1.0), 706.0, (-3454.238850015));
      AffineTransformMatrix3D affineTransformMatrix3D1 = affineTransformMatrix3D0.rotate(vector3D0, quaternionRotation0);
}"
2856,"    public static AffineTransformMatrix3D of(final double... arr) {
        if (arr.length != NUM_ELEMENTS) {
            throw new IllegalArgumentException(""Dimension mismatch: "" + arr.length + "" != "" + NUM_ELEMENTS);
        }

        return new AffineTransformMatrix3D(
                    arr[0], arr[1], arr[2], arr[3],
                    arr[4], arr[5], arr[6], arr[7],
                    arr[8], arr[9], arr[10], arr[11]
                );
    }","  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[27];
      // Undeclared exception!
      try { 
        AffineTransformMatrix3D.of(doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Dimension mismatch: 27 != 12
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D"", e);
      }
  }"
2857,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test2()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      Vector3D.Unit vector3D_Unit0 = vector3D0.orthogonal();
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      Vector3D vector3D1 = axisSequence0.getAxis3();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors(vector3D0, vector3D1, (Vector3D) vector3D_Unit0, vector3D1);
      AffineTransformMatrix3D affineTransformMatrix3D1 = affineTransformMatrix3D0.scale(vector3D1);
      boolean boolean0 = affineTransformMatrix3D0.equals(affineTransformMatrix3D1);
}"
2858,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test3()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      Vector3D.Unit vector3D_Unit0 = vector3D0.orthogonal();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors(vector3D0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D1 = affineTransformMatrix3D0.scale(vector3D0);
      boolean boolean0 = affineTransformMatrix3D0.equals(affineTransformMatrix3D1);
}"
2859,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test4()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(0.0, 0.0, (-0.9999999999), 0.0);
      AffineTransformMatrix3D affineTransformMatrix3D1 = affineTransformMatrix3D0.rotate(quaternionRotation0);
      boolean boolean0 = affineTransformMatrix3D1.equals(affineTransformMatrix3D0);
}"
2860,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test5()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D1 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      boolean boolean0 = affineTransformMatrix3D1.equals(affineTransformMatrix3D0);
}"
2861,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test6()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D1 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      boolean boolean0 = affineTransformMatrix3D1.equals(affineTransformMatrix3D0);
}"
2862,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test7()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      Vector3D.Unit vector3D_Unit1 = affineTransformMatrix3D0.applyDirection((Vector3D) vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D1 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit1, (Vector3D) vector3D_Unit0);
      affineTransformMatrix3D0.equals(affineTransformMatrix3D1);
}"
2863,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test8()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      Vector3D.Unit vector3D_Unit1 = affineTransformMatrix3D0.applyDirection((Vector3D) vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D1 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit1, (Vector3D) vector3D_Unit0);
      affineTransformMatrix3D0.equals(affineTransformMatrix3D1);
}"
2864,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test9()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(0.0, (-1.0), (-1.0));
      AffineTransformMatrix3D affineTransformMatrix3D1 = AffineTransformMatrix3D.fromColumnVectors(vector3D0, vector3D0, vector3D0);
      boolean boolean0 = affineTransformMatrix3D0.equals(affineTransformMatrix3D1);
}"
2865,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test10()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D1 = affineTransformMatrix3D0.scale((Vector3D) vector3D_Unit0);
      boolean boolean0 = affineTransformMatrix3D1.equals(affineTransformMatrix3D0);
}"
2866,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test11()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      AffineTransformMatrix3D affineTransformMatrix3D1 = AffineTransformMatrix3D.createTranslation(3227.8374999445, (-234.37833), (-234.37833));
      boolean boolean0 = affineTransformMatrix3D0.equals(affineTransformMatrix3D1);
}"
2867,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test12()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.PLUS_X;
      AffineTransformMatrix3D affineTransformMatrix3D1 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit1);
      boolean boolean0 = affineTransformMatrix3D0.equals(affineTransformMatrix3D1);
}"
2868,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test13()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      AffineTransformMatrix3D affineTransformMatrix3D1 = affineTransformMatrix3D0.inverse();
      boolean boolean0 = affineTransformMatrix3D1.equals(affineTransformMatrix3D0);
}"
2869,"    public int hashCode() {
        final int prime = 31;
        int result = 1;

        result = (result * prime) + (Double.hashCode(m00) - Double.hashCode(m01) +
                Double.hashCode(m02) - Double.hashCode(m03));
        result = (result * prime) + (Double.hashCode(m10) - Double.hashCode(m11) +
                Double.hashCode(m12) - Double.hashCode(m13));
        result = (result * prime) + (Double.hashCode(m20) - Double.hashCode(m21) +
                Double.hashCode(m22) - Double.hashCode(m23));

        return result;
    }","  public void test14()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 0.0, 1.5707963267948966, 1.5707963267948966);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors(vector3D0, vector3D0, vector3D0, vector3D0);
      affineTransformMatrix3D0.hashCode();
  }"
2870,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test15()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of((-1708.0), (-1708.0), (-1708.0), (-1.5707963267948966));
      AffineTransformMatrix3D affineTransformMatrix3D0 = quaternionRotation0.toMatrix();
      AffineTransformMatrix3D affineTransformMatrix3D1 = affineTransformMatrix3D0.inverse();
}"
2871,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test16()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(167.5488133744574);
      AffineTransformMatrix3D affineTransformMatrix3D1 = affineTransformMatrix3D0.scale(167.5488133744574);
}"
2872,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test17()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      AffineTransformMatrix3D affineTransformMatrix3D1 = affineTransformMatrix3D0.translate(0.0, 2870.9330449087984, 0.9999);
      AffineTransformMatrix3D affineTransformMatrix3D2 = AffineTransformMatrix3D.from(affineTransformMatrix3D1);
}"
2873,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test18()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      AffineTransformMatrix3D affineTransformMatrix3D1 = affineTransformMatrix3D0.translate(vector3D0);
}"
2874,"    public AffineTransformMatrix3D inverse() {

        // Our full matrix is 4x4 but we can significantly reduce the amount of computations
        // needed here since we know that our last row is [0 0 0 1].

        final double det = Matrices.checkDeterminantForInverse(determinant());

        // validate the remaining matrix elements that were not part of the determinant
        Matrices.checkElementForInverse(m03);
        Matrices.checkElementForInverse(m13);
        Matrices.checkElementForInverse(m23);

        // compute the necessary elements of the cofactor matrix
        // (we need all but the last column)

        final double invDet = 1.0 / det;

        final double c00 = invDet * Matrices.determinant(m11, m12, m21, m22);
        final double c01 = -invDet * Matrices.determinant(m10, m12, m20, m22);
        final double c02 = invDet * Matrices.determinant(m10, m11, m20, m21);

        final double c10 = -invDet * Matrices.determinant(m01, m02, m21, m22);
        final double c11 = invDet * Matrices.determinant(m00, m02, m20, m22);
        final double c12 = -invDet * Matrices.determinant(m00, m01, m20, m21);

        final double c20 = invDet * Matrices.determinant(m01, m02, m11, m12);
        final double c21 = -invDet * Matrices.determinant(m00, m02, m10, m12);
        final double c22 = invDet * Matrices.determinant(m00, m01, m10, m11);

        final double c30 = -invDet * Matrices.determinant(
                    m01, m02, m03,
                    m11, m12, m13,
                    m21, m22, m23
                );
        final double c31 = invDet * Matrices.determinant(
                    m00, m02, m03,
                    m10, m12, m13,
                    m20, m22, m23
                );
        final double c32 = -invDet * Matrices.determinant(
                    m00, m01, m03,
                    m10, m11, m13,
                    m20, m21, m23
                );

        return new AffineTransformMatrix3D(
                    c00, c10, c20, c30,
                    c01, c11, c21, c31,
                    c02, c12, c22, c32
                );
    }","  public void test19()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(2614.050753704, 2614.050753704, 2614.050753704);
      AffineTransformMatrix3D affineTransformMatrix3D1 = affineTransformMatrix3D0.inverse();
}"
2875,"    public double determinant() {
        return Matrices.determinant(
                m00, m01, m02,
                m10, m11, m12,
                m20, m21, m22
            );
    }","  public void test20()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(0.0);
      double double0 = affineTransformMatrix3D0.determinant();
}"
2876,"    public double determinant() {
        return Matrices.determinant(
                m00, m01, m02,
                m10, m11, m12,
                m20, m21, m22
            );
    }","  public void test21()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(1786.29894170422, 1786.29894170422, (-2941.169137));
      double double0 = affineTransformMatrix3D0.determinant();
}"
2877,"    public double applyZ(final double x, final double y, final double z) {
        return applyVectorZ(x, y, z) + m23;
    }","  public void test22()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(2614.050753704, 2614.050753704, 2614.050753704);
      double double0 = affineTransformMatrix3D0.applyZ(2.409919865102884E-181, 2.409919865102884E-181, 0.0);
}"
2878,"    public double applyZ(final double x, final double y, final double z) {
        return applyVectorZ(x, y, z) + m23;
    }","  public void test23()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(2028.163166565);
      double double0 = affineTransformMatrix3D0.applyZ(2028.163166565, 2028.163166565, 2028.163166565);
}"
2879,"    public double applyY(final double x, final double y, final double z) {
        return applyVectorY(x, y, z) + m13;
    }","  public void test24()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(8.5855);
      double double0 = affineTransformMatrix3D0.applyY(0.0, 8.5855, 0.0);
}"
2880,"    public double applyY(final double x, final double y, final double z) {
        return applyVectorY(x, y, z) + m13;
    }","  public void test25()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(2614.050753704, 2614.050753704, 2614.050753704);
      double double0 = affineTransformMatrix3D0.applyY(1063.14770905, (-2114.596), (-932.041806003));
}"
2881,"    public double applyX(final double x, final double y, final double z) {
        return applyVectorX(x, y, z) + m03;
    }","  public void test26()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(0.0);
      double double0 = affineTransformMatrix3D0.applyX(0.0, 0.0, 0.0);
}"
2882,"    public double applyX(final double x, final double y, final double z) {
        return applyVectorX(x, y, z) + m03;
    }","  public void test27()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createTranslation((-498.70719131), (-498.70719131), 2601.37446);
      double double0 = affineTransformMatrix3D0.applyX(0.0, 2601.37446, 3750.556797347);
}"
2883,"    public double applyVectorZ(final double x, final double y, final double z) {
        return Vectors.linearCombination(m20, x, m21, y, m22, z);
    }","  public void test28()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      double double0 = affineTransformMatrix3D0.applyVectorZ(1.0, 1.0, (-1417.9872595));
}"
2884,"    public double applyVectorZ(final double x, final double y, final double z) {
        return Vectors.linearCombination(m20, x, m21, y, m22, z);
    }","  public void test29()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D0, 728.7);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createRotation(vector3D0, quaternionRotation0);
      double double0 = affineTransformMatrix3D0.applyVectorZ(2309.16165, (-1.0), (-1.0));
}"
2885,"    public double applyVectorY(final double x, final double y, final double z) {
        return Vectors.linearCombination(m10, x, m11, y, m12, z);
    }","  public void test30()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      double double0 = affineTransformMatrix3D0.applyVectorY(0.0, 426.64100472, 306.752250096);
}"
2886,"    public double applyVectorY(final double x, final double y, final double z) {
        return Vectors.linearCombination(m10, x, m11, y, m12, z);
    }","  public void test31()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(1665.71211, 1665.71211, 1665.71211);
      double double0 = affineTransformMatrix3D0.applyVectorY(1665.71211, 182.02765, (-2826.48));
}"
2887,"    public double applyVectorX(final double x, final double y, final double z) {
        return Vectors.linearCombination(m00, x, m01, y, m02, z);
    }","  public void test32()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Vector3D.Unit vector3D_Unit0 = vector3D0.orthogonal();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      double double0 = affineTransformMatrix3D0.applyVectorX(0.0, 0.0, (-1037.513136123797));
}"
2888,"    public double applyVectorX(final double x, final double y, final double z) {
        return Vectors.linearCombination(m00, x, m01, y, m02, z);
    }","  public void test33()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale((-0.9999999999), (-0.9999999999), (-0.9999999999));
      double double0 = affineTransformMatrix3D0.applyVectorX((-0.9999999999), (-5346.9131527), 378.60712);
}"
2889,"    public Vector3D applyVector(final Vector3D vec) {
        return applyVector(vec, Vector3D::of);
    }","  public void test34()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors(vector3D0, vector3D0, vector3D0);
      Vector3D vector3D1 = affineTransformMatrix3D0.applyVector(vector3D0);
}"
2890,"    public Vector3D applyVector(final Vector3D vec) {
        return applyVector(vec, Vector3D::of);
    }","  public void test35()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit1, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit1);
      Vector3D vector3D0 = affineTransformMatrix3D0.applyVector((Vector3D) vector3D_Unit0);
}"
2891,"    public Vector3D applyVector(final Vector3D vec) {
        return applyVector(vec, Vector3D::of);
    }","  public void test36()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit1, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit1);
      Vector3D vector3D0 = affineTransformMatrix3D0.applyVector((Vector3D) vector3D_Unit0);
}"
2892,"    public Vector3D applyVector(final Vector3D vec) {
        return applyVector(vec, Vector3D::of);
    }","  public void test37()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createTranslation((Vector3D) vector3D_Unit0);
      Vector3D vector3D0 = affineTransformMatrix3D0.applyVector((Vector3D) vector3D_Unit0);
}"
2893,"    public Vector3D applyVector(final Vector3D vec) {
        return applyVector(vec, Vector3D::of);
    }","  public void test38()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createTranslation((Vector3D) vector3D_Unit0);
      Vector3D vector3D0 = affineTransformMatrix3D0.applyVector((Vector3D) vector3D_Unit0);
}"
2894,"    public Vector3D applyVector(final Vector3D vec) {
        return applyVector(vec, Vector3D::of);
    }","  public void test39()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createTranslation((Vector3D) vector3D_Unit0);
      Vector3D vector3D0 = affineTransformMatrix3D0.applyVector((Vector3D) vector3D_Unit0);
}"
2895,"    public Vector3D applyVector(final Vector3D vec) {
        return applyVector(vec, Vector3D::of);
    }","  public void test40()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = affineTransformMatrix3D0.applyVector(vector3D0);
}"
2896,"    public Vector3D applyVector(final Vector3D vec) {
        return applyVector(vec, Vector3D::of);
    }","  public void test41()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createTranslation(555.0212052992467, 555.0212052992467, 555.0212052992467);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D vector3D0 = affineTransformMatrix3D0.applyVector((Vector3D) vector3D_Unit0);
}"
2897,"    public Vector3D applyVector(final Vector3D vec) {
        return applyVector(vec, Vector3D::of);
    }","  public void test42()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createTranslation(555.0212052992467, 555.0212052992467, 555.0212052992467);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D vector3D0 = affineTransformMatrix3D0.applyVector((Vector3D) vector3D_Unit0);
}"
2898,"    public Vector3D applyVector(final Vector3D vec) {
        return applyVector(vec, Vector3D::of);
    }","  public void test43()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createTranslation(555.0212052992467, 555.0212052992467, 555.0212052992467);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D vector3D0 = affineTransformMatrix3D0.applyVector((Vector3D) vector3D_Unit0);
}"
2899,"    public Vector3D.Unit applyDirection(final Vector3D vec) {
        return applyVector(vec, Vector3D.Unit::from);
    }","  public void test44()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createTranslation((-3454.238850015), (-3454.238850015), (-3454.238850015));
      AxisSequence axisSequence0 = AxisSequence.ZXY;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Vector3D.Unit vector3D_Unit0 = affineTransformMatrix3D0.applyDirection(vector3D0);
}"
2900,"    public Vector3D.Unit applyDirection(final Vector3D vec) {
        return applyVector(vec, Vector3D.Unit::from);
    }","  public void test45()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit1 = affineTransformMatrix3D0.applyDirection((Vector3D) vector3D_Unit0);
}"
2901,"    public Vector3D.Unit applyDirection(final Vector3D vec) {
        return applyVector(vec, Vector3D.Unit::from);
    }","  public void test46()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(2167.623176728454, 2167.623176728454, 2370.4787488301577);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit1 = affineTransformMatrix3D0.applyDirection((Vector3D) vector3D_Unit0);
}"
2902,"    public Vector3D.Unit applyDirection(final Vector3D vec) {
        return applyVector(vec, Vector3D.Unit::from);
    }","  public void test47()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createTranslation(0.99, 0.99, 0.99);
      Vector3D vector3D0 = Vector3D.of((-1866.18), 85.044984408, 0.0);
      Vector3D.Unit vector3D_Unit0 = affineTransformMatrix3D0.applyDirection(vector3D0);
}"
2903,"    public Vector3D.Unit applyDirection(final Vector3D vec) {
        return applyVector(vec, Vector3D.Unit::from);
    }","  public void test48()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(0.5);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      Vector3D.Unit vector3D_Unit0 = affineTransformMatrix3D0.applyDirection(vector3D0);
}"
2904,"    public Vector3D apply(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        return Vector3D.of(
                applyX(x, y, z),
                applyY(x, y, z),
                applyZ(x, y, z));
    }","  public void test49()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors(vector3D0, vector3D0, vector3D0);
      Vector3D vector3D1 = affineTransformMatrix3D0.apply(vector3D0);
}"
2905,"    public Vector3D apply(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        return Vector3D.of(
                applyX(x, y, z),
                applyY(x, y, z),
                applyZ(x, y, z));
    }","  public void test50()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of((-1708.0), (-1708.0), (-1708.0), (-1.5707963267948966));
      AffineTransformMatrix3D affineTransformMatrix3D0 = quaternionRotation0.toMatrix();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Vector3D vector3D0 = affineTransformMatrix3D0.apply((Vector3D) vector3D_Unit0);
}"
2906,"    public Vector3D apply(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        return Vector3D.of(
                applyX(x, y, z),
                applyY(x, y, z),
                applyZ(x, y, z));
    }","  public void test51()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of((-1708.0), (-1708.0), (-1708.0), (-1.5707963267948966));
      AffineTransformMatrix3D affineTransformMatrix3D0 = quaternionRotation0.toMatrix();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Vector3D vector3D0 = affineTransformMatrix3D0.apply((Vector3D) vector3D_Unit0);
}"
2907,"    public Vector3D apply(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        return Vector3D.of(
                applyX(x, y, z),
                applyY(x, y, z),
                applyZ(x, y, z));
    }","  public void test52()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of((-1708.0), (-1708.0), (-1708.0), (-1.5707963267948966));
      AffineTransformMatrix3D affineTransformMatrix3D0 = quaternionRotation0.toMatrix();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Vector3D vector3D0 = affineTransformMatrix3D0.apply((Vector3D) vector3D_Unit0);
}"
2908,"    public Vector3D apply(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        return Vector3D.of(
                applyX(x, y, z),
                applyY(x, y, z),
                applyZ(x, y, z));
    }","  public void test53()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(3412.12387495);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D vector3D0 = affineTransformMatrix3D0.apply((Vector3D) vector3D_Unit0);
}"
2909,"    public Vector3D apply(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        return Vector3D.of(
                applyX(x, y, z),
                applyY(x, y, z),
                applyZ(x, y, z));
    }","  public void test54()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(3412.12387495);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D vector3D0 = affineTransformMatrix3D0.apply((Vector3D) vector3D_Unit0);
}"
2910,"    public Vector3D apply(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        return Vector3D.of(
                applyX(x, y, z),
                applyY(x, y, z),
                applyZ(x, y, z));
    }","  public void test55()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(3412.12387495);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D vector3D0 = affineTransformMatrix3D0.apply((Vector3D) vector3D_Unit0);
}"
2911,"    public Vector3D apply(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        return Vector3D.of(
                applyX(x, y, z),
                applyY(x, y, z),
                applyZ(x, y, z));
    }","  public void test56()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D vector3D0 = affineTransformMatrix3D0.apply((Vector3D) vector3D_Unit0);
}"
2912,"    public Vector3D apply(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        return Vector3D.of(
                applyX(x, y, z),
                applyY(x, y, z),
                applyZ(x, y, z));
    }","  public void test57()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D vector3D0 = affineTransformMatrix3D0.apply((Vector3D) vector3D_Unit0);
}"
2913,"    public Vector3D apply(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        return Vector3D.of(
                applyX(x, y, z),
                applyY(x, y, z),
                applyZ(x, y, z));
    }","  public void test58()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D vector3D0 = affineTransformMatrix3D0.apply((Vector3D) vector3D_Unit0);
}"
2914,"    public AffineTransformMatrix3D scale(final double factor) {
        return scale(factor, factor, factor);
    }","  public void test59()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createTranslation((-1.0), (-2665.3531791103633), 3.141592653589793);
      // Undeclared exception!
      try { 
        affineTransformMatrix3D0.scale((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D"", e);
      }
  }"
2915,"    public AffineTransformMatrix3D rotate(final QuaternionRotation rotation) {
        return multiply(rotation.toMatrix(), this);
    }","  public void test60()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale((-1.0));
      // Undeclared exception!
      try { 
        affineTransformMatrix3D0.rotate((QuaternionRotation) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D"", e);
      }
  }"
2916,"    public AffineTransformMatrix3D rotate(final QuaternionRotation rotation) {
        return multiply(rotation.toMatrix(), this);
    }","  public void test61()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-1572.58482), 3.273390607896142E150, (-1.0));
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D_Unit0, vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createRotation(vector3D_Unit0, quaternionRotation0);
      // Undeclared exception!
      try { 
        affineTransformMatrix3D0.rotate((Vector3D) null, quaternionRotation0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D"", e);
      }
  }"
2917,"    public AffineTransformMatrix3D premultiply(final AffineTransformMatrix3D m) {
        return multiply(m, this);
    }","  public void test62()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(vector3D0);
      // Undeclared exception!
      try { 
        affineTransformMatrix3D0.premultiply((AffineTransformMatrix3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D"", e);
      }
  }"
2918,"    public static AffineTransformMatrix3D of(final double... arr) {
        if (arr.length != NUM_ELEMENTS) {
            throw new IllegalArgumentException(""Dimension mismatch: "" + arr.length + "" != "" + NUM_ELEMENTS);
        }

        return new AffineTransformMatrix3D(
                    arr[0], arr[1], arr[2], arr[3],
                    arr[4], arr[5], arr[6], arr[7],
                    arr[8], arr[9], arr[10], arr[11]
                );
    }","  public void test63()  throws Throwable  {
      // Undeclared exception!
      try { 
        AffineTransformMatrix3D.of((double[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D"", e);
      }
  }"
2919,"    public AffineTransformMatrix3D multiply(final AffineTransformMatrix3D m) {
        return multiply(this, m);
    }","  public void test64()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      // Undeclared exception!
      try { 
        affineTransformMatrix3D0.multiply((AffineTransformMatrix3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D"", e);
      }
  }"
2920,"    public static AffineTransformMatrix3D fromColumnVectors(final Vector3D u, final Vector3D v, final Vector3D w) {
        return fromColumnVectors(u, v, w, Vector3D.ZERO);
    }","  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        AffineTransformMatrix3D.fromColumnVectors((Vector3D) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D"", e);
      }
  }"
2921,"    public static AffineTransformMatrix3D fromColumnVectors(final Vector3D u, final Vector3D v, final Vector3D w) {
        return fromColumnVectors(u, v, w, Vector3D.ZERO);
    }","  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        AffineTransformMatrix3D.fromColumnVectors((Vector3D) null, (Vector3D) null, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D"", e);
      }
  }"
2922,"    public static AffineTransformMatrix3D from(final UnaryOperator<Vector3D> fn) {
        final Vector3D tPlusX = fn.apply(Vector3D.Unit.PLUS_X);
        final Vector3D tPlusY = fn.apply(Vector3D.Unit.PLUS_Y);
        final Vector3D tPlusZ = fn.apply(Vector3D.Unit.PLUS_Z);
        final Vector3D tZero = fn.apply(Vector3D.ZERO);

        final Vector3D u = tPlusX.subtract(tZero);
        final Vector3D v = tPlusY.subtract(tZero);
        final Vector3D w = tPlusZ.subtract(tZero);

        final AffineTransformMatrix3D mat =  AffineTransformMatrix3D.fromColumnVectors(u, v, w, tZero);

        final double det = mat.determinant();
        if (!Vectors.isRealNonZero(det)) {
            throw new IllegalArgumentException(""Transform function is invalid: matrix determinant is "" + det);
        }

        return mat;
    }","  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        AffineTransformMatrix3D.from((UnaryOperator<Vector3D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D"", e);
      }
  }"
2923,"    public static AffineTransformMatrix3D createTranslation(final Vector3D translation) {
        return createTranslation(translation.getX(), translation.getY(), translation.getZ());
    }","  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        AffineTransformMatrix3D.createTranslation((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D"", e);
      }
  }"
2924,"    public static AffineTransformMatrix3D createScale(final double factor) {
        return createScale(factor, factor, factor);
    }","  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        AffineTransformMatrix3D.createScale((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D"", e);
      }
  }"
2925,"    public static AffineTransformMatrix3D createRotation(final Vector3D center, final QuaternionRotation rotation) {
        return createTranslation(center.negate())
                .rotate(rotation)
                .translate(center);
    }","  public void test70()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        AffineTransformMatrix3D.createRotation(vector3D0, (QuaternionRotation) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D"", e);
      }
  }"
2926,"    public Vector3D.Unit applyDirection(final Vector3D vec) {
        return applyVector(vec, Vector3D.Unit::from);
    }","  public void test71()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(0.5);
      // Undeclared exception!
      try { 
        affineTransformMatrix3D0.applyDirection((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D"", e);
      }
  }"
2927,"    public Vector3D apply(final Vector3D pt) {
        final double x = pt.getX();
        final double y = pt.getY();
        final double z = pt.getZ();

        return Vector3D.of(
                applyX(x, y, z),
                applyY(x, y, z),
                applyZ(x, y, z));
    }","  public void test72()  throws Throwable  {
      UnaryOperator<Vector3D> unaryOperator0 = UnaryOperator.identity();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.from(unaryOperator0);
      // Undeclared exception!
      try { 
        affineTransformMatrix3D0.apply((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D"", e);
      }
  }"
2928,"    public double[] toArray() {
        return new double[] {
            m00, m01, m02, m03,
            m10, m11, m12, m13,
            m20, m21, m22, m23
        };
    }","  public void test73()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of((-1708.0), (-1708.0), (-1708.0), (-1.5707963267948966));
      AffineTransformMatrix3D affineTransformMatrix3D0 = quaternionRotation0.toMatrix();
      double[] doubleArray0 = affineTransformMatrix3D0.toArray();
}"
2929,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test74()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of((-1708.0), (-1708.0), (-1708.0), (-1.5707963267948966));
      AffineTransformMatrix3D affineTransformMatrix3D0 = quaternionRotation0.toMatrix();
      double[] doubleArray0 = affineTransformMatrix3D0.toArray();
      AffineTransformMatrix3D affineTransformMatrix3D1 = AffineTransformMatrix3D.of(doubleArray0);
}"
2930,"    public double determinant() {
        return Matrices.determinant(
                m00, m01, m02,
                m10, m11, m12,
                m20, m21, m22
            );
    }","  public void test75()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(1701.79606435);
      double double0 = affineTransformMatrix3D0.determinant();
}"
2931,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test76()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(0.0);
      AffineTransformMatrix3D affineTransformMatrix3D1 = affineTransformMatrix3D0.linearTranspose();
}"
2932,"    public double applyY(final double x, final double y, final double z) {
        return applyVectorY(x, y, z) + m13;
    }","  public void test77()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(0.0);
      double double0 = affineTransformMatrix3D0.applyY(1037.328, 0.0, (-1021.9695031));
}"
2933,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test78()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(0.0, 0.0, 0.5);
      AffineTransformMatrix3D affineTransformMatrix3D1 = affineTransformMatrix3D0.scale((-2278.45), (-0.999999999999998), (-1.0));
}"
2934,"    public double applyVectorY(final double x, final double y, final double z) {
        return Vectors.linearCombination(m10, x, m11, y, m12, z);
    }","  public void test79()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale((-0.9999999999), (-0.9999999999), (-0.9999999999));
      double double0 = affineTransformMatrix3D0.applyVectorY(0.0, 937.6427, (-1465.0));
}"
2935,"    public double applyVectorZ(final double x, final double y, final double z) {
        return Vectors.linearCombination(m20, x, m21, y, m22, z);
    }","  public void test80()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      double double0 = affineTransformMatrix3D0.applyVectorZ((-1676.6957), (-2038.65), 3227.8374999445);
}"
2936,"    public double applyZ(final double x, final double y, final double z) {
        return applyVectorZ(x, y, z) + m23;
    }","  public void test81()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(1.0, 1.0, 1.0);
      double double0 = affineTransformMatrix3D0.applyZ(1.0, (-1776.1), (-265.5080820728419));
}"
2937,"    public AffineTransformMatrix3D translate(final Vector3D translation) {
        return translate(translation.getX(), translation.getY(), translation.getZ());
    }","  public void test82()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(0.0);
      // Undeclared exception!
      try { 
        affineTransformMatrix3D0.translate((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D"", e);
      }
  }"
2938,"    public double applyX(final double x, final double y, final double z) {
        return applyVectorX(x, y, z) + m03;
    }","  public void test83()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(2167.623176728454, 2167.623176728454, 2370.4787488301577);
      double double0 = affineTransformMatrix3D0.applyX(1.0, 2751.662625714, (-1.0));
}"
2939,"    public double applyVectorX(final double x, final double y, final double z) {
        return Vectors.linearCombination(m00, x, m01, y, m02, z);
    }","  public void test84()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors(vector3D0, vector3D0, vector3D0);
      double double0 = affineTransformMatrix3D0.applyVectorX(0.0, 0.0, (-1037.513136123797));
}"
2940,"    public static AffineTransformMatrix3D from(final UnaryOperator<Vector3D> fn) {
        final Vector3D tPlusX = fn.apply(Vector3D.Unit.PLUS_X);
        final Vector3D tPlusY = fn.apply(Vector3D.Unit.PLUS_Y);
        final Vector3D tPlusZ = fn.apply(Vector3D.Unit.PLUS_Z);
        final Vector3D tZero = fn.apply(Vector3D.ZERO);

        final Vector3D u = tPlusX.subtract(tZero);
        final Vector3D v = tPlusY.subtract(tZero);
        final Vector3D w = tPlusZ.subtract(tZero);

        final AffineTransformMatrix3D mat =  AffineTransformMatrix3D.fromColumnVectors(u, v, w, tZero);

        final double det = mat.determinant();
        if (!Vectors.isRealNonZero(det)) {
            throw new IllegalArgumentException(""Transform function is invalid: matrix determinant is "" + det);
        }

        return mat;
    }","  public void test85()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        AffineTransformMatrix3D.from(affineTransformMatrix3D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Transform function is invalid: matrix determinant is NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D"", e);
      }
  }"
2941,"    public static AffineTransformMatrix3D of(final double... arr) {
        if (arr.length != NUM_ELEMENTS) {
            throw new IllegalArgumentException(""Dimension mismatch: "" + arr.length + "" != "" + NUM_ELEMENTS);
        }

        return new AffineTransformMatrix3D(
                    arr[0], arr[1], arr[2], arr[3],
                    arr[4], arr[5], arr[6], arr[7],
                    arr[8], arr[9], arr[10], arr[11]
                );
    }","  public void test86()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        AffineTransformMatrix3D.of(doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Dimension mismatch: 3 != 12
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D"", e);
      }
  }"
2942,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test87()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D1 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      boolean boolean0 = affineTransformMatrix3D1.equals(affineTransformMatrix3D0);
}"
2943,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test88()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit1, (Vector3D) vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D1 = affineTransformMatrix3D0.scale((Vector3D) vector3D_Unit0);
      boolean boolean0 = affineTransformMatrix3D0.equals(affineTransformMatrix3D1);
}"
2944,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test89()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit1, (Vector3D) vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D1 = affineTransformMatrix3D0.scale((Vector3D) vector3D_Unit0);
      boolean boolean0 = affineTransformMatrix3D0.equals(affineTransformMatrix3D1);
}"
2945,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test90()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit1, (Vector3D) vector3D_Unit1, (Vector3D) vector3D_Unit1);
      AffineTransformMatrix3D affineTransformMatrix3D1 = affineTransformMatrix3D0.scale((Vector3D) vector3D_Unit0);
      boolean boolean0 = affineTransformMatrix3D0.equals(affineTransformMatrix3D1);
}"
2946,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test91()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D1 = AffineTransformMatrix3D.createScale((Vector3D) vector3D_Unit0);
      boolean boolean0 = affineTransformMatrix3D0.equals(affineTransformMatrix3D1);
}"
2947,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test92()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      AffineTransformMatrix3D affineTransformMatrix3D1 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit1);
      AffineTransformMatrix3D affineTransformMatrix3D2 = affineTransformMatrix3D1.rotate(quaternionRotation0);
      boolean boolean0 = affineTransformMatrix3D2.equals(affineTransformMatrix3D0);
}"
2948,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test93()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      AffineTransformMatrix3D affineTransformMatrix3D1 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit1, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D2 = affineTransformMatrix3D1.rotate(quaternionRotation0);
      boolean boolean0 = affineTransformMatrix3D2.equals(affineTransformMatrix3D0);
}"
2949,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test94()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D1 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      boolean boolean0 = affineTransformMatrix3D0.equals(affineTransformMatrix3D1);
}"
2950,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test95()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      AffineTransformMatrix3D affineTransformMatrix3D1 = affineTransformMatrix3D0.translate((-763.392936), (-763.392936), (-763.392936));
      boolean boolean0 = affineTransformMatrix3D0.equals(affineTransformMatrix3D1);
}"
2951,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test96()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      AffineTransformMatrix3D affineTransformMatrix3D1 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit1);
      boolean boolean0 = affineTransformMatrix3D0.equals(affineTransformMatrix3D1);
}"
2952,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test97()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      AffineTransformMatrix3D affineTransformMatrix3D1 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit1, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      boolean boolean0 = affineTransformMatrix3D0.equals(affineTransformMatrix3D1);
}"
2953,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test98()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale((-42.155295352214395), (-42.155295352214395), (-42.155295352214395));
      Object object0 = new Object();
      boolean boolean0 = affineTransformMatrix3D0.equals(object0);
}"
2954,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test99()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      boolean boolean0 = affineTransformMatrix3D0.equals(affineTransformMatrix3D0);
}"
2955,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test100()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      AffineTransformMatrix3D affineTransformMatrix3D1 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      boolean boolean0 = affineTransformMatrix3D0.equals(affineTransformMatrix3D1);
}"
2956,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test101()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      AffineTransformMatrix3D affineTransformMatrix3D1 = affineTransformMatrix3D0.multiply(affineTransformMatrix3D0);
}"
2957,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test102()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      AffineTransformMatrix3D affineTransformMatrix3D1 = affineTransformMatrix3D0.premultiply(affineTransformMatrix3D0);
}"
2958,"    public Vector3D applyVector(final Vector3D vec) {
        return applyVector(vec, Vector3D::of);
    }","  public void test103()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createTranslation(vector3D0);
      // Undeclared exception!
      try { 
        affineTransformMatrix3D0.applyVector((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AffineTransformMatrix3D"", e);
      }
  }"
2959,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test104()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      AffineTransformMatrix3D affineTransformMatrix3D1 = affineTransformMatrix3D0.scale((Vector3D) vector3D_Unit0);
      boolean boolean0 = affineTransformMatrix3D1.equals(affineTransformMatrix3D0);
}"
2960,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test105()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      AffineTransformMatrix3D affineTransformMatrix3D1 = affineTransformMatrix3D0.linear();
      boolean boolean0 = affineTransformMatrix3D0.equals(affineTransformMatrix3D1);
}"
2961,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test106()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = affineTransformMatrix3D0.apply(vector3D0);
}"
2962,"    public int hashCode() {
        final int prime = 31;
        int result = 1;

        result = (result * prime) + (Double.hashCode(m00) - Double.hashCode(m01) +
                Double.hashCode(m02) - Double.hashCode(m03));
        result = (result * prime) + (Double.hashCode(m10) - Double.hashCode(m11) +
                Double.hashCode(m12) - Double.hashCode(m13));
        result = (result * prime) + (Double.hashCode(m20) - Double.hashCode(m21) +
                Double.hashCode(m22) - Double.hashCode(m23));

        return result;
    }","  public void test107()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      affineTransformMatrix3D0.hashCode();
  }"
2963,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix3D)) {
            return false;
        }

        final AffineTransformMatrix3D other = (AffineTransformMatrix3D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&
                Double.compare(this.m03, other.m03) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0 &&
                Double.compare(this.m13, other.m13) == 0 &&

                Double.compare(this.m20, other.m20) == 0 &&
                Double.compare(this.m21, other.m21) == 0 &&
                Double.compare(this.m22, other.m22) == 0 &&
                Double.compare(this.m23, other.m23) == 0;
    }","  public void test108()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D1 = AffineTransformMatrix3D.createScale((Vector3D) vector3D_Unit0);
      boolean boolean0 = affineTransformMatrix3D0.equals(affineTransformMatrix3D1);
}"
2964,"    public Vector3D.Unit applyDirection(final Vector3D vec) {
        return applyVector(vec, Vector3D.Unit::from);
    }","  public void test109()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createTranslation((-281.4), 2.409919865102884E-181, 1200.53936636573);
      Vector3D vector3D0 = Vector3D.ZERO;
      // Undeclared exception!
      try { 
        affineTransformMatrix3D0.applyDirection(vector3D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
2965,"    public String toString() {
        final StringBuilder sb = new StringBuilder();

        sb.append(MATRIX_START)

            .append(m00)
            .append(ELEMENT_SEPARATOR)
            .append(m01)
            .append(ELEMENT_SEPARATOR)
            .append(m02)
            .append(ELEMENT_SEPARATOR)
            .append(m03)
            .append(ROW_SEPARATOR)

            .append(m10)
            .append(ELEMENT_SEPARATOR)
            .append(m11)
            .append(ELEMENT_SEPARATOR)
            .append(m12)
            .append(ELEMENT_SEPARATOR)
            .append(m13)
            .append(ROW_SEPARATOR)

            .append(m20)
            .append(ELEMENT_SEPARATOR)
            .append(m21)
            .append(ELEMENT_SEPARATOR)
            .append(m22)
            .append(ELEMENT_SEPARATOR)
            .append(m23)

            .append(MATRIX_END);

        return sb.toString();
    }","  public void test110()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      String string0 = affineTransformMatrix3D0.toString();
}"
2966,"    public AffineTransformMatrix3D inverse() {

        // Our full matrix is 4x4 but we can significantly reduce the amount of computations
        // needed here since we know that our last row is [0 0 0 1].

        final double det = Matrices.checkDeterminantForInverse(determinant());

        // validate the remaining matrix elements that were not part of the determinant
        Matrices.checkElementForInverse(m03);
        Matrices.checkElementForInverse(m13);
        Matrices.checkElementForInverse(m23);

        // compute the necessary elements of the cofactor matrix
        // (we need all but the last column)

        final double invDet = 1.0 / det;

        final double c00 = invDet * Matrices.determinant(m11, m12, m21, m22);
        final double c01 = -invDet * Matrices.determinant(m10, m12, m20, m22);
        final double c02 = invDet * Matrices.determinant(m10, m11, m20, m21);

        final double c10 = -invDet * Matrices.determinant(m01, m02, m21, m22);
        final double c11 = invDet * Matrices.determinant(m00, m02, m20, m22);
        final double c12 = -invDet * Matrices.determinant(m00, m01, m20, m21);

        final double c20 = invDet * Matrices.determinant(m01, m02, m11, m12);
        final double c21 = -invDet * Matrices.determinant(m00, m02, m10, m12);
        final double c22 = invDet * Matrices.determinant(m00, m01, m10, m11);

        final double c30 = -invDet * Matrices.determinant(
                    m01, m02, m03,
                    m11, m12, m13,
                    m21, m22, m23
                );
        final double c31 = invDet * Matrices.determinant(
                    m00, m02, m03,
                    m10, m12, m13,
                    m20, m22, m23
                );
        final double c32 = -invDet * Matrices.determinant(
                    m00, m01, m03,
                    m10, m11, m13,
                    m20, m21, m23
                );

        return new AffineTransformMatrix3D(
                    c00, c10, c20, c30,
                    c01, c11, c21, c31,
                    c02, c12, c22, c32
                );
    }","  public void test111()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(0.0);
      // Undeclared exception!
      try { 
        affineTransformMatrix3D0.inverse();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Matrix is not invertible; matrix determinant is 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Matrices"", e);
      }
  }"
2967,"    public Vector2D toSubspace(final Vector3D pt) {
        return plane.toSubspace(pt);
    }","  public void test0()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-3371.7777156316), (-3371.7777156316), (-3371.7777156316));
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-3371.7777156316), (Precision.DoubleEquivalence) null);
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = (EmbeddedAreaPlaneConvexSubset)embeddingPlane0.span();
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector2D vector2D0 = embeddedAreaPlaneConvexSubset0.toSubspace(vector3D0);
}"
2968,"    public Vector2D toSubspace(final Vector3D pt) {
        return plane.toSubspace(pt);
    }","  public void test1()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit1, vector3D_Unit1, vector3D_Unit1, (-348.2803), (Precision.DoubleEquivalence) null);
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset(embeddingPlane0);
      Vector2D vector2D0 = embeddedTreePlaneSubset0.toSubspace((Vector3D) vector3D_Unit0);
}"
2969,"    public Vector3D toSpace(final Vector2D pt) {
        return plane.toSpace(pt);
    }","  public void test2()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-3371.7777156316), (Precision.DoubleEquivalence) null);
      ConvexArea convexArea0 = ConvexArea.full();
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset(embeddingPlane0, convexArea0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector3D vector3D0 = embeddedAreaPlaneConvexSubset0.toSpace((Vector2D) vector2D_Unit0);
}"
2970,"    public Vector3D toSpace(final Vector2D pt) {
        return plane.toSpace(pt);
    }","  public void test3()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset(embeddingPlane0, false);
      Vector2D vector2D0 = embeddedTreePlaneSubset0.toSubspace((Vector3D) vector3D_Unit0);
      Vector3D vector3D0 = embeddedTreePlaneSubset0.toSpace(vector2D0);
}"
2971,"    public Vector3D toSpace(final Vector2D pt) {
        return plane.toSpace(pt);
    }","  public void test4()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset(embeddingPlane0, false);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector3D vector3D0 = embeddedTreePlaneSubset0.toSpace((Vector2D) vector2D_Unit0);
}"
2972,"    public Vector3D toSpace(final Vector2D pt) {
        return plane.toSpace(pt);
    }","  public void test5()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset(embeddingPlane0, (RegionBSPTree2D) null);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector3D vector3D0 = embeddedTreePlaneSubset0.toSpace((Vector2D) vector2D_Unit0);
}"
2973,"    public Vector3D toSpace(final Vector2D pt) {
        return plane.toSpace(pt);
    }","  public void test6()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset(embeddingPlane0, false);
      Vector2D vector2D0 = embeddedTreePlaneSubset0.toSubspace((Vector3D) vector3D_Unit0);
      Vector3D vector3D0 = embeddedTreePlaneSubset0.toSpace(vector2D0);
}"
2974,"    public Vector3D toSpace(final Vector2D pt) {
        return plane.toSpace(pt);
    }","  public void test7()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset(embeddingPlane0, false);
      Vector2D vector2D0 = embeddedTreePlaneSubset0.toSubspace((Vector3D) vector3D_Unit0);
      Vector3D vector3D0 = embeddedTreePlaneSubset0.toSpace(vector2D0);
}"
2975,"    public boolean isFull() {
        return getSubspaceRegion().isFull();
    }","  public void test8()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = RegionBSPTree2D.full();
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null, regionBSPTree2D0);
      boolean boolean0 = embeddedTreePlaneSubset0.isFull();
}"
2976,"    public double getSize() {
        return getSubspaceRegion().getSize();
    }","  public void test9()  throws Throwable  {
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null);
      double double0 = embeddedTreePlaneSubset0.getSize();
}"
2977,"    public double getSize() {
        return getSubspaceRegion().getSize();
    }","  public void test10()  throws Throwable  {
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null, true);
      double double0 = embeddedTreePlaneSubset0.getSize();
}"
2978,"    public EmbeddingPlane getPlane() {
        return plane;
    }","  public void test11()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset(embeddingPlane0, false);
      EmbeddingPlane embeddingPlane1 = embeddedTreePlaneSubset0.getPlane();
}"
2979,"    public EmbeddingPlane getPlane() {
        return plane;
    }","  public void test12()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Plane plane0 = new Plane(vector3D_Unit0, 2.326559996988609, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset(embeddingPlane0, false);
      EmbeddingPlane embeddingPlane1 = embeddedTreePlaneSubset0.getPlane();
}"
2980,"    public EmbeddingPlane getPlane() {
        return plane;
    }","  public void test13()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-3371.7777156316), (-3371.7777156316), (-3371.7777156316));
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 1401.79195, (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.reverse();
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset(embeddingPlane1, true);
      EmbeddingPlane embeddingPlane2 = embeddedTreePlaneSubset0.getPlane();
}"
2981,"    public EmbeddingPlane getHyperplane() {
        return getPlane();
    }","  public void test14()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-3371.7777156316), (-3371.7777156316), (-3371.7777156316));
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit1, vector3D_Unit1, (-3371.7777156316), (Precision.DoubleEquivalence) null);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      EmbeddingPlane embeddingPlane1 = embeddingPlane0.transform(affineTransformMatrix3D0);
      EmbeddingPlane embeddingPlane2 = embeddingPlane1.reverse();
      Line[] lineArray0 = new Line[0];
      ConvexArea convexArea0 = ConvexArea.fromBounds(lineArray0);
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset(embeddingPlane2, convexArea0);
      EmbeddingPlane embeddingPlane3 = embeddedAreaPlaneConvexSubset0.getHyperplane();
}"
2982,"    public EmbeddingPlane getHyperplane() {
        return getPlane();
    }","  public void test15()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 3185.749783716974, (Precision.DoubleEquivalence) null);
      LinkedList<Segment> linkedList0 = new LinkedList<Segment>();
      BoundaryList2D boundaryList2D0 = new BoundaryList2D(linkedList0);
      RegionBSPTree2D regionBSPTree2D0 = boundaryList2D0.toTree();
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset(embeddingPlane0, regionBSPTree2D0);
      EmbeddingPlane embeddingPlane1 = embeddedTreePlaneSubset0.getHyperplane();
}"
2983,"    protected Bounds3D getBoundsFromSubspace(final BoundarySource2D src) {
        final Bounds2D subspaceBounds = src.getBounds();
        if (subspaceBounds != null) {
            final Vector3D min = plane.toSpace(subspaceBounds.getMin());
            final Vector3D max = plane.toSpace(subspaceBounds.getMax());

            return Bounds3D.builder()
                    .add(min)
                    .add(max)
                    .build();
        }

        return null;
    }","  public void test16()  throws Throwable  {
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null);
      RegionBSPTree2D regionBSPTree2D0 = new RegionBSPTree2D();
      Bounds3D bounds3D0 = embeddedTreePlaneSubset0.getBoundsFromSubspace(regionBSPTree2D0);
}"
2984,"    public Vector3D closest(final Vector3D pt) {
        return HyperplaneSubsets.closestToEmbeddedRegion(pt, plane, getSubspaceRegion());
    }","  public void test17()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset(embeddingPlane0);
      Vector3D vector3D0 = embeddedTreePlaneSubset0.closest((Vector3D) vector3D_Unit0);
}"
2985,"    public Vector3D closest(final Vector3D pt) {
        return HyperplaneSubsets.closestToEmbeddedRegion(pt, plane, getSubspaceRegion());
    }","  public void test18()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-3371.7777156316), (Precision.DoubleEquivalence) null);
      ConvexArea convexArea0 = ConvexArea.full();
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset(embeddingPlane0, convexArea0);
      Vector3D vector3D0 = embeddedAreaPlaneConvexSubset0.closest((Vector3D) vector3D_Unit0);
}"
2986,"    public Vector3D closest(final Vector3D pt) {
        return HyperplaneSubsets.closestToEmbeddedRegion(pt, plane, getSubspaceRegion());
    }","  public void test19()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(2217.090778, 2217.090778, 2217.090778);
      Plane plane0 = new Plane(vector3D_Unit0, (-1566.1538540243407), (Precision.DoubleEquivalence) null);
      EmbeddingPlane embeddingPlane0 = plane0.getEmbedding();
      Line[] lineArray0 = new Line[0];
      ConvexArea convexArea0 = ConvexArea.fromBounds(lineArray0);
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset(embeddingPlane0, convexArea0);
      Vector3D vector3D0 = embeddedAreaPlaneConvexSubset0.closest((Vector3D) vector3D_Unit0);
}"
2987,"    public Vector3D closest(final Vector3D pt) {
        return HyperplaneSubsets.closestToEmbeddedRegion(pt, plane, getSubspaceRegion());
    }","  public void test20()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-130.17871645), (Precision.DoubleEquivalence) null);
      Class<Line> class0 = Line.class;
      ServiceLoader<Line> serviceLoader0 = ServiceLoader.load(class0);
      ConvexArea convexArea0 = ConvexArea.fromBounds((Iterable<Line>) serviceLoader0);
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset(embeddingPlane0, convexArea0);
      Vector3D vector3D0 = embeddedAreaPlaneConvexSubset0.closest((Vector3D) vector3D_Unit0);
}"
2988,"    public Vector2D toSubspace(final Vector3D pt) {
        return plane.toSubspace(pt);
    }","  public void test21()  throws Throwable  {
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane((Vector3D.Unit) null, (Vector3D.Unit) null, (Vector3D.Unit) null, 0.0, (Precision.DoubleEquivalence) null);
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset(embeddingPlane0, (RegionBSPTree2D) null);
      // Undeclared exception!
      try { 
        embeddedTreePlaneSubset0.toSubspace((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.EmbeddingPlane"", e);
      }
  }"
2989,"    public boolean isEmpty() {
        return getSubspaceRegion().isEmpty();
    }","  public void test22()  throws Throwable  {
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null, (RegionBSPTree2D) null);
      // Undeclared exception!
      try { 
        embeddedTreePlaneSubset0.isEmpty();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AbstractEmbeddedRegionPlaneSubset"", e);
      }
  }"
2990,"    public Vector3D getCentroid() {
        final Vector2D subspaceCentroid = getSubspaceRegion().getCentroid();
        if (subspaceCentroid != null) {
            return getPlane().toSpace(subspaceCentroid);
        }
        return null;
    }","  public void test23()  throws Throwable  {
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset((EmbeddingPlane) null, (ConvexArea) null);
      // Undeclared exception!
      try { 
        embeddedAreaPlaneConvexSubset0.getCentroid();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AbstractEmbeddedRegionPlaneSubset"", e);
      }
  }"
2991,"    protected Bounds3D getBoundsFromSubspace(final BoundarySource2D src) {
        final Bounds2D subspaceBounds = src.getBounds();
        if (subspaceBounds != null) {
            final Vector3D min = plane.toSpace(subspaceBounds.getMin());
            final Vector3D max = plane.toSpace(subspaceBounds.getMax());

            return Bounds3D.builder()
                    .add(min)
                    .add(max)
                    .build();
        }

        return null;
    }","  public void test24()  throws Throwable  {
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset((EmbeddingPlane) null, (ConvexArea) null);
      // Undeclared exception!
      try { 
        embeddedAreaPlaneConvexSubset0.getBoundsFromSubspace((BoundarySource2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AbstractEmbeddedRegionPlaneSubset"", e);
      }
  }"
2992,"    public boolean isFull() {
        return getSubspaceRegion().isFull();
    }","  public void test25()  throws Throwable  {
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset((EmbeddingPlane) null, (ConvexArea) null);
      // Undeclared exception!
      try { 
        embeddedAreaPlaneConvexSubset0.isFull();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AbstractEmbeddedRegionPlaneSubset"", e);
      }
  }"
2993,"    public EmbeddingPlane getPlane() {
        return plane;
    }","  public void test26()  throws Throwable  {
      ConvexArea convexArea0 = ConvexArea.full();
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset((EmbeddingPlane) null, convexArea0);
      EmbeddingPlane embeddingPlane0 = embeddedAreaPlaneConvexSubset0.getPlane();
}"
2994,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName())
            .append(""[plane= "")
            .append(getPlane())
            .append("", subspaceRegion= "")
            .append(getSubspaceRegion())
            .append(']');

        return sb.toString();
    }","  public void test27()  throws Throwable  {
      ConvexArea convexArea0 = ConvexArea.full();
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset((EmbeddingPlane) null, convexArea0);
      String string0 = embeddedAreaPlaneConvexSubset0.toString();
}"
2995,"    public RegionLocation classify(final Vector3D pt) {
        return HyperplaneSubsets.classifyAgainstEmbeddedRegion(pt, plane, getSubspaceRegion());
    }","  public void test28()  throws Throwable  {
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset((EmbeddingPlane) null, (ConvexArea) null);
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        embeddedAreaPlaneConvexSubset0.classify(vector3D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.internal.HyperplaneSubsets"", e);
      }
  }"
2996,"    public EmbeddingPlane getHyperplane() {
        return getPlane();
    }","  public void test29()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-3371.7777156316), (-3371.7777156316), (-3371.7777156316));
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-3371.7777156316), (Precision.DoubleEquivalence) null);
      Line[] lineArray0 = new Line[0];
      ConvexArea convexArea0 = ConvexArea.fromBounds(lineArray0);
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset(embeddingPlane0, convexArea0);
      EmbeddingPlane embeddingPlane1 = embeddedAreaPlaneConvexSubset0.getHyperplane();
}"
2997,"    public Vector3D toSpace(final Vector2D pt) {
        return plane.toSpace(pt);
    }","  public void test30()  throws Throwable  {
      ConvexArea convexArea0 = ConvexArea.full();
      Vector2D[] vector2DArray0 = new Vector2D[3];
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset((EmbeddingPlane) null, convexArea0);
      // Undeclared exception!
      try { 
        embeddedAreaPlaneConvexSubset0.toSpace(vector2DArray0[0]);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AbstractEmbeddedRegionPlaneSubset"", e);
      }
  }"
2998,"    public boolean isEmpty() {
        return getSubspaceRegion().isEmpty();
    }","  public void test31()  throws Throwable  {
      LinkedList<Line> linkedList0 = new LinkedList<Line>();
      HashSet<Line> hashSet0 = new HashSet<Line>(linkedList0);
      ConvexArea convexArea0 = ConvexArea.fromBounds((Iterable<Line>) hashSet0);
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset((EmbeddingPlane) null, convexArea0);
      boolean boolean0 = embeddedAreaPlaneConvexSubset0.isEmpty();
}"
2999,"    public double getSize() {
        return getSubspaceRegion().getSize();
    }","  public void test32()  throws Throwable  {
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset((EmbeddingPlane) null, (ConvexArea) null);
      // Undeclared exception!
      try { 
        embeddedAreaPlaneConvexSubset0.getSize();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.AbstractEmbeddedRegionPlaneSubset"", e);
      }
  }"
3000,"    public Vector3D closest(final Vector3D pt) {
        return HyperplaneSubsets.closestToEmbeddedRegion(pt, plane, getSubspaceRegion());
    }","  public void test33()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-3371.7777156316), (-3371.7777156316), (-3371.7777156316));
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, (-3371.7777156316), (Precision.DoubleEquivalence) null);
      ConvexArea convexArea0 = ConvexArea.full();
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset(embeddingPlane0, convexArea0);
      Vector3D vector3D0 = embeddedAreaPlaneConvexSubset0.closest((Vector3D) vector3D_Unit0);
}"
3001,"    public Vector3D getCentroid() {
        final Vector2D subspaceCentroid = getSubspaceRegion().getCentroid();
        if (subspaceCentroid != null) {
            return getPlane().toSpace(subspaceCentroid);
        }
        return null;
    }","  public void test34()  throws Throwable  {
      ConvexArea convexArea0 = ConvexArea.full();
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset((EmbeddingPlane) null, convexArea0);
      Vector3D vector3D0 = embeddedAreaPlaneConvexSubset0.getCentroid();
}"
3002,"    public boolean isEmpty() {
        return getSubspaceRegion().isEmpty();
    }","  public void test35()  throws Throwable  {
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null);
      boolean boolean0 = embeddedTreePlaneSubset0.isEmpty();
}"
3003,"    public boolean isFull() {
        return getSubspaceRegion().isFull();
    }","  public void test36()  throws Throwable  {
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null);
      boolean boolean0 = embeddedTreePlaneSubset0.isFull();
}"
3004,"    public EmbeddingPlane getHyperplane() {
        return getPlane();
    }","  public void test37()  throws Throwable  {
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null);
      EmbeddingPlane embeddingPlane0 = embeddedTreePlaneSubset0.getHyperplane();
}"
3005,"    public Vector3D closest(final Vector3D pt) {
        return HyperplaneSubsets.closestToEmbeddedRegion(pt, plane, getSubspaceRegion());
    }","  public void test38()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = RegionBSPTree2D.empty();
      EmbeddedTreePlaneSubset embeddedTreePlaneSubset0 = new EmbeddedTreePlaneSubset((EmbeddingPlane) null, regionBSPTree2D0);
      // Undeclared exception!
      try { 
        embeddedTreePlaneSubset0.closest((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.internal.HyperplaneSubsets"", e);
      }
  }"
3006,"    public PlaneConvexSubset trim(final HyperplaneConvexSubset<Vector3D> convexSubset) {
        return (PlaneConvexSubset) super.trim(convexSubset);
    }","  public void test0()  throws Throwable  {
      ConvexVolume convexVolume0 = ConvexVolume.full();
      PlaneConvexSubset planeConvexSubset0 = convexVolume0.trim((HyperplaneConvexSubset<Vector3D>) null);
}"
3007,"    public ConvexVolume transform(final Transform<Vector3D> transform) {
        return transformInternal(transform, this, PlaneConvexSubset.class, ConvexVolume::new);
    }","  public void test1()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Plane> priorityQueue0 = new PriorityQueue<Plane>(1, comparator0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(1757.7687571062138, (-0.999999999999998), (-323.6600135));
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D_Unit0, vector3D_Unit0);
      priorityQueue0.add(embeddingPlane0);
      ConvexVolume convexVolume0 = ConvexVolume.fromBounds((Iterable<? extends Plane>) priorityQueue0);
      ConvexVolume convexVolume1 = convexVolume0.transform(quaternionRotation0);
}"
3008,"    public Split<ConvexVolume> split(final Hyperplane<Vector3D> splitter) {
        return splitInternal(splitter, this, PlaneConvexSubset.class, ConvexVolume::new);
    }","  public void test2()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(1757.7687571062138, (-0.999999999999998), (-323.6600135));
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      ConvexVolume convexVolume0 = ConvexVolume.full();
      Split<ConvexVolume> split0 = convexVolume0.split(embeddingPlane0);
}"
3009,"    public static ConvexVolume fromBounds(final Plane... planes) {
        return fromBounds(Arrays.asList(planes));
    }","  public void test3()  throws Throwable  {
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane((Vector3D.Unit) null, (Vector3D.Unit) null, (Vector3D.Unit) null, 2.409919865102884E-181, (Precision.DoubleEquivalence) null);
      Plane[] planeArray0 = new Plane[2];
      planeArray0[0] = (Plane) embeddingPlane0;
      planeArray0[1] = (Plane) embeddingPlane0;
      ConvexVolume convexVolume0 = ConvexVolume.fromBounds(planeArray0);
}"
3010,"    public PlaneConvexSubset trim(final HyperplaneConvexSubset<Vector3D> convexSubset) {
        return (PlaneConvexSubset) super.trim(convexSubset);
    }","  public void test4()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Plane> priorityQueue0 = new PriorityQueue<Plane>(1, comparator0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(1779.0337350561774, (-0.999999999999998), (-323.6600135));
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      PlaneConvexSubset planeConvexSubset0 = embeddingPlane0.span();
      priorityQueue0.add(embeddingPlane0);
      ConvexVolume convexVolume0 = ConvexVolume.fromBounds((Iterable<? extends Plane>) priorityQueue0);
      // Undeclared exception!
      try { 
        convexVolume0.trim(planeConvexSubset0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
3011,"    public ConvexVolume transform(final Transform<Vector3D> transform) {
        return transformInternal(transform, this, PlaneConvexSubset.class, ConvexVolume::new);
    }","  public void test5()  throws Throwable  {
      EmbeddedAreaPlaneConvexSubset embeddedAreaPlaneConvexSubset0 = new EmbeddedAreaPlaneConvexSubset((EmbeddingPlane) null, (ConvexArea) null);
      List<PlaneConvexSubset> list0 = embeddedAreaPlaneConvexSubset0.toConvex();
      ConvexVolume convexVolume0 = new ConvexVolume(list0);
      AxisSequence axisSequence0 = AxisSequence.YXY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 2872.5995, 2872.5995, 1652.5357475182805);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      // Undeclared exception!
      try { 
        convexVolume0.transform(quaternionRotation0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.EmbeddedAreaPlaneConvexSubset"", e);
      }
  }"
3012,"    public ConvexVolume transform(final Transform<Vector3D> transform) {
        return transformInternal(transform, this, PlaneConvexSubset.class, ConvexVolume::new);
    }","  public void test6()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Plane> priorityQueue0 = new PriorityQueue<Plane>(1, comparator0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(1757.7687571062138, 8.287890347080895, (-323.6600135));
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D_Unit0, vector3D_Unit0);
      priorityQueue0.add(embeddingPlane0);
      ConvexVolume convexVolume0 = ConvexVolume.fromBounds((Iterable<? extends Plane>) priorityQueue0);
      // Undeclared exception!
      try { 
        convexVolume0.transform(quaternionRotation0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
3013,"    public RegionBSPTree3D toTree() {
        return RegionBSPTree3D.from(getBoundaries(), true);
    }","  public void test7()  throws Throwable  {
      LinkedList<PlaneConvexSubset> linkedList0 = new LinkedList<PlaneConvexSubset>();
      ConvexVolume convexVolume0 = new ConvexVolume(linkedList0);
      linkedList0.add((PlaneConvexSubset) null);
      // Undeclared exception!
      try { 
        convexVolume0.toTree();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.partitioning.bsp.AbstractBSPTree"", e);
      }
  }"
3014,"    public double getSize() {
        if (isFull()) {
            return Double.POSITIVE_INFINITY;
        }

        double volumeSum = 0.0;

        for (final PlaneConvexSubset boundary : getBoundaries()) {
            if (boundary.isInfinite()) {
                return Double.POSITIVE_INFINITY;
            }

            final Plane boundaryPlane = boundary.getPlane();
            final double boundaryArea = boundary.getSize();
            final Vector3D boundaryCentroid = boundary.getCentroid();

            volumeSum += boundaryArea * boundaryCentroid.dot(boundaryPlane.getNormal());
        }

        return volumeSum / 3.0;
    }","  public void test8()  throws Throwable  {
      LinkedList<PlaneConvexSubset> linkedList0 = new LinkedList<PlaneConvexSubset>();
      linkedList0.addLast((PlaneConvexSubset) null);
      ConvexVolume convexVolume0 = new ConvexVolume(linkedList0);
      // Undeclared exception!
      try { 
        convexVolume0.getSize();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.ConvexVolume"", e);
      }
  }"
3015,"    public Vector3D getCentroid() {
        double volumeSum = 0.0;

        double sumX = 0.0;
        double sumY = 0.0;
        double sumZ = 0.0;

        for (final PlaneConvexSubset boundary : getBoundaries()) {
            if (boundary.isInfinite()) {
                return null;
            }

            final Plane boundaryPlane = boundary.getPlane();
            final double boundaryArea = boundary.getSize();
            final Vector3D boundaryCentroid = boundary.getCentroid();

            final double scaledVolume = boundaryArea * boundaryCentroid.dot(boundaryPlane.getNormal());

            volumeSum += scaledVolume;

            sumX += scaledVolume * boundaryCentroid.getX();
            sumY += scaledVolume * boundaryCentroid.getY();
            sumZ += scaledVolume * boundaryCentroid.getZ();
        }

        if (volumeSum > 0) {
            final double size = volumeSum / 3.0;

            // Since the volume we used when adding together the boundary contributions
            // was 3x the actual pyramid size, we'll multiply by 1/4 here instead
            // of 3/4 to adjust for the actual centroid position in each pyramid.
            final double centroidScale = 1.0 / (4 * size);
            return Vector3D.of(
                    sumX * centroidScale,
                    sumY * centroidScale,
                    sumZ * centroidScale);
        }

        return null;
    }","  public void test9()  throws Throwable  {
      ArrayList<PlaneConvexSubset> arrayList0 = new ArrayList<PlaneConvexSubset>();
      arrayList0.add((PlaneConvexSubset) null);
      ConvexVolume convexVolume0 = new ConvexVolume(arrayList0);
      // Undeclared exception!
      try { 
        convexVolume0.getCentroid();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.ConvexVolume"", e);
      }
  }"
3016,"    public static ConvexVolume fromBounds(final Plane... planes) {
        return fromBounds(Arrays.asList(planes));
    }","  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConvexVolume.fromBounds((Plane[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
3017,"    public static ConvexVolume fromBounds(final Plane... planes) {
        return fromBounds(Arrays.asList(planes));
    }","  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConvexVolume.fromBounds((Iterable<? extends Plane>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.partitioning.AbstractConvexHyperplaneBoundedRegion$ConvexRegionBoundaryBuilder"", e);
      }
  }"
3018,"    protected ConvexVolume(final List<PlaneConvexSubset> boundaries) {
        super(boundaries);
    }","  public void test12()  throws Throwable  {
      ConvexVolume convexVolume0 = null;
      try {
        convexVolume0 = new ConvexVolume((List<PlaneConvexSubset>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableCollection"", e);
      }
  }"
3019,"    public Stream<PlaneConvexSubset> boundaryStream() {
        return getBoundaries().stream();
    }","  public void test13()  throws Throwable  {
      LinkedList<PlaneConvexSubset> linkedList0 = new LinkedList<PlaneConvexSubset>();
      ConvexVolume convexVolume0 = new ConvexVolume(linkedList0);
      Stream<PlaneConvexSubset> stream0 = convexVolume0.boundaryStream();
}"
3020,"    public PlaneConvexSubset trim(final HyperplaneConvexSubset<Vector3D> convexSubset) {
        return (PlaneConvexSubset) super.trim(convexSubset);
    }","  public void test14()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Plane> priorityQueue0 = new PriorityQueue<Plane>(1, comparator0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(1779.0337350561774, (-0.999999999999998), (-323.6600135));
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      PlaneConvexSubset planeConvexSubset0 = embeddingPlane0.span();
      ConvexVolume convexVolume0 = ConvexVolume.fromBounds((Iterable<? extends Plane>) priorityQueue0);
      PlaneConvexSubset planeConvexSubset1 = convexVolume0.trim(planeConvexSubset0);
}"
3021,"    public Vector3D getCentroid() {
        double volumeSum = 0.0;

        double sumX = 0.0;
        double sumY = 0.0;
        double sumZ = 0.0;

        for (final PlaneConvexSubset boundary : getBoundaries()) {
            if (boundary.isInfinite()) {
                return null;
            }

            final Plane boundaryPlane = boundary.getPlane();
            final double boundaryArea = boundary.getSize();
            final Vector3D boundaryCentroid = boundary.getCentroid();

            final double scaledVolume = boundaryArea * boundaryCentroid.dot(boundaryPlane.getNormal());

            volumeSum += scaledVolume;

            sumX += scaledVolume * boundaryCentroid.getX();
            sumY += scaledVolume * boundaryCentroid.getY();
            sumZ += scaledVolume * boundaryCentroid.getZ();
        }

        if (volumeSum > 0) {
            final double size = volumeSum / 3.0;

            // Since the volume we used when adding together the boundary contributions
            // was 3x the actual pyramid size, we'll multiply by 1/4 here instead
            // of 3/4 to adjust for the actual centroid position in each pyramid.
            final double centroidScale = 1.0 / (4 * size);
            return Vector3D.of(
                    sumX * centroidScale,
                    sumY * centroidScale,
                    sumZ * centroidScale);
        }

        return null;
    }","  public void test15()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Plane> priorityQueue0 = new PriorityQueue<Plane>(1, comparator0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(1757.7687571062138, 8.287890347080895, (-323.6600135));
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      priorityQueue0.add(embeddingPlane0);
      ConvexVolume convexVolume0 = ConvexVolume.fromBounds((Iterable<? extends Plane>) priorityQueue0);
      convexVolume0.getCentroid();
}"
3022,"    public Vector3D getCentroid() {
        double volumeSum = 0.0;

        double sumX = 0.0;
        double sumY = 0.0;
        double sumZ = 0.0;

        for (final PlaneConvexSubset boundary : getBoundaries()) {
            if (boundary.isInfinite()) {
                return null;
            }

            final Plane boundaryPlane = boundary.getPlane();
            final double boundaryArea = boundary.getSize();
            final Vector3D boundaryCentroid = boundary.getCentroid();

            final double scaledVolume = boundaryArea * boundaryCentroid.dot(boundaryPlane.getNormal());

            volumeSum += scaledVolume;

            sumX += scaledVolume * boundaryCentroid.getX();
            sumY += scaledVolume * boundaryCentroid.getY();
            sumZ += scaledVolume * boundaryCentroid.getZ();
        }

        if (volumeSum > 0) {
            final double size = volumeSum / 3.0;

            // Since the volume we used when adding together the boundary contributions
            // was 3x the actual pyramid size, we'll multiply by 1/4 here instead
            // of 3/4 to adjust for the actual centroid position in each pyramid.
            final double centroidScale = 1.0 / (4 * size);
            return Vector3D.of(
                    sumX * centroidScale,
                    sumY * centroidScale,
                    sumZ * centroidScale);
        }

        return null;
    }","  public void test16()  throws Throwable  {
      ConvexVolume convexVolume0 = ConvexVolume.full();
      Vector3D vector3D0 = convexVolume0.getCentroid();
}"
3023,"    public double getSize() {
        if (isFull()) {
            return Double.POSITIVE_INFINITY;
        }

        double volumeSum = 0.0;

        for (final PlaneConvexSubset boundary : getBoundaries()) {
            if (boundary.isInfinite()) {
                return Double.POSITIVE_INFINITY;
            }

            final Plane boundaryPlane = boundary.getPlane();
            final double boundaryArea = boundary.getSize();
            final Vector3D boundaryCentroid = boundary.getCentroid();

            volumeSum += boundaryArea * boundaryCentroid.dot(boundaryPlane.getNormal());
        }

        return volumeSum / 3.0;
    }","  public void test17()  throws Throwable  {
      ConvexVolume convexVolume0 = ConvexVolume.full();
      double double0 = convexVolume0.getSize();
}"
3024,"    public double getSize() {
        if (isFull()) {
            return Double.POSITIVE_INFINITY;
        }

        double volumeSum = 0.0;

        for (final PlaneConvexSubset boundary : getBoundaries()) {
            if (boundary.isInfinite()) {
                return Double.POSITIVE_INFINITY;
            }

            final Plane boundaryPlane = boundary.getPlane();
            final double boundaryArea = boundary.getSize();
            final Vector3D boundaryCentroid = boundary.getCentroid();

            volumeSum += boundaryArea * boundaryCentroid.dot(boundaryPlane.getNormal());
        }

        return volumeSum / 3.0;
    }","  public void test18()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Plane> priorityQueue0 = new PriorityQueue<Plane>(1, comparator0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(1757.7687571062138, 8.287890347080895, (-323.6600135));
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      priorityQueue0.add(embeddingPlane0);
      ConvexVolume convexVolume0 = ConvexVolume.fromBounds((Iterable<? extends Plane>) priorityQueue0);
      double double0 = convexVolume0.getSize();
}"
3025,"    public double getSize() {
        if (isFull()) {
            return Double.POSITIVE_INFINITY;
        }

        double volumeSum = 0.0;

        for (final PlaneConvexSubset boundary : getBoundaries()) {
            if (boundary.isInfinite()) {
                return Double.POSITIVE_INFINITY;
            }

            final Plane boundaryPlane = boundary.getPlane();
            final double boundaryArea = boundary.getSize();
            final Vector3D boundaryCentroid = boundary.getCentroid();

            volumeSum += boundaryArea * boundaryCentroid.dot(boundaryPlane.getNormal());
        }

        return volumeSum / 3.0;
    }","  public void test19()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Plane> priorityQueue0 = new PriorityQueue<Plane>(1, comparator0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(1757.7687571062138, 8.287890347080895, (-323.6600135));
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      priorityQueue0.add(embeddingPlane0);
      ConvexVolume convexVolume0 = ConvexVolume.fromBounds((Iterable<? extends Plane>) priorityQueue0);
      double double0 = convexVolume0.getSize();
}"
3026,"    public static ConvexVolume fromBounds(final Plane... planes) {
        return fromBounds(Arrays.asList(planes));
    }","  public void test20()  throws Throwable  {
      Plane[] planeArray0 = new Plane[0];
      ConvexVolume convexVolume0 = ConvexVolume.fromBounds(planeArray0);
}"
3027,"    public ConvexVolume transform(final Transform<Vector3D> transform) {
        return transformInternal(transform, this, PlaneConvexSubset.class, ConvexVolume::new);
    }","  public void test21()  throws Throwable  {
      ConvexVolume convexVolume0 = ConvexVolume.full();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      ConvexVolume convexVolume1 = convexVolume0.transform(affineTransformMatrix3D0);
}"
3028,"    public Split<ConvexVolume> split(final Hyperplane<Vector3D> splitter) {
        return splitInternal(splitter, this, PlaneConvexSubset.class, ConvexVolume::new);
    }","  public void test22()  throws Throwable  {
      PriorityQueue<Plane> priorityQueue0 = new PriorityQueue<Plane>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      EmbeddingPlane embeddingPlane0 = new EmbeddingPlane(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, 20, (Precision.DoubleEquivalence) null);
      priorityQueue0.add(embeddingPlane0);
      ConvexVolume convexVolume0 = ConvexVolume.fromBounds((Iterable<? extends Plane>) priorityQueue0);
      // Undeclared exception!
      try { 
        convexVolume0.split(embeddingPlane0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Plane"", e);
      }
  }"
3029,"    public RegionBSPTree3D toTree() {
        return RegionBSPTree3D.from(getBoundaries(), true);
    }","  public void test23()  throws Throwable  {
      ConvexVolume convexVolume0 = ConvexVolume.full();
      RegionBSPTree3D regionBSPTree3D0 = convexVolume0.toTree();
}"
3030,"    public static void sortAndFilter(final List<LinecastPoint3D> pts) {
        pts.sort(ABSCISSA_ORDER);

        double currentAbscissa = Double.POSITIVE_INFINITY;
        final List<LinecastPoint3D> abscissaList = new ArrayList<>();

        final ListIterator<LinecastPoint3D> it = pts.listIterator();
        LinecastPoint3D pt;
        while (it.hasNext()) {
            pt = it.next();
            if (!pt.getLine().getPrecision().eq(currentAbscissa, pt.getAbscissa())) {
                // new abscissa value
                currentAbscissa = pt.getAbscissa();
                abscissaList.clear();

                abscissaList.add(pt);
            } else if (containsEq(pt, abscissaList)) {
                // duplicate found for this abscissa value
                it.remove();
            } else {
                // not a duplicate
                abscissaList.add(pt);
            }
        }
    }","  public void test0()  throws Throwable  {
      LinkedList<LinecastPoint3D> linkedList0 = new LinkedList<LinecastPoint3D>();
      AxisSequence axisSequence0 = AxisSequence.YXY;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true, false, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      LinecastPoint3D linecastPoint3D0 = new LinecastPoint3D(vector3D0, vector3D0, line3D0);
      linkedList0.add(linecastPoint3D0);
      linkedList0.add(linecastPoint3D0);
      LinecastPoint3D.sortAndFilter(linkedList0);
      LinecastPoint3D linecastPoint3D1 = new LinecastPoint3D(vector3D0, vector3D0, line3D0);
      linkedList0.add(linecastPoint3D1);
      LinecastPoint3D.sortAndFilter(linkedList0);
}"
3031,"    public boolean eq(final LinecastPoint3D other, final Precision.DoubleEquivalence precision) {
        return getLine().eq(other.getLine(), precision) &&
                getPoint().eq(other.getPoint(), precision) &&
                getNormal().eq(other.getNormal(), precision);
    }","  public void test1()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YXY;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      LinecastPoint3D linecastPoint3D0 = new LinecastPoint3D(vector3D0, vector3D0, line3D0);
      LinecastPoint3D linecastPoint3D1 = new LinecastPoint3D(vector3D0, vector3D0, line3D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eq(anyDouble() , anyDouble());
      boolean boolean0 = linecastPoint3D0.eq(linecastPoint3D1, precision_DoubleEquivalence1);
}"
3032,"    public static void sortAndFilter(final List<LinecastPoint3D> pts) {
        pts.sort(ABSCISSA_ORDER);

        double currentAbscissa = Double.POSITIVE_INFINITY;
        final List<LinecastPoint3D> abscissaList = new ArrayList<>();

        final ListIterator<LinecastPoint3D> it = pts.listIterator();
        LinecastPoint3D pt;
        while (it.hasNext()) {
            pt = it.next();
            if (!pt.getLine().getPrecision().eq(currentAbscissa, pt.getAbscissa())) {
                // new abscissa value
                currentAbscissa = pt.getAbscissa();
                abscissaList.clear();

                abscissaList.add(pt);
            } else if (containsEq(pt, abscissaList)) {
                // duplicate found for this abscissa value
                it.remove();
            } else {
                // not a duplicate
                abscissaList.add(pt);
            }
        }
    }","  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        LinecastPoint3D.sortAndFilter((List<LinecastPoint3D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.LinecastPoint3D"", e);
      }
  }"
3033,"    public boolean eq(final LinecastPoint3D other, final Precision.DoubleEquivalence precision) {
        return getLine().eq(other.getLine(), precision) &&
                getPoint().eq(other.getPoint(), precision) &&
                getNormal().eq(other.getNormal(), precision);
    }","  public void test3()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      LinecastPoint3D linecastPoint3D0 = new LinecastPoint3D(vector3D_Unit0, vector3D_Unit0, line3D0);
      // Undeclared exception!
      try { 
        linecastPoint3D0.eq(linecastPoint3D0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
3034,"    public LinecastPoint3D(final Vector3D point, final Vector3D normal, final Line3D line) {
        super(point, normal.normalize(), line);
    }","  public void test4()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D((Vector3D) null, (Vector3D) null, precision_DoubleEquivalence0);
      LinecastPoint3D linecastPoint3D0 = null;
      try {
        linecastPoint3D0 = new LinecastPoint3D((Vector3D) null, (Vector3D) null, line3D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.LinecastPoint3D"", e);
      }
  }"
3035,"    public LinecastPoint3D(final Vector3D point, final Vector3D normal, final Line3D line) {
        super(point, normal.normalize(), line);
    }","  public void test5()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      LinecastPoint3D linecastPoint3D0 = null;
      try {
        linecastPoint3D0 = new LinecastPoint3D(vector3D0, vector3D0, line3D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
3036,"    public static void sortAndFilter(final List<LinecastPoint3D> pts) {
        pts.sort(ABSCISSA_ORDER);

        double currentAbscissa = Double.POSITIVE_INFINITY;
        final List<LinecastPoint3D> abscissaList = new ArrayList<>();

        final ListIterator<LinecastPoint3D> it = pts.listIterator();
        LinecastPoint3D pt;
        while (it.hasNext()) {
            pt = it.next();
            if (!pt.getLine().getPrecision().eq(currentAbscissa, pt.getAbscissa())) {
                // new abscissa value
                currentAbscissa = pt.getAbscissa();
                abscissaList.clear();

                abscissaList.add(pt);
            } else if (containsEq(pt, abscissaList)) {
                // duplicate found for this abscissa value
                it.remove();
            } else {
                // not a duplicate
                abscissaList.add(pt);
            }
        }
    }","  public void test6()  throws Throwable  {
      LinkedList<LinecastPoint3D> linkedList0 = new LinkedList<LinecastPoint3D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, false, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      LinecastPoint3D linecastPoint3D0 = new LinecastPoint3D(vector3D_Unit0, vector3D_Unit0, line3D0);
      linkedList0.add(linecastPoint3D0);
      linkedList0.add(linecastPoint3D0);
      LinecastPoint3D.sortAndFilter(linkedList0);
      LinecastPoint3D.sortAndFilter(linkedList0);
}"
3037,"    public boolean eq(final LinecastPoint3D other, final Precision.DoubleEquivalence precision) {
        return getLine().eq(other.getLine(), precision) &&
                getPoint().eq(other.getPoint(), precision) &&
                getNormal().eq(other.getNormal(), precision);
    }","  public void test7()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      LinecastPoint3D linecastPoint3D0 = new LinecastPoint3D(vector3D_Unit0, vector3D_Unit0, line3D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, true).when(precision_DoubleEquivalence1).eq(anyDouble() , anyDouble());
      boolean boolean0 = linecastPoint3D0.eq(linecastPoint3D0, precision_DoubleEquivalence1);
}"
3038,"    public double getSubspaceStart() {
        return Double.NEGATIVE_INFINITY;
    }","  public void test0()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1210.59, 1210.59, 821.4);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D(line3D0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      LineSpanningSubset3D lineSpanningSubset3D1 = lineSpanningSubset3D0.transform(affineTransformMatrix3D0);
}"
3039,"    public LineSpanningSubset3D transform(final Transform<Vector3D> transform) {
        return new LineSpanningSubset3D(getLine().transform(transform));
    }","  public void test1()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D0, vector3D_Unit0, precision_DoubleEquivalence0);
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D(line3D0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors(vector3D0, (Vector3D) vector3D_Unit0, vector3D0);
      // Undeclared exception!
      try { 
        lineSpanningSubset3D0.transform(affineTransformMatrix3D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
3040,"    public String toString() {
        final Line3D line = getLine();

        return MessageFormat.format(Line3D.TO_STRING_FORMAT,
                getClass().getSimpleName(),
                line.getOrigin(),
                line.getDirection());
    }","  public void test2()  throws Throwable  {
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D((Line3D) null);
      // Undeclared exception!
      try { 
        lineSpanningSubset3D0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.LineSpanningSubset3D"", e);
      }
  }"
3041,"    public boolean isInfinite() {
        return true;
    }","  public void test3()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D(line3D0);
      boolean boolean0 = lineSpanningSubset3D0.isInfinite();
}"
3042,"    public boolean isFinite() {
        return false;
    }","  public void test4()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1210.59, 1210.59, 821.4);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D(line3D0);
      boolean boolean0 = lineSpanningSubset3D0.isFinite();
}"
3043,"    public double getSubspaceStart() {
        return Double.NEGATIVE_INFINITY;
    }","  public void test5()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1210.59, 1210.59, 821.4);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D(line3D0);
      double double0 = lineSpanningSubset3D0.getSubspaceStart();
}"
3044,"    public Vector3D getStartPoint() {
        return null;
    }","  public void test6()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1210.59, 1210.59, 821.4);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D(line3D0);
      Vector3D vector3D1 = lineSpanningSubset3D0.getStartPoint();
}"
3045,"    public double getSize() {
        return Double.POSITIVE_INFINITY;
    }","  public void test7()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1210.59, 1210.59, 821.4);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D(line3D0);
      double double0 = lineSpanningSubset3D0.getSize();
}"
3046,"    public String toString() {
        final Line3D line = getLine();

        return MessageFormat.format(Line3D.TO_STRING_FORMAT,
                getClass().getSimpleName(),
                line.getOrigin(),
                line.getDirection());
    }","  public void test8()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D(line3D0);
      String string0 = lineSpanningSubset3D0.toString();
}"
3047,"    public double getSubspaceEnd() {
        return Double.POSITIVE_INFINITY;
    }","  public void test9()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1210.59, 1210.59, 821.4);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D(line3D0);
      double double0 = lineSpanningSubset3D0.getSubspaceEnd();
}"
3048,"    public LineSpanningSubset3D transform(final Transform<Vector3D> transform) {
        return new LineSpanningSubset3D(getLine().transform(transform));
    }","  public void test10()  throws Throwable  {
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D((Line3D) null);
      Quaternion quaternion0 = Quaternion.ONE;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(quaternion0);
      // Undeclared exception!
      try { 
        lineSpanningSubset3D0.transform(quaternionRotation0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.LineSpanningSubset3D"", e);
      }
  }"
3049,"    boolean containsAbscissa(final double abscissa) {
        return true;
    }","  public void test11()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D(line3D0);
      boolean boolean0 = lineSpanningSubset3D0.containsAbscissa(5235.4320024816);
}"
3050,"    public Bounds3D getBounds() {
        return null; // infinite; no bounds
    }","  public void test12()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D(line3D0);
      Bounds3D bounds3D0 = lineSpanningSubset3D0.getBounds();
}"
3051,"    public Vector3D getEndPoint() {
        return null;
    }","  public void test13()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D(line3D0);
      Vector3D vector3D0 = lineSpanningSubset3D0.getEndPoint();
}"
3052,"    public Vector3D getCentroid() {
        return null; // infinite; no center
    }","  public void test14()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D(line3D0);
      Vector3D vector3D0 = lineSpanningSubset3D0.getCentroid();
}"
3053,"    public Bounds3D getBounds() {
        final double min = region.getMin();
        final double max = region.getMax();

        if (Double.isFinite(min) && Double.isFinite(max)) {
            final Line3D line = getLine();

            return Bounds3D.builder()
                    .add(line.toSpace(min))
                    .add(line.toSpace(max))
                    .build();
        }

        return null;
    }","  public void test0()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 3.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, regionBSPTree1D0);
      Bounds3D bounds3D0 = embeddedTreeLineSubset3D0.getBounds();
}"
3054,"    public EmbeddedTreeLineSubset3D(final Line3D line) {
        this(line, false);
    }","  public void test1()  throws Throwable  {
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D((Line3D) null, true);
  }"
3055,"    public EmbeddedTreeLineSubset3D transform(final Transform<Vector3D> transform) {
        final SubspaceTransform st = getLine().subspaceTransform(transform);

        final RegionBSPTree1D tRegion = RegionBSPTree1D.empty();
        tRegion.copy(region);
        tRegion.transform(st.getTransform());

        return new EmbeddedTreeLineSubset3D(st.getLine(), tRegion);
    }","  public void test2()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(0.25, 0.25, 0.25);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence1);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D0, vector3D0, vector3D0, vector3D0);
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, false);
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D1 = embeddedTreeLineSubset3D0.transform(quaternionRotation0);
}"
3056,"    public String toString() {
        final Line3D line = getLine();

        final StringBuilder sb = new StringBuilder();
        sb.append(this.getClass().getSimpleName())
            .append('[')
            .append(""lineOrigin= "")
            .append(line.getOrigin())
            .append("", lineDirection= "")
            .append(line.getDirection())
            .append("", region= "")
            .append(region)
            .append(']');

        return sb.toString();
    }","  public void test3()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(0.25, 0.25, 0.25);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence1);
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, false);
      String string0 = embeddedTreeLineSubset3D0.toString();
}"
3057,"    public List<LineConvexSubset3D> toConvex() {
        final List<Interval> intervals = region.toIntervals();

        final Line3D line = getLine();
        final List<LineConvexSubset3D> convex = new ArrayList<>(intervals.size());

        for (final Interval interval : intervals) {
            convex.add(Lines3D.subsetFromInterval(line, interval));
        }

        return convex;
    }","  public void test4()  throws Throwable  {
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D((Line3D) null, false);
      List<LineConvexSubset3D> list0 = embeddedTreeLineSubset3D0.toConvex();
}"
3058,"    public RegionBSPTree1D getSubspaceRegion() {
        return region;
    }","  public void test5()  throws Throwable  {
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D((Line3D) null, (RegionBSPTree1D) null);
      RegionBSPTree1D regionBSPTree1D0 = embeddedTreeLineSubset3D0.getSubspaceRegion();
}"
3059,"    public double getSize() {
        return region.getSize();
    }","  public void test6()  throws Throwable  {
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D((Line3D) null, false);
      double double0 = embeddedTreeLineSubset3D0.getSize();
}"
3060,"    public Vector3D getCentroid() {
        final Vector1D subcenter = region.getCentroid();
        return subcenter != null ?
                getLine().toSpace(subcenter) :
                null;
    }","  public void test7()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, regionBSPTree1D0);
      Vector3D vector3D0 = embeddedTreeLineSubset3D0.getCentroid();
}"
3061,"    public Vector3D getCentroid() {
        final Vector1D subcenter = region.getCentroid();
        return subcenter != null ?
                getLine().toSpace(subcenter) :
                null;
    }","  public void test8()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence1);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, regionBSPTree1D0);
      Vector3D vector3D1 = embeddedTreeLineSubset3D0.getCentroid();
}"
3062,"    public Vector3D getCentroid() {
        final Vector1D subcenter = region.getCentroid();
        return subcenter != null ?
                getLine().toSpace(subcenter) :
                null;
    }","  public void test9()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D1 = Vector3D.NEGATIVE_INFINITY;
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D1, vector3D0, precision_DoubleEquivalence1);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, regionBSPTree1D0);
      Vector3D vector3D2 = embeddedTreeLineSubset3D0.getCentroid();
}"
3063,"    public EmbeddedTreeLineSubset3D transform(final Transform<Vector3D> transform) {
        final SubspaceTransform st = getLine().subspaceTransform(transform);

        final RegionBSPTree1D tRegion = RegionBSPTree1D.empty();
        tRegion.copy(region);
        tRegion.transform(st.getTransform());

        return new EmbeddedTreeLineSubset3D(st.getLine(), tRegion);
    }","  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector1D vector1D0 = Vector1D.of(5411.5);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence1);
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, true);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(0.0, (-1620.1744205316), 0.0);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset3D0.transform(affineTransformMatrix3D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
3064,"    public List<LineConvexSubset3D> toConvex() {
        final List<Interval> intervals = region.toIntervals();

        final Line3D line = getLine();
        final List<LineConvexSubset3D> convex = new ArrayList<>(intervals.size());

        for (final Interval interval : intervals) {
            convex.add(Lines3D.subsetFromInterval(line, interval));
        }

        return convex;
    }","  public void test11()  throws Throwable  {
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D((Line3D) null, (RegionBSPTree1D) null);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset3D0.toConvex();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.EmbeddedTreeLineSubset3D"", e);
      }
  }"
3065,"    public List<LineConvexSubset3D> toConvex() {
        final List<Interval> intervals = region.toIntervals();

        final Line3D line = getLine();
        final List<LineConvexSubset3D> convex = new ArrayList<>(intervals.size());

        for (final Interval interval : intervals) {
            convex.add(Lines3D.subsetFromInterval(line, interval));
        }

        return convex;
    }","  public void test12()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn((-2585.064), (-2585.064), (-2585.064), 68.016846773).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of((-2585.064), (-2585.064), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, (Vector3D) null, precision_DoubleEquivalence1);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-2585.064));
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      RegionBSPTree1D regionBSPTree1D0 = interval1.toTree();
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, regionBSPTree1D0);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset3D0.toConvex();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval: hyperplanes do not form interval: OrientedPoint[point= (6682555.884095999), direction= (-1.0)], OrientedPoint[point= (6682555.884095999), direction= (1.0)]
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Interval"", e);
      }
  }"
3066,"    public double getSize() {
        return region.getSize();
    }","  public void test13()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((-2585.064), (-2585.064), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, (Vector3D) null, precision_DoubleEquivalence1);
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, (RegionBSPTree1D) null);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset3D0.getSize();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.EmbeddedTreeLineSubset3D"", e);
      }
  }"
3067,"    public Vector3D getCentroid() {
        final Vector1D subcenter = region.getCentroid();
        return subcenter != null ?
                getLine().toSpace(subcenter) :
                null;
    }","  public void test14()  throws Throwable  {
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D((Line3D) null, (RegionBSPTree1D) null);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset3D0.getCentroid();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.EmbeddedTreeLineSubset3D"", e);
      }
  }"
3068,"    public Bounds3D getBounds() {
        final double min = region.getMin();
        final double max = region.getMax();

        if (Double.isFinite(min) && Double.isFinite(max)) {
            final Line3D line = getLine();

            return Bounds3D.builder()
                    .add(line.toSpace(min))
                    .add(line.toSpace(max))
                    .build();
        }

        return null;
    }","  public void test15()  throws Throwable  {
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D((Line3D) null, (RegionBSPTree1D) null);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset3D0.getBounds();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.EmbeddedTreeLineSubset3D"", e);
      }
  }"
3069,"    public double getSize() {
        return region.getSize();
    }","  public void test16()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((-2583.334592994776), (-2583.334592994776), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, regionBSPTree1D0);
      double double0 = embeddedTreeLineSubset3D0.getSize();
}"
3070,"    public List<LineConvexSubset3D> toConvex() {
        final List<Interval> intervals = region.toIntervals();

        final Line3D line = getLine();
        final List<LineConvexSubset3D> convex = new ArrayList<>(intervals.size());

        for (final Interval interval : intervals) {
            convex.add(Lines3D.subsetFromInterval(line, interval));
        }

        return convex;
    }","  public void test17()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-2482.363846487031), (-2482.363846487031)).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of((-2482.363846487031), (-2482.363846487031), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, regionBSPTree1D0);
      List<LineConvexSubset3D> list0 = embeddedTreeLineSubset3D0.toConvex();
}"
3071,"    public Bounds3D getBounds() {
        final double min = region.getMin();
        final double max = region.getMax();

        if (Double.isFinite(min) && Double.isFinite(max)) {
            final Line3D line = getLine();

            return Bounds3D.builder()
                    .add(line.toSpace(min))
                    .add(line.toSpace(max))
                    .build();
        }

        return null;
    }","  public void test18()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((-2583.334592994776), (-2583.334592994776), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, regionBSPTree1D0);
      HyperplaneConvexSubset<Vector1D> hyperplaneConvexSubset0 = orientedPoint0.span();
      RegionCutRule regionCutRule0 = RegionCutRule.PLUS_INSIDE;
      regionBSPTree1D0.insert((HyperplaneSubset<Vector1D>) hyperplaneConvexSubset0, regionCutRule0);
      Bounds3D bounds3D0 = embeddedTreeLineSubset3D0.getBounds();
}"
3072,"    public Bounds3D getBounds() {
        final double min = region.getMin();
        final double max = region.getMax();

        if (Double.isFinite(min) && Double.isFinite(max)) {
            final Line3D line = getLine();

            return Bounds3D.builder()
                    .add(line.toSpace(min))
                    .add(line.toSpace(max))
                    .build();
        }

        return null;
    }","  public void test19()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((-2583.334592994776), (-2583.334592994776), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, regionBSPTree1D0);
      Bounds3D bounds3D0 = embeddedTreeLineSubset3D0.getBounds();
}"
3073,"    public Vector3D getCentroid() {
        final Vector1D subcenter = region.getCentroid();
        return subcenter != null ?
                getLine().toSpace(subcenter) :
                null;
    }","  public void test20()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((-2482.363846487031), (-2482.363846487031), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      RegionBSPTree1D regionBSPTree1D0 = interval0.toTree();
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, regionBSPTree1D0);
      Vector3D vector3D0 = embeddedTreeLineSubset3D0.getCentroid();
}"
3074,"    public Vector3D getCentroid() {
        final Vector1D subcenter = region.getCentroid();
        return subcenter != null ?
                getLine().toSpace(subcenter) :
                null;
    }","  public void test21()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((-2583.334592994776), (-2583.334592994776), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, regionBSPTree1D0);
      Vector3D vector3D0 = embeddedTreeLineSubset3D0.getCentroid();
}"
3075,"    public String toString() {
        final Line3D line = getLine();

        final StringBuilder sb = new StringBuilder();
        sb.append(this.getClass().getSimpleName())
            .append('[')
            .append(""lineOrigin= "")
            .append(line.getOrigin())
            .append("", lineDirection= "")
            .append(line.getDirection())
            .append("", region= "")
            .append(region)
            .append(']');

        return sb.toString();
    }","  public void test22()  throws Throwable  {
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D((Line3D) null);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset3D0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.EmbeddedTreeLineSubset3D"", e);
      }
  }"
3076,"    public RegionBSPTree1D getSubspaceRegion() {
        return region;
    }","  public void test23()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((-2583.334592994776), (-2583.334592994776), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D(line3D0, regionBSPTree1D0);
      RegionBSPTree1D regionBSPTree1D1 = embeddedTreeLineSubset3D0.getSubspaceRegion();
}"
3077,"    public EmbeddedTreeLineSubset3D transform(final Transform<Vector3D> transform) {
        final SubspaceTransform st = getLine().subspaceTransform(transform);

        final RegionBSPTree1D tRegion = RegionBSPTree1D.empty();
        tRegion.copy(region);
        tRegion.transform(st.getTransform());

        return new EmbeddedTreeLineSubset3D(st.getLine(), tRegion);
    }","  public void test24()  throws Throwable  {
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D((Line3D) null);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset3D0.transform((Transform<Vector3D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.EmbeddedTreeLineSubset3D"", e);
      }
  }"
3078,"    public Vector1D toSubspace(final Vector3D pt) {
        return line.toSubspace(pt);
    }","  public void test0()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(477.97215481644, 477.97215481644, 477.97215481644);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D(line3D0);
      Vector1D vector1D0 = lineSpanningSubset3D0.toSubspace(vector3D0);
}"
3079,"    public Vector1D toSubspace(final Vector3D pt) {
        return line.toSubspace(pt);
    }","  public void test1()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of((-746.3238049), (-746.3238049), (-1.0));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = line3D0.rayFrom(1002.9);
      Vector3D vector3D1 = Vector3D.ZERO;
      Vector3D.Unit vector3D_Unit0 = vector3D0.directionTo(vector3D1);
      Vector1D vector1D0 = ray3D0.toSubspace((Vector3D) vector3D_Unit0);
}"
3080,"    public Vector3D toSpace(final Vector1D pt) {
        return line.toSpace(pt);
    }","  public void test2()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = line3D0.segment(0.0, 0.0);
      Vector1D vector1D0 = segment3D0.toSubspace(vector3D0);
      Vector3D vector3D1 = segment3D0.toSpace(vector1D0);
}"
3081,"    public Vector3D toSpace(final Vector1D pt) {
        return line.toSpace(pt);
    }","  public void test3()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of((-1938.489262117939), 0.0, (-1938.489262117939));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = line3D0.reverseRayTo(vector3D0);
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector3D vector3D1 = reverseRay3D0.toSpace(vector1D0);
}"
3082,"    public Vector3D toSpace(final Vector1D pt) {
        return line.toSpace(pt);
    }","  public void test4()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, (Precision.DoubleEquivalence) null);
      Ray3D ray3D0 = line3D0.rayFrom(1032.358);
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector3D vector3D1 = ray3D0.toSpace(vector1D0);
}"
3083,"    public abstract HyperplaneBoundedRegion<Vector1D> getSubspaceRegion();
}
","  public void test5()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D((Vector3D) null, (Vector3D) null, precision_DoubleEquivalence0);
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D(line3D0);
      HyperplaneBoundedRegion<Vector1D> hyperplaneBoundedRegion0 = lineSpanningSubset3D0.getSubspaceRegion();
}"
3084,"    public Line3D getLine() {
        return line;
    }","  public void test6()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, 0.0, 0.0);
      Line3D line3D1 = segment3D0.getLine();
}"
3085,"    public abstract Vector3D getCentroid();

    /** Get the 3D bounding box of the line subset or null if the subset is
     * empty or infinite.
     * @return the 3D bounding box the line subset or null if the subset is
     *      empty or infinite
     */
    public abstract Bounds3D getBounds();

    /** Get the subspace region for the instance.
     * @return the subspace region for the instance
     */
    @Override
    public abstract HyperplaneBoundedRegion<Vector1D> getSubspaceRegion();
}
","  public void test7()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D(line3D0);
      Vector3D vector3D1 = lineSpanningSubset3D0.getCentroid();
}"
3086,"    public abstract Vector3D getCentroid();

    /** Get the 3D bounding box of the line subset or null if the subset is
     * empty or infinite.
     * @return the 3D bounding box the line subset or null if the subset is
     *      empty or infinite
     */
    public abstract Bounds3D getBounds();

    /** Get the subspace region for the instance.
     * @return the subspace region for the instance
     */
    @Override
    public abstract HyperplaneBoundedRegion<Vector1D> getSubspaceRegion();
}
","  public void test8()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, (-32.768652542), 2724.0);
      Vector3D vector3D1 = segment3D0.getCentroid();
}"
3087,"    public abstract Vector3D getCentroid();

    /** Get the 3D bounding box of the line subset or null if the subset is
     * empty or infinite.
     * @return the 3D bounding box the line subset or null if the subset is
     *      empty or infinite
     */
    public abstract Bounds3D getBounds();

    /** Get the subspace region for the instance.
     * @return the subspace region for the instance
     */
    @Override
    public abstract HyperplaneBoundedRegion<Vector1D> getSubspaceRegion();
}
","  public void test9()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, (-32.768652542), 0.0);
      Vector3D vector3D1 = segment3D0.getCentroid();
}"
3088,"    public abstract Bounds3D getBounds();

    /** Get the subspace region for the instance.
     * @return the subspace region for the instance
     */
    @Override
    public abstract HyperplaneBoundedRegion<Vector1D> getSubspaceRegion();
}
","  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D(line3D0);
      Bounds3D bounds3D0 = lineSpanningSubset3D0.getBounds();
}"
3089,"    public abstract Bounds3D getBounds();

    /** Get the subspace region for the instance.
     * @return the subspace region for the instance
     */
    @Override
    public abstract HyperplaneBoundedRegion<Vector1D> getSubspaceRegion();
}
","  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of((-2077.175036), (-2077.175036), (-2077.175036));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, (-2077.175036), (-2077.175036));
      Bounds3D bounds3D0 = segment3D0.getBounds();
}"
3090,"    public Vector1D toSubspace(final Vector3D pt) {
        return line.toSubspace(pt);
    }","  public void test12()  throws Throwable  {
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D((Line3D) null);
      // Undeclared exception!
      try { 
        lineSpanningSubset3D0.toSubspace((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.LineSubset3D"", e);
      }
  }"
3091,"    public abstract HyperplaneBoundedRegion<Vector1D> getSubspaceRegion();
}
","  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D0);
      // Undeclared exception!
      try { 
        reverseRay3D0.getSubspaceRegion();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval values: [-\u221E, \uFFFD]
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Interval"", e);
      }
  }"
3092,"    public abstract Vector3D getCentroid();

    /** Get the 3D bounding box of the line subset or null if the subset is
     * empty or infinite.
     * @return the 3D bounding box the line subset or null if the subset is
     *      empty or infinite
     */
    public abstract Bounds3D getBounds();

    /** Get the subspace region for the instance.
     * @return the subspace region for the instance
     */
    @Override
    public abstract HyperplaneBoundedRegion<Vector1D> getSubspaceRegion();
}
","  public void test14()  throws Throwable  {
      Segment3D segment3D0 = new Segment3D((Line3D) null, 0.0, 0.0);
      // Undeclared exception!
      try { 
        segment3D0.getCentroid();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Segment3D"", e);
      }
  }"
3093,"    public abstract Bounds3D getBounds();

    /** Get the subspace region for the instance.
     * @return the subspace region for the instance
     */
    @Override
    public abstract HyperplaneBoundedRegion<Vector1D> getSubspaceRegion();
}
","  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, 0.0, 0.0);
      // Undeclared exception!
      try { 
        segment3D0.getBounds();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Invalid bounds: min= (NaN, NaN, NaN), max= (NaN, NaN, NaN)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Bounds3D$Builder"", e);
      }
  }"
3094,"    public Line3D getLine() {
        return line;
    }","  public void test16()  throws Throwable  {
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D((Line3D) null);
      Line3D line3D0 = lineSpanningSubset3D0.getLine();
}"
3095,"    public Vector3D toSpace(final Vector1D pt) {
        return line.toSpace(pt);
    }","  public void test17()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset3D embeddedTreeLineSubset3D0 = new EmbeddedTreeLineSubset3D((Line3D) null, regionBSPTree1D0);
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset3D0.toSpace(vector1D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.LineSubset3D"", e);
      }
  }"
3096,"    public abstract HyperplaneBoundedRegion<Vector1D> getSubspaceRegion();
}
","  public void test18()  throws Throwable  {
      ReverseRay3D reverseRay3D0 = new ReverseRay3D((Line3D) null, 0.0);
      // Undeclared exception!
      try { 
        reverseRay3D0.getSubspaceRegion();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.LineConvexSubset3D"", e);
      }
  }"
3097,"    public double getSubspaceStart() {
        return start;
    }","  public void test0()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(0.0, 209.566459, 0.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Line3D line3D1 = line3D0.transform(quaternionRotation0);
      Ray3D ray3D0 = line3D1.rayFrom(0.0);
      Ray3D ray3D1 = ray3D0.transform(quaternionRotation0);
}"
3098,"    public double getSubspaceStart() {
        return start;
    }","  public void test1()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Line3D line3D1 = line3D0.reverse();
      Ray3D ray3D0 = new Ray3D(line3D1, vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createTranslation((Vector3D) vector3D_Unit0);
      Ray3D ray3D1 = ray3D0.transform(affineTransformMatrix3D0);
}"
3099,"    public double getSubspaceStart() {
        return start;
    }","  public void test2()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = new Ray3D(line3D0, 514.836082786626);
      double double0 = ray3D0.getSubspaceStart();
}"
3100,"    public double getSubspaceStart() {
        return start;
    }","  public void test3()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = new Ray3D(line3D0, Double.NEGATIVE_INFINITY);
      double double0 = ray3D0.getSubspaceStart();
}"
3101,"    public Vector3D getStartPoint() {
        return getLine().toSpace(start);
    }","  public void test4()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(33.82, 33.82, 3852.8055061);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Ray3D ray3D0 = new Ray3D(line3D0, vector3D0);
      Vector3D vector3D1 = ray3D0.getStartPoint();
}"
3102,"    public Vector3D getStartPoint() {
        return getLine().toSpace(start);
    }","  public void test5()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D vector3D0 = Vector3D.of(0.6, 0.6, 0.6);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D0, precision_DoubleEquivalence0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createTranslation((Vector3D) vector3D_Unit0);
      Line3D line3D1 = line3D0.transform(affineTransformMatrix3D0);
      Ray3D ray3D0 = line3D1.rayFrom((Vector3D) vector3D_Unit0);
      Vector3D vector3D1 = ray3D0.getStartPoint();
}"
3103,"    public Vector3D getStartPoint() {
        return getLine().toSpace(start);
    }","  public void test6()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = line3D0.rayFrom((-1753.6));
      Vector3D vector3D0 = ray3D0.getStartPoint();
}"
3104,"    public double getSubspaceStart() {
        return start;
    }","  public void test7()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      Ray3D ray3D0 = line3D0.rayFrom(0.0);
      ray3D0.getStartPoint();
}"
3105,"    public Vector3D getStartPoint() {
        return getLine().toSpace(start);
    }","  public void test8()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = new Ray3D(line3D0, Double.NEGATIVE_INFINITY);
      Vector3D vector3D0 = ray3D0.getStartPoint();
}"
3106,"    public double getSubspaceStart() {
        return start;
    }","  public void test9()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Line3D line3D0 = new Line3D(vector3D_Unit0, (Vector3D) null, (Precision.DoubleEquivalence) null);
      Ray3D ray3D0 = line3D0.rayFrom(0.0);
      ray3D0.getDirection();
}"
3107,"    public double getSubspaceStart() {
        return start;
    }","  public void test10()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Vector3D vector3D0 = Vector3D.NaN;
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = new Ray3D(line3D0, 596.1166395764305);
      ray3D0.getDirection();
}"
3108,"    public double getSubspaceStart() {
        return start;
    }","  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = new Ray3D(line3D0, 7.888609052210118E-31);
      ray3D0.getDirection();
}"
3109,"    public double getSubspaceStart() {
        return start;
    }","  public void test12()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      Ray3D ray3D0 = line3D0.rayFrom(0.0);
      ray3D0.getDirection();
}"
3110,"    public double getSubspaceStart() {
        return start;
    }","  public void test13()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = new Ray3D(line3D0, 514.836082786626);
      ray3D0.getDirection();
}"
3111,"    public double getSubspaceStart() {
        return start;
    }","  public void test14()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(33.82, 33.82, 3852.8055061);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Line3D line3D1 = line3D0.reverse();
      Ray3D ray3D0 = new Ray3D(line3D1, vector3D_Unit0);
      ray3D0.getDirection();
}"
3112,"    public double getSubspaceStart() {
        return start;
    }","  public void test15()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = new Ray3D(line3D0, Double.NEGATIVE_INFINITY);
      ray3D0.containsAbscissa(Double.NEGATIVE_INFINITY);
}"
3113,"    public Ray3D transform(final Transform<Vector3D> transform) {
        final Line3D tLine = getLine().transform(transform);
        final Vector3D tStart = transform.apply(getStartPoint());

        return new Ray3D(tLine, tStart);
    }","  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(928.23512, 928.23512, 928.23512);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = new Ray3D(line3D0, vector3D_Unit0);
      // Undeclared exception!
      try { 
        ray3D0.transform((Transform<Vector3D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Line3D"", e);
      }
  }"
3114,"    public double getSubspaceStart() {
        return start;
    }","  public void test17()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = new Ray3D(line3D0, Double.NEGATIVE_INFINITY);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      ray3D0.transform(affineTransformMatrix3D0);
}"
3115,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName())
            .append(""[startPoint= "")
            .append(getStartPoint())
            .append("", direction= "")
            .append(getLine().getDirection())
            .append(']');

        return sb.toString();
    }","  public void test18()  throws Throwable  {
      Ray3D ray3D0 = new Ray3D((Line3D) null, (-560.15652));
      // Undeclared exception!
      try { 
        ray3D0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Ray3D"", e);
      }
  }"
3116,"    public Vector3D getDirection() {
        return getLine().getDirection();
    }","  public void test19()  throws Throwable  {
      Ray3D ray3D0 = new Ray3D((Line3D) null, 1522.579);
      // Undeclared exception!
      try { 
        ray3D0.getDirection();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Ray3D"", e);
      }
  }"
3117,"    boolean containsAbscissa(final double abscissa) {
        return getLine().getPrecision().gte(abscissa, start);
    }","  public void test20()  throws Throwable  {
      Ray3D ray3D0 = new Ray3D((Line3D) null, 4.149515568880993E180);
      // Undeclared exception!
      try { 
        ray3D0.containsAbscissa(2179.155);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Ray3D"", e);
      }
  }"
3118,"    Ray3D(final Line3D line, final Vector3D startPoint) {
        this(line, line.abscissa(startPoint));
    }","  public void test21()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D((Vector3D) null, (Vector3D) null, precision_DoubleEquivalence0);
      Ray3D ray3D0 = null;
      try {
        ray3D0 = new Ray3D(line3D0, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Line3D"", e);
      }
  }"
3119,"    public Vector3D getStartPoint() {
        return getLine().toSpace(start);
    }","  public void test22()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D((Vector3D) null, (Vector3D) null, precision_DoubleEquivalence0);
      Ray3D ray3D0 = line3D0.rayFrom((-2815.1672));
      // Undeclared exception!
      try { 
        ray3D0.getStartPoint();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
3120,"    public double getSubspaceStart() {
        return start;
    }","  public void test23()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = line3D0.rayFrom((Vector3D) vector3D_Unit0);
      double double0 = ray3D0.getSubspaceStart();
}"
3121,"    public double getSubspaceStart() {
        return start;
    }","  public void test24()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = line3D0.rayFrom((Vector3D) vector3D_Unit0);
      boolean boolean0 = ray3D0.isInfinite();
}"
3122,"    public boolean isInfinite() {
        return true;
    }","  public void test25()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = line3D0.rayFrom((Vector3D) vector3D_Unit0);
      boolean boolean0 = ray3D0.isInfinite();
}"
3123,"    public double getSubspaceStart() {
        return start;
    }","  public void test26()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = line3D0.rayFrom((Vector3D) vector3D_Unit0);
      boolean boolean0 = ray3D0.isFinite();
}"
3124,"    public boolean isFinite() {
        return false;
    }","  public void test27()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = line3D0.rayFrom((Vector3D) vector3D_Unit0);
      boolean boolean0 = ray3D0.isFinite();
}"
3125,"    public double getSubspaceStart() {
        return start;
    }","  public void test28()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = line3D0.rayFrom((Vector3D) vector3D_Unit0);
      double double0 = ray3D0.getSize();
}"
3126,"    public double getSize() {
        return Double.POSITIVE_INFINITY;
    }","  public void test29()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = line3D0.rayFrom((Vector3D) vector3D_Unit0);
      double double0 = ray3D0.getSize();
}"
3127,"    public double getSubspaceStart() {
        return start;
    }","  public void test30()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = line3D0.rayFrom((Vector3D) vector3D_Unit0);
      ray3D0.containsAbscissa(Double.POSITIVE_INFINITY);
}"
3128,"    public double getSubspaceStart() {
        return start;
    }","  public void test31()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = line3D0.rayFrom((Vector3D) vector3D_Unit0);
      double double0 = ray3D0.getSubspaceEnd();
}"
3129,"    public double getSubspaceEnd() {
        return Double.POSITIVE_INFINITY;
    }","  public void test32()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = line3D0.rayFrom((Vector3D) vector3D_Unit0);
      double double0 = ray3D0.getSubspaceEnd();
}"
3130,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName())
            .append(""[startPoint= "")
            .append(getStartPoint())
            .append("", direction= "")
            .append(getLine().getDirection())
            .append(']');

        return sb.toString();
    }","  public void test33()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = line3D0.rayFrom((Vector3D) vector3D_Unit0);
      String string0 = ray3D0.toString();
}"
3131,"    public double getSubspaceStart() {
        return start;
    }","  public void test34()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = line3D0.rayFrom((Vector3D) vector3D_Unit0);
      String string0 = ray3D0.toString();
}"
3132,"    public double getSubspaceStart() {
        return start;
    }","  public void test35()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = line3D0.rayFrom((Vector3D) vector3D_Unit0);
      ray3D0.getEndPoint();
}"
3133,"    public double getSubspaceStart() {
        return start;
    }","  public void test36()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = line3D0.rayFrom((Vector3D) vector3D_Unit0);
      ray3D0.getBounds();
}"
3134,"    public double getSubspaceStart() {
        return start;
    }","  public void test37()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = line3D0.rayFrom((Vector3D) vector3D_Unit0);
      ray3D0.getCentroid();
}"
3135,"    public static LineConvexSubset3D subsetFromInterval(final Line3D line, final Interval interval) {
        return subsetFromInterval(line, interval.getMin(), interval.getMax());
    }","  public void test0()  throws Throwable  {
      Interval interval0 = Interval.full();
      LineConvexSubset3D lineConvexSubset3D0 = Lines3D.subsetFromInterval((Line3D) null, interval0);
}"
3136,"    public static LineConvexSubset3D subsetFromInterval(final Line3D line, final Interval interval) {
        return subsetFromInterval(line, interval.getMin(), interval.getMax());
    }","  public void test1()  throws Throwable  {
      LineConvexSubset3D lineConvexSubset3D0 = Lines3D.subsetFromInterval((Line3D) null, 0.0, 171.7);
}"
3137,"    public static LineConvexSubset3D subsetFromInterval(final Line3D line, final Interval interval) {
        return subsetFromInterval(line, interval.getMin(), interval.getMax());
    }","  public void test2()  throws Throwable  {
      LineConvexSubset3D lineConvexSubset3D0 = Lines3D.subsetFromInterval((Line3D) null, 0.0, 171.7);
}"
3138,"    public static LineConvexSubset3D subsetFromInterval(final Line3D line, final Interval interval) {
        return subsetFromInterval(line, interval.getMin(), interval.getMax());
    }","  public void test3()  throws Throwable  {
      LineConvexSubset3D lineConvexSubset3D0 = Lines3D.subsetFromInterval((Line3D) null, (-4.3285119272), (-3276.21703142563));
}"
3139,"    public static Segment3D segmentFromLocations(final Line3D line, final double a, final double b) {

        if (Double.isFinite(a) && Double.isFinite(b)) {
            final double min = Math.min(a, b);
            final double max = Math.max(a, b);

            return new Segment3D(line, min, max);
        }

        throw new IllegalArgumentException(
                MessageFormat.format(""Invalid line segment locations: {0}, {1}"",
                        Double.toString(a), Double.toString(b)));
    }","  public void test4()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(1740.5563435, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      Segment3D segment3D0 = Lines3D.segmentFromLocations(line3D0, 1740.5563435, (-961.69885073));
}"
3140,"    public static Segment3D segmentFromPoints(final Vector3D startPoint, final Vector3D endPoint,
            final Precision.DoubleEquivalence precision) {
        final Line3D line = Lines3D.fromPoints(startPoint, endPoint, precision);

        // we know that the points lie on the line and are in increasing abscissa order
        // since they were used to create the line
        return new Segment3D(line, startPoint, endPoint);
    }","  public void test5()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1507.8806429, 3536.885909742515, 3536.885909742515);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = Lines3D.segmentFromPoints(line3D0, vector3D0, vector3D0);
}"
3141,"    public static Segment3D segmentFromPoints(final Vector3D startPoint, final Vector3D endPoint,
            final Precision.DoubleEquivalence precision) {
        final Line3D line = Lines3D.fromPoints(startPoint, endPoint, precision);

        // we know that the points lie on the line and are in increasing abscissa order
        // since they were used to create the line
        return new Segment3D(line, startPoint, endPoint);
    }","  public void test6()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1507.8806429, 3536.885909742515, 3536.885909742515);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = Lines3D.segmentFromPoints(line3D0, vector3D0, vector3D0);
}"
3142,"    public static Segment3D segmentFromPoints(final Vector3D startPoint, final Vector3D endPoint,
            final Precision.DoubleEquivalence precision) {
        final Line3D line = Lines3D.fromPoints(startPoint, endPoint, precision);

        // we know that the points lie on the line and are in increasing abscissa order
        // since they were used to create the line
        return new Segment3D(line, startPoint, endPoint);
    }","  public void test7()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max(0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit1, vector3D_Unit1, precision_DoubleEquivalence1);
      Vector3D[] vector3DArray0 = new Vector3D[4];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      vector3DArray0[2] = (Vector3D) vector3D_Unit0;
      vector3DArray0[3] = (Vector3D) vector3D_Unit1;
      Vector3D vector3D0 = Vector3D.centroid((Vector3D) vector3D_Unit0, vector3DArray0);
      Segment3D segment3D0 = Lines3D.segmentFromPoints(line3D0, vector3DArray0[0], vector3D0);
}"
3143,"    public static Segment3D segmentFromPoints(final Vector3D startPoint, final Vector3D endPoint,
            final Precision.DoubleEquivalence precision) {
        final Line3D line = Lines3D.fromPoints(startPoint, endPoint, precision);

        // we know that the points lie on the line and are in increasing abscissa order
        // since they were used to create the line
        return new Segment3D(line, startPoint, endPoint);
    }","  public void test8()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, 3.273390607896142E150);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point((-612.2907178068466), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Segment3D segment3D0 = Lines3D.segmentFromPoints(vector3D0, (Vector3D) vector3D_Unit0, precision_DoubleEquivalence1);
}"
3144,"    public static Segment3D segmentFromPoints(final Vector3D startPoint, final Vector3D endPoint,
            final Precision.DoubleEquivalence precision) {
        final Line3D line = Lines3D.fromPoints(startPoint, endPoint, precision);

        // we know that the points lie on the line and are in increasing abscissa order
        // since they were used to create the line
        return new Segment3D(line, startPoint, endPoint);
    }","  public void test9()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, 3.273390607896142E150);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point((-612.2907178068466), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Segment3D segment3D0 = Lines3D.segmentFromPoints(vector3D0, (Vector3D) vector3D_Unit0, precision_DoubleEquivalence1);
}"
3145,"    public static Segment3D segmentFromPoints(final Vector3D startPoint, final Vector3D endPoint,
            final Precision.DoubleEquivalence precision) {
        final Line3D line = Lines3D.fromPoints(startPoint, endPoint, precision);

        // we know that the points lie on the line and are in increasing abscissa order
        // since they were used to create the line
        return new Segment3D(line, startPoint, endPoint);
    }","  public void test10()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Vector3D vector3D0 = Vector3D.ZERO;
      Segment3D segment3D0 = Lines3D.segmentFromPoints((Vector3D) vector3D_Unit0, vector3D0, precision_DoubleEquivalence0);
}"
3146,"    public static Segment3D segmentFromPoints(final Vector3D startPoint, final Vector3D endPoint,
            final Precision.DoubleEquivalence precision) {
        final Line3D line = Lines3D.fromPoints(startPoint, endPoint, precision);

        // we know that the points lie on the line and are in increasing abscissa order
        // since they were used to create the line
        return new Segment3D(line, startPoint, endPoint);
    }","  public void test11()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Vector3D vector3D0 = Vector3D.ZERO;
      Segment3D segment3D0 = Lines3D.segmentFromPoints((Vector3D) vector3D_Unit0, vector3D0, precision_DoubleEquivalence0);
}"
3147,"    public static Segment3D segmentFromPoints(final Vector3D startPoint, final Vector3D endPoint,
            final Precision.DoubleEquivalence precision) {
        final Line3D line = Lines3D.fromPoints(startPoint, endPoint, precision);

        // we know that the points lie on the line and are in increasing abscissa order
        // since they were used to create the line
        return new Segment3D(line, startPoint, endPoint);
    }","  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1.0, 1.0, 1.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D0, 0.0);
      Vector3D vector3D1 = quaternionRotation0.getAxis();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.min(0.0, precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      OrientedPoint orientedPoint0 = interval1.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Segment3D segment3D0 = Lines3D.segmentFromPoints(vector3D1, vector3D0, precision_DoubleEquivalence1);
}"
3148,"    public static Segment3D segmentFromPoints(final Vector3D startPoint, final Vector3D endPoint,
            final Precision.DoubleEquivalence precision) {
        final Line3D line = Lines3D.fromPoints(startPoint, endPoint, precision);

        // we know that the points lie on the line and are in increasing abscissa order
        // since they were used to create the line
        return new Segment3D(line, startPoint, endPoint);
    }","  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1.0, 1.0, 1.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D0, 0.0);
      Vector3D vector3D1 = quaternionRotation0.getAxis();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.min(0.0, precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      OrientedPoint orientedPoint0 = interval1.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Segment3D segment3D0 = Lines3D.segmentFromPoints(vector3D1, vector3D0, precision_DoubleEquivalence1);
}"
3149,"    public static Segment3D segmentFromLocations(final Line3D line, final double a, final double b) {

        if (Double.isFinite(a) && Double.isFinite(b)) {
            final double min = Math.min(a, b);
            final double max = Math.max(a, b);

            return new Segment3D(line, min, max);
        }

        throw new IllegalArgumentException(
                MessageFormat.format(""Invalid line segment locations: {0}, {1}"",
                        Double.toString(a), Double.toString(b)));
    }","  public void test14()  throws Throwable  {
      Segment3D segment3D0 = Lines3D.segmentFromLocations((Line3D) null, 1.0, 1.0);
}"
3150,"    public static Segment3D segmentFromLocations(final Line3D line, final double a, final double b) {

        if (Double.isFinite(a) && Double.isFinite(b)) {
            final double min = Math.min(a, b);
            final double max = Math.max(a, b);

            return new Segment3D(line, min, max);
        }

        throw new IllegalArgumentException(
                MessageFormat.format(""Invalid line segment locations: {0}, {1}"",
                        Double.toString(a), Double.toString(b)));
    }","  public void test15()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of((-3118.1948), (-3118.1948), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      Segment3D segment3D0 = Lines3D.segmentFromLocations(line3D0, (-3118.1948), (-3118.1948));
}"
3151,"    public static Segment3D segmentFromLocations(final Line3D line, final double a, final double b) {

        if (Double.isFinite(a) && Double.isFinite(b)) {
            final double min = Math.min(a, b);
            final double max = Math.max(a, b);

            return new Segment3D(line, min, max);
        }

        throw new IllegalArgumentException(
                MessageFormat.format(""Invalid line segment locations: {0}, {1}"",
                        Double.toString(a), Double.toString(b)));
    }","  public void test16()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence1);
      Segment3D segment3D0 = Lines3D.segmentFromLocations(line3D0, 0.0, 4.149515568880993E180);
}"
3152,"    public static Segment3D segmentFromLocations(final Line3D line, final double a, final double b) {

        if (Double.isFinite(a) && Double.isFinite(b)) {
            final double min = Math.min(a, b);
            final double max = Math.max(a, b);

            return new Segment3D(line, min, max);
        }

        throw new IllegalArgumentException(
                MessageFormat.format(""Invalid line segment locations: {0}, {1}"",
                        Double.toString(a), Double.toString(b)));
    }","  public void test17()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence1);
      Segment3D segment3D0 = Lines3D.segmentFromLocations(line3D0, 0.0, 4.149515568880993E180);
}"
3153,"    public static ReverseRay3D reverseRayFromPointAndDirection(final Vector3D endPoint, final Vector3D lineDirection,
            final Precision.DoubleEquivalence precision) {
        final Line3D line = Lines3D.fromPointAndDirection(endPoint, lineDirection, precision);

        return new ReverseRay3D(line, endPoint);
    }","  public void test18()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.max(0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      ReverseRay3D reverseRay3D0 = Lines3D.reverseRayFromPointAndDirection(vector3D_Unit0, vector3D_Unit1, precision_DoubleEquivalence1);
}"
3154,"    public static ReverseRay3D reverseRayFromPointAndDirection(final Vector3D endPoint, final Vector3D lineDirection,
            final Precision.DoubleEquivalence precision) {
        final Line3D line = Lines3D.fromPointAndDirection(endPoint, lineDirection, precision);

        return new ReverseRay3D(line, endPoint);
    }","  public void test19()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(1740.5563435, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      ReverseRay3D reverseRay3D0 = Lines3D.reverseRayFromPointAndDirection(vector3D_Unit1, vector3D_Unit0, precision_DoubleEquivalence1);
}"
3155,"    public static ReverseRay3D reverseRayFromPoint(final Line3D line, final Vector3D endPoint) {
        return reverseRayFromLocation(line, line.abscissa(endPoint));
    }","  public void test20()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(1740.5563435, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      ReverseRay3D reverseRay3D0 = Lines3D.reverseRayFromPoint(line3D0, vector3D_Unit0);
}"
3156,"    public static ReverseRay3D reverseRayFromPoint(final Line3D line, final Vector3D endPoint) {
        return reverseRayFromLocation(line, line.abscissa(endPoint));
    }","  public void test21()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(131.98, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      Line3D line3D1 = line3D0.reverse();
      ReverseRay3D reverseRay3D0 = Lines3D.reverseRayFromPoint(line3D1, vector3D_Unit0);
}"
3157,"    public static ReverseRay3D reverseRayFromLocation(final Line3D line, final double endLocation) {
        if (!Double.isFinite(endLocation)) {
            throw new IllegalArgumentException(""Invalid reverse ray end location: "" + endLocation);
        }

        return new ReverseRay3D(line, endLocation);
    }","  public void test22()  throws Throwable  {
      ReverseRay3D reverseRay3D0 = Lines3D.reverseRayFromLocation((Line3D) null, 1902.159537);
}"
3158,"    public static ReverseRay3D reverseRayFromLocation(final Line3D line, final double endLocation) {
        if (!Double.isFinite(endLocation)) {
            throw new IllegalArgumentException(""Invalid reverse ray end location: "" + endLocation);
        }

        return new ReverseRay3D(line, endLocation);
    }","  public void test23()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of((-357.967815), (-357.967815), 918.666524907);
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence1);
      ReverseRay3D reverseRay3D0 = Lines3D.reverseRayFromLocation(line3D0, (-357.967815));
}"
3159,"    public static Ray3D rayFromPointAndDirection(final Vector3D startPoint, final Vector3D direction,
            final Precision.DoubleEquivalence precision) {
        final Line3D line = Lines3D.fromPointAndDirection(startPoint, direction, precision);

        return new Ray3D(line, startPoint);
    }","  public void test24()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.max(0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Ray3D ray3D0 = Lines3D.rayFromPointAndDirection(vector3D_Unit1, vector3D_Unit0, precision_DoubleEquivalence1);
}"
3160,"    public static Ray3D rayFromPointAndDirection(final Vector3D startPoint, final Vector3D direction,
            final Precision.DoubleEquivalence precision) {
        final Line3D line = Lines3D.fromPointAndDirection(startPoint, direction, precision);

        return new Ray3D(line, startPoint);
    }","  public void test25()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(1740.5563435, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Ray3D ray3D0 = Lines3D.rayFromPointAndDirection(vector3D_Unit1, vector3D_Unit0, precision_DoubleEquivalence1);
}"
3161,"    public static Ray3D rayFromPoint(final Line3D line, final Vector3D startPoint) {
        return rayFromLocation(line, line.abscissa(startPoint));
    }","  public void test26()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max(731.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      Ray3D ray3D0 = Lines3D.rayFromPoint(line3D0, vector3D_Unit0);
}"
3162,"    public static Ray3D rayFromPoint(final Line3D line, final Vector3D startPoint) {
        return rayFromLocation(line, line.abscissa(startPoint));
    }","  public void test27()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.directionTo((Vector3D) vector3D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(1.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPoints(vector3D_Unit2, vector3D_Unit0, precision_DoubleEquivalence1);
      Ray3D ray3D0 = Lines3D.rayFromPoint(line3D0, vector3D_Unit2);
}"
3163,"    public static Ray3D rayFromPoint(final Line3D line, final Vector3D startPoint) {
        return rayFromLocation(line, line.abscissa(startPoint));
    }","  public void test28()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3718.6420264, 3718.6420264, (-1100.957300881493));
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(3718.6420264, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D0, vector3D0, precision_DoubleEquivalence1);
      Ray3D ray3D0 = Lines3D.rayFromPoint(line3D0, vector3D0);
}"
3164,"    public static Ray3D rayFromLocation(final Line3D line, final double startLocation) {
        if (!Double.isFinite(startLocation)) {
            throw new IllegalArgumentException(""Invalid ray start location: "" + startLocation);
        }

        return new Ray3D(line, startLocation);
    }","  public void test29()  throws Throwable  {
      Ray3D ray3D0 = Lines3D.rayFromLocation((Line3D) null, 0.0);
}"
3165,"    public static Ray3D rayFromLocation(final Line3D line, final double startLocation) {
        if (!Double.isFinite(startLocation)) {
            throw new IllegalArgumentException(""Invalid ray start location: "" + startLocation);
        }

        return new Ray3D(line, startLocation);
    }","  public void test30()  throws Throwable  {
      Ray3D ray3D0 = Lines3D.rayFromLocation((Line3D) null, (-206.1891240516778));
}"
3166,"    public static LineConvexSubset3D subsetFromInterval(final Line3D line, final Interval interval) {
        return subsetFromInterval(line, interval.getMin(), interval.getMax());
    }","  public void test31()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.directionTo((Vector3D) vector3D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(1.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPoints(vector3D_Unit2, vector3D_Unit0, precision_DoubleEquivalence1);
      // Undeclared exception!
      try { 
        Lines3D.subsetFromInterval(line3D0, (Vector1D) null, (Vector1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Lines3D"", e);
      }
  }"
3167,"    public static LineConvexSubset3D subsetFromInterval(final Line3D line, final Interval interval) {
        return subsetFromInterval(line, interval.getMin(), interval.getMax());
    }","  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lines3D.subsetFromInterval((Line3D) null, (Interval) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Lines3D"", e);
      }
  }"
3168,"    public static Segment3D segmentFromPoints(final Vector3D startPoint, final Vector3D endPoint,
            final Precision.DoubleEquivalence precision) {
        final Line3D line = Lines3D.fromPoints(startPoint, endPoint, precision);

        // we know that the points lie on the line and are in increasing abscissa order
        // since they were used to create the line
        return new Segment3D(line, startPoint, endPoint);
    }","  public void test33()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      // Undeclared exception!
      try { 
        Lines3D.segmentFromPoints((Line3D) null, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Lines3D"", e);
      }
  }"
3169,"    public static Segment3D segmentFromPoints(final Vector3D startPoint, final Vector3D endPoint,
            final Precision.DoubleEquivalence precision) {
        final Line3D line = Lines3D.fromPoints(startPoint, endPoint, precision);

        // we know that the points lie on the line and are in increasing abscissa order
        // since they were used to create the line
        return new Segment3D(line, startPoint, endPoint);
    }","  public void test34()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZX;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(2367.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      // Undeclared exception!
      try { 
        Lines3D.segmentFromPoints(vector3D0, vector3D0, precision_DoubleEquivalence1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
3170,"    public static ReverseRay3D reverseRayFromPointAndDirection(final Vector3D endPoint, final Vector3D lineDirection,
            final Precision.DoubleEquivalence precision) {
        final Line3D line = Lines3D.fromPointAndDirection(endPoint, lineDirection, precision);

        return new ReverseRay3D(line, endPoint);
    }","  public void test35()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      // Undeclared exception!
      try { 
        Lines3D.reverseRayFromPointAndDirection(vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
3171,"    public static ReverseRay3D reverseRayFromPointAndDirection(final Vector3D endPoint, final Vector3D lineDirection,
            final Precision.DoubleEquivalence precision) {
        final Line3D line = Lines3D.fromPointAndDirection(endPoint, lineDirection, precision);

        return new ReverseRay3D(line, endPoint);
    }","  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.min(1.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      // Undeclared exception!
      try { 
        Lines3D.reverseRayFromPointAndDirection(vector3D0, vector3D0, precision_DoubleEquivalence1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
3172,"    public static ReverseRay3D reverseRayFromPoint(final Line3D line, final Vector3D endPoint) {
        return reverseRayFromLocation(line, line.abscissa(endPoint));
    }","  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lines3D.reverseRayFromPoint((Line3D) null, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Lines3D"", e);
      }
  }"
3173,"    public static ReverseRay3D reverseRayFromPoint(final Line3D line, final Vector3D endPoint) {
        return reverseRayFromLocation(line, line.abscissa(endPoint));
    }","  public void test38()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence1);
      Vector3D vector3D1 = Vector3D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        Lines3D.reverseRayFromPoint(line3D0, vector3D1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid reverse ray end location: NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Lines3D"", e);
      }
  }"
3174,"    public static Ray3D rayFromPointAndDirection(final Vector3D startPoint, final Vector3D direction,
            final Precision.DoubleEquivalence precision) {
        final Line3D line = Lines3D.fromPointAndDirection(startPoint, direction, precision);

        return new Ray3D(line, startPoint);
    }","  public void test39()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      // Undeclared exception!
      try { 
        Lines3D.rayFromPointAndDirection(vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
3175,"    public static Ray3D rayFromPointAndDirection(final Vector3D startPoint, final Vector3D direction,
            final Precision.DoubleEquivalence precision) {
        final Line3D line = Lines3D.fromPointAndDirection(startPoint, direction, precision);

        return new Ray3D(line, startPoint);
    }","  public void test40()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D vector3D0 = vector3D_Unit0.vectorTo((Vector3D) vector3D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of(0.0, 0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      // Undeclared exception!
      try { 
        Lines3D.rayFromPointAndDirection(vector3D_Unit0, vector3D0, precision_DoubleEquivalence1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
3176,"    public static Ray3D rayFromPoint(final Line3D line, final Vector3D startPoint) {
        return rayFromLocation(line, line.abscissa(startPoint));
    }","  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lines3D.rayFromPoint((Line3D) null, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Lines3D"", e);
      }
  }"
3177,"    public static Line3D fromPoints(final Vector3D p1, final Vector3D p2,
            final Precision.DoubleEquivalence precision) {
        return fromPointAndDirection(p1, p1.vectorTo(p2), precision);
    }","  public void test42()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      // Undeclared exception!
      try { 
        Lines3D.fromPoints(vector3D0, vector3D0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
3178,"    public static Line3D fromPoints(final Vector3D p1, final Vector3D p2,
            final Precision.DoubleEquivalence precision) {
        return fromPointAndDirection(p1, p1.vectorTo(p2), precision);
    }","  public void test43()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3718.6420264, 3718.6420264, (-1100.957300881493));
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(3718.6420264, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      // Undeclared exception!
      try { 
        Lines3D.fromPoints(vector3D0, vector3D0, precision_DoubleEquivalence1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
3179,"    public static Line3D fromPointAndDirection(final Vector3D pt, final Vector3D dir,
            final Precision.DoubleEquivalence precision) {
        if (dir.isZero(precision)) {
            throw new IllegalArgumentException(""Line direction cannot be zero"");
        }

        final Vector3D normDirection = dir.normalize();
        final Vector3D origin = pt.reject(normDirection);

        return new Line3D(origin, normDirection, precision);
    }","  public void test44()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      // Undeclared exception!
      try { 
        Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
3180,"    public static LineConvexSubset3D subsetFromInterval(final Line3D line, final Interval interval) {
        return subsetFromInterval(line, interval.getMin(), interval.getMax());
    }","  public void test45()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(1740.5563435, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPoints(vector3D_Unit0, vector3D_Unit1, precision_DoubleEquivalence1);
      // Undeclared exception!
      try { 
        Lines3D.subsetFromInterval(line3D0, Double.NaN, Double.NaN);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid line convex subset interval: NaN, NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Lines3D"", e);
      }
  }"
3181,"    public static LineConvexSubset3D subsetFromInterval(final Line3D line, final Interval interval) {
        return subsetFromInterval(line, interval.getMin(), interval.getMax());
    }","  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lines3D.subsetFromInterval((Line3D) null, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid line convex subset interval: -Infinity, -Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Lines3D"", e);
      }
  }"
3182,"    public static LineConvexSubset3D subsetFromInterval(final Line3D line, final Interval interval) {
        return subsetFromInterval(line, interval.getMin(), interval.getMax());
    }","  public void test47()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of((-3118.1948), (-3118.1948), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      LineConvexSubset3D lineConvexSubset3D0 = Lines3D.subsetFromInterval(line3D0, Double.POSITIVE_INFINITY, (-3118.1948));
}"
3183,"    public static LineConvexSubset3D subsetFromInterval(final Line3D line, final Interval interval) {
        return subsetFromInterval(line, interval.getMin(), interval.getMax());
    }","  public void test48()  throws Throwable  {
      LineConvexSubset3D lineConvexSubset3D0 = Lines3D.subsetFromInterval((Line3D) null, (-2339.83715469), Double.NEGATIVE_INFINITY);
}"
3184,"    public static Segment3D segmentFromLocations(final Line3D line, final double a, final double b) {

        if (Double.isFinite(a) && Double.isFinite(b)) {
            final double min = Math.min(a, b);
            final double max = Math.max(a, b);

            return new Segment3D(line, min, max);
        }

        throw new IllegalArgumentException(
                MessageFormat.format(""Invalid line segment locations: {0}, {1}"",
                        Double.toString(a), Double.toString(b)));
    }","  public void test49()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of((-3118.1948), (-3118.1948), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      Segment3D segment3D0 = Lines3D.segmentFromLocations(line3D0, 0.0, 0.0);
}"
3185,"    public static Segment3D segmentFromLocations(final Line3D line, final double a, final double b) {

        if (Double.isFinite(a) && Double.isFinite(b)) {
            final double min = Math.min(a, b);
            final double max = Math.max(a, b);

            return new Segment3D(line, min, max);
        }

        throw new IllegalArgumentException(
                MessageFormat.format(""Invalid line segment locations: {0}, {1}"",
                        Double.toString(a), Double.toString(b)));
    }","  public void test50()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of((-3118.1948), (-3118.1948), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      Segment3D segment3D0 = Lines3D.segmentFromLocations(line3D0, 0.0, 0.0);
}"
3186,"    public static Segment3D segmentFromLocations(final Line3D line, final double a, final double b) {

        if (Double.isFinite(a) && Double.isFinite(b)) {
            final double min = Math.min(a, b);
            final double max = Math.max(a, b);

            return new Segment3D(line, min, max);
        }

        throw new IllegalArgumentException(
                MessageFormat.format(""Invalid line segment locations: {0}, {1}"",
                        Double.toString(a), Double.toString(b)));
    }","  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lines3D.segmentFromLocations((Line3D) null, Double.POSITIVE_INFINITY, (-3276.21703142563));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid line segment locations: Infinity, -3276.21703142563
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Lines3D"", e);
      }
  }"
3187,"    public static ReverseRay3D reverseRayFromLocation(final Line3D line, final double endLocation) {
        if (!Double.isFinite(endLocation)) {
            throw new IllegalArgumentException(""Invalid reverse ray end location: "" + endLocation);
        }

        return new ReverseRay3D(line, endLocation);
    }","  public void test52()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of((-3118.1948), (-3118.1948), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      ReverseRay3D reverseRay3D0 = Lines3D.reverseRayFromLocation(line3D0, 0.0);
}"
3188,"    public static Ray3D rayFromLocation(final Line3D line, final double startLocation) {
        if (!Double.isFinite(startLocation)) {
            throw new IllegalArgumentException(""Invalid ray start location: "" + startLocation);
        }

        return new Ray3D(line, startLocation);
    }","  public void test53()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of((-3118.1948), (-3118.1948), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      Ray3D ray3D0 = Lines3D.rayFromLocation(line3D0, 1616.527931327);
}"
3189,"    public static Ray3D rayFromLocation(final Line3D line, final double startLocation) {
        if (!Double.isFinite(startLocation)) {
            throw new IllegalArgumentException(""Invalid ray start location: "" + startLocation);
        }

        return new Ray3D(line, startLocation);
    }","  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lines3D.rayFromLocation((Line3D) null, Double.NaN);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid ray start location: NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Lines3D"", e);
      }
  }"
3190,"    public static LineConvexSubset3D subsetFromInterval(final Line3D line, final Interval interval) {
        return subsetFromInterval(line, interval.getMin(), interval.getMax());
    }","  public void test55()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector1D vector1D1 = Vector1D.NEGATIVE_INFINITY;
      LineConvexSubset3D lineConvexSubset3D0 = Lines3D.subsetFromInterval(line3D0, vector1D0, vector1D1);
}"
3191,"    public static LineConvexSubset3D subsetFromInterval(final Line3D line, final Interval interval) {
        return subsetFromInterval(line, interval.getMin(), interval.getMax());
    }","  public void test56()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        Lines3D.subsetFromInterval(line3D0, vector1D0, vector1D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid line convex subset interval: Infinity, Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Lines3D"", e);
      }
  }"
3192,"    public static LineConvexSubset3D subsetFromInterval(final Line3D line, final Interval interval) {
        return subsetFromInterval(line, interval.getMin(), interval.getMax());
    }","  public void test57()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1.0, 1.0, 1.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.min(1.0, precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, (Precision.DoubleEquivalence) null);
      LineConvexSubset3D lineConvexSubset3D0 = Lines3D.subsetFromInterval(line3D0, interval1);
}"
3193,"    public static Segment3D segmentFromLocations(final Line3D line, final double a, final double b) {

        if (Double.isFinite(a) && Double.isFinite(b)) {
            final double min = Math.min(a, b);
            final double max = Math.max(a, b);

            return new Segment3D(line, min, max);
        }

        throw new IllegalArgumentException(
                MessageFormat.format(""Invalid line segment locations: {0}, {1}"",
                        Double.toString(a), Double.toString(b)));
    }","  public void test58()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of(0.0, 317.4181, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      // Undeclared exception!
      try { 
        Lines3D.segmentFromLocations(line3D0, 317.4181, Double.POSITIVE_INFINITY);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid line segment locations: 317.4181, Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Lines3D"", e);
      }
  }"
3194,"    public static Segment3D segmentFromPoints(final Vector3D startPoint, final Vector3D endPoint,
            final Precision.DoubleEquivalence precision) {
        final Line3D line = Lines3D.fromPoints(startPoint, endPoint, precision);

        // we know that the points lie on the line and are in increasing abscissa order
        // since they were used to create the line
        return new Segment3D(line, startPoint, endPoint);
    }","  public void test59()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D vector3D0 = Vector3D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(1740.5563435, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      // Undeclared exception!
      try { 
        Lines3D.segmentFromPoints(line3D0, vector3D0, (Vector3D) vector3D_Unit0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid line segment locations: NaN, 1.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Lines3D"", e);
      }
  }"
3195,"    public static ReverseRay3D reverseRayFromLocation(final Line3D line, final double endLocation) {
        if (!Double.isFinite(endLocation)) {
            throw new IllegalArgumentException(""Invalid reverse ray end location: "" + endLocation);
        }

        return new ReverseRay3D(line, endLocation);
    }","  public void test60()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(946.094658801872, 946.094658801872, 0.6);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(946.094658801872, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      // Undeclared exception!
      try { 
        Lines3D.reverseRayFromLocation(line3D0, Double.NEGATIVE_INFINITY);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid reverse ray end location: -Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Lines3D"", e);
      }
  }"
3196,"    public static Ray3D rayFromPoint(final Line3D line, final Vector3D startPoint) {
        return rayFromLocation(line, line.abscissa(startPoint));
    }","  public void test61()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D vector3D0 = Vector3D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(1740.5563435, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      // Undeclared exception!
      try { 
        Lines3D.rayFromPoint(line3D0, vector3D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid ray start location: NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Lines3D"", e);
      }
  }"
3197,"    public static Line3D fromPointAndDirection(final Vector3D pt, final Vector3D dir,
            final Precision.DoubleEquivalence precision) {
        if (dir.isZero(precision)) {
            throw new IllegalArgumentException(""Line direction cannot be zero"");
        }

        final Vector3D normDirection = dir.normalize();
        final Vector3D origin = pt.reject(normDirection);

        return new Line3D(origin, normDirection, precision);
    }","  public void test62()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D vector3D0 = Vector3D.of((-2558.200419908472), (-2558.200419908472), (-2558.200419908472));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of((-2558.200419908472), (-2558.200419908472), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Lines3D.fromPoints(vector3D0, vector3D_Unit0, precision_DoubleEquivalence0);
      Lines3D.segmentFromPoints(vector3D0, (Vector3D) vector3D_Unit0, precision_DoubleEquivalence1);
      Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D0, precision_DoubleEquivalence1);
  }"
3198,"    public static LineConvexSubset3D span(final Line3D line) {
        return new LineSpanningSubset3D(line);
    }","  public void test63()  throws Throwable  {
      LineConvexSubset3D lineConvexSubset3D0 = Lines3D.span((Line3D) null);
}"
3199,"    public static ReverseRay3D reverseRayFromPointAndDirection(final Vector3D endPoint, final Vector3D lineDirection,
            final Precision.DoubleEquivalence precision) {
        final Line3D line = Lines3D.fromPointAndDirection(endPoint, lineDirection, precision);

        return new ReverseRay3D(line, endPoint);
    }","  public void test64()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1.0, 1.0, 1.0);
      Vector3D.Unit vector3D_Unit0 = vector3D0.normalizeOrNull();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.min(1.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      ReverseRay3D reverseRay3D0 = Lines3D.reverseRayFromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
}"
3200,"    public static Ray3D rayFromPointAndDirection(final Vector3D startPoint, final Vector3D direction,
            final Precision.DoubleEquivalence precision) {
        final Line3D line = Lines3D.fromPointAndDirection(startPoint, direction, precision);

        return new Ray3D(line, startPoint);
    }","  public void test65()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1.0, 1.0, 1.0);
      Vector3D.Unit vector3D_Unit0 = vector3D0.normalizeOrNull();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.min(1.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Ray3D ray3D0 = Lines3D.rayFromPointAndDirection(vector3D0, vector3D_Unit0, precision_DoubleEquivalence1);
}"
3201,"    public static LineConvexSubset3D subsetFromInterval(final Line3D line, final Interval interval) {
        return subsetFromInterval(line, interval.getMin(), interval.getMax());
    }","  public void test66()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1.0, 1.0, 1.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min(1.0, precision_DoubleEquivalence0);
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, (Precision.DoubleEquivalence) null);
      LineConvexSubset3D lineConvexSubset3D0 = Lines3D.subsetFromInterval(line3D0, interval0);
}"
3202,"    public static Segment3D segmentFromPoints(final Vector3D startPoint, final Vector3D endPoint,
            final Precision.DoubleEquivalence precision) {
        final Line3D line = Lines3D.fromPoints(startPoint, endPoint, precision);

        // we know that the points lie on the line and are in increasing abscissa order
        // since they were used to create the line
        return new Segment3D(line, startPoint, endPoint);
    }","  public void test67()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(1740.5563435, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      Segment3D segment3D0 = Lines3D.segmentFromPoints(line3D0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
}"
3203,"    public static Segment3D segmentFromPoints(final Vector3D startPoint, final Vector3D endPoint,
            final Precision.DoubleEquivalence precision) {
        final Line3D line = Lines3D.fromPoints(startPoint, endPoint, precision);

        // we know that the points lie on the line and are in increasing abscissa order
        // since they were used to create the line
        return new Segment3D(line, startPoint, endPoint);
    }","  public void test68()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(1740.5563435, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      Segment3D segment3D0 = Lines3D.segmentFromPoints(line3D0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
}"
3204,"    public static ReverseRay3D reverseRayFromPoint(final Line3D line, final Vector3D endPoint) {
        return reverseRayFromLocation(line, line.abscissa(endPoint));
    }","  public void test69()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of(1.5707963267948966, (-1586.117102753593), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      ReverseRay3D reverseRay3D0 = Lines3D.reverseRayFromPoint(line3D0, vector3D_Unit0);
}"
3205,"    public static Segment3D segmentFromPoints(final Vector3D startPoint, final Vector3D endPoint,
            final Precision.DoubleEquivalence precision) {
        final Line3D line = Lines3D.fromPoints(startPoint, endPoint, precision);

        // we know that the points lie on the line and are in increasing abscissa order
        // since they were used to create the line
        return new Segment3D(line, startPoint, endPoint);
    }","  public void test70()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 317.4181, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      // Undeclared exception!
      try { 
        Lines3D.segmentFromPoints((Vector3D) vector3D_Unit0, (Vector3D) null, precision_DoubleEquivalence1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
3206,"    default LinecastPoint3D linecastFirst(final Line3D line) {
        return linecastFirst(line.span());
    }","  public void test0()  throws Throwable  {
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.empty();
      AxisSequence axisSequence0 = AxisSequence.YZX;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, (Precision.DoubleEquivalence) null);
      Segment3D segment3D0 = line3D0.segment(vector3D0, vector3D0);
      LinecastPoint3D linecastPoint3D0 = regionBSPTree3D0.linecastFirst((LineConvexSubset3D) segment3D0);
}"
3207,"    default LinecastPoint3D linecastFirst(final Line3D line) {
        return linecastFirst(line.span());
    }","  public void test1()  throws Throwable  {
      ConvexVolume convexVolume0 = ConvexVolume.full();
      Line3D line3D0 = new Line3D((Vector3D) null, (Vector3D) null, (Precision.DoubleEquivalence) null);
      LinecastPoint3D linecastPoint3D0 = convexVolume0.linecastFirst(line3D0);
}"
3208,"    default List<LinecastPoint3D> linecast(final Line3D line) {
        return linecast(line.span());
    }","  public void test2()  throws Throwable  {
      RegionBSPTree3D regionBSPTree3D0 = new RegionBSPTree3D(true);
      List<LinecastPoint3D> list0 = regionBSPTree3D0.linecast((LineConvexSubset3D) null);
}"
3209,"    default List<LinecastPoint3D> linecast(final Line3D line) {
        return linecast(line.span());
    }","  public void test3()  throws Throwable  {
      PriorityQueue<Plane> priorityQueue0 = new PriorityQueue<Plane>();
      ArrayList<Plane> arrayList0 = new ArrayList<Plane>(priorityQueue0);
      ConvexVolume convexVolume0 = ConvexVolume.fromBounds((Iterable<? extends Plane>) arrayList0);
      Line3D line3D0 = new Line3D((Vector3D) null, (Vector3D) null, (Precision.DoubleEquivalence) null);
      List<LinecastPoint3D> list0 = convexVolume0.linecast(line3D0);
}"
3210,"    default LinecastPoint3D linecastFirst(final Line3D line) {
        return linecastFirst(line.span());
    }","  public void test4()  throws Throwable  {
      PriorityQueue<Plane> priorityQueue0 = new PriorityQueue<Plane>(542, (Comparator<? super Plane>) null);
      ConvexVolume convexVolume0 = ConvexVolume.fromBounds((Iterable<? extends Plane>) priorityQueue0);
      RegionBSPTree3D regionBSPTree3D0 = convexVolume0.toTree();
      // Undeclared exception!
      try { 
        regionBSPTree3D0.linecastFirst((Line3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Linecastable3D"", e);
      }
  }"
3211,"    default List<LinecastPoint3D> linecast(final Line3D line) {
        return linecast(line.span());
    }","  public void test5()  throws Throwable  {
      LinkedList<PlaneConvexSubset> linkedList0 = new LinkedList<PlaneConvexSubset>();
      BoundaryList3D boundaryList3D0 = new BoundaryList3D(linkedList0);
      // Undeclared exception!
      try { 
        boundaryList3D0.linecast((Line3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Linecastable3D"", e);
      }
  }"
3212,"    public double getSubspaceEnd() {
        return end;
    }","  public void test0()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      Line3D line3D1 = line3D0.transform(affineTransformMatrix3D0);
      ReverseRay3D reverseRay3D0 = line3D1.reverseRayTo(0.0);
      ReverseRay3D reverseRay3D1 = reverseRay3D0.transform(affineTransformMatrix3D0);
}"
3213,"    public double getSubspaceEnd() {
        return end;
    }","  public void test1()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      ReverseRay3D reverseRay3D1 = reverseRay3D0.transform(affineTransformMatrix3D0);
}"
3214,"    public double getSubspaceEnd() {
        return end;
    }","  public void test2()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = line3D0.reverseRayTo((-1177.99064690699));
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale((Vector3D) vector3D_Unit0);
      ReverseRay3D reverseRay3D1 = reverseRay3D0.transform(affineTransformMatrix3D0);
}"
3215,"    public double getSubspaceEnd() {
        return end;
    }","  public void test3()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, 1284.3);
      double double0 = reverseRay3D0.getSubspaceEnd();
}"
3216,"    public double getSubspaceEnd() {
        return end;
    }","  public void test4()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = line3D0.reverseRayTo((-1177.99064690699));
      double double0 = reverseRay3D0.getSubspaceEnd();
}"
3217,"    public double getSubspaceEnd() {
        return end;
    }","  public void test5()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Vector3D vector3D0 = Vector3D.NaN;
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, (-989.8379163556424));
      reverseRay3D0.getEndPoint();
}"
3218,"    public double getSubspaceEnd() {
        return end;
    }","  public void test6()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = line3D0.reverseRayTo((Vector3D) vector3D_Unit0);
      reverseRay3D0.getEndPoint();
}"
3219,"    public Vector3D getEndPoint() {
        return getLine().toSpace(end);
    }","  public void test7()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, 3.141592653589793);
      Vector3D vector3D1 = reverseRay3D0.getEndPoint();
}"
3220,"    public Vector3D getEndPoint() {
        return getLine().toSpace(end);
    }","  public void test8()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = line3D0.reverseRayTo((-1306.46117433));
      Vector3D vector3D0 = reverseRay3D0.getEndPoint();
}"
3221,"    public double getSubspaceEnd() {
        return end;
    }","  public void test9()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(0.0, 0.0, (-1.0));
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      ReverseRay3D reverseRay3D0 = line3D0.reverseRayTo((Vector3D) vector3D_Unit0);
      reverseRay3D0.getEndPoint();
}"
3222,"    public double getSubspaceEnd() {
        return end;
    }","  public void test10()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = line3D0.reverseRayTo((-1306.46117433));
      reverseRay3D0.containsAbscissa(0.0);
}"
3223,"    public ReverseRay3D transform(final Transform<Vector3D> transform) {
        final Line3D tLine = getLine().transform(transform);
        final Vector3D tEnd = transform.apply(getEndPoint());

        return new ReverseRay3D(tLine, tEnd);
    }","  public void test11()  throws Throwable  {
      ReverseRay3D reverseRay3D0 = new ReverseRay3D((Line3D) null, 707.9068659123387);
      // Undeclared exception!
      try { 
        reverseRay3D0.transform((Transform<Vector3D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.ReverseRay3D"", e);
      }
  }"
3224,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName())
            .append(""[direction= "")
            .append(getLine().getDirection())
            .append("", endPoint= "")
            .append(getEndPoint())
            .append(']');

        return sb.toString();
    }","  public void test12()  throws Throwable  {
      ReverseRay3D reverseRay3D0 = new ReverseRay3D((Line3D) null, 371.61109061);
      // Undeclared exception!
      try { 
        reverseRay3D0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.ReverseRay3D"", e);
      }
  }"
3225,"    boolean containsAbscissa(final double abscissa) {
        return getLine().getPrecision().lte(abscissa, end);
    }","  public void test13()  throws Throwable  {
      ReverseRay3D reverseRay3D0 = new ReverseRay3D((Line3D) null, 0.0);
      // Undeclared exception!
      try { 
        reverseRay3D0.containsAbscissa(1.0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.ReverseRay3D"", e);
      }
  }"
3226,"    ReverseRay3D(final Line3D line, final Vector3D endPoint) {
        this(line, line.abscissa(endPoint));
    }","  public void test14()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      ReverseRay3D reverseRay3D0 = null;
      try {
        reverseRay3D0 = new ReverseRay3D((Line3D) null, vector3D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.ReverseRay3D"", e);
      }
  }"
3227,"    public Vector3D getEndPoint() {
        return getLine().toSpace(end);
    }","  public void test15()  throws Throwable  {
      ReverseRay3D reverseRay3D0 = new ReverseRay3D((Line3D) null, 0.5);
      // Undeclared exception!
      try { 
        reverseRay3D0.getEndPoint();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.ReverseRay3D"", e);
      }
  }"
3228,"    public double getSubspaceEnd() {
        return end;
    }","  public void test16()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      reverseRay3D0.getCentroid();
}"
3229,"    public double getSubspaceEnd() {
        return end;
    }","  public void test17()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      reverseRay3D0.containsAbscissa(0.0);
}"
3230,"    public double getSubspaceEnd() {
        return end;
    }","  public void test18()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      reverseRay3D0.getStartPoint();
}"
3231,"    public ReverseRay3D transform(final Transform<Vector3D> transform) {
        final Line3D tLine = getLine().transform(transform);
        final Vector3D tEnd = transform.apply(getEndPoint());

        return new ReverseRay3D(tLine, tEnd);
    }","  public void test19()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        reverseRay3D0.transform(affineTransformMatrix3D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Line direction cannot be zero
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Lines3D"", e);
      }
  }"
3232,"    public double getSubspaceEnd() {
        return end;
    }","  public void test20()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      double double0 = reverseRay3D0.getSubspaceEnd();
}"
3233,"    public double getSubspaceEnd() {
        return end;
    }","  public void test21()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      double double0 = reverseRay3D0.getSubspaceStart();
}"
3234,"    public double getSubspaceStart() {
        return Double.NEGATIVE_INFINITY;
    }","  public void test22()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      double double0 = reverseRay3D0.getSubspaceStart();
}"
3235,"    public double getSubspaceEnd() {
        return end;
    }","  public void test23()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      boolean boolean0 = reverseRay3D0.isFinite();
}"
3236,"    public boolean isFinite() {
        return false;
    }","  public void test24()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      boolean boolean0 = reverseRay3D0.isFinite();
}"
3237,"    public double getSubspaceEnd() {
        return end;
    }","  public void test25()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      reverseRay3D0.getBounds();
}"
3238,"    public double getSubspaceEnd() {
        return end;
    }","  public void test26()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      double double0 = reverseRay3D0.getSize();
}"
3239,"    public double getSize() {
        return Double.POSITIVE_INFINITY;
    }","  public void test27()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      double double0 = reverseRay3D0.getSize();
}"
3240,"    public double getSubspaceEnd() {
        return end;
    }","  public void test28()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      String string0 = reverseRay3D0.toString();
}"
3241,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName())
            .append(""[direction= "")
            .append(getLine().getDirection())
            .append("", endPoint= "")
            .append(getEndPoint())
            .append(']');

        return sb.toString();
    }","  public void test29()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      String string0 = reverseRay3D0.toString();
}"
3242,"    public double getSubspaceEnd() {
        return end;
    }","  public void test30()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      boolean boolean0 = reverseRay3D0.isInfinite();
}"
3243,"    public boolean isInfinite() {
        return true;
    }","  public void test31()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      boolean boolean0 = reverseRay3D0.isInfinite();
}"
3244,"    public abstract LineConvexSubset3D transform(Transform<Vector3D> transform);

    /** Return true if the given abscissa value is contained in the line subset (ie, in the subspace region
     * or one of its 1D boundaries).
     * @param abscissa abscissa to check
     * @return true if {@code abscissa}","  public void test0()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = line3D0.reverseRayTo(vector3D0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createTranslation(vector3D0);
      LineConvexSubset3D lineConvexSubset3D0 = reverseRay3D0.transform(affineTransformMatrix3D0);
}"
3245,"    public abstract double getSubspaceStart();

    /** Get the end point for the line subset.
     * @return the end point for the line subset, or null if no end point exists.
     */
    public abstract Vector3D getEndPoint();

    /** Get the 1D end location of the line subset or {@link Double#POSITIVE_INFINITY}","  public void test1()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = new Ray3D(line3D0, 0.0);
      double double0 = ray3D0.getSubspaceStart();
}"
3246,"    public abstract double getSubspaceStart();

    /** Get the end point for the line subset.
     * @return the end point for the line subset, or null if no end point exists.
     */
    public abstract Vector3D getEndPoint();

    /** Get the 1D end location of the line subset or {@link Double#POSITIVE_INFINITY}","  public void test2()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = line3D0.rayFrom(941.677062102);
      double double0 = ray3D0.getSubspaceStart();
}"
3247,"    public abstract double getSubspaceStart();

    /** Get the end point for the line subset.
     * @return the end point for the line subset, or null if no end point exists.
     */
    public abstract Vector3D getEndPoint();

    /** Get the 1D end location of the line subset or {@link Double#POSITIVE_INFINITY}","  public void test3()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(2109.2606, (-1.0), (-2068.8));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = line3D0.reverseRayTo((Vector3D) vector3D_Unit0);
      double double0 = reverseRay3D0.getSubspaceStart();
}"
3248,"    public Interval getSubspaceRegion() {
        final double start = getSubspaceStart();
        final double end = getSubspaceEnd();

        return Interval.of(start, end, getLine().getPrecision());
    }","  public void test4()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(1.0, 1.0, 0.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D(line3D0);
      Interval interval0 = lineSpanningSubset3D0.getSubspaceRegion();
}"
3249,"    public Interval getSubspaceRegion() {
        final double start = getSubspaceStart();
        final double end = getSubspaceEnd();

        return Interval.of(start, end, getLine().getPrecision());
    }","  public void test5()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = line3D0.segment((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      Interval interval0 = segment3D0.getSubspaceRegion();
}"
3250,"    public abstract double getSubspaceEnd();

    /** {@inheritDoc}","  public void test6()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZX;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, (Precision.DoubleEquivalence) null);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D0, vector3D0);
      double double0 = segment3D0.getSubspaceEnd();
}"
3251,"    public abstract double getSubspaceEnd();

    /** {@inheritDoc}","  public void test7()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D(line3D0);
      double double0 = lineSpanningSubset3D0.getSubspaceEnd();
}"
3252,"    public abstract double getSubspaceEnd();

    /** {@inheritDoc}","  public void test8()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, 0.5, (-4780.005));
      double double0 = segment3D0.getSubspaceEnd();
}"
3253,"    public abstract Vector3D getStartPoint();

    /** Get the 1D start location of the line subset or {@link Double#NEGATIVE_INFINITY}","  public void test9()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(1669.59650725, 0.0, 1669.59650725);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = line3D0.reverseRayTo(1669.59650725);
      Vector3D vector3D0 = reverseRay3D0.getStartPoint();
}"
3254,"    public abstract Vector3D getStartPoint();

    /** Get the 1D start location of the line subset or {@link Double#NEGATIVE_INFINITY}","  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D0, vector3D0);
      Vector3D vector3D1 = segment3D0.getStartPoint();
}"
3255,"    public abstract Vector3D getStartPoint();

    /** Get the 1D start location of the line subset or {@link Double#NEGATIVE_INFINITY}","  public void test11()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = line3D0.segment(944.2605674569, 944.2605674569);
      Vector3D vector3D1 = segment3D0.getStartPoint();
}"
3256,"    public abstract Vector3D getStartPoint();

    /** Get the 1D start location of the line subset or {@link Double#NEGATIVE_INFINITY}","  public void test12()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-3194.70391), (-3194.70391), (-3194.70391));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = line3D0.segment((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      Vector3D vector3D0 = segment3D0.getStartPoint();
}"
3257,"    public abstract Vector3D getStartPoint();

    /** Get the 1D start location of the line subset or {@link Double#NEGATIVE_INFINITY}","  public void test13()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D_Unit0, vector3D_Unit0);
      Vector3D vector3D0 = segment3D0.getStartPoint();
}"
3258,"    public Interval getInterval() {
        return getSubspaceRegion();
    }","  public void test14()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D_Unit0, vector3D_Unit0);
      Interval interval0 = segment3D0.getInterval();
}"
3259,"    public Interval getInterval() {
        return getSubspaceRegion();
    }","  public void test15()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(1.0, 1.0, 0.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D(line3D0);
      Interval interval0 = lineSpanningSubset3D0.getInterval();
}"
3260,"    public abstract Vector3D getEndPoint();

    /** Get the 1D end location of the line subset or {@link Double#POSITIVE_INFINITY}","  public void test16()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D(line3D0);
      Vector3D vector3D0 = lineSpanningSubset3D0.getEndPoint();
}"
3261,"    public abstract Vector3D getEndPoint();

    /** Get the 1D end location of the line subset or {@link Double#POSITIVE_INFINITY}","  public void test17()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, 0.0, (-555.21607431747));
      Vector3D vector3D0 = segment3D0.getEndPoint();
}"
3262,"    public abstract Vector3D getEndPoint();

    /** Get the 1D end location of the line subset or {@link Double#POSITIVE_INFINITY}","  public void test18()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale((Vector3D) vector3D_Unit0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D_Unit0, vector3D_Unit0);
      Segment3D segment3D1 = segment3D0.transform(affineTransformMatrix3D0);
      Vector3D vector3D0 = segment3D1.getEndPoint();
}"
3263,"    public abstract Vector3D getEndPoint();

    /** Get the 1D end location of the line subset or {@link Double#POSITIVE_INFINITY}","  public void test19()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale((Vector3D) vector3D_Unit0);
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      ReverseRay3D reverseRay3D1 = reverseRay3D0.transform(affineTransformMatrix3D0);
      Vector3D vector3D0 = reverseRay3D1.getEndPoint();
}"
3264,"    public abstract Vector3D getEndPoint();

    /** Get the 1D end location of the line subset or {@link Double#POSITIVE_INFINITY}","  public void test20()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-3194.70391), (-3194.70391), (-3194.70391));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = line3D0.segment((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      Vector3D vector3D0 = segment3D0.getEndPoint();
}"
3265,"    public abstract LineConvexSubset3D transform(Transform<Vector3D> transform);

    /** Return true if the given abscissa value is contained in the line subset (ie, in the subspace region
     * or one of its 1D boundaries).
     * @param abscissa abscissa to check
     * @return true if {@code abscissa}","  public void test21()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(1195.0, 1195.0, 1195.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = line3D0.reverseRayTo((Vector3D) vector3D_Unit0);
      // Undeclared exception!
      try { 
        reverseRay3D0.transform((Transform<Vector3D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Line3D"", e);
      }
  }"
3266,"    public abstract LineConvexSubset3D transform(Transform<Vector3D> transform);

    /** Return true if the given abscissa value is contained in the line subset (ie, in the subspace region
     * or one of its 1D boundaries).
     * @param abscissa abscissa to check
     * @return true if {@code abscissa}","  public void test22()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors(vector3D0, vector3D0, vector3D0, vector3D0);
      Segment3D segment3D0 = line3D0.segment(1768.325048180363, 1768.325048180363);
      // Undeclared exception!
      try { 
        segment3D0.transform(affineTransformMatrix3D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
3267,"    public Interval getSubspaceRegion() {
        final double start = getSubspaceStart();
        final double end = getSubspaceEnd();

        return Interval.of(start, end, getLine().getPrecision());
    }","  public void test23()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = new Ray3D(line3D0, vector3D0);
      // Undeclared exception!
      try { 
        ray3D0.getSubspaceRegion();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval values: [\uFFFD, \u221E]
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Interval"", e);
      }
  }"
3268,"    public Interval getInterval() {
        return getSubspaceRegion();
    }","  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D0);
      // Undeclared exception!
      try { 
        reverseRay3D0.getInterval();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval values: [-\u221E, \uFFFD]
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Interval"", e);
      }
  }"
3269,"    public abstract Vector3D getEndPoint();

    /** Get the 1D end location of the line subset or {@link Double#POSITIVE_INFINITY}","  public void test25()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D((Vector3D) null, (Vector3D) null, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, (-1.0));
      // Undeclared exception!
      try { 
        reverseRay3D0.getEndPoint();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
3270,"    public boolean contains(final Vector3D pt) {
        final Line3D line = getLine();
        return line.contains(pt) && containsAbscissa(line.abscissa(pt));
    }","  public void test26()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(1669.59650725, 0.0, 1669.59650725);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Ray3D ray3D0 = line3D0.rayFrom(1209.126473068594);
      // Undeclared exception!
      try { 
        ray3D0.contains((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Line3D"", e);
      }
  }"
3271,"    public boolean contains(final Vector3D pt) {
        final Line3D line = getLine();
        return line.contains(pt) && containsAbscissa(line.abscissa(pt));
    }","  public void test27()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D vector3D0 = Vector3D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D0, precision_DoubleEquivalence0);
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D(line3D0);
      // Undeclared exception!
      try { 
        lineSpanningSubset3D0.contains(vector3D_Unit0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
3272,"    public Interval getSubspaceRegion() {
        final double start = getSubspaceStart();
        final double end = getSubspaceEnd();

        return Interval.of(start, end, getLine().getPrecision());
    }","  public void test28()  throws Throwable  {
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D((Line3D) null);
      // Undeclared exception!
      try { 
        lineSpanningSubset3D0.getSubspaceRegion();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.LineConvexSubset3D"", e);
      }
  }"
3273,"    public boolean contains(final Vector3D pt) {
        final Line3D line = getLine();
        return line.contains(pt) && containsAbscissa(line.abscissa(pt));
    }","  public void test29()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D(line3D0);
      boolean boolean0 = lineSpanningSubset3D0.contains(vector3D_Unit0);
}"
3274,"    public boolean contains(final Vector3D pt) {
        final Line3D line = getLine();
        return line.contains(pt) && containsAbscissa(line.abscissa(pt));
    }","  public void test30()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D(line3D0);
      boolean boolean0 = lineSpanningSubset3D0.contains(vector3D_Unit0);
      boolean boolean1 = lineSpanningSubset3D0.contains(vector3D_Unit0);
}"
3275,"    public boolean contains(final Vector3D pt) {
        final Line3D line = getLine();
        return line.contains(pt) && containsAbscissa(line.abscissa(pt));
    }","  public void test31()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D_Unit0, vector3D_Unit0);
      boolean boolean0 = segment3D0.contains(vector3D_Unit0);
}"
3276,"    public Interval getInterval() {
        return getSubspaceRegion();
    }","  public void test32()  throws Throwable  {
      LineSpanningSubset3D lineSpanningSubset3D0 = new LineSpanningSubset3D((Line3D) null);
      // Undeclared exception!
      try { 
        lineSpanningSubset3D0.getInterval();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.LineConvexSubset3D"", e);
      }
  }"
3277,"    public double getSubspaceEnd() {
        return end;
    }","  public void test0()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, 0.0);
      Line3D line3D1 = line3D0.transform(quaternionRotation0);
      Segment3D segment3D0 = new Segment3D(line3D1, 0.0, 2944.468259320761);
      Segment3D segment3D1 = segment3D0.transform(quaternionRotation0);
}"
3278,"    public double getSubspaceStart() {
        return start;
    }","  public void test1()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, 0.0);
      Line3D line3D1 = line3D0.transform(quaternionRotation0);
      Segment3D segment3D0 = new Segment3D(line3D1, 0.0, 2944.468259320761);
      Segment3D segment3D1 = segment3D0.transform(quaternionRotation0);
}"
3279,"    public double getSize() {
        return end - start;
    }","  public void test2()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, 0.0);
      Line3D line3D1 = line3D0.transform(quaternionRotation0);
      Segment3D segment3D0 = new Segment3D(line3D1, 0.0, 2944.468259320761);
      Segment3D segment3D1 = segment3D0.transform(quaternionRotation0);
}"
3280,"    public double getSize() {
        return end - start;
    }","  public void test3()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = line3D0.segment((-314.3618724531), (-314.3618724531));
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createTranslation((-314.3618724531), -0.0, (-314.3618724531));
      Segment3D segment3D1 = segment3D0.transform(affineTransformMatrix3D0);
}"
3281,"    public double getSize() {
        return end - start;
    }","  public void test4()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, 0.0);
      Segment3D segment3D0 = new Segment3D(line3D0, 0.0, 2944.468259320761);
      Segment3D segment3D1 = segment3D0.transform(quaternionRotation0);
}"
3282,"    public double getSize() {
        return end - start;
    }","  public void test5()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Y;
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D_Unit0, vector3D_Unit1);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Segment3D segment3D1 = segment3D0.transform(quaternionRotation0);
}"
3283,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName())
            .append(""[startPoint= "")
            .append(getStartPoint())
            .append("", endPoint= "")
            .append(getEndPoint())
            .append(']');

        return sb.toString();
    }","  public void test6()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = line3D0.segment((-685.3481604119322), (-685.3481604119322));
      String string0 = segment3D0.toString();
}"
3284,"    public double getSubspaceStart() {
        return start;
    }","  public void test7()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D((Vector3D) null, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = line3D0.segment(0.99, 0.99);
      double double0 = segment3D0.getSubspaceStart();
}"
3285,"    public double getSize() {
        return end - start;
    }","  public void test8()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D((Vector3D) null, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = line3D0.segment(0.99, 0.99);
      double double0 = segment3D0.getSubspaceStart();
}"
3286,"    public double getSize() {
        return end - start;
    }","  public void test9()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = line3D0.segment((-1386.5325268167824), 2031.8038);
      double double0 = segment3D0.getSubspaceStart();
}"
3287,"    public double getSubspaceStart() {
        return start;
    }","  public void test10()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = line3D0.segment((-1386.5325268167824), 2031.8038);
      double double0 = segment3D0.getSubspaceStart();
}"
3288,"    public double getSubspaceEnd() {
        return end;
    }","  public void test11()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, (-1640.398504), 0.0, 2553.6);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D_Unit0, vector3D_Unit0);
      Segment3D segment3D1 = segment3D0.transform(quaternionRotation0);
      double double0 = segment3D1.getSubspaceEnd();
}"
3289,"    public double getSubspaceStart() {
        return start;
    }","  public void test12()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, (-1640.398504), 0.0, 2553.6);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D_Unit0, vector3D_Unit0);
      Segment3D segment3D1 = segment3D0.transform(quaternionRotation0);
      double double0 = segment3D1.getSubspaceEnd();
}"
3290,"    public double getSubspaceEnd() {
        return end;
    }","  public void test13()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = line3D0.segment((-314.3618724531), (-314.3618724531));
      double double0 = segment3D0.getSubspaceEnd();
}"
3291,"    public double getSubspaceStart() {
        return start;
    }","  public void test14()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = line3D0.segment((-314.3618724531), (-314.3618724531));
      double double0 = segment3D0.getSubspaceEnd();
}"
3292,"    public double getSubspaceStart() {
        return start;
    }","  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, 0.0, 0.0);
      segment3D0.getStartPoint();
}"
3293,"    public double getSubspaceEnd() {
        return end;
    }","  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, 0.0, 0.0);
      segment3D0.getStartPoint();
}"
3294,"    public double getSubspaceStart() {
        return start;
    }","  public void test17()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D_Unit0, vector3D_Unit0);
      segment3D0.getStartPoint();
}"
3295,"    public double getSize() {
        return end - start;
    }","  public void test18()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D_Unit0, vector3D_Unit0);
      segment3D0.getStartPoint();
}"
3296,"    public double getSize() {
        return end - start;
    }","  public void test19()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Line3D line3D1 = line3D0.reverse();
      Segment3D segment3D0 = line3D1.segment((-685.3481604119322), (-685.3481604119322));
      Vector3D vector3D1 = segment3D0.getStartPoint();
}"
3297,"    public Vector3D getStartPoint() {
        return getLine().toSpace(start);
    }","  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Line3D line3D1 = line3D0.reverse();
      Segment3D segment3D0 = line3D1.segment((-685.3481604119322), (-685.3481604119322));
      Vector3D vector3D1 = segment3D0.getStartPoint();
}"
3298,"    public double getSubspaceEnd() {
        return end;
    }","  public void test21()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, (-1535.9261648285), 0.0);
      double double0 = segment3D0.getSize();
}"
3299,"    public double getSize() {
        return end - start;
    }","  public void test22()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, (-1535.9261648285), 0.0);
      double double0 = segment3D0.getSize();
}"
3300,"    public double getSize() {
        return end - start;
    }","  public void test23()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, 40.6994953, (-1573.842106557279));
      double double0 = segment3D0.getSize();
}"
3301,"    public double getSize() {
        return end - start;
    }","  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, (-685.3481604119322), 2917.062984585159);
      Vector3D vector3D1 = segment3D0.getEndPoint();
}"
3302,"    public Vector3D getEndPoint() {
        return getLine().toSpace(end);
    }","  public void test25()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, (-685.3481604119322), 2917.062984585159);
      Vector3D vector3D1 = segment3D0.getEndPoint();
}"
3303,"    public Vector3D getEndPoint() {
        return getLine().toSpace(end);
    }","  public void test26()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Y;
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D_Unit0, vector3D_Unit1);
      Vector3D vector3D0 = segment3D0.getEndPoint();
}"
3304,"    public double getSize() {
        return end - start;
    }","  public void test27()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Y;
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D_Unit0, vector3D_Unit1);
      Vector3D vector3D0 = segment3D0.getEndPoint();
}"
3305,"    public double getSubspaceStart() {
        return start;
    }","  public void test28()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Y;
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D_Unit0, vector3D_Unit1);
      Vector3D vector3D0 = segment3D0.getEndPoint();
}"
3306,"    public Vector3D getEndPoint() {
        return getLine().toSpace(end);
    }","  public void test29()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D0, vector3D0);
      Vector3D vector3D1 = segment3D0.getEndPoint();
}"
3307,"    public Vector3D getCentroid() {
        return getLine().toSpace((0.5 * (end - start)) + start);
    }","  public void test30()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-1.0), 3929.8, (-764.655335));
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = line3D0.segment(0.0, 1.0);
      Vector3D vector3D1 = segment3D0.getCentroid();
}"
3308,"    public double getSubspaceStart() {
        return start;
    }","  public void test31()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from((-1.0), 3929.8, (-764.655335));
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = line3D0.segment(0.0, 1.0);
      Vector3D vector3D1 = segment3D0.getCentroid();
}"
3309,"    public double getSize() {
        return end - start;
    }","  public void test32()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, (Precision.DoubleEquivalence) null);
      Segment3D segment3D0 = new Segment3D(line3D0, 0.0, 3.0);
      Vector3D vector3D1 = segment3D0.getCentroid();
}"
3310,"    public double getSubspaceStart() {
        return start;
    }","  public void test33()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, (Precision.DoubleEquivalence) null);
      Segment3D segment3D0 = new Segment3D(line3D0, 0.0, 3.0);
      Vector3D vector3D1 = segment3D0.getCentroid();
}"
3311,"    public Vector3D getCentroid() {
        return getLine().toSpace((0.5 * (end - start)) + start);
    }","  public void test34()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, (Precision.DoubleEquivalence) null);
      Segment3D segment3D0 = new Segment3D(line3D0, 0.0, 3.0);
      Vector3D vector3D1 = segment3D0.getCentroid();
}"
3312,"    public double getSize() {
        return end - start;
    }","  public void test35()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, (Precision.DoubleEquivalence) null);
      Segment3D segment3D0 = line3D0.segment(1359.141177885, (-1.0));
      segment3D0.getCentroid();
}"
3313,"    public Segment3D transform(final Transform<Vector3D> transform) {
        final Vector3D t1 = transform.apply(getStartPoint());
        final Vector3D t2 = transform.apply(getEndPoint());

        final Line3D tLine = getLine().transform(transform);

        return new Segment3D(tLine, t1, t2);
    }","  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, (Precision.DoubleEquivalence) null);
      Segment3D segment3D0 = line3D0.segment(1359.141177885, (-1.0));
      // Undeclared exception!
      try { 
        segment3D0.transform((Transform<Vector3D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Segment3D"", e);
      }
  }"
3314,"    public Segment3D transform(final Transform<Vector3D> transform) {
        final Vector3D t1 = transform.apply(getStartPoint());
        final Vector3D t2 = transform.apply(getEndPoint());

        final Line3D tLine = getLine().transform(transform);

        return new Segment3D(tLine, t1, t2);
    }","  public void test37()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D0, vector3D0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      // Undeclared exception!
      try { 
        segment3D0.transform(quaternionRotation0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
3315,"    public Vector3D getStartPoint() {
        return getLine().toSpace(start);
    }","  public void test38()  throws Throwable  {
      Segment3D segment3D0 = new Segment3D((Line3D) null, 0.0, 0.0);
      // Undeclared exception!
      try { 
        segment3D0.getStartPoint();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Segment3D"", e);
      }
  }"
3316,"    public Vector3D getEndPoint() {
        return getLine().toSpace(end);
    }","  public void test39()  throws Throwable  {
      Segment3D segment3D0 = new Segment3D((Line3D) null, 2231.829805811, 2231.829805811);
      // Undeclared exception!
      try { 
        segment3D0.getEndPoint();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Segment3D"", e);
      }
  }"
3317,"    public Vector3D getCentroid() {
        return getLine().toSpace((0.5 * (end - start)) + start);
    }","  public void test40()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Line3D line3D0 = new Line3D((Vector3D) null, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      Segment3D segment3D0 = new Segment3D(line3D0, 1053.21, 1.0);
      // Undeclared exception!
      try { 
        segment3D0.getCentroid();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
3318,"    public Bounds3D getBounds() {
        return Bounds3D.builder()
                .add(getStartPoint())
                .add(getEndPoint())
                .build();
    }","  public void test41()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D((Vector3D) null, (Vector3D) null, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, Double.NaN, (-595.8));
      // Undeclared exception!
      try { 
        segment3D0.getBounds();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Vector3D"", e);
      }
  }"
3319,"    public Bounds3D getBounds() {
        return Bounds3D.builder()
                .add(getStartPoint())
                .add(getEndPoint())
                .build();
    }","  public void test42()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = line3D0.segment(0.0, 0.0);
      // Undeclared exception!
      try { 
        segment3D0.getBounds();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Invalid bounds: min= (NaN, NaN, NaN), max= (NaN, NaN, NaN)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.Bounds3D$Builder"", e);
      }
  }"
3320,"    boolean containsAbscissa(final double abscissa) {
        final Precision.DoubleEquivalence precision = getLine().getPrecision();
        return precision.gte(abscissa, start) &&
                precision.lte(abscissa, end);
    }","  public void test43()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      Segment3D segment3D0 = line3D0.segment((-1.0), (-1.0));
      // Undeclared exception!
      try { 
        segment3D0.containsAbscissa((-1.0));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Segment3D"", e);
      }
  }"
3321,"    Segment3D(final Line3D line, final Vector3D startPoint, final Vector3D endPoint) {
        this(line, line.abscissa(startPoint), line.abscissa(endPoint));
    }","  public void test44()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Segment3D segment3D0 = null;
      try {
        segment3D0 = new Segment3D((Line3D) null, vector3D0, vector3D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Segment3D"", e);
      }
  }"
3322,"    public double getSubspaceStart() {
        return start;
    }","  public void test45()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D_Unit0, vector3D_Unit0);
      double double0 = segment3D0.getSubspaceStart();
}"
3323,"    public double getSubspaceEnd() {
        return end;
    }","  public void test46()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D_Unit0, vector3D_Unit0);
      double double0 = segment3D0.getSubspaceStart();
}"
3324,"    public double getSize() {
        return end - start;
    }","  public void test47()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = line3D0.segment((-632.28202), 1465.59499);
      Vector3D vector3D1 = segment3D0.getStartPoint();
}"
3325,"    public Vector3D getStartPoint() {
        return getLine().toSpace(start);
    }","  public void test48()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = line3D0.segment((-632.28202), 1465.59499);
      Vector3D vector3D1 = segment3D0.getStartPoint();
}"
3326,"    public double getSubspaceStart() {
        return start;
    }","  public void test49()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D_Unit0, vector3D_Unit0);
      double double0 = segment3D0.getSubspaceEnd();
}"
3327,"    public double getSubspaceEnd() {
        return end;
    }","  public void test50()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D_Unit0, vector3D_Unit0);
      double double0 = segment3D0.getSubspaceEnd();
}"
3328,"    boolean containsAbscissa(final double abscissa) {
        final Precision.DoubleEquivalence precision = getLine().getPrecision();
        return precision.gte(abscissa, start) &&
                precision.lte(abscissa, end);
    }","  public void test51()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      doReturn(true, false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = line3D0.segment((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      boolean boolean0 = segment3D0.containsAbscissa(2898.822843266);
}"
3329,"    boolean containsAbscissa(final double abscissa) {
        final Precision.DoubleEquivalence precision = getLine().getPrecision();
        return precision.gte(abscissa, start) &&
                precision.lte(abscissa, end);
    }","  public void test52()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      doReturn(true, false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = line3D0.segment((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      boolean boolean0 = segment3D0.containsAbscissa(2898.822843266);
      boolean boolean1 = segment3D0.containsAbscissa(2898.822843266);
}"
3330,"    public double getSubspaceStart() {
        return start;
    }","  public void test53()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      doReturn(true, false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = line3D0.segment((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      boolean boolean0 = segment3D0.containsAbscissa(2898.822843266);
      boolean boolean1 = segment3D0.containsAbscissa(2898.822843266);
}"
3331,"    public double getSubspaceEnd() {
        return end;
    }","  public void test54()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      doReturn(true, false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = line3D0.segment((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      boolean boolean0 = segment3D0.containsAbscissa(2898.822843266);
      boolean boolean1 = segment3D0.containsAbscissa(2898.822843266);
}"
3332,"    boolean containsAbscissa(final double abscissa) {
        final Precision.DoubleEquivalence precision = getLine().getPrecision();
        return precision.gte(abscissa, start) &&
                precision.lte(abscissa, end);
    }","  public void test55()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of((-682.0350125669876), (-682.0350125669876), (-682.0350125669876));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D0, vector3D0);
      boolean boolean0 = segment3D0.containsAbscissa((-682.0350125669876));
}"
3333,"    public double getSubspaceStart() {
        return start;
    }","  public void test56()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of((-682.0350125669876), (-682.0350125669876), (-682.0350125669876));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D0, vector3D0);
      boolean boolean0 = segment3D0.containsAbscissa((-682.0350125669876));
}"
3334,"    public double getSize() {
        return end - start;
    }","  public void test57()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of((-682.0350125669876), (-682.0350125669876), (-682.0350125669876));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D0, vector3D0);
      boolean boolean0 = segment3D0.containsAbscissa((-682.0350125669876));
}"
3335,"    public double getSubspaceStart() {
        return start;
    }","  public void test58()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D0, vector3D0);
      double double0 = segment3D0.getSize();
}"
3336,"    public double getSize() {
        return end - start;
    }","  public void test59()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D0, vector3D0);
      double double0 = segment3D0.getSize();
}"
3337,"    public double getSubspaceStart() {
        return start;
    }","  public void test60()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D0, vector3D0);
      segment3D0.getBounds();
}"
3338,"    public double getSize() {
        return end - start;
    }","  public void test61()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D0, vector3D0);
      segment3D0.getBounds();
}"
3339,"    public boolean isInfinite() {
        return false;
    }","  public void test62()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D0, vector3D0);
      boolean boolean0 = segment3D0.isInfinite();
}"
3340,"    public double getSubspaceStart() {
        return start;
    }","  public void test63()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D0, vector3D0);
      boolean boolean0 = segment3D0.isInfinite();
}"
3341,"    public double getSize() {
        return end - start;
    }","  public void test64()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D0, vector3D0);
      boolean boolean0 = segment3D0.isInfinite();
}"
3342,"    public double getSubspaceStart() {
        return start;
    }","  public void test65()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D0, vector3D0);
      boolean boolean0 = segment3D0.isFinite();
}"
3343,"    public boolean isFinite() {
        return true;
    }","  public void test66()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D0, vector3D0);
      boolean boolean0 = segment3D0.isFinite();
}"
3344,"    public double getSubspaceEnd() {
        return end;
    }","  public void test67()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = new Segment3D(line3D0, vector3D0, vector3D0);
      boolean boolean0 = segment3D0.isFinite();
}"
3345,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName())
            .append(""[startPoint= "")
            .append(getStartPoint())
            .append("", endPoint= "")
            .append(getEndPoint())
            .append(']');

        return sb.toString();
    }","  public void test68()  throws Throwable  {
      Segment3D segment3D0 = new Segment3D((Line3D) null, -0.0, (-1036.6559));
      // Undeclared exception!
      try { 
        segment3D0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.line.Segment3D"", e);
      }
  }"
3346,"    public double getAngle2() {
        return angle2;
    }","  public void test0()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, (-1.0));
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3347,"    public double getAngle3() {
        return angle3;
    }","  public void test1()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, (-1.0));
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3348,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AxisAngleSequence)) {
            return false;
        }

        final AxisAngleSequence other = (AxisAngleSequence) obj;

        return this.referenceFrame == other.referenceFrame &&
                this.axisSequence == other.axisSequence &&
                Double.compare(this.angle1, other.angle1) == 0 &&
                Double.compare(this.angle2, other.angle2) == 0 &&
                Double.compare(this.angle3, other.angle3) == 0;
    }","  public void test2()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, (-1.0));
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3349,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AxisAngleSequence)) {
            return false;
        }

        final AxisAngleSequence other = (AxisAngleSequence) obj;

        return this.referenceFrame == other.referenceFrame &&
                this.axisSequence == other.axisSequence &&
                Double.compare(this.angle1, other.angle1) == 0 &&
                Double.compare(this.angle2, other.angle2) == 0 &&
                Double.compare(this.angle3, other.angle3) == 0;
    }","  public void test3()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, (-1.0));
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3350,"    public double getAngle1() {
        return angle1;
    }","  public void test4()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, (-1.0));
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3351,"    public double getAngle2() {
        return angle2;
    }","  public void test5()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, 0.0, (-3708.66069709), (-630.2527661090433));
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3352,"    public double getAngle1() {
        return angle1;
    }","  public void test6()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, 0.0, (-3708.66069709), (-630.2527661090433));
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3353,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AxisAngleSequence)) {
            return false;
        }

        final AxisAngleSequence other = (AxisAngleSequence) obj;

        return this.referenceFrame == other.referenceFrame &&
                this.axisSequence == other.axisSequence &&
                Double.compare(this.angle1, other.angle1) == 0 &&
                Double.compare(this.angle2, other.angle2) == 0 &&
                Double.compare(this.angle3, other.angle3) == 0;
    }","  public void test7()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, 0.0, (-3708.66069709), (-630.2527661090433));
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3354,"    public double getAngle3() {
        return angle3;
    }","  public void test8()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, 0.0, (-3708.66069709), (-630.2527661090433));
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3355,"    public double getAngle2() {
        return angle2;
    }","  public void test9()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, (-2370.35210049), (-2370.35210049), (-2370.35210049));
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, (-3297.2438353207704), (-2370.35210049), 0.0);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3356,"    public double getAngle1() {
        return angle1;
    }","  public void test10()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, (-2370.35210049), (-2370.35210049), (-2370.35210049));
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, (-3297.2438353207704), (-2370.35210049), 0.0);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3357,"    public double getAngle3() {
        return angle3;
    }","  public void test11()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, (-2370.35210049), (-2370.35210049), (-2370.35210049));
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, (-3297.2438353207704), (-2370.35210049), 0.0);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3358,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AxisAngleSequence)) {
            return false;
        }

        final AxisAngleSequence other = (AxisAngleSequence) obj;

        return this.referenceFrame == other.referenceFrame &&
                this.axisSequence == other.axisSequence &&
                Double.compare(this.angle1, other.angle1) == 0 &&
                Double.compare(this.angle2, other.angle2) == 0 &&
                Double.compare(this.angle3, other.angle3) == 0;
    }","  public void test12()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, (-2370.35210049), (-2370.35210049), (-2370.35210049));
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, (-3297.2438353207704), (-2370.35210049), 0.0);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3359,"    public double getAngle2() {
        return angle2;
    }","  public void test13()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, (-75.5455867857), (-75.5455867857), 873.562148);
      axisAngleSequence0.hashCode();
}"
3360,"    public double getAngle1() {
        return angle1;
    }","  public void test14()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, (-75.5455867857), (-75.5455867857), 873.562148);
      axisAngleSequence0.hashCode();
}"
3361,"    public double getAngle3() {
        return angle3;
    }","  public void test15()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, (-75.5455867857), (-75.5455867857), 873.562148);
      axisAngleSequence0.hashCode();
}"
3362,"    public double getAngle3() {
        return angle3;
    }","  public void test16()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.ABSOLUTE;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, (AxisSequence) null, 0.0, 0.0, (-1274.124715872));
      axisAngleSequence0.getAxisSequence();
}"
3363,"    public double getAngle1() {
        return angle1;
    }","  public void test17()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.ABSOLUTE;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, (AxisSequence) null, 0.0, 0.0, (-1274.124715872));
      axisAngleSequence0.getAxisSequence();
}"
3364,"    public double getAngle2() {
        return angle2;
    }","  public void test18()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.ABSOLUTE;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, (AxisSequence) null, 0.0, 0.0, (-1274.124715872));
      axisAngleSequence0.getAxisSequence();
}"
3365,"    public double getAngle2() {
        return angle2;
    }","  public void test19()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 18.98403688685494);
      double double0 = axisAngleSequence0.getAngle3();
}"
3366,"    public double getAngle1() {
        return angle1;
    }","  public void test20()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 18.98403688685494);
      double double0 = axisAngleSequence0.getAngle3();
}"
3367,"    public double getAngle3() {
        return angle3;
    }","  public void test21()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 18.98403688685494);
      double double0 = axisAngleSequence0.getAngle3();
}"
3368,"    public double getAngle3() {
        return angle3;
    }","  public void test22()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, (-2370.35210049), (-2370.35210049), (-2370.35210049));
      double double0 = axisAngleSequence0.getAngle3();
}"
3369,"    public double getAngle1() {
        return angle1;
    }","  public void test23()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, (-2370.35210049), (-2370.35210049), (-2370.35210049));
      double double0 = axisAngleSequence0.getAngle3();
}"
3370,"    public double getAngle2() {
        return angle2;
    }","  public void test24()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, (-2370.35210049), (-2370.35210049), (-2370.35210049));
      double double0 = axisAngleSequence0.getAngle3();
}"
3371,"    public double getAngle3() {
        return angle3;
    }","  public void test25()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      double double0 = axisAngleSequence0.getAngle2();
}"
3372,"    public double getAngle2() {
        return angle2;
    }","  public void test26()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      double double0 = axisAngleSequence0.getAngle2();
}"
3373,"    public double getAngle1() {
        return angle1;
    }","  public void test27()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      double double0 = axisAngleSequence0.getAngle2();
}"
3374,"    public double getAngle3() {
        return angle3;
    }","  public void test28()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, (-2370.35210049), (-2370.35210049), (-2370.35210049));
      double double0 = axisAngleSequence0.getAngle2();
}"
3375,"    public double getAngle1() {
        return angle1;
    }","  public void test29()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, (-2370.35210049), (-2370.35210049), (-2370.35210049));
      double double0 = axisAngleSequence0.getAngle2();
}"
3376,"    public double getAngle2() {
        return angle2;
    }","  public void test30()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, (-2370.35210049), (-2370.35210049), (-2370.35210049));
      double double0 = axisAngleSequence0.getAngle2();
}"
3377,"    public double getAngle2() {
        return angle2;
    }","  public void test31()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 0.0, 0.0, (-355.69266459));
      double double0 = axisAngleSequence0.getAngle1();
}"
3378,"    public double getAngle3() {
        return angle3;
    }","  public void test32()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 0.0, 0.0, (-355.69266459));
      double double0 = axisAngleSequence0.getAngle1();
}"
3379,"    public double getAngle1() {
        return angle1;
    }","  public void test33()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 0.0, 0.0, (-355.69266459));
      double double0 = axisAngleSequence0.getAngle1();
}"
3380,"    public double getAngle3() {
        return angle3;
    }","  public void test34()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, (-1.0), 0.0, 0.0);
      double double0 = axisAngleSequence0.getAngle1();
}"
3381,"    public double getAngle1() {
        return angle1;
    }","  public void test35()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, (-1.0), 0.0, 0.0);
      double double0 = axisAngleSequence0.getAngle1();
}"
3382,"    public double getAngle2() {
        return angle2;
    }","  public void test36()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, (-1.0), 0.0, 0.0);
      double double0 = axisAngleSequence0.getAngle1();
}"
3383,"    public double[] getAngles() {
        return new double[]{angle1, angle2, angle3};
    }","  public void test37()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 0.0, 0.0, (-355.69266459));
      double[] doubleArray0 = axisAngleSequence0.getAngles();
}"
3384,"    public double getAngle1() {
        return angle1;
    }","  public void test38()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 0.669420296700669, 0.669420296700669, 0.669420296700669);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createAbsolute(axisSequence0, 0.669420296700669, 0.669420296700669, 0.669420296700669);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3385,"    public double getAngle2() {
        return angle2;
    }","  public void test39()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 0.669420296700669, 0.669420296700669, 0.669420296700669);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createAbsolute(axisSequence0, 0.669420296700669, 0.669420296700669, 0.669420296700669);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3386,"    public double getAngle3() {
        return angle3;
    }","  public void test40()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 0.669420296700669, 0.669420296700669, 0.669420296700669);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createAbsolute(axisSequence0, 0.669420296700669, 0.669420296700669, 0.669420296700669);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3387,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AxisAngleSequence)) {
            return false;
        }

        final AxisAngleSequence other = (AxisAngleSequence) obj;

        return this.referenceFrame == other.referenceFrame &&
                this.axisSequence == other.axisSequence &&
                Double.compare(this.angle1, other.angle1) == 0 &&
                Double.compare(this.angle2, other.angle2) == 0 &&
                Double.compare(this.angle3, other.angle3) == 0;
    }","  public void test41()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 0.669420296700669, 0.669420296700669, 0.669420296700669);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createAbsolute(axisSequence0, 0.669420296700669, 0.669420296700669, 0.669420296700669);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3388,"    public double getAngle3() {
        return angle3;
    }","  public void test42()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 0.0, 0.0, 30.999569463535085);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createAbsolute(axisSequence0, 0.0, 30.999569463535085, 0.0);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3389,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AxisAngleSequence)) {
            return false;
        }

        final AxisAngleSequence other = (AxisAngleSequence) obj;

        return this.referenceFrame == other.referenceFrame &&
                this.axisSequence == other.axisSequence &&
                Double.compare(this.angle1, other.angle1) == 0 &&
                Double.compare(this.angle2, other.angle2) == 0 &&
                Double.compare(this.angle3, other.angle3) == 0;
    }","  public void test43()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 0.0, 0.0, 30.999569463535085);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createAbsolute(axisSequence0, 0.0, 30.999569463535085, 0.0);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3390,"    public double getAngle1() {
        return angle1;
    }","  public void test44()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 0.0, 0.0, 30.999569463535085);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createAbsolute(axisSequence0, 0.0, 30.999569463535085, 0.0);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3391,"    public double getAngle2() {
        return angle2;
    }","  public void test45()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 0.0, 0.0, 30.999569463535085);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createAbsolute(axisSequence0, 0.0, 30.999569463535085, 0.0);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3392,"    public double getAngle1() {
        return angle1;
    }","  public void test46()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 0.0, 0.0, 30.999569463535085);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createAbsolute(axisSequence0, 0.0, 30.999569463535085, 0.0);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3393,"    public double getAngle2() {
        return angle2;
    }","  public void test47()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YXY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3724.8907308851994, 3724.8907308851994, 3724.8907308851994);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createAbsolute(axisSequence0, 2047.03, 3724.8907308851994, 2047.03);
      boolean boolean0 = axisAngleSequence1.equals(axisAngleSequence0);
}"
3394,"    public double getAngle1() {
        return angle1;
    }","  public void test48()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YXY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3724.8907308851994, 3724.8907308851994, 3724.8907308851994);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createAbsolute(axisSequence0, 2047.03, 3724.8907308851994, 2047.03);
      boolean boolean0 = axisAngleSequence1.equals(axisAngleSequence0);
}"
3395,"    public double getAngle3() {
        return angle3;
    }","  public void test49()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YXY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3724.8907308851994, 3724.8907308851994, 3724.8907308851994);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createAbsolute(axisSequence0, 2047.03, 3724.8907308851994, 2047.03);
      boolean boolean0 = axisAngleSequence1.equals(axisAngleSequence0);
}"
3396,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AxisAngleSequence)) {
            return false;
        }

        final AxisAngleSequence other = (AxisAngleSequence) obj;

        return this.referenceFrame == other.referenceFrame &&
                this.axisSequence == other.axisSequence &&
                Double.compare(this.angle1, other.angle1) == 0 &&
                Double.compare(this.angle2, other.angle2) == 0 &&
                Double.compare(this.angle3, other.angle3) == 0;
    }","  public void test50()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YXY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3724.8907308851994, 3724.8907308851994, 3724.8907308851994);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createAbsolute(axisSequence0, 2047.03, 3724.8907308851994, 2047.03);
      boolean boolean0 = axisAngleSequence1.equals(axisAngleSequence0);
}"
3397,"    public double getAngle1() {
        return angle1;
    }","  public void test51()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 1868.8494268904872, 0.0);
      AxisSequence axisSequence1 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence1, (-1321.0687862), 0.0, 1868.8494268904872);
      boolean boolean0 = axisAngleSequence1.equals(axisAngleSequence0);
}"
3398,"    public double getAngle2() {
        return angle2;
    }","  public void test52()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 1868.8494268904872, 0.0);
      AxisSequence axisSequence1 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence1, (-1321.0687862), 0.0, 1868.8494268904872);
      boolean boolean0 = axisAngleSequence1.equals(axisAngleSequence0);
}"
3399,"    public double getAngle3() {
        return angle3;
    }","  public void test53()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 1868.8494268904872, 0.0);
      AxisSequence axisSequence1 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence1, (-1321.0687862), 0.0, 1868.8494268904872);
      boolean boolean0 = axisAngleSequence1.equals(axisAngleSequence0);
}"
3400,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AxisAngleSequence)) {
            return false;
        }

        final AxisAngleSequence other = (AxisAngleSequence) obj;

        return this.referenceFrame == other.referenceFrame &&
                this.axisSequence == other.axisSequence &&
                Double.compare(this.angle1, other.angle1) == 0 &&
                Double.compare(this.angle2, other.angle2) == 0 &&
                Double.compare(this.angle3, other.angle3) == 0;
    }","  public void test54()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 1868.8494268904872, 0.0);
      AxisSequence axisSequence1 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence1, (-1321.0687862), 0.0, 1868.8494268904872);
      boolean boolean0 = axisAngleSequence1.equals(axisAngleSequence0);
}"
3401,"    public double getAngle1() {
        return angle1;
    }","  public void test55()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, (-1.0), (-1.0), (-1.0));
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, (-1.0), (-1.0), (-1.0));
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3402,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AxisAngleSequence)) {
            return false;
        }

        final AxisAngleSequence other = (AxisAngleSequence) obj;

        return this.referenceFrame == other.referenceFrame &&
                this.axisSequence == other.axisSequence &&
                Double.compare(this.angle1, other.angle1) == 0 &&
                Double.compare(this.angle2, other.angle2) == 0 &&
                Double.compare(this.angle3, other.angle3) == 0;
    }","  public void test56()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, (-1.0), (-1.0), (-1.0));
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, (-1.0), (-1.0), (-1.0));
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3403,"    public double getAngle3() {
        return angle3;
    }","  public void test57()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, (-1.0), (-1.0), (-1.0));
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, (-1.0), (-1.0), (-1.0));
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3404,"    public double getAngle2() {
        return angle2;
    }","  public void test58()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, (-1.0), (-1.0), (-1.0));
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, (-1.0), (-1.0), (-1.0));
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3405,"    public double getAngle3() {
        return angle3;
    }","  public void test59()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, (-1.0), (-1.0), (-1.0));
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, (-1.0), (-1.0), (-1.0));
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3406,"    public double getAngle2() {
        return angle2;
    }","  public void test60()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, (-1.0), (-1.0), (-1.0));
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, (-1.0), (-1.0), (-1.0));
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3407,"    public double getAngle1() {
        return angle1;
    }","  public void test61()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, (-1.0), (-1.0), (-1.0));
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, (-1.0), (-1.0), (-1.0));
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3408,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AxisAngleSequence)) {
            return false;
        }

        final AxisAngleSequence other = (AxisAngleSequence) obj;

        return this.referenceFrame == other.referenceFrame &&
                this.axisSequence == other.axisSequence &&
                Double.compare(this.angle1, other.angle1) == 0 &&
                Double.compare(this.angle2, other.angle2) == 0 &&
                Double.compare(this.angle3, other.angle3) == 0;
    }","  public void test62()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      boolean boolean0 = axisAngleSequence0.equals(axisSequence0);
}"
3409,"    public double getAngle1() {
        return angle1;
    }","  public void test63()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      boolean boolean0 = axisAngleSequence0.equals(axisSequence0);
}"
3410,"    public double getAngle2() {
        return angle2;
    }","  public void test64()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      boolean boolean0 = axisAngleSequence0.equals(axisSequence0);
}"
3411,"    public double getAngle3() {
        return angle3;
    }","  public void test65()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      boolean boolean0 = axisAngleSequence0.equals(axisSequence0);
}"
3412,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AxisAngleSequence)) {
            return false;
        }

        final AxisAngleSequence other = (AxisAngleSequence) obj;

        return this.referenceFrame == other.referenceFrame &&
                this.axisSequence == other.axisSequence &&
                Double.compare(this.angle1, other.angle1) == 0 &&
                Double.compare(this.angle2, other.angle2) == 0 &&
                Double.compare(this.angle3, other.angle3) == 0;
    }","  public void test66()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 3722.08254859086, 3722.08254859086, 3722.08254859086);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence0);
}"
3413,"    public double getAngle2() {
        return angle2;
    }","  public void test67()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 3722.08254859086, 3722.08254859086, 3722.08254859086);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence0);
}"
3414,"    public double getAngle3() {
        return angle3;
    }","  public void test68()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 3722.08254859086, 3722.08254859086, 3722.08254859086);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence0);
}"
3415,"    public double getAngle1() {
        return angle1;
    }","  public void test69()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 3722.08254859086, 3722.08254859086, 3722.08254859086);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence0);
}"
3416,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AxisAngleSequence)) {
            return false;
        }

        final AxisAngleSequence other = (AxisAngleSequence) obj;

        return this.referenceFrame == other.referenceFrame &&
                this.axisSequence == other.axisSequence &&
                Double.compare(this.angle1, other.angle1) == 0 &&
                Double.compare(this.angle2, other.angle2) == 0 &&
                Double.compare(this.angle3, other.angle3) == 0;
    }","  public void test70()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 18.98403688685494);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3417,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AxisAngleSequence)) {
            return false;
        }

        final AxisAngleSequence other = (AxisAngleSequence) obj;

        return this.referenceFrame == other.referenceFrame &&
                this.axisSequence == other.axisSequence &&
                Double.compare(this.angle1, other.angle1) == 0 &&
                Double.compare(this.angle2, other.angle2) == 0 &&
                Double.compare(this.angle3, other.angle3) == 0;
    }","  public void test71()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 18.98403688685494);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3418,"    public double getAngle2() {
        return angle2;
    }","  public void test72()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 18.98403688685494);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3419,"    public double getAngle3() {
        return angle3;
    }","  public void test73()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 18.98403688685494);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3420,"    public double getAngle1() {
        return angle1;
    }","  public void test74()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      AxisAngleSequence axisAngleSequence1 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 18.98403688685494);
      boolean boolean0 = axisAngleSequence0.equals(axisAngleSequence1);
}"
3421,"    public double getAngle2() {
        return angle2;
    }","  public void test75()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 3722.08254859086, 3722.08254859086, 3722.08254859086);
      axisAngleSequence0.getAxisSequence();
}"
3422,"    public double getAngle3() {
        return angle3;
    }","  public void test76()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 3722.08254859086, 3722.08254859086, 3722.08254859086);
      axisAngleSequence0.getAxisSequence();
}"
3423,"    public double getAngle1() {
        return angle1;
    }","  public void test77()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 3722.08254859086, 3722.08254859086, 3722.08254859086);
      axisAngleSequence0.getAxisSequence();
}"
3424,"    public double getAngle1() {
        return angle1;
    }","  public void test78()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      axisAngleSequence0.getReferenceFrame();
}"
3425,"    public double getAngle2() {
        return angle2;
    }","  public void test79()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      axisAngleSequence0.getReferenceFrame();
}"
3426,"    public double getAngle3() {
        return angle3;
    }","  public void test80()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      axisAngleSequence0.getReferenceFrame();
}"
3427,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(this.getClass().getSimpleName())
            .append(""[referenceFrame="")
            .append(referenceFrame)
            .append("", axisSequence="")
            .append(axisSequence)
            .append("", angles="")
            .append(Arrays.toString(getAngles()))
            .append(']');

        return sb.toString();
    }","  public void test81()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      String string0 = axisAngleSequence0.toString();
}"
3428,"    public double getAngle1() {
        return angle1;
    }","  public void test82()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      double double0 = axisAngleSequence0.getAngle3();
}"
3429,"    public double getAngle2() {
        return angle2;
    }","  public void test83()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      double double0 = axisAngleSequence0.getAngle3();
}"
3430,"    public double getAngle3() {
        return angle3;
    }","  public void test84()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0.0, 0.0, 0.0);
      double double0 = axisAngleSequence0.getAngle3();
}"
3431,"    public double getAngle3() {
        return angle3;
    }","  public void test85()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 3722.08254859086, 3722.08254859086, 3722.08254859086);
      double double0 = axisAngleSequence0.getAngle2();
}"
3432,"    public double getAngle2() {
        return angle2;
    }","  public void test86()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 3722.08254859086, 3722.08254859086, 3722.08254859086);
      double double0 = axisAngleSequence0.getAngle2();
}"
3433,"    public double getAngle1() {
        return angle1;
    }","  public void test87()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 3722.08254859086, 3722.08254859086, 3722.08254859086);
      double double0 = axisAngleSequence0.getAngle2();
}"
3434,"    public double getAngle2() {
        return angle2;
    }","  public void test88()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 3722.08254859086, 3722.08254859086, 3722.08254859086);
      double double0 = axisAngleSequence0.getAngle1();
}"
3435,"    public double getAngle3() {
        return angle3;
    }","  public void test89()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 3722.08254859086, 3722.08254859086, 3722.08254859086);
      double double0 = axisAngleSequence0.getAngle1();
}"
3436,"    public double getAngle1() {
        return angle1;
    }","  public void test90()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 3722.08254859086, 3722.08254859086, 3722.08254859086);
      double double0 = axisAngleSequence0.getAngle1();
}"
3437,"    public double getAngle3() {
        return angle3;
    }","  public void test91()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 4620.9324845592, 2047.03, (-390.06392423703));
}"
3438,"    public double getAngle1() {
        return angle1;
    }","  public void test92()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 4620.9324845592, 2047.03, (-390.06392423703));
}"
3439,"    public double getAngle2() {
        return angle2;
    }","  public void test93()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 4620.9324845592, 2047.03, (-390.06392423703));
}"
3440,,"  public void test0()  throws Throwable  {
      AxisSequence[] axisSequenceArray0 = AxisSequence.values();
}"
3441,,"  public void test1()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.valueOf(""XZX"");
}"
3442,"    public Vector3D getAxis3() {
        return axis3;
    }","  public void test2()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
}"
3443,"    public Vector3D getAxis3() {
        return axis3;
    }","  public void test3()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      Vector3D vector3D0 = axisSequence0.getAxis3();
}"
3444,"    public Vector3D getAxis2() {
        return axis2;
    }","  public void test4()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
}"
3445,"    public Vector3D getAxis2() {
        return axis2;
    }","  public void test5()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      Vector3D vector3D0 = axisSequence0.getAxis2();
}"
3446,"    public Vector3D getAxis1() {
        return axis1;
    }","  public void test6()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZY;
      Vector3D vector3D0 = axisSequence0.getAxis1();
}"
3447,"    public Vector3D getAxis1() {
        return axis1;
    }","  public void test7()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis1();
}"
3448,"    public Vector3D[] toArray() {
        return new Vector3D[]{axis1, axis2, axis3};
    }","  public void test8()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      Vector3D[] vector3DArray0 = axisSequence0.toArray();
}"
3449,"    public Vector3D getAxis2() {
        return axis2;
    }","  public void test9()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
}"
3450,"    public Vector3D getAxis1() {
        return axis1;
    }","  public void test10()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      Vector3D vector3D0 = axisSequence0.getAxis1();
}"
3451,"    public AxisSequenceType getType() {
        return type;
    }","  public void test11()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      AxisSequenceType axisSequenceType0 = axisSequence0.getType();
}"
3452,"    public Vector3D getAxis3() {
        return axis3;
    }","  public void test12()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      Vector3D vector3D0 = axisSequence0.getAxis3();
}"
3453,"    public double getAngle() {
        return 2 * Math.acos(quat.getW());
    }","  public void test0()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(3.141592653589793, 0.0, 0.0);
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Z;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D_Unit0, vector3D_Unit1, vector3D_Unit1, vector3D_Unit0);
}"
3454,"    public double getAngle() {
        return 2 * Math.acos(quat.getW());
    }","  public void test1()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(0.0, 3512.141, (-836.565986374039));
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D0, vector3D0, vector3D0, vector3D0);
}"
3455,"    public static QuaternionRotation createBasisRotation(final Vector3D u1, final Vector3D u2,
            final Vector3D v1, final Vector3D v2) {

        // calculate orthonormalized bases
        final Vector3D a = u1.normalize();
        final Vector3D b = a.orthogonal(u2);
        final Vector3D c = a.cross(b);

        final Vector3D d = v1.normalize();
        final Vector3D e = d.orthogonal(v2);
        final Vector3D f = d.cross(e);

        // create an orthogonal rotation matrix representing the change of basis; this matrix will
        // be the multiplication of the matrix composed of the column vectors d, e, f and the
        // inverse of the matrix composed of the column vectors a, b, c (which is simply the transpose since
        // it's orthogonal).
        final double m00 = Vectors.linearCombination(d.getX(), a.getX(), e.getX(), b.getX(), f.getX(), c.getX());
        final double m01 = Vectors.linearCombination(d.getX(), a.getY(), e.getX(), b.getY(), f.getX(), c.getY());
        final double m02 = Vectors.linearCombination(d.getX(), a.getZ(), e.getX(), b.getZ(), f.getX(), c.getZ());

        final double m10 = Vectors.linearCombination(d.getY(), a.getX(), e.getY(), b.getX(), f.getY(), c.getX());
        final double m11 = Vectors.linearCombination(d.getY(), a.getY(), e.getY(), b.getY(), f.getY(), c.getY());
        final double m12 = Vectors.linearCombination(d.getY(), a.getZ(), e.getY(), b.getZ(), f.getY(), c.getZ());

        final double m20 = Vectors.linearCombination(d.getZ(), a.getX(), e.getZ(), b.getX(), f.getZ(), c.getX());
        final double m21 = Vectors.linearCombination(d.getZ(), a.getY(), e.getZ(), b.getY(), f.getZ(), c.getY());
        final double m22 = Vectors.linearCombination(d.getZ(), a.getZ(), e.getZ(), b.getZ(), f.getZ(), c.getZ());


        return orthogonalRotationMatrixToQuaternion(
                    m00, m01, m02,
                    m10, m11, m12,
                    m20, m21, m22
                );
    }","  public void test2()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(725.2653110863354, 725.2653110863354, 725.2653110863354, 725.2653110863354);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.identity();
      QuaternionRotation quaternionRotation2 = quaternionRotation0.multiply(quaternionRotation1);
      Vector3D vector3D0 = Vector3D.of((-2317.7763229164), (-2317.7763229164), (-2317.7763229164));
      Vector3D vector3D1 = quaternionRotation2.getAxis();
      QuaternionRotation quaternionRotation3 = QuaternionRotation.createBasisRotation(vector3D0, vector3D1, vector3D1, vector3D1);
}"
3456,"    public double getAngle() {
        return 2 * Math.acos(quat.getW());
    }","  public void test3()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(725.2653110863354, 725.2653110863354, 725.2653110863354, 725.2653110863354);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.identity();
      QuaternionRotation quaternionRotation2 = quaternionRotation0.multiply(quaternionRotation1);
      Vector3D vector3D0 = Vector3D.of((-2317.7763229164), (-2317.7763229164), (-2317.7763229164));
      Vector3D vector3D1 = quaternionRotation2.getAxis();
      QuaternionRotation quaternionRotation3 = QuaternionRotation.createBasisRotation(vector3D0, vector3D1, vector3D1, vector3D1);
}"
3457,"    public double getAngle() {
        return 2 * Math.acos(quat.getW());
    }","  public void test4()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of((-369.1892755180724), 2206.88023156283, (-369.1892755180724));
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D_Unit0, vector3D0);
}"
3458,"    public double getAngle() {
        return 2 * Math.acos(quat.getW());
    }","  public void test5()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 0.5;
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D.Unit vector3D_Unit0 = affineTransformMatrix3D0.applyDirection(vector3D0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, (-1679.07558962));
      quaternionRotation0.toMatrix();
}"
3459,"    public double getAngle() {
        return 2 * Math.acos(quat.getW());
    }","  public void test6()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-983.8942155006455);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D.Unit vector3D_Unit0 = affineTransformMatrix3D0.applyDirection(vector3D0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, (-1679.07558962));
      quaternionRotation0.toMatrix();
}"
3460,"    public AffineTransformMatrix3D toMatrix() {

        final double qw = quat.getW();
        final double qx = quat.getX();
        final double qy = quat.getY();
        final double qz = quat.getZ();

        // pre-calculate products that we'll need
        final double xx = qx * qx;
        final double xy = qx * qy;
        final double xz = qx * qz;
        final double xw = qx * qw;

        final double yy = qy * qy;
        final double yz = qy * qz;
        final double yw = qy * qw;

        final double zz = qz * qz;
        final double zw = qz * qw;

        final double m00 = 1.0 - (2.0 * (yy + zz));
        final double m01 = 2.0 * (xy - zw);
        final double m02 = 2.0 * (xz + yw);
        final double m03 = 0.0;

        final double m10 = 2.0 * (xy + zw);
        final double m11 = 1.0 - (2.0 * (xx + zz));
        final double m12 = 2.0 * (yz - xw);
        final double m13 = 0.0;

        final double m20 = 2.0 * (xz - yw);
        final double m21 = 2.0 * (yz + xw);
        final double m22 = 1.0 - (2.0 * (xx + yy));
        final double m23 = 0.0;

        return AffineTransformMatrix3D.of(
                    m00, m01, m02, m03,
                    m10, m11, m12, m13,
                    m20, m21, m22, m23
                );
    }","  public void test7()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(quaternion0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = quaternionRotation0.toMatrix();
}"
3461,"    public AxisAngleSequence toRelativeAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.RELATIVE, axes);
    }","  public void test8()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
}"
3462,"    public AxisAngleSequence toRelativeAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.RELATIVE, axes);
    }","  public void test9()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
}"
3463,"    public AxisAngleSequence toRelativeAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.RELATIVE, axes);
    }","  public void test10()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
}"
3464,"    public AxisAngleSequence toRelativeAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.RELATIVE, axes);
    }","  public void test11()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.MINUS_Y;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D_Unit1, vector3D_Unit2);
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
}"
3465,"    public AxisAngleSequence toRelativeAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.RELATIVE, axes);
    }","  public void test12()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.MINUS_Y;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D_Unit1, vector3D_Unit2);
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
}"
3466,"    public AxisAngleSequence toRelativeAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.RELATIVE, axes);
    }","  public void test13()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.MINUS_Y;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D_Unit1, vector3D_Unit2);
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
}"
3467,"    public AxisAngleSequence toAxisAngleSequence(final AxisReferenceFrame frame, final AxisSequence axes) {
        if (frame == null) {
            throw new IllegalArgumentException(""Axis reference frame cannot be null"");
        }
        if (axes == null) {
            throw new IllegalArgumentException(""Axis sequence cannot be null"");
        }

        final double[] angles = getAngles(frame, axes);

        return new AxisAngleSequence(frame, axes, angles[0], angles[1], angles[2]);
    }","  public void test14()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.ABSOLUTE;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
}"
3468,"    public AxisAngleSequence toAxisAngleSequence(final AxisReferenceFrame frame, final AxisSequence axes) {
        if (frame == null) {
            throw new IllegalArgumentException(""Axis reference frame cannot be null"");
        }
        if (axes == null) {
            throw new IllegalArgumentException(""Axis sequence cannot be null"");
        }

        final double[] angles = getAngles(frame, axes);

        return new AxisAngleSequence(frame, axes, angles[0], angles[1], angles[2]);
    }","  public void test15()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.ABSOLUTE;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
}"
3469,"    public AxisAngleSequence toAxisAngleSequence(final AxisReferenceFrame frame, final AxisSequence axes) {
        if (frame == null) {
            throw new IllegalArgumentException(""Axis reference frame cannot be null"");
        }
        if (axes == null) {
            throw new IllegalArgumentException(""Axis sequence cannot be null"");
        }

        final double[] angles = getAngles(frame, axes);

        return new AxisAngleSequence(frame, axes, angles[0], angles[1], angles[2]);
    }","  public void test16()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.ABSOLUTE;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
}"
3470,"    public AxisAngleSequence toAxisAngleSequence(final AxisReferenceFrame frame, final AxisSequence axes) {
        if (frame == null) {
            throw new IllegalArgumentException(""Axis reference frame cannot be null"");
        }
        if (axes == null) {
            throw new IllegalArgumentException(""Axis sequence cannot be null"");
        }

        final double[] angles = getAngles(frame, axes);

        return new AxisAngleSequence(frame, axes, angles[0], angles[1], angles[2]);
    }","  public void test17()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-983.8942155006455);
      doubleArray0[2] = 0.5;
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D.Unit vector3D_Unit0 = affineTransformMatrix3D0.applyDirection(vector3D0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, (-1679.07558962));
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZXY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
}"
3471,"    public AxisAngleSequence toAxisAngleSequence(final AxisReferenceFrame frame, final AxisSequence axes) {
        if (frame == null) {
            throw new IllegalArgumentException(""Axis reference frame cannot be null"");
        }
        if (axes == null) {
            throw new IllegalArgumentException(""Axis sequence cannot be null"");
        }

        final double[] angles = getAngles(frame, axes);

        return new AxisAngleSequence(frame, axes, angles[0], angles[1], angles[2]);
    }","  public void test18()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-983.8942155006455);
      doubleArray0[2] = 0.5;
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D.Unit vector3D_Unit0 = affineTransformMatrix3D0.applyDirection(vector3D0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, (-1679.07558962));
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZXY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
}"
3472,"    public AxisAngleSequence toAxisAngleSequence(final AxisReferenceFrame frame, final AxisSequence axes) {
        if (frame == null) {
            throw new IllegalArgumentException(""Axis reference frame cannot be null"");
        }
        if (axes == null) {
            throw new IllegalArgumentException(""Axis sequence cannot be null"");
        }

        final double[] angles = getAngles(frame, axes);

        return new AxisAngleSequence(frame, axes, angles[0], angles[1], angles[2]);
    }","  public void test19()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-983.8942155006455);
      doubleArray0[2] = 0.5;
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D.Unit vector3D_Unit0 = affineTransformMatrix3D0.applyDirection(vector3D0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, (-1679.07558962));
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZXY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
}"
3473,"    public AxisAngleSequence toAxisAngleSequence(final AxisReferenceFrame frame, final AxisSequence axes) {
        if (frame == null) {
            throw new IllegalArgumentException(""Axis reference frame cannot be null"");
        }
        if (axes == null) {
            throw new IllegalArgumentException(""Axis sequence cannot be null"");
        }

        final double[] angles = getAngles(frame, axes);

        return new AxisAngleSequence(frame, axes, angles[0], angles[1], angles[2]);
    }","  public void test20()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence1 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence1);
}"
3474,"    public AxisAngleSequence toAxisAngleSequence(final AxisReferenceFrame frame, final AxisSequence axes) {
        if (frame == null) {
            throw new IllegalArgumentException(""Axis reference frame cannot be null"");
        }
        if (axes == null) {
            throw new IllegalArgumentException(""Axis sequence cannot be null"");
        }

        final double[] angles = getAngles(frame, axes);

        return new AxisAngleSequence(frame, axes, angles[0], angles[1], angles[2]);
    }","  public void test21()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence1 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence1);
}"
3475,"    public AxisAngleSequence toAxisAngleSequence(final AxisReferenceFrame frame, final AxisSequence axes) {
        if (frame == null) {
            throw new IllegalArgumentException(""Axis reference frame cannot be null"");
        }
        if (axes == null) {
            throw new IllegalArgumentException(""Axis sequence cannot be null"");
        }

        final double[] angles = getAngles(frame, axes);

        return new AxisAngleSequence(frame, axes, angles[0], angles[1], angles[2]);
    }","  public void test22()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence1 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence1);
}"
3476,"    public AxisAngleSequence toAbsoluteAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.ABSOLUTE, axes);
    }","  public void test23()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(1467.09091, 1467.09091, 4185.65842281, 1467.09091);
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAbsoluteAxisAngleSequence(axisSequence0);
}"
3477,"    public AxisAngleSequence toAbsoluteAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.ABSOLUTE, axes);
    }","  public void test24()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(1467.09091, 1467.09091, 4185.65842281, 1467.09091);
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAbsoluteAxisAngleSequence(axisSequence0);
}"
3478,"    public AxisAngleSequence toAbsoluteAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.ABSOLUTE, axes);
    }","  public void test25()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(1467.09091, 1467.09091, 4185.65842281, 1467.09091);
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAbsoluteAxisAngleSequence(axisSequence0);
}"
3479,"    public AxisAngleSequence toAbsoluteAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.ABSOLUTE, axes);
    }","  public void test26()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAbsoluteAxisAngleSequence(axisSequence0);
}"
3480,"    public AxisAngleSequence toAbsoluteAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.ABSOLUTE, axes);
    }","  public void test27()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAbsoluteAxisAngleSequence(axisSequence0);
}"
3481,"    public AxisAngleSequence toAbsoluteAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.ABSOLUTE, axes);
    }","  public void test28()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAbsoluteAxisAngleSequence(axisSequence0);
}"
3482,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof QuaternionRotation)) {
            return false;
        }

        final QuaternionRotation other = (QuaternionRotation) obj;
        return Objects.equals(this.quat, other.quat);
    }","  public void test29()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
      Vector3D vector3D1 = Vector3D.of((-369.1892755180724), 2206.88023156283, (-369.1892755180724));
      QuaternionRotation quaternionRotation1 = QuaternionRotation.createVectorRotation(vector3D0, vector3D1);
      QuaternionRotation quaternionRotation2 = quaternionRotation0.premultiply(quaternionRotation1);
}"
3483,"    public double getAngle() {
        return 2 * Math.acos(quat.getW());
    }","  public void test30()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
      Vector3D vector3D1 = Vector3D.of((-369.1892755180724), 2206.88023156283, (-369.1892755180724));
      QuaternionRotation quaternionRotation1 = QuaternionRotation.createVectorRotation(vector3D0, vector3D1);
      QuaternionRotation quaternionRotation2 = quaternionRotation0.premultiply(quaternionRotation1);
}"
3484,"    public double getAngle() {
        return 2 * Math.acos(quat.getW());
    }","  public void test31()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(2.0, 0.0, 0.0, 0.0);
}"
3485,"    public double getAngle() {
        return 2 * Math.acos(quat.getW());
    }","  public void test32()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 0.0, 2691.66937118266, 0.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      QuaternionRotation quaternionRotation1 = quaternionRotation0.multiply(quaternionRotation0);
}"
3486,"    public QuaternionRotation inverse() {
        return new QuaternionRotation(quat.conjugate());
    }","  public void test33()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      QuaternionRotation quaternionRotation1 = quaternionRotation0.inverse();
}"
3487,"    public Quaternion getQuaternion() {
        return quat;
    }","  public void test34()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
      Quaternion quaternion0 = quaternionRotation0.getQuaternion();
}"
3488,"    public Quaternion getQuaternion() {
        return quat;
    }","  public void test35()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
      Quaternion quaternion0 = quaternionRotation0.getQuaternion();
}"
3489,"    public Quaternion getQuaternion() {
        return quat;
    }","  public void test36()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
      Quaternion quaternion0 = quaternionRotation0.getQuaternion();
}"
3490,"    public Quaternion getQuaternion() {
        return quat;
    }","  public void test37()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
      Quaternion quaternion0 = quaternionRotation0.getQuaternion();
}"
3491,"    public Quaternion getQuaternion() {
        return quat;
    }","  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4.16643938139925;
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(quaternion0);
      Quaternion quaternion1 = quaternionRotation0.getQuaternion();
}"
3492,"    public double getAngle() {
        return 2 * Math.acos(quat.getW());
    }","  public void test39()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, (-2775.549637011024));
      Vector3D vector3D0 = quaternionRotation0.getAxis();
}"
3493,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof QuaternionRotation)) {
            return false;
        }

        final QuaternionRotation other = (QuaternionRotation) obj;
        return Objects.equals(this.quat, other.quat);
    }","  public void test40()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, (-2775.549637011024));
      Vector3D vector3D0 = quaternionRotation0.getAxis();
}"
3494,"    public Vector3D getAxis() {
        final Vector3D axis = Vector3D.of(quat.getX(), quat.getY(), quat.getZ())
                .normalizeOrNull();
        return axis != null ?
                axis :
                Vector3D.Unit.PLUS_X;
    }","  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-0.9999999999);
      doubleArray0[1] = (-0.999999999999998);
      doubleArray0[2] = (-4141.42206190945);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D[] vector3DArray0 = new Vector3D[6];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      vector3DArray0[3] = vector3D0;
      vector3DArray0[4] = vector3D0;
      vector3DArray0[5] = vector3D0;
      Vector3D vector3D1 = Vector3D.centroid(vector3D0, vector3DArray0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D0, vector3D1, vector3D0, vector3D0);
      Vector3D vector3D2 = quaternionRotation0.getAxis();
}"
3495,"    public Vector3D getAxis() {
        final Vector3D axis = Vector3D.of(quat.getX(), quat.getY(), quat.getZ())
                .normalizeOrNull();
        return axis != null ?
                axis :
                Vector3D.Unit.PLUS_X;
    }","  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-0.9999999999);
      doubleArray0[1] = (-0.999999999999998);
      doubleArray0[2] = (-4141.42206190945);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D[] vector3DArray0 = new Vector3D[6];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      vector3DArray0[3] = vector3D0;
      vector3DArray0[4] = vector3D0;
      vector3DArray0[5] = vector3D0;
      Vector3D vector3D1 = Vector3D.centroid(vector3D0, vector3DArray0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D0, vector3D1, vector3D0, vector3D0);
      Vector3D vector3D2 = quaternionRotation0.getAxis();
}"
3496,"    public double getAngle() {
        return 2 * Math.acos(quat.getW());
    }","  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-0.9999999999);
      doubleArray0[1] = (-0.999999999999998);
      doubleArray0[2] = (-4141.42206190945);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D[] vector3DArray0 = new Vector3D[6];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      vector3DArray0[3] = vector3D0;
      vector3DArray0[4] = vector3D0;
      vector3DArray0[5] = vector3D0;
      Vector3D vector3D1 = Vector3D.centroid(vector3D0, vector3DArray0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D0, vector3D1, vector3D0, vector3D0);
      Vector3D vector3D2 = quaternionRotation0.getAxis();
}"
3497,"    public double getAngle() {
        return 2 * Math.acos(quat.getW());
    }","  public void test44()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      double double0 = quaternionRotation0.getAngle();
}"
3498,"    public static QuaternionRotation fromAxisAngle(final Vector3D axis, final double angle) {
        // reference formula:
        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
        final Vector3D normAxis = axis.normalize();

        if (!Double.isFinite(angle)) {
            throw new IllegalArgumentException(""Invalid angle: "" + angle);
        }

        final double halfAngle = 0.5 * angle;
        final double sinHalfAngle = Math.sin(halfAngle);

        final double w = Math.cos(halfAngle);
        final double x = sinHalfAngle * normAxis.getX();
        final double y = sinHalfAngle * normAxis.getY();
        final double z = sinHalfAngle * normAxis.getZ();

        return of(w, x, y, z);
    }","  public void test45()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(0.25, 0.0, (-1317.84), 0.25);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      QuaternionRotation quaternionRotation1 = QuaternionRotation.fromAxisAngle(vector3D0, 0.0);
}"
3499,"    public static QuaternionRotation fromAxisAngle(final Vector3D axis, final double angle) {
        // reference formula:
        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
        final Vector3D normAxis = axis.normalize();

        if (!Double.isFinite(angle)) {
            throw new IllegalArgumentException(""Invalid angle: "" + angle);
        }

        final double halfAngle = 0.5 * angle;
        final double sinHalfAngle = Math.sin(halfAngle);

        final double w = Math.cos(halfAngle);
        final double x = sinHalfAngle * normAxis.getX();
        final double y = sinHalfAngle * normAxis.getY();
        final double z = sinHalfAngle * normAxis.getZ();

        return of(w, x, y, z);
    }","  public void test46()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(0.25, 0.0, (-1317.84), 0.25);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      QuaternionRotation quaternionRotation1 = QuaternionRotation.fromAxisAngle(vector3D0, 0.0);
}"
3500,"    public double getAngle() {
        return 2 * Math.acos(quat.getW());
    }","  public void test47()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(0.25, 0.0, (-1317.84), 0.25);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      QuaternionRotation quaternionRotation1 = QuaternionRotation.fromAxisAngle(vector3D0, 0.0);
}"
3501,"    public static QuaternionRotation fromAxisAngle(final Vector3D axis, final double angle) {
        // reference formula:
        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
        final Vector3D normAxis = axis.normalize();

        if (!Double.isFinite(angle)) {
            throw new IllegalArgumentException(""Invalid angle: "" + angle);
        }

        final double halfAngle = 0.5 * angle;
        final double sinHalfAngle = Math.sin(halfAngle);

        final double w = Math.cos(halfAngle);
        final double x = sinHalfAngle * normAxis.getX();
        final double y = sinHalfAngle * normAxis.getY();
        final double z = sinHalfAngle * normAxis.getZ();

        return of(w, x, y, z);
    }","  public void test48()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(0.25, 0.0, (-1317.84), 0.25);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      QuaternionRotation quaternionRotation1 = QuaternionRotation.fromAxisAngle(vector3D0, 0.0);
}"
3502,"    public Vector3D applyVector(final Vector3D vec) {
        return apply(vec);
    }","  public void test49()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = quaternionRotation0.applyVector(vector3D0);
}"
3503,"    public Vector3D applyVector(final Vector3D vec) {
        return apply(vec);
    }","  public void test50()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(0.0, 0.0, 29.555595878839796, (-596.373114590533));
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(quaternion0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D0 = quaternionRotation1.getAxis();
      Vector3D vector3D1 = quaternionRotation1.applyVector(vector3D0);
}"
3504,"    public Vector3D applyVector(final Vector3D vec) {
        return apply(vec);
    }","  public void test51()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(0.0, 0.0, 29.555595878839796, (-596.373114590533));
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(quaternion0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D0 = quaternionRotation1.getAxis();
      Vector3D vector3D1 = quaternionRotation1.applyVector(vector3D0);
}"
3505,"    public Vector3D applyVector(final Vector3D vec) {
        return apply(vec);
    }","  public void test52()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(0.0, 0.0, 29.555595878839796, (-596.373114590533));
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(quaternion0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D0 = quaternionRotation1.getAxis();
      Vector3D vector3D1 = quaternionRotation1.applyVector(vector3D0);
}"
3506,"    public Vector3D applyVector(final Vector3D vec) {
        return apply(vec);
    }","  public void test53()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(0.0, 0.0, 29.555595878839796, (-596.373114590533));
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(quaternion0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D0 = quaternionRotation1.getAxis();
      Vector3D vector3D1 = quaternionRotation1.applyVector(vector3D0);
}"
3507,"    public Vector3D applyVector(final Vector3D vec) {
        return apply(vec);
    }","  public void test54()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D vector3D0 = quaternionRotation0.applyVector((Vector3D) vector3D_Unit0);
}"
3508,"    public Vector3D applyVector(final Vector3D vec) {
        return apply(vec);
    }","  public void test55()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D vector3D0 = quaternionRotation0.applyVector((Vector3D) vector3D_Unit0);
}"
3509,"    public Vector3D applyVector(final Vector3D vec) {
        return apply(vec);
    }","  public void test56()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D vector3D0 = quaternionRotation0.applyVector((Vector3D) vector3D_Unit0);
}"
3510,"    public Vector3D applyVector(final Vector3D vec) {
        return apply(vec);
    }","  public void test57()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(0.0, 0.0, (-1628.0836292115343), (-1628.0836292115343));
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(276.9, 0.0, 0.0);
      Vector3D vector3D0 = quaternionRotation0.applyVector((Vector3D) vector3D_Unit0);
}"
3511,"    public Vector3D applyVector(final Vector3D vec) {
        return apply(vec);
    }","  public void test58()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(0.0, 0.0, (-1628.0836292115343), (-1628.0836292115343));
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(276.9, 0.0, 0.0);
      Vector3D vector3D0 = quaternionRotation0.applyVector((Vector3D) vector3D_Unit0);
}"
3512,"    public Vector3D apply(final Vector3D v) {
        final double qw = quat.getW();
        final double qx = quat.getX();
        final double qy = quat.getY();
        final double qz = quat.getZ();

        final double x = v.getX();
        final double y = v.getY();
        final double z = v.getZ();

        // calculate the Hamilton product of the quaternion and vector
        final double iw = -(qx * x) - (qy * y) - (qz * z);
        final double ix = (qw * x) + (qy * z) - (qz * y);
        final double iy = (qw * y) + (qz * x) - (qx * z);
        final double iz = (qw * z) + (qx * y) - (qy * x);

        // calculate the Hamilton product of the intermediate vector and
        // the inverse quaternion

        return Vector3D.of(
                    (iw * -qx) + (ix * qw) + (iy * -qz) - (iz * -qy),
                    (iw * -qy) - (ix * -qz) + (iy * qw) + (iz * -qx),
                    (iw * -qz) + (ix * -qy) - (iy * -qx) + (iz * qw)
                );
    }","  public void test59()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D vector3D0 = Vector3D.of(1.5707963267948966, 224.705666389, 1242.28407);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, 2282.555197);
      Vector3D vector3D1 = quaternionRotation0.apply(vector3D0);
}"
3513,"    public Vector3D apply(final Vector3D v) {
        final double qw = quat.getW();
        final double qx = quat.getX();
        final double qy = quat.getY();
        final double qz = quat.getZ();

        final double x = v.getX();
        final double y = v.getY();
        final double z = v.getZ();

        // calculate the Hamilton product of the quaternion and vector
        final double iw = -(qx * x) - (qy * y) - (qz * z);
        final double ix = (qw * x) + (qy * z) - (qz * y);
        final double iy = (qw * y) + (qz * x) - (qx * z);
        final double iz = (qw * z) + (qx * y) - (qy * x);

        // calculate the Hamilton product of the intermediate vector and
        // the inverse quaternion

        return Vector3D.of(
                    (iw * -qx) + (ix * qw) + (iy * -qz) - (iz * -qy),
                    (iw * -qy) - (ix * -qz) + (iy * qw) + (iz * -qx),
                    (iw * -qz) + (ix * -qy) - (iy * -qx) + (iz * qw)
                );
    }","  public void test60()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D vector3D0 = Vector3D.of(1.5707963267948966, 224.705666389, 1242.28407);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, 2282.555197);
      Vector3D vector3D1 = quaternionRotation0.apply(vector3D0);
}"
3514,"    public double getAngle() {
        return 2 * Math.acos(quat.getW());
    }","  public void test61()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 296.552751143022, 296.552751143022, 2070.628);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D0 = Vector3D.NaN;
      quaternionRotation0.apply(vector3D0);
}"
3515,"    public Vector3D apply(final Vector3D v) {
        final double qw = quat.getW();
        final double qx = quat.getX();
        final double qy = quat.getY();
        final double qz = quat.getZ();

        final double x = v.getX();
        final double y = v.getY();
        final double z = v.getZ();

        // calculate the Hamilton product of the quaternion and vector
        final double iw = -(qx * x) - (qy * y) - (qz * z);
        final double ix = (qw * x) + (qy * z) - (qz * y);
        final double iy = (qw * y) + (qz * x) - (qx * z);
        final double iz = (qw * z) + (qx * y) - (qy * x);

        // calculate the Hamilton product of the intermediate vector and
        // the inverse quaternion

        return Vector3D.of(
                    (iw * -qx) + (ix * qw) + (iy * -qz) - (iz * -qy),
                    (iw * -qy) - (ix * -qz) + (iy * qw) + (iz * -qx),
                    (iw * -qz) + (ix * -qy) - (iy * -qx) + (iz * qw)
                );
    }","  public void test62()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D vector3D0 = quaternionRotation0.apply((Vector3D) vector3D_Unit0);
}"
3516,"    public Vector3D apply(final Vector3D v) {
        final double qw = quat.getW();
        final double qx = quat.getX();
        final double qy = quat.getY();
        final double qz = quat.getZ();

        final double x = v.getX();
        final double y = v.getY();
        final double z = v.getZ();

        // calculate the Hamilton product of the quaternion and vector
        final double iw = -(qx * x) - (qy * y) - (qz * z);
        final double ix = (qw * x) + (qy * z) - (qz * y);
        final double iy = (qw * y) + (qz * x) - (qx * z);
        final double iz = (qw * z) + (qx * y) - (qy * x);

        // calculate the Hamilton product of the intermediate vector and
        // the inverse quaternion

        return Vector3D.of(
                    (iw * -qx) + (ix * qw) + (iy * -qz) - (iz * -qy),
                    (iw * -qy) - (ix * -qz) + (iy * qw) + (iz * -qx),
                    (iw * -qz) + (ix * -qy) - (iy * -qx) + (iz * qw)
                );
    }","  public void test63()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D vector3D0 = quaternionRotation0.apply((Vector3D) vector3D_Unit0);
}"
3517,"    public Vector3D apply(final Vector3D v) {
        final double qw = quat.getW();
        final double qx = quat.getX();
        final double qy = quat.getY();
        final double qz = quat.getZ();

        final double x = v.getX();
        final double y = v.getY();
        final double z = v.getZ();

        // calculate the Hamilton product of the quaternion and vector
        final double iw = -(qx * x) - (qy * y) - (qz * z);
        final double ix = (qw * x) + (qy * z) - (qz * y);
        final double iy = (qw * y) + (qz * x) - (qx * z);
        final double iz = (qw * z) + (qx * y) - (qy * x);

        // calculate the Hamilton product of the intermediate vector and
        // the inverse quaternion

        return Vector3D.of(
                    (iw * -qx) + (ix * qw) + (iy * -qz) - (iz * -qy),
                    (iw * -qy) - (ix * -qz) + (iy * qw) + (iz * -qx),
                    (iw * -qz) + (ix * -qy) - (iy * -qx) + (iz * qw)
                );
    }","  public void test64()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D vector3D0 = quaternionRotation0.apply((Vector3D) vector3D_Unit0);
}"
3518,"    public AxisAngleSequence toRelativeAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.RELATIVE, axes);
    }","  public void test65()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      // Undeclared exception!
      try { 
        quaternionRotation0.toRelativeAxisAngleSequence((AxisSequence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Axis sequence cannot be null
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation"", e);
      }
  }"
3519,"    public AxisAngleSequence toAbsoluteAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.ABSOLUTE, axes);
    }","  public void test66()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      // Undeclared exception!
      try { 
        quaternionRotation0.toAbsoluteAxisAngleSequence((AxisSequence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Axis sequence cannot be null
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation"", e);
      }
  }"
3520,"    public DoubleFunction<QuaternionRotation> slerp(final QuaternionRotation end) {
        final Slerp s = new Slerp(getQuaternion(), end.getQuaternion());
        return t -> QuaternionRotation.of(s.apply(t));
    }","  public void test67()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 0.0, 0.0, 0.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      // Undeclared exception!
      try { 
        quaternionRotation0.slerp((QuaternionRotation) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation"", e);
      }
  }"
3521,"    public QuaternionRotation premultiply(final QuaternionRotation q) {
        return q.multiply(this);
    }","  public void test68()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      // Undeclared exception!
      try { 
        quaternionRotation0.premultiply((QuaternionRotation) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation"", e);
      }
  }"
3522,"    public static QuaternionRotation of(final Quaternion quat) {
        return new QuaternionRotation(quat);
    }","  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        QuaternionRotation.of((Quaternion) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3523,"    public static QuaternionRotation of(final Quaternion quat) {
        return new QuaternionRotation(quat);
    }","  public void test70()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      // Undeclared exception!
      try { 
        QuaternionRotation.of(quaternion0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.numbers.quaternion.Quaternion"", e);
      }
  }"
3524,"    public static QuaternionRotation of(final Quaternion quat) {
        return new QuaternionRotation(quat);
    }","  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        QuaternionRotation.of(0.0, 0.0, 0.0, 0.0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.numbers.quaternion.Quaternion"", e);
      }
  }"
3525,"    public QuaternionRotation multiply(final QuaternionRotation q) {
        final Quaternion product = quat.multiply(q.quat);
        return new QuaternionRotation(product);
    }","  public void test72()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of((-5352.828376870025), (-5352.828376870025), (-5352.828376870025), 0.0);
      // Undeclared exception!
      try { 
        quaternionRotation0.multiply((QuaternionRotation) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation"", e);
      }
  }"
3526,"    public static QuaternionRotation fromAxisAngleSequence(final AxisAngleSequence sequence) {
        final AxisSequence axes = sequence.getAxisSequence();

        final QuaternionRotation q1 = fromAxisAngle(axes.getAxis1(), sequence.getAngle1());
        final QuaternionRotation q2 = fromAxisAngle(axes.getAxis2(), sequence.getAngle2());
        final QuaternionRotation q3 = fromAxisAngle(axes.getAxis3(), sequence.getAngle3());

        if (sequence.getReferenceFrame() == AxisReferenceFrame.ABSOLUTE) {
            return q3.multiply(q2).multiply(q1);
        }

        return q1.multiply(q2).multiply(q3);
    }","  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        QuaternionRotation.fromAxisAngleSequence((AxisAngleSequence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation"", e);
      }
  }"
3527,"    public static QuaternionRotation fromAxisAngleSequence(final AxisAngleSequence sequence) {
        final AxisSequence axes = sequence.getAxisSequence();

        final QuaternionRotation q1 = fromAxisAngle(axes.getAxis1(), sequence.getAngle1());
        final QuaternionRotation q2 = fromAxisAngle(axes.getAxis2(), sequence.getAngle2());
        final QuaternionRotation q3 = fromAxisAngle(axes.getAxis3(), sequence.getAngle3());

        if (sequence.getReferenceFrame() == AxisReferenceFrame.ABSOLUTE) {
            return q3.multiply(q2).multiply(q1);
        }

        return q1.multiply(q2).multiply(q3);
    }","  public void test74()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-703.0));
      // Undeclared exception!
      try { 
        QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid angle: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation"", e);
      }
  }"
3528,"    public static QuaternionRotation fromAxisAngle(final Vector3D axis, final double angle) {
        // reference formula:
        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
        final Vector3D normAxis = axis.normalize();

        if (!Double.isFinite(angle)) {
            throw new IllegalArgumentException(""Invalid angle: "" + angle);
        }

        final double halfAngle = 0.5 * angle;
        final double sinHalfAngle = Math.sin(halfAngle);

        final double w = Math.cos(halfAngle);
        final double x = sinHalfAngle * normAxis.getX();
        final double y = sinHalfAngle * normAxis.getY();
        final double z = sinHalfAngle * normAxis.getZ();

        return of(w, x, y, z);
    }","  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        QuaternionRotation.fromAxisAngle((Vector3D) null, (-2349.5174465036866));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation"", e);
      }
  }"
3529,"    public static QuaternionRotation createVectorRotation(final Vector3D u, final Vector3D v) {

        final double normProduct  = Vectors.checkedNorm(u) * Vectors.checkedNorm(v);
        final double dot = u.dot(v);

        if (dot < ANTIPARALLEL_DOT_THRESHOLD * normProduct) {
            // Special case where u1 = -u2:
            // create a pi angle rotation around
            // an arbitrary unit vector orthogonal to u1
            final Vector3D axis = u.orthogonal();

            return of(0,
                      axis.getX(),
                      axis.getY(),
                      axis.getZ());
        }

        // General case:
        // (u1, u2) defines a plane so rotate around the normal of the plane

        // w must equal cos(theta/2); we can calculate this directly using values
        // we already have with the identity cos(theta/2) = sqrt((1 + cos(theta)) / 2)
        // and the fact that dot = norm(u1) * norm(u2) * cos(theta).
        final double w = Math.sqrt(0.5 * (1.0 + (dot / normProduct)));

        // The cross product u1 x u2 must be normalized and then multiplied by
        // sin(theta/2) in order to set the vectorial part of the quaternion. To
        // accomplish this, we'll use the following:
        //
        // 1) norm(a x b) = norm(a) * norm(b) * sin(theta)
        // 2) sin(theta/2) = sqrt((1 - cos(theta)) / 2)
        //
        // Our full, combined normalization and sine half angle term factor then becomes:
        //
        // sqrt((1 - cos(theta)) / 2) / (norm(u1) * norm(u2) * sin(theta))
        //
        // This can be simplified to the expression below.
        final double vectorialScaleFactor = 1.0 / (2.0 * w * normProduct);
        final Vector3D axis = u.cross(v);

        return of(w,
                  vectorialScaleFactor * axis.getX(),
                  vectorialScaleFactor * axis.getY(),
                  vectorialScaleFactor * axis.getZ());
    }","  public void test76()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      // Undeclared exception!
      try { 
        QuaternionRotation.createVectorRotation((Vector3D) null, vector3D_Unit0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
3530,"    public static QuaternionRotation createVectorRotation(final Vector3D u, final Vector3D v) {

        final double normProduct  = Vectors.checkedNorm(u) * Vectors.checkedNorm(v);
        final double dot = u.dot(v);

        if (dot < ANTIPARALLEL_DOT_THRESHOLD * normProduct) {
            // Special case where u1 = -u2:
            // create a pi angle rotation around
            // an arbitrary unit vector orthogonal to u1
            final Vector3D axis = u.orthogonal();

            return of(0,
                      axis.getX(),
                      axis.getY(),
                      axis.getZ());
        }

        // General case:
        // (u1, u2) defines a plane so rotate around the normal of the plane

        // w must equal cos(theta/2); we can calculate this directly using values
        // we already have with the identity cos(theta/2) = sqrt((1 + cos(theta)) / 2)
        // and the fact that dot = norm(u1) * norm(u2) * cos(theta).
        final double w = Math.sqrt(0.5 * (1.0 + (dot / normProduct)));

        // The cross product u1 x u2 must be normalized and then multiplied by
        // sin(theta/2) in order to set the vectorial part of the quaternion. To
        // accomplish this, we'll use the following:
        //
        // 1) norm(a x b) = norm(a) * norm(b) * sin(theta)
        // 2) sin(theta/2) = sqrt((1 - cos(theta)) / 2)
        //
        // Our full, combined normalization and sine half angle term factor then becomes:
        //
        // sqrt((1 - cos(theta)) / 2) / (norm(u1) * norm(u2) * sin(theta))
        //
        // This can be simplified to the expression below.
        final double vectorialScaleFactor = 1.0 / (2.0 * w * normProduct);
        final Vector3D axis = u.cross(v);

        return of(w,
                  vectorialScaleFactor * axis.getX(),
                  vectorialScaleFactor * axis.getY(),
                  vectorialScaleFactor * axis.getZ());
    }","  public void test77()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(6.696928794914171E299, (-2066.357763116722), 6135.232718164232);
      // Undeclared exception!
      try { 
        QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Illegal norm: NaN
         //
         verifyException(""org.apache.commons.numbers.quaternion.Quaternion"", e);
      }
  }"
3531,"    public static QuaternionRotation createVectorRotation(final Vector3D u, final Vector3D v) {

        final double normProduct  = Vectors.checkedNorm(u) * Vectors.checkedNorm(v);
        final double dot = u.dot(v);

        if (dot < ANTIPARALLEL_DOT_THRESHOLD * normProduct) {
            // Special case where u1 = -u2:
            // create a pi angle rotation around
            // an arbitrary unit vector orthogonal to u1
            final Vector3D axis = u.orthogonal();

            return of(0,
                      axis.getX(),
                      axis.getY(),
                      axis.getZ());
        }

        // General case:
        // (u1, u2) defines a plane so rotate around the normal of the plane

        // w must equal cos(theta/2); we can calculate this directly using values
        // we already have with the identity cos(theta/2) = sqrt((1 + cos(theta)) / 2)
        // and the fact that dot = norm(u1) * norm(u2) * cos(theta).
        final double w = Math.sqrt(0.5 * (1.0 + (dot / normProduct)));

        // The cross product u1 x u2 must be normalized and then multiplied by
        // sin(theta/2) in order to set the vectorial part of the quaternion. To
        // accomplish this, we'll use the following:
        //
        // 1) norm(a x b) = norm(a) * norm(b) * sin(theta)
        // 2) sin(theta/2) = sqrt((1 - cos(theta)) / 2)
        //
        // Our full, combined normalization and sine half angle term factor then becomes:
        //
        // sqrt((1 - cos(theta)) / 2) / (norm(u1) * norm(u2) * sin(theta))
        //
        // This can be simplified to the expression below.
        final double vectorialScaleFactor = 1.0 / (2.0 * w * normProduct);
        final Vector3D axis = u.cross(v);

        return of(w,
                  vectorialScaleFactor * axis.getX(),
                  vectorialScaleFactor * axis.getY(),
                  vectorialScaleFactor * axis.getZ());
    }","  public void test78()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
3532,"    public static QuaternionRotation createBasisRotation(final Vector3D u1, final Vector3D u2,
            final Vector3D v1, final Vector3D v2) {

        // calculate orthonormalized bases
        final Vector3D a = u1.normalize();
        final Vector3D b = a.orthogonal(u2);
        final Vector3D c = a.cross(b);

        final Vector3D d = v1.normalize();
        final Vector3D e = d.orthogonal(v2);
        final Vector3D f = d.cross(e);

        // create an orthogonal rotation matrix representing the change of basis; this matrix will
        // be the multiplication of the matrix composed of the column vectors d, e, f and the
        // inverse of the matrix composed of the column vectors a, b, c (which is simply the transpose since
        // it's orthogonal).
        final double m00 = Vectors.linearCombination(d.getX(), a.getX(), e.getX(), b.getX(), f.getX(), c.getX());
        final double m01 = Vectors.linearCombination(d.getX(), a.getY(), e.getX(), b.getY(), f.getX(), c.getY());
        final double m02 = Vectors.linearCombination(d.getX(), a.getZ(), e.getX(), b.getZ(), f.getX(), c.getZ());

        final double m10 = Vectors.linearCombination(d.getY(), a.getX(), e.getY(), b.getX(), f.getY(), c.getX());
        final double m11 = Vectors.linearCombination(d.getY(), a.getY(), e.getY(), b.getY(), f.getY(), c.getY());
        final double m12 = Vectors.linearCombination(d.getY(), a.getZ(), e.getY(), b.getZ(), f.getY(), c.getZ());

        final double m20 = Vectors.linearCombination(d.getZ(), a.getX(), e.getZ(), b.getX(), f.getZ(), c.getX());
        final double m21 = Vectors.linearCombination(d.getZ(), a.getY(), e.getZ(), b.getY(), f.getZ(), c.getY());
        final double m22 = Vectors.linearCombination(d.getZ(), a.getZ(), e.getZ(), b.getZ(), f.getZ(), c.getZ());


        return orthogonalRotationMatrixToQuaternion(
                    m00, m01, m02,
                    m10, m11, m12,
                    m20, m21, m22
                );
    }","  public void test79()  throws Throwable  {
      // Undeclared exception!
      try { 
        QuaternionRotation.createBasisRotation((Vector3D) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation"", e);
      }
  }"
3533,"    public Vector3D applyVector(final Vector3D vec) {
        return apply(vec);
    }","  public void test80()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      // Undeclared exception!
      try { 
        quaternionRotation0.applyVector((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation"", e);
      }
  }"
3534,"    public Vector3D apply(final Vector3D v) {
        final double qw = quat.getW();
        final double qx = quat.getX();
        final double qy = quat.getY();
        final double qz = quat.getZ();

        final double x = v.getX();
        final double y = v.getY();
        final double z = v.getZ();

        // calculate the Hamilton product of the quaternion and vector
        final double iw = -(qx * x) - (qy * y) - (qz * z);
        final double ix = (qw * x) + (qy * z) - (qz * y);
        final double iy = (qw * y) + (qz * x) - (qx * z);
        final double iz = (qw * z) + (qx * y) - (qy * x);

        // calculate the Hamilton product of the intermediate vector and
        // the inverse quaternion

        return Vector3D.of(
                    (iw * -qx) + (ix * qw) + (iy * -qz) - (iz * -qy),
                    (iw * -qy) - (ix * -qz) + (iy * qw) + (iz * -qx),
                    (iw * -qz) + (ix * -qy) - (iy * -qx) + (iz * qw)
                );
    }","  public void test81()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(79.268, (-597.9171676360878), (-1.0), (-375.76059));
      // Undeclared exception!
      try { 
        quaternionRotation0.apply((Vector3D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation"", e);
      }
  }"
3535,"    public double getAngle() {
        return 2 * Math.acos(quat.getW());
    }","  public void test82()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-983.8942155006455);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D.Unit vector3D_Unit0 = affineTransformMatrix3D0.applyDirection(vector3D0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, (-1679.07558962));
      Vector3D vector3D1 = quaternionRotation0.apply(vector3D0);
}"
3536,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof QuaternionRotation)) {
            return false;
        }

        final QuaternionRotation other = (QuaternionRotation) obj;
        return Objects.equals(this.quat, other.quat);
    }","  public void test83()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-983.8942155006455);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D.Unit vector3D_Unit0 = affineTransformMatrix3D0.applyDirection(vector3D0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, (-1679.07558962));
      Vector3D vector3D1 = quaternionRotation0.apply(vector3D0);
}"
3537,"    public AxisAngleSequence toAxisAngleSequence(final AxisReferenceFrame frame, final AxisSequence axes) {
        if (frame == null) {
            throw new IllegalArgumentException(""Axis reference frame cannot be null"");
        }
        if (axes == null) {
            throw new IllegalArgumentException(""Axis sequence cannot be null"");
        }

        final double[] angles = getAngles(frame, axes);

        return new AxisAngleSequence(frame, axes, angles[0], angles[1], angles[2]);
    }","  public void test84()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
}"
3538,"    public AxisAngleSequence toAxisAngleSequence(final AxisReferenceFrame frame, final AxisSequence axes) {
        if (frame == null) {
            throw new IllegalArgumentException(""Axis reference frame cannot be null"");
        }
        if (axes == null) {
            throw new IllegalArgumentException(""Axis sequence cannot be null"");
        }

        final double[] angles = getAngles(frame, axes);

        return new AxisAngleSequence(frame, axes, angles[0], angles[1], angles[2]);
    }","  public void test85()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
}"
3539,"    public AxisAngleSequence toAxisAngleSequence(final AxisReferenceFrame frame, final AxisSequence axes) {
        if (frame == null) {
            throw new IllegalArgumentException(""Axis reference frame cannot be null"");
        }
        if (axes == null) {
            throw new IllegalArgumentException(""Axis sequence cannot be null"");
        }

        final double[] angles = getAngles(frame, axes);

        return new AxisAngleSequence(frame, axes, angles[0], angles[1], angles[2]);
    }","  public void test86()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
}"
3540,"    public boolean preservesOrientation() {
        return true;
    }","  public void test87()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(quaternion0);
      QuaternionRotation quaternionRotation1 = quaternionRotation0.multiply(quaternionRotation0);
}"
3541,"    public double getAngle() {
        return 2 * Math.acos(quat.getW());
    }","  public void test88()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Quaternion quaternion0 = quaternionRotation0.getQuaternion();
      QuaternionRotation quaternionRotation1 = QuaternionRotation.of(quaternion0);
}"
3542,"    public Quaternion getQuaternion() {
        return quat;
    }","  public void test89()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      QuaternionRotation quaternionRotation1 = quaternionRotation0.inverse();
      Quaternion quaternion0 = quaternionRotation1.getQuaternion();
}"
3543,"    public double getAngle() {
        return 2 * Math.acos(quat.getW());
    }","  public void test90()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-0.9999999999);
      doubleArray0[1] = (-0.999999999999998);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D[] vector3DArray0 = new Vector3D[6];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      vector3DArray0[3] = vector3D0;
      vector3DArray0[4] = vector3D0;
      vector3DArray0[5] = vector3D0;
      Vector3D vector3D1 = Vector3D.centroid(vector3D0, vector3DArray0);
      Vector3D vector3D2 = vector3D1.negate();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D2, vector3D0, vector3D0, vector3D0);
}"
3544,"    public double getAngle() {
        return 2 * Math.acos(quat.getW());
    }","  public void test91()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-0.9999999999);
      doubleArray0[1] = (-0.999999999999998);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D vector3D1 = vector3D0.negate();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D1, vector3D0, vector3D0, vector3D0);
}"
3545,"    public double getAngle() {
        return 2 * Math.acos(quat.getW());
    }","  public void test92()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-0.9999999999);
      doubleArray0[1] = (-0.999999999999998);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D vector3D1 = Vector3D.of((-0.999999999999998), 0.99, (-0.999999999999998));
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D1, vector3D1, vector3D0, vector3D0);
}"
3546,"    public static QuaternionRotation fromAxisAngle(final Vector3D axis, final double angle) {
        // reference formula:
        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
        final Vector3D normAxis = axis.normalize();

        if (!Double.isFinite(angle)) {
            throw new IllegalArgumentException(""Invalid angle: "" + angle);
        }

        final double halfAngle = 0.5 * angle;
        final double sinHalfAngle = Math.sin(halfAngle);

        final double w = Math.cos(halfAngle);
        final double x = sinHalfAngle * normAxis.getX();
        final double y = sinHalfAngle * normAxis.getY();
        final double z = sinHalfAngle * normAxis.getZ();

        return of(w, x, y, z);
    }","  public void test93()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(0.25, 0.0, (-1317.84), 0.25);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      // Undeclared exception!
      try { 
        QuaternionRotation.fromAxisAngle(vector3D0, Double.NaN);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid angle: NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation"", e);
      }
  }"
3547,"    public AxisAngleSequence toRelativeAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.RELATIVE, axes);
    }","  public void test94()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Y;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D_Unit0, vector3D_Unit1);
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
}"
3548,"    public AxisAngleSequence toRelativeAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.RELATIVE, axes);
    }","  public void test95()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Y;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D_Unit0, vector3D_Unit1);
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
}"
3549,"    public AxisAngleSequence toAbsoluteAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.ABSOLUTE, axes);
    }","  public void test96()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D vector3D0 = quaternionRotation0.apply((Vector3D) vector3D_Unit1);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.createVectorRotation(vector3D0, vector3D_Unit0);
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation1.toAbsoluteAxisAngleSequence(axisSequence0);
}"
3550,"    public AxisAngleSequence toAbsoluteAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.ABSOLUTE, axes);
    }","  public void test97()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D vector3D0 = quaternionRotation0.apply((Vector3D) vector3D_Unit1);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.createVectorRotation(vector3D0, vector3D_Unit0);
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation1.toAbsoluteAxisAngleSequence(axisSequence0);
}"
3551,"    public AxisAngleSequence toAbsoluteAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.ABSOLUTE, axes);
    }","  public void test98()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D vector3D0 = quaternionRotation0.apply((Vector3D) vector3D_Unit1);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.createVectorRotation(vector3D0, vector3D_Unit0);
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation1.toAbsoluteAxisAngleSequence(axisSequence0);
}"
3552,"    public AxisAngleSequence toAbsoluteAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.ABSOLUTE, axes);
    }","  public void test99()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D vector3D0 = quaternionRotation0.apply((Vector3D) vector3D_Unit1);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.createVectorRotation(vector3D0, vector3D_Unit0);
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation1.toAbsoluteAxisAngleSequence(axisSequence0);
}"
3553,"    public AxisAngleSequence toAbsoluteAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.ABSOLUTE, axes);
    }","  public void test100()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D vector3D0 = quaternionRotation0.apply((Vector3D) vector3D_Unit1);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.createVectorRotation(vector3D0, vector3D_Unit0);
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation1.toAbsoluteAxisAngleSequence(axisSequence0);
}"
3554,"    public AxisAngleSequence toRelativeAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.RELATIVE, axes);
    }","  public void test101()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.MINUS_Y;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D_Unit1, vector3D_Unit2);
      AxisSequence axisSequence0 = AxisSequence.ZXY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
}"
3555,"    public AxisAngleSequence toRelativeAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.RELATIVE, axes);
    }","  public void test102()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.MINUS_Y;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D_Unit1, vector3D_Unit2);
      AxisSequence axisSequence0 = AxisSequence.ZXY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
}"
3556,"    public AxisAngleSequence toRelativeAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.RELATIVE, axes);
    }","  public void test103()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(1495.9182619552287, 1495.9182619552287, 1495.9182619552287, 1495.9182619552287);
      AxisSequence axisSequence0 = AxisSequence.YZX;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
}"
3557,"    public AxisAngleSequence toRelativeAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.RELATIVE, axes);
    }","  public void test104()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(1495.9182619552287, 1495.9182619552287, 1495.9182619552287, 1495.9182619552287);
      AxisSequence axisSequence0 = AxisSequence.YZX;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
}"
3558,"    public AxisAngleSequence toRelativeAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.RELATIVE, axes);
    }","  public void test105()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(1495.9182619552287, 1495.9182619552287, 1495.9182619552287, 1495.9182619552287);
      AxisSequence axisSequence0 = AxisSequence.YZX;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
}"
3559,"    public Vector3D getAxis() {
        final Vector3D axis = Vector3D.of(quat.getX(), quat.getY(), quat.getZ())
                .normalizeOrNull();
        return axis != null ?
                axis :
                Vector3D.Unit.PLUS_X;
    }","  public void test106()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D vector3D0 = quaternionRotation0.getAxis();
}"
3560,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof QuaternionRotation)) {
            return false;
        }

        final QuaternionRotation other = (QuaternionRotation) obj;
        return Objects.equals(this.quat, other.quat);
    }","  public void test107()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      QuaternionRotation quaternionRotation1 = QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
      boolean boolean0 = quaternionRotation0.equals(quaternionRotation1);
}"
3561,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof QuaternionRotation)) {
            return false;
        }

        final QuaternionRotation other = (QuaternionRotation) obj;
        return Objects.equals(this.quat, other.quat);
    }","  public void test108()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      boolean boolean0 = quaternionRotation0.equals(quaternionRotation0);
}"
3562,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof QuaternionRotation)) {
            return false;
        }

        final QuaternionRotation other = (QuaternionRotation) obj;
        return Objects.equals(this.quat, other.quat);
    }","  public void test109()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      boolean boolean0 = quaternionRotation0.equals(""[1.0 0.0 0.0 0.0]"");
}"
3563,"    public AxisAngleSequence toAxisAngleSequence(final AxisReferenceFrame frame, final AxisSequence axes) {
        if (frame == null) {
            throw new IllegalArgumentException(""Axis reference frame cannot be null"");
        }
        if (axes == null) {
            throw new IllegalArgumentException(""Axis sequence cannot be null"");
        }

        final double[] angles = getAngles(frame, axes);

        return new AxisAngleSequence(frame, axes, angles[0], angles[1], angles[2]);
    }","  public void test110()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.ABSOLUTE;
      // Undeclared exception!
      try { 
        quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, (AxisSequence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Axis sequence cannot be null
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation"", e);
      }
  }"
3564,"    public AxisAngleSequence toAxisAngleSequence(final AxisReferenceFrame frame, final AxisSequence axes) {
        if (frame == null) {
            throw new IllegalArgumentException(""Axis reference frame cannot be null"");
        }
        if (axes == null) {
            throw new IllegalArgumentException(""Axis sequence cannot be null"");
        }

        final double[] angles = getAngles(frame, axes);

        return new AxisAngleSequence(frame, axes, angles[0], angles[1], angles[2]);
    }","  public void test111()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      AxisSequence axisSequence0 = AxisSequence.XZX;
      // Undeclared exception!
      try { 
        quaternionRotation0.toAxisAngleSequence((AxisReferenceFrame) null, axisSequence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Axis reference frame cannot be null
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation"", e);
      }
  }"
3565,"    public int hashCode() {
        return quat.hashCode();
    }","  public void test112()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      quaternionRotation0.hashCode();
  }"
3566,"    public static QuaternionRotation createBasisRotation(final Vector3D u1, final Vector3D u2,
            final Vector3D v1, final Vector3D v2) {

        // calculate orthonormalized bases
        final Vector3D a = u1.normalize();
        final Vector3D b = a.orthogonal(u2);
        final Vector3D c = a.cross(b);

        final Vector3D d = v1.normalize();
        final Vector3D e = d.orthogonal(v2);
        final Vector3D f = d.cross(e);

        // create an orthogonal rotation matrix representing the change of basis; this matrix will
        // be the multiplication of the matrix composed of the column vectors d, e, f and the
        // inverse of the matrix composed of the column vectors a, b, c (which is simply the transpose since
        // it's orthogonal).
        final double m00 = Vectors.linearCombination(d.getX(), a.getX(), e.getX(), b.getX(), f.getX(), c.getX());
        final double m01 = Vectors.linearCombination(d.getX(), a.getY(), e.getX(), b.getY(), f.getX(), c.getY());
        final double m02 = Vectors.linearCombination(d.getX(), a.getZ(), e.getX(), b.getZ(), f.getX(), c.getZ());

        final double m10 = Vectors.linearCombination(d.getY(), a.getX(), e.getY(), b.getX(), f.getY(), c.getX());
        final double m11 = Vectors.linearCombination(d.getY(), a.getY(), e.getY(), b.getY(), f.getY(), c.getY());
        final double m12 = Vectors.linearCombination(d.getY(), a.getZ(), e.getY(), b.getZ(), f.getY(), c.getZ());

        final double m20 = Vectors.linearCombination(d.getZ(), a.getX(), e.getZ(), b.getX(), f.getZ(), c.getX());
        final double m21 = Vectors.linearCombination(d.getZ(), a.getY(), e.getZ(), b.getY(), f.getZ(), c.getY());
        final double m22 = Vectors.linearCombination(d.getZ(), a.getZ(), e.getZ(), b.getZ(), f.getZ(), c.getZ());


        return orthogonalRotationMatrixToQuaternion(
                    m00, m01, m02,
                    m10, m11, m12,
                    m20, m21, m22
                );
    }","  public void test113()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      // Undeclared exception!
      try { 
        QuaternionRotation.createBasisRotation(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
3567,"    public QuaternionRotation premultiply(final QuaternionRotation q) {
        return q.multiply(this);
    }","  public void test114()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      QuaternionRotation quaternionRotation1 = quaternionRotation0.premultiply(quaternionRotation0);
}"
3568,"    public AxisAngleSequence toRelativeAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.RELATIVE, axes);
    }","  public void test115()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
}"
3569,"    public AxisAngleSequence toRelativeAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.RELATIVE, axes);
    }","  public void test116()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
}"
3570,"    public AxisAngleSequence toRelativeAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.RELATIVE, axes);
    }","  public void test117()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
}"
3571,"    public AxisAngleSequence toAbsoluteAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.ABSOLUTE, axes);
    }","  public void test118()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAbsoluteAxisAngleSequence(axisSequence0);
}"
3572,"    public AxisAngleSequence toAbsoluteAxisAngleSequence(final AxisSequence axes) {
        return toAxisAngleSequence(AxisReferenceFrame.ABSOLUTE, axes);
    }","  public void test119()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAbsoluteAxisAngleSequence(axisSequence0);
}"
3573,"    public double getAngle() {
        return 2 * Math.acos(quat.getW());
    }","  public void test120()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 3038.2640057273097, 3038.2640057273097, 3038.2640057273097);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      quaternionRotation0.slerp(quaternionRotation0);
}"
3574,"    public boolean preservesOrientation() {
        return true;
    }","  public void test121()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      boolean boolean0 = quaternionRotation0.preservesOrientation();
}"
3575,"    public String toString() {
        return quat.toString();
    }","  public void test122()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      String string0 = quaternionRotation0.toString();
}"
3576,"    public static QuaternionRotation fromAxisAngleSequence(final AxisAngleSequence sequence) {
        final AxisSequence axes = sequence.getAxisSequence();

        final QuaternionRotation q1 = fromAxisAngle(axes.getAxis1(), sequence.getAngle1());
        final QuaternionRotation q2 = fromAxisAngle(axes.getAxis2(), sequence.getAngle2());
        final QuaternionRotation q3 = fromAxisAngle(axes.getAxis3(), sequence.getAngle3());

        if (sequence.getReferenceFrame() == AxisReferenceFrame.ABSOLUTE) {
            return q3.multiply(q2).multiply(q1);
        }

        return q1.multiply(q2).multiply(q3);
    }","  public void test123()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 3038.2640057273097, 3038.2640057273097, 3038.2640057273097);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAbsoluteAxisAngleSequence(axisSequence0);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence1);
}"
3577,"    public double getAngle() {
        return 2 * Math.acos(quat.getW());
    }","  public void test124()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 3038.2640057273097, 3038.2640057273097, 3038.2640057273097);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAbsoluteAxisAngleSequence(axisSequence0);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence1);
}"
3578,"    public double getAngle() {
        return 2 * Math.acos(quat.getW());
    }","  public void test125()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      double double0 = quaternionRotation0.getAngle();
}"
3579,"    public static Sphere from(final Vector3D center, final double radius, final Precision.DoubleEquivalence precision) {
        return new Sphere(center, radius, precision);
    }","  public void test0()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      // Undeclared exception!
      try { 
        Sphere.from(vector3D_Unit0, 1276.85, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.AbstractNSphere"", e);
      }
  }"
3580,"    public static Sphere from(final Vector3D center, final double radius, final Precision.DoubleEquivalence precision) {
        return new Sphere(center, radius, precision);
    }","  public void test1()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      // Undeclared exception!
      try { 
        Sphere.from(vector3D0, Double.POSITIVE_INFINITY, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal radius: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.AbstractNSphere"", e);
      }
  }"
3581,"    public static Parallelepiped axisAligned(final Vector3D a, final Vector3D b,
            final Precision.DoubleEquivalence precision) {

        final double minX = Math.min(a.getX(), b.getX());
        final double maxX = Math.max(a.getX(), b.getX());

        final double minY = Math.min(a.getY(), b.getY());
        final double maxY = Math.max(a.getY(), b.getY());

        final double minZ = Math.min(a.getZ(), b.getZ());
        final double maxZ = Math.max(a.getZ(), b.getZ());

        final double xDelta = maxX - minX;
        final double yDelta = maxY - minY;
        final double zDelta = maxZ - minZ;

        final Vector3D scale = Vector3D.of(xDelta, yDelta, zDelta);
        final Vector3D position = Vector3D.of(
                    (0.5 * xDelta) + minX,
                    (0.5 * yDelta) + minY,
                    (0.5 * zDelta) + minZ
                );

        return builder(precision)
                .setScale(scale)
                .setPosition(position)
                .build();
    }","  public void test0()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      // Undeclared exception!
      try { 
        Parallelepiped.axisAligned(vector3D0, vector3D0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.shape.Parallelepiped"", e);
      }
  }"
3582,"    public static Parallelepiped axisAligned(final Vector3D a, final Vector3D b,
            final Precision.DoubleEquivalence precision) {

        final double minX = Math.min(a.getX(), b.getX());
        final double maxX = Math.max(a.getX(), b.getX());

        final double minY = Math.min(a.getY(), b.getY());
        final double maxY = Math.max(a.getY(), b.getY());

        final double minZ = Math.min(a.getZ(), b.getZ());
        final double maxZ = Math.max(a.getZ(), b.getZ());

        final double xDelta = maxX - minX;
        final double yDelta = maxY - minY;
        final double zDelta = maxZ - minZ;

        final Vector3D scale = Vector3D.of(xDelta, yDelta, zDelta);
        final Vector3D position = Vector3D.of(
                    (0.5 * xDelta) + minX,
                    (0.5 * yDelta) + minY,
                    (0.5 * zDelta) + minZ
                );

        return builder(precision)
                .setScale(scale)
                .setPosition(position)
                .build();
    }","  public void test1()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 3637.52, 3637.52, 0.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      Vector3D vector3D1 = quaternionRotation0.applyVector(vector3D0);
      // Undeclared exception!
      try { 
        Parallelepiped.axisAligned(vector3D1, vector3D0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.shape.Parallelepiped"", e);
      }
  }"
3583,"    public static Parallelepiped fromTransformedUnitCube(final Transform<Vector3D> transform,
            final Precision.DoubleEquivalence precision) {

        final List<Vector3D> vertices = UNIT_CUBE_VERTICES.stream()
                .map(transform)
                .collect(Collectors.toList());
        final boolean reverse = !transform.preservesOrientation();

        // check lengths in each dimension
        ensureNonZeroSideLength(vertices.get(0), vertices.get(1), precision);
        ensureNonZeroSideLength(vertices.get(1), vertices.get(2), precision);
        ensureNonZeroSideLength(vertices.get(0), vertices.get(4), precision);

        final List<PlaneConvexSubset> boundaries = Arrays.asList(
                    // planes orthogonal to x
                    createFace(0, 4, 7, 3, vertices, reverse, precision),
                    createFace(1, 2, 6, 5, vertices, reverse, precision),

                    // planes orthogonal to y
                    createFace(0, 1, 5, 4, vertices, reverse, precision),
                    createFace(3, 7, 6, 2, vertices, reverse, precision),

                    // planes orthogonal to z
                    createFace(0, 3, 2, 1, vertices, reverse, precision),
                    createFace(4, 5, 6, 7, vertices, reverse, precision)
                );

        return new Parallelepiped(boundaries);
    }","  public void test2()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale((-0.999999999999998));
      // Undeclared exception!
      try { 
        Parallelepiped.fromTransformedUnitCube(affineTransformMatrix3D0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.shape.Parallelepiped"", e);
      }
  }"
3584,"    public static Parallelepiped fromTransformedUnitCube(final Transform<Vector3D> transform,
            final Precision.DoubleEquivalence precision) {

        final List<Vector3D> vertices = UNIT_CUBE_VERTICES.stream()
                .map(transform)
                .collect(Collectors.toList());
        final boolean reverse = !transform.preservesOrientation();

        // check lengths in each dimension
        ensureNonZeroSideLength(vertices.get(0), vertices.get(1), precision);
        ensureNonZeroSideLength(vertices.get(1), vertices.get(2), precision);
        ensureNonZeroSideLength(vertices.get(0), vertices.get(4), precision);

        final List<PlaneConvexSubset> boundaries = Arrays.asList(
                    // planes orthogonal to x
                    createFace(0, 4, 7, 3, vertices, reverse, precision),
                    createFace(1, 2, 6, 5, vertices, reverse, precision),

                    // planes orthogonal to y
                    createFace(0, 1, 5, 4, vertices, reverse, precision),
                    createFace(3, 7, 6, 2, vertices, reverse, precision),

                    // planes orthogonal to z
                    createFace(0, 3, 2, 1, vertices, reverse, precision),
                    createFace(4, 5, 6, 7, vertices, reverse, precision)
                );

        return new Parallelepiped(boundaries);
    }","  public void test3()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(quaternion0);
      // Undeclared exception!
      try { 
        Parallelepiped.fromTransformedUnitCube(quaternionRotation0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.shape.Parallelepiped"", e);
      }
  }"
3585,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test4()  throws Throwable  {
      Parallelepiped.Builder parallelepiped_Builder0 = Parallelepiped.builder((Precision.DoubleEquivalence) null);
      Vector3D vector3D0 = Vector3D.ZERO;
      Parallelepiped.Builder parallelepiped_Builder1 = parallelepiped_Builder0.setPosition(vector3D0);
}"
3586,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test5()  throws Throwable  {
      Parallelepiped.Builder parallelepiped_Builder0 = Parallelepiped.builder((Precision.DoubleEquivalence) null);
      Parallelepiped.Builder parallelepiped_Builder1 = parallelepiped_Builder0.setScale(3.0, 0.0, 0.5);
}"
3587,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test6()  throws Throwable  {
      Parallelepiped.Builder parallelepiped_Builder0 = Parallelepiped.builder((Precision.DoubleEquivalence) null);
      Parallelepiped.Builder parallelepiped_Builder1 = parallelepiped_Builder0.setScale((Vector3D) null);
}"
3588,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test7()  throws Throwable  {
      Parallelepiped.Builder parallelepiped_Builder0 = Parallelepiped.builder((Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        parallelepiped_Builder0.build();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.shape.Parallelepiped"", e);
      }
  }"
3589,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test8()  throws Throwable  {
      Parallelepiped.Builder parallelepiped_Builder0 = Parallelepiped.builder((Precision.DoubleEquivalence) null);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Parallelepiped.Builder parallelepiped_Builder1 = parallelepiped_Builder0.setRotation(quaternionRotation0);
}"
3590,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test9()  throws Throwable  {
      Parallelepiped.Builder parallelepiped_Builder0 = Parallelepiped.builder((Precision.DoubleEquivalence) null);
      Parallelepiped.Builder parallelepiped_Builder1 = parallelepiped_Builder0.setScale(0.5);
}"
3591,"    public static Parallelepiped unitCube(final Precision.DoubleEquivalence precision) {
        return fromTransformedUnitCube(AffineTransformMatrix3D.identity(), precision);
    }","  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parallelepiped.unitCube((Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.threed.shape.Parallelepiped"", e);
      }
  }"
3592,"    public static SimpleTriangleMesh from(final Vector3D[] vertices, final int[][] faces,
                                          final Precision.DoubleEquivalence precision) {
        return from(Arrays.asList(vertices), Arrays.asList(faces), precision);
    }","  public void test0()  throws Throwable  {
      ConvexVolume convexVolume0 = ConvexVolume.full();
      // Undeclared exception!
      try { 
        SimpleTriangleMesh.from((BoundarySource3D) convexVolume0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Precision context must not be null
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
3593,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimpleTriangleMesh.builder((Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Precision context must not be null
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
3594,"    public static SimpleTriangleMesh from(final Vector3D[] vertices, final int[][] faces,
                                          final Precision.DoubleEquivalence precision) {
        return from(Arrays.asList(vertices), Arrays.asList(faces), precision);
    }","  public void test2()  throws Throwable  {
      int[][] intArray0 = new int[6][2];
      Vector3D[] vector3DArray0 = new Vector3D[20];
      // Undeclared exception!
      try { 
        SimpleTriangleMesh.from(vector3DArray0, intArray0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Precision context must not be null
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
3595,"    public static SimpleTriangleMesh from(final Vector3D[] vertices, final int[][] faces,
                                          final Precision.DoubleEquivalence precision) {
        return from(Arrays.asList(vertices), Arrays.asList(faces), precision);
    }","  public void test3()  throws Throwable  {
      LinkedHashSet<int[]> linkedHashSet0 = new LinkedHashSet<int[]>();
      // Undeclared exception!
      try { 
        SimpleTriangleMesh.from((Collection<Vector3D>) null, (Collection<int[]>) linkedHashSet0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Precision context must not be null
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
3596,"    public Bounds2D getBounds(final BoundarySource2D src) {

        final Bounds2D.Builder builder = Bounds2D.builder();

        try (Stream<LineConvexSubset> stream = src.boundaryStream()) {
            final Iterator<LineConvexSubset> it = stream.iterator();

            LineConvexSubset boundary;
            while (it.hasNext()) {
                boundary = it.next();

                if (boundary.isInfinite()) {
                    return null; // break out early
                }

                builder.add(boundary.getStartPoint());
                builder.add(boundary.getEndPoint());
            }
        }

        return builder.hasBounds() ?
                builder.build() :
                null;
    }","  public void test0()  throws Throwable  {
      BoundarySourceBoundsBuilder2D boundarySourceBoundsBuilder2D0 = new BoundarySourceBoundsBuilder2D();
      // Undeclared exception!
      try { 
        boundarySourceBoundsBuilder2D0.getBounds((BoundarySource2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.BoundarySourceBoundsBuilder2D"", e);
      }
  }"
3597,"    public Bounds2D getBounds(final BoundarySource2D src) {

        final Bounds2D.Builder builder = Bounds2D.builder();

        try (Stream<LineConvexSubset> stream = src.boundaryStream()) {
            final Iterator<LineConvexSubset> it = stream.iterator();

            LineConvexSubset boundary;
            while (it.hasNext()) {
                boundary = it.next();

                if (boundary.isInfinite()) {
                    return null; // break out early
                }

                builder.add(boundary.getStartPoint());
                builder.add(boundary.getEndPoint());
            }
        }

        return builder.hasBounds() ?
                builder.build() :
                null;
    }","  public void test1()  throws Throwable  {
      LineConvexSubset[] lineConvexSubsetArray0 = new LineConvexSubset[1];
      BoundarySourceBoundsBuilder2D boundarySourceBoundsBuilder2D0 = new BoundarySourceBoundsBuilder2D();
      BoundarySource2D boundarySource2D0 = BoundarySource2D.of(lineConvexSubsetArray0);
      // Undeclared exception!
      try { 
        boundarySourceBoundsBuilder2D0.getBounds(boundarySource2D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.BoundarySourceBoundsBuilder2D"", e);
      }
  }"
3598,"    public Bounds2D getBounds(final BoundarySource2D src) {

        final Bounds2D.Builder builder = Bounds2D.builder();

        try (Stream<LineConvexSubset> stream = src.boundaryStream()) {
            final Iterator<LineConvexSubset> it = stream.iterator();

            LineConvexSubset boundary;
            while (it.hasNext()) {
                boundary = it.next();

                if (boundary.isInfinite()) {
                    return null; // break out early
                }

                builder.add(boundary.getStartPoint());
                builder.add(boundary.getEndPoint());
            }
        }

        return builder.hasBounds() ?
                builder.build() :
                null;
    }","  public void test2()  throws Throwable  {
      BoundarySourceBoundsBuilder2D boundarySourceBoundsBuilder2D0 = new BoundarySourceBoundsBuilder2D();
      LineConvexSubset[] lineConvexSubsetArray0 = new LineConvexSubset[1];
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Line line0 = new Line(vector2D_Unit0, (-0.16624677914734143), (Precision.DoubleEquivalence) null);
      ReverseRay reverseRay0 = line0.reverseRayTo((Vector2D) vector2D_Unit0);
      lineConvexSubsetArray0[0] = (LineConvexSubset) reverseRay0;
      LinePath linePath0 = LinePath.from(lineConvexSubsetArray0);
      Bounds2D bounds2D0 = boundarySourceBoundsBuilder2D0.getBounds(linePath0);
}"
3599,"    public Bounds2D getBounds(final BoundarySource2D src) {

        final Bounds2D.Builder builder = Bounds2D.builder();

        try (Stream<LineConvexSubset> stream = src.boundaryStream()) {
            final Iterator<LineConvexSubset> it = stream.iterator();

            LineConvexSubset boundary;
            while (it.hasNext()) {
                boundary = it.next();

                if (boundary.isInfinite()) {
                    return null; // break out early
                }

                builder.add(boundary.getStartPoint());
                builder.add(boundary.getEndPoint());
            }
        }

        return builder.hasBounds() ?
                builder.build() :
                null;
    }","  public void test3()  throws Throwable  {
      BoundarySourceBoundsBuilder2D boundarySourceBoundsBuilder2D0 = new BoundarySourceBoundsBuilder2D();
      HashSet<LineConvexSubset> hashSet0 = new HashSet<LineConvexSubset>();
      BoundarySource2D boundarySource2D0 = BoundarySource2D.of((Collection<LineConvexSubset>) hashSet0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1421.9912, precision_DoubleEquivalence0);
      Segment segment0 = line0.segment(0.0, 0.0);
      hashSet0.add(segment0);
      Bounds2D bounds2D0 = boundarySourceBoundsBuilder2D0.getBounds(boundarySource2D0);
}"
3600,"    public Bounds2D getBounds(final BoundarySource2D src) {

        final Bounds2D.Builder builder = Bounds2D.builder();

        try (Stream<LineConvexSubset> stream = src.boundaryStream()) {
            final Iterator<LineConvexSubset> it = stream.iterator();

            LineConvexSubset boundary;
            while (it.hasNext()) {
                boundary = it.next();

                if (boundary.isInfinite()) {
                    return null; // break out early
                }

                builder.add(boundary.getStartPoint());
                builder.add(boundary.getEndPoint());
            }
        }

        return builder.hasBounds() ?
                builder.build() :
                null;
    }","  public void test4()  throws Throwable  {
      BoundarySourceBoundsBuilder2D boundarySourceBoundsBuilder2D0 = new BoundarySourceBoundsBuilder2D();
      HashSet<LineConvexSubset> hashSet0 = new HashSet<LineConvexSubset>();
      BoundarySource2D boundarySource2D0 = BoundarySource2D.of((Collection<LineConvexSubset>) hashSet0);
      Bounds2D bounds2D0 = boundarySourceBoundsBuilder2D0.getBounds(boundarySource2D0);
}"
3601,"    protected Split<LineConvexSubset> splitOnIntersection(final Line splitter, final Vector2D intersection) {
        final Line line = getLine();
        final Precision.DoubleEquivalence splitterPrecision = splitter.getPrecision();

        final int endCmp = splitterPrecision.compare(splitter.offset(endPoint), 0.0);
        final boolean pointsTowardPlus = splitter.getOffsetDirection().dot(line.getDirection()) >= 0.0;

        if (pointsTowardPlus && endCmp < 1) {
            // entirely on minus side
            return new Split<>(this, null);
        } else if (!pointsTowardPlus && endCmp > -1) {
            // entirely on plus side
            return new Split<>(null, this);
        }

        // we're going to be split
        final Segment splitSeg = new Segment(line, intersection, endPoint);
        final ReverseRay splitRevRay = new ReverseRay(line, intersection);

        final LineConvexSubset minus = (endCmp > 0) ? splitRevRay : splitSeg;
        final LineConvexSubset plus = (endCmp > 0) ? splitSeg : splitRevRay;

        return new Split<>(minus, plus);
    }","  public void test0()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(3155, (-2636)).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      ReverseRay reverseRay0 = new ReverseRay(line0, vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = reverseRay0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 2208.6685478535, precision_DoubleEquivalence1);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation((-3266.01052021452));
      ReverseRay reverseRay1 = line1.reverseRayTo((-1518.250995968609));
      ReverseRay reverseRay2 = reverseRay1.transform(affineTransformMatrix2D0);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line1);
      reverseRay2.getNonIntersectingSplitResult(line1, lineSpanningSubset0);
      Split<LineConvexSubset> split0 = reverseRay2.splitOnIntersection(line1, vector2D_Unit0);
}"
3602,"    protected Split<LineConvexSubset> splitOnIntersection(final Line splitter, final Vector2D intersection) {
        final Line line = getLine();
        final Precision.DoubleEquivalence splitterPrecision = splitter.getPrecision();

        final int endCmp = splitterPrecision.compare(splitter.offset(endPoint), 0.0);
        final boolean pointsTowardPlus = splitter.getOffsetDirection().dot(line.getDirection()) >= 0.0;

        if (pointsTowardPlus && endCmp < 1) {
            // entirely on minus side
            return new Split<>(this, null);
        } else if (!pointsTowardPlus && endCmp > -1) {
            // entirely on plus side
            return new Split<>(null, this);
        }

        // we're going to be split
        final Segment splitSeg = new Segment(line, intersection, endPoint);
        final ReverseRay splitRevRay = new ReverseRay(line, intersection);

        final LineConvexSubset minus = (endCmp > 0) ? splitRevRay : splitSeg;
        final LineConvexSubset plus = (endCmp > 0) ? splitSeg : splitRevRay;

        return new Split<>(minus, plus);
    }","  public void test1()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      ReverseRay reverseRay0 = new ReverseRay(line0, vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = reverseRay0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 2208.6685478535, precision_DoubleEquivalence1);
      Line line2 = line1.reverse();
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation((-3266.01052021452));
      Line line3 = line2.transform(affineTransformMatrix2D0);
      ReverseRay reverseRay1 = line3.reverseRayTo((-1518.250995968609));
      Split<LineConvexSubset> split0 = reverseRay1.splitOnIntersection(line1, vector2D_Unit0);
}"
3603,"    public double getSubspaceEnd() {
        return getLine().abscissa(endPoint);
    }","  public void test2()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(line0).abscissa(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      ReverseRay reverseRay0 = new ReverseRay(line0, vector2D_Unit0);
      double double0 = reverseRay0.getSubspaceEnd();
}"
3604,"    public double getSubspaceEnd() {
        return getLine().abscissa(endPoint);
    }","  public void test3()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Line line0 = new Line(vector2D_Unit0, (-1.0), (Precision.DoubleEquivalence) null);
      ReverseRay reverseRay0 = line0.reverseRayTo(1.0);
      double double0 = reverseRay0.getSubspaceEnd();
}"
3605,"    public double getSubspaceEnd() {
        return getLine().abscissa(endPoint);
    }","  public void test4()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      ReverseRay reverseRay0 = new ReverseRay(line0, vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = reverseRay0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 0.5, precision_DoubleEquivalence1);
      Line line2 = line1.reverse();
      ReverseRay reverseRay1 = line2.reverseRayTo((Vector2D) vector2D_Unit0);
      double double0 = reverseRay1.getSubspaceEnd();
}"
3606,"    public Vector2D getEndPoint() {
        return endPoint;
    }","  public void test5()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      ReverseRay reverseRay0 = new ReverseRay(line0, vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = reverseRay0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, Double.NEGATIVE_INFINITY, precision_DoubleEquivalence1);
      ReverseRay reverseRay1 = line1.reverseRayTo(1.0);
      Vector2D vector2D0 = reverseRay1.getEndPoint();
}"
3607,"    public Vector2D getEndPoint() {
        return endPoint;
    }","  public void test6()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      ReverseRay reverseRay0 = new ReverseRay(line0, vector2D_Unit0);
      Vector2D vector2D0 = reverseRay0.getEndPoint();
}"
3608,"    public Vector2D getEndPoint() {
        return endPoint;
    }","  public void test7()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Line line0 = new Line(vector2D_Unit0, 12.0, (Precision.DoubleEquivalence) null);
      ReverseRay reverseRay0 = new ReverseRay(line0, vector2D_Unit0);
      Vector2D vector2D0 = reverseRay0.getEndPoint();
}"
3609,"    public Vector2D getEndPoint() {
        return endPoint;
    }","  public void test8()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      ReverseRay reverseRay0 = new ReverseRay(line0, vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = reverseRay0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 2208.6685478535, precision_DoubleEquivalence1);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation((-3266.01052021452));
      ReverseRay reverseRay1 = line1.reverseRayTo((-1518.250995968609));
      ReverseRay reverseRay2 = reverseRay1.transform(affineTransformMatrix2D0);
      Vector2D vector2D0 = reverseRay2.getEndPoint();
}"
3610,"    double closestAbscissa(final double abscissa) {
        return Math.min(getSubspaceEnd(), abscissa);
    }","  public void test9()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Line line0 = new Line(vector2D_Unit0, (-2072.2759731881), (Precision.DoubleEquivalence) null);
      ReverseRay reverseRay0 = line0.reverseRayTo((Vector2D) vector2D_Unit0);
      double double0 = reverseRay0.closestAbscissa(6.283185307179586);
}"
3611,"    double closestAbscissa(final double abscissa) {
        return Math.min(getSubspaceEnd(), abscissa);
    }","  public void test10()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Line line0 = new Line(vector2D_Unit0, (-1.0), (Precision.DoubleEquivalence) null);
      ReverseRay reverseRay0 = line0.reverseRayTo(1.0);
      double double0 = reverseRay0.closestAbscissa((-1.0));
}"
3612,"    public ReverseRay transform(final Transform<Vector2D> transform) {
        final Line tLine = getLine().transform(transform);
        final Vector2D tEnd = transform.apply(getEndPoint());

        return new ReverseRay(tLine, tEnd);
    }","  public void test11()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Line line0 = new Line(vector2D_Unit0, (-2072.2759731881), (Precision.DoubleEquivalence) null);
      ReverseRay reverseRay0 = line0.reverseRayTo((Vector2D) vector2D_Unit0);
      Rotation2D rotation2D0 = Rotation2D.of(1450.0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation((Vector2D) vector2D_Unit0, rotation2D0);
      // Undeclared exception!
      try { 
        reverseRay0.transform(affineTransformMatrix2D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
3613,"    public boolean isFull() {
        return false;
    }","  public void test12()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(true, false, true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      doReturn((Line) null).when(line0).transform(nullable(org.apache.commons.geometry.core.Transform.class));
      ReverseRay reverseRay0 = new ReverseRay(line0, vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = reverseRay0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 2208.6685478535, precision_DoubleEquivalence1);
      Line line2 = line1.reverse();
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation((-3266.01052021452));
      line2.transform(affineTransformMatrix2D0);
      ReverseRay reverseRay1 = line1.reverseRayTo((double) 3155);
      ReverseRay reverseRay2 = reverseRay1.transform(affineTransformMatrix2D0);
      reverseRay2.splitOnIntersection(line1, vector2D_Unit0);
      double double0 = (-886.47163676);
      reverseRay1.classifyAbscissa(double0);
      ReverseRay reverseRay3 = reverseRay0.transform(affineTransformMatrix2D0);
}"
3614,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName())
            .append(""[direction= "")
            .append(getLine().getDirection())
            .append("", endPoint= "")
            .append(getEndPoint())
            .append(']');

        return sb.toString();
    }","  public void test13()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      ReverseRay reverseRay0 = new ReverseRay((Line) null, vector2D_Unit0);
      // Undeclared exception!
      try { 
        reverseRay0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.ReverseRay"", e);
      }
  }"
3615,"    protected Split<LineConvexSubset> splitOnIntersection(final Line splitter, final Vector2D intersection) {
        final Line line = getLine();
        final Precision.DoubleEquivalence splitterPrecision = splitter.getPrecision();

        final int endCmp = splitterPrecision.compare(splitter.offset(endPoint), 0.0);
        final boolean pointsTowardPlus = splitter.getOffsetDirection().dot(line.getDirection()) >= 0.0;

        if (pointsTowardPlus && endCmp < 1) {
            // entirely on minus side
            return new Split<>(this, null);
        } else if (!pointsTowardPlus && endCmp > -1) {
            // entirely on plus side
            return new Split<>(null, this);
        }

        // we're going to be split
        final Segment splitSeg = new Segment(line, intersection, endPoint);
        final ReverseRay splitRevRay = new ReverseRay(line, intersection);

        final LineConvexSubset minus = (endCmp > 0) ? splitRevRay : splitSeg;
        final LineConvexSubset plus = (endCmp > 0) ? splitSeg : splitRevRay;

        return new Split<>(minus, plus);
    }","  public void test14()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      ReverseRay reverseRay0 = new ReverseRay((Line) null, vector2D0);
      // Undeclared exception!
      try { 
        reverseRay0.splitOnIntersection((Line) null, vector2D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.ReverseRay"", e);
      }
  }"
3616,"    public Ray reverse() {
        return new Ray(getLine().reverse(), endPoint);
    }","  public void test15()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      ReverseRay reverseRay0 = new ReverseRay((Line) null, vector2D_Unit0);
      // Undeclared exception!
      try { 
        reverseRay0.reverse();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.ReverseRay"", e);
      }
  }"
3617,"    double closestAbscissa(final double abscissa) {
        return Math.min(getSubspaceEnd(), abscissa);
    }","  public void test16()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn((Line) null).when(line0).reverse();
      Ray ray0 = new Ray(line0, vector2D_Unit0);
      ReverseRay reverseRay0 = ray0.reverse();
      // Undeclared exception!
      try { 
        reverseRay0.closestAbscissa(2208.6685478535);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.ReverseRay"", e);
      }
  }"
3618,"    RegionLocation classifyAbscissa(final double abscissa) {
        final int cmp = getPrecision().compare(abscissa, getSubspaceEnd());
        if (cmp < 0) {
            return RegionLocation.INSIDE;
        } else if (cmp == 0) {
            return RegionLocation.BOUNDARY;
        }

        return RegionLocation.OUTSIDE;
    }","  public void test17()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = new Line(vector2D_Unit0, 262.0, (Precision.DoubleEquivalence) null);
      ReverseRay reverseRay0 = new ReverseRay(line0, vector2D_Unit0);
      // Undeclared exception!
      try { 
        reverseRay0.classifyAbscissa(1234.0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.ReverseRay"", e);
      }
  }"
3619,"    public Vector2D getEndPoint() {
        return endPoint;
    }","  public void test18()  throws Throwable  {
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      ReverseRay reverseRay0 = new ReverseRay(line0, (Vector2D) null);
      Vector2D vector2D0 = reverseRay0.getEndPoint();
}"
3620,"    public double getSubspaceEnd() {
        return getLine().abscissa(endPoint);
    }","  public void test19()  throws Throwable  {
      ReverseRay reverseRay0 = new ReverseRay((Line) null, (Vector2D) null);
      // Undeclared exception!
      try { 
        reverseRay0.getSubspaceEnd();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.ReverseRay"", e);
      }
  }"
3621,"    protected Split<LineConvexSubset> splitOnIntersection(final Line splitter, final Vector2D intersection) {
        final Line line = getLine();
        final Precision.DoubleEquivalence splitterPrecision = splitter.getPrecision();

        final int endCmp = splitterPrecision.compare(splitter.offset(endPoint), 0.0);
        final boolean pointsTowardPlus = splitter.getOffsetDirection().dot(line.getDirection()) >= 0.0;

        if (pointsTowardPlus && endCmp < 1) {
            // entirely on minus side
            return new Split<>(this, null);
        } else if (!pointsTowardPlus && endCmp > -1) {
            // entirely on plus side
            return new Split<>(null, this);
        }

        // we're going to be split
        final Segment splitSeg = new Segment(line, intersection, endPoint);
        final ReverseRay splitRevRay = new ReverseRay(line, intersection);

        final LineConvexSubset minus = (endCmp > 0) ? splitRevRay : splitSeg;
        final LineConvexSubset plus = (endCmp > 0) ? splitSeg : splitRevRay;

        return new Split<>(minus, plus);
    }","  public void test20()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(3, (-257)).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-37.806049916318635), precision_DoubleEquivalence0);
      ReverseRay reverseRay0 = line0.reverseRayTo((-37.806049916318635));
      Split<LineConvexSubset> split0 = reverseRay0.splitOnIntersection(line0, vector2D_Unit0);
}"
3622,"    protected Split<LineConvexSubset> splitOnIntersection(final Line splitter, final Vector2D intersection) {
        final Line line = getLine();
        final Precision.DoubleEquivalence splitterPrecision = splitter.getPrecision();

        final int endCmp = splitterPrecision.compare(splitter.offset(endPoint), 0.0);
        final boolean pointsTowardPlus = splitter.getOffsetDirection().dot(line.getDirection()) >= 0.0;

        if (pointsTowardPlus && endCmp < 1) {
            // entirely on minus side
            return new Split<>(this, null);
        } else if (!pointsTowardPlus && endCmp > -1) {
            // entirely on plus side
            return new Split<>(null, this);
        }

        // we're going to be split
        final Segment splitSeg = new Segment(line, intersection, endPoint);
        final ReverseRay splitRevRay = new ReverseRay(line, intersection);

        final LineConvexSubset minus = (endCmp > 0) ? splitRevRay : splitSeg;
        final LineConvexSubset plus = (endCmp > 0) ? splitSeg : splitRevRay;

        return new Split<>(minus, plus);
    }","  public void test21()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(3, (-257)).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-37.806049916318635), precision_DoubleEquivalence0);
      ReverseRay reverseRay0 = line0.reverseRayTo((-37.806049916318635));
      Split<LineConvexSubset> split0 = reverseRay0.splitOnIntersection(line0, vector2D_Unit0);
      Split<LineConvexSubset> split1 = reverseRay0.splitOnIntersection(line0, vector2D_Unit0);
}"
3623,"    protected Split<LineConvexSubset> splitOnIntersection(final Line splitter, final Vector2D intersection) {
        final Line line = getLine();
        final Precision.DoubleEquivalence splitterPrecision = splitter.getPrecision();

        final int endCmp = splitterPrecision.compare(splitter.offset(endPoint), 0.0);
        final boolean pointsTowardPlus = splitter.getOffsetDirection().dot(line.getDirection()) >= 0.0;

        if (pointsTowardPlus && endCmp < 1) {
            // entirely on minus side
            return new Split<>(this, null);
        } else if (!pointsTowardPlus && endCmp > -1) {
            // entirely on plus side
            return new Split<>(null, this);
        }

        // we're going to be split
        final Segment splitSeg = new Segment(line, intersection, endPoint);
        final ReverseRay splitRevRay = new ReverseRay(line, intersection);

        final LineConvexSubset minus = (endCmp > 0) ? splitRevRay : splitSeg;
        final LineConvexSubset plus = (endCmp > 0) ? splitSeg : splitRevRay;

        return new Split<>(minus, plus);
    }","  public void test22()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      doReturn(vector2D_Unit0, (Vector2D.Unit) null).when(line0).getDirection();
      ReverseRay reverseRay0 = new ReverseRay(line0, vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = reverseRay0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 799.86371, precision_DoubleEquivalence1);
      Rotation2D rotation2D0 = Rotation2D.of((-1));
      Line line2 = line1.transform(rotation2D0);
      Split<LineConvexSubset> split0 = reverseRay0.splitOnIntersection(line2, vector2D_Unit0);
}"
3624,"    protected Split<LineConvexSubset> splitOnIntersection(final Line splitter, final Vector2D intersection) {
        final Line line = getLine();
        final Precision.DoubleEquivalence splitterPrecision = splitter.getPrecision();

        final int endCmp = splitterPrecision.compare(splitter.offset(endPoint), 0.0);
        final boolean pointsTowardPlus = splitter.getOffsetDirection().dot(line.getDirection()) >= 0.0;

        if (pointsTowardPlus && endCmp < 1) {
            // entirely on minus side
            return new Split<>(this, null);
        } else if (!pointsTowardPlus && endCmp > -1) {
            // entirely on plus side
            return new Split<>(null, this);
        }

        // we're going to be split
        final Segment splitSeg = new Segment(line, intersection, endPoint);
        final ReverseRay splitRevRay = new ReverseRay(line, intersection);

        final LineConvexSubset minus = (endCmp > 0) ? splitRevRay : splitSeg;
        final LineConvexSubset plus = (endCmp > 0) ? splitSeg : splitRevRay;

        return new Split<>(minus, plus);
    }","  public void test23()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(21, (-917041297)).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-20.292112414166454), precision_DoubleEquivalence0);
      ReverseRay reverseRay0 = line0.reverseRayTo((Vector2D) vector2D_Unit0);
      Split<LineConvexSubset> split0 = reverseRay0.splitOnIntersection(line0, vector2D_Unit0);
}"
3625,"    RegionLocation classifyAbscissa(final double abscissa) {
        final int cmp = getPrecision().compare(abscissa, getSubspaceEnd());
        if (cmp < 0) {
            return RegionLocation.INSIDE;
        } else if (cmp == 0) {
            return RegionLocation.BOUNDARY;
        }

        return RegionLocation.OUTSIDE;
    }","  public void test24()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(21, (-917041297)).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-20.292112414166454), precision_DoubleEquivalence0);
      ReverseRay reverseRay0 = line0.reverseRayTo((Vector2D) vector2D_Unit0);
      Split<LineConvexSubset> split0 = reverseRay0.splitOnIntersection(line0, vector2D_Unit0);
      RegionLocation regionLocation0 = reverseRay0.classifyAbscissa(21);
}"
3626,"    public boolean isFinite() {
        return false;
    }","  public void test25()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-20.292112414166454), precision_DoubleEquivalence0);
      ReverseRay reverseRay0 = line0.reverseRayTo((Vector2D) vector2D_Unit0);
      boolean boolean0 = reverseRay0.isFinite();
}"
3627,"    public Ray reverse() {
        return new Ray(getLine().reverse(), endPoint);
    }","  public void test26()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-20.292112414166454), precision_DoubleEquivalence0);
      ReverseRay reverseRay0 = line0.reverseRayTo((Vector2D) vector2D_Unit0);
      Ray ray0 = reverseRay0.reverse();
}"
3628,"    public double getSize() {
        return Double.POSITIVE_INFINITY;
    }","  public void test27()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-37.806049916318635), precision_DoubleEquivalence0);
      ReverseRay reverseRay0 = line0.reverseRayTo((-37.806049916318635));
      double double0 = reverseRay0.getSize();
}"
3629,"    double closestAbscissa(final double abscissa) {
        return Math.min(getSubspaceEnd(), abscissa);
    }","  public void test28()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(line0).abscissa(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      ReverseRay reverseRay0 = new ReverseRay(line0, vector2D_Unit0);
      double double0 = reverseRay0.closestAbscissa(3155);
}"
3630,"    public Vector2D getStartPoint() {
        return null;
    }","  public void test29()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-20.292112414166454), precision_DoubleEquivalence0);
      ReverseRay reverseRay0 = line0.reverseRayTo((Vector2D) vector2D_Unit0);
      Vector2D vector2D0 = reverseRay0.getStartPoint();
}"
3631,"    public double getSubspaceStart() {
        return Double.NEGATIVE_INFINITY;
    }","  public void test30()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      ReverseRay reverseRay0 = new ReverseRay(line0, vector2D_Unit0);
      double double0 = reverseRay0.getSubspaceStart();
}"
3632,"    RegionLocation classifyAbscissa(final double abscissa) {
        final int cmp = getPrecision().compare(abscissa, getSubspaceEnd());
        if (cmp < 0) {
            return RegionLocation.INSIDE;
        } else if (cmp == 0) {
            return RegionLocation.BOUNDARY;
        }

        return RegionLocation.OUTSIDE;
    }","  public void test31()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(21).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-20.292112414166454), precision_DoubleEquivalence0);
      ReverseRay reverseRay0 = line0.reverseRayTo((Vector2D) vector2D_Unit0);
      RegionLocation regionLocation0 = reverseRay0.classifyAbscissa(21);
}"
3633,"    public boolean isFull() {
        return false;
    }","  public void test32()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      ReverseRay reverseRay0 = new ReverseRay(line0, vector2D_Unit0);
      boolean boolean0 = reverseRay0.isFull();
}"
3634,"    public Vector2D getCentroid() {
        return null;
    }","  public void test33()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-20.292112414166454), precision_DoubleEquivalence0);
      ReverseRay reverseRay0 = line0.reverseRayTo((Vector2D) vector2D_Unit0);
      Vector2D vector2D0 = reverseRay0.getCentroid();
}"
3635,"    public Bounds2D getBounds() {
        return null; // infinite; no bounds
    }","  public void test34()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-20.292112414166454), precision_DoubleEquivalence0);
      ReverseRay reverseRay0 = line0.reverseRayTo((Vector2D) vector2D_Unit0);
      Bounds2D bounds2D0 = reverseRay0.getBounds();
}"
3636,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName())
            .append(""[direction= "")
            .append(getLine().getDirection())
            .append("", endPoint= "")
            .append(getEndPoint())
            .append(']');

        return sb.toString();
    }","  public void test35()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector2D_Unit0).when(line0).getDirection();
      ReverseRay reverseRay0 = new ReverseRay(line0, vector2D_Unit0);
      String string0 = reverseRay0.toString();
}"
3637,"    public boolean isInfinite() {
        return true;
    }","  public void test36()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-20.292112414166454), precision_DoubleEquivalence0);
      ReverseRay reverseRay0 = line0.reverseRayTo((Vector2D) vector2D_Unit0);
      boolean boolean0 = reverseRay0.isInfinite();
}"
3638,"    default LinecastPoint2D linecastFirst(final Line line) {
        return linecastFirst(line.span());
    }","  public void test0()  throws Throwable  {
      Vector<LineConvexSubset> vector0 = new Vector<LineConvexSubset>();
      ConvexArea convexArea0 = new ConvexArea(vector0);
      LinecastPoint2D linecastPoint2D0 = convexArea0.linecastFirst((LineConvexSubset) null);
}"
3639,"    default List<LinecastPoint2D> linecast(final Line line) {
        return linecast(line.span());
    }","  public void test1()  throws Throwable  {
      ArrayDeque<Line> arrayDeque0 = new ArrayDeque<Line>((-1969));
      ConvexArea convexArea0 = ConvexArea.fromBounds((Iterable<Line>) arrayDeque0);
      List<LinecastPoint2D> list0 = convexArea0.linecast((LineConvexSubset) null);
}"
3640,"    default List<LinecastPoint2D> linecast(final Line line) {
        return linecast(line.span());
    }","  public void test2()  throws Throwable  {
      Stack<Vector2D> stack0 = new Stack<Vector2D>();
      LinePath linePath0 = LinePath.fromVertexLoop(stack0, (Precision.DoubleEquivalence) null);
      BoundarySourceLinecaster2D boundarySourceLinecaster2D0 = new BoundarySourceLinecaster2D(linePath0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Line line0 = new Line(vector2D_Unit0, (-556.56), (Precision.DoubleEquivalence) null);
      List<LinecastPoint2D> list0 = boundarySourceLinecaster2D0.linecast(line0);
}"
3641,"    default LinecastPoint2D linecastFirst(final Line line) {
        return linecastFirst(line.span());
    }","  public void test3()  throws Throwable  {
      BoundarySourceLinecaster2D boundarySourceLinecaster2D0 = new BoundarySourceLinecaster2D((BoundarySource2D) null);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      ReverseRay reverseRay0 = new ReverseRay((Line) null, vector2D_Unit0);
      // Undeclared exception!
      try { 
        boundarySourceLinecaster2D0.linecastFirst((LineConvexSubset) reverseRay0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.BoundarySourceLinecaster2D"", e);
      }
  }"
3642,"    default LinecastPoint2D linecastFirst(final Line line) {
        return linecastFirst(line.span());
    }","  public void test4()  throws Throwable  {
      ArrayList<LineConvexSubset> arrayList0 = new ArrayList<LineConvexSubset>();
      ConvexArea convexArea0 = new ConvexArea(arrayList0);
      // Undeclared exception!
      try { 
        convexArea0.linecastFirst((Line) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Linecastable2D"", e);
      }
  }"
3643,"    default LinecastPoint2D linecastFirst(final Line line) {
        return linecastFirst(line.span());
    }","  public void test5()  throws Throwable  {
      LineConvexSubset[] lineConvexSubsetArray0 = new LineConvexSubset[7];
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1417.090830279304), precision_DoubleEquivalence0);
      BoundarySource2D boundarySource2D0 = BoundarySource2D.of(lineConvexSubsetArray0);
      // Undeclared exception!
      try { 
        boundarySource2D0.linecastFirst(line0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.BoundarySourceLinecaster2D"", e);
      }
  }"
3644,"    default List<LinecastPoint2D> linecast(final Line line) {
        return linecast(line.span());
    }","  public void test6()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = new RegionBSPTree2D();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Line line0 = new Line(vector2D_Unit0, (-471.169090101708), (Precision.DoubleEquivalence) null);
      Ray ray0 = line0.rayFrom((Vector2D) vector2D_Unit0);
      ReverseRay reverseRay0 = ray0.reverse();
      regionBSPTree2D0.insert((HyperplaneSubset<Vector2D>) reverseRay0);
      // Undeclared exception!
      try { 
        regionBSPTree2D0.linecast((LineConvexSubset) ray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3645,"    default List<LinecastPoint2D> linecast(final Line line) {
        return linecast(line.span());
    }","  public void test7()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = new RegionBSPTree2D();
      // Undeclared exception!
      try { 
        regionBSPTree2D0.linecast((Line) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Linecastable2D"", e);
      }
  }"
3646,"    default LinecastPoint2D linecastFirst(final Line line) {
        return linecastFirst(line.span());
    }","  public void test8()  throws Throwable  {
      HashSet<Vector2D> hashSet0 = new HashSet<Vector2D>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1417.090830279304), precision_DoubleEquivalence0);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      LinePath linePath0 = LinePath.fromVertices((Collection<Vector2D>) hashSet0, true, precision_DoubleEquivalence1);
      LinecastPoint2D linecastPoint2D0 = linePath0.linecastFirst(line0);
}"
3647,"    public List<LinecastPoint2D> linecast(final LineConvexSubset subset) {
        final LinecastVisitor visitor = new LinecastVisitor(subset, false);
        accept(visitor);

        return visitor.getResults();
    }","  public void test0()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = new RegionBSPTree2D();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      RegionBSPTree2D.RegionNode2D regionBSPTree2D_RegionNode2D0 = regionBSPTree2D0.createNode();
      regionBSPTree2D_RegionNode2D0.insertCut((Hyperplane<Vector2D>) line0);
      regionBSPTree2D0.extract(regionBSPTree2D_RegionNode2D0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation(0.0);
      Line line1 = line0.transform(affineTransformMatrix2D0);
      Ray ray0 = line1.rayFrom((Vector2D) vector2D_Unit0);
      List<LinecastPoint2D> list0 = regionBSPTree2D0.linecast((LineConvexSubset) ray0);
}"
3648,"    public static PartitionedRegionBuilder2D partitionedRegionBuilder() {
        return new PartitionedRegionBuilder2D();
    }","  public void test1()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      RegionBSPTree2D.PartitionedRegionBuilder2D regionBSPTree2D_PartitionedRegionBuilder2D0 = RegionBSPTree2D.partitionedRegionBuilder();
      RegionBSPTree2D.PartitionedRegionBuilder2D regionBSPTree2D_PartitionedRegionBuilder2D1 = regionBSPTree2D_PartitionedRegionBuilder2D0.insertAxisAlignedPartitions(vector2D_Unit0, precision_DoubleEquivalence1);
}"
3649,"    protected RegionNode2D createNode() {
        return new RegionNode2D(this);
    }","  public void test2()  throws Throwable  {
      LinkedHashSet<LineSpanningSubset> linkedHashSet0 = new LinkedHashSet<LineSpanningSubset>();
      ArrayList<LineSpanningSubset> arrayList0 = new ArrayList<LineSpanningSubset>(linkedHashSet0);
      RegionBSPTree2D regionBSPTree2D0 = RegionBSPTree2D.from((Iterable<? extends LineConvexSubset>) arrayList0, false);
      RegionBSPTree2D.RegionNode2D regionBSPTree2D_RegionNode2D0 = regionBSPTree2D0.createNode();
      RegionBSPTree2D.RegionNode2D regionBSPTree2D_RegionNode2D1 = regionBSPTree2D_RegionNode2D0.getSelf();
}"
3650,"    protected void invalidate() {
        super.invalidate();

        boundaryPaths = null;
    }","  public void test3()  throws Throwable  {
      LinkedHashSet<LineSpanningSubset> linkedHashSet0 = new LinkedHashSet<LineSpanningSubset>();
      ArrayList<LineSpanningSubset> arrayList0 = new ArrayList<LineSpanningSubset>(linkedHashSet0);
      RegionBSPTree2D regionBSPTree2D0 = RegionBSPTree2D.from((Iterable<? extends LineConvexSubset>) arrayList0, false);
      regionBSPTree2D0.invalidate();
  }"
3651,"    public static PartitionedRegionBuilder2D partitionedRegionBuilder() {
        return new PartitionedRegionBuilder2D();
    }","  public void test4()  throws Throwable  {
      RegionBSPTree2D.PartitionedRegionBuilder2D regionBSPTree2D_PartitionedRegionBuilder2D0 = RegionBSPTree2D.partitionedRegionBuilder();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = new Line(vector2D_Unit0, (-3441.92), (Precision.DoubleEquivalence) null);
      Segment segment0 = line0.segment((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      RegionBSPTree2D.PartitionedRegionBuilder2D regionBSPTree2D_PartitionedRegionBuilder2D1 = regionBSPTree2D_PartitionedRegionBuilder2D0.insertBoundary(segment0);
}"
3652,"    public List<ConvexArea> toConvex() {
        final List<ConvexArea> result = new ArrayList<>();

        toConvexRecursive(getRoot(), ConvexArea.full(), result);

        return result;
    }","  public void test5()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = RegionBSPTree2D.empty();
      List<ConvexArea> list0 = regionBSPTree2D0.toConvex();
}"
3653,"    public Vector2D project(final Vector2D pt) {
        // use our custom projector so that we can disambiguate points that are
        // actually equidistant from the target point
        final BoundaryProjector2D projector = new BoundaryProjector2D(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test6()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = new RegionBSPTree2D();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      RegionBSPTree2D.RegionNode2D regionBSPTree2D_RegionNode2D0 = regionBSPTree2D0.createNode();
      regionBSPTree2D_RegionNode2D0.insertCut((Hyperplane<Vector2D>) line0);
      regionBSPTree2D0.extract(regionBSPTree2D_RegionNode2D0);
      Vector2D vector2D0 = regionBSPTree2D0.project((Vector2D) vector2D_Unit0);
}"
3654,"    public Vector2D project(final Vector2D pt) {
        // use our custom projector so that we can disambiguate points that are
        // actually equidistant from the target point
        final BoundaryProjector2D projector = new BoundaryProjector2D(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test7()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = new RegionBSPTree2D();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      RegionBSPTree2D.RegionNode2D regionBSPTree2D_RegionNode2D0 = regionBSPTree2D0.createNode();
      regionBSPTree2D_RegionNode2D0.insertCut((Hyperplane<Vector2D>) line0);
      regionBSPTree2D0.extract(regionBSPTree2D_RegionNode2D0);
      Vector2D vector2D0 = regionBSPTree2D0.project((Vector2D) vector2D_Unit0);
}"
3655,"    public Vector2D project(final Vector2D pt) {
        // use our custom projector so that we can disambiguate points that are
        // actually equidistant from the target point
        final BoundaryProjector2D projector = new BoundaryProjector2D(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test8()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = new RegionBSPTree2D();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      RegionBSPTree2D.RegionNode2D regionBSPTree2D_RegionNode2D0 = regionBSPTree2D0.createNode();
      regionBSPTree2D_RegionNode2D0.insertCut((Hyperplane<Vector2D>) line0);
      regionBSPTree2D0.extract(regionBSPTree2D_RegionNode2D0);
      Vector2D vector2D0 = regionBSPTree2D0.project((Vector2D) vector2D_Unit0);
}"
3656,"    public Vector2D project(final Vector2D pt) {
        // use our custom projector so that we can disambiguate points that are
        // actually equidistant from the target point
        final BoundaryProjector2D projector = new BoundaryProjector2D(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test9()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = new RegionBSPTree2D();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      RegionBSPTree2D.RegionNode2D regionBSPTree2D_RegionNode2D0 = regionBSPTree2D0.createNode();
      regionBSPTree2D_RegionNode2D0.insertCut((Hyperplane<Vector2D>) line0);
      regionBSPTree2D0.extract(regionBSPTree2D_RegionNode2D0);
      Vector2D vector2D0 = regionBSPTree2D0.project((Vector2D) vector2D_Unit0);
}"
3657,"    public List<LineConvexSubset> getBoundaries() {
        return createBoundaryList(LineConvexSubset.class::cast);
    }","  public void test10()  throws Throwable  {
      TreeSet<ReverseRay> treeSet0 = new TreeSet<ReverseRay>();
      LinkedList<ReverseRay> linkedList0 = new LinkedList<ReverseRay>(treeSet0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1234.0;
      Vector2D vector2D0 = Vector2D.of(doubleArray0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(vector2D0);
      Vector2D.Unit vector2D_Unit0 = affineTransformMatrix2D0.applyDirection(vector2D0);
      Line line0 = new Line(vector2D_Unit0, 0.5, (Precision.DoubleEquivalence) null);
      ReverseRay reverseRay0 = line0.reverseRayTo((-178.1218));
      linkedList0.add(reverseRay0);
      RegionBSPTree2D regionBSPTree2D0 = RegionBSPTree2D.from((Iterable<? extends LineConvexSubset>) linkedList0, true);
      List<LineConvexSubset> list0 = regionBSPTree2D0.getBoundaries();
}"
3658,"    public static RegionBSPTree2D from(final Iterable<? extends LineConvexSubset> boundaries) {
        return from(boundaries, false);
    }","  public void test11()  throws Throwable  {
      Class<LineSpanningSubset> class0 = LineSpanningSubset.class;
      ServiceLoader<LineSpanningSubset> serviceLoader0 = ServiceLoader.load(class0);
      RegionBSPTree2D regionBSPTree2D0 = RegionBSPTree2D.from((Iterable<? extends LineConvexSubset>) serviceLoader0);
}"
3659,"    public Split<RegionBSPTree2D> split(final Hyperplane<Vector2D> splitter) {
        return split(splitter, RegionBSPTree2D.empty(), RegionBSPTree2D.empty());
    }","  public void test12()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = RegionBSPTree2D.empty();
      // Undeclared exception!
      try { 
        regionBSPTree2D0.split((Hyperplane<Vector2D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.partitioning.bsp.AbstractBSPTree"", e);
      }
  }"
3660,"    public Vector2D project(final Vector2D pt) {
        // use our custom projector so that we can disambiguate points that are
        // actually equidistant from the target point
        final BoundaryProjector2D projector = new BoundaryProjector2D(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test13()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = new RegionBSPTree2D();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      RegionBSPTree2D.RegionNode2D regionBSPTree2D_RegionNode2D0 = regionBSPTree2D0.createNode();
      regionBSPTree2D_RegionNode2D0.insertCut((Hyperplane<Vector2D>) line0);
      regionBSPTree2D0.extract(regionBSPTree2D_RegionNode2D0);
      // Undeclared exception!
      try { 
        regionBSPTree2D0.project((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3661,"    public LinecastPoint2D linecastFirst(final LineConvexSubset subset) {
        final LinecastVisitor visitor = new LinecastVisitor(subset, true);
        accept(visitor);

        return visitor.getFirstResult();
    }","  public void test14()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = new RegionBSPTree2D();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      RegionBSPTree2D.RegionNode2D regionBSPTree2D_RegionNode2D0 = regionBSPTree2D0.createNode();
      regionBSPTree2D_RegionNode2D0.insertCut((Hyperplane<Vector2D>) line0);
      regionBSPTree2D0.extract(regionBSPTree2D_RegionNode2D0);
      // Undeclared exception!
      try { 
        regionBSPTree2D0.linecastFirst((LineConvexSubset) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.RegionBSPTree2D$LinecastVisitor"", e);
      }
  }"
3662,"    public List<LinecastPoint2D> linecast(final LineConvexSubset subset) {
        final LinecastVisitor visitor = new LinecastVisitor(subset, false);
        accept(visitor);

        return visitor.getResults();
    }","  public void test15()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = new RegionBSPTree2D();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      RegionBSPTree2D.RegionNode2D regionBSPTree2D_RegionNode2D0 = regionBSPTree2D0.createNode();
      regionBSPTree2D_RegionNode2D0.cut((Hyperplane<Vector2D>) line0);
      regionBSPTree2D0.extract(regionBSPTree2D_RegionNode2D0);
      // Undeclared exception!
      try { 
        regionBSPTree2D0.linecast((LineConvexSubset) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.RegionBSPTree2D$LinecastVisitor"", e);
      }
  }"
3663,"    public List<LinePath> getBoundaryPaths() {
        if (boundaryPaths == null) {
            boundaryPaths = Collections.unmodifiableList(computeBoundaryPaths());
        }
        return boundaryPaths;
    }","  public void test16()  throws Throwable  {
      TreeSet<ReverseRay> treeSet0 = new TreeSet<ReverseRay>();
      LinkedList<ReverseRay> linkedList0 = new LinkedList<ReverseRay>(treeSet0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1234.0;
      Vector2D vector2D0 = Vector2D.of(doubleArray0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(vector2D0);
      Vector2D.Unit vector2D_Unit0 = affineTransformMatrix2D0.applyDirection(vector2D0);
      Line line0 = new Line(vector2D_Unit0, 0.5, (Precision.DoubleEquivalence) null);
      ReverseRay reverseRay0 = line0.reverseRayTo((-178.1218));
      linkedList0.add(reverseRay0);
      RegionBSPTree2D regionBSPTree2D0 = RegionBSPTree2D.from((Iterable<? extends LineConvexSubset>) linkedList0, true);
      // Undeclared exception!
      try { 
        regionBSPTree2D0.getBoundaryPaths();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.AbstractLinePathConnector$ConnectableLineSubset"", e);
      }
  }"
3664,"    public static RegionBSPTree2D from(final Iterable<? extends LineConvexSubset> boundaries) {
        return from(boundaries, false);
    }","  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RegionBSPTree2D.from((Iterable<? extends LineConvexSubset>) null, false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.partitioning.bsp.AbstractRegionBSPTree"", e);
      }
  }"
3665,"    public void add(final ConvexArea area) {
        union(area.toTree());
    }","  public void test18()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = RegionBSPTree2D.full();
      // Undeclared exception!
      try { 
        regionBSPTree2D0.add((ConvexArea) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.RegionBSPTree2D"", e);
      }
  }"
3666,"    public static RegionBSPTree2D from(final Iterable<? extends LineConvexSubset> boundaries) {
        return from(boundaries, false);
    }","  public void test19()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-268.656), (-268.656));
      RegionBSPTree2D.PartitionedRegionBuilder2D regionBSPTree2D_PartitionedRegionBuilder2D0 = RegionBSPTree2D.partitionedRegionBuilder();
      Vector2D[] vector2DArray0 = new Vector2D[2];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1.0, precision_DoubleEquivalence0);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      RegionBSPTree2D.PartitionedRegionBuilder2D regionBSPTree2D_PartitionedRegionBuilder2D1 = regionBSPTree2D_PartitionedRegionBuilder2D0.insertAxisAlignedGrid(bounds2D0, (-1), precision_DoubleEquivalence1);
}"
3667,"    public RegionBSPTree2D() {
        this(false);
    }","  public void test20()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = new RegionBSPTree2D(true);
  }"
3668,"    public Iterable<LineConvexSubset> boundaries() {
        return createBoundaryIterable(LineConvexSubset.class::cast);
    }","  public void test21()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = RegionBSPTree2D.empty();
      Iterable<LineConvexSubset> iterable0 = regionBSPTree2D0.boundaries();
}"
3669,"    public Stream<LineConvexSubset> boundaryStream() {
        return StreamSupport.stream(boundaries().spliterator(), false);
    }","  public void test22()  throws Throwable  {
      LinkedHashSet<LineSpanningSubset> linkedHashSet0 = new LinkedHashSet<LineSpanningSubset>();
      ArrayList<LineSpanningSubset> arrayList0 = new ArrayList<LineSpanningSubset>(linkedHashSet0);
      RegionBSPTree2D regionBSPTree2D0 = RegionBSPTree2D.from((Iterable<? extends LineConvexSubset>) arrayList0, false);
      Stream<LineConvexSubset> stream0 = regionBSPTree2D0.boundaryStream();
}"
3670,"    public List<LinecastPoint2D> linecast(final LineConvexSubset subset) {
        final LinecastVisitor visitor = new LinecastVisitor(subset, false);
        accept(visitor);

        return visitor.getResults();
    }","  public void test23()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = new RegionBSPTree2D();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, true, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      RegionBSPTree2D.RegionNode2D regionBSPTree2D_RegionNode2D0 = regionBSPTree2D0.createNode();
      RegionCutRule regionCutRule0 = RegionCutRule.PLUS_INSIDE;
      regionBSPTree2D_RegionNode2D0.insertCut((Hyperplane<Vector2D>) line0, regionCutRule0);
      regionBSPTree2D0.extract(regionBSPTree2D_RegionNode2D0);
      regionBSPTree2D0.linecastFirst((LineConvexSubset) lineSpanningSubset0);
      List<LinecastPoint2D> list0 = regionBSPTree2D0.linecast((LineConvexSubset) lineSpanningSubset0);
}"
3671,"    public LinecastPoint2D linecastFirst(final LineConvexSubset subset) {
        final LinecastVisitor visitor = new LinecastVisitor(subset, true);
        accept(visitor);

        return visitor.getFirstResult();
    }","  public void test24()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = new RegionBSPTree2D();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(true, false, false, true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      RegionBSPTree2D.RegionNode2D regionBSPTree2D_RegionNode2D0 = regionBSPTree2D0.createNode();
      regionBSPTree2D_RegionNode2D0.insertCut((Hyperplane<Vector2D>) line0);
      regionBSPTree2D0.extract(regionBSPTree2D_RegionNode2D0);
      RegionBSPTree2D.PartitionedRegionBuilder2D regionBSPTree2D_PartitionedRegionBuilder2D0 = RegionBSPTree2D.partitionedRegionBuilder();
      RegionBSPTree2D.PartitionedRegionBuilder2D regionBSPTree2D_PartitionedRegionBuilder2D1 = regionBSPTree2D_PartitionedRegionBuilder2D0.insertPartition((LineConvexSubset) lineSpanningSubset0);
      regionBSPTree2D_PartitionedRegionBuilder2D1.insertPartition(line0);
      LinecastPoint2D linecastPoint2D0 = regionBSPTree2D0.linecastFirst((LineConvexSubset) lineSpanningSubset0);
}"
3672,"    public List<LinecastPoint2D> linecast(final LineConvexSubset subset) {
        final LinecastVisitor visitor = new LinecastVisitor(subset, false);
        accept(visitor);

        return visitor.getResults();
    }","  public void test25()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = new RegionBSPTree2D();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      RegionBSPTree2D.RegionNode2D regionBSPTree2D_RegionNode2D0 = regionBSPTree2D0.createNode();
      regionBSPTree2D_RegionNode2D0.insertCut((Hyperplane<Vector2D>) line0);
      regionBSPTree2D0.extract(regionBSPTree2D_RegionNode2D0);
      List<LinecastPoint2D> list0 = regionBSPTree2D0.linecast((LineConvexSubset) lineSpanningSubset0);
}"
3673,"    public LinecastPoint2D linecastFirst(final LineConvexSubset subset) {
        final LinecastVisitor visitor = new LinecastVisitor(subset, true);
        accept(visitor);

        return visitor.getFirstResult();
    }","  public void test26()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = new RegionBSPTree2D();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(true, false, false, true, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      RegionBSPTree2D.RegionNode2D regionBSPTree2D_RegionNode2D0 = regionBSPTree2D0.createNode();
      regionBSPTree2D_RegionNode2D0.insertCut((Hyperplane<Vector2D>) line0);
      regionBSPTree2D0.extract(regionBSPTree2D_RegionNode2D0);
      RegionBSPTree2D.PartitionedRegionBuilder2D regionBSPTree2D_PartitionedRegionBuilder2D0 = RegionBSPTree2D.partitionedRegionBuilder();
      RegionBSPTree2D.PartitionedRegionBuilder2D regionBSPTree2D_PartitionedRegionBuilder2D1 = regionBSPTree2D_PartitionedRegionBuilder2D0.insertPartition((LineConvexSubset) lineSpanningSubset0);
      regionBSPTree2D_PartitionedRegionBuilder2D1.insertPartition(line0);
      LinecastPoint2D linecastPoint2D0 = regionBSPTree2D0.linecastFirst((LineConvexSubset) lineSpanningSubset0);
}"
3674,"    public LinecastPoint2D linecastFirst(final LineConvexSubset subset) {
        final LinecastVisitor visitor = new LinecastVisitor(subset, true);
        accept(visitor);

        return visitor.getFirstResult();
    }","  public void test27()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = new RegionBSPTree2D();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(true, false, false, true, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      RegionBSPTree2D.RegionNode2D regionBSPTree2D_RegionNode2D0 = regionBSPTree2D0.createNode();
      regionBSPTree2D_RegionNode2D0.insertCut((Hyperplane<Vector2D>) line0);
      regionBSPTree2D0.extract(regionBSPTree2D_RegionNode2D0);
      RegionBSPTree2D.PartitionedRegionBuilder2D regionBSPTree2D_PartitionedRegionBuilder2D0 = RegionBSPTree2D.partitionedRegionBuilder();
      RegionBSPTree2D.PartitionedRegionBuilder2D regionBSPTree2D_PartitionedRegionBuilder2D1 = regionBSPTree2D_PartitionedRegionBuilder2D0.insertPartition((LineConvexSubset) lineSpanningSubset0);
      regionBSPTree2D_PartitionedRegionBuilder2D1.insertPartition(line0);
      LinecastPoint2D linecastPoint2D0 = regionBSPTree2D0.linecastFirst((LineConvexSubset) lineSpanningSubset0);
}"
3675,"    public static PartitionedRegionBuilder2D partitionedRegionBuilder() {
        return new PartitionedRegionBuilder2D();
    }","  public void test28()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = new RegionBSPTree2D();
      RegionBSPTree2D.PartitionedRegionBuilder2D regionBSPTree2D_PartitionedRegionBuilder2D0 = RegionBSPTree2D.partitionedRegionBuilder();
      RegionBSPTree2D.PartitionedRegionBuilder2D regionBSPTree2D_PartitionedRegionBuilder2D1 = regionBSPTree2D_PartitionedRegionBuilder2D0.insertBoundaries((BoundarySource2D) regionBSPTree2D0);
}"
3676,"    public void add(final ConvexArea area) {
        union(area.toTree());
    }","  public void test29()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-268.656), (-268.656));
      RegionBSPTree2D.PartitionedRegionBuilder2D regionBSPTree2D_PartitionedRegionBuilder2D0 = RegionBSPTree2D.partitionedRegionBuilder();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1.0, precision_DoubleEquivalence0);
      ArrayList<Ray> arrayList0 = new ArrayList<Ray>();
      Ray ray0 = line0.rayFrom((Vector2D) vector2D_Unit0);
      arrayList0.add(ray0);
      RegionBSPTree2D.PartitionedRegionBuilder2D regionBSPTree2D_PartitionedRegionBuilder2D1 = regionBSPTree2D_PartitionedRegionBuilder2D0.insertBoundaries((Iterable<? extends LineConvexSubset>) arrayList0);
}"
3677,"    protected RegionNode2D createNode() {
        return new RegionNode2D(this);
    }","  public void test30()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = RegionBSPTree2D.empty();
      RegionBSPTree2D.RegionNode2D regionBSPTree2D_RegionNode2D0 = regionBSPTree2D0.createNode();
      ConvexArea convexArea0 = regionBSPTree2D_RegionNode2D0.getNodeRegion();
}"
3678,"    protected RegionNode2D createNode() {
        return new RegionNode2D(this);
    }","  public void test31()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = new RegionBSPTree2D();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      RegionBSPTree2D.RegionNode2D regionBSPTree2D_RegionNode2D0 = regionBSPTree2D0.createNode();
      regionBSPTree2D_RegionNode2D0.insertCut((Hyperplane<Vector2D>) line0);
      regionBSPTree2D0.extract(regionBSPTree2D_RegionNode2D0);
      double double0 = regionBSPTree2D0.getSize();
}"
3679,"    public static RegionBSPTree2D from(final Iterable<? extends LineConvexSubset> boundaries) {
        return from(boundaries, false);
    }","  public void test32()  throws Throwable  {
      ArrayDeque<Ray> arrayDeque0 = new ArrayDeque<Ray>(1);
      RegionBSPTree2D regionBSPTree2D0 = RegionBSPTree2D.from((Iterable<? extends LineConvexSubset>) arrayDeque0, true);
      double double0 = regionBSPTree2D0.getSize();
}"
3680,"    public static RegionBSPTree2D empty() {
        return new RegionBSPTree2D(false);
    }","  public void test33()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = RegionBSPTree2D.empty();
      double double0 = regionBSPTree2D0.getSize();
}"
3681,"    public List<ConvexArea> toConvex() {
        final List<ConvexArea> result = new ArrayList<>();

        toConvexRecursive(getRoot(), ConvexArea.full(), result);

        return result;
    }","  public void test34()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = new RegionBSPTree2D();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      RegionBSPTree2D.RegionNode2D regionBSPTree2D_RegionNode2D0 = regionBSPTree2D0.createNode();
      regionBSPTree2D_RegionNode2D0.insertCut((Hyperplane<Vector2D>) line0);
      regionBSPTree2D0.extract(regionBSPTree2D_RegionNode2D0);
      List<ConvexArea> list0 = regionBSPTree2D0.toConvex();
}"
3682,"    public static RegionBSPTree2D from(final Iterable<? extends LineConvexSubset> boundaries) {
        return from(boundaries, false);
    }","  public void test35()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      RegionBSPTree2D.PartitionedRegionBuilder2D regionBSPTree2D_PartitionedRegionBuilder2D0 = RegionBSPTree2D.partitionedRegionBuilder();
      Vector2D[] vector2DArray0 = new Vector2D[2];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false, false, false, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 1.0, precision_DoubleEquivalence0);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      // Undeclared exception!
      regionBSPTree2D_PartitionedRegionBuilder2D0.insertAxisAlignedGrid(bounds2D0, 10, precision_DoubleEquivalence1);
  }"
3683,"    public Vector2D project(final Vector2D pt) {
        // use our custom projector so that we can disambiguate points that are
        // actually equidistant from the target point
        final BoundaryProjector2D projector = new BoundaryProjector2D(pt);
        accept(projector);

        return projector.getProjected();
    }","  public void test36()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = new RegionBSPTree2D();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = regionBSPTree2D0.project((Vector2D) vector2D_Unit0);
}"
3684,"    public List<LinePath> getBoundaryPaths() {
        if (boundaryPaths == null) {
            boundaryPaths = Collections.unmodifiableList(computeBoundaryPaths());
        }
        return boundaryPaths;
    }","  public void test37()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = RegionBSPTree2D.full();
      List<LinePath> list0 = regionBSPTree2D0.getBoundaryPaths();
      List<LinePath> list1 = regionBSPTree2D0.getBoundaryPaths();
}"
3685,"    public Split<RegionBSPTree2D> split(final Hyperplane<Vector2D> splitter) {
        return split(splitter, RegionBSPTree2D.empty(), RegionBSPTree2D.empty());
    }","  public void test38()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = RegionBSPTree2D.empty();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Line line0 = new Line(vector2D_Unit0, 1288.700291234, (Precision.DoubleEquivalence) null);
      Split<RegionBSPTree2D> split0 = regionBSPTree2D0.split(line0);
}"
3686,"    public static PartitionedRegionBuilder2D partitionedRegionBuilder() {
        return new PartitionedRegionBuilder2D();
    }","  public void test39()  throws Throwable  {
      RegionBSPTree2D.PartitionedRegionBuilder2D regionBSPTree2D_PartitionedRegionBuilder2D0 = RegionBSPTree2D.partitionedRegionBuilder();
      RegionBSPTree2D regionBSPTree2D0 = regionBSPTree2D_PartitionedRegionBuilder2D0.build();
}"
3687,"    public void add(final ConvexArea area) {
        union(area.toTree());
    }","  public void test40()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = new RegionBSPTree2D();
      ConvexArea convexArea0 = ConvexArea.full();
      regionBSPTree2D0.add(convexArea0);
}"
3688,"    public static RegionBSPTree2D from(final Iterable<? extends LineConvexSubset> boundaries) {
        return from(boundaries, false);
    }","  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        RegionBSPTree2D.from((Iterable<? extends LineConvexSubset>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.partitioning.bsp.AbstractRegionBSPTree"", e);
      }
  }"
3689,"    public RegionBSPTree2D toTree() {
        return this;
    }","  public void test42()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = new RegionBSPTree2D();
      RegionBSPTree2D regionBSPTree2D1 = regionBSPTree2D0.toTree();
}"
3690,"    public RegionBSPTree2D copy() {
        final RegionBSPTree2D result = RegionBSPTree2D.empty();
        result.copy(this);

        return result;
    }","  public void test43()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = RegionBSPTree2D.full();
      RegionBSPTree2D regionBSPTree2D1 = regionBSPTree2D0.copy();
}"
3691,"    public List<LineConvexSubset> getBoundaries() {
        return createBoundaryList(LineConvexSubset.class::cast);
    }","  public void test44()  throws Throwable  {
      RegionBSPTree2D regionBSPTree2D0 = RegionBSPTree2D.empty();
      List<LineConvexSubset> list0 = regionBSPTree2D0.getBoundaries();
}"
3692,"    static void validateLinesEquivalent(final Line expected, final Line actual) {
        if (!expected.eq(actual, expected.getPrecision())) {
            throw new IllegalArgumentException(""Arguments do not represent the same line. Expected "" +
                    expected + "" but was "" + actual + ""."");
        }
    }","  public void test0()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(1632.2085102, 1632.2085102);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(vector2D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 843.3158267934293, precision_DoubleEquivalence0);
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence1).eq(anyDouble() , anyDouble());
      Line line1 = Lines.fromPoints(vector2D_Unit1, vector2D_Unit0, precision_DoubleEquivalence1);
      // Undeclared exception!
      try { 
        Lines.validateLinesEquivalent(line1, line0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Arguments do not represent the same line. Expected Line[origin= (0.35355339059327384, -0.1464466094067263), direction= (0.38268343236508984, 0.9238795325112867)] but was Line[origin= (-596.3143398075739, 596.3143398075739), direction= (0.7071067811865476, 0.7071067811865476)].
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3693,"    public static LineConvexSubset subsetFromInterval(final Line line, final Interval interval) {
        return subsetFromInterval(line, interval.getMin(), interval.getMax());
    }","  public void test1()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-1570.7), 966.0);
      Vector2D.Unit vector2D_Unit0 = vector2D0.orthogonal();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1570.7), precision_DoubleEquivalence0);
      LineConvexSubset lineConvexSubset0 = Lines.subsetFromInterval(line0, 1.0, 0.0);
}"
3694,"    public static LineConvexSubset subsetFromInterval(final Line line, final Interval interval) {
        return subsetFromInterval(line, interval.getMin(), interval.getMax());
    }","  public void test2()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1265.8463), precision_DoubleEquivalence0);
      LineConvexSubset lineConvexSubset0 = Lines.subsetFromInterval(line0, 0.99, 2426.90891997);
}"
3695,"    public static LineConvexSubset subsetFromInterval(final Line line, final Interval interval) {
        return subsetFromInterval(line, interval.getMin(), interval.getMax());
    }","  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lines.subsetFromInterval((Line) null, 0.9999999999, (-3197.87061));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3696,"    public static Segment segmentFromLocations(final Line line, final double a, final double b) {

        if (Double.isFinite(a) && Double.isFinite(b)) {
            final double min = Math.min(a, b);
            final double max = Math.max(a, b);

            return new Segment(line, line.toSpace(min), line.toSpace(max));
        }

        throw new IllegalArgumentException(
                MessageFormat.format(""Invalid line segment locations: {0}, {1}"",
                        Double.toString(a), Double.toString(b)));
    }","  public void test4()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Segment segment0 = Lines.segmentFromLocations(line0, 0.0, (-924.8676));
}"
3697,"    public static Segment segmentFromLocations(final Line line, final double a, final double b) {

        if (Double.isFinite(a) && Double.isFinite(b)) {
            final double min = Math.min(a, b);
            final double max = Math.max(a, b);

            return new Segment(line, line.toSpace(min), line.toSpace(max));
        }

        throw new IllegalArgumentException(
                MessageFormat.format(""Invalid line segment locations: {0}, {1}"",
                        Double.toString(a), Double.toString(b)));
    }","  public void test5()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Segment segment0 = Lines.segmentFromLocations(line0, 0.0, 0.6);
}"
3698,"    public static Segment segmentFromPoints(final Vector2D startPoint, final Vector2D endPoint,
            final Precision.DoubleEquivalence precision) {
        final Line line = Lines.fromPoints(startPoint, endPoint, precision);

        // we know that the points lie on the line and are in increasing abscissa order
        // since they were used to create the line
        return new Segment(line, startPoint, endPoint);
    }","  public void test6()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = Lines.fromPointAndAngle(vector2D0, 1.0, precision_DoubleEquivalence0);
      Lines.segmentFromPoints(line0, vector2D0, (Vector2D) vector2D_Unit0);
}"
3699,"    public static ReverseRay reverseRayFromPointAndDirection(final Vector2D endPoint, final Vector2D lineDirection,
            final Precision.DoubleEquivalence precision) {
        final Line line = Lines.fromPointAndDirection(endPoint, lineDirection, precision);

        return new ReverseRay(line, endPoint);
    }","  public void test7()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(1748.61668994176, 1748.61668994176);
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      ReverseRay reverseRay0 = Lines.reverseRayFromPointAndDirection(vector2D0, vector2D_Unit0, precision_DoubleEquivalence0);
}"
3700,"    public static Ray rayFromPointAndDirection(final Vector2D startPoint, final Vector2D direction,
            final Precision.DoubleEquivalence precision) {
        final Line line = Lines.fromPointAndDirection(startPoint, direction, precision);

        return new Ray(line, startPoint);
    }","  public void test8()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.from(rotation2D0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(1748.61668994176, 1748.61668994176);
      Vector2D.Unit vector2D_Unit1 = affineTransformMatrix2D0.applyDirection((Vector2D) vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Ray ray0 = Lines.rayFromPointAndDirection(vector2D_Unit0, vector2D_Unit1, precision_DoubleEquivalence0);
}"
3701,"    public static Ray rayFromPoint(final Line line, final Vector2D startPoint) {
        if (!startPoint.isFinite()) {
            throw new IllegalArgumentException(""Invalid ray start point: "" + startPoint);
        }
        return new Ray(line, line.project(startPoint));
    }","  public void test9()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 2133.51815, precision_DoubleEquivalence0);
      Ray ray0 = Lines.rayFromPoint(line0, vector2D_Unit0);
}"
3702,"    public static Line fromPoints(final Vector2D p1, final Vector2D p2, final Precision.DoubleEquivalence precision) {
        return fromPointAndDirection(p1, p1.vectorTo(p2), precision);
    }","  public void test10()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = Lines.fromPoints(vector2D_Unit1, vector2D_Unit0, precision_DoubleEquivalence0);
}"
3703,"    public static Line fromPoints(final Vector2D p1, final Vector2D p2, final Precision.DoubleEquivalence precision) {
        return fromPointAndDirection(p1, p1.vectorTo(p2), precision);
    }","  public void test11()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = Lines.fromPoints(vector2D_Unit1, vector2D_Unit0, precision_DoubleEquivalence0);
}"
3704,"    public static Line fromPointAndDirection(final Vector2D pt, final Vector2D dir,
            final Precision.DoubleEquivalence precision) {
        if (dir.isZero(precision)) {
            throw new IllegalArgumentException(""Line direction cannot be zero"");
        }

        final Vector2D.Unit normalizedDir = dir.normalize();
        final double originOffset = normalizedDir.signedArea(pt);

        return new Line(normalizedDir, originOffset, precision);
    }","  public void test12()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = Lines.fromPointAndDirection(vector2D_Unit0, vector2D_Unit0, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.pointAt((-977.4851191), (-127.7459432255643));
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eq(anyDouble() , anyDouble());
      Line line1 = Lines.fromPointAndDirection(vector2D0, vector2D_Unit0, precision_DoubleEquivalence1);
}"
3705,"    public static Line fromPointAndDirection(final Vector2D pt, final Vector2D dir,
            final Precision.DoubleEquivalence precision) {
        if (dir.isZero(precision)) {
            throw new IllegalArgumentException(""Line direction cannot be zero"");
        }

        final Vector2D.Unit normalizedDir = dir.normalize();
        final double originOffset = normalizedDir.signedArea(pt);

        return new Line(normalizedDir, originOffset, precision);
    }","  public void test13()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1.0), (-1.0));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-0.999999999999998), precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-1.0));
      Vector2D vector2D0 = line0.toSpace((Vector1D) vector1D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eq(anyDouble() , anyDouble());
      Line line1 = Lines.fromPointAndDirection(vector2D0, vector2D_Unit0, precision_DoubleEquivalence1);
}"
3706,"    public static Line fromPointAndAngle(final Vector2D pt, final double angle,
            final Precision.DoubleEquivalence precision) {
        final Vector2D.Unit dir = Vector2D.Unit.from(Math.cos(angle), Math.sin(angle));
        return fromPointAndDirection(pt, dir, precision);
    }","  public void test14()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = Lines.fromPointAndAngle(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
}"
3707,"    public static Line fromPointAndAngle(final Vector2D pt, final double angle,
            final Precision.DoubleEquivalence precision) {
        final Vector2D.Unit dir = Vector2D.Unit.from(Math.cos(angle), Math.sin(angle));
        return fromPointAndDirection(pt, dir, precision);
    }","  public void test15()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-1570.7), 966.0);
      Vector2D.Unit vector2D_Unit0 = vector2D0.orthogonal();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = Lines.fromPointAndAngle(vector2D_Unit0, 1.0, precision_DoubleEquivalence0);
}"
3708,"    static void validateLinesEquivalent(final Line expected, final Line actual) {
        if (!expected.eq(actual, expected.getPrecision())) {
            throw new IllegalArgumentException(""Arguments do not represent the same line. Expected "" +
                    expected + "" but was "" + actual + ""."");
        }
    }","  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lines.validateLinesEquivalent((Line) null, (Line) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3709,"    public static Segment segmentFromPoints(final Vector2D startPoint, final Vector2D endPoint,
            final Precision.DoubleEquivalence precision) {
        final Line line = Lines.fromPoints(startPoint, endPoint, precision);

        // we know that the points lie on the line and are in increasing abscissa order
        // since they were used to create the line
        return new Segment(line, startPoint, endPoint);
    }","  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lines.segmentFromPoints((Vector2D) null, (Vector2D) null, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3710,"    public static Segment segmentFromPoints(final Vector2D startPoint, final Vector2D endPoint,
            final Precision.DoubleEquivalence precision) {
        final Line line = Lines.fromPoints(startPoint, endPoint, precision);

        // we know that the points lie on the line and are in increasing abscissa order
        // since they were used to create the line
        return new Segment(line, startPoint, endPoint);
    }","  public void test18()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      // Undeclared exception!
      try { 
        Lines.segmentFromPoints((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
3711,"    public static Segment segmentFromPoints(final Vector2D startPoint, final Vector2D endPoint,
            final Precision.DoubleEquivalence precision) {
        final Line line = Lines.fromPoints(startPoint, endPoint, precision);

        // we know that the points lie on the line and are in increasing abscissa order
        // since they were used to create the line
        return new Segment(line, startPoint, endPoint);
    }","  public void test19()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      // Undeclared exception!
      try { 
        Lines.segmentFromPoints((Line) null, (Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3712,"    public static ReverseRay reverseRayFromPointAndDirection(final Vector2D endPoint, final Vector2D lineDirection,
            final Precision.DoubleEquivalence precision) {
        final Line line = Lines.fromPointAndDirection(endPoint, lineDirection, precision);

        return new ReverseRay(line, endPoint);
    }","  public void test20()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Lines.reverseRayFromPointAndDirection((Vector2D) null, (Vector2D) null, precision_DoubleEquivalence0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3713,"    public static ReverseRay reverseRayFromPointAndDirection(final Vector2D endPoint, final Vector2D lineDirection,
            final Precision.DoubleEquivalence precision) {
        final Line line = Lines.fromPointAndDirection(endPoint, lineDirection, precision);

        return new ReverseRay(line, endPoint);
    }","  public void test21()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      // Undeclared exception!
      try { 
        Lines.reverseRayFromPointAndDirection(vector2D0, vector2D0, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
3714,"    public static ReverseRay reverseRayFromPoint(final Line line, final Vector2D endPoint) {
        if (!endPoint.isFinite()) {
            throw new IllegalArgumentException(""Invalid reverse ray end point: "" + endPoint);
        }
        return new ReverseRay(line, line.project(endPoint));
    }","  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lines.reverseRayFromPoint((Line) null, (Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3715,"    public static ReverseRay reverseRayFromLocation(final Line line, final double endLocation) {
        if (!Double.isFinite(endLocation)) {
            throw new IllegalArgumentException(""Invalid reverse ray end location: "" + endLocation);
        }

        return new ReverseRay(line, line.toSpace(endLocation));
    }","  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lines.reverseRayFromLocation((Line) null, 736.49962);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3716,"    public static Ray rayFromPointAndDirection(final Vector2D startPoint, final Vector2D direction,
            final Precision.DoubleEquivalence precision) {
        final Line line = Lines.fromPointAndDirection(startPoint, direction, precision);

        return new Ray(line, startPoint);
    }","  public void test24()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      // Undeclared exception!
      try { 
        Lines.rayFromPointAndDirection(vector2D0, vector2D0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
3717,"    public static Ray rayFromPointAndDirection(final Vector2D startPoint, final Vector2D direction,
            final Precision.DoubleEquivalence precision) {
        final Line line = Lines.fromPointAndDirection(startPoint, direction, precision);

        return new Ray(line, startPoint);
    }","  public void test25()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = Vector2D.of(0.0, 0.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      // Undeclared exception!
      try { 
        Lines.rayFromPointAndDirection(vector2D_Unit0, vector2D0, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
3718,"    public static Ray rayFromLocation(final Line line, final double startLocation) {
        if (!Double.isFinite(startLocation)) {
            throw new IllegalArgumentException(""Invalid ray start location: "" + startLocation);
        }
        return new Ray(line, line.toSpace(startLocation));
    }","  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lines.rayFromLocation((Line) null, 553.10516964379);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3719,"    public static Line fromPoints(final Vector2D p1, final Vector2D p2, final Precision.DoubleEquivalence precision) {
        return fromPointAndDirection(p1, p1.vectorTo(p2), precision);
    }","  public void test27()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Lines.fromPoints((Vector2D) null, (Vector2D) null, precision_DoubleEquivalence0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3720,"    public static Line fromPointAndDirection(final Vector2D pt, final Vector2D dir,
            final Precision.DoubleEquivalence precision) {
        if (dir.isZero(precision)) {
            throw new IllegalArgumentException(""Line direction cannot be zero"");
        }

        final Vector2D.Unit normalizedDir = dir.normalize();
        final double originOffset = normalizedDir.signedArea(pt);

        return new Line(normalizedDir, originOffset, precision);
    }","  public void test28()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Lines.fromPointAndDirection((Vector2D) null, (Vector2D) null, precision_DoubleEquivalence0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3721,"    public static Line fromPointAndAngle(final Vector2D pt, final double angle,
            final Precision.DoubleEquivalence precision) {
        final Vector2D.Unit dir = Vector2D.Unit.from(Math.cos(angle), Math.sin(angle));
        return fromPointAndDirection(pt, dir, precision);
    }","  public void test29()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-4417.62), (-4417.62));
      // Undeclared exception!
      try { 
        Lines.fromPointAndAngle(vector2D0, (-4417.62), (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
3722,"    public static LineConvexSubset subsetFromInterval(final Line line, final Interval interval) {
        return subsetFromInterval(line, interval.getMin(), interval.getMax());
    }","  public void test30()  throws Throwable  {
      LineConvexSubset lineConvexSubset0 = Lines.subsetFromInterval((Line) null, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY);
}"
3723,"    public static LineConvexSubset subsetFromInterval(final Line line, final Interval interval) {
        return subsetFromInterval(line, interval.getMin(), interval.getMax());
    }","  public void test31()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1265.8463), precision_DoubleEquivalence0);
      LineConvexSubset lineConvexSubset0 = Lines.subsetFromInterval(line0, 973.04509316778, Double.NEGATIVE_INFINITY);
}"
3724,"    public static LineConvexSubset subsetFromInterval(final Line line, final Interval interval) {
        return subsetFromInterval(line, interval.getMin(), interval.getMax());
    }","  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lines.subsetFromInterval((Line) null, Double.POSITIVE_INFINITY, 1040.0931077);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3725,"    public static Segment segmentFromLocations(final Line line, final double a, final double b) {

        if (Double.isFinite(a) && Double.isFinite(b)) {
            final double min = Math.min(a, b);
            final double max = Math.max(a, b);

            return new Segment(line, line.toSpace(min), line.toSpace(max));
        }

        throw new IllegalArgumentException(
                MessageFormat.format(""Invalid line segment locations: {0}, {1}"",
                        Double.toString(a), Double.toString(b)));
    }","  public void test33()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(1748.61668994176, 1748.61668994176);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1748.61668994176, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        Lines.segmentFromLocations(line0, Double.POSITIVE_INFINITY, 360.0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid line segment locations: Infinity, 360.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3726,"    public static Segment segmentFromLocations(final Line line, final double a, final double b) {

        if (Double.isFinite(a) && Double.isFinite(b)) {
            final double min = Math.min(a, b);
            final double max = Math.max(a, b);

            return new Segment(line, line.toSpace(min), line.toSpace(max));
        }

        throw new IllegalArgumentException(
                MessageFormat.format(""Invalid line segment locations: {0}, {1}"",
                        Double.toString(a), Double.toString(b)));
    }","  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lines.segmentFromLocations((Line) null, 0.0, 0.0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3727,"    public static ReverseRay reverseRayFromLocation(final Line line, final double endLocation) {
        if (!Double.isFinite(endLocation)) {
            throw new IllegalArgumentException(""Invalid reverse ray end location: "" + endLocation);
        }

        return new ReverseRay(line, line.toSpace(endLocation));
    }","  public void test35()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = Lines.fromPointAndDirection(vector2D_Unit0, vector2D_Unit0, precision_DoubleEquivalence0);
      Lines.reverseRayFromLocation(line0, (-127.7459432255643));
}"
3728,"    public static Line fromPointAndDirection(final Vector2D pt, final Vector2D dir,
            final Precision.DoubleEquivalence precision) {
        if (dir.isZero(precision)) {
            throw new IllegalArgumentException(""Line direction cannot be zero"");
        }

        final Vector2D.Unit normalizedDir = dir.normalize();
        final double originOffset = normalizedDir.signedArea(pt);

        return new Line(normalizedDir, originOffset, precision);
    }","  public void test36()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.max((Vector2D) vector2D_Unit0, vector2DArray0);
      Vector2D vector2D1 = Vector2D.centroid(vector2DArray0[1], vector2DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = Lines.fromPointAndDirection(vector2D0, vector2D1, precision_DoubleEquivalence0);
}"
3729,"    public static Line fromPoints(final Vector2D p1, final Vector2D p2, final Precision.DoubleEquivalence precision) {
        return fromPointAndDirection(p1, p1.vectorTo(p2), precision);
    }","  public void test37()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      // Undeclared exception!
      try { 
        Lines.fromPoints(vector2D_Unit0, vector2D_Unit0, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
3730,"    static void validateLinesEquivalent(final Line expected, final Line actual) {
        if (!expected.eq(actual, expected.getPrecision())) {
            throw new IllegalArgumentException(""Arguments do not represent the same line. Expected "" +
                    expected + "" but was "" + actual + ""."");
        }
    }","  public void test38()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 1452.19906204, precision_DoubleEquivalence0);
      Lines.validateLinesEquivalent(line0, line0);
}"
3731,"    public static LineConvexSubset subsetFromInterval(final Line line, final Interval interval) {
        return subsetFromInterval(line, interval.getMin(), interval.getMax());
    }","  public void test39()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1748.61668994176, precision_DoubleEquivalence0);
      Interval interval0 = Interval.full();
      LineConvexSubset lineConvexSubset0 = Lines.subsetFromInterval(line0, interval0);
}"
3732,"    public static LineConvexSubset subsetFromInterval(final Line line, final Interval interval) {
        return subsetFromInterval(line, interval.getMin(), interval.getMax());
    }","  public void test40()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, Double.NaN, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        Lines.subsetFromInterval(line0, Double.NaN, Double.NaN);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid line subset interval: NaN, NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3733,"    public static LineConvexSubset subsetFromInterval(final Line line, final Interval interval) {
        return subsetFromInterval(line, interval.getMin(), interval.getMax());
    }","  public void test41()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, 36.03735402787982, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max(36.03735402787982, precision_DoubleEquivalence1);
      // Undeclared exception!
      try { 
        Lines.subsetFromInterval(line0, interval0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3734,"    public static LineConvexSubset subsetFromInterval(final Line line, final Interval interval) {
        return subsetFromInterval(line, interval.getMin(), interval.getMax());
    }","  public void test42()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 2133.51815, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        Lines.subsetFromInterval(line0, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid line subset interval: -Infinity, -Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3735,"    public static Segment segmentFromLocations(final Line line, final double a, final double b) {

        if (Double.isFinite(a) && Double.isFinite(b)) {
            final double min = Math.min(a, b);
            final double max = Math.max(a, b);

            return new Segment(line, line.toSpace(min), line.toSpace(max));
        }

        throw new IllegalArgumentException(
                MessageFormat.format(""Invalid line segment locations: {0}, {1}"",
                        Double.toString(a), Double.toString(b)));
    }","  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lines.segmentFromLocations((Line) null, (-2053.949810961102), Double.POSITIVE_INFINITY);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid line segment locations: -2053.949810961102, Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3736,"    public static Segment segmentFromPoints(final Vector2D startPoint, final Vector2D endPoint,
            final Precision.DoubleEquivalence precision) {
        final Line line = Lines.fromPoints(startPoint, endPoint, precision);

        // we know that the points lie on the line and are in increasing abscissa order
        // since they were used to create the line
        return new Segment(line, startPoint, endPoint);
    }","  public void test44()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D_Unit0, (-1546.6088604210859), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        Lines.segmentFromPoints(line0, vector2D0, vector2D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid line segment locations: NaN, NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3737,"    public static ReverseRay reverseRayFromLocation(final Line line, final double endLocation) {
        if (!Double.isFinite(endLocation)) {
            throw new IllegalArgumentException(""Invalid reverse ray end location: "" + endLocation);
        }

        return new ReverseRay(line, line.toSpace(endLocation));
    }","  public void test45()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1809.5953163118518, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        Lines.reverseRayFromLocation(line0, Double.POSITIVE_INFINITY);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid reverse ray end location: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3738,"    public static ReverseRay reverseRayFromPoint(final Line line, final Vector2D endPoint) {
        if (!endPoint.isFinite()) {
            throw new IllegalArgumentException(""Invalid reverse ray end point: "" + endPoint);
        }
        return new ReverseRay(line, line.project(endPoint));
    }","  public void test46()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 1772.9427889896465, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.intersection(line0);
      // Undeclared exception!
      try { 
        Lines.reverseRayFromPoint(line0, vector2D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid reverse ray end point: (NaN, NaN)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3739,"    public static ReverseRay reverseRayFromPoint(final Line line, final Vector2D endPoint) {
        if (!endPoint.isFinite()) {
            throw new IllegalArgumentException(""Invalid reverse ray end point: "" + endPoint);
        }
        return new ReverseRay(line, line.project(endPoint));
    }","  public void test47()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1.5707963267948966, precision_DoubleEquivalence0);
      ReverseRay reverseRay0 = Lines.reverseRayFromPoint(line0, vector2D_Unit0);
}"
3740,"    public static Ray rayFromLocation(final Line line, final double startLocation) {
        if (!Double.isFinite(startLocation)) {
            throw new IllegalArgumentException(""Invalid ray start location: "" + startLocation);
        }
        return new Ray(line, line.toSpace(startLocation));
    }","  public void test48()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-0.16468696704081454), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        Lines.rayFromLocation(line0, Double.POSITIVE_INFINITY);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid ray start location: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3741,"    public static Ray rayFromLocation(final Line line, final double startLocation) {
        if (!Double.isFinite(startLocation)) {
            throw new IllegalArgumentException(""Invalid ray start location: "" + startLocation);
        }
        return new Ray(line, line.toSpace(startLocation));
    }","  public void test49()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1.5707963267948966, precision_DoubleEquivalence0);
      Ray ray0 = Lines.rayFromLocation(line0, 0.0);
}"
3742,"    public static Ray rayFromPoint(final Line line, final Vector2D startPoint) {
        if (!startPoint.isFinite()) {
            throw new IllegalArgumentException(""Invalid ray start point: "" + startPoint);
        }
        return new Ray(line, line.project(startPoint));
    }","  public void test50()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      // Undeclared exception!
      try { 
        Lines.rayFromPoint((Line) null, vector2D_Unit0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3743,"    public static Line fromPointAndAngle(final Vector2D pt, final double angle,
            final Precision.DoubleEquivalence precision) {
        final Vector2D.Unit dir = Vector2D.Unit.from(Math.cos(angle), Math.sin(angle));
        return fromPointAndDirection(pt, dir, precision);
    }","  public void test51()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      // Undeclared exception!
      try { 
        Lines.fromPointAndAngle(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Line direction cannot be zero
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3744,"    public static LineConvexSubset subsetFromInterval(final Line line, final Interval interval) {
        return subsetFromInterval(line, interval.getMin(), interval.getMax());
    }","  public void test52()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(1747.706878565614, 1747.706878565614);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1747.706878565614, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min(1747.706878565614, precision_DoubleEquivalence1);
      LineConvexSubset lineConvexSubset0 = Lines.subsetFromInterval(line0, interval0);
}"
3745,"    public static Segment segmentFromPoints(final Vector2D startPoint, final Vector2D endPoint,
            final Precision.DoubleEquivalence precision) {
        final Line line = Lines.fromPoints(startPoint, endPoint, precision);

        // we know that the points lie on the line and are in increasing abscissa order
        // since they were used to create the line
        return new Segment(line, startPoint, endPoint);
    }","  public void test53()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Segment segment0 = Lines.segmentFromPoints(vector2D0, (Vector2D) vector2D_Unit0, precision_DoubleEquivalence0);
}"
3746,"    public static Ray rayFromPoint(final Line line, final Vector2D startPoint) {
        if (!startPoint.isFinite()) {
            throw new IllegalArgumentException(""Invalid ray start point: "" + startPoint);
        }
        return new Ray(line, line.project(startPoint));
    }","  public void test54()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = Lines.fromPointAndAngle(vector2D0, (-15.960808651006113), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        Lines.rayFromPoint(line0, vector2D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid ray start point: (-Infinity, -Infinity)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3747,"    public static LineConvexSubset span(final Line line) {
        return new LineSpanningSubset(line);
    }","  public void test55()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1772.9427889896465, precision_DoubleEquivalence0);
      LineConvexSubset lineConvexSubset0 = Lines.span(line0);
}"
3748,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof Line)) {
            return false;
        }

        final Line other = (Line) obj;

        return Objects.equals(this.direction, other.direction) &&
                Double.compare(this.originOffset, other.originOffset) == 0 &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test0()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 729.205442964, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.fromColumnVectors((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      Line line2 = line1.transform(affineTransformMatrix2D0);
      boolean boolean0 = line0.equals(line2);
}"
3749,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test1()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 729.205442964, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.fromColumnVectors((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      Line line2 = line1.transform(affineTransformMatrix2D0);
      boolean boolean0 = line0.equals(line2);
}"
3750,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof Line)) {
            return false;
        }

        final Line other = (Line) obj;

        return Objects.equals(this.direction, other.direction) &&
                Double.compare(this.originOffset, other.originOffset) == 0 &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test2()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 729.205442964, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.fromColumnVectors((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      Line line2 = line1.transform(affineTransformMatrix2D0);
      boolean boolean0 = line0.equals(line2);
}"
3751,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test3()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 729.205442964, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.fromColumnVectors((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      Line line2 = line1.transform(affineTransformMatrix2D0);
      boolean boolean0 = line0.equals(line2);
}"
3752,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test4()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1453.39, precision_DoubleEquivalence0);
      line0.hashCode();
}"
3753,"    public Vector2D intersection(final Line other) {
        final double area = this.direction.signedArea(other.direction);
        if (getPrecision().eqZero(area)) {
            // lines are parallel
            return null;
        }

        final double x = Vectors.linearCombination(
                other.direction.getX(), originOffset,
                -direction.getX(), other.originOffset) / area;

        final double y = Vectors.linearCombination(
                other.direction.getY(), originOffset,
                -direction.getY(), other.originOffset) / area;

        return Vector2D.of(x, y);
    }","  public void test5()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(true, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit1, 0.0, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line2 = line1.transform(rotation2D0);
      line0.rayFrom((-880.394639267543));
      vector2D_Unit0.toString();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      vector2D_Unit1.reject((Vector2D) vector2D_Unit0);
      Line line3 = line2.reverse();
      line1.isParallel(line1);
      Vector2D vector2D0 = line3.intersection(line1);
}"
3754,"    public Vector2D intersection(final Line other) {
        final double area = this.direction.signedArea(other.direction);
        if (getPrecision().eqZero(area)) {
            // lines are parallel
            return null;
        }

        final double x = Vectors.linearCombination(
                other.direction.getX(), originOffset,
                -direction.getX(), other.originOffset) / area;

        final double y = Vectors.linearCombination(
                other.direction.getY(), originOffset,
                -direction.getY(), other.originOffset) / area;

        return Vector2D.of(x, y);
    }","  public void test6()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(true, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit1, 0.0, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line2 = line1.transform(rotation2D0);
      line0.rayFrom((-880.394639267543));
      vector2D_Unit0.toString();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      vector2D_Unit1.reject((Vector2D) vector2D_Unit0);
      Line line3 = line2.reverse();
      line1.isParallel(line1);
      Vector2D vector2D0 = line3.intersection(line1);
}"
3755,"    public double distance(final Vector2D p) {
        return Math.abs(offset(p));
    }","  public void test7()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(true, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit1, 0.0, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line2 = line1.transform(rotation2D0);
      line0.rayFrom((-880.394639267543));
      vector2D_Unit0.toString();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      vector2D_Unit1.reject((Vector2D) vector2D_Unit0);
      Line line3 = line2.reverse();
      line1.isParallel(line1);
      Vector2D vector2D0 = line3.intersection(line1);
      boolean boolean0 = line2.similarOrientation(line3);
      line2.subspaceTransform(rotation2D0);
      rotation2D0.inverse();
      double double0 = line2.distance((Vector2D) vector2D_Unit0);
}"
3756,"    public boolean eq(final Line other, final Precision.DoubleEquivalence precision) {
        return getOrigin().eq(other.getOrigin(), precision) &&
                precision.eq(getAngle(), other.getAngle());
    }","  public void test8()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(true, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit1, 0.0, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line2 = line1.transform(rotation2D0);
      line0.rayFrom((-880.394639267543));
      vector2D_Unit0.toString();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      vector2D_Unit1.reject((Vector2D) vector2D_Unit0);
      Line line3 = line2.reverse();
      line1.isParallel(line1);
      Vector2D vector2D0 = line3.intersection(line1);
      boolean boolean0 = line2.similarOrientation(line3);
      line2.subspaceTransform(rotation2D0);
      rotation2D0.inverse();
      double double0 = line2.distance((Vector2D) vector2D_Unit0);
      vector2D_Unit1.transform(rotation2D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence2 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence2).eq(anyDouble() , anyDouble());
      boolean boolean1 = line0.eq(line2, precision_DoubleEquivalence2);
}"
3757,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test9()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(true, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit1, 0.0, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line2 = line1.transform(rotation2D0);
      line0.rayFrom((-880.394639267543));
      vector2D_Unit0.toString();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      vector2D_Unit1.reject((Vector2D) vector2D_Unit0);
      Line line3 = line2.reverse();
      line1.isParallel(line1);
      Vector2D vector2D0 = line3.intersection(line1);
      boolean boolean0 = line2.similarOrientation(line3);
      line2.subspaceTransform(rotation2D0);
      rotation2D0.inverse();
      double double0 = line2.distance((Vector2D) vector2D_Unit0);
      vector2D_Unit1.transform(rotation2D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence2 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence2).eq(anyDouble() , anyDouble());
      boolean boolean1 = line0.eq(line2, precision_DoubleEquivalence2);
      line1.contains((Vector2D) vector2D_Unit1);
}"
3758,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test10()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(true, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit1, 0.0, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line2 = line1.transform(rotation2D0);
      line0.rayFrom((-880.394639267543));
      vector2D_Unit0.toString();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      vector2D_Unit1.reject((Vector2D) vector2D_Unit0);
      Line line3 = line2.reverse();
      line1.isParallel(line1);
      Vector2D vector2D0 = line3.intersection(line1);
      boolean boolean0 = line2.similarOrientation(line3);
      line2.subspaceTransform(rotation2D0);
      rotation2D0.inverse();
      double double0 = line2.distance((Vector2D) vector2D_Unit0);
      vector2D_Unit1.transform(rotation2D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence2 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence2).eq(anyDouble() , anyDouble());
      boolean boolean1 = line0.eq(line2, precision_DoubleEquivalence2);
      line1.contains((Vector2D) vector2D_Unit1);
      line0.rayFrom(0.0);
}"
3759,"    public Vector2D intersection(final Line other) {
        final double area = this.direction.signedArea(other.direction);
        if (getPrecision().eqZero(area)) {
            // lines are parallel
            return null;
        }

        final double x = Vectors.linearCombination(
                other.direction.getX(), originOffset,
                -direction.getX(), other.originOffset) / area;

        final double y = Vectors.linearCombination(
                other.direction.getY(), originOffset,
                -direction.getY(), other.originOffset) / area;

        return Vector2D.of(x, y);
    }","  public void test11()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, true, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line1 = line0.transform(rotation2D0);
      Vector2D vector2D0 = line1.intersection(line0);
}"
3760,"    public Vector2D intersection(final Line other) {
        final double area = this.direction.signedArea(other.direction);
        if (getPrecision().eqZero(area)) {
            // lines are parallel
            return null;
        }

        final double x = Vectors.linearCombination(
                other.direction.getX(), originOffset,
                -direction.getX(), other.originOffset) / area;

        final double y = Vectors.linearCombination(
                other.direction.getY(), originOffset,
                -direction.getY(), other.originOffset) / area;

        return Vector2D.of(x, y);
    }","  public void test12()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, true, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line1 = line0.transform(rotation2D0);
      Vector2D vector2D0 = line1.intersection(line0);
}"
3761,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test13()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, true, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line1 = line0.transform(rotation2D0);
      Vector2D vector2D0 = line1.intersection(line0);
      line1.isParallel(line1);
      boolean boolean0 = line0.contains(line1);
}"
3762,"    public boolean contains(final Vector2D p) {
        return getPrecision().eqZero(offset(p));
    }","  public void test14()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, true, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line1 = line0.transform(rotation2D0);
      Vector2D vector2D0 = line1.intersection(line0);
      line1.isParallel(line1);
      boolean boolean0 = line0.contains(line1);
}"
3763,"    public boolean similarOrientation(final Hyperplane<Vector2D> other) {
        final Line otherLine = (Line) other;
        return direction.dot(otherLine.direction) >= 0.0;
    }","  public void test15()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit1, 0.0, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line1 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence1);
      boolean boolean0 = line0.similarOrientation(line1);
}"
3764,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test16()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit1, 0.0, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line1 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence1);
      boolean boolean0 = line0.similarOrientation(line1);
}"
3765,"    public Vector1D toSubspace(final Vector2D point) {
        return Vector1D.of(abscissa(point));
    }","  public void test17()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.intersection(line0);
      line0.toSubspace(vector2D0);
}"
3766,"    public Vector1D toSubspace(final Vector2D point) {
        return Vector1D.of(abscissa(point));
    }","  public void test18()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.intersection(line0);
      line0.toSubspace(vector2D0);
}"
3767,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test19()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.intersection(line0);
      line0.toSubspace(vector2D0);
}"
3768,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test20()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit1, 0.0, precision_DoubleEquivalence0);
      line0.toSubspace((Vector2D) vector2D_Unit0);
}"
3769,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test21()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 787.3417707, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.of((-805.485553746187));
      Line line2 = line1.transform(rotation2D0);
      line2.toSubspace((Vector2D) vector2D_Unit0);
}"
3770,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test22()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit1, 1133.4723091, precision_DoubleEquivalence0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(1133.4723091, 0.0);
      Line line1 = line0.transform(affineTransformMatrix2D0);
      Vector1D vector1D0 = Vector1D.ZERO;
      line1.toSpace(vector1D0);
}"
3771,"    public Vector2D toSpace(final Vector1D point) {
        return toSpace(point.getX());
    }","  public void test23()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit1, 55.61455, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.of(55.61455);
      AffineTransformMatrix2D affineTransformMatrix2D0 = rotation2D0.toMatrix();
      Line line2 = line1.transform(affineTransformMatrix2D0);
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector2D vector2D0 = line2.toSpace(vector1D0);
}"
3772,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test24()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit1, 55.61455, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.of(55.61455);
      AffineTransformMatrix2D affineTransformMatrix2D0 = rotation2D0.toMatrix();
      Line line2 = line1.transform(affineTransformMatrix2D0);
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector2D vector2D0 = line2.toSpace(vector1D0);
}"
3773,"    public Vector2D toSpace(final Vector1D point) {
        return toSpace(point.getX());
    }","  public void test25()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit1, 55.61455, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.of(55.61455);
      AffineTransformMatrix2D affineTransformMatrix2D0 = rotation2D0.toMatrix();
      Line line2 = line1.transform(affineTransformMatrix2D0);
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector2D vector2D0 = line2.toSpace(vector1D0);
}"
3774,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test26()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector2D vector2D0 = line0.toSpace((Vector1D) vector1D_Unit0);
}"
3775,"    public Vector2D toSpace(final Vector1D point) {
        return toSpace(point.getX());
    }","  public void test27()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector2D vector2D0 = line0.toSpace((Vector1D) vector1D_Unit0);
}"
3776,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test28()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 55.61455, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector2D vector2D0 = line1.toSpace(vector1D0);
}"
3777,"    public Vector2D toSpace(final Vector1D point) {
        return toSpace(point.getX());
    }","  public void test29()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 55.61455, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector2D vector2D0 = line1.toSpace(vector1D0);
}"
3778,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test30()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 55.61455, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector2D vector2D0 = line1.toSpace(vector1D0);
}"
3779,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test31()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-0.32684368534274094), precision_DoubleEquivalence0);
      line0.toSpace(Double.NaN);
}"
3780,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test32()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      line0.toSpace(0.0);
}"
3781,"    public Vector2D toSpace(final Vector1D point) {
        return toSpace(point.getX());
    }","  public void test33()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(2731.226933280934, 0.5403023058681398);
      Vector2D.Unit vector2D_Unit0 = vector2D0.normalize();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1928.7130778), precision_DoubleEquivalence0);
      Vector2D vector2D1 = line0.toSpace((-699.2189));
}"
3782,"    public Vector2D toSpace(final Vector1D point) {
        return toSpace(point.getX());
    }","  public void test34()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(2731.226933280934, 0.5403023058681398);
      Vector2D.Unit vector2D_Unit0 = vector2D0.normalize();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1928.7130778), precision_DoubleEquivalence0);
      Vector2D vector2D1 = line0.toSpace((-699.2189));
}"
3783,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test35()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 787.3417707, precision_DoubleEquivalence0);
      line0.reverseRayTo(3357.0);
}"
3784,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test36()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1453.39, precision_DoubleEquivalence0);
      line0.rayFrom((Vector2D) vector2D_Unit0);
}"
3785,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test37()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = new Line(vector2D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      Vector2D vector2D0 = line0.project((Vector2D) vector2D_Unit0);
}"
3786,"    public Vector2D project(final Vector2D point) {
        return toSpace(toSubspace(point));
    }","  public void test38()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = new Line(vector2D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      Vector2D vector2D0 = line0.project((Vector2D) vector2D_Unit0);
}"
3787,"    public Vector2D project(final Vector2D point) {
        return toSpace(toSubspace(point));
    }","  public void test39()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1940.0, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.getOrigin();
      Vector2D vector2D1 = line0.project(vector2D0);
}"
3788,"    public Vector2D project(final Vector2D point) {
        return toSpace(toSubspace(point));
    }","  public void test40()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit1, 1453.39, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.project((Vector2D) vector2D_Unit1);
}"
3789,"    public Vector2D project(final Vector2D point) {
        return toSpace(toSubspace(point));
    }","  public void test41()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit1, 1453.39, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.project((Vector2D) vector2D_Unit1);
}"
3790,"    public Vector2D pointAt(final double abscissa, final double offset) {
        final double pointOffset = offset - originOffset;
        return Vector2D.of(Vectors.linearCombination(abscissa, direction.getX(),  pointOffset, direction.getY()),
                            Vectors.linearCombination(abscissa, direction.getY(), -pointOffset, direction.getX()));
    }","  public void test42()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, Double.NaN, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.pointAt(Double.NaN, (-1145.835481429982));
}"
3791,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test43()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(165.69591222341, (-1298.2249405));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1298.2249405), precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.pointAt(Double.NEGATIVE_INFINITY, 165.69591222341);
}"
3792,"    public Vector2D pointAt(final double abscissa, final double offset) {
        final double pointOffset = offset - originOffset;
        return Vector2D.of(Vectors.linearCombination(abscissa, direction.getX(),  pointOffset, direction.getY()),
                            Vectors.linearCombination(abscissa, direction.getY(), -pointOffset, direction.getX()));
    }","  public void test44()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(165.69591222341, (-1298.2249405));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1298.2249405), precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.pointAt(Double.NEGATIVE_INFINITY, 165.69591222341);
}"
3793,"    public Vector2D pointAt(final double abscissa, final double offset) {
        final double pointOffset = offset - originOffset;
        return Vector2D.of(Vectors.linearCombination(abscissa, direction.getX(),  pointOffset, direction.getY()),
                            Vectors.linearCombination(abscissa, direction.getY(), -pointOffset, direction.getX()));
    }","  public void test45()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(165.69591222341, (-1298.2249405));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1298.2249405), precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.pointAt(Double.NEGATIVE_INFINITY, 165.69591222341);
}"
3794,"    public Vector2D pointAt(final double abscissa, final double offset) {
        final double pointOffset = offset - originOffset;
        return Vector2D.of(Vectors.linearCombination(abscissa, direction.getX(),  pointOffset, direction.getY()),
                            Vectors.linearCombination(abscissa, direction.getY(), -pointOffset, direction.getX()));
    }","  public void test46()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.pointAt((-1340.86612162371), 0.0);
}"
3795,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test47()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.pointAt((-1340.86612162371), 0.0);
}"
3796,"    public Vector2D pointAt(final double abscissa, final double offset) {
        final double pointOffset = offset - originOffset;
        return Vector2D.of(Vectors.linearCombination(abscissa, direction.getX(),  pointOffset, direction.getY()),
                            Vectors.linearCombination(abscissa, direction.getY(), -pointOffset, direction.getX()));
    }","  public void test48()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.pointAt((-1340.86612162371), 0.0);
}"
3797,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test49()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 729.205442964, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Vector2D vector2D0 = line1.pointAt((-335.2697559929026), 729.205442964);
}"
3798,"    public Vector2D pointAt(final double abscissa, final double offset) {
        final double pointOffset = offset - originOffset;
        return Vector2D.of(Vectors.linearCombination(abscissa, direction.getX(),  pointOffset, direction.getY()),
                            Vectors.linearCombination(abscissa, direction.getY(), -pointOffset, direction.getX()));
    }","  public void test50()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 729.205442964, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Vector2D vector2D0 = line1.pointAt((-335.2697559929026), 729.205442964);
}"
3799,"    public Vector2D pointAt(final double abscissa, final double offset) {
        final double pointOffset = offset - originOffset;
        return Vector2D.of(Vectors.linearCombination(abscissa, direction.getX(),  pointOffset, direction.getY()),
                            Vectors.linearCombination(abscissa, direction.getY(), -pointOffset, direction.getX()));
    }","  public void test51()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 729.205442964, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Vector2D vector2D0 = line1.pointAt((-335.2697559929026), 729.205442964);
}"
3800,"    public double offset(final Vector2D point) {
        return originOffset - direction.signedArea(point);
    }","  public void test52()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 15.001125902863198, precision_DoubleEquivalence0);
      double double0 = line0.offset((Vector2D) vector2D_Unit0);
}"
3801,"    public double offset(final Vector2D point) {
        return originOffset - direction.signedArea(point);
    }","  public void test53()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-1.5707963267948966), precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.of((-1.5707963267948966));
      AffineTransformMatrix2D affineTransformMatrix2D0 = rotation2D0.toMatrix();
      Line line2 = line1.transform(affineTransformMatrix2D0);
      line0.isParallel(line2);
      double double0 = line2.offset(line1);
}"
3802,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test54()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(5283.827099409774, 5283.827099409774);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 5283.827099409774, precision_DoubleEquivalence0);
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line1 = line0.transform(rotation2D0);
      Vector2D vector2D0 = line1.intersection(line0);
}"
3803,"    public Vector2D intersection(final Line other) {
        final double area = this.direction.signedArea(other.direction);
        if (getPrecision().eqZero(area)) {
            // lines are parallel
            return null;
        }

        final double x = Vectors.linearCombination(
                other.direction.getX(), originOffset,
                -direction.getX(), other.originOffset) / area;

        final double y = Vectors.linearCombination(
                other.direction.getY(), originOffset,
                -direction.getY(), other.originOffset) / area;

        return Vector2D.of(x, y);
    }","  public void test55()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(5283.827099409774, 5283.827099409774);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 5283.827099409774, precision_DoubleEquivalence0);
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line1 = line0.transform(rotation2D0);
      Vector2D vector2D0 = line1.intersection(line0);
}"
3804,"    public Vector2D intersection(final Line other) {
        final double area = this.direction.signedArea(other.direction);
        if (getPrecision().eqZero(area)) {
            // lines are parallel
            return null;
        }

        final double x = Vectors.linearCombination(
                other.direction.getX(), originOffset,
                -direction.getX(), other.originOffset) / area;

        final double y = Vectors.linearCombination(
                other.direction.getY(), originOffset,
                -direction.getY(), other.originOffset) / area;

        return Vector2D.of(x, y);
    }","  public void test56()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(5283.827099409774, 5283.827099409774);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 5283.827099409774, precision_DoubleEquivalence0);
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line1 = line0.transform(rotation2D0);
      Vector2D vector2D0 = line1.intersection(line0);
}"
3805,"    public Vector2D intersection(final Line other) {
        final double area = this.direction.signedArea(other.direction);
        if (getPrecision().eqZero(area)) {
            // lines are parallel
            return null;
        }

        final double x = Vectors.linearCombination(
                other.direction.getX(), originOffset,
                -direction.getX(), other.originOffset) / area;

        final double y = Vectors.linearCombination(
                other.direction.getY(), originOffset,
                -direction.getY(), other.originOffset) / area;

        return Vector2D.of(x, y);
    }","  public void test57()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(2731.226933280934, 0.5403023058681398);
      Vector2D.Unit vector2D_Unit0 = vector2D0.normalize();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-1928.7130778), precision_DoubleEquivalence0);
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation(vector2D0, rotation2D0);
      Line line1 = line0.transform(affineTransformMatrix2D0);
      Vector2D vector2D1 = line0.intersection(line1);
}"
3806,"    public Vector2D intersection(final Line other) {
        final double area = this.direction.signedArea(other.direction);
        if (getPrecision().eqZero(area)) {
            // lines are parallel
            return null;
        }

        final double x = Vectors.linearCombination(
                other.direction.getX(), originOffset,
                -direction.getX(), other.originOffset) / area;

        final double y = Vectors.linearCombination(
                other.direction.getY(), originOffset,
                -direction.getY(), other.originOffset) / area;

        return Vector2D.of(x, y);
    }","  public void test58()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(2731.226933280934, 0.5403023058681398);
      Vector2D.Unit vector2D_Unit0 = vector2D0.normalize();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-1928.7130778), precision_DoubleEquivalence0);
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation(vector2D0, rotation2D0);
      Line line1 = line0.transform(affineTransformMatrix2D0);
      Vector2D vector2D1 = line0.intersection(line1);
}"
3807,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test59()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit1, 0.0, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      Line line1 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence1);
      Vector2D vector2D0 = line1.intersection(line0);
}"
3808,"    public Vector2D intersection(final Line other) {
        final double area = this.direction.signedArea(other.direction);
        if (getPrecision().eqZero(area)) {
            // lines are parallel
            return null;
        }

        final double x = Vectors.linearCombination(
                other.direction.getX(), originOffset,
                -direction.getX(), other.originOffset) / area;

        final double y = Vectors.linearCombination(
                other.direction.getY(), originOffset,
                -direction.getY(), other.originOffset) / area;

        return Vector2D.of(x, y);
    }","  public void test60()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit1, 0.0, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      Line line1 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence1);
      Vector2D vector2D0 = line1.intersection(line0);
}"
3809,"    public Vector2D intersection(final Line other) {
        final double area = this.direction.signedArea(other.direction);
        if (getPrecision().eqZero(area)) {
            // lines are parallel
            return null;
        }

        final double x = Vectors.linearCombination(
                other.direction.getX(), originOffset,
                -direction.getX(), other.originOffset) / area;

        final double y = Vectors.linearCombination(
                other.direction.getY(), originOffset,
                -direction.getY(), other.originOffset) / area;

        return Vector2D.of(x, y);
    }","  public void test61()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit1, 0.0, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      Line line1 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence1);
      Vector2D vector2D0 = line1.intersection(line0);
}"
3810,"    public Vector2D intersection(final Line other) {
        final double area = this.direction.signedArea(other.direction);
        if (getPrecision().eqZero(area)) {
            // lines are parallel
            return null;
        }

        final double x = Vectors.linearCombination(
                other.direction.getX(), originOffset,
                -direction.getX(), other.originOffset) / area;

        final double y = Vectors.linearCombination(
                other.direction.getY(), originOffset,
                -direction.getY(), other.originOffset) / area;

        return Vector2D.of(x, y);
    }","  public void test62()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 2856.452098310511, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      Line line1 = new Line(vector2D_Unit0, (-1.0), precision_DoubleEquivalence1);
      Vector2D vector2D0 = line1.intersection(line0);
}"
3811,"    public Vector2D intersection(final Line other) {
        final double area = this.direction.signedArea(other.direction);
        if (getPrecision().eqZero(area)) {
            // lines are parallel
            return null;
        }

        final double x = Vectors.linearCombination(
                other.direction.getX(), originOffset,
                -direction.getX(), other.originOffset) / area;

        final double y = Vectors.linearCombination(
                other.direction.getY(), originOffset,
                -direction.getY(), other.originOffset) / area;

        return Vector2D.of(x, y);
    }","  public void test63()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 2856.452098310511, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      Line line1 = new Line(vector2D_Unit0, (-1.0), precision_DoubleEquivalence1);
      Vector2D vector2D0 = line1.intersection(line0);
}"
3812,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test64()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      double double0 = line0.getOriginOffset();
}"
3813,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test65()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1.0, precision_DoubleEquivalence0);
      double double0 = line0.getOriginOffset();
}"
3814,"    public Vector2D getOrigin() {
        return toSpace(Vector1D.ZERO);
    }","  public void test66()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, Double.NEGATIVE_INFINITY, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.getOrigin();
}"
3815,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test67()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.99, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.getOrigin();
      double double0 = line0.offset(vector2D0);
}"
3816,"    public double offset(final Vector2D point) {
        return originOffset - direction.signedArea(point);
    }","  public void test68()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.99, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.getOrigin();
      double double0 = line0.offset(vector2D0);
}"
3817,"    public Vector2D getOrigin() {
        return toSpace(Vector1D.ZERO);
    }","  public void test69()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit1, (-1665.5785465), precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.getOrigin();
}"
3818,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test70()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1.0), precision_DoubleEquivalence0);
      line0.getOffsetDirection();
}"
3819,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test71()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      line0.getOffsetDirection();
}"
3820,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test72()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      line0.getOffsetDirection();
}"
3821,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test73()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, 1.0, precision_DoubleEquivalence0);
      line0.getDirection();
}"
3822,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test74()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      line0.getDirection();
}"
3823,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test75()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit1, (-1665.5785465), precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createShear((-482.02), (-1665.5785465));
      Line line2 = line1.transform(affineTransformMatrix2D0);
      line2.getDirection();
}"
3824,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test76()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 787.3417707, precision_DoubleEquivalence0);
      line0.getAngle();
}"
3825,"    public double distance(final Vector2D p) {
        return Math.abs(offset(p));
    }","  public void test77()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1453.39, precision_DoubleEquivalence0);
      double double0 = line0.distance((Vector2D) vector2D_Unit0);
}"
3826,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test78()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1453.39, precision_DoubleEquivalence0);
      double double0 = line0.distance((Vector2D) vector2D_Unit0);
}"
3827,"    public double offset(final Vector2D point) {
        return originOffset - direction.signedArea(point);
    }","  public void test79()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, true, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-1.5707963267948966), precision_DoubleEquivalence0);
      Rotation2D rotation2D0 = Rotation2D.of((-1.5707963267948966));
      AffineTransformMatrix2D affineTransformMatrix2D0 = rotation2D0.toMatrix();
      Line line1 = line0.transform(affineTransformMatrix2D0);
      line0.isParallel(line1);
      double double0 = line1.offset(line0);
}"
3828,"    public double distance(final Vector2D p) {
        return Math.abs(offset(p));
    }","  public void test80()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, true, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-1.5707963267948966), precision_DoubleEquivalence0);
      Rotation2D rotation2D0 = Rotation2D.of((-1.5707963267948966));
      AffineTransformMatrix2D affineTransformMatrix2D0 = rotation2D0.toMatrix();
      Line line1 = line0.transform(affineTransformMatrix2D0);
      line0.isParallel(line1);
      double double0 = line1.offset(line0);
      line0.contains((Vector2D) vector2D_Unit0);
      double double1 = line1.distance(line0);
}"
3829,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test81()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, true, false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-1.5707963267948966), precision_DoubleEquivalence0);
      Rotation2D rotation2D0 = Rotation2D.of((-1.5707963267948966));
      AffineTransformMatrix2D affineTransformMatrix2D0 = rotation2D0.toMatrix();
      Line line1 = line0.transform(affineTransformMatrix2D0);
      line0.isParallel(line1);
      double double0 = line1.offset(line0);
      line0.contains((Vector2D) vector2D_Unit0);
      double double1 = line1.distance(line0);
}"
3830,"    public double angle(final Line other) {
        final double thisAngle = Math.atan2(direction.getY(), direction.getX());
        final double otherAngle = Math.atan2(other.direction.getY(), other.direction.getX());

        return Angle.Rad.WITHIN_MINUS_PI_AND_PI.applyAsDouble(otherAngle - thisAngle);
    }","  public void test82()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-1.0), precision_DoubleEquivalence0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation(835.2126020433);
      Line line1 = line0.transform(affineTransformMatrix2D0);
      double double0 = line1.angle(line0);
}"
3831,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test83()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-1.0), precision_DoubleEquivalence0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation(835.2126020433);
      Line line1 = line0.transform(affineTransformMatrix2D0);
      double double0 = line1.angle(line0);
}"
3832,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test84()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-1.0), precision_DoubleEquivalence0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation(835.2126020433);
      Line line1 = line0.transform(affineTransformMatrix2D0);
      double double0 = line1.angle(line0);
}"
3833,"    public double angle(final Line other) {
        final double thisAngle = Math.atan2(direction.getY(), direction.getX());
        final double otherAngle = Math.atan2(other.direction.getY(), other.direction.getX());

        return Angle.Rad.WITHIN_MINUS_PI_AND_PI.applyAsDouble(otherAngle - thisAngle);
    }","  public void test85()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      double double0 = line1.angle(line0);
}"
3834,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test86()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      double double0 = line1.angle(line0);
}"
3835,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test87()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      double double0 = line1.angle(line0);
}"
3836,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test88()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit1, 0.0, precision_DoubleEquivalence0);
      line0.abscissa(vector2D_Unit0);
}"
3837,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test89()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.5, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      line1.abscissa(vector2D_Unit0);
}"
3838,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test90()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.5, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      line1.abscissa(vector2D_Unit0);
}"
3839,"    public Line transform(final Transform<Vector2D> transform) {
        final Vector2D origin = getOrigin();

        final Vector2D tOrigin = transform.apply(origin);
        final Vector2D tOriginPlusDir = transform.apply(origin.add(getDirection()));

        return Lines.fromPoints(tOrigin, tOriginPlusDir, getPrecision());
    }","  public void test91()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-2590.3971184727), (-2590.3971184727));
      Vector2D.Unit vector2D_Unit0 = vector2D0.orthogonal();
      Line line0 = new Line(vector2D_Unit0, (-2590.3971184727), (Precision.DoubleEquivalence) null);
      Rotation2D rotation2D0 = Rotation2D.identity();
      AffineTransformMatrix2D affineTransformMatrix2D0 = rotation2D0.toMatrix();
      // Undeclared exception!
      try { 
        line0.transform(affineTransformMatrix2D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
3840,"    public Line transform(final Transform<Vector2D> transform) {
        final Vector2D origin = getOrigin();

        final Vector2D tOrigin = transform.apply(origin);
        final Vector2D tOriginPlusDir = transform.apply(origin.add(getDirection()));

        return Lines.fromPoints(tOrigin, tOriginPlusDir, getPrecision());
    }","  public void test92()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 1453.39, precision_DoubleEquivalence0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createShear(Double.NEGATIVE_INFINITY, 1453.39);
      // Undeclared exception!
      try { 
        line0.transform(affineTransformMatrix2D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
3841,"    public Vector1D toSubspace(final Vector2D point) {
        return Vector1D.of(abscissa(point));
    }","  public void test93()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, (-1.0), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.toSubspace((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3842,"    public String toString() {
        return MessageFormat.format(TO_STRING_FORMAT,
                getClass().getSimpleName(),
                getOrigin(),
                getDirection());
    }","  public void test94()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, 1171.422534, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3843,"    public Vector2D toSpace(final Vector1D point) {
        return toSpace(point.getX());
    }","  public void test95()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1.0), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.toSpace((Vector1D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3844,"    public Vector2D toSpace(final Vector1D point) {
        return toSpace(point.getX());
    }","  public void test96()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, 0.0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.toSpace((-0.32684368534274094));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3845,"    public SubspaceTransform subspaceTransform(final Transform<Vector2D> transform) {
        final Vector2D origin = getOrigin();

        final Vector2D p1 = transform.apply(origin);
        final Vector2D p2 = transform.apply(origin.add(direction));

        final Line tLine = Lines.fromPoints(p1, p2, getPrecision());

        final Vector1D tSubspaceOrigin = tLine.toSubspace(p1);
        final Vector1D tSubspaceDirection = tSubspaceOrigin.vectorTo(tLine.toSubspace(p2));

        final double translation = tSubspaceOrigin.getX();
        final double scale = tSubspaceDirection.getX();

        final AffineTransformMatrix1D subspaceTransform = AffineTransformMatrix1D.of(scale, translation);

        return new SubspaceTransform(tLine, subspaceTransform);
    }","  public void test97()  throws Throwable  {
      Line line0 = new Line((Vector2D.Unit) null, 0.0, (Precision.DoubleEquivalence) null);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createShear(335.0, (-2677.069452653));
      // Undeclared exception!
      try { 
        line0.subspaceTransform(affineTransformMatrix2D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3846,"    public SubspaceTransform subspaceTransform(final Transform<Vector2D> transform) {
        final Vector2D origin = getOrigin();

        final Vector2D p1 = transform.apply(origin);
        final Vector2D p2 = transform.apply(origin.add(direction));

        final Line tLine = Lines.fromPoints(p1, p2, getPrecision());

        final Vector1D tSubspaceOrigin = tLine.toSubspace(p1);
        final Vector1D tSubspaceDirection = tSubspaceOrigin.vectorTo(tLine.toSubspace(p2));

        final double translation = tSubspaceOrigin.getX();
        final double scale = tSubspaceDirection.getX();

        final AffineTransformMatrix1D subspaceTransform = AffineTransformMatrix1D.of(scale, translation);

        return new SubspaceTransform(tLine, subspaceTransform);
    }","  public void test98()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(1810.5888, 1810.5888);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 1810.5888, precision_DoubleEquivalence0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation((Vector2D) vector2D_Unit0);
      // Undeclared exception!
      try { 
        line0.subspaceTransform(affineTransformMatrix2D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Line direction cannot be zero
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3847,"    public boolean similarOrientation(final Hyperplane<Vector2D> other) {
        final Line otherLine = (Line) other;
        return direction.dot(otherLine.direction) >= 0.0;
    }","  public void test99()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1316.2, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.similarOrientation((Hyperplane<Vector2D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3848,"    public Segment segment(final double a, final double b) {
        return Lines.segmentFromLocations(this, a, b);
    }","  public void test100()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, Double.NEGATIVE_INFINITY, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.segment((Vector2D) vector2D_Unit0, (Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
3849,"    public Segment segment(final double a, final double b) {
        return Lines.segmentFromLocations(this, a, b);
    }","  public void test101()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1.0), (-1.0));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-1.0), precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.intersection(line0);
      // Undeclared exception!
      try { 
        line0.segment(vector2D0, vector2D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid line segment locations: NaN, NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3850,"    public Segment segment(final double a, final double b) {
        return Lines.segmentFromLocations(this, a, b);
    }","  public void test102()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, 0.0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.segment((-2921.487), 0.0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3851,"    public Segment segment(final double a, final double b) {
        return Lines.segmentFromLocations(this, a, b);
    }","  public void test103()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1154.5384246390174, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.segment(Double.POSITIVE_INFINITY, 1154.5384246390174);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid line segment locations: Infinity, 1154.5384246390174
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3852,"    public ReverseRay reverseRayTo(final Vector2D endPoint) {
        return Lines.reverseRayFromPoint(this, endPoint);
    }","  public void test104()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1.0918208453160845, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.reverseRayTo((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3853,"    public ReverseRay reverseRayTo(final Vector2D endPoint) {
        return Lines.reverseRayFromPoint(this, endPoint);
    }","  public void test105()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.intersection(line0);
      // Undeclared exception!
      try { 
        line0.reverseRayTo(vector2D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid reverse ray end point: (NaN, NaN)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3854,"    public ReverseRay reverseRayTo(final Vector2D endPoint) {
        return Lines.reverseRayFromPoint(this, endPoint);
    }","  public void test106()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, 0.6, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.reverseRayTo(0.6);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3855,"    public Line reverse() {
        return new Line(direction.negate(), -originOffset, getPrecision());
    }","  public void test107()  throws Throwable  {
      Line line0 = new Line((Vector2D.Unit) null, 2950.9, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        line0.reverse();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3856,"    public Ray rayFrom(final Vector2D startPoint) {
        return Lines.rayFromPoint(this, startPoint);
    }","  public void test108()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1083.47277), precision_DoubleEquivalence0);
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        line0.rayFrom(vector2D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid ray start point: (-Infinity, -Infinity)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3857,"    public Ray rayFrom(final Vector2D startPoint) {
        return Lines.rayFromPoint(this, startPoint);
    }","  public void test109()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, (-155.945596482), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.rayFrom((-155.945596482));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3858,"    public Ray rayFrom(final Vector2D startPoint) {
        return Lines.rayFromPoint(this, startPoint);
    }","  public void test110()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.rayFrom(Double.NaN);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid ray start location: NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3859,"    public Vector2D project(final Vector2D point) {
        return toSpace(toSubspace(point));
    }","  public void test111()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.9999, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.project((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
3860,"    public Vector2D pointAt(final double abscissa, final double offset) {
        final double pointOffset = offset - originOffset;
        return Vector2D.of(Vectors.linearCombination(abscissa, direction.getX(),  pointOffset, direction.getY()),
                            Vectors.linearCombination(abscissa, direction.getY(), -pointOffset, direction.getX()));
    }","  public void test112()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, 1.073741824E9, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.pointAt((-3264.51758694), 913.58133136);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3861,"    public double offset(final Vector2D point) {
        return originOffset - direction.signedArea(point);
    }","  public void test113()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, (-1451.394159765), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.offset((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3862,"    public double offset(final Vector2D point) {
        return originOffset - direction.signedArea(point);
    }","  public void test114()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Line line0 = new Line(vector2D_Unit0, 1940.0, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        line0.offset(line0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3863,"    public boolean isParallel(final Line line) {
        final double area = direction.signedArea(line.direction);
        return getPrecision().eqZero(area);
    }","  public void test115()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1214.45, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.isParallel((Line) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3864,"    public Vector2D intersection(final Line other) {
        final double area = this.direction.signedArea(other.direction);
        if (getPrecision().eqZero(area)) {
            // lines are parallel
            return null;
        }

        final double x = Vectors.linearCombination(
                other.direction.getX(), originOffset,
                -direction.getX(), other.originOffset) / area;

        final double y = Vectors.linearCombination(
                other.direction.getY(), originOffset,
                -direction.getY(), other.originOffset) / area;

        return Vector2D.of(x, y);
    }","  public void test116()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1721.5847585833), (-1721.5847585833));
      Line line0 = new Line(vector2D_Unit0, (-1721.5847585833), (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        line0.intersection((Line) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3865,"    public Vector2D getOrigin() {
        return toSpace(Vector1D.ZERO);
    }","  public void test117()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, 0.0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.getOrigin();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3866,"    public Vector2D getOffsetDirection() {
        return Vector2D.of(direction.getY(), -direction.getX());
    }","  public void test118()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, 0.0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.getOffsetDirection();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3867,"    public double getAngle() {
        final double angle = Math.atan2(direction.getY(), direction.getX());
        return Angle.Rad.WITHIN_0_AND_2PI.applyAsDouble(angle);
    }","  public void test119()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, 0.9999, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.getAngle();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3868,"    public boolean eq(final Line other, final Precision.DoubleEquivalence precision) {
        return getOrigin().eq(other.getOrigin(), precision) &&
                precision.eq(getAngle(), other.getAngle());
    }","  public void test120()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.eq(line0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
3869,"    public double distance(final Vector2D p) {
        return Math.abs(offset(p));
    }","  public void test121()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, 0.5403023058681398, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.distance((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3870,"    public double distance(final Vector2D p) {
        return Math.abs(offset(p));
    }","  public void test122()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 2232.483215031, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.distance((Line) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3871,"    public boolean contains(final Vector2D p) {
        return getPrecision().eqZero(offset(p));
    }","  public void test123()  throws Throwable  {
      Line line0 = new Line((Vector2D.Unit) null, 1.0, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        line0.contains((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3872,"    public boolean contains(final Vector2D p) {
        return getPrecision().eqZero(offset(p));
    }","  public void test124()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-3544.48814900487), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.contains((Line) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3873,"    public double angle(final Line other) {
        final double thisAngle = Math.atan2(direction.getY(), direction.getX());
        final double otherAngle = Math.atan2(other.direction.getY(), other.direction.getX());

        return Angle.Rad.WITHIN_MINUS_PI_AND_PI.applyAsDouble(otherAngle - thisAngle);
    }","  public void test125()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, 0.0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.angle((Line) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3874,"    public double abscissa(final Vector2D point) {
        return direction.dot(point);
    }","  public void test126()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line((Vector2D.Unit) null, (-1.0), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.abscissa((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
3875,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test127()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      double double0 = line0.offset(line0);
}"
3876,"    public double offset(final Vector2D point) {
        return originOffset - direction.signedArea(point);
    }","  public void test128()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      double double0 = line0.offset(line0);
}"
3877,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test129()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 1940.0, precision_DoubleEquivalence0);
      double double0 = line0.offset(line0);
}"
3878,"    public double offset(final Vector2D point) {
        return originOffset - direction.signedArea(point);
    }","  public void test130()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 1940.0, precision_DoubleEquivalence0);
      double double0 = line0.offset(line0);
}"
3879,"    public Vector2D project(final Vector2D point) {
        return toSpace(toSubspace(point));
    }","  public void test131()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.99, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.project((Vector2D) vector2D_Unit0);
}"
3880,"    public Vector2D project(final Vector2D point) {
        return toSpace(toSubspace(point));
    }","  public void test132()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.99, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.project((Vector2D) vector2D_Unit0);
}"
3881,"    public Vector2D toSpace(final Vector1D point) {
        return toSpace(point.getX());
    }","  public void test133()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 55.61455, precision_DoubleEquivalence0);
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector2D vector2D0 = line0.toSpace(vector1D0);
}"
3882,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test134()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 55.61455, precision_DoubleEquivalence0);
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector2D vector2D0 = line0.toSpace(vector1D0);
}"
3883,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test135()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      line0.abscissa(vector2D_Unit0);
}"
3884,"    public double offset(final Vector2D point) {
        return originOffset - direction.signedArea(point);
    }","  public void test136()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-2957.4356884704), (-2957.4356884704));
      Vector2D.Unit vector2D_Unit0 = vector2D0.normalizeOrNull();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-2957.4356884704), precision_DoubleEquivalence0);
      double double0 = line0.offset(vector2D0);
}"
3885,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test137()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 729.205442964, precision_DoubleEquivalence0);
      line0.getDirection();
}"
3886,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof Line)) {
            return false;
        }

        final Line other = (Line) obj;

        return Objects.equals(this.direction, other.direction) &&
                Double.compare(this.originOffset, other.originOffset) == 0 &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test138()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 729.205442964, precision_DoubleEquivalence0);
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation((Vector2D) vector2D_Unit0, rotation2D0);
      Line line1 = line0.transform(affineTransformMatrix2D0);
      boolean boolean0 = line1.equals(line0);
}"
3887,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof Line)) {
            return false;
        }

        final Line other = (Line) obj;

        return Objects.equals(this.direction, other.direction) &&
                Double.compare(this.originOffset, other.originOffset) == 0 &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test139()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit1, (-846.104), precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line2 = line1.transform(rotation2D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line3 = new Line(vector2D_Unit0, (-846.104), precision_DoubleEquivalence1);
      boolean boolean0 = line3.equals(line2);
}"
3888,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test140()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit1, (-846.104), precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line2 = line1.transform(rotation2D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line3 = new Line(vector2D_Unit0, (-846.104), precision_DoubleEquivalence1);
      boolean boolean0 = line3.equals(line2);
}"
3889,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof Line)) {
            return false;
        }

        final Line other = (Line) obj;

        return Objects.equals(this.direction, other.direction) &&
                Double.compare(this.originOffset, other.originOffset) == 0 &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test141()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit1, (-846.104), precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line2 = line1.transform(rotation2D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line3 = new Line(vector2D_Unit0, (-846.104), precision_DoubleEquivalence1);
      boolean boolean0 = line3.equals(line2);
}"
3890,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof Line)) {
            return false;
        }

        final Line other = (Line) obj;

        return Objects.equals(this.direction, other.direction) &&
                Double.compare(this.originOffset, other.originOffset) == 0 &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test142()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit1, 0.0, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line2 = line1.transform(rotation2D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line3 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence1);
      boolean boolean0 = line3.equals(line2);
}"
3891,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test143()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit1, 0.0, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line2 = line1.transform(rotation2D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line3 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence1);
      boolean boolean0 = line3.equals(line2);
}"
3892,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof Line)) {
            return false;
        }

        final Line other = (Line) obj;

        return Objects.equals(this.direction, other.direction) &&
                Double.compare(this.originOffset, other.originOffset) == 0 &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test144()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit1, 0.0, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line2 = line1.transform(rotation2D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line3 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence1);
      boolean boolean0 = line3.equals(line2);
}"
3893,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test145()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit1, 0.0, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line2 = line1.transform(rotation2D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line3 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence1);
      boolean boolean0 = line3.equals(line2);
}"
3894,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test146()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1316.2, precision_DoubleEquivalence0);
      boolean boolean0 = line0.equals(vector2D_Unit0);
}"
3895,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof Line)) {
            return false;
        }

        final Line other = (Line) obj;

        return Objects.equals(this.direction, other.direction) &&
                Double.compare(this.originOffset, other.originOffset) == 0 &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test147()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1316.2, precision_DoubleEquivalence0);
      boolean boolean0 = line0.equals(vector2D_Unit0);
}"
3896,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof Line)) {
            return false;
        }

        final Line other = (Line) obj;

        return Objects.equals(this.direction, other.direction) &&
                Double.compare(this.originOffset, other.originOffset) == 0 &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test148()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      boolean boolean0 = line0.equals(line0);
}"
3897,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test149()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      boolean boolean0 = line0.equals(line0);
}"
3898,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test150()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line2 = line1.transform(rotation2D0);
      boolean boolean0 = line1.equals(line2);
}"
3899,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof Line)) {
            return false;
        }

        final Line other = (Line) obj;

        return Objects.equals(this.direction, other.direction) &&
                Double.compare(this.originOffset, other.originOffset) == 0 &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test151()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line2 = line1.transform(rotation2D0);
      boolean boolean0 = line1.equals(line2);
}"
3900,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test152()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line2 = line1.transform(rotation2D0);
      boolean boolean0 = line1.equals(line2);
}"
3901,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        } else if (!(obj instanceof Line)) {
            return false;
        }

        final Line other = (Line) obj;

        return Objects.equals(this.direction, other.direction) &&
                Double.compare(this.originOffset, other.originOffset) == 0 &&
                Objects.equals(this.getPrecision(), other.getPrecision());
    }","  public void test153()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Rotation2D rotation2D0 = Rotation2D.identity();
      Line line2 = line1.transform(rotation2D0);
      boolean boolean0 = line1.equals(line2);
}"
3902,"    public boolean eq(final Line other, final Precision.DoubleEquivalence precision) {
        return getOrigin().eq(other.getOrigin(), precision) &&
                precision.eq(getAngle(), other.getAngle());
    }","  public void test154()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1.0918208453160845, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(precision_DoubleEquivalence1).eq(anyDouble() , anyDouble());
      boolean boolean0 = line0.eq(line0, precision_DoubleEquivalence1);
}"
3903,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test155()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1.0918208453160845, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(precision_DoubleEquivalence1).eq(anyDouble() , anyDouble());
      boolean boolean0 = line0.eq(line0, precision_DoubleEquivalence1);
}"
3904,"    public boolean contains(final Vector2D p) {
        return getPrecision().eqZero(offset(p));
    }","  public void test156()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      boolean boolean0 = line0.contains(line0);
}"
3905,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test157()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      boolean boolean0 = line0.contains(line0);
}"
3906,"    public boolean similarOrientation(final Hyperplane<Vector2D> other) {
        final Line otherLine = (Line) other;
        return direction.dot(otherLine.direction) >= 0.0;
    }","  public void test158()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      boolean boolean0 = line0.similarOrientation(line0);
}"
3907,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test159()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      boolean boolean0 = line0.similarOrientation(line0);
}"
3908,"    public boolean contains(final Vector2D p) {
        return getPrecision().eqZero(offset(p));
    }","  public void test160()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      line0.contains((Vector2D) vector2D_Unit0);
      boolean boolean0 = line0.contains(line0);
}"
3909,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test161()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      line0.contains((Vector2D) vector2D_Unit0);
      boolean boolean0 = line0.contains(line0);
}"
3910,"    public Vector2D intersection(final Line other) {
        final double area = this.direction.signedArea(other.direction);
        if (getPrecision().eqZero(area)) {
            // lines are parallel
            return null;
        }

        final double x = Vectors.linearCombination(
                other.direction.getX(), originOffset,
                -direction.getX(), other.originOffset) / area;

        final double y = Vectors.linearCombination(
                other.direction.getY(), originOffset,
                -direction.getY(), other.originOffset) / area;

        return Vector2D.of(x, y);
    }","  public void test162()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      Line line1 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence1);
      Vector2D vector2D0 = line1.intersection(line0);
}"
3911,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test163()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      Line line1 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence1);
      Vector2D vector2D0 = line1.intersection(line0);
      line0.project(vector2D0);
}"
3912,"    public Vector2D project(final Vector2D point) {
        return toSpace(toSubspace(point));
    }","  public void test164()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      Line line1 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence1);
      Vector2D vector2D0 = line1.intersection(line0);
      line0.project(vector2D0);
}"
3913,"    public Vector2D project(final Vector2D point) {
        return toSpace(toSubspace(point));
    }","  public void test165()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eqZero(anyDouble());
      Line line1 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence1);
      Vector2D vector2D0 = line1.intersection(line0);
      line0.project(vector2D0);
}"
3914,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test166()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 729.205442964, precision_DoubleEquivalence0);
      line0.getOffsetDirection();
}"
3915,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test167()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1940.0, precision_DoubleEquivalence0);
      line0.segment((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
}"
3916,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test168()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      String string0 = line0.toString();
}"
3917,"    public String toString() {
        return MessageFormat.format(TO_STRING_FORMAT,
                getClass().getSimpleName(),
                getOrigin(),
                getDirection());
    }","  public void test169()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      String string0 = line0.toString();
}"
3918,"    public Ray rayFrom(final Vector2D startPoint) {
        return Lines.rayFromPoint(this, startPoint);
    }","  public void test170()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-783.0), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.rayFrom((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3919,"    public double angle(final Line other) {
        final double thisAngle = Math.atan2(direction.getY(), direction.getX());
        final double otherAngle = Math.atan2(other.direction.getY(), other.direction.getX());

        return Angle.Rad.WITHIN_MINUS_PI_AND_PI.applyAsDouble(otherAngle - thisAngle);
    }","  public void test171()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      double double0 = line0.angle(line0);
}"
3920,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test172()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      double double0 = line0.angle(line0);
}"
3921,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test173()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      line0.span();
}"
3922,"    public double getAngle() {
        final double angle = Math.atan2(direction.getY(), direction.getX());
        return Angle.Rad.WITHIN_0_AND_2PI.applyAsDouble(angle);
    }","  public void test174()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      double double0 = line0.getAngle();
}"
3923,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test175()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      double double0 = line0.getAngle();
}"
3924,"    public Vector2D pointAt(final double abscissa, final double offset) {
        final double pointOffset = offset - originOffset;
        return Vector2D.of(Vectors.linearCombination(abscissa, direction.getX(),  pointOffset, direction.getY()),
                            Vectors.linearCombination(abscissa, direction.getY(), -pointOffset, direction.getX()));
    }","  public void test176()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1940.0, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.pointAt(0.0, 0.0);
}"
3925,"    public Vector2D pointAt(final double abscissa, final double offset) {
        final double pointOffset = offset - originOffset;
        return Vector2D.of(Vectors.linearCombination(abscissa, direction.getX(),  pointOffset, direction.getY()),
                            Vectors.linearCombination(abscissa, direction.getY(), -pointOffset, direction.getX()));
    }","  public void test177()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1940.0, precision_DoubleEquivalence0);
      Vector2D vector2D0 = line0.pointAt(0.0, 0.0);
}"
3926,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test178()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-204.3236961505446), precision_DoubleEquivalence0);
      double double0 = line0.getOriginOffset();
}"
3927,"    public double distance(final Vector2D p) {
        return Math.abs(offset(p));
    }","  public void test179()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 15.001125902863198, precision_DoubleEquivalence0);
      double double0 = line0.distance(line0);
}"
3928,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test180()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 15.001125902863198, precision_DoubleEquivalence0);
      double double0 = line0.distance(line0);
}"
3929,"    public ReverseRay reverseRayTo(final Vector2D endPoint) {
        return Lines.reverseRayFromPoint(this, endPoint);
    }","  public void test181()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.5403023058681398, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        line0.reverseRayTo(Double.NaN);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid reverse ray end location: NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3930,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test182()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1940.0, precision_DoubleEquivalence0);
      line0.segment(445.6543, 0.0);
}"
3931,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test183()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      line0.reverseRayTo((Vector2D) vector2D_Unit0);
}"
3932,"    Line(final Vector2D.Unit direction, final double originOffset, final Precision.DoubleEquivalence precision) {
        super(precision);

        this.direction = direction;
        this.originOffset = originOffset;
    }","  public void test184()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Line.SubspaceTransform line_SubspaceTransform0 = new Line.SubspaceTransform((Line) null, affineTransformMatrix1D0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = line_SubspaceTransform0.getTransform();
}"
3933,"    public double getOriginOffset() {
        return originOffset;
    }","  public void test185()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-783.0), precision_DoubleEquivalence0);
      Vector1D vector1D0 = Vector1D.NaN;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(vector1D0);
      Line.SubspaceTransform line_SubspaceTransform0 = new Line.SubspaceTransform(line0, affineTransformMatrix1D0);
      Line line1 = line_SubspaceTransform0.getLine();
}"
3934,"    public Ray transform(final Transform<Vector2D> transform) {
        final Line tLine = getLine().transform(transform);
        final Vector2D tStart = transform.apply(getStartPoint());

        return new Ray(tLine, tStart);
    }","  public void test0()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-699)).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-656.2612599327342), precision_DoubleEquivalence0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation((double) (-699));
      Line line1 = line0.transform(affineTransformMatrix2D0);
      Ray ray0 = line1.rayFrom((-4198.28971415));
      Split<LineConvexSubset> split0 = ray0.split(line0);
}"
3935,"    public double getSubspaceStart() {
        return getLine().abscissa(startPoint);
    }","  public void test1()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(line0).abscissa(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      Ray ray0 = new Ray(line0, vector2D_Unit0);
      double double0 = ray0.getSubspaceStart();
}"
3936,"    public double getSubspaceStart() {
        return getLine().abscissa(startPoint);
    }","  public void test2()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 801.26260793777, precision_DoubleEquivalence0);
      Ray ray0 = line0.rayFrom(801.26260793777);
      double double0 = ray0.getSubspaceStart();
}"
3937,"    public Vector2D getStartPoint() {
        return startPoint;
    }","  public void test3()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 32.0, precision_DoubleEquivalence0);
      Ray ray0 = new Ray(line0, (Vector2D) null);
      Vector2D vector2D0 = ray0.getStartPoint();
}"
3938,"    public Vector2D getStartPoint() {
        return startPoint;
    }","  public void test4()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Ray ray0 = new Ray((Line) null, vector2D0);
      Vector2D vector2D1 = ray0.getStartPoint();
}"
3939,"    public Vector2D getStartPoint() {
        return startPoint;
    }","  public void test5()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      Ray ray0 = new Ray(line0, vector2D_Unit0);
      Vector2D vector2D0 = ray0.getStartPoint();
}"
3940,"    public Vector2D getStartPoint() {
        return startPoint;
    }","  public void test6()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      Ray ray0 = new Ray(line0, vector2D_Unit0);
      Vector2D vector2D0 = ray0.getStartPoint();
}"
3941,"    public boolean isInfinite() {
        return true;
    }","  public void test7()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 801.26260793777, precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Ray ray0 = line1.rayFrom(801.26260793777);
      Vector2D vector2D0 = ray0.getStartPoint();
}"
3942,"    public Vector2D getDirection() {
        return getLine().getDirection();
    }","  public void test8()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn((Vector2D.Unit) null).when(line0).getDirection();
      Ray ray0 = new Ray(line0, vector2D_Unit0);
      Vector2D vector2D0 = ray0.getDirection();
}"
3943,"    public Vector2D getDirection() {
        return getLine().getDirection();
    }","  public void test9()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Line line0 = new Line(vector2D_Unit0, (-3341.5060471), (Precision.DoubleEquivalence) null);
      Ray ray0 = line0.rayFrom(0.0);
      Vector2D vector2D0 = ray0.getDirection();
}"
3944,"    public Vector2D getDirection() {
        return getLine().getDirection();
    }","  public void test10()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      Ray ray0 = new Ray(line0, vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = ray0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 1.0, precision_DoubleEquivalence1);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createShear((-0.9999999999), 1.0);
      Line line2 = line1.transform(affineTransformMatrix2D0);
      Line line3 = line2.reverse();
      Ray ray1 = line3.rayFrom(1.0);
      Vector2D vector2D0 = ray1.getDirection();
}"
3945,"    double closestAbscissa(final double abscissa) {
        return Math.max(getSubspaceStart(), abscissa);
    }","  public void test11()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(line0).abscissa(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      Ray ray0 = new Ray(line0, vector2D_Unit0);
      double double0 = ray0.closestAbscissa((-0.5));
}"
3946,"    double closestAbscissa(final double abscissa) {
        return Math.max(getSubspaceStart(), abscissa);
    }","  public void test12()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      Ray ray0 = new Ray(line0, vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = ray0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 3292.105, precision_DoubleEquivalence1);
      Ray ray1 = line1.rayFrom((-3155.8466675037544));
      double double0 = ray1.closestAbscissa((-1.0));
}"
3947,"    public Ray transform(final Transform<Vector2D> transform) {
        final Line tLine = getLine().transform(transform);
        final Vector2D tStart = transform.apply(getStartPoint());

        return new Ray(tLine, tStart);
    }","  public void test13()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Line line0 = new Line(vector2D_Unit0, 491.089761, (Precision.DoubleEquivalence) null);
      Ray ray0 = line0.rayFrom(0.0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.identity();
      // Undeclared exception!
      try { 
        ray0.transform(affineTransformMatrix2D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
3948,"    public Ray transform(final Transform<Vector2D> transform) {
        final Line tLine = getLine().transform(transform);
        final Vector2D tStart = transform.apply(getStartPoint());

        return new Ray(tLine, tStart);
    }","  public void test14()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 1030.3835, precision_DoubleEquivalence0);
      Ray ray0 = new Ray(line0, vector2D_Unit0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.fromColumnVectors((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      // Undeclared exception!
      try { 
        ray0.transform(affineTransformMatrix2D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Line direction cannot be zero
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
3949,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName())
            .append(""[startPoint= "")
            .append(getStartPoint())
            .append("", direction= "")
            .append(getLine().getDirection())
            .append(']');

        return sb.toString();
    }","  public void test15()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Ray ray0 = new Ray((Line) null, vector2D0);
      // Undeclared exception!
      try { 
        ray0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Ray"", e);
      }
  }"
3950,"    Split<LineConvexSubset> splitOnIntersection(final Line splitter, final Vector2D intersection) {
        final Line line = getLine();
        final Precision.DoubleEquivalence splitterPrecision = splitter.getPrecision();

        final int startCmp = splitterPrecision.compare(splitter.offset(startPoint), 0.0);
        final boolean pointsTowardPlus = splitter.getOffsetDirection().dot(line.getDirection()) >= 0.0;

        if (pointsTowardPlus && startCmp > -1) {
            // entirely on plus side
            return new Split<>(null, this);
        } else if (!pointsTowardPlus && startCmp < 1) {
            // entirely on minus side
            return new Split<>(this, null);
        }

        // we're going to be split
        final Segment splitSeg = new Segment(line, startPoint, intersection);
        final Ray splitRay = new Ray(line, intersection);

        final LineConvexSubset minus = (startCmp > 0) ? splitRay : splitSeg;
        final LineConvexSubset plus = (startCmp > 0) ? splitSeg : splitRay;

        return new Split<>(minus, plus);
    }","  public void test16()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      Ray ray0 = new Ray(line0, vector2D_Unit0);
      Line line1 = new Line(vector2D_Unit0, 801.26260793777, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        ray0.splitOnIntersection(line1, vector2D_Unit0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Ray"", e);
      }
  }"
3951,"    public ReverseRay reverse() {
        return new ReverseRay(getLine().reverse(), startPoint);
    }","  public void test17()  throws Throwable  {
      Ray ray0 = new Ray((Line) null, (Vector2D) null);
      // Undeclared exception!
      try { 
        ray0.reverse();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Ray"", e);
      }
  }"
3952,"    public double getSubspaceStart() {
        return getLine().abscissa(startPoint);
    }","  public void test18()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Ray ray0 = new Ray((Line) null, vector2D_Unit0);
      // Undeclared exception!
      try { 
        ray0.getSubspaceStart();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Ray"", e);
      }
  }"
3953,"    public Vector2D getDirection() {
        return getLine().getDirection();
    }","  public void test19()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Ray ray0 = new Ray((Line) null, vector2D_Unit0);
      // Undeclared exception!
      try { 
        ray0.getDirection();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Ray"", e);
      }
  }"
3954,"    double closestAbscissa(final double abscissa) {
        return Math.max(getSubspaceStart(), abscissa);
    }","  public void test20()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Ray ray0 = new Ray((Line) null, vector2D_Unit0);
      // Undeclared exception!
      try { 
        ray0.closestAbscissa((-2630.7126));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Ray"", e);
      }
  }"
3955,"    RegionLocation classifyAbscissa(final double abscissa) {
        final int cmp = getPrecision().compare(abscissa, getSubspaceStart());
        if (cmp > 0) {
            return RegionLocation.INSIDE;
        } else if (cmp == 0) {
            return RegionLocation.BOUNDARY;
        }

        return RegionLocation.OUTSIDE;
    }","  public void test21()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = new Line(vector2D_Unit0, 1.0, (Precision.DoubleEquivalence) null);
      Ray ray0 = line0.rayFrom((Vector2D) vector2D_Unit0);
      // Undeclared exception!
      try { 
        ray0.classifyAbscissa(1.0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Ray"", e);
      }
  }"
3956,"    public Vector2D getStartPoint() {
        return startPoint;
    }","  public void test22()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Line line0 = new Line(vector2D_Unit0, Double.POSITIVE_INFINITY, (Precision.DoubleEquivalence) null);
      Ray ray0 = line0.rayFrom((-600.9938));
      Vector2D vector2D0 = ray0.getStartPoint();
}"
3957,"    public double getSubspaceStart() {
        return getLine().abscissa(startPoint);
    }","  public void test23()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Line line0 = new Line(vector2D_Unit0, (-1.0), (Precision.DoubleEquivalence) null);
      Ray ray0 = line0.rayFrom((-1.0));
      double double0 = ray0.getSubspaceStart();
}"
3958,"    public double getSubspaceEnd() {
        return Double.POSITIVE_INFINITY;
    }","  public void test24()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 32.0, precision_DoubleEquivalence0);
      Ray ray0 = line0.rayFrom((Vector2D) vector2D_Unit0);
      double double0 = ray0.getSubspaceEnd();
}"
3959,"    Split<LineConvexSubset> splitOnIntersection(final Line splitter, final Vector2D intersection) {
        final Line line = getLine();
        final Precision.DoubleEquivalence splitterPrecision = splitter.getPrecision();

        final int startCmp = splitterPrecision.compare(splitter.offset(startPoint), 0.0);
        final boolean pointsTowardPlus = splitter.getOffsetDirection().dot(line.getDirection()) >= 0.0;

        if (pointsTowardPlus && startCmp > -1) {
            // entirely on plus side
            return new Split<>(null, this);
        } else if (!pointsTowardPlus && startCmp < 1) {
            // entirely on minus side
            return new Split<>(this, null);
        }

        // we're going to be split
        final Segment splitSeg = new Segment(line, startPoint, intersection);
        final Ray splitRay = new Ray(line, intersection);

        final LineConvexSubset minus = (startCmp > 0) ? splitRay : splitSeg;
        final LineConvexSubset plus = (startCmp > 0) ? splitSeg : splitRay;

        return new Split<>(minus, plus);
    }","  public void test25()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(2037).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit1, 32.0, precision_DoubleEquivalence0);
      Ray ray0 = new Ray(line0, vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = ray0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 32.0, precision_DoubleEquivalence1);
      Line line2 = line1.reverse();
      Split<LineConvexSubset> split0 = ray0.splitOnIntersection(line2, vector2D_Unit1);
}"
3960,"    Split<LineConvexSubset> splitOnIntersection(final Line splitter, final Vector2D intersection) {
        final Line line = getLine();
        final Precision.DoubleEquivalence splitterPrecision = splitter.getPrecision();

        final int startCmp = splitterPrecision.compare(splitter.offset(startPoint), 0.0);
        final boolean pointsTowardPlus = splitter.getOffsetDirection().dot(line.getDirection()) >= 0.0;

        if (pointsTowardPlus && startCmp > -1) {
            // entirely on plus side
            return new Split<>(null, this);
        } else if (!pointsTowardPlus && startCmp < 1) {
            // entirely on minus side
            return new Split<>(this, null);
        }

        // we're going to be split
        final Segment splitSeg = new Segment(line, startPoint, intersection);
        final Ray splitRay = new Ray(line, intersection);

        final LineConvexSubset minus = (startCmp > 0) ? splitRay : splitSeg;
        final LineConvexSubset plus = (startCmp > 0) ? splitSeg : splitRay;

        return new Split<>(minus, plus);
    }","  public void test26()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 1825.0, precision_DoubleEquivalence0);
      Ray ray0 = line0.rayFrom((Vector2D) vector2D_Unit0);
      Split<LineConvexSubset> split0 = ray0.splitOnIntersection(line0, vector2D_Unit0);
}"
3961,"    Split<LineConvexSubset> splitOnIntersection(final Line splitter, final Vector2D intersection) {
        final Line line = getLine();
        final Precision.DoubleEquivalence splitterPrecision = splitter.getPrecision();

        final int startCmp = splitterPrecision.compare(splitter.offset(startPoint), 0.0);
        final boolean pointsTowardPlus = splitter.getOffsetDirection().dot(line.getDirection()) >= 0.0;

        if (pointsTowardPlus && startCmp > -1) {
            // entirely on plus side
            return new Split<>(null, this);
        } else if (!pointsTowardPlus && startCmp < 1) {
            // entirely on minus side
            return new Split<>(this, null);
        }

        // we're going to be split
        final Segment splitSeg = new Segment(line, startPoint, intersection);
        final Ray splitRay = new Ray(line, intersection);

        final LineConvexSubset minus = (startCmp > 0) ? splitRay : splitSeg;
        final LineConvexSubset plus = (startCmp > 0) ? splitSeg : splitRay;

        return new Split<>(minus, plus);
    }","  public void test27()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(2004).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 1030.383, precision_DoubleEquivalence0);
      Ray ray0 = new Ray(line0, vector2D_Unit0);
      Split<LineConvexSubset> split0 = ray0.splitOnIntersection(line0, vector2D_Unit0);
}"
3962,"    Split<LineConvexSubset> splitOnIntersection(final Line splitter, final Vector2D intersection) {
        final Line line = getLine();
        final Precision.DoubleEquivalence splitterPrecision = splitter.getPrecision();

        final int startCmp = splitterPrecision.compare(splitter.offset(startPoint), 0.0);
        final boolean pointsTowardPlus = splitter.getOffsetDirection().dot(line.getDirection()) >= 0.0;

        if (pointsTowardPlus && startCmp > -1) {
            // entirely on plus side
            return new Split<>(null, this);
        } else if (!pointsTowardPlus && startCmp < 1) {
            // entirely on minus side
            return new Split<>(this, null);
        }

        // we're going to be split
        final Segment splitSeg = new Segment(line, startPoint, intersection);
        final Ray splitRay = new Ray(line, intersection);

        final LineConvexSubset minus = (startCmp > 0) ? splitRay : splitSeg;
        final LineConvexSubset plus = (startCmp > 0) ? splitSeg : splitRay;

        return new Split<>(minus, plus);
    }","  public void test28()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit1, 32.0, precision_DoubleEquivalence0);
      Ray ray0 = line0.rayFrom((Vector2D) vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = ray0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 32.0, precision_DoubleEquivalence1);
      Line line2 = line1.reverse();
      Split<LineConvexSubset> split0 = ray0.splitOnIntersection(line2, (Vector2D) null);
}"
3963,"    Ray(final Line line, final Vector2D startPoint) {
        super(line);

        this.startPoint = startPoint;
    }","  public void test29()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 1030.3835, precision_DoubleEquivalence0);
      Ray ray0 = new Ray(line0, vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = ray0.getPrecision();
      Line line1 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence1).when(line1).getPrecision();
      doReturn(0.0, 0.0).when(line1).abscissa(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      doReturn(true).when(line1).contains(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      Ray ray1 = new Ray(line1, vector2D_Unit0);
      boolean boolean0 = ray1.contains(vector2D_Unit0);
}"
3964,"    RegionLocation classifyAbscissa(final double abscissa) {
        final int cmp = getPrecision().compare(abscissa, getSubspaceStart());
        if (cmp > 0) {
            return RegionLocation.INSIDE;
        } else if (cmp == 0) {
            return RegionLocation.BOUNDARY;
        }

        return RegionLocation.OUTSIDE;
    }","  public void test30()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-1054)).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-656.3), precision_DoubleEquivalence0);
      Ray ray0 = line0.rayFrom((double) (-1054));
      RegionLocation regionLocation0 = ray0.classifyAbscissa((-1054));
}"
3965,"    Ray(final Line line, final Vector2D startPoint) {
        super(line);

        this.startPoint = startPoint;
    }","  public void test31()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(2020).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 1030.3835, precision_DoubleEquivalence0);
      Ray ray0 = new Ray(line0, vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = ray0.getPrecision();
      Line line1 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence1).when(line1).getPrecision();
      doReturn(2685.48, (-1.0)).when(line1).abscissa(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      doReturn(true).when(line1).contains(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      Ray ray1 = new Ray(line1, vector2D_Unit0);
      boolean boolean0 = ray1.contains(vector2D_Unit0);
}"
3966,"    double closestAbscissa(final double abscissa) {
        return Math.max(getSubspaceStart(), abscissa);
    }","  public void test32()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1030.3835, precision_DoubleEquivalence0);
      Ray ray0 = new Ray(line0, vector2D_Unit0);
      double double0 = ray0.closestAbscissa(0.0);
}"
3967,"    public boolean isFull() {
        return false;
    }","  public void test33()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1823.8829), precision_DoubleEquivalence0);
      Ray ray0 = line0.rayFrom((-1.0));
      boolean boolean0 = ray0.isFull();
}"
3968,"    public double getSize() {
        return Double.POSITIVE_INFINITY;
    }","  public void test34()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-656.3), precision_DoubleEquivalence0);
      Ray ray0 = line0.rayFrom((double) (-1054));
      double double0 = ray0.getSize();
}"
3969,"    public boolean isFinite() {
        return false;
    }","  public void test35()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1823.8829), precision_DoubleEquivalence0);
      Ray ray0 = line0.rayFrom((-1.0));
      boolean boolean0 = ray0.isFinite();
}"
3970,"    public Bounds2D getBounds() {
        return null; // infinite; no bounds
    }","  public void test36()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-656.3), precision_DoubleEquivalence0);
      Ray ray0 = line0.rayFrom((double) (-1054));
      Bounds2D bounds2D0 = ray0.getBounds();
}"
3971,"    public Vector2D getEndPoint() {
        return null;
    }","  public void test37()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1823.8829), precision_DoubleEquivalence0);
      Ray ray0 = line0.rayFrom((-1.0));
      Vector2D vector2D0 = ray0.getEndPoint();
}"
3972,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName())
            .append(""[startPoint= "")
            .append(getStartPoint())
            .append("", direction= "")
            .append(getLine().getDirection())
            .append(']');

        return sb.toString();
    }","  public void test38()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 32.0, precision_DoubleEquivalence0);
      Ray ray0 = new Ray(line0, vector2D_Unit0);
      String string0 = ray0.toString();
}"
3973,"    public boolean isFinite() {
        return false;
    }","  public void test39()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1823.8829), precision_DoubleEquivalence0);
      Ray ray0 = line0.rayFrom((-1.0));
      ReverseRay reverseRay0 = ray0.reverse();
}"
3974,"    public Ray transform(final Transform<Vector2D> transform) {
        final Line tLine = getLine().transform(transform);
        final Vector2D tStart = transform.apply(getStartPoint());

        return new Ray(tLine, tStart);
    }","  public void test40()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 1030.3835, precision_DoubleEquivalence0);
      Ray ray0 = new Ray(line0, vector2D_Unit0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.fromColumnVectors((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      Ray ray1 = ray0.transform(affineTransformMatrix2D0);
}"
3975,"    public Vector2D getCentroid() {
        return null;
    }","  public void test41()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Line line0 = new Line(vector2D_Unit0, (-0.6133671048217251), (Precision.DoubleEquivalence) null);
      Ray ray0 = new Ray(line0, vector2D_Unit0);
      Vector2D vector2D0 = ray0.getCentroid();
}"
3976,"    public boolean isInfinite() {
        return true;
    }","  public void test42()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-656.3), precision_DoubleEquivalence0);
      Ray ray0 = line0.rayFrom((double) (-1054));
      boolean boolean0 = ray0.isInfinite();
}"
3977,"    public Vector2D getDirection() {
        return getLine().getDirection();
    }","  public void test43()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1823.8829), precision_DoubleEquivalence0);
      Ray ray0 = line0.rayFrom((-1.0));
      Vector2D vector2D0 = ray0.getDirection();
}"
3978,"    RegionLocation classifyAbscissa(final double abscissa) {
        final Precision.DoubleEquivalence precision = getPrecision();
        final int startCmp = precision.compare(abscissa, getSubspaceStart());
        if (startCmp > 0) {
            final int endCmp = precision.compare(abscissa, getSubspaceEnd());
            if (endCmp < 0) {
                return RegionLocation.INSIDE;
            } else if (endCmp == 0) {
                return RegionLocation.BOUNDARY;
            }
        } else if (startCmp == 0) {
            return RegionLocation.BOUNDARY;
        }

        return RegionLocation.OUTSIDE;
    }","  public void test0()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(685, 0, 0, 685).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 34.0, precision_DoubleEquivalence0);
      Segment segment0 = line0.segment((double) 685, 34.0);
      RegionLocation regionLocation0 = segment0.classifyAbscissa((-26.09893));
}"
3979,"    Split<LineConvexSubset> splitOnIntersection(final Line splitter, final Vector2D intersection) {
        final Line line = getLine();

        final Precision.DoubleEquivalence splitterPrecision = splitter.getPrecision();

        final int startCmp = splitterPrecision.compare(splitter.offset(startPoint), 0.0);
        final int endCmp = splitterPrecision.compare(splitter.offset(endPoint), 0.0);

        if (startCmp == 0 && endCmp == 0) {
            // the entire segment is directly on the splitter line
            return new Split<>(null, null);
        } else if (startCmp < 1 && endCmp < 1) {
            // the entire segment is on the minus side
            return new Split<>(this, null);
        } else if (startCmp > -1 && endCmp > -1) {
            // the entire segment is on the plus side
            return new Split<>(null, this);
        }

        // we need to split the line
        final Segment startSegment = new Segment(line, startPoint, intersection);
        final Segment endSegment = new Segment(line, intersection, endPoint);

        final Segment minus = (startCmp > 0) ? endSegment : startSegment;
        final Segment plus = (startCmp > 0) ? startSegment : endSegment;

        return new Split<>(minus, plus);
    }","  public void test1()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(685, 0, 0, 685).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 34.0, precision_DoubleEquivalence0);
      Segment segment0 = line0.segment((double) 685, 34.0);
      RegionLocation regionLocation0 = segment0.classifyAbscissa((-26.09893));
      Split<LineConvexSubset> split0 = segment0.splitOnIntersection(line0, vector2D_Unit0);
}"
3980,"    public double getSubspaceStart() {
        return getLine().abscissa(startPoint);
    }","  public void test2()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = segment0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, (-11.9), precision_DoubleEquivalence1);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale((-4147.236968782993), 877.080733214);
      Line line2 = line1.transform(affineTransformMatrix2D0);
      Line line3 = line2.reverse();
      Segment segment1 = line3.segment((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      double double0 = segment1.getSubspaceStart();
}"
3981,"    public double getSubspaceStart() {
        return getLine().abscissa(startPoint);
    }","  public void test3()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = segment0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 4.0, precision_DoubleEquivalence1);
      Segment segment1 = line1.segment((-1081.43827089), 1611.0);
      double double0 = segment1.getSubspaceStart();
}"
3982,"    public double getSubspaceEnd() {
        return getLine().abscissa(endPoint);
    }","  public void test4()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = new Line(vector2D_Unit0, 12.0, (Precision.DoubleEquivalence) null);
      Segment segment0 = line0.segment(12.0, 0.0);
      Segment segment1 = segment0.reverse();
      double double0 = segment1.getSubspaceEnd();
}"
3983,"    public double getSubspaceEnd() {
        return getLine().abscissa(endPoint);
    }","  public void test5()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(0.0, (-0.9999999999));
      Line line0 = new Line(vector2D_Unit0, (-0.9999999999), (Precision.DoubleEquivalence) null);
      Line line1 = line0.reverse();
      Segment segment0 = line1.segment((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      double double0 = segment0.getSubspaceEnd();
}"
3984,"    public Vector2D getStartPoint() {
        return startPoint;
    }","  public void test6()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      Segment segment0 = new Segment(line0, (Vector2D) null, vector2D_Unit0);
      Vector2D vector2D0 = segment0.getStartPoint();
}"
3985,"    public Vector2D getStartPoint() {
        return startPoint;
    }","  public void test7()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = new Line(vector2D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      Segment segment0 = line0.segment(0.0, (-2797.40037));
      Segment segment1 = segment0.reverse();
      Vector2D vector2D0 = segment1.getStartPoint();
}"
3986,"    public Vector2D getStartPoint() {
        return startPoint;
    }","  public void test8()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Rotation2D rotation2D0 = Rotation2D.of(4.0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(1611.0, 1611.0);
      Line line0 = new Line(vector2D_Unit0, 4.0, precision_DoubleEquivalence0);
      Segment segment0 = new Segment(line0, vector2D0, vector2D0);
      Segment segment1 = segment0.transform(rotation2D0);
      Vector2D vector2D1 = segment1.getStartPoint();
}"
3987,"    public double getSize() {
        return startPoint.distance(endPoint);
    }","  public void test9()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = new Line(vector2D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      Segment segment0 = line0.segment(0.0, (-2797.40037));
      double double0 = segment0.getSize();
}"
3988,"    public boolean isInfinite() {
        return false;
    }","  public void test10()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      Line line1 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(line0).when(line1).reverse();
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Segment segment0 = new Segment(line1, vector2D0, vector2D_Unit0);
      Segment segment1 = segment0.reverse();
      Vector2D vector2D1 = segment1.getEndPoint();
}"
3989,"    public Vector2D getEndPoint() {
        return endPoint;
    }","  public void test11()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_Y;
      Line line0 = new Line(vector2D_Unit1, 664.0, (Precision.DoubleEquivalence) null);
      Segment segment0 = line0.segment((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      Vector2D vector2D0 = segment0.getEndPoint();
}"
3990,"    public Vector2D getEndPoint() {
        return endPoint;
    }","  public void test12()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D vector2D1 = rotation2D0.applyVector(vector2D0);
      Segment segment0 = new Segment((Line) null, vector2D0, vector2D1);
      Vector2D vector2D2 = segment0.getEndPoint();
}"
3991,"    public Vector2D getEndPoint() {
        return endPoint;
    }","  public void test13()  throws Throwable  {
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = segment0.getEndPoint();
}"
3992,"    public Vector2D getCentroid() {
        return startPoint.lerp(endPoint, 0.5);
    }","  public void test14()  throws Throwable  {
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Segment segment0 = new Segment(line0, vector2D0, vector2D0);
      Vector2D vector2D1 = segment0.getCentroid();
}"
3993,"    public Vector2D getCentroid() {
        return startPoint.lerp(endPoint, 0.5);
    }","  public void test15()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = segment0.getCentroid();
}"
3994,"    public Vector2D getCentroid() {
        return startPoint.lerp(endPoint, 0.5);
    }","  public void test16()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Line line0 = new Line(vector2D_Unit0, (-615.9521807791863), (Precision.DoubleEquivalence) null);
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = segment0.getCentroid();
}"
3995,"    public Vector2D getCentroid() {
        return startPoint.lerp(endPoint, 0.5);
    }","  public void test17()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Segment segment0 = new Segment((Line) null, vector2D0, vector2D0);
      Vector2D vector2D1 = segment0.getCentroid();
}"
3996,"    double closestAbscissa(final double abscissa) {
        return Math.max(getSubspaceStart(), Math.min(getSubspaceEnd(), abscissa));
    }","  public void test18()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(line0).abscissa(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      double double0 = segment0.closestAbscissa(1.0);
}"
3997,"    double closestAbscissa(final double abscissa) {
        return Math.max(getSubspaceStart(), Math.min(getSubspaceEnd(), abscissa));
    }","  public void test19()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(0.0, (-0.9999999999));
      Line line0 = new Line(vector2D_Unit0, (-0.9999999999), (Precision.DoubleEquivalence) null);
      Line line1 = line0.reverse();
      Segment segment0 = line1.segment((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      double double0 = segment0.closestAbscissa(666.0);
}"
3998,"    public Segment transform(final Transform<Vector2D> transform) {
        final Vector2D t1 = transform.apply(getStartPoint());
        final Vector2D t2 = transform.apply(getEndPoint());

        final Line tLine = getLine().transform(transform);

        return new Segment(tLine, t1, t2);
    }","  public void test20()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Line line0 = new Line(vector2D_Unit0, 0.5, (Precision.DoubleEquivalence) null);
      Segment segment0 = line0.segment((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(0.5, (-1670.0));
      // Undeclared exception!
      try { 
        segment0.transform(affineTransformMatrix2D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
3999,"    Split<LineConvexSubset> splitOnIntersection(final Line splitter, final Vector2D intersection) {
        final Line line = getLine();

        final Precision.DoubleEquivalence splitterPrecision = splitter.getPrecision();

        final int startCmp = splitterPrecision.compare(splitter.offset(startPoint), 0.0);
        final int endCmp = splitterPrecision.compare(splitter.offset(endPoint), 0.0);

        if (startCmp == 0 && endCmp == 0) {
            // the entire segment is directly on the splitter line
            return new Split<>(null, null);
        } else if (startCmp < 1 && endCmp < 1) {
            // the entire segment is on the minus side
            return new Split<>(this, null);
        } else if (startCmp > -1 && endCmp > -1) {
            // the entire segment is on the plus side
            return new Split<>(null, this);
        }

        // we need to split the line
        final Segment startSegment = new Segment(line, startPoint, intersection);
        final Segment endSegment = new Segment(line, intersection, endPoint);

        final Segment minus = (startCmp > 0) ? endSegment : startSegment;
        final Segment plus = (startCmp > 0) ? startSegment : endSegment;

        return new Split<>(minus, plus);
    }","  public void test21()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Line line0 = new Line(vector2D_Unit0, (-2907.999033695), (Precision.DoubleEquivalence) null);
      Segment segment0 = line0.segment(369.8, (-2907.999033695));
      // Undeclared exception!
      try { 
        segment0.splitOnIntersection(line0, vector2D_Unit0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Segment"", e);
      }
  }"
4000,"    public Segment reverse() {
        return new Segment(getLine().reverse(), endPoint, startPoint);
    }","  public void test22()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-2195.06489869156), (-2195.06489869156));
      Segment segment0 = new Segment((Line) null, vector2D_Unit0, vector2D_Unit0);
      // Undeclared exception!
      try { 
        segment0.reverse();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Segment"", e);
      }
  }"
4001,"    public double getSubspaceStart() {
        return getLine().abscissa(startPoint);
    }","  public void test23()  throws Throwable  {
      Segment segment0 = new Segment((Line) null, (Vector2D) null, (Vector2D) null);
      // Undeclared exception!
      try { 
        segment0.getSubspaceStart();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Segment"", e);
      }
  }"
4002,"    public double getSubspaceEnd() {
        return getLine().abscissa(endPoint);
    }","  public void test24()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn((Line) null).when(line0).reverse();
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      Segment segment1 = segment0.reverse();
      // Undeclared exception!
      try { 
        segment1.getSubspaceEnd();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Segment"", e);
      }
  }"
4003,"    public double getSize() {
        return startPoint.distance(endPoint);
    }","  public void test25()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = segment0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence1);
      Segment segment1 = new Segment(line1, vector2D_Unit0, (Vector2D) null);
      // Undeclared exception!
      try { 
        segment1.getSize();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4004,"    public Bounds2D getBounds() {
        return Bounds2D.builder()
                .add(startPoint)
                .add(endPoint)
                .build();
    }","  public void test26()  throws Throwable  {
      Segment segment0 = new Segment((Line) null, (Vector2D) null, (Vector2D) null);
      // Undeclared exception!
      try { 
        segment0.getBounds();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Bounds2D$Builder"", e);
      }
  }"
4005,"    public Bounds2D getBounds() {
        return Bounds2D.builder()
                .add(startPoint)
                .add(endPoint)
                .build();
    }","  public void test27()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Segment segment0 = new Segment(line0, vector2D0, vector2D_Unit0);
      // Undeclared exception!
      try { 
        segment0.getBounds();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Invalid bounds: min= (-Infinity, -Infinity), max= (1.0, 0.0)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Bounds2D$Builder"", e);
      }
  }"
4006,"    double closestAbscissa(final double abscissa) {
        return Math.max(getSubspaceStart(), Math.min(getSubspaceEnd(), abscissa));
    }","  public void test28()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Segment segment0 = new Segment((Line) null, vector2D_Unit0, vector2D_Unit0);
      // Undeclared exception!
      try { 
        segment0.closestAbscissa(1399.9324);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Segment"", e);
      }
  }"
4007,"    RegionLocation classifyAbscissa(final double abscissa) {
        final Precision.DoubleEquivalence precision = getPrecision();
        final int startCmp = precision.compare(abscissa, getSubspaceStart());
        if (startCmp > 0) {
            final int endCmp = precision.compare(abscissa, getSubspaceEnd());
            if (endCmp < 0) {
                return RegionLocation.INSIDE;
            } else if (endCmp == 0) {
                return RegionLocation.BOUNDARY;
            }
        } else if (startCmp == 0) {
            return RegionLocation.BOUNDARY;
        }

        return RegionLocation.OUTSIDE;
    }","  public void test29()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Segment segment0 = new Segment((Line) null, vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        segment0.classifyAbscissa((-1558.7));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.LineSubset"", e);
      }
  }"
4008,"    public double getSubspaceEnd() {
        return getLine().abscissa(endPoint);
    }","  public void test30()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Line line0 = new Line(vector2D_Unit0, (-2907.999033695), (Precision.DoubleEquivalence) null);
      Segment segment0 = line0.segment(369.8, (-2907.999033695));
      double double0 = segment0.getSubspaceEnd();
}"
4009,"    public Vector2D getEndPoint() {
        return endPoint;
    }","  public void test31()  throws Throwable  {
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      Segment segment0 = new Segment(line0, (Vector2D) null, (Vector2D) null);
      Vector2D vector2D0 = segment0.getEndPoint();
}"
4010,"    public Vector2D getStartPoint() {
        return startPoint;
    }","  public void test32()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(1611.0, 1611.0);
      Line line0 = new Line(vector2D_Unit0, 4.0, precision_DoubleEquivalence0);
      Segment segment0 = new Segment(line0, vector2D0, vector2D0);
      Vector2D vector2D1 = segment0.getStartPoint();
}"
4011,"    public double getSubspaceStart() {
        return getLine().abscissa(startPoint);
    }","  public void test33()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(line0).abscissa(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      double double0 = segment0.getSubspaceStart();
}"
4012,"    Split<LineConvexSubset> splitOnIntersection(final Line splitter, final Vector2D intersection) {
        final Line line = getLine();

        final Precision.DoubleEquivalence splitterPrecision = splitter.getPrecision();

        final int startCmp = splitterPrecision.compare(splitter.offset(startPoint), 0.0);
        final int endCmp = splitterPrecision.compare(splitter.offset(endPoint), 0.0);

        if (startCmp == 0 && endCmp == 0) {
            // the entire segment is directly on the splitter line
            return new Split<>(null, null);
        } else if (startCmp < 1 && endCmp < 1) {
            // the entire segment is on the minus side
            return new Split<>(this, null);
        } else if (startCmp > -1 && endCmp > -1) {
            // the entire segment is on the plus side
            return new Split<>(null, this);
        }

        // we need to split the line
        final Segment startSegment = new Segment(line, startPoint, intersection);
        final Segment endSegment = new Segment(line, intersection, endPoint);

        final Segment minus = (startCmp > 0) ? endSegment : startSegment;
        final Segment plus = (startCmp > 0) ? startSegment : endSegment;

        return new Split<>(minus, plus);
    }","  public void test34()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(886, (-28), 886, 886).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = segment0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 128.8, precision_DoubleEquivalence1);
      Split<LineConvexSubset> split0 = segment0.splitOnIntersection(line1, vector2D_Unit0);
}"
4013,"    Split<LineConvexSubset> splitOnIntersection(final Line splitter, final Vector2D intersection) {
        final Line line = getLine();

        final Precision.DoubleEquivalence splitterPrecision = splitter.getPrecision();

        final int startCmp = splitterPrecision.compare(splitter.offset(startPoint), 0.0);
        final int endCmp = splitterPrecision.compare(splitter.offset(endPoint), 0.0);

        if (startCmp == 0 && endCmp == 0) {
            // the entire segment is directly on the splitter line
            return new Split<>(null, null);
        } else if (startCmp < 1 && endCmp < 1) {
            // the entire segment is on the minus side
            return new Split<>(this, null);
        } else if (startCmp > -1 && endCmp > -1) {
            // the entire segment is on the plus side
            return new Split<>(null, this);
        }

        // we need to split the line
        final Segment startSegment = new Segment(line, startPoint, intersection);
        final Segment endSegment = new Segment(line, intersection, endPoint);

        final Segment minus = (startCmp > 0) ? endSegment : startSegment;
        final Segment plus = (startCmp > 0) ? startSegment : endSegment;

        return new Split<>(minus, plus);
    }","  public void test35()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(886, (-28), 886, 886).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = segment0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 128.8, precision_DoubleEquivalence1);
      Split<LineConvexSubset> split0 = segment0.splitOnIntersection(line1, vector2D_Unit0);
      Split<LineConvexSubset> split1 = segment0.splitOnIntersection(line1, vector2D_Unit0);
}"
4014,"    Split<LineConvexSubset> splitOnIntersection(final Line splitter, final Vector2D intersection) {
        final Line line = getLine();

        final Precision.DoubleEquivalence splitterPrecision = splitter.getPrecision();

        final int startCmp = splitterPrecision.compare(splitter.offset(startPoint), 0.0);
        final int endCmp = splitterPrecision.compare(splitter.offset(endPoint), 0.0);

        if (startCmp == 0 && endCmp == 0) {
            // the entire segment is directly on the splitter line
            return new Split<>(null, null);
        } else if (startCmp < 1 && endCmp < 1) {
            // the entire segment is on the minus side
            return new Split<>(this, null);
        } else if (startCmp > -1 && endCmp > -1) {
            // the entire segment is on the plus side
            return new Split<>(null, this);
        }

        // we need to split the line
        final Segment startSegment = new Segment(line, startPoint, intersection);
        final Segment endSegment = new Segment(line, intersection, endPoint);

        final Segment minus = (startCmp > 0) ? endSegment : startSegment;
        final Segment plus = (startCmp > 0) ? startSegment : endSegment;

        return new Split<>(minus, plus);
    }","  public void test36()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(886, (-1)).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = segment0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence1);
      Split<LineConvexSubset> split0 = segment0.splitOnIntersection(line1, (Vector2D) null);
}"
4015,"    RegionLocation classifyAbscissa(final double abscissa) {
        final Precision.DoubleEquivalence precision = getPrecision();
        final int startCmp = precision.compare(abscissa, getSubspaceStart());
        if (startCmp > 0) {
            final int endCmp = precision.compare(abscissa, getSubspaceEnd());
            if (endCmp < 0) {
                return RegionLocation.INSIDE;
            } else if (endCmp == 0) {
                return RegionLocation.BOUNDARY;
            }
        } else if (startCmp == 0) {
            return RegionLocation.BOUNDARY;
        }

        return RegionLocation.OUTSIDE;
    }","  public void test37()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-1058), 0, (-1058)).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-11.9), precision_DoubleEquivalence0);
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      RegionLocation regionLocation0 = segment0.classifyAbscissa(0);
}"
4016,"    Split<LineConvexSubset> splitOnIntersection(final Line splitter, final Vector2D intersection) {
        final Line line = getLine();

        final Precision.DoubleEquivalence splitterPrecision = splitter.getPrecision();

        final int startCmp = splitterPrecision.compare(splitter.offset(startPoint), 0.0);
        final int endCmp = splitterPrecision.compare(splitter.offset(endPoint), 0.0);

        if (startCmp == 0 && endCmp == 0) {
            // the entire segment is directly on the splitter line
            return new Split<>(null, null);
        } else if (startCmp < 1 && endCmp < 1) {
            // the entire segment is on the minus side
            return new Split<>(this, null);
        } else if (startCmp > -1 && endCmp > -1) {
            // the entire segment is on the plus side
            return new Split<>(null, this);
        }

        // we need to split the line
        final Segment startSegment = new Segment(line, startPoint, intersection);
        final Segment endSegment = new Segment(line, intersection, endPoint);

        final Segment minus = (startCmp > 0) ? endSegment : startSegment;
        final Segment plus = (startCmp > 0) ? startSegment : endSegment;

        return new Split<>(minus, plus);
    }","  public void test38()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-1058), 0, (-1058)).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-11.9), precision_DoubleEquivalence0);
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      RegionLocation regionLocation0 = segment0.classifyAbscissa(0);
      Split<LineConvexSubset> split0 = segment0.splitOnIntersection(line0, vector2D_Unit0);
}"
4017,"    RegionLocation classifyAbscissa(final double abscissa) {
        final Precision.DoubleEquivalence precision = getPrecision();
        final int startCmp = precision.compare(abscissa, getSubspaceStart());
        if (startCmp > 0) {
            final int endCmp = precision.compare(abscissa, getSubspaceEnd());
            if (endCmp < 0) {
                return RegionLocation.INSIDE;
            } else if (endCmp == 0) {
                return RegionLocation.BOUNDARY;
            }
        } else if (startCmp == 0) {
            return RegionLocation.BOUNDARY;
        }

        return RegionLocation.OUTSIDE;
    }","  public void test39()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(685, 0, 0, 0).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 34.0, precision_DoubleEquivalence0);
      Segment segment0 = line0.segment((double) 685, 34.0);
      RegionLocation regionLocation0 = segment0.classifyAbscissa((-26.09893));
}"
4018,"    Split<LineConvexSubset> splitOnIntersection(final Line splitter, final Vector2D intersection) {
        final Line line = getLine();

        final Precision.DoubleEquivalence splitterPrecision = splitter.getPrecision();

        final int startCmp = splitterPrecision.compare(splitter.offset(startPoint), 0.0);
        final int endCmp = splitterPrecision.compare(splitter.offset(endPoint), 0.0);

        if (startCmp == 0 && endCmp == 0) {
            // the entire segment is directly on the splitter line
            return new Split<>(null, null);
        } else if (startCmp < 1 && endCmp < 1) {
            // the entire segment is on the minus side
            return new Split<>(this, null);
        } else if (startCmp > -1 && endCmp > -1) {
            // the entire segment is on the plus side
            return new Split<>(null, this);
        }

        // we need to split the line
        final Segment startSegment = new Segment(line, startPoint, intersection);
        final Segment endSegment = new Segment(line, intersection, endPoint);

        final Segment minus = (startCmp > 0) ? endSegment : startSegment;
        final Segment plus = (startCmp > 0) ? startSegment : endSegment;

        return new Split<>(minus, plus);
    }","  public void test40()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(685, 0, 0, 0).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 34.0, precision_DoubleEquivalence0);
      Segment segment0 = line0.segment((double) 685, 34.0);
      RegionLocation regionLocation0 = segment0.classifyAbscissa((-26.09893));
      Split<LineConvexSubset> split0 = segment0.splitOnIntersection(line0, vector2D_Unit0);
}"
4019,"    RegionLocation classifyAbscissa(final double abscissa) {
        final Precision.DoubleEquivalence precision = getPrecision();
        final int startCmp = precision.compare(abscissa, getSubspaceStart());
        if (startCmp > 0) {
            final int endCmp = precision.compare(abscissa, getSubspaceEnd());
            if (endCmp < 0) {
                return RegionLocation.INSIDE;
            } else if (endCmp == 0) {
                return RegionLocation.BOUNDARY;
            }
        } else if (startCmp == 0) {
            return RegionLocation.BOUNDARY;
        }

        return RegionLocation.OUTSIDE;
    }","  public void test41()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 1901.8352, precision_DoubleEquivalence0);
      Segment segment0 = line0.segment((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      RegionLocation regionLocation0 = segment0.classifyAbscissa((-1553.145598056131));
}"
4020,"    RegionLocation classifyAbscissa(final double abscissa) {
        final Precision.DoubleEquivalence precision = getPrecision();
        final int startCmp = precision.compare(abscissa, getSubspaceStart());
        if (startCmp > 0) {
            final int endCmp = precision.compare(abscissa, getSubspaceEnd());
            if (endCmp < 0) {
                return RegionLocation.INSIDE;
            } else if (endCmp == 0) {
                return RegionLocation.BOUNDARY;
            }
        } else if (startCmp == 0) {
            return RegionLocation.BOUNDARY;
        }

        return RegionLocation.OUTSIDE;
    }","  public void test42()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(685, 0, (-1), 685, 685).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 9.313225746154785E-10, precision_DoubleEquivalence0);
      Segment segment0 = line0.segment((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      RegionLocation regionLocation0 = segment0.classifyAbscissa(685);
}"
4021,"    Split<LineConvexSubset> splitOnIntersection(final Line splitter, final Vector2D intersection) {
        final Line line = getLine();

        final Precision.DoubleEquivalence splitterPrecision = splitter.getPrecision();

        final int startCmp = splitterPrecision.compare(splitter.offset(startPoint), 0.0);
        final int endCmp = splitterPrecision.compare(splitter.offset(endPoint), 0.0);

        if (startCmp == 0 && endCmp == 0) {
            // the entire segment is directly on the splitter line
            return new Split<>(null, null);
        } else if (startCmp < 1 && endCmp < 1) {
            // the entire segment is on the minus side
            return new Split<>(this, null);
        } else if (startCmp > -1 && endCmp > -1) {
            // the entire segment is on the plus side
            return new Split<>(null, this);
        }

        // we need to split the line
        final Segment startSegment = new Segment(line, startPoint, intersection);
        final Segment endSegment = new Segment(line, intersection, endPoint);

        final Segment minus = (startCmp > 0) ? endSegment : startSegment;
        final Segment plus = (startCmp > 0) ? startSegment : endSegment;

        return new Split<>(minus, plus);
    }","  public void test43()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(685, 0, (-1), 685, 685).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 9.313225746154785E-10, precision_DoubleEquivalence0);
      Segment segment0 = line0.segment((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      RegionLocation regionLocation0 = segment0.classifyAbscissa(685);
      Split<LineConvexSubset> split0 = segment0.splitOnIntersection(line0, vector2D_Unit0);
}"
4022,"    RegionLocation classifyAbscissa(final double abscissa) {
        final Precision.DoubleEquivalence precision = getPrecision();
        final int startCmp = precision.compare(abscissa, getSubspaceStart());
        if (startCmp > 0) {
            final int endCmp = precision.compare(abscissa, getSubspaceEnd());
            if (endCmp < 0) {
                return RegionLocation.INSIDE;
            } else if (endCmp == 0) {
                return RegionLocation.BOUNDARY;
            }
        } else if (startCmp == 0) {
            return RegionLocation.BOUNDARY;
        }

        return RegionLocation.OUTSIDE;
    }","  public void test44()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(685, 0, (-1), 685, 685).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 9.313225746154785E-10, precision_DoubleEquivalence0);
      Segment segment0 = line0.segment((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      RegionLocation regionLocation0 = segment0.classifyAbscissa(685);
      Split<LineConvexSubset> split0 = segment0.splitOnIntersection(line0, vector2D_Unit0);
      RegionLocation regionLocation1 = segment0.classifyAbscissa(9.313225746154785E-10);
}"
4023,"    public boolean isFull() {
        return false;
    }","  public void test45()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-11.9), precision_DoubleEquivalence0);
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      boolean boolean0 = segment0.isFull();
}"
4024,"    public double getSize() {
        return startPoint.distance(endPoint);
    }","  public void test46()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Line line0 = new Line(vector2D_Unit0, (-615.9521807791863), (Precision.DoubleEquivalence) null);
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      double double0 = segment0.getSize();
}"
4025,"    public boolean isFinite() {
        return true;
    }","  public void test47()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 34.0, precision_DoubleEquivalence0);
      Segment segment0 = line0.segment((double) 685, 34.0);
      boolean boolean0 = segment0.isFinite();
}"
4026,"    public boolean isInfinite() {
        return false;
    }","  public void test48()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 9.313225746154785E-10, precision_DoubleEquivalence0);
      Segment segment0 = line0.segment((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      boolean boolean0 = segment0.isInfinite();
}"
4027,"    public Bounds2D getBounds() {
        return Bounds2D.builder()
                .add(startPoint)
                .add(endPoint)
                .build();
    }","  public void test49()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-11.9), precision_DoubleEquivalence0);
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      Bounds2D bounds2D0 = segment0.getBounds();
}"
4028,"    double closestAbscissa(final double abscissa) {
        return Math.max(getSubspaceStart(), Math.min(getSubspaceEnd(), abscissa));
    }","  public void test50()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-2641.549), precision_DoubleEquivalence0);
      Segment segment0 = line0.segment((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      double double0 = segment0.closestAbscissa((-2641.549));
}"
4029,"    RegionLocation classifyAbscissa(final double abscissa) {
        final Precision.DoubleEquivalence precision = getPrecision();
        final int startCmp = precision.compare(abscissa, getSubspaceStart());
        if (startCmp > 0) {
            final int endCmp = precision.compare(abscissa, getSubspaceEnd());
            if (endCmp < 0) {
                return RegionLocation.INSIDE;
            } else if (endCmp == 0) {
                return RegionLocation.BOUNDARY;
            }
        } else if (startCmp == 0) {
            return RegionLocation.BOUNDARY;
        }

        return RegionLocation.OUTSIDE;
    }","  public void test51()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-2147481602), 1253).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence1).eq(anyDouble() , anyDouble());
      Line line1 = new Line(vector2D_Unit0, 1901.8352, precision_DoubleEquivalence1);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.identity();
      Line line2 = line1.transform(affineTransformMatrix2D0);
      Line line3 = line2.reverse();
      Segment segment0 = line3.segment((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      segment0.reverse();
      Line line4 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0, (Precision.DoubleEquivalence) null).when(line4).getPrecision();
      doReturn(0.0).when(line4).abscissa(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      Segment segment1 = new Segment(line4, vector2D_Unit0, vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence2 = segment1.getPrecision();
      Line line5 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence2);
      segment1.splitOnIntersection(line5, (Vector2D) null);
      // Undeclared exception!
      try { 
        segment1.classifyAbscissa(1253);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Segment"", e);
      }
  }"
4030,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName())
            .append(""[startPoint= "")
            .append(getStartPoint())
            .append("", endPoint= "")
            .append(getEndPoint())
            .append(']');

        return sb.toString();
    }","  public void test52()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1901.8352, precision_DoubleEquivalence0);
      Segment segment0 = line0.segment((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      String string0 = segment0.toString();
}"
4031,"    public Vector2D getCentroid() {
        return startPoint.lerp(endPoint, 0.5);
    }","  public void test53()  throws Throwable  {
      Line line0 = new Line((Vector2D.Unit) null, 0.0, (Precision.DoubleEquivalence) null);
      Segment segment0 = new Segment(line0, (Vector2D) null, (Vector2D) null);
      // Undeclared exception!
      try { 
        segment0.getCentroid();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Segment"", e);
      }
  }"
4032,"    public static void sortAndFilter(final List<LinecastPoint2D> pts) {
        pts.sort(ABSCISSA_ORDER);

        double currentAbscissa = Double.POSITIVE_INFINITY;
        final List<LinecastPoint2D> abscissaList = new ArrayList<>();

        final ListIterator<LinecastPoint2D> it = pts.listIterator();
        LinecastPoint2D pt;
        while (it.hasNext()) {
            pt = it.next();
            if (!pt.getLine().getPrecision().eq(currentAbscissa, pt.getAbscissa())) {
                // new abscissa value
                currentAbscissa = pt.getAbscissa();
                abscissaList.clear();

                abscissaList.add(pt);
            } else if (containsEq(pt, abscissaList)) {
                // duplicate found for this abscissa value
                it.remove();
            } else {
                // not a duplicate
                abscissaList.add(pt);
            }
        }
    }","  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        LinecastPoint2D.sortAndFilter((List<LinecastPoint2D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.LinecastPoint2D"", e);
      }
  }"
4033,"    public LinecastPoint2D(final Vector2D point, final Vector2D normal, final Line line) {
        super(point, normal.normalize(), line);
    }","  public void test1()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      LinecastPoint2D linecastPoint2D0 = null;
      try {
        linecastPoint2D0 = new LinecastPoint2D(vector2D_Unit0, vector2D_Unit0, (Line) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.AbstractLinecastPoint"", e);
      }
  }"
4034,"    public LinecastPoint2D(final Vector2D point, final Vector2D normal, final Line line) {
        super(point, normal.normalize(), line);
    }","  public void test2()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 329.09138994, precision_DoubleEquivalence0);
      LinecastPoint2D linecastPoint2D0 = null;
      try {
        linecastPoint2D0 = new LinecastPoint2D(vector2D0, vector2D0, line0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
4035,"    public boolean eq(final LinecastPoint2D other, final Precision.DoubleEquivalence precision) {
        return getPoint().eq(other.getPoint(), precision) &&
                getNormal().eq(other.getNormal(), precision);
    }","  public void test3()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-2623.47), precision_DoubleEquivalence0);
      Line line1 = line0.reverse();
      Vector2D vector2D0 = line1.getOrigin();
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D0, vector2D_Unit0, line1);
      line1.rayFrom(vector2D0);
      line0.getOrigin();
      LinecastPoint2D linecastPoint2D1 = new LinecastPoint2D(vector2D0, vector2D_Unit0, line1);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence1).eq(anyDouble() , anyDouble());
      boolean boolean0 = linecastPoint2D0.eq(linecastPoint2D1, precision_DoubleEquivalence1);
}"
4036,"    public boolean eq(final LinecastPoint2D other, final Precision.DoubleEquivalence precision) {
        return getPoint().eq(other.getPoint(), precision) &&
                getNormal().eq(other.getNormal(), precision);
    }","  public void test4()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(0.5, (-1651.215310164));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1651.215310164), precision_DoubleEquivalence0);
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D_Unit0, vector2D_Unit0, line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(precision_DoubleEquivalence1).eq(anyDouble() , anyDouble());
      boolean boolean0 = linecastPoint2D0.eq(linecastPoint2D0, precision_DoubleEquivalence1);
}"
4037,"    public static void sortAndFilter(final List<LinecastPoint2D> pts) {
        pts.sort(ABSCISSA_ORDER);

        double currentAbscissa = Double.POSITIVE_INFINITY;
        final List<LinecastPoint2D> abscissaList = new ArrayList<>();

        final ListIterator<LinecastPoint2D> it = pts.listIterator();
        LinecastPoint2D pt;
        while (it.hasNext()) {
            pt = it.next();
            if (!pt.getLine().getPrecision().eq(currentAbscissa, pt.getAbscissa())) {
                // new abscissa value
                currentAbscissa = pt.getAbscissa();
                abscissaList.clear();

                abscissaList.add(pt);
            } else if (containsEq(pt, abscissaList)) {
                // duplicate found for this abscissa value
                it.remove();
            } else {
                // not a duplicate
                abscissaList.add(pt);
            }
        }
    }","  public void test5()  throws Throwable  {
      ArrayList<LinecastPoint2D> arrayList0 = new ArrayList<LinecastPoint2D>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1.5707963267948966), (-1.5707963267948966));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 408.369189, precision_DoubleEquivalence0);
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D_Unit0, vector2D_Unit0, line0);
      arrayList0.add(linecastPoint2D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false, true, true).when(precision_DoubleEquivalence1).eq(anyDouble() , anyDouble());
      Line line1 = new Line(vector2D_Unit0, 1.5707963267948966, precision_DoubleEquivalence1);
      LinecastPoint2D linecastPoint2D1 = new LinecastPoint2D(vector2D_Unit0, vector2D_Unit0, line1);
      arrayList0.add(linecastPoint2D1);
      LinecastPoint2D.sortAndFilter(arrayList0);
      LinecastPoint2D.sortAndFilter(arrayList0);
}"
4038,"    public static void sortAndFilter(final List<LinecastPoint2D> pts) {
        pts.sort(ABSCISSA_ORDER);

        double currentAbscissa = Double.POSITIVE_INFINITY;
        final List<LinecastPoint2D> abscissaList = new ArrayList<>();

        final ListIterator<LinecastPoint2D> it = pts.listIterator();
        LinecastPoint2D pt;
        while (it.hasNext()) {
            pt = it.next();
            if (!pt.getLine().getPrecision().eq(currentAbscissa, pt.getAbscissa())) {
                // new abscissa value
                currentAbscissa = pt.getAbscissa();
                abscissaList.clear();

                abscissaList.add(pt);
            } else if (containsEq(pt, abscissaList)) {
                // duplicate found for this abscissa value
                it.remove();
            } else {
                // not a duplicate
                abscissaList.add(pt);
            }
        }
    }","  public void test6()  throws Throwable  {
      ArrayList<LinecastPoint2D> arrayList0 = new ArrayList<LinecastPoint2D>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1.5707963267948966), (-1.5707963267948966));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 408.369189, precision_DoubleEquivalence0);
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D_Unit0, vector2D_Unit0, line0);
      arrayList0.add(linecastPoint2D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false, true, true).when(precision_DoubleEquivalence1).eq(anyDouble() , anyDouble());
      Line line1 = new Line(vector2D_Unit0, 1.5707963267948966, precision_DoubleEquivalence1);
      LinecastPoint2D linecastPoint2D1 = new LinecastPoint2D(vector2D_Unit0, vector2D_Unit0, line1);
      arrayList0.add(linecastPoint2D1);
      LinecastPoint2D.sortAndFilter(arrayList0);
      LinecastPoint2D.sortAndFilter(arrayList0);
}"
4039,"    public boolean eq(final LinecastPoint2D other, final Precision.DoubleEquivalence precision) {
        return getPoint().eq(other.getPoint(), precision) &&
                getNormal().eq(other.getNormal(), precision);
    }","  public void test7()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, Double.POSITIVE_INFINITY, precision_DoubleEquivalence0);
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D_Unit0, vector2D_Unit0, line0);
      // Undeclared exception!
      try { 
        linecastPoint2D0.eq((LinecastPoint2D) null, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.LinecastPoint2D"", e);
      }
  }"
4040,"    public static Vector2D of(final double x, final double y) {
        return new Vector2D(x, y);
    }","  public void test0()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Vector2D[] vector2DArray0 = new Vector2D[1];
      // Undeclared exception!
      try { 
        Vector2D.Sum.of(vector2D0, vector2DArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4041,,"  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector2D.Unit.from(Double.POSITIVE_INFINITY, (-1.5707963267948966));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
4042,,"  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector2D.Unit.from(3.141592653589793, Double.NEGATIVE_INFINITY);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
4043,"    public static Vector2D of(final double x, final double y) {
        return new Vector2D(x, y);
    }","  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      // Undeclared exception!
      try { 
        Vector2D.of(doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Dimension mismatch: 8 != 2
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4044,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector2D) {
            final Vector2D rhs = (Vector2D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0 &&
                    Double.compare(y, rhs.y) == 0;
        }
        return false;
    }","  public void test4()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit1.negate();
      Vector2D.Unit vector2D_Unit3 = vector2D_Unit2.orthogonal();
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = rotation2D0.apply((Vector2D) vector2D_Unit3);
      boolean boolean0 = vector2D_Unit0.equals(vector2D0);
}"
4045,"    public double norm() {
        return Vectors.norm(x, y);
    }","  public void test5()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit1.negate();
      Vector2D.Unit vector2D_Unit3 = vector2D_Unit2.orthogonal();
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = rotation2D0.apply((Vector2D) vector2D_Unit3);
      boolean boolean0 = vector2D_Unit0.equals(vector2D0);
}"
4046,"    public double getX() {
        return x;
    }","  public void test6()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit1.negate();
      Vector2D.Unit vector2D_Unit3 = vector2D_Unit2.orthogonal();
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = rotation2D0.apply((Vector2D) vector2D_Unit3);
      boolean boolean0 = vector2D_Unit0.equals(vector2D0);
}"
4047,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector2D) {
            final Vector2D rhs = (Vector2D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0 &&
                    Double.compare(y, rhs.y) == 0;
        }
        return false;
    }","  public void test7()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit1.negate();
      Vector2D.Unit vector2D_Unit3 = vector2D_Unit2.orthogonal();
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = rotation2D0.apply((Vector2D) vector2D_Unit3);
      boolean boolean0 = vector2D_Unit0.equals(vector2D0);
}"
4048,"    public double getX() {
        return x;
    }","  public void test8()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      boolean boolean0 = vector2D_Unit1.equals(vector2D_Unit0);
}"
4049,"    public double getX() {
        return x;
    }","  public void test9()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      boolean boolean0 = vector2D_Unit1.equals(vector2D_Unit0);
}"
4050,"    public double getY() {
        return y;
    }","  public void test10()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      boolean boolean0 = vector2D_Unit1.equals(vector2D_Unit0);
}"
4051,"    public double getY() {
        return y;
    }","  public void test11()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      boolean boolean0 = vector2D_Unit1.equals(vector2D_Unit0);
}"
4052,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector2D) {
            final Vector2D rhs = (Vector2D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0 &&
                    Double.compare(y, rhs.y) == 0;
        }
        return false;
    }","  public void test12()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      boolean boolean0 = vector2D_Unit1.equals(vector2D_Unit0);
}"
4053,"    public boolean eq(final Vector2D vec, final Precision.DoubleEquivalence precision) {
        return precision.eq(x, vec.x) &&
                precision.eq(y, vec.y);
    }","  public void test13()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-4298.041421210678), (-4298.041421210678));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      boolean boolean0 = vector2D_Unit0.NaN.isZero(precision_DoubleEquivalence0);
}"
4054,"    public double getY() {
        return y;
    }","  public void test14()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-4298.041421210678), (-4298.041421210678));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      boolean boolean0 = vector2D_Unit0.NaN.isZero(precision_DoubleEquivalence0);
}"
4055,"    public double getX() {
        return x;
    }","  public void test15()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-4298.041421210678), (-4298.041421210678));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      boolean boolean0 = vector2D_Unit0.NaN.isZero(precision_DoubleEquivalence0);
}"
4056,"    public double getX() {
        return x;
    }","  public void test16()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D vector2D0 = Vector2D.of(1233.02538775831, 0.9999999999);
      double double0 = vector2D_Unit0.angle(vector2D0);
}"
4057,"    public double angle(final Vector2D v) {
        final double normProduct = getCheckedNorm() * v.getCheckedNorm();

        final double dot = dot(v);
        final double threshold = normProduct * 0.9999;
        if ((dot < -threshold) || (dot > threshold)) {
            // the vectors are almost aligned, compute using the sine
            final double n = Math.abs(Vectors.linearCombination(x, v.y, -y, v.x));
            if (dot >= 0) {
                return Math.asin(n / normProduct);
            }
            return Math.PI - Math.asin(n / normProduct);
        }

        // the vectors are sufficiently separated to use the cosine
        return Math.acos(dot / normProduct);
    }","  public void test17()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D vector2D0 = Vector2D.of(1233.02538775831, 0.9999999999);
      double double0 = vector2D_Unit0.angle(vector2D0);
}"
4058,"    public double angle(final Vector2D v) {
        final double normProduct = getCheckedNorm() * v.getCheckedNorm();

        final double dot = dot(v);
        final double threshold = normProduct * 0.9999;
        if ((dot < -threshold) || (dot > threshold)) {
            // the vectors are almost aligned, compute using the sine
            final double n = Math.abs(Vectors.linearCombination(x, v.y, -y, v.x));
            if (dot >= 0) {
                return Math.asin(n / normProduct);
            }
            return Math.PI - Math.asin(n / normProduct);
        }

        // the vectors are sufficiently separated to use the cosine
        return Math.acos(dot / normProduct);
    }","  public void test18()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = Vector2D.of(1233.02538775831, 0.9999999999);
      double double0 = vector2D_Unit0.angle(vector2D0);
}"
4059,"    public double getY() {
        return y;
    }","  public void test19()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = Vector2D.of(1233.02538775831, 0.9999999999);
      double double0 = vector2D_Unit0.angle(vector2D0);
}"
4060,"    public double angle(final Vector2D v) {
        final double normProduct = getCheckedNorm() * v.getCheckedNorm();

        final double dot = dot(v);
        final double threshold = normProduct * 0.9999;
        if ((dot < -threshold) || (dot > threshold)) {
            // the vectors are almost aligned, compute using the sine
            final double n = Math.abs(Vectors.linearCombination(x, v.y, -y, v.x));
            if (dot >= 0) {
                return Math.asin(n / normProduct);
            }
            return Math.PI - Math.asin(n / normProduct);
        }

        // the vectors are sufficiently separated to use the cosine
        return Math.acos(dot / normProduct);
    }","  public void test20()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-768.553926980015), 1376.76);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.fromColumnVectors(vector2D0, vector2D0, vector2D0);
      Vector2D.Unit vector2D_Unit0 = affineTransformMatrix2D0.applyDirection(vector2D0);
      double double0 = vector2D_Unit0.angle(vector2D0);
}"
4061,"    public double norm() {
        return Vectors.norm(x, y);
    }","  public void test21()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.withNorm(202.86);
}"
4062,"    public double angle(final Vector2D v) {
        final double normProduct = getCheckedNorm() * v.getCheckedNorm();

        final double dot = dot(v);
        final double threshold = normProduct * 0.9999;
        if ((dot < -threshold) || (dot > threshold)) {
            // the vectors are almost aligned, compute using the sine
            final double n = Math.abs(Vectors.linearCombination(x, v.y, -y, v.x));
            if (dot >= 0) {
                return Math.asin(n / normProduct);
            }
            return Math.PI - Math.asin(n / normProduct);
        }

        // the vectors are sufficiently separated to use the cosine
        return Math.acos(dot / normProduct);
    }","  public void test22()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.withNorm(202.86);
      double double0 = vector2D_Unit0.angle(vector2D0);
}"
4063,"    public double getY() {
        return y;
    }","  public void test23()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.withNorm(202.86);
      double double0 = vector2D_Unit0.angle(vector2D0);
}"
4064,"    public double getX() {
        return x;
    }","  public void test24()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.withNorm(202.86);
      double double0 = vector2D_Unit0.angle(vector2D0);
}"
4065,"    public double getX() {
        return x;
    }","  public void test25()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
}"
4066,"    public double getY() {
        return y;
    }","  public void test26()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
}"
4067,"    public double getY() {
        return y;
    }","  public void test27()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.min(vector2DArray0[5], vector2DArray0);
      Vector2D vector2D1 = vector2D0.withNorm(1232.9024906855714);
}"
4068,"    public double getY() {
        return y;
    }","  public void test28()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.min(vector2DArray0[5], vector2DArray0);
      Vector2D vector2D1 = vector2D0.withNorm(1232.9024906855714);
}"
4069,"    public double getX() {
        return x;
    }","  public void test29()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.min(vector2DArray0[5], vector2DArray0);
      Vector2D vector2D1 = vector2D0.withNorm(1232.9024906855714);
}"
4070,"    public double getX() {
        return x;
    }","  public void test30()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.min(vector2DArray0[5], vector2DArray0);
      Vector2D vector2D1 = vector2D0.withNorm(1232.9024906855714);
}"
4071,"    public double getY() {
        return y;
    }","  public void test31()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-1261.56625), (-1261.56625));
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createShear((-1261.56625), (-1261.56625));
      Vector2D.Unit vector2D_Unit0 = affineTransformMatrix2D0.applyDirection(vector2D0);
      Vector2D vector2D1 = vector2D_Unit0.withNorm(0.0);
}"
4072,"    public double getX() {
        return x;
    }","  public void test32()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-1261.56625), (-1261.56625));
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createShear((-1261.56625), (-1261.56625));
      Vector2D.Unit vector2D_Unit0 = affineTransformMatrix2D0.applyDirection(vector2D0);
      Vector2D vector2D1 = vector2D_Unit0.withNorm(0.0);
}"
4073,"    public double getY() {
        return y;
    }","  public void test33()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-1261.56625), (-1261.56625));
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createShear((-1261.56625), (-1261.56625));
      Vector2D.Unit vector2D_Unit0 = affineTransformMatrix2D0.applyDirection(vector2D0);
      Vector2D vector2D1 = vector2D_Unit0.withNorm(0.0);
}"
4074,"    public double getX() {
        return x;
    }","  public void test34()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-1261.56625), (-1261.56625));
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createShear((-1261.56625), (-1261.56625));
      Vector2D.Unit vector2D_Unit0 = affineTransformMatrix2D0.applyDirection(vector2D0);
      Vector2D vector2D1 = vector2D_Unit0.withNorm(0.0);
}"
4075,"    public double getX() {
        return x;
    }","  public void test35()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-0.9999999999), (-0.9999999999));
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.normalize();
}"
4076,"    public double getY() {
        return y;
    }","  public void test36()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-0.9999999999), (-0.9999999999));
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.normalize();
}"
4077,"    public double normSq() {
        return Vectors.normSq(x, y);
    }","  public void test37()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      double double0 = vector2D_Unit0.normSq();
}"
4078,"    public double norm() {
        return Vectors.norm(x, y);
    }","  public void test38()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      double double0 = vector2D_Unit0.norm();
}"
4079,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector2D) {
            final Vector2D rhs = (Vector2D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0 &&
                    Double.compare(y, rhs.y) == 0;
        }
        return false;
    }","  public void test39()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      boolean boolean0 = vector2D_Unit0.equals(vector2D_Unit0);
}"
4080,"    public double getX() {
        return x;
    }","  public void test40()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.withNorm(Double.POSITIVE_INFINITY);
}"
4081,"    public boolean isNaN() {
        return Double.isNaN(x) || Double.isNaN(y);
    }","  public void test41()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.withNorm(Double.POSITIVE_INFINITY);
}"
4082,"    public double getX() {
        return x;
    }","  public void test42()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(2261.3514725738705, 2261.3514725738705);
      Vector2D vector2D1 = vector2D0.withNorm(Double.POSITIVE_INFINITY);
}"
4083,"    public double getY() {
        return y;
    }","  public void test43()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(2261.3514725738705, 2261.3514725738705);
      Vector2D vector2D1 = vector2D0.withNorm(Double.POSITIVE_INFINITY);
}"
4084,"    public double getY() {
        return y;
    }","  public void test44()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(2261.3514725738705, 2261.3514725738705);
      Vector2D vector2D1 = vector2D0.withNorm(Double.POSITIVE_INFINITY);
}"
4085,"    public double getX() {
        return x;
    }","  public void test45()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(2261.3514725738705, 2261.3514725738705);
      Vector2D vector2D1 = vector2D0.withNorm(Double.POSITIVE_INFINITY);
}"
4086,"    public double getY() {
        return y;
    }","  public void test46()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D vector2D0 = vector2D_Unit1.withNorm(202.86);
}"
4087,"    public double getX() {
        return x;
    }","  public void test47()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D vector2D0 = vector2D_Unit1.withNorm(202.86);
}"
4088,"    public double getY() {
        return y;
    }","  public void test48()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D vector2D0 = vector2D_Unit1.withNorm(202.86);
}"
4089,"    public double getX() {
        return x;
    }","  public void test49()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D vector2D0 = vector2D_Unit1.withNorm(202.86);
}"
4090,"    public double getX() {
        return x;
    }","  public void test50()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D vector2D0 = vector2D_Unit1.withNorm(202.86);
}"
4091,"    public double getY() {
        return y;
    }","  public void test51()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D vector2D0 = vector2D_Unit1.withNorm(202.86);
}"
4092,"    public double getX() {
        return x;
    }","  public void test52()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-1261.56625), (-1261.56625));
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createShear((-1261.56625), (-1261.56625));
      Vector2D.Unit vector2D_Unit0 = affineTransformMatrix2D0.applyDirection(vector2D0);
      Vector2D vector2D1 = vector2D_Unit0.NaN.vectorTo((Vector2D) vector2D_Unit0);
}"
4093,"    public double getY() {
        return y;
    }","  public void test53()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-1261.56625), (-1261.56625));
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createShear((-1261.56625), (-1261.56625));
      Vector2D.Unit vector2D_Unit0 = affineTransformMatrix2D0.applyDirection(vector2D0);
      Vector2D vector2D1 = vector2D_Unit0.NaN.vectorTo((Vector2D) vector2D_Unit0);
}"
4094,"    public double getY() {
        return y;
    }","  public void test54()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-1261.56625), (-1261.56625));
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createShear((-1261.56625), (-1261.56625));
      Vector2D.Unit vector2D_Unit0 = affineTransformMatrix2D0.applyDirection(vector2D0);
      Vector2D vector2D1 = vector2D_Unit0.NaN.vectorTo((Vector2D) vector2D_Unit0);
}"
4095,"    public double getX() {
        return x;
    }","  public void test55()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.vectorTo((Vector2D) vector2D_Unit0);
}"
4096,"    public double getY() {
        return y;
    }","  public void test56()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.vectorTo((Vector2D) vector2D_Unit0);
}"
4097,"    public double getY() {
        return y;
    }","  public void test57()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.ZERO.vectorTo((Vector2D) vector2D_Unit1);
}"
4098,"    public double getX() {
        return x;
    }","  public void test58()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.ZERO.vectorTo((Vector2D) vector2D_Unit1);
}"
4099,"    public double getY() {
        return y;
    }","  public void test59()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D1 = vector2D_Unit0.NEGATIVE_INFINITY.vectorTo(vector2D0);
}"
4100,"    public double getX() {
        return x;
    }","  public void test60()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D1 = vector2D_Unit0.NEGATIVE_INFINITY.vectorTo(vector2D0);
}"
4101,"    public double getX() {
        return x;
    }","  public void test61()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      vector2D0.POSITIVE_INFINITY.transform(rotation2D0);
}"
4102,"    public double getY() {
        return y;
    }","  public void test62()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      vector2D0.POSITIVE_INFINITY.transform(rotation2D0);
}"
4103,"    public double getX() {
        return x;
    }","  public void test63()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(0.9999, (-646.1));
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(vector2D0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createShear(0.9999, 0.9999);
      Vector2D vector2D1 = vector2D_Unit0.NEGATIVE_INFINITY.transform(affineTransformMatrix2D0);
}"
4104,"    public double getY() {
        return y;
    }","  public void test64()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(0.9999, (-646.1));
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(vector2D0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createShear(0.9999, 0.9999);
      Vector2D vector2D1 = vector2D_Unit0.NEGATIVE_INFINITY.transform(affineTransformMatrix2D0);
}"
4105,"    public double getX() {
        return x;
    }","  public void test65()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(0.9999, (-646.1));
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(vector2D0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createShear(0.9999, 0.9999);
      Vector2D vector2D1 = vector2D_Unit0.NEGATIVE_INFINITY.transform(affineTransformMatrix2D0);
}"
4106,"    public double getY() {
        return y;
    }","  public void test66()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(0.9999, (-646.1));
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(vector2D0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createShear(0.9999, 0.9999);
      Vector2D vector2D1 = vector2D_Unit0.NEGATIVE_INFINITY.transform(affineTransformMatrix2D0);
}"
4107,"    public double getX() {
        return x;
    }","  public void test67()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.ZERO.transform(rotation2D0);
}"
4108,"    public double getY() {
        return y;
    }","  public void test68()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.ZERO.transform(rotation2D0);
}"
4109,"    public double getX() {
        return x;
    }","  public void test69()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.ZERO.transform(rotation2D0);
}"
4110,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector2D) {
            final Vector2D rhs = (Vector2D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0 &&
                    Double.compare(y, rhs.y) == 0;
        }
        return false;
    }","  public void test70()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D1 = vector2D0.subtract((Vector2D) vector2D_Unit0);
}"
4111,"    public double getX() {
        return x;
    }","  public void test71()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit1.orthogonal();
      Vector2D vector2D0 = vector2D_Unit2.subtract((Vector2D) vector2D_Unit0);
}"
4112,"    public double getY() {
        return y;
    }","  public void test72()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit1.orthogonal();
      Vector2D vector2D0 = vector2D_Unit2.subtract((Vector2D) vector2D_Unit0);
}"
4113,"    public double getY() {
        return y;
    }","  public void test73()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit1.orthogonal();
      Vector2D vector2D0 = vector2D_Unit2.subtract((Vector2D) vector2D_Unit0);
}"
4114,"    public double getY() {
        return y;
    }","  public void test74()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D vector2D0 = vector2D_Unit1.subtract((Vector2D) vector2D_Unit0);
}"
4115,"    public double getX() {
        return x;
    }","  public void test75()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D vector2D0 = vector2D_Unit1.subtract((Vector2D) vector2D_Unit0);
}"
4116,"    public double getY() {
        return y;
    }","  public void test76()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D vector2D0 = vector2D_Unit1.subtract((Vector2D) vector2D_Unit0);
}"
4117,"    public Vector2D subtract(final Vector2D v) {
        return new Vector2D(x - v.x, y - v.y);
    }","  public void test77()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D1 = vector2D0.NaN.subtract((-2199.3664), (Vector2D) vector2D_Unit0);
}"
4118,"    public double getX() {
        return x;
    }","  public void test78()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.subtract(3.273390607896142E150, (Vector2D) vector2D_Unit0);
}"
4119,"    public double getY() {
        return y;
    }","  public void test79()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.subtract(3.273390607896142E150, (Vector2D) vector2D_Unit0);
}"
4120,"    public double getX() {
        return x;
    }","  public void test80()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.subtract(2485407.336504772, (Vector2D) vector2D_Unit0);
}"
4121,"    public double getY() {
        return y;
    }","  public void test81()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.subtract(2485407.336504772, (Vector2D) vector2D_Unit0);
}"
4122,"    public boolean isNaN() {
        return Double.isNaN(x) || Double.isNaN(y);
    }","  public void test82()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = vector2D_Unit0.NEGATIVE_INFINITY.subtract(4.149515568880993E180, (Vector2D) vector2D_Unit0);
}"
4123,"    public double getX() {
        return x;
    }","  public void test83()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = vector2D_Unit0.NEGATIVE_INFINITY.subtract(4.149515568880993E180, (Vector2D) vector2D_Unit0);
}"
4124,"    public double getY() {
        return y;
    }","  public void test84()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = vector2D_Unit0.NEGATIVE_INFINITY.subtract(4.149515568880993E180, (Vector2D) vector2D_Unit0);
}"
4125,"    public double signedArea(final Vector2D v) {
        return Vectors.linearCombination(
                x, v.y,
                -y, v.x);
    }","  public void test85()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      double double0 = vector2D_Unit0.signedArea(vector2D_Unit0);
}"
4126,"    public double signedArea(final Vector2D v) {
        return Vectors.linearCombination(
                x, v.y,
                -y, v.x);
    }","  public void test86()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(0.9999, (-646.1));
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(vector2D0);
      Vector2D[] vector2DArray0 = new Vector2D[8];
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      double double0 = vector2D0.signedArea(vector2DArray0[5]);
}"
4127,"    public double getX() {
        return x;
    }","  public void test87()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1628.1858910080105), (-222.817300036145));
      Vector2D vector2D0 = Vector2D.of(1.0, (-222.817300036145));
      double double0 = vector2D_Unit0.POSITIVE_INFINITY.signedArea(vector2D0);
}"
4128,"    public double signedArea(final Vector2D v) {
        return Vectors.linearCombination(
                x, v.y,
                -y, v.x);
    }","  public void test88()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1628.1858910080105), (-222.817300036145));
      Vector2D vector2D0 = Vector2D.of(1.0, (-222.817300036145));
      double double0 = vector2D_Unit0.POSITIVE_INFINITY.signedArea(vector2D0);
}"
4129,"    public double getY() {
        return y;
    }","  public void test89()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1628.1858910080105), (-222.817300036145));
      Vector2D vector2D0 = Vector2D.of(1.0, (-222.817300036145));
      double double0 = vector2D_Unit0.POSITIVE_INFINITY.signedArea(vector2D0);
}"
4130,"    public double getX() {
        return x;
    }","  public void test90()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1.0), (-3092.41476807));
      Vector2D vector2D0 = vector2D_Unit0.reject((Vector2D) vector2D_Unit0);
}"
4131,"    public double getY() {
        return y;
    }","  public void test91()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1.0), (-3092.41476807));
      Vector2D vector2D0 = vector2D_Unit0.reject((Vector2D) vector2D_Unit0);
}"
4132,"    public double getY() {
        return y;
    }","  public void test92()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1.0), (-3092.41476807));
      Vector2D vector2D0 = vector2D_Unit0.reject((Vector2D) vector2D_Unit0);
}"
4133,"    public double normSq() {
        return Vectors.normSq(x, y);
    }","  public void test93()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      vector2D_Unit0.NaN.reject((Vector2D) vector2D_Unit0);
}"
4134,"    public double getX() {
        return x;
    }","  public void test94()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = vector2D_Unit0.NEGATIVE_INFINITY.project((Vector2D) vector2D_Unit0);
      vector2D_Unit0.NaN.add(672.7, vector2D0);
}"
4135,"    public double getY() {
        return y;
    }","  public void test95()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = vector2D_Unit0.NEGATIVE_INFINITY.project((Vector2D) vector2D_Unit0);
      vector2D_Unit0.NaN.add(672.7, vector2D0);
}"
4136,"    public double getX() {
        return x;
    }","  public void test96()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D vector2D0 = Vector2D.of(1233.02538775831, 0.9999999999);
      Vector2D vector2D1 = vector2D_Unit0.NEGATIVE_INFINITY.project(vector2D0);
}"
4137,"    public double getY() {
        return y;
    }","  public void test97()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D vector2D0 = Vector2D.of(1233.02538775831, 0.9999999999);
      Vector2D vector2D1 = vector2D_Unit0.NEGATIVE_INFINITY.project(vector2D0);
}"
4138,"    public double getX() {
        return x;
    }","  public void test98()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.parse(""(-Infinity, -Infinity)"");
}"
4139,"    public double getY() {
        return y;
    }","  public void test99()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.parse(""(-Infinity, -Infinity)"");
}"
4140,"    public double getY() {
        return y;
    }","  public void test100()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.parse(""(0.0, 0.0)"");
}"
4141,"    public double getX() {
        return x;
    }","  public void test101()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.parse(""(0.0, 0.0)"");
}"
4142,"    public boolean isNaN() {
        return Double.isNaN(x) || Double.isNaN(y);
    }","  public void test102()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.parse(""(NaN, NaN)"");
}"
4143,"    public double getX() {
        return x;
    }","  public void test103()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.from((-1225.2606964338), (-1225.2606964338));
      Vector2D[] vector2DArray0 = new Vector2D[1];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.min((Vector2D) vector2D_Unit1, vector2DArray0);
      Vector2D.Unit vector2D_Unit2 = vector2D0.orthogonal((Vector2D) vector2D_Unit1);
}"
4144,"    public double getY() {
        return y;
    }","  public void test104()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.from((-1225.2606964338), (-1225.2606964338));
      Vector2D[] vector2DArray0 = new Vector2D[1];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.min((Vector2D) vector2D_Unit1, vector2DArray0);
      Vector2D.Unit vector2D_Unit2 = vector2D0.orthogonal((Vector2D) vector2D_Unit1);
}"
4145,"    public double getY() {
        return y;
    }","  public void test105()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.from((-1225.2606964338), (-1225.2606964338));
      Vector2D[] vector2DArray0 = new Vector2D[1];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.min((Vector2D) vector2D_Unit1, vector2DArray0);
      Vector2D.Unit vector2D_Unit2 = vector2D0.orthogonal((Vector2D) vector2D_Unit1);
}"
4146,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector2D) {
            final Vector2D rhs = (Vector2D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0 &&
                    Double.compare(y, rhs.y) == 0;
        }
        return false;
    }","  public void test106()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit0.orthogonal((Vector2D) vector2D_Unit1);
}"
4147,"    public double normSq() {
        return Vectors.normSq(x, y);
    }","  public void test107()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit0.orthogonal((Vector2D) vector2D_Unit1);
}"
4148,"    public double getX() {
        return x;
    }","  public void test108()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.from((-1225.2606964338), (-1225.2606964338));
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit0.orthogonal((Vector2D) vector2D_Unit1);
}"
4149,"    public double getY() {
        return y;
    }","  public void test109()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.from((-1225.2606964338), (-1225.2606964338));
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit0.orthogonal((Vector2D) vector2D_Unit1);
}"
4150,"    public double getY() {
        return y;
    }","  public void test110()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.from((-1225.2606964338), (-1225.2606964338));
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit0.orthogonal((Vector2D) vector2D_Unit1);
}"
4151,"    public double getX() {
        return x;
    }","  public void test111()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.from((-1225.2606964338), (-1225.2606964338));
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit0.orthogonal((Vector2D) vector2D_Unit1);
}"
4152,"    public double getX() {
        return x;
    }","  public void test112()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit0.orthogonal((Vector2D) vector2D_Unit1);
      Vector2D.Unit vector2D_Unit3 = vector2D_Unit2.negate();
      Vector2D.Unit vector2D_Unit4 = vector2D_Unit3.orthogonal();
}"
4153,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector2D) {
            final Vector2D rhs = (Vector2D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0 &&
                    Double.compare(y, rhs.y) == 0;
        }
        return false;
    }","  public void test113()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit0.orthogonal((Vector2D) vector2D_Unit1);
      Vector2D.Unit vector2D_Unit3 = vector2D_Unit2.negate();
      Vector2D.Unit vector2D_Unit4 = vector2D_Unit3.orthogonal();
}"
4154,"    public double normSq() {
        return Vectors.normSq(x, y);
    }","  public void test114()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit0.orthogonal((Vector2D) vector2D_Unit1);
      Vector2D.Unit vector2D_Unit3 = vector2D_Unit2.negate();
      Vector2D.Unit vector2D_Unit4 = vector2D_Unit3.orthogonal();
}"
4155,"    public double getY() {
        return y;
    }","  public void test115()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit0.orthogonal((Vector2D) vector2D_Unit1);
      Vector2D.Unit vector2D_Unit3 = vector2D_Unit2.negate();
      Vector2D.Unit vector2D_Unit4 = vector2D_Unit3.orthogonal();
}"
4156,"    public double getY() {
        return y;
    }","  public void test116()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
}"
4157,"    public double getX() {
        return x;
    }","  public void test117()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
}"
4158,"    public double getX() {
        return x;
    }","  public void test118()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
}"
4159,"    public double getY() {
        return y;
    }","  public void test119()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
}"
4160,"    public double getX() {
        return x;
    }","  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      Vector2D vector2D0 = Vector2D.of(doubleArray0);
}"
4161,"    public double getY() {
        return y;
    }","  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      Vector2D vector2D0 = Vector2D.of(doubleArray0);
}"
4162,"    public static Vector2D of(final double x, final double y) {
        return new Vector2D(x, y);
    }","  public void test122()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      double[] doubleArray0 = vector2D0.toArray();
      Vector2D vector2D1 = Vector2D.of(doubleArray0);
}"
4163,"    public double getY() {
        return y;
    }","  public void test123()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      double[] doubleArray0 = vector2D0.toArray();
      Vector2D vector2D1 = Vector2D.of(doubleArray0);
}"
4164,"    public double getY() {
        return y;
    }","  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-934.8430901601193);
      Vector2D vector2D0 = Vector2D.of(doubleArray0);
}"
4165,"    public double getX() {
        return x;
    }","  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-934.8430901601193);
      Vector2D vector2D0 = Vector2D.of(doubleArray0);
}"
4166,"    public double getX() {
        return x;
    }","  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-0.9999999999);
      Vector2D vector2D0 = Vector2D.of(doubleArray0);
}"
4167,"    public double getY() {
        return y;
    }","  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-0.9999999999);
      Vector2D vector2D0 = Vector2D.of(doubleArray0);
}"
4168,"    public double getX() {
        return x;
    }","  public void test128()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.normalizeOrNull();
}"
4169,"    public boolean isNaN() {
        return Double.isNaN(x) || Double.isNaN(y);
    }","  public void test129()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.normalizeOrNull();
}"
4170,"    public double getX() {
        return x;
    }","  public void test130()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit1.normalizeOrNull();
}"
4171,"    public double getX() {
        return x;
    }","  public void test131()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit1.normalizeOrNull();
}"
4172,"    public double getY() {
        return y;
    }","  public void test132()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit1.normalizeOrNull();
}"
4173,"    public double getY() {
        return y;
    }","  public void test133()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit1.normalizeOrNull();
}"
4174,"    public int getDimension() {
        return 2;
    }","  public void test134()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.normalizeOrNull();
}"
4175,"    public Unit normalize() {
        return Unit.from(x, y);
    }","  public void test135()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.normalize();
}"
4176,"    public boolean isNaN() {
        return Double.isNaN(x) || Double.isNaN(y);
    }","  public void test136()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.normalize();
}"
4177,"    public double normSq() {
        return Vectors.normSq(x, y);
    }","  public void test137()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      double double0 = vector2D0.ZERO.normSq();
}"
4178,"    public double norm() {
        return Vectors.norm(x, y);
    }","  public void test138()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      double double0 = vector2D_Unit0.norm();
}"
4179,"    public boolean isInfinite() {
        return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y));
    }","  public void test139()  throws Throwable  {
      Vector2D[] vector2DArray0 = new Vector2D[1];
      Vector2D vector2D0 = vector2DArray0[0].NaN.negate();
}"
4180,"    public double getY() {
        return y;
    }","  public void test140()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.ZERO.negate();
}"
4181,"    public double getX() {
        return x;
    }","  public void test141()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.ZERO.negate();
}"
4182,"    public double getY() {
        return y;
    }","  public void test142()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Vector2D vector2D1 = vector2D0.NEGATIVE_INFINITY.negate();
}"
4183,"    public double getX() {
        return x;
    }","  public void test143()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Vector2D vector2D1 = vector2D0.NEGATIVE_INFINITY.negate();
}"
4184,"    public double getX() {
        return x;
    }","  public void test144()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = vector2D_Unit0.multiply(Double.NEGATIVE_INFINITY);
}"
4185,"    public double getY() {
        return y;
    }","  public void test145()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = vector2D_Unit0.multiply(Double.NEGATIVE_INFINITY);
}"
4186,"    public double getX() {
        return x;
    }","  public void test146()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.POSITIVE_INFINITY.multiply((-1752.3859));
}"
4187,"    public double getY() {
        return y;
    }","  public void test147()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.POSITIVE_INFINITY.multiply((-1752.3859));
}"
4188,"    public double getY() {
        return y;
    }","  public void test148()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      Vector2D vector2D0 = vector2D_Unit1.multiply(202.86);
}"
4189,"    public double getY() {
        return y;
    }","  public void test149()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      Vector2D vector2D0 = vector2D_Unit1.multiply(202.86);
}"
4190,"    public double getX() {
        return x;
    }","  public void test150()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      Vector2D vector2D0 = vector2D_Unit1.multiply(202.86);
}"
4191,"    public double getX() {
        return x;
    }","  public void test151()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      Vector2D vector2D0 = vector2D_Unit1.multiply(202.86);
}"
4192,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector2D) {
            final Vector2D rhs = (Vector2D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0 &&
                    Double.compare(y, rhs.y) == 0;
        }
        return false;
    }","  public void test152()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.subtract((Vector2D) vector2D_Unit0);
      Vector2D vector2D1 = vector2D0.multiply(202.86);
}"
4193,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector2D) {
            final Vector2D rhs = (Vector2D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0 &&
                    Double.compare(y, rhs.y) == 0;
        }
        return false;
    }","  public void test153()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D[] vector2DArray0 = new Vector2D[0];
      Vector2D vector2D1 = Vector2D.min(vector2D0, vector2DArray0);
}"
4194,"    public boolean isNaN() {
        return Double.isNaN(x) || Double.isNaN(y);
    }","  public void test154()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Vector2D[] vector2DArray0 = new Vector2D[4];
      vector2DArray0[0] = vector2D0;
      vector2DArray0[1] = vector2D0;
      vector2DArray0[2] = vector2D0;
      vector2DArray0[3] = vector2D0;
      Vector2D vector2D1 = Vector2D.min(vector2D0, vector2DArray0);
}"
4195,"    public String toString() {
        return SimpleTupleFormat.getDefault().format(x, y);
    }","  public void test155()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(Double.NaN, 2133.172304);
      Stack<Vector2D> stack0 = new Stack<Vector2D>();
      stack0.add(vector2D0);
      Vector2D vector2D1 = Vector2D.min((Iterable<Vector2D>) stack0);
}"
4196,"    public double getY() {
        return y;
    }","  public void test156()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(Double.NaN, 2133.172304);
      Stack<Vector2D> stack0 = new Stack<Vector2D>();
      stack0.add(vector2D0);
      Vector2D vector2D1 = Vector2D.min((Iterable<Vector2D>) stack0);
}"
4197,"    public boolean isNaN() {
        return Double.isNaN(x) || Double.isNaN(y);
    }","  public void test157()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      HashSet<Vector2D> hashSet0 = new HashSet<Vector2D>(857, 857);
      hashSet0.add(vector2D0);
      Vector2D vector2D1 = Vector2D.min((Iterable<Vector2D>) hashSet0);
}"
4198,"    public static Vector2D min(final Vector2D first, final Vector2D... more) {
        return computeMin(first, Arrays.asList(more).iterator());
    }","  public void test158()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      HashSet<Vector2D> hashSet0 = new HashSet<Vector2D>(857, 857);
      hashSet0.add(vector2D0);
      Vector2D vector2D1 = Vector2D.min((Iterable<Vector2D>) hashSet0);
}"
4199,"    public static Vector2D min(final Vector2D first, final Vector2D... more) {
        return computeMin(first, Arrays.asList(more).iterator());
    }","  public void test159()  throws Throwable  {
      ArrayDeque<Vector2D> arrayDeque0 = new ArrayDeque<Vector2D>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      arrayDeque0.push(vector2D_Unit0);
      Vector2D vector2D0 = Vector2D.min((Iterable<Vector2D>) arrayDeque0);
}"
4200,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector2D) {
            final Vector2D rhs = (Vector2D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0 &&
                    Double.compare(y, rhs.y) == 0;
        }
        return false;
    }","  public void test160()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D[] vector2DArray0 = new Vector2D[5];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = vector2D0;
      vector2DArray0[4] = vector2D0;
      Vector2D vector2D1 = Vector2D.max((Vector2D) vector2D_Unit0, vector2DArray0);
}"
4201,"    public double getX() {
        return x;
    }","  public void test161()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
}"
4202,"    public double getY() {
        return y;
    }","  public void test162()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
}"
4203,"    public double getX() {
        return x;
    }","  public void test163()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.max(vector2DArray0[4], vector2DArray0);
}"
4204,"    public double getY() {
        return y;
    }","  public void test164()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.max(vector2DArray0[4], vector2DArray0);
}"
4205,"    public double getY() {
        return y;
    }","  public void test165()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.max((Vector2D) vector2D_Unit0, vector2DArray0);
}"
4206,"    public double getX() {
        return x;
    }","  public void test166()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.max((Vector2D) vector2D_Unit0, vector2DArray0);
}"
4207,"    public double getX() {
        return x;
    }","  public void test167()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.max((Vector2D) vector2D_Unit0, vector2DArray0);
}"
4208,"    public double getY() {
        return y;
    }","  public void test168()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.max((Vector2D) vector2D_Unit0, vector2DArray0);
}"
4209,"    public double getX() {
        return x;
    }","  public void test169()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1.0), (-3092.41476807));
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.max((Vector2D) vector2D_Unit0, vector2DArray0);
      Vector2D vector2D1 = vector2D0.withNorm((-3092.41476807));
}"
4210,"    public double getY() {
        return y;
    }","  public void test170()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1.0), (-3092.41476807));
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.max((Vector2D) vector2D_Unit0, vector2DArray0);
      Vector2D vector2D1 = vector2D0.withNorm((-3092.41476807));
}"
4211,"    public double getX() {
        return x;
    }","  public void test171()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1.0), (-3092.41476807));
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.max((Vector2D) vector2D_Unit0, vector2DArray0);
      Vector2D vector2D1 = vector2D0.withNorm((-3092.41476807));
}"
4212,"    public double getY() {
        return y;
    }","  public void test172()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1.0), (-3092.41476807));
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.max((Vector2D) vector2D_Unit0, vector2DArray0);
      Vector2D vector2D1 = vector2D0.withNorm((-3092.41476807));
}"
4213,"    public double getX() {
        return x;
    }","  public void test173()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1.0), (-3092.41476807));
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.max((Vector2D) vector2D_Unit0, vector2DArray0);
      Vector2D vector2D1 = vector2D0.withNorm((-3092.41476807));
}"
4214,"    public double getY() {
        return y;
    }","  public void test174()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1.0), (-3092.41476807));
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.max((Vector2D) vector2D_Unit0, vector2DArray0);
      Vector2D vector2D1 = vector2D0.withNorm((-3092.41476807));
}"
4215,"    public double getY() {
        return y;
    }","  public void test175()  throws Throwable  {
      Vector<Vector2D> vector0 = new Vector<Vector2D>(0);
      Vector2D vector2D0 = Vector2D.NaN;
      vector0.add(0, vector2D0);
      Vector2D vector2D1 = Vector2D.max((Iterable<Vector2D>) vector0);
}"
4216,"    public double getX() {
        return x;
    }","  public void test176()  throws Throwable  {
      Vector<Vector2D> vector0 = new Vector<Vector2D>(0);
      Vector2D vector2D0 = Vector2D.NaN;
      vector0.add(0, vector2D0);
      Vector2D vector2D1 = Vector2D.max((Iterable<Vector2D>) vector0);
}"
4217,"    public static Vector2D max(final Vector2D first, final Vector2D... more) {
        return computeMax(first, Arrays.asList(more).iterator());
    }","  public void test177()  throws Throwable  {
      Vector<Vector2D> vector0 = new Vector<Vector2D>(0);
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      vector0.add(vector2D0);
      Vector2D vector2D1 = Vector2D.max((Iterable<Vector2D>) vector0);
}"
4218,"    public static Vector2D max(final Vector2D first, final Vector2D... more) {
        return computeMax(first, Arrays.asList(more).iterator());
    }","  public void test178()  throws Throwable  {
      Vector<Vector2D.Unit> vector0 = new Vector<Vector2D.Unit>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      vector0.add(vector2D_Unit0);
      Vector<Vector2D> vector1 = new Vector<Vector2D>(vector0);
      Vector2D vector2D0 = Vector2D.max((Iterable<Vector2D>) vector1);
}"
4219,"    public static Vector2D max(final Vector2D first, final Vector2D... more) {
        return computeMax(first, Arrays.asList(more).iterator());
    }","  public void test179()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector<Vector2D> vector0 = new Vector<Vector2D>(0);
      vector0.add((Vector2D) vector2D_Unit0);
      Vector2D vector2D0 = Vector2D.max((Iterable<Vector2D>) vector0);
}"
4220,"    public double getX() {
        return x;
    }","  public void test180()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(2.409919865102884E-181, 2.409919865102884E-181);
      Vector2D vector2D0 = vector2D_Unit0.NEGATIVE_INFINITY.lerp((Vector2D) vector2D_Unit0, (-757.9));
}"
4221,"    public double getY() {
        return y;
    }","  public void test181()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(2.409919865102884E-181, 2.409919865102884E-181);
      Vector2D vector2D0 = vector2D_Unit0.NEGATIVE_INFINITY.lerp((Vector2D) vector2D_Unit0, (-757.9));
}"
4222,"    public double getY() {
        return y;
    }","  public void test182()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(2.409919865102884E-181, 2.409919865102884E-181);
      Vector2D vector2D0 = vector2D_Unit0.NEGATIVE_INFINITY.lerp((Vector2D) vector2D_Unit0, (-757.9));
}"
4223,"    public double getX() {
        return x;
    }","  public void test183()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(2.409919865102884E-181, 2.409919865102884E-181);
      Vector2D vector2D0 = vector2D_Unit0.NEGATIVE_INFINITY.lerp((Vector2D) vector2D_Unit0, (-757.9));
}"
4224,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector2D) {
            final Vector2D rhs = (Vector2D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0 &&
                    Double.compare(y, rhs.y) == 0;
        }
        return false;
    }","  public void test184()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = vector2D0.lerp(vector2D0, 0.0);
}"
4225,"    public double getY() {
        return y;
    }","  public void test185()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      double double0 = vector2D0.getY();
}"
4226,"    public double getY() {
        return y;
    }","  public void test186()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(0.9999, (-646.1));
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(vector2D0);
      double double0 = vector2D_Unit0.getX();
}"
4227,"    public double getX() {
        return x;
    }","  public void test187()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(0.9999, (-646.1));
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(vector2D0);
      double double0 = vector2D_Unit0.getX();
}"
4228,"    public double getX() {
        return x;
    }","  public void test188()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(0.9999, (-646.1));
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(vector2D0);
      double double0 = vector2D_Unit0.getX();
}"
4229,"    public double getY() {
        return y;
    }","  public void test189()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(0.9999, (-646.1));
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(vector2D0);
      double double0 = vector2D_Unit0.getX();
}"
4230,"    public double getX() {
        return x;
    }","  public void test190()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of((-1250.62821272));
      Rotation2D rotation2D1 = rotation2D0.inverse();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D vector2D0 = rotation2D1.apply((Vector2D) vector2D_Unit0);
      double double0 = vector2D0.getX();
}"
4231,"    public double getY() {
        return y;
    }","  public void test191()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of((-1250.62821272));
      Rotation2D rotation2D1 = rotation2D0.inverse();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D vector2D0 = rotation2D1.apply((Vector2D) vector2D_Unit0);
      double double0 = vector2D0.getX();
}"
4232,"    public double getY() {
        return y;
    }","  public void test192()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.subtract((Vector2D) vector2D_Unit0);
      double double0 = vector2D_Unit0.dot(vector2D0);
}"
4233,"    public double getX() {
        return x;
    }","  public void test193()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.subtract((Vector2D) vector2D_Unit0);
      double double0 = vector2D_Unit0.dot(vector2D0);
}"
4234,"    public double dot(final Vector2D v) {
        return Vectors.linearCombination(x, v.x, y, v.y);
    }","  public void test194()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.subtract((Vector2D) vector2D_Unit0);
      double double0 = vector2D_Unit0.dot(vector2D0);
}"
4235,"    public double dot(final Vector2D v) {
        return Vectors.linearCombination(x, v.x, y, v.y);
    }","  public void test195()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Rotation2D rotation2D0 = Rotation2D.of((-447.9));
      Vector2D vector2D0 = rotation2D0.apply((Vector2D) vector2D_Unit0);
      double double0 = vector2D0.dot((Vector2D) vector2D_Unit0);
}"
4236,"    public double getY() {
        return y;
    }","  public void test196()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Rotation2D rotation2D0 = Rotation2D.of((-447.9));
      Vector2D vector2D0 = rotation2D0.apply((Vector2D) vector2D_Unit0);
      double double0 = vector2D0.dot((Vector2D) vector2D_Unit0);
}"
4237,"    public double distanceSq(final Vector2D v) {
        return Vectors.normSq(x - v.x, y - v.y);
    }","  public void test197()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-1.0), (-2036.3610847474615));
      double double0 = vector2D0.ZERO.distanceSq(vector2D0);
}"
4238,"    public double getX() {
        return x;
    }","  public void test198()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-1.0), (-2036.3610847474615));
      double double0 = vector2D0.ZERO.distanceSq(vector2D0);
}"
4239,"    public double getY() {
        return y;
    }","  public void test199()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-1.0), (-2036.3610847474615));
      double double0 = vector2D0.ZERO.distanceSq(vector2D0);
}"
4240,"    public double distance(final Vector2D v) {
        return Vectors.norm(x - v.x, y - v.y);
    }","  public void test200()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      double double0 = vector2D0.ZERO.distance(vector2D0);
}"
4241,"    public double getX() {
        return x;
    }","  public void test201()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit1.directionTo((Vector2D) vector2D_Unit0);
}"
4242,"    public double getY() {
        return y;
    }","  public void test202()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit1.directionTo((Vector2D) vector2D_Unit0);
}"
4243,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector2D) {
            final Vector2D rhs = (Vector2D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0 &&
                    Double.compare(y, rhs.y) == 0;
        }
        return false;
    }","  public void test203()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit0.directionTo((Vector2D) vector2D_Unit1);
}"
4244,"    public double getX() {
        return x;
    }","  public void test204()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit0.directionTo((Vector2D) vector2D_Unit1);
}"
4245,"    public double getY() {
        return y;
    }","  public void test205()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit0.directionTo((Vector2D) vector2D_Unit1);
}"
4246,"    public double getX() {
        return x;
    }","  public void test206()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.directionTo(vector2D0);
}"
4247,"    public double getY() {
        return y;
    }","  public void test207()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.directionTo(vector2D0);
}"
4248,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector2D) {
            final Vector2D rhs = (Vector2D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0 &&
                    Double.compare(y, rhs.y) == 0;
        }
        return false;
    }","  public void test208()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D[] vector2DArray0 = new Vector2D[4];
      vector2DArray0[0] = vector2D0;
      vector2DArray0[1] = vector2D0;
      vector2DArray0[2] = vector2D0;
      vector2DArray0[3] = vector2D0;
      Vector2D vector2D1 = Vector2D.centroid(vector2D0, vector2DArray0);
}"
4249,"    public double getX() {
        return x;
    }","  public void test209()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Vector2D[] vector2DArray0 = new Vector2D[1];
      vector2DArray0[0] = vector2D0;
      Vector2D vector2D1 = Vector2D.centroid(vector2D0, vector2DArray0);
}"
4250,"    public double getY() {
        return y;
    }","  public void test210()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[0];
      Vector2D vector2D0 = Vector2D.centroid((Vector2D) vector2D_Unit0, vector2DArray0);
}"
4251,"    public double getX() {
        return x;
    }","  public void test211()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[0];
      Vector2D vector2D0 = Vector2D.centroid((Vector2D) vector2D_Unit0, vector2DArray0);
}"
4252,"    public boolean isNaN() {
        return Double.isNaN(x) || Double.isNaN(y);
    }","  public void test212()  throws Throwable  {
      LinkedHashSet<Vector2D> linkedHashSet0 = new LinkedHashSet<Vector2D>();
      Vector2D vector2D0 = Vector2D.NaN;
      linkedHashSet0.add(vector2D0);
      Vector2D vector2D1 = Vector2D.centroid((Iterable<Vector2D>) linkedHashSet0);
}"
4253,"    public boolean isNaN() {
        return Double.isNaN(x) || Double.isNaN(y);
    }","  public void test213()  throws Throwable  {
      LinkedHashSet<Vector2D> linkedHashSet0 = new LinkedHashSet<Vector2D>();
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      linkedHashSet0.add(vector2D0);
      Vector2D vector2D1 = Vector2D.centroid((Iterable<Vector2D>) linkedHashSet0);
}"
4254,"    public static Vector2D centroid(final Vector2D first, final Vector2D... more) {
        return computeCentroid(first, Arrays.asList(more).iterator());
    }","  public void test214()  throws Throwable  {
      LinkedHashSet<Vector2D> linkedHashSet0 = new LinkedHashSet<Vector2D>();
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      linkedHashSet0.add(vector2D0);
      Vector2D vector2D1 = Vector2D.centroid((Iterable<Vector2D>) linkedHashSet0);
}"
4255,"    public static Vector2D centroid(final Vector2D first, final Vector2D... more) {
        return computeCentroid(first, Arrays.asList(more).iterator());
    }","  public void test215()  throws Throwable  {
      Vector<Vector2D.Unit> vector0 = new Vector<Vector2D.Unit>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      vector0.add(vector2D_Unit0);
      Vector<Vector2D> vector1 = new Vector<Vector2D>(vector0);
      Vector2D vector2D0 = Vector2D.centroid((Iterable<Vector2D>) vector1);
}"
4256,"    public double getX() {
        return x;
    }","  public void test216()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(0.0, 0.0);
      Vector2D vector2D1 = vector2D0.POSITIVE_INFINITY.add(vector2D0);
}"
4257,"    public double getY() {
        return y;
    }","  public void test217()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(0.0, 0.0);
      Vector2D vector2D1 = vector2D0.POSITIVE_INFINITY.add(vector2D0);
}"
4258,"    public boolean isNaN() {
        return Double.isNaN(x) || Double.isNaN(y);
    }","  public void test218()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(0.0, 0.0);
      Vector2D vector2D1 = vector2D0.POSITIVE_INFINITY.add(vector2D0);
}"
4259,"    public double getX() {
        return x;
    }","  public void test219()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(0.0, 0.0);
      Vector2D vector2D1 = vector2D0.POSITIVE_INFINITY.add(vector2D0);
}"
4260,"    public double getY() {
        return y;
    }","  public void test220()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(0.0, 0.0);
      Vector2D vector2D1 = vector2D0.POSITIVE_INFINITY.add(vector2D0);
}"
4261,"    public double getX() {
        return x;
    }","  public void test221()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D vector2D0 = vector2D_Unit1.add((Vector2D) vector2D_Unit0);
}"
4262,"    public double getY() {
        return y;
    }","  public void test222()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D vector2D0 = vector2D_Unit1.add((Vector2D) vector2D_Unit0);
}"
4263,"    public double getY() {
        return y;
    }","  public void test223()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D vector2D0 = vector2D_Unit1.add((Vector2D) vector2D_Unit0);
}"
4264,"    public Unit normalize() {
        return Unit.from(x, y);
    }","  public void test224()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D[] vector2DArray0 = new Vector2D[4];
      vector2DArray0[0] = vector2D0;
      vector2DArray0[1] = vector2D0;
      vector2DArray0[2] = vector2D0;
      Rotation2D rotation2D0 = Rotation2D.of(0.0);
      Vector2D vector2D1 = rotation2D0.apply(vector2D0);
      vector2DArray0[3] = vector2D1;
      Vector2D vector2D2 = Vector2D.max(vector2D0, vector2DArray0);
      Vector2D vector2D3 = vector2D0.add(vector2D2);
      // Undeclared exception!
      try { 
        vector2D3.normalize();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
4265,"    public double getY() {
        return y;
    }","  public void test225()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      Vector2D vector2D0 = vector2D_Unit0.add((Vector2D) vector2D_Unit1);
}"
4266,"    public double getX() {
        return x;
    }","  public void test226()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      Vector2D vector2D0 = vector2D_Unit0.add((Vector2D) vector2D_Unit1);
}"
4267,"    public double getX() {
        return x;
    }","  public void test227()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      Vector2D vector2D0 = vector2D_Unit0.add((Vector2D) vector2D_Unit1);
}"
4268,"    public double getX() {
        return x;
    }","  public void test228()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.add(1.0, (Vector2D) vector2D_Unit0);
}"
4269,"    public double getY() {
        return y;
    }","  public void test229()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.add(1.0, (Vector2D) vector2D_Unit0);
}"
4270,"    public double getX() {
        return x;
    }","  public void test230()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.NEGATIVE_INFINITY.add(0.0, (Vector2D) vector2D_Unit0);
}"
4271,"    public double getY() {
        return y;
    }","  public void test231()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.NEGATIVE_INFINITY.add(0.0, (Vector2D) vector2D_Unit0);
}"
4272,"    public boolean isInfinite() {
        return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y));
    }","  public void test232()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.NEGATIVE_INFINITY.add(0.0, (Vector2D) vector2D_Unit0);
}"
4273,"    public Vector2D withNorm(final double magnitude) {
        final double invNorm = 1.0 / getCheckedNorm();

        return new Vector2D(
                    magnitude * x * invNorm,
                    magnitude * y * invNorm
                );
    }","  public void test233()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      // Undeclared exception!
      try { 
        vector2D_Unit0.NEGATIVE_INFINITY.withNorm(Double.NaN);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
4274,"    public Vector2D vectorTo(final Vector2D v) {
        return v.subtract(this);
    }","  public void test234()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      // Undeclared exception!
      try { 
        vector2D_Unit0.ZERO.vectorTo((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4275,"    public Vector2D transform(final UnaryOperator<Vector2D> fn) {
        return fn.apply(this);
    }","  public void test235()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      // Undeclared exception!
      try { 
        vector2D_Unit0.NEGATIVE_INFINITY.transform((UnaryOperator<Vector2D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4276,"    public Vector2D subtract(final Vector2D v) {
        return new Vector2D(x - v.x, y - v.y);
    }","  public void test236()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      // Undeclared exception!
      try { 
        vector2D_Unit0.ZERO.subtract((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4277,"    public Vector2D subtract(final Vector2D v) {
        return new Vector2D(x - v.x, y - v.y);
    }","  public void test237()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      // Undeclared exception!
      try { 
        vector2D_Unit0.subtract(0.25, (Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4278,"    public double signedArea(final Vector2D v) {
        return Vectors.linearCombination(
                x, v.y,
                -y, v.x);
    }","  public void test238()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector2D0.NEGATIVE_INFINITY.signedArea((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4279,"    public Vector2D reject(final Vector2D base) {
        return getComponent(base, true, Vector2D::new);
    }","  public void test239()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      // Undeclared exception!
      try { 
        vector2D_Unit0.NEGATIVE_INFINITY.reject((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4280,"    public Vector2D reject(final Vector2D base) {
        return getComponent(base, true, Vector2D::new);
    }","  public void test240()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector2D0.reject(vector2D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
4281,"    public Vector2D project(final Vector2D base) {
        return getComponent(base, false, Vector2D::new);
    }","  public void test241()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      // Undeclared exception!
      try { 
        vector2D_Unit0.project((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4282,"    public static Vector2D parse(final String str) {
        return SimpleTupleFormat.getDefault().parse(str, Vector2D::new);
    }","  public void test242()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector2D.parse((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.internal.SimpleTupleFormat"", e);
      }
  }"
4283,"    public Vector2D.Unit orthogonal() {
        return Unit.from(-y, x);
    }","  public void test243()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      // Undeclared exception!
      try { 
        vector2D_Unit0.orthogonal((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4284,"    public static Vector2D of(final double x, final double y) {
        return new Vector2D(x, y);
    }","  public void test244()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector2D.of((double[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4285,"    public static Vector2D min(final Vector2D first, final Vector2D... more) {
        return computeMin(first, Arrays.asList(more).iterator());
    }","  public void test245()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      // Undeclared exception!
      try { 
        Vector2D.min((Vector2D) vector2D_Unit0, (Vector2D[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
4286,"    public static Vector2D min(final Vector2D first, final Vector2D... more) {
        return computeMin(first, Arrays.asList(more).iterator());
    }","  public void test246()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector2D.min((Iterable<Vector2D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4287,"    public static Vector2D max(final Vector2D first, final Vector2D... more) {
        return computeMax(first, Arrays.asList(more).iterator());
    }","  public void test247()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector2D.max((Iterable<Vector2D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4288,"    public Vector2D lerp(final Vector2D p, final double t) {
        return Sum.create()
                .addScaled(1.0 - t, this)
                .addScaled(t, p).get();
    }","  public void test248()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      // Undeclared exception!
      try { 
        vector2D_Unit0.lerp((Vector2D) null, 0.0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4289,"    public boolean eq(final Vector2D vec, final Precision.DoubleEquivalence precision) {
        return precision.eq(x, vec.x) &&
                precision.eq(y, vec.y);
    }","  public void test249()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      // Undeclared exception!
      try { 
        vector2D_Unit0.eq((Vector2D) vector2D_Unit0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4290,"    public double dot(final Vector2D v) {
        return Vectors.linearCombination(x, v.x, y, v.y);
    }","  public void test250()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.ZERO.normalizeOrNull();
      // Undeclared exception!
      try { 
        vector2D_Unit1.ZERO.dot((Vector2D) vector2D_Unit1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4291,"    public double distanceSq(final Vector2D v) {
        return Vectors.normSq(x - v.x, y - v.y);
    }","  public void test251()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      // Undeclared exception!
      try { 
        vector2D_Unit0.distanceSq((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4292,"    public double distance(final Vector2D v) {
        return Vectors.norm(x - v.x, y - v.y);
    }","  public void test252()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      // Undeclared exception!
      try { 
        vector2D_Unit0.distance((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4293,"    public Unit directionTo(final Vector2D v) {
        return vectorTo(v).normalize();
    }","  public void test253()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector2D0.POSITIVE_INFINITY.directionTo((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4294,"    public static Vector2D centroid(final Vector2D first, final Vector2D... more) {
        return computeCentroid(first, Arrays.asList(more).iterator());
    }","  public void test254()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[4];
      // Undeclared exception!
      try { 
        Vector2D.centroid((Vector2D) vector2D_Unit0, vector2DArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4295,"    public static Vector2D centroid(final Vector2D first, final Vector2D... more) {
        return computeCentroid(first, Arrays.asList(more).iterator());
    }","  public void test255()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector2D.centroid((Iterable<Vector2D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4296,"    public double angle(final Vector2D v) {
        final double normProduct = getCheckedNorm() * v.getCheckedNorm();

        final double dot = dot(v);
        final double threshold = normProduct * 0.9999;
        if ((dot < -threshold) || (dot > threshold)) {
            // the vectors are almost aligned, compute using the sine
            final double n = Math.abs(Vectors.linearCombination(x, v.y, -y, v.x));
            if (dot >= 0) {
                return Math.asin(n / normProduct);
            }
            return Math.PI - Math.asin(n / normProduct);
        }

        // the vectors are sufficiently separated to use the cosine
        return Math.acos(dot / normProduct);
    }","  public void test256()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      // Undeclared exception!
      try { 
        vector2D_Unit0.angle(vector2DArray0[0]);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4297,"    public Vector2D add(final Vector2D v) {
        return new Vector2D(x + v.x, y + v.y);
    }","  public void test257()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector2D0.NaN.add((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4298,"    public Vector2D add(final Vector2D v) {
        return new Vector2D(x + v.x, y + v.y);
    }","  public void test258()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector2D0.add((-2207.8540374056), (Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4299,"    public boolean eq(final Vector2D vec, final Precision.DoubleEquivalence precision) {
        return precision.eq(x, vec.x) &&
                precision.eq(y, vec.y);
    }","  public void test259()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.normalizeOrNull();
      vector2D_Unit1.hashCode();
      Vector2D.Unit vector2D_Unit2 = Vector2D.Unit.from((Vector2D) vector2D_Unit1);
      UnaryOperator<Vector2D> unaryOperator0 = UnaryOperator.identity();
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = vector2D_Unit2.transform(unaryOperator0);
      int int0 = 54;
      PriorityQueue<Vector2D> priorityQueue0 = new PriorityQueue<Vector2D>(54);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      boolean boolean0 = vector2D1.eq((Vector2D) vector2D_Unit0, precision_DoubleEquivalence0);
}"
4300,"    public boolean eq(final Vector2D vec, final Precision.DoubleEquivalence precision) {
        return precision.eq(x, vec.x) &&
                precision.eq(y, vec.y);
    }","  public void test260()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.normalizeOrNull();
      vector2D_Unit1.hashCode();
      Vector2D.Unit vector2D_Unit2 = Vector2D.Unit.from((Vector2D) vector2D_Unit1);
      UnaryOperator<Vector2D> unaryOperator0 = UnaryOperator.identity();
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = vector2D_Unit2.transform(unaryOperator0);
      int int0 = 54;
      PriorityQueue<Vector2D> priorityQueue0 = new PriorityQueue<Vector2D>(54);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      boolean boolean0 = vector2D1.eq((Vector2D) vector2D_Unit0, precision_DoubleEquivalence0);
}"
4301,"    public boolean isNaN() {
        return Double.isNaN(x) || Double.isNaN(y);
    }","  public void test261()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.normalizeOrNull();
      vector2D_Unit1.hashCode();
      Vector2D.Unit vector2D_Unit2 = Vector2D.Unit.from((Vector2D) vector2D_Unit1);
      UnaryOperator<Vector2D> unaryOperator0 = UnaryOperator.identity();
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = vector2D_Unit2.transform(unaryOperator0);
      int int0 = 54;
      PriorityQueue<Vector2D> priorityQueue0 = new PriorityQueue<Vector2D>(54);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      boolean boolean0 = vector2D1.eq((Vector2D) vector2D_Unit0, precision_DoubleEquivalence0);
}"
4302,"    public boolean eq(final Vector2D vec, final Precision.DoubleEquivalence precision) {
        return precision.eq(x, vec.x) &&
                precision.eq(y, vec.y);
    }","  public void test262()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      boolean boolean0 = vector2D_Unit0.eq((Vector2D) vector2D_Unit0, precision_DoubleEquivalence0);
}"
4303,"    public boolean isNaN() {
        return Double.isNaN(x) || Double.isNaN(y);
    }","  public void test263()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      boolean boolean0 = vector2D_Unit0.isNaN();
}"
4304,"    public double getY() {
        return y;
    }","  public void test264()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.9999);
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = rotation2D0.apply(vector2D0);
      boolean boolean0 = vector2D1.isNaN();
}"
4305,"    public boolean isNaN() {
        return Double.isNaN(x) || Double.isNaN(y);
    }","  public void test265()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.9999);
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = rotation2D0.apply(vector2D0);
      boolean boolean0 = vector2D1.isNaN();
}"
4306,"    public double getY() {
        return y;
    }","  public void test266()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(1431.79160268805, 1431.79160268805);
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
      Vector2D.Unit vector2D_Unit1 = vector2D0.normalize();
}"
4307,"    public double getX() {
        return x;
    }","  public void test267()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(1431.79160268805, 1431.79160268805);
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
      Vector2D.Unit vector2D_Unit1 = vector2D0.normalize();
}"
4308,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector2D) {
            final Vector2D rhs = (Vector2D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0 &&
                    Double.compare(y, rhs.y) == 0;
        }
        return false;
    }","  public void test268()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(1431.79160268805, 1431.79160268805);
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
      Vector2D.Unit vector2D_Unit1 = vector2D0.normalize();
}"
4309,"    public double normSq() {
        return Vectors.normSq(x, y);
    }","  public void test269()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      double double0 = vector2D0.normSq();
}"
4310,,"  public void test270()  throws Throwable  {
      Vector2D.Sum vector2D_Sum0 = Vector2D.Sum.create();
}"
4311,"    public double getY() {
        return y;
    }","  public void test271()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      double double0 = vector2D_Unit0.getY();
}"
4312,"    public double getX() {
        return x;
    }","  public void test272()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      double double0 = vector2D_Unit0.getX();
}"
4313,"    public double getY() {
        return y;
    }","  public void test273()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.POSITIVE_INFINITY.vectorTo((Vector2D) vector2D_Unit0);
}"
4314,"    public double getX() {
        return x;
    }","  public void test274()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.POSITIVE_INFINITY.vectorTo((Vector2D) vector2D_Unit0);
}"
4315,"    private Vector2D(final double x, final double y) {
        this.x = x;
        this.y = y;
    }","  public void test275()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D.Sum vector2D_Sum0 = new Vector2D.Sum(vector2D0);
      Vector2D.Sum vector2D_Sum1 = vector2D_Sum0.addScaled(0.0, vector2D0);
}"
4316,"    public double getY() {
        return y;
    }","  public void test276()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-2992.5), 2525.3);
      Vector2D.Sum vector2D_Sum0 = Vector2D.Sum.of(vector2D0);
      Vector2D vector2D1 = vector2D_Sum0.get();
}"
4317,"    public double getX() {
        return x;
    }","  public void test277()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-2992.5), 2525.3);
      Vector2D.Sum vector2D_Sum0 = Vector2D.Sum.of(vector2D0);
      Vector2D vector2D1 = vector2D_Sum0.get();
}"
4318,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector2D) {
            final Vector2D rhs = (Vector2D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0 &&
                    Double.compare(y, rhs.y) == 0;
        }
        return false;
    }","  public void test278()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-2992.5), 2525.3);
      Vector2D.Sum vector2D_Sum0 = Vector2D.Sum.of(vector2D0);
      Vector2D vector2D1 = vector2D_Sum0.get();
}"
4319,"    public double dot(final Vector2D v) {
        return Vectors.linearCombination(x, v.x, y, v.y);
    }","  public void test279()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      double double0 = vector2D_Unit0.dot((Vector2D) vector2D_Unit0);
}"
4320,"    public Vector2D add(final Vector2D v) {
        return new Vector2D(x + v.x, y + v.y);
    }","  public void test280()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Sum vector2D_Sum0 = new Vector2D.Sum(vector2D_Unit0);
      Vector2D.Sum vector2D_Sum1 = vector2D_Sum0.add((Vector2D) vector2D_Unit0);
}"
4321,"    public double getX() {
        return x;
    }","  public void test281()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-764.0), (-764.0));
      vector2D_Unit0.NaN.subtract((Vector2D) vector2D_Unit0);
}"
4322,"    public double getY() {
        return y;
    }","  public void test282()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-764.0), (-764.0));
      vector2D_Unit0.NaN.subtract((Vector2D) vector2D_Unit0);
}"
4323,"    public double getY() {
        return y;
    }","  public void test283()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Vector2D vector2D0 = Vector2D.of(doubleArray0);
      vector2D0.norm();
}"
4324,"    public double getX() {
        return x;
    }","  public void test284()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Vector2D vector2D0 = Vector2D.of(doubleArray0);
      vector2D0.norm();
}"
4325,"    public static Vector2D of(final double x, final double y) {
        return new Vector2D(x, y);
    }","  public void test285()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[9];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      vector2DArray0[7] = (Vector2D) vector2D_Unit0;
      vector2DArray0[8] = (Vector2D) vector2D_Unit0;
      Vector2D.Sum vector2D_Sum0 = Vector2D.Sum.of(vector2DArray0[4], vector2DArray0);
}"
4326,"    public static Vector2D centroid(final Vector2D first, final Vector2D... more) {
        return computeCentroid(first, Arrays.asList(more).iterator());
    }","  public void test286()  throws Throwable  {
      LinkedHashSet<Vector2D> linkedHashSet0 = new LinkedHashSet<Vector2D>();
      // Undeclared exception!
      try { 
        Vector2D.centroid((Iterable<Vector2D>) linkedHashSet0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot compute centroid: no points given
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4327,"    public static Vector2D centroid(final Vector2D first, final Vector2D... more) {
        return computeCentroid(first, Arrays.asList(more).iterator());
    }","  public void test287()  throws Throwable  {
      Vector<Vector2D.Unit> vector0 = new Vector<Vector2D.Unit>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      vector0.add(vector2D_Unit0);
      Vector<Vector2D> vector1 = new Vector<Vector2D>(vector0);
      Vector2D vector2D0 = Vector2D.centroid((Iterable<Vector2D>) vector1);
}"
4328,"    public static Vector2D min(final Vector2D first, final Vector2D... more) {
        return computeMin(first, Arrays.asList(more).iterator());
    }","  public void test288()  throws Throwable  {
      HashSet<Vector2D> hashSet0 = new HashSet<Vector2D>(2167, 2167);
      // Undeclared exception!
      try { 
        Vector2D.min((Iterable<Vector2D>) hashSet0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot compute vector min: no vectors given
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4329,"    public static Vector2D min(final Vector2D first, final Vector2D... more) {
        return computeMin(first, Arrays.asList(more).iterator());
    }","  public void test289()  throws Throwable  {
      Vector<Vector2D.Unit> vector0 = new Vector<Vector2D.Unit>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      vector0.add(vector2D_Unit0);
      Vector<Vector2D> vector1 = new Vector<Vector2D>(vector0);
      Vector2D vector2D0 = Vector2D.min((Iterable<Vector2D>) vector1);
}"
4330,"    public static Vector2D max(final Vector2D first, final Vector2D... more) {
        return computeMax(first, Arrays.asList(more).iterator());
    }","  public void test290()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      // Undeclared exception!
      try { 
        Vector2D.max((Vector2D) vector2D_Unit0, vector2DArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4331,"    public static Vector2D max(final Vector2D first, final Vector2D... more) {
        return computeMax(first, Arrays.asList(more).iterator());
    }","  public void test291()  throws Throwable  {
      PriorityQueue<Vector2D> priorityQueue0 = new PriorityQueue<Vector2D>(28);
      // Undeclared exception!
      try { 
        Vector2D.max((Iterable<Vector2D>) priorityQueue0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot compute vector max: no vectors given
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4332,"    public static Vector2D max(final Vector2D first, final Vector2D... more) {
        return computeMax(first, Arrays.asList(more).iterator());
    }","  public void test292()  throws Throwable  {
      Vector<Vector2D.Unit> vector0 = new Vector<Vector2D.Unit>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      vector0.add(vector2D_Unit0);
      Vector<Vector2D> vector1 = new Vector<Vector2D>(vector0);
      Vector2D vector2D0 = Vector2D.max((Iterable<Vector2D>) vector1);
}"
4333,"    public static Vector2D of(final double x, final double y) {
        return new Vector2D(x, y);
    }","  public void test293()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        Vector2D.of(doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Dimension mismatch: 1 != 2
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Vector2D"", e);
      }
  }"
4334,"    public double normSq() {
        return Vectors.normSq(x, y);
    }","  public void test294()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.ZERO.project((Vector2D) vector2D_Unit0);
}"
4335,"    public double getY() {
        return y;
    }","  public void test295()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.ZERO.project((Vector2D) vector2D_Unit0);
}"
4336,"    public double getX() {
        return x;
    }","  public void test296()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = vector2D_Unit0.ZERO.project((Vector2D) vector2D_Unit0);
}"
4337,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector2D) {
            final Vector2D rhs = (Vector2D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0 &&
                    Double.compare(y, rhs.y) == 0;
        }
        return false;
    }","  public void test297()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = Vector2D.NaN;
      boolean boolean0 = vector2D_Unit0.equals(vector2D0);
}"
4338,"    public boolean isNaN() {
        return Double.isNaN(x) || Double.isNaN(y);
    }","  public void test298()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = Vector2D.NaN;
      boolean boolean0 = vector2D_Unit0.equals(vector2D0);
}"
4339,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector2D) {
            final Vector2D rhs = (Vector2D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0 &&
                    Double.compare(y, rhs.y) == 0;
        }
        return false;
    }","  public void test299()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      boolean boolean0 = vector2D0.equals((Object) null);
}"
4340,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector2D) {
            final Vector2D rhs = (Vector2D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0 &&
                    Double.compare(y, rhs.y) == 0;
        }
        return false;
    }","  public void test300()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = vector2D_Unit1.reject((Vector2D) vector2D_Unit0);
      boolean boolean0 = vector2D_Unit1.equals(vector2D0);
}"
4341,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector2D) {
            final Vector2D rhs = (Vector2D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0 &&
                    Double.compare(y, rhs.y) == 0;
        }
        return false;
    }","  public void test301()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = vector2D_Unit1.reject((Vector2D) vector2D_Unit0);
      boolean boolean0 = vector2D_Unit1.equals(vector2D0);
}"
4342,"    public double normSq() {
        return Vectors.normSq(x, y);
    }","  public void test302()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = vector2D_Unit1.reject((Vector2D) vector2D_Unit0);
      boolean boolean0 = vector2D_Unit1.equals(vector2D0);
}"
4343,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector2D) {
            final Vector2D rhs = (Vector2D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0 &&
                    Double.compare(y, rhs.y) == 0;
        }
        return false;
    }","  public void test303()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      boolean boolean0 = vector2D_Unit0.equals(vector2D0);
}"
4344,"    public boolean isFinite() {
        return Double.isFinite(x) && Double.isFinite(y);
    }","  public void test304()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      boolean boolean0 = vector2D_Unit0.isFinite();
}"
4345,"    public boolean isFinite() {
        return Double.isFinite(x) && Double.isFinite(y);
    }","  public void test305()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(1576.0, Double.POSITIVE_INFINITY);
      boolean boolean0 = vector2D0.isFinite();
}"
4346,"    public double getY() {
        return y;
    }","  public void test306()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(1576.0, Double.POSITIVE_INFINITY);
      boolean boolean0 = vector2D0.isFinite();
}"
4347,"    public double getX() {
        return x;
    }","  public void test307()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(1576.0, Double.POSITIVE_INFINITY);
      boolean boolean0 = vector2D0.isFinite();
}"
4348,"    public boolean isFinite() {
        return Double.isFinite(x) && Double.isFinite(y);
    }","  public void test308()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      boolean boolean0 = vector2D_Unit0.NaN.isFinite();
}"
4349,"    public double getX() {
        return x;
    }","  public void test309()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(1576.4446084246456, Double.NEGATIVE_INFINITY);
      boolean boolean0 = vector2D0.isInfinite();
}"
4350,"    public boolean isInfinite() {
        return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y));
    }","  public void test310()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(1576.4446084246456, Double.NEGATIVE_INFINITY);
      boolean boolean0 = vector2D0.isInfinite();
}"
4351,"    public double getY() {
        return y;
    }","  public void test311()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(1576.4446084246456, Double.NEGATIVE_INFINITY);
      boolean boolean0 = vector2D0.isInfinite();
}"
4352,"    public boolean isInfinite() {
        return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y));
    }","  public void test312()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      boolean boolean0 = vector2D0.isInfinite();
}"
4353,"    public boolean isInfinite() {
        return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y));
    }","  public void test313()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      boolean boolean0 = vector2D_Unit0.isInfinite();
}"
4354,"    public boolean isNaN() {
        return Double.isNaN(x) || Double.isNaN(y);
    }","  public void test314()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      boolean boolean0 = vector2D_Unit0.isInfinite();
}"
4355,"    public boolean isNaN() {
        return Double.isNaN(x) || Double.isNaN(y);
    }","  public void test315()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      boolean boolean0 = vector2D0.isInfinite();
}"
4356,"    public boolean isInfinite() {
        return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y));
    }","  public void test316()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      boolean boolean0 = vector2D0.isInfinite();
}"
4357,"    public double getX() {
        return x;
    }","  public void test317()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      double double0 = vector2D_Unit1.getY();
}"
4358,"    public double getY() {
        return y;
    }","  public void test318()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      double double0 = vector2D_Unit1.getY();
}"
4359,"    public Vector2D.Unit orthogonal() {
        return Unit.from(-y, x);
    }","  public void test319()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector2D0.orthogonal();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
4360,"    public int getDimension() {
        return 2;
    }","  public void test320()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      int int0 = vector2D_Unit0.getDimension();
}"
4361,"    public double getY() {
        return y;
    }","  public void test321()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.getZero();
      boolean boolean0 = vector2D_Unit0.equals(vector2D0);
}"
4362,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof Vector2D) {
            final Vector2D rhs = (Vector2D) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(x, rhs.x) == 0 &&
                    Double.compare(y, rhs.y) == 0;
        }
        return false;
    }","  public void test322()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.getZero();
      boolean boolean0 = vector2D_Unit0.equals(vector2D0);
}"
4363,"    public Vector2D.Unit orthogonal() {
        return Unit.from(-y, x);
    }","  public void test323()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      // Undeclared exception!
      try { 
        vector2D_Unit0.orthogonal((Vector2D) vector2D_Unit0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
4364,"    public double getY() {
        return y;
    }","  public void test324()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.add((Vector2D) vector2D_Unit0);
}"
4365,"    public double getX() {
        return x;
    }","  public void test325()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.add((Vector2D) vector2D_Unit0);
}"
4366,"    public double getX() {
        return x;
    }","  public void test326()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.add(0.0, (Vector2D) vector2D_Unit0);
}"
4367,"    public double getY() {
        return y;
    }","  public void test327()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.add(0.0, (Vector2D) vector2D_Unit0);
}"
4368,"    public static Vector2D parse(final String str) {
        return SimpleTupleFormat.getDefault().parse(str, Vector2D::new);
    }","  public void test328()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector2D.parse(""org.apache.commons.geometry.euclidean.twod.Vector2D"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \""org.apache.commons.geometry.euclidean.twod.Vector2D\"" at index 0: expected \""(\"" but found \""o\""
         //
         verifyException(""org.apache.commons.geometry.core.internal.SimpleTupleFormat"", e);
      }
  }"
4369,"    public double getY() {
        return y;
    }","  public void test329()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(1576.4446084246456, Double.NEGATIVE_INFINITY);
      Vector2D vector2D1 = vector2D0.POSITIVE_INFINITY.negate();
      Vector2D vector2D2 = vector2D0.lerp(vector2D1, 1576.4446084246456);
}"
4370,"    public double getX() {
        return x;
    }","  public void test330()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(1576.4446084246456, Double.NEGATIVE_INFINITY);
      Vector2D vector2D1 = vector2D0.POSITIVE_INFINITY.negate();
      Vector2D vector2D2 = vector2D0.lerp(vector2D1, 1576.4446084246456);
}"
4371,"    public boolean isInfinite() {
        return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y));
    }","  public void test331()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(1576.4446084246456, Double.NEGATIVE_INFINITY);
      Vector2D vector2D1 = vector2D0.POSITIVE_INFINITY.negate();
      Vector2D vector2D2 = vector2D0.lerp(vector2D1, 1576.4446084246456);
}"
4372,"    public double getX() {
        return x;
    }","  public void test332()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(1576.4446084246456, Double.NEGATIVE_INFINITY);
      Vector2D vector2D1 = vector2D0.POSITIVE_INFINITY.negate();
      Vector2D vector2D2 = vector2D0.lerp(vector2D1, 1576.4446084246456);
}"
4373,"    public String toString() {
        return SimpleTupleFormat.getDefault().format(x, y);
    }","  public void test333()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(0.25, 0.25);
      String string0 = vector2D0.toString();
}"
4374,"    public double getX() {
        return x;
    }","  public void test334()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.reject((Vector2D) vector2D_Unit0);
}"
4375,"    public double getY() {
        return y;
    }","  public void test335()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.reject((Vector2D) vector2D_Unit0);
}"
4376,"    public double normSq() {
        return Vectors.normSq(x, y);
    }","  public void test336()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D vector2D0 = vector2D_Unit0.reject((Vector2D) vector2D_Unit0);
}"
4377,"    public double getX() {
        return x;
    }","  public void test337()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
}"
4378,"    public double getY() {
        return y;
    }","  public void test338()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
}"
4379,"    public double getY() {
        return y;
    }","  public void test339()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.min(vector2DArray0[5], vector2DArray0);
      Vector2D vector2D1 = vector2D0.withNorm(0.0);
}"
4380,"    public double getX() {
        return x;
    }","  public void test340()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.min(vector2DArray0[5], vector2DArray0);
      Vector2D vector2D1 = vector2D0.withNorm(0.0);
}"
4381,"    public double getX() {
        return x;
    }","  public void test341()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.min(vector2DArray0[5], vector2DArray0);
      Vector2D vector2D1 = vector2D0.withNorm(0.0);
}"
4382,"    public double getY() {
        return y;
    }","  public void test342()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[7];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.min(vector2DArray0[5], vector2DArray0);
      Vector2D vector2D1 = vector2D0.withNorm(0.0);
}"
4383,"    public double distanceSq(final Vector2D v) {
        return Vectors.normSq(x - v.x, y - v.y);
    }","  public void test343()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      double double0 = vector2D_Unit0.distanceSq((Vector2D) vector2D_Unit0);
}"
4384,"    public double getY() {
        return y;
    }","  public void test344()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.centroid((Vector2D) vector2D_Unit0, vector2DArray0);
}"
4385,"    public double getX() {
        return x;
    }","  public void test345()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.centroid((Vector2D) vector2D_Unit0, vector2DArray0);
}"
4386,"    public double getY() {
        return y;
    }","  public void test346()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(1576.0, Double.POSITIVE_INFINITY);
      Vector2D vector2D1 = vector2D0.lerp(vector2D0, Double.POSITIVE_INFINITY);
}"
4387,"    public double getX() {
        return x;
    }","  public void test347()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(1576.0, Double.POSITIVE_INFINITY);
      Vector2D vector2D1 = vector2D0.lerp(vector2D0, Double.POSITIVE_INFINITY);
}"
4388,"    public double getX() {
        return x;
    }","  public void test348()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(1576.0, Double.POSITIVE_INFINITY);
      Vector2D vector2D1 = vector2D0.lerp(vector2D0, Double.POSITIVE_INFINITY);
}"
4389,"    public double distance(final Vector2D v) {
        return Vectors.norm(x - v.x, y - v.y);
    }","  public void test349()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      double double0 = vector2D_Unit0.distance((Vector2D) vector2D_Unit0);
}"
4390,"    public Vector2D project(final Vector2D base) {
        return getComponent(base, false, Vector2D::new);
    }","  public void test350()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector2D0.POSITIVE_INFINITY.project(vector2D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
4391,"    public Unit directionTo(final Vector2D v) {
        return vectorTo(v).normalize();
    }","  public void test351()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      // Undeclared exception!
      try { 
        vector2D_Unit0.directionTo((Vector2D) vector2D_Unit0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
4392,"    public double angle(final Vector2D v) {
        final double normProduct = getCheckedNorm() * v.getCheckedNorm();

        final double dot = dot(v);
        final double threshold = normProduct * 0.9999;
        if ((dot < -threshold) || (dot > threshold)) {
            // the vectors are almost aligned, compute using the sine
            final double n = Math.abs(Vectors.linearCombination(x, v.y, -y, v.x));
            if (dot >= 0) {
                return Math.asin(n / normProduct);
            }
            return Math.PI - Math.asin(n / normProduct);
        }

        // the vectors are sufficiently separated to use the cosine
        return Math.acos(dot / normProduct);
    }","  public void test352()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(0.25, 0.25);
      // Undeclared exception!
      try { 
        vector2D0.ZERO.angle(vector2D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
4393,"    Split<LineConvexSubset> splitOnIntersection(final Line splitter, final Vector2D intersection) {
        final Line line = getLine();

        final ReverseRay low = new ReverseRay(line, intersection);
        final Ray high = new Ray(line, intersection);

        return createSplitResult(splitter, low, high);
    }","  public void test0()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1050.31740348724), precision_DoubleEquivalence0);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Split<LineConvexSubset> split0 = lineSpanningSubset0.splitOnIntersection(line0, vector2D_Unit0);
}"
4394,"    double closestAbscissa(final double abscissa) {
        return abscissa;
    }","  public void test1()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Line line0 = new Line(vector2D_Unit0, (-1711.0096588968024), (Precision.DoubleEquivalence) null);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      double double0 = lineSpanningSubset0.closestAbscissa(0.0);
}"
4395,"    double closestAbscissa(final double abscissa) {
        return abscissa;
    }","  public void test2()  throws Throwable  {
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset((Line) null);
      double double0 = lineSpanningSubset0.closestAbscissa((-3034.67296));
}"
4396,"    public LineSpanningSubset transform(final Transform<Vector2D> transform) {
        return new LineSpanningSubset(getLine().transform(transform));
    }","  public void test3()  throws Throwable  {
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset((Line) null);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createShear(0.0, 0.0);
      // Undeclared exception!
      try { 
        lineSpanningSubset0.transform(affineTransformMatrix2D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.LineSpanningSubset"", e);
      }
  }"
4397,"    public LineSpanningSubset transform(final Transform<Vector2D> transform) {
        return new LineSpanningSubset(getLine().transform(transform));
    }","  public void test4()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-1050.31740348724), precision_DoubleEquivalence0);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Rotation2D rotation2D0 = Rotation2D.identity();
      // Undeclared exception!
      try { 
        lineSpanningSubset0.transform(rotation2D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Line direction cannot be zero
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
4398,"    public String toString() {
        final Line line = getLine();

        return MessageFormat.format(Line.TO_STRING_FORMAT,
                getClass().getSimpleName(),
                line.getOrigin(),
                line.getDirection());
    }","  public void test5()  throws Throwable  {
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset((Line) null);
      // Undeclared exception!
      try { 
        lineSpanningSubset0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.LineSpanningSubset"", e);
      }
  }"
4399,"    public LineSpanningSubset reverse() {
        return new LineSpanningSubset(getLine().reverse());
    }","  public void test6()  throws Throwable  {
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset((Line) null);
      // Undeclared exception!
      try { 
        lineSpanningSubset0.reverse();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.LineSpanningSubset"", e);
      }
  }"
4400,"    public double getSubspaceEnd() {
        return Double.POSITIVE_INFINITY;
    }","  public void test7()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Line line0 = new Line(vector2D_Unit0, 1.0, (Precision.DoubleEquivalence) null);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      double double0 = lineSpanningSubset0.getSubspaceEnd();
}"
4401,"    public double getSubspaceStart() {
        return Double.NEGATIVE_INFINITY;
    }","  public void test8()  throws Throwable  {
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset((Line) null);
      double double0 = lineSpanningSubset0.getSubspaceStart();
}"
4402,"    public Vector2D getCentroid() {
        return null;
    }","  public void test9()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1050.31740348724), precision_DoubleEquivalence0);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Vector2D vector2D0 = lineSpanningSubset0.getCentroid();
}"
4403,"    public boolean isFull() {
        return true;
    }","  public void test10()  throws Throwable  {
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset((Line) null);
      boolean boolean0 = lineSpanningSubset0.isFull();
}"
4404,"    public Vector2D getEndPoint() {
        return null;
    }","  public void test11()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Line line0 = new Line(vector2D_Unit0, 2295.2729, (Precision.DoubleEquivalence) null);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Vector2D vector2D0 = lineSpanningSubset0.getEndPoint();
}"
4405,"    double closestAbscissa(final double abscissa) {
        return abscissa;
    }","  public void test12()  throws Throwable  {
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset((Line) null);
      double double0 = lineSpanningSubset0.closestAbscissa(Double.POSITIVE_INFINITY);
}"
4406,"    RegionLocation classifyAbscissa(final double abscissa) {
        return RegionLocation.INSIDE;
    }","  public void test13()  throws Throwable  {
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset((Line) null);
      RegionLocation regionLocation0 = lineSpanningSubset0.classifyAbscissa(Double.POSITIVE_INFINITY);
}"
4407,"    Split<LineConvexSubset> splitOnIntersection(final Line splitter, final Vector2D intersection) {
        final Line line = getLine();

        final ReverseRay low = new ReverseRay(line, intersection);
        final Ray high = new Ray(line, intersection);

        return createSplitResult(splitter, low, high);
    }","  public void test14()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-1050.31740348724), precision_DoubleEquivalence0);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Rotation2D rotation2D0 = Rotation2D.identity();
      LineSpanningSubset lineSpanningSubset1 = lineSpanningSubset0.transform(rotation2D0);
      Split<LineConvexSubset> split0 = lineSpanningSubset1.splitOnIntersection(line0, vector2D_Unit0);
}"
4408,"    public String toString() {
        final Line line = getLine();

        return MessageFormat.format(Line.TO_STRING_FORMAT,
                getClass().getSimpleName(),
                line.getOrigin(),
                line.getDirection());
    }","  public void test15()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Line line0 = new Line(vector2D_Unit0, 2295.2729, (Precision.DoubleEquivalence) null);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      String string0 = lineSpanningSubset0.toString();
}"
4409,"    public boolean isFinite() {
        return false;
    }","  public void test16()  throws Throwable  {
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset((Line) null);
      boolean boolean0 = lineSpanningSubset0.isFinite();
}"
4410,"    public boolean isInfinite() {
        return true;
    }","  public void test17()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Line line0 = new Line(vector2D_Unit0, 0.9999999999, (Precision.DoubleEquivalence) null);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      boolean boolean0 = lineSpanningSubset0.isInfinite();
}"
4411,"    public Vector2D getStartPoint() {
        return null;
    }","  public void test18()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Line line0 = new Line(vector2D_Unit0, 2295.2729, (Precision.DoubleEquivalence) null);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Vector2D vector2D0 = lineSpanningSubset0.getStartPoint();
}"
4412,"    public LineSpanningSubset reverse() {
        return new LineSpanningSubset(getLine().reverse());
    }","  public void test19()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Line line0 = new Line(vector2D_Unit0, 2295.2729, (Precision.DoubleEquivalence) null);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      LineSpanningSubset lineSpanningSubset1 = lineSpanningSubset0.reverse();
}"
4413,"    Split<LineConvexSubset> splitOnIntersection(final Line splitter, final Vector2D intersection) {
        final Line line = getLine();

        final ReverseRay low = new ReverseRay(line, intersection);
        final Ray high = new Ray(line, intersection);

        return createSplitResult(splitter, low, high);
    }","  public void test20()  throws Throwable  {
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset((Line) null);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      // Undeclared exception!
      try { 
        lineSpanningSubset0.splitOnIntersection((Line) null, vector2D_Unit0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.LineSubset"", e);
      }
  }"
4414,"    public Bounds2D getBounds() {
        return null; // infinite; no bounds
    }","  public void test21()  throws Throwable  {
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset((Line) null);
      Bounds2D bounds2D0 = lineSpanningSubset0.getBounds();
}"
4415,"    public double getSize() {
        return Double.POSITIVE_INFINITY;
    }","  public void test22()  throws Throwable  {
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset((Line) null);
      double double0 = lineSpanningSubset0.getSize();
}"
4416,"    public Precision.DoubleEquivalence getPrecision() {
        return line.getPrecision();
    }","  public void test0()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(""sK]cK)Iwj~&WxMb"").when(precision_DoubleEquivalence0).toString();
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      doReturn((Vector2D.Unit) null, (Vector2D.Unit) null).when(line0).getDirection();
      doReturn(vector2D_Unit0).when(line0).getOffsetDirection();
      doReturn("""", """").when(line0).toString();
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, (-1.0), precision_DoubleEquivalence1);
      Split<LineConvexSubset> split0 = lineSpanningSubset0.splitOnIntersection(line1, vector2D_Unit0);
}"
4417,,"  public void test1()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Line line0 = new Line(vector2D_Unit0, 2080.0607999, (Precision.DoubleEquivalence) null);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Split<LineConvexSubset> split0 = lineSpanningSubset0.splitOnIntersection(line0, vector2D_Unit0);
}"
4418,"    <T extends LineSubset> Split<T> createSplitResult(final Line splitter, final T low, final T high) {
        return splitterPlusIsPositiveFacing(splitter) ?
                new Split<>(low, high) :
                new Split<>(high, low);
    }","  public void test2()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(precision_DoubleEquivalence0).toString();
      doReturn(true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, (-1.0), precision_DoubleEquivalence1);
      Rotation2D rotation2D0 = Rotation2D.of((-1.0));
      Line line2 = line1.transform(rotation2D0);
      Line line3 = line2.reverse();
      Ray ray0 = line1.rayFrom((Vector2D) vector2D_Unit0);
      ReverseRay reverseRay0 = line2.reverseRayTo((Vector2D) vector2D_Unit0);
      Split<ReverseRay> split0 = ray0.createSplitResult(line3, reverseRay0, reverseRay0);
}"
4419,"    public Vector1D toSubspace(final Vector2D pt) {
        return line.toSubspace(pt);
    }","  public void test3()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn((Vector1D) null).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D();
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line0, regionBSPTree1D0);
      Vector1D vector1D0 = embeddedTreeLineSubset0.toSubspace((Vector2D) vector2D_Unit0);
}"
4420,"    public Vector1D toSubspace(final Vector2D pt) {
        return line.toSubspace(pt);
    }","  public void test4()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector1D vector1D0 = Vector1D.NaN;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Vector1D vector1D1 = lineSpanningSubset0.toSubspace((Vector2D) vector2D_Unit0);
}"
4421,"    public Vector1D toSubspace(final Vector2D pt) {
        return line.toSubspace(pt);
    }","  public void test5()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Vector1D vector1D1 = lineSpanningSubset0.toSubspace((Vector2D) vector2D_Unit0);
}"
4422,"    public Vector1D toSubspace(final Vector2D pt) {
        return line.toSubspace(pt);
    }","  public void test6()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector1D vector1D0 = Vector1D.ZERO;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Vector1D vector1D1 = lineSpanningSubset0.toSubspace((Vector2D) vector2D_Unit0);
}"
4423,"    public Vector1D toSubspace(final Vector2D pt) {
        return line.toSubspace(pt);
    }","  public void test7()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(precision_DoubleEquivalence0).toString();
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, (-1.0), precision_DoubleEquivalence1);
      Line line2 = line1.reverse();
      Segment segment0 = line2.segment((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      Vector1D vector1D0 = segment0.toSubspace((Vector2D) vector2D_Unit0);
}"
4424,"    public Vector2D toSpace(final Vector1D pt) {
        return line.toSpace(pt);
    }","  public void test8()  throws Throwable  {
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn((Vector2D) null).when(line0).toSpace(any(org.apache.commons.geometry.euclidean.oned.Vector1D.class));
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Vector2D vector2D0 = lineSpanningSubset0.toSpace((Vector1D) null);
}"
4425,"    public Vector2D toSpace(final Vector1D pt) {
        return line.toSpace(pt);
    }","  public void test9()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1.0), precision_DoubleEquivalence0);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector2D vector2D0 = lineSpanningSubset0.toSpace(vector1D0);
}"
4426,"    public Vector2D toSpace(final Vector1D pt) {
        return line.toSpace(pt);
    }","  public void test10()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(precision_DoubleEquivalence0).toString();
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, (-1.0), precision_DoubleEquivalence1);
      Rotation2D rotation2D0 = Rotation2D.of((-1.0));
      Line line2 = line1.transform(rotation2D0);
      Line line3 = line2.reverse();
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line3);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector2D vector2D0 = embeddedTreeLineSubset0.toSpace(vector1D0);
}"
4427,"    public Vector2D toSpace(final Vector1D pt) {
        return line.toSpace(pt);
    }","  public void test11()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 1.0, precision_DoubleEquivalence0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.fromColumnVectors((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      Line line1 = line0.transform(affineTransformMatrix2D0);
      Segment segment0 = line1.segment((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      Vector1D vector1D0 = Vector1D.of((-1.0));
      Vector2D vector2D0 = segment0.toSpace(vector1D0);
}"
4428,"    public Vector2D toSpace(final Vector1D pt) {
        return line.toSpace(pt);
    }","  public void test12()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector2D_Unit0).when(line0).toSpace(any(org.apache.commons.geometry.euclidean.oned.Vector1D.class));
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Vector2D vector2D0 = lineSpanningSubset0.toSpace((Vector1D) null);
}"
4429,"    public Vector2D toSpace(final Vector1D pt) {
        return line.toSpace(pt);
    }","  public void test13()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(precision_DoubleEquivalence0).toString();
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 715, precision_DoubleEquivalence1);
      Line line2 = line1.reverse();
      ReverseRay reverseRay0 = line2.reverseRayTo((-137.59));
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector2D vector2D0 = reverseRay0.toSpace((Vector1D) vector1D_Unit0);
}"
4430,"    public abstract List<LineConvexSubset> toConvex();

    /** {@inheritDoc}","  public void test14()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Line line0 = new Line(vector2D_Unit0, 2953.36183769248, (Precision.DoubleEquivalence) null);
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.empty();
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line0, regionBSPTree1D0);
      List<LineConvexSubset> list0 = embeddedTreeLineSubset0.toConvex();
}"
4431,"    public abstract List<LineConvexSubset> toConvex();

    /** {@inheritDoc}","  public void test15()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-118.46195776037784), precision_DoubleEquivalence0);
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line0, true);
      List<LineConvexSubset> list0 = embeddedTreeLineSubset0.toConvex();
}"
4432,"    boolean splitterPlusIsPositiveFacing(final Line splitterLine) {
        return line.getOffsetDirection().dot(splitterLine.getDirection()) <= 0;
    }","  public void test16()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 2271.1659198849206, precision_DoubleEquivalence0);
      Segment segment0 = line0.segment((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      boolean boolean0 = segment0.splitterPlusIsPositiveFacing(line0);
}"
4433,"    boolean splitterPlusIsPositiveFacing(final Line splitterLine) {
        return line.getOffsetDirection().dot(splitterLine.getDirection()) <= 0;
    }","  public void test17()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(""sK]cK)Iwj~&WxMb"").when(precision_DoubleEquivalence0).toString();
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      doReturn(vector2D_Unit0).when(line0).getOffsetDirection();
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, (-1.0), precision_DoubleEquivalence1);
      boolean boolean0 = lineSpanningSubset0.splitterPlusIsPositiveFacing(line1);
}"
4434,"    public Vector2D intersection(final Line inputLine) {
        final Vector2D pt = line.intersection(inputLine);
        return (pt != null && contains(pt)) ? pt : null;
    }","  public void test18()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(0.0, (-3672.0));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn("""", """").when(precision_DoubleEquivalence0).toString();
      doReturn(0).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(precision_DoubleEquivalence1).toString();
      doReturn((-1340)).when(precision_DoubleEquivalence1).compare(anyDouble() , anyDouble());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0, precision_DoubleEquivalence1).when(line0).getPrecision();
      doReturn(0.0).when(line0).abscissa(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      doReturn(true).when(line0).contains(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      doReturn(vector2D_Unit0).when(line0).intersection(any(org.apache.commons.geometry.euclidean.twod.Line.class));
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence2 = lineSpanningSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 1345.29678, precision_DoubleEquivalence2);
      LineSpanningSubset lineSpanningSubset1 = new LineSpanningSubset(line1);
      lineSpanningSubset0.getNonIntersectingSplitResult(line1, lineSpanningSubset1);
      ReverseRay reverseRay0 = line1.reverseRayTo((-137.59));
      Vector2D vector2D0 = lineSpanningSubset0.intersection((LineSubset) reverseRay0);
}"
4435,"    public Vector2D intersection(final Line inputLine) {
        final Vector2D pt = line.intersection(inputLine);
        return (pt != null && contains(pt)) ? pt : null;
    }","  public void test19()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(0.0, (-3672.0));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(""\n"", ""org.apache.commons.geometry.core.partitioning.test.TestRegionBSPTree$TestRegionNode"").when(precision_DoubleEquivalence0).toString();
      doReturn(0).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 1345.29678, precision_DoubleEquivalence1);
      ReverseRay reverseRay0 = new ReverseRay(line1, vector2D_Unit0);
      Vector2D vector2D0 = reverseRay0.intersection(line1);
}"
4436,"    public Vector2D intersection(final Line inputLine) {
        final Vector2D pt = line.intersection(inputLine);
        return (pt != null && contains(pt)) ? pt : null;
    }","  public void test20()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(precision_DoubleEquivalence0).toString();
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      doReturn(0.0).when(line0).abscissa(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      doReturn(true).when(line0).contains(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      doReturn(vector2D_Unit0).when(line0).intersection(any(org.apache.commons.geometry.euclidean.twod.Line.class));
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 1345.29678, precision_DoubleEquivalence1);
      Vector2D vector2D0 = lineSpanningSubset0.intersection(line1);
}"
4437,"    public abstract HyperplaneBoundedRegion<Vector1D> getSubspaceRegion();

    /** {@inheritDoc}","  public void test21()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 351.82665, precision_DoubleEquivalence0);
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line0, (RegionBSPTree1D) null);
      HyperplaneBoundedRegion<Vector1D> hyperplaneBoundedRegion0 = embeddedTreeLineSubset0.getSubspaceRegion();
}"
4438,"    public abstract HyperplaneBoundedRegion<Vector1D> getSubspaceRegion();

    /** {@inheritDoc}","  public void test22()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(precision_DoubleEquivalence0).toString();
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      ReverseRay reverseRay0 = line0.reverseRayTo((-3965.31405));
      HyperplaneBoundedRegion<Vector1D> hyperplaneBoundedRegion0 = reverseRay0.getSubspaceRegion();
}"
4439,"    public Precision.DoubleEquivalence getPrecision() {
        return line.getPrecision();
    }","  public void test23()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Line line0 = new Line(vector2D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      Segment segment0 = line0.segment((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = segment0.getPrecision();
}"
4440,"    public Line getLine() {
        return getHyperplane();
    }","  public void test24()  throws Throwable  {
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, (RegionBSPTree1D) null);
      Line line0 = embeddedTreeLineSubset0.getLine();
}"
4441,"    public Line getLine() {
        return getHyperplane();
    }","  public void test25()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(0.0, (-3672.0));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      ReverseRay reverseRay0 = line0.reverseRayTo((Vector2D) vector2D_Unit0);
      Line line1 = reverseRay0.getLine();
}"
4442,"    public Line getLine() {
        return getHyperplane();
    }","  public void test26()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Line line0 = new Line(vector2D_Unit0, 2080.0607999, (Precision.DoubleEquivalence) null);
      Line line1 = line0.reverse();
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line1);
      Line line2 = lineSpanningSubset0.getLine();
}"
4443,"    public Line getHyperplane() {
        return line;
    }","  public void test27()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(""20=D2\"""").when(precision_DoubleEquivalence0).toString();
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      ReverseRay reverseRay0 = new ReverseRay(line0, vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = reverseRay0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence1);
      Segment segment0 = line1.segment(0.0, 2.0);
      Line line2 = segment0.getHyperplane();
}"
4444,"    public Line getHyperplane() {
        return line;
    }","  public void test28()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(""c_kk1`\""$p=L}+?_0"").when(precision_DoubleEquivalence0).toString();
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, (-1.0), precision_DoubleEquivalence1);
      Line line2 = line1.reverse();
      Segment segment0 = line2.segment((-265.0), (-265.0));
      Line line3 = segment0.getHyperplane();
}"
4445,"    public Line getHyperplane() {
        return line;
    }","  public void test29()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(precision_DoubleEquivalence0).toString();
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, (-1.0), precision_DoubleEquivalence1);
      Ray ray0 = line1.rayFrom((Vector2D) vector2D_Unit0);
      Line line2 = ray0.getHyperplane();
}"
4446,"    public abstract Bounds2D getBounds();

    /** {@inheritDoc}","  public void test30()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Line line0 = new Line(vector2D_Unit0, 50.592087927178554, precision_DoubleEquivalence0);
      ReverseRay reverseRay0 = line0.reverseRayTo(50.592087927178554);
      Bounds2D bounds2D0 = reverseRay0.getBounds();
}"
4447,"    public abstract Bounds2D getBounds();

    /** {@inheritDoc}","  public void test31()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Line line0 = new Line(vector2D_Unit0, 0.3612196050536827, (Precision.DoubleEquivalence) null);
      Segment segment0 = line0.segment(0.3612196050536827, 0.3612196050536827);
      Bounds2D bounds2D0 = segment0.getBounds();
}"
4448,"    public Vector1D toSubspace(final Vector2D pt) {
        return line.toSubspace(pt);
    }","  public void test32()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      ReverseRay reverseRay0 = new ReverseRay((Line) null, vector2D_Unit0);
      // Undeclared exception!
      try { 
        reverseRay0.toSubspace((Vector2D) vector2D_Unit0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.LineSubset"", e);
      }
  }"
4449,"    public Vector2D toSpace(final Vector1D pt) {
        return line.toSpace(pt);
    }","  public void test33()  throws Throwable  {
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, false);
      Vector1D vector1D0 = Vector1D.of((-1327.597130975044));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(vector1D0);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset0.toSpace((Vector1D) vector1D_Unit0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.LineSubset"", e);
      }
  }"
4450,"    boolean splitterPlusIsPositiveFacing(final Line splitterLine) {
        return line.getOffsetDirection().dot(splitterLine.getDirection()) <= 0;
    }","  public void test34()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(precision_DoubleEquivalence0).toString();
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, (-1.6405376294438294), precision_DoubleEquivalence1);
      ReverseRay reverseRay0 = line1.reverseRayTo((Vector2D) vector2D_Unit0);
      // Undeclared exception!
      try { 
        reverseRay0.splitterPlusIsPositiveFacing((Line) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.LineSubset"", e);
      }
  }"
4451,"    public Vector2D intersection(final Line inputLine) {
        final Vector2D pt = line.intersection(inputLine);
        return (pt != null && contains(pt)) ? pt : null;
    }","  public void test35()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Line line0 = new Line(vector2D_Unit0, 443.64, (Precision.DoubleEquivalence) null);
      Segment segment0 = line0.segment((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      // Undeclared exception!
      try { 
        lineSpanningSubset0.intersection((LineSubset) segment0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
4452,"    public Vector2D intersection(final Line inputLine) {
        final Vector2D pt = line.intersection(inputLine);
        return (pt != null && contains(pt)) ? pt : null;
    }","  public void test36()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Line line0 = new Line(vector2D_Unit0, (-546.6010419423), (Precision.DoubleEquivalence) null);
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      // Undeclared exception!
      try { 
        segment0.intersection(line0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
4453,"    public Precision.DoubleEquivalence getPrecision() {
        return line.getPrecision();
    }","  public void test37()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      ReverseRay reverseRay0 = new ReverseRay((Line) null, vector2D_Unit0);
      // Undeclared exception!
      try { 
        reverseRay0.getPrecision();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.LineSubset"", e);
      }
  }"
4454,"    <T extends LineSubset> Split<T> getNonIntersectingSplitResult(final Line splitter, final T subset) {
        // check which side of the splitter we lie on
        final double offset = splitter.offset(subset.getLine());
        final int comp = getPrecision().compare(offset, 0.0);

        if (comp < 0) {
            return new Split<>(subset, null);
        } else if (comp > 0) {
            return new Split<>(null, subset);
        } else {
            return new Split<>(null, null);
        }
    }","  public void test38()  throws Throwable  {
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      ReverseRay reverseRay0 = new ReverseRay(line0, (Vector2D) null);
      Line line1 = new Line((Vector2D.Unit) null, 0.0, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        reverseRay0.getNonIntersectingSplitResult(line1, (LineSpanningSubset) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.LineSubset"", e);
      }
  }"
4455,"    <T extends LineSubset> Split<T> createSplitResult(final Line splitter, final T low, final T high) {
        return splitterPlusIsPositiveFacing(splitter) ?
                new Split<>(low, high) :
                new Split<>(high, low);
    }","  public void test39()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = new Line(vector2D_Unit0, (-2057.0), precision_DoubleEquivalence0);
      ReverseRay reverseRay0 = new ReverseRay((Line) null, vector2D_Unit0);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      // Undeclared exception!
      try { 
        reverseRay0.createSplitResult(line0, lineSpanningSubset0, lineSpanningSubset0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.LineSubset"", e);
      }
  }"
4456,"    public RegionLocation classify(final Vector2D pt) {
        if (line.contains(pt)) {
            return classifyAbscissa(line.abscissa(pt));
        }

        return RegionLocation.OUTSIDE;
    }","  public void test40()  throws Throwable  {
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset((Line) null);
      Vector2D vector2D0 = Vector2D.NaN;
      // Undeclared exception!
      try { 
        lineSpanningSubset0.classify(vector2D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.LineSubset"", e);
      }
  }"
4457,"    public Vector2D intersection(final Line inputLine) {
        final Vector2D pt = line.intersection(inputLine);
        return (pt != null && contains(pt)) ? pt : null;
    }","  public void test41()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(precision_DoubleEquivalence0).toString();
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 715, precision_DoubleEquivalence1);
      ReverseRay reverseRay0 = line1.reverseRayTo((-137.59));
      Vector2D vector2D0 = reverseRay0.intersection(line1);
}"
4458,"    public RegionLocation classify(final Vector2D pt) {
        if (line.contains(pt)) {
            return classifyAbscissa(line.abscissa(pt));
        }

        return RegionLocation.OUTSIDE;
    }","  public void test42()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.6, precision_DoubleEquivalence0);
      Ray ray0 = line0.rayFrom(0.6);
      RegionLocation regionLocation0 = ray0.classify((Vector2D) vector2D_Unit0);
}"
4459,"    public Line getHyperplane() {
        return line;
    }","  public void test43()  throws Throwable  {
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset((Line) null);
      Line line0 = lineSpanningSubset0.getHyperplane();
}"
4460,"    public Line getLine() {
        return getHyperplane();
    }","  public void test44()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.6, precision_DoubleEquivalence0);
      Ray ray0 = line0.rayFrom(0.6);
      Line line1 = ray0.getLine();
}"
4461,"    <T extends LineSubset> Split<T> getNonIntersectingSplitResult(final Line splitter, final T subset) {
        // check which side of the splitter we lie on
        final double offset = splitter.offset(subset.getLine());
        final int comp = getPrecision().compare(offset, 0.0);

        if (comp < 0) {
            return new Split<>(subset, null);
        } else if (comp > 0) {
            return new Split<>(null, subset);
        } else {
            return new Split<>(null, null);
        }
    }","  public void test45()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn("""", ""ISwOm7"").when(precision_DoubleEquivalence0).toString();
      doReturn(1).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, (-1.6405376294438294), precision_DoubleEquivalence1);
      Segment segment0 = line1.segment((-1.6405376294438294), (-1.6405376294438294));
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line1);
      Split<Segment> split0 = embeddedTreeLineSubset0.getNonIntersectingSplitResult(line1, segment0);
}"
4462,"    public Vector2D intersection(final Line inputLine) {
        final Vector2D pt = line.intersection(inputLine);
        return (pt != null && contains(pt)) ? pt : null;
    }","  public void test46()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(""}y5zCCUcy]{s,"").when(precision_DoubleEquivalence0).toString();
      doReturn(1).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false, true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.6, precision_DoubleEquivalence0);
      Ray ray0 = line0.rayFrom(0.6);
      Vector2D vector2D0 = ray0.intersection((LineSubset) ray0);
}"
4463,"    public Vector2D intersection(final Line inputLine) {
        final Vector2D pt = line.intersection(inputLine);
        return (pt != null && contains(pt)) ? pt : null;
    }","  public void test47()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(0.0, (-3672.0));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(precision_DoubleEquivalence0).toString();
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      doReturn(0.0).when(line0).abscissa(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      doReturn(true).when(line0).contains(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      doReturn(vector2D_Unit0).when(line0).intersection(any(org.apache.commons.geometry.euclidean.twod.Line.class));
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 1345.29678, precision_DoubleEquivalence1);
      Vector2D vector2D0 = lineSpanningSubset0.intersection(line1);
}"
4464,"    public Vector2D intersection(final Line inputLine) {
        final Vector2D pt = line.intersection(inputLine);
        return (pt != null && contains(pt)) ? pt : null;
    }","  public void test48()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(0.0, (-3672.0));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(precision_DoubleEquivalence0).toString();
      doReturn(false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(precision_DoubleEquivalence1).toString();
      doReturn(0).when(precision_DoubleEquivalence1).compare(anyDouble() , anyDouble());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0, precision_DoubleEquivalence1).when(line0).getPrecision();
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence2 = lineSpanningSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 1345.29678, precision_DoubleEquivalence2);
      LineSpanningSubset lineSpanningSubset1 = new LineSpanningSubset(line1);
      lineSpanningSubset0.getNonIntersectingSplitResult(line1, lineSpanningSubset1);
      ReverseRay reverseRay0 = line1.reverseRayTo((-137.59));
      Vector2D vector2D0 = reverseRay0.intersection(line1);
}"
4465,"    public Vector2D intersection(final Line inputLine) {
        final Vector2D pt = line.intersection(inputLine);
        return (pt != null && contains(pt)) ? pt : null;
    }","  public void test49()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(""}y5zCCUcy]{s,"").when(precision_DoubleEquivalence0).toString();
      doReturn(0).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(true, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.6, precision_DoubleEquivalence0);
      Ray ray0 = line0.rayFrom(0.6);
      ray0.classify((Vector2D) vector2D_Unit0);
      Vector2D vector2D0 = ray0.intersection((LineSubset) ray0);
}"
4466,"    public LinecastPoint2D linecastFirst(final LineConvexSubset subset) {
        try (Stream<LinecastPoint2D> stream = getIntersectionStream(subset)) {
            return stream.min(LinecastPoint2D.ABSCISSA_ORDER)
                    .orElse(null);
        }
    }","  public void test0()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      ConvexArea convexArea0 = new ConvexArea(stack0);
      BoundarySourceLinecaster2D boundarySourceLinecaster2D0 = new BoundarySourceLinecaster2D(convexArea0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(56, 56).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(true, false, true, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 1.0, precision_DoubleEquivalence0);
      Ray ray0 = new Ray(line0, vector2D_Unit0);
      stack0.add((LineConvexSubset) ray0);
      boundarySourceLinecaster2D0.linecastFirst(line0);
      LinecastPoint2D linecastPoint2D0 = boundarySourceLinecaster2D0.linecastFirst((LineConvexSubset) ray0);
}"
4467,"    public LinecastPoint2D linecastFirst(final LineConvexSubset subset) {
        try (Stream<LinecastPoint2D> stream = getIntersectionStream(subset)) {
            return stream.min(LinecastPoint2D.ABSCISSA_ORDER)
                    .orElse(null);
        }
    }","  public void test1()  throws Throwable  {
      BoundarySourceLinecaster2D boundarySourceLinecaster2D0 = new BoundarySourceLinecaster2D((BoundarySource2D) null);
      // Undeclared exception!
      try { 
        boundarySourceLinecaster2D0.linecastFirst((LineConvexSubset) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.BoundarySourceLinecaster2D"", e);
      }
  }"
4468,"    public List<LinecastPoint2D> linecast(final LineConvexSubset subset) {
        try (Stream<LinecastPoint2D> stream = getIntersectionStream(subset)) {

            final List<LinecastPoint2D> results = stream.collect(Collectors.toCollection(ArrayList::new));
            LinecastPoint2D.sortAndFilter(results);

            return results;
        }
    }","  public void test2()  throws Throwable  {
      BoundarySourceLinecaster2D boundarySourceLinecaster2D0 = new BoundarySourceLinecaster2D((BoundarySource2D) null);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = new Line(vector2D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      Ray ray0 = line0.rayFrom((Vector2D) vector2D_Unit0);
      // Undeclared exception!
      try { 
        boundarySourceLinecaster2D0.linecast((LineConvexSubset) ray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.BoundarySourceLinecaster2D"", e);
      }
  }"
4469,"    public LinecastPoint2D linecastFirst(final LineConvexSubset subset) {
        try (Stream<LinecastPoint2D> stream = getIntersectionStream(subset)) {
            return stream.min(LinecastPoint2D.ABSCISSA_ORDER)
                    .orElse(null);
        }
    }","  public void test3()  throws Throwable  {
      Vector<LineConvexSubset> vector0 = new Vector<LineConvexSubset>();
      ConvexArea convexArea0 = new ConvexArea(vector0);
      BoundarySourceLinecaster2D boundarySourceLinecaster2D0 = new BoundarySourceLinecaster2D(convexArea0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false, true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Ray ray0 = new Ray(line0, vector2D_Unit0);
      vector0.add((LineConvexSubset) ray0);
      LinecastPoint2D linecastPoint2D0 = boundarySourceLinecaster2D0.linecastFirst((LineConvexSubset) ray0);
}"
4470,"    public List<LinecastPoint2D> linecast(final LineConvexSubset subset) {
        try (Stream<LinecastPoint2D> stream = getIntersectionStream(subset)) {

            final List<LinecastPoint2D> results = stream.collect(Collectors.toCollection(ArrayList::new));
            LinecastPoint2D.sortAndFilter(results);

            return results;
        }
    }","  public void test4()  throws Throwable  {
      Vector<LineConvexSubset> vector0 = new Vector<LineConvexSubset>();
      ConvexArea convexArea0 = new ConvexArea(vector0);
      BoundarySourceLinecaster2D boundarySourceLinecaster2D0 = new BoundarySourceLinecaster2D(convexArea0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false, true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Ray ray0 = new Ray(line0, vector2D_Unit0);
      vector0.add((LineConvexSubset) ray0);
      List<LinecastPoint2D> list0 = boundarySourceLinecaster2D0.linecast((LineConvexSubset) lineSpanningSubset0);
}"
4471,"    public LinecastPoint2D linecastFirst(final LineConvexSubset subset) {
        try (Stream<LinecastPoint2D> stream = getIntersectionStream(subset)) {
            return stream.min(LinecastPoint2D.ABSCISSA_ORDER)
                    .orElse(null);
        }
    }","  public void test5()  throws Throwable  {
      ArrayList<LineConvexSubset> arrayList0 = new ArrayList<LineConvexSubset>();
      BoundaryList2D boundaryList2D0 = new BoundaryList2D(arrayList0);
      arrayList0.add((LineConvexSubset) null);
      BoundarySourceLinecaster2D boundarySourceLinecaster2D0 = new BoundarySourceLinecaster2D(boundaryList2D0);
      Segment segment0 = new Segment((Line) null, (Vector2D) null, (Vector2D) null);
      // Undeclared exception!
      try { 
        boundarySourceLinecaster2D0.linecastFirst((LineConvexSubset) segment0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.BoundarySourceLinecaster2D"", e);
      }
  }"
4472,"    public List<LinecastPoint2D> linecast(final LineConvexSubset subset) {
        try (Stream<LinecastPoint2D> stream = getIntersectionStream(subset)) {

            final List<LinecastPoint2D> results = stream.collect(Collectors.toCollection(ArrayList::new));
            LinecastPoint2D.sortAndFilter(results);

            return results;
        }
    }","  public void test6()  throws Throwable  {
      Vector<LineConvexSubset> vector0 = new Vector<LineConvexSubset>();
      ConvexArea convexArea0 = new ConvexArea(vector0);
      BoundarySourceLinecaster2D boundarySourceLinecaster2D0 = new BoundarySourceLinecaster2D(convexArea0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Ray ray0 = new Ray(line0, vector2D_Unit0);
      vector0.add((LineConvexSubset) ray0);
      // Undeclared exception!
      try { 
        boundarySourceLinecaster2D0.linecast((LineConvexSubset) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.LineSubset"", e);
      }
  }"
4473,"    public Bounds2D intersection(final Bounds2D other) {
        if (intersects(other)) {
            final Vector2D aMin = getMin();
            final Vector2D aMax = getMax();

            final Vector2D bMin = other.getMin();
            final Vector2D bMax = other.getMax();

            // get the max of the mins and the mins of the maxes
            final double minX = Math.max(aMin.getX(), bMin.getX());
            final double minY = Math.max(aMin.getY(), bMin.getY());

            final double maxX = Math.min(aMax.getX(), bMax.getX());
            final double maxY = Math.min(aMax.getY(), bMax.getY());

            return new Bounds2D(
                    Vector2D.of(minX, minY),
                    Vector2D.of(maxX, maxY));
        }

        return null; // no intersection
    }","  public void test0()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit1;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      Bounds2D bounds2D1 = bounds2D0.intersection(bounds2D0);
}"
4474,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        } else if (!(obj instanceof Bounds2D)) {
            return false;
        }

        final Bounds2D other = (Bounds2D) obj;

        return getMin().equals(other.getMin()) &&
                getMax().equals(other.getMax());
    }","  public void test1()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit1;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      Bounds2D bounds2D1 = bounds2D0.intersection(bounds2D0);
}"
4475,"    public Bounds2D intersection(final Bounds2D other) {
        if (intersects(other)) {
            final Vector2D aMin = getMin();
            final Vector2D aMax = getMax();

            final Vector2D bMin = other.getMin();
            final Vector2D bMax = other.getMax();

            // get the max of the mins and the mins of the maxes
            final double minX = Math.max(aMin.getX(), bMin.getX());
            final double minY = Math.max(aMin.getY(), bMin.getY());

            final double maxX = Math.min(aMax.getX(), bMax.getX());
            final double maxY = Math.min(aMax.getY(), bMax.getY());

            return new Bounds2D(
                    Vector2D.of(minX, minY),
                    Vector2D.of(maxX, maxY));
        }

        return null; // no intersection
    }","  public void test2()  throws Throwable  {
      ArrayDeque<Vector2D> arrayDeque0 = new ArrayDeque<Vector2D>();
      Vector2D vector2D0 = Vector2D.ZERO;
      arrayDeque0.add(vector2D0);
      Bounds2D bounds2D0 = Bounds2D.from((Iterable<Vector2D>) arrayDeque0);
      Bounds2D bounds2D1 = Bounds2D.from((Iterable<Vector2D>) arrayDeque0);
      Bounds2D bounds2D2 = bounds2D0.intersection(bounds2D1);
}"
4476,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        } else if (!(obj instanceof Bounds2D)) {
            return false;
        }

        final Bounds2D other = (Bounds2D) obj;

        return getMin().equals(other.getMin()) &&
                getMax().equals(other.getMax());
    }","  public void test3()  throws Throwable  {
      ArrayDeque<Vector2D> arrayDeque0 = new ArrayDeque<Vector2D>();
      Vector2D vector2D0 = Vector2D.ZERO;
      arrayDeque0.add(vector2D0);
      Bounds2D bounds2D0 = Bounds2D.from((Iterable<Vector2D>) arrayDeque0);
      Bounds2D bounds2D1 = Bounds2D.from((Iterable<Vector2D>) arrayDeque0);
      Bounds2D bounds2D2 = bounds2D0.intersection(bounds2D1);
}"
4477,"    public Bounds2D intersection(final Bounds2D other) {
        if (intersects(other)) {
            final Vector2D aMin = getMin();
            final Vector2D aMax = getMax();

            final Vector2D bMin = other.getMin();
            final Vector2D bMax = other.getMax();

            // get the max of the mins and the mins of the maxes
            final double minX = Math.max(aMin.getX(), bMin.getX());
            final double minY = Math.max(aMin.getY(), bMin.getY());

            final double maxX = Math.min(aMax.getX(), bMax.getX());
            final double maxY = Math.min(aMax.getY(), bMax.getY());

            return new Bounds2D(
                    Vector2D.of(minX, minY),
                    Vector2D.of(maxX, maxY));
        }

        return null; // no intersection
    }","  public void test4()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = (Vector2D) vector2D_Unit1;
      vector2DArray0[1] = (Vector2D) vector2D_Unit1;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit1, vector2DArray0);
      Bounds2D bounds2D1 = bounds2D0.intersection(bounds2D0);
}"
4478,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        } else if (!(obj instanceof Bounds2D)) {
            return false;
        }

        final Bounds2D other = (Bounds2D) obj;

        return getMin().equals(other.getMin()) &&
                getMax().equals(other.getMax());
    }","  public void test5()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = (Vector2D) vector2D_Unit1;
      vector2DArray0[1] = (Vector2D) vector2D_Unit1;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit1, vector2DArray0);
      Bounds2D bounds2D1 = bounds2D0.intersection(bounds2D0);
}"
4479,"    public boolean contains(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        final Vector2D min = getMin();
        final Vector2D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY();
    }","  public void test6()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = (Vector2D) vector2D_Unit1;
      vector2DArray0[1] = (Vector2D) vector2D_Unit1;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit1, vector2DArray0);
      boolean boolean0 = bounds2D0.contains((Vector2D) vector2D_Unit1);
}"
4480,"    public boolean contains(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        final Vector2D min = getMin();
        final Vector2D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY();
    }","  public void test7()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = (Vector2D) vector2D_Unit1;
      vector2DArray0[1] = (Vector2D) vector2D_Unit1;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit1, vector2DArray0);
      boolean boolean0 = bounds2D0.contains((Vector2D) vector2D_Unit1);
}"
4481,"    public Parallelogram toRegion(final Precision.DoubleEquivalence precision) {
        return Parallelogram.axisAligned(getMin(), getMax(), precision);
    }","  public void test8()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit1;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false, false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Parallelogram parallelogram0 = bounds2D0.toRegion(precision_DoubleEquivalence0);
}"
4482,"    public Parallelogram toRegion(final Precision.DoubleEquivalence precision) {
        return Parallelogram.axisAligned(getMin(), getMax(), precision);
    }","  public void test9()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[9];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      vector2DArray0[7] = (Vector2D) vector2D_Unit0;
      vector2DArray0[8] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      // Undeclared exception!
      try { 
        bounds2D0.toRegion((Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.shape.Parallelogram"", e);
      }
  }"
4483,"    public boolean intersects(final Bounds2D other) {
        final Vector2D aMin = getMin();
        final Vector2D aMax = getMax();

        final Vector2D bMin = other.getMin();
        final Vector2D bMax = other.getMax();

        return aMin.getX() <= bMax.getX() && aMax.getX() >= bMin.getX() &&
                aMin.getY() <= bMax.getY() && aMax.getY() >= bMin.getY();
    }","  public void test10()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[8];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      vector2DArray0[7] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      // Undeclared exception!
      try { 
        bounds2D0.intersects((Bounds2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Bounds2D"", e);
      }
  }"
4484,"    public Bounds2D intersection(final Bounds2D other) {
        if (intersects(other)) {
            final Vector2D aMin = getMin();
            final Vector2D aMax = getMax();

            final Vector2D bMin = other.getMin();
            final Vector2D bMax = other.getMax();

            // get the max of the mins and the mins of the maxes
            final double minX = Math.max(aMin.getX(), bMin.getX());
            final double minY = Math.max(aMin.getY(), bMin.getY());

            final double maxX = Math.min(aMax.getX(), bMax.getX());
            final double maxY = Math.min(aMax.getY(), bMax.getY());

            return new Bounds2D(
                    Vector2D.of(minX, minY),
                    Vector2D.of(maxX, maxY));
        }

        return null; // no intersection
    }","  public void test11()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[8];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      vector2DArray0[7] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      // Undeclared exception!
      try { 
        bounds2D0.intersection((Bounds2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Bounds2D"", e);
      }
  }"
4485,"    public boolean hasSize(final Precision.DoubleEquivalence precision) {
        final Vector2D diag = getDiagonal();

        return !precision.eqZero(diag.getX()) &&
                !precision.eqZero(diag.getY());
    }","  public void test12()  throws Throwable  {
      ArrayDeque<Vector2D> arrayDeque0 = new ArrayDeque<Vector2D>();
      Vector2D vector2D0 = Vector2D.ZERO;
      arrayDeque0.add(vector2D0);
      Bounds2D bounds2D0 = Bounds2D.from((Iterable<Vector2D>) arrayDeque0);
      // Undeclared exception!
      try { 
        bounds2D0.hasSize((Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Bounds2D"", e);
      }
  }"
4486,"    public static Bounds2D from(final Vector2D first, final Vector2D... more) {
        final Builder builder = builder();

        builder.add(first);
        builder.addAll(Arrays.asList(more));

        return builder.build();
    }","  public void test13()  throws Throwable  {
      Vector2D[] vector2DArray0 = new Vector2D[4];
      // Undeclared exception!
      try { 
        Bounds2D.from((Vector2D) null, vector2DArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4487,"    public static Bounds2D from(final Vector2D first, final Vector2D... more) {
        final Builder builder = builder();

        builder.add(first);
        builder.addAll(Arrays.asList(more));

        return builder.build();
    }","  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Bounds2D.from((Iterable<Vector2D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Bounds2D$Builder"", e);
      }
  }"
4488,"    public boolean contains(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        final Vector2D min = getMin();
        final Vector2D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY();
    }","  public void test15()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[1];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      // Undeclared exception!
      try { 
        bounds2D0.contains((Vector2D) vector2D_Unit0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Bounds2D"", e);
      }
  }"
4489,"    public boolean contains(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        final Vector2D min = getMin();
        final Vector2D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY();
    }","  public void test16()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(-0.0, (-1401.519027892768));
      Vector2D[] vector2DArray0 = new Vector2D[8];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      vector2DArray0[5] = (Vector2D) vector2D_Unit0;
      vector2DArray0[6] = (Vector2D) vector2D_Unit0;
      vector2DArray0[7] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D0 = Bounds2D.from(vector2DArray0[7], vector2DArray0);
      // Undeclared exception!
      try { 
        bounds2D0.contains((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Bounds2D"", e);
      }
  }"
4490,"    public static Builder builder() {
        return new Builder();
    }","  public void test17()  throws Throwable  {
      Bounds2D.Builder bounds2D_Builder0 = Bounds2D.builder();
      // Undeclared exception!
      try { 
        bounds2D_Builder0.build();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Cannot construct bounds: no points given
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Bounds2D$Builder"", e);
      }
  }"
4491,"    public static Builder builder() {
        return new Builder();
    }","  public void test18()  throws Throwable  {
      Bounds2D.Builder bounds2D_Builder0 = Bounds2D.builder();
      Vector2D vector2D0 = Vector2D.NaN;
      bounds2D_Builder0.add(vector2D0);
      // Undeclared exception!
      try { 
        bounds2D_Builder0.build();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Invalid bounds: min= (NaN, NaN), max= (NaN, NaN)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Bounds2D$Builder"", e);
      }
  }"
4492,"    public static Builder builder() {
        return new Builder();
    }","  public void test19()  throws Throwable  {
      Bounds2D.Builder bounds2D_Builder0 = Bounds2D.builder();
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      bounds2D_Builder0.add(vector2D0);
      // Undeclared exception!
      try { 
        bounds2D_Builder0.build();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Invalid bounds: min= (-Infinity, -Infinity), max= (-Infinity, -Infinity)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Bounds2D$Builder"", e);
      }
  }"
4493,"    public static Builder builder() {
        return new Builder();
    }","  public void test20()  throws Throwable  {
      Bounds2D.Builder bounds2D_Builder0 = Bounds2D.builder();
      boolean boolean0 = bounds2D_Builder0.hasBounds();
}"
4494,"    public static Builder builder() {
        return new Builder();
    }","  public void test21()  throws Throwable  {
      HashSet<Vector2D> hashSet0 = new HashSet<Vector2D>();
      LinkedHashSet<Vector2D> linkedHashSet0 = new LinkedHashSet<Vector2D>(hashSet0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      boolean boolean0 = linkedHashSet0.add(vector2D_Unit0);
      Bounds2D.Builder bounds2D_Builder0 = Bounds2D.builder();
      LinkedList<Vector2D> linkedList0 = new LinkedList<Vector2D>(linkedHashSet0);
      bounds2D_Builder0.addAll(linkedList0);
      boolean boolean1 = bounds2D_Builder0.hasBounds();
}"
4495,"    public boolean intersects(final Bounds2D other) {
        final Vector2D aMin = getMin();
        final Vector2D aMax = getMax();

        final Vector2D bMin = other.getMin();
        final Vector2D bMax = other.getMax();

        return aMin.getX() <= bMax.getX() && aMax.getX() >= bMin.getX() &&
                aMin.getY() <= bMax.getY() && aMax.getY() >= bMin.getY();
    }","  public void test22()  throws Throwable  {
      Bounds2D.Builder bounds2D_Builder0 = Bounds2D.builder();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit1.orthogonal();
      bounds2D_Builder0.add((Vector2D) vector2D_Unit2);
      Bounds2D bounds2D0 = bounds2D_Builder0.build();
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = (Vector2D) vector2D_Unit1;
      vector2DArray0[1] = (Vector2D) vector2D_Unit1;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D1 = Bounds2D.from((Vector2D) vector2D_Unit1, vector2DArray0);
      boolean boolean0 = bounds2D0.intersects(bounds2D1);
}"
4496,"    public static Builder builder() {
        return new Builder();
    }","  public void test23()  throws Throwable  {
      Bounds2D.Builder bounds2D_Builder0 = Bounds2D.builder();
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      bounds2D_Builder0.add(vector2D0);
      // Undeclared exception!
      try { 
        bounds2D_Builder0.build();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Invalid bounds: min= (Infinity, Infinity), max= (Infinity, Infinity)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Bounds2D$Builder"", e);
      }
  }"
4497,"    public static Bounds2D from(final Vector2D first, final Vector2D... more) {
        final Builder builder = builder();

        builder.add(first);
        builder.addAll(Arrays.asList(more));

        return builder.build();
    }","  public void test24()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        Bounds2D.from(vector2D0, vector2DArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Invalid bounds: min= (-Infinity, -Infinity), max= (1.0, 0.0)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Bounds2D$Builder"", e);
      }
  }"
4498,"    public static Builder builder() {
        return new Builder();
    }","  public void test25()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[0];
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      Bounds2D.Builder bounds2D_Builder0 = Bounds2D.builder();
      Bounds2D.Builder bounds2D_Builder1 = bounds2D_Builder0.add(bounds2D0);
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Bounds2D.Builder bounds2D_Builder2 = bounds2D_Builder1.add(vector2D0);
      boolean boolean0 = bounds2D_Builder2.hasBounds();
}"
4499,"    public static Bounds2D from(final Vector2D first, final Vector2D... more) {
        final Builder builder = builder();

        builder.add(first);
        builder.addAll(Arrays.asList(more));

        return builder.build();
    }","  public void test26()  throws Throwable  {
      Vector2D[] vector2DArray0 = new Vector2D[0];
      Vector2D vector2D0 = Vector2D.of(0.6, Double.NaN);
      // Undeclared exception!
      try { 
        Bounds2D.from(vector2D0, vector2DArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Invalid bounds: min= (0.6, NaN), max= (0.6, NaN)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Bounds2D$Builder"", e);
      }
  }"
4500,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        } else if (!(obj instanceof Bounds2D)) {
            return false;
        }

        final Bounds2D other = (Bounds2D) obj;

        return getMin().equals(other.getMin()) &&
                getMax().equals(other.getMax());
    }","  public void test27()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(1548.05500924, 1548.05500924);
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.MINUS_Y;
      Vector2D[] vector2DArray0 = new Vector2D[5];
      vector2DArray0[0] = (Vector2D) vector2D_Unit1;
      vector2DArray0[1] = (Vector2D) vector2D_Unit1;
      vector2DArray0[2] = (Vector2D) vector2D_Unit1;
      vector2DArray0[3] = (Vector2D) vector2D_Unit1;
      vector2DArray0[4] = (Vector2D) vector2D_Unit1;
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit1, vector2DArray0);
      Bounds2D bounds2D1 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      boolean boolean0 = bounds2D0.equals(bounds2D1);
}"
4501,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        } else if (!(obj instanceof Bounds2D)) {
            return false;
        }

        final Bounds2D other = (Bounds2D) obj;

        return getMin().equals(other.getMin()) &&
                getMax().equals(other.getMax());
    }","  public void test28()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[1];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      Rotation2D rotation2D0 = Rotation2D.of((-1.0));
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
      Bounds2D bounds2D1 = Bounds2D.from(vector2D0, vector2DArray0);
      boolean boolean0 = bounds2D0.equals(bounds2D1);
}"
4502,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        } else if (!(obj instanceof Bounds2D)) {
            return false;
        }

        final Bounds2D other = (Bounds2D) obj;

        return getMin().equals(other.getMin()) &&
                getMax().equals(other.getMax());
    }","  public void test29()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[0];
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      Bounds2D bounds2D1 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      boolean boolean0 = bounds2D0.equals(bounds2D1);
}"
4503,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        } else if (!(obj instanceof Bounds2D)) {
            return false;
        }

        final Bounds2D other = (Bounds2D) obj;

        return getMin().equals(other.getMin()) &&
                getMax().equals(other.getMax());
    }","  public void test30()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[0];
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      boolean boolean0 = bounds2D0.equals(bounds2D0);
}"
4504,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        } else if (!(obj instanceof Bounds2D)) {
            return false;
        }

        final Bounds2D other = (Bounds2D) obj;

        return getMin().equals(other.getMin()) &&
                getMax().equals(other.getMax());
    }","  public void test31()  throws Throwable  {
      LinkedHashSet<Vector2D> linkedHashSet0 = new LinkedHashSet<Vector2D>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      linkedHashSet0.add(vector2D_Unit0);
      Bounds2D bounds2D0 = Bounds2D.from((Iterable<Vector2D>) linkedHashSet0);
      boolean boolean0 = bounds2D0.equals(linkedHashSet0);
}"
4505,"    public boolean intersects(final Bounds2D other) {
        final Vector2D aMin = getMin();
        final Vector2D aMax = getMax();

        final Vector2D bMin = other.getMin();
        final Vector2D bMax = other.getMax();

        return aMin.getX() <= bMax.getX() && aMax.getX() >= bMin.getX() &&
                aMin.getY() <= bMax.getY() && aMax.getY() >= bMin.getY();
    }","  public void test32()  throws Throwable  {
      Bounds2D.Builder bounds2D_Builder0 = Bounds2D.builder();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit1.orthogonal();
      Bounds2D.Builder bounds2D_Builder1 = bounds2D_Builder0.add((Vector2D) vector2D_Unit2);
      Bounds2D bounds2D0 = bounds2D_Builder1.build();
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = (Vector2D) vector2D_Unit1;
      vector2DArray0[1] = (Vector2D) vector2D_Unit1;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D1 = Bounds2D.from((Vector2D) vector2D_Unit1, vector2DArray0);
      boolean boolean0 = bounds2D0.intersects(bounds2D1);
}"
4506,"    public Bounds2D intersection(final Bounds2D other) {
        if (intersects(other)) {
            final Vector2D aMin = getMin();
            final Vector2D aMax = getMax();

            final Vector2D bMin = other.getMin();
            final Vector2D bMax = other.getMax();

            // get the max of the mins and the mins of the maxes
            final double minX = Math.max(aMin.getX(), bMin.getX());
            final double minY = Math.max(aMin.getY(), bMin.getY());

            final double maxX = Math.min(aMax.getX(), bMax.getX());
            final double maxY = Math.min(aMax.getY(), bMax.getY());

            return new Bounds2D(
                    Vector2D.of(minX, minY),
                    Vector2D.of(maxX, maxY));
        }

        return null; // no intersection
    }","  public void test33()  throws Throwable  {
      Bounds2D.Builder bounds2D_Builder0 = Bounds2D.builder();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit1.orthogonal();
      Bounds2D.Builder bounds2D_Builder1 = bounds2D_Builder0.add((Vector2D) vector2D_Unit2);
      Bounds2D bounds2D0 = bounds2D_Builder1.build();
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = (Vector2D) vector2D_Unit1;
      vector2DArray0[1] = (Vector2D) vector2D_Unit1;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D1 = Bounds2D.from((Vector2D) vector2D_Unit1, vector2DArray0);
      Bounds2D bounds2D2 = bounds2D1.intersection(bounds2D0);
}"
4507,"    public boolean intersects(final Bounds2D other) {
        final Vector2D aMin = getMin();
        final Vector2D aMax = getMax();

        final Vector2D bMin = other.getMin();
        final Vector2D bMax = other.getMax();

        return aMin.getX() <= bMax.getX() && aMax.getX() >= bMin.getX() &&
                aMin.getY() <= bMax.getY() && aMax.getY() >= bMin.getY();
    }","  public void test34()  throws Throwable  {
      Bounds2D.Builder bounds2D_Builder0 = Bounds2D.builder();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit1.orthogonal();
      bounds2D_Builder0.add((Vector2D) vector2D_Unit2);
      Bounds2D bounds2D0 = bounds2D_Builder0.build();
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = (Vector2D) vector2D_Unit1;
      vector2DArray0[1] = (Vector2D) vector2D_Unit1;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D1 = Bounds2D.from((Vector2D) vector2D_Unit1, vector2DArray0);
      boolean boolean0 = bounds2D0.intersects(bounds2D1);
}"
4508,"    public boolean intersects(final Bounds2D other) {
        final Vector2D aMin = getMin();
        final Vector2D aMax = getMax();

        final Vector2D bMin = other.getMin();
        final Vector2D bMax = other.getMax();

        return aMin.getX() <= bMax.getX() && aMax.getX() >= bMin.getX() &&
                aMin.getY() <= bMax.getY() && aMax.getY() >= bMin.getY();
    }","  public void test35()  throws Throwable  {
      Bounds2D.Builder bounds2D_Builder0 = Bounds2D.builder();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      bounds2D_Builder0.add((Vector2D) vector2D_Unit0);
      Bounds2D bounds2D0 = bounds2D_Builder0.build();
      boolean boolean0 = bounds2D0.intersects(bounds2D0);
}"
4509,"    public boolean intersects(final Bounds2D other) {
        final Vector2D aMin = getMin();
        final Vector2D aMax = getMax();

        final Vector2D bMin = other.getMin();
        final Vector2D bMax = other.getMax();

        return aMin.getX() <= bMax.getX() && aMax.getX() >= bMin.getX() &&
                aMin.getY() <= bMax.getY() && aMax.getY() >= bMin.getY();
    }","  public void test36()  throws Throwable  {
      Bounds2D.Builder bounds2D_Builder0 = Bounds2D.builder();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D.Unit vector2D_Unit2 = vector2D_Unit1.orthogonal();
      Bounds2D.Builder bounds2D_Builder1 = bounds2D_Builder0.add((Vector2D) vector2D_Unit2);
      Bounds2D bounds2D0 = bounds2D_Builder1.build();
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = (Vector2D) vector2D_Unit1;
      vector2DArray0[1] = (Vector2D) vector2D_Unit1;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D1 = Bounds2D.from((Vector2D) vector2D_Unit1, vector2DArray0);
      boolean boolean0 = bounds2D0.intersects(bounds2D1);
}"
4510,"    public boolean contains(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        final Vector2D min = getMin();
        final Vector2D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY();
    }","  public void test37()  throws Throwable  {
      LinkedHashSet<Vector2D> linkedHashSet0 = new LinkedHashSet<Vector2D>(351, 351);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      linkedHashSet0.add(vector2D_Unit0);
      Bounds2D bounds2D0 = Bounds2D.from((Iterable<Vector2D>) linkedHashSet0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      doReturn(true, true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      boolean boolean0 = bounds2D0.contains((Vector2D) vector2D_Unit0, precision_DoubleEquivalence0);
}"
4511,"    public boolean contains(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        final Vector2D min = getMin();
        final Vector2D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY();
    }","  public void test38()  throws Throwable  {
      LinkedHashSet<Vector2D> linkedHashSet0 = new LinkedHashSet<Vector2D>(398, 398);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      linkedHashSet0.add(vector2D_Unit0);
      Bounds2D bounds2D0 = Bounds2D.from((Iterable<Vector2D>) linkedHashSet0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      boolean boolean0 = bounds2D0.contains((Vector2D) vector2D_Unit0, precision_DoubleEquivalence0);
}"
4512,"    public boolean contains(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        final Vector2D min = getMin();
        final Vector2D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY();
    }","  public void test39()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(0.8606437703699489, 0.8606437703699489);
      Vector2D[] vector2DArray0 = new Vector2D[2];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = vector2DArray0[0];
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      boolean boolean0 = bounds2D0.contains(vector2DArray0[1], precision_DoubleEquivalence0);
}"
4513,"    public boolean contains(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        final Vector2D min = getMin();
        final Vector2D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY();
    }","  public void test40()  throws Throwable  {
      LinkedHashSet<Vector2D> linkedHashSet0 = new LinkedHashSet<Vector2D>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      linkedHashSet0.add(vector2D_Unit0);
      Bounds2D bounds2D0 = Bounds2D.from((Iterable<Vector2D>) linkedHashSet0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      doReturn(true, false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      boolean boolean0 = bounds2D0.contains((Vector2D) vector2D_Unit0, precision_DoubleEquivalence0);
}"
4514,"    public boolean contains(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        final Vector2D min = getMin();
        final Vector2D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY();
    }","  public void test41()  throws Throwable  {
      LinkedHashSet<Vector2D> linkedHashSet0 = new LinkedHashSet<Vector2D>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      linkedHashSet0.add(vector2D_Unit0);
      Bounds2D bounds2D0 = Bounds2D.from((Iterable<Vector2D>) linkedHashSet0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).gte(anyDouble() , anyDouble());
      boolean boolean0 = bounds2D0.contains((Vector2D) vector2D_Unit0, precision_DoubleEquivalence0);
}"
4515,"    public boolean contains(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        final Vector2D min = getMin();
        final Vector2D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY();
    }","  public void test42()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D[] vector2DArray0 = new Vector2D[3];
      vector2DArray0[0] = (Vector2D) vector2D_Unit1;
      vector2DArray0[1] = (Vector2D) vector2D_Unit1;
      vector2DArray0[2] = (Vector2D) vector2D_Unit1;
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit1, vector2DArray0);
      boolean boolean0 = bounds2D0.contains((Vector2D) vector2D_Unit0);
}"
4516,"    public boolean contains(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        final Vector2D min = getMin();
        final Vector2D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY();
    }","  public void test43()  throws Throwable  {
      LinkedHashSet<Vector2D> linkedHashSet0 = new LinkedHashSet<Vector2D>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      linkedHashSet0.add(vector2D_Unit0);
      Bounds2D bounds2D0 = Bounds2D.from((Iterable<Vector2D>) linkedHashSet0);
      Vector2D vector2D0 = bounds2D0.getDiagonal();
      boolean boolean0 = bounds2D0.contains(vector2D0);
}"
4517,"    public boolean contains(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        final Vector2D min = getMin();
        final Vector2D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY();
    }","  public void test44()  throws Throwable  {
      LinkedHashSet<Vector2D> linkedHashSet0 = new LinkedHashSet<Vector2D>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      linkedHashSet0.add(vector2D_Unit0);
      Bounds2D bounds2D0 = Bounds2D.from((Iterable<Vector2D>) linkedHashSet0);
      Vector2D vector2D0 = bounds2D0.getDiagonal();
      boolean boolean0 = bounds2D0.contains(vector2D0);
}"
4518,"    public boolean contains(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        final Vector2D min = getMin();
        final Vector2D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY();
    }","  public void test45()  throws Throwable  {
      LinkedHashSet<Vector2D> linkedHashSet0 = new LinkedHashSet<Vector2D>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      linkedHashSet0.add(vector2D_Unit0);
      Bounds2D bounds2D0 = Bounds2D.from((Iterable<Vector2D>) linkedHashSet0);
      Vector2D vector2D0 = bounds2D0.getDiagonal();
      boolean boolean0 = bounds2D0.contains(vector2D0);
}"
4519,"    public boolean contains(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        final Vector2D min = getMin();
        final Vector2D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY();
    }","  public void test46()  throws Throwable  {
      LinkedHashSet<Vector2D> linkedHashSet0 = new LinkedHashSet<Vector2D>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      linkedHashSet0.add(vector2D_Unit0);
      Bounds2D bounds2D0 = Bounds2D.from((Iterable<Vector2D>) linkedHashSet0);
      Rotation2D rotation2D0 = Rotation2D.of(2838.0);
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
      boolean boolean0 = bounds2D0.contains(vector2D0);
}"
4520,"    public boolean contains(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        final Vector2D min = getMin();
        final Vector2D max = getMax();

        return x >= min.getX() && x <= max.getX() &&
                y >= min.getY() && y <= max.getY();
    }","  public void test47()  throws Throwable  {
      LinkedHashSet<Vector2D> linkedHashSet0 = new LinkedHashSet<Vector2D>(351, 351);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      linkedHashSet0.add(vector2D_Unit0);
      Bounds2D bounds2D0 = Bounds2D.from((Iterable<Vector2D>) linkedHashSet0);
      Vector2D vector2D0 = Vector2D.NaN;
      boolean boolean0 = bounds2D0.contains(vector2D0);
}"
4521,"    public boolean hasSize(final Precision.DoubleEquivalence precision) {
        final Vector2D diag = getDiagonal();

        return !precision.eqZero(diag.getX()) &&
                !precision.eqZero(diag.getY());
    }","  public void test48()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(1548.05500924, 1548.05500924);
      Vector2D[] vector2DArray0 = new Vector2D[5];
      vector2DArray0[0] = (Vector2D) vector2D_Unit0;
      vector2DArray0[1] = (Vector2D) vector2D_Unit0;
      vector2DArray0[2] = (Vector2D) vector2D_Unit0;
      vector2DArray0[3] = (Vector2D) vector2D_Unit0;
      vector2DArray0[4] = (Vector2D) vector2D_Unit0;
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      boolean boolean0 = bounds2D0.hasSize(precision_DoubleEquivalence0);
}"
4522,"    public boolean hasSize(final Precision.DoubleEquivalence precision) {
        final Vector2D diag = getDiagonal();

        return !precision.eqZero(diag.getX()) &&
                !precision.eqZero(diag.getY());
    }","  public void test49()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[0];
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      boolean boolean0 = bounds2D0.hasSize(precision_DoubleEquivalence0);
}"
4523,"    public boolean hasSize(final Precision.DoubleEquivalence precision) {
        final Vector2D diag = getDiagonal();

        return !precision.eqZero(diag.getX()) &&
                !precision.eqZero(diag.getY());
    }","  public void test50()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[0];
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      boolean boolean0 = bounds2D0.hasSize(precision_DoubleEquivalence0);
}"
4524,"    public int hashCode() {
        return Objects.hash(getMin(), getMax());
    }","  public void test51()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[0];
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      bounds2D0.hashCode();
  }"
4525,"    public static Bounds2D from(final Vector2D first, final Vector2D... more) {
        final Builder builder = builder();

        builder.add(first);
        builder.addAll(Arrays.asList(more));

        return builder.build();
    }","  public void test52()  throws Throwable  {
      HashSet<Vector2D> hashSet0 = new HashSet<Vector2D>();
      LinkedHashSet<Vector2D> linkedHashSet0 = new LinkedHashSet<Vector2D>(hashSet0);
      // Undeclared exception!
      try { 
        Bounds2D.from((Iterable<Vector2D>) linkedHashSet0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Cannot construct bounds: no points given
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Bounds2D$Builder"", e);
      }
  }"
4526,"    public Parallelogram toRegion(final Precision.DoubleEquivalence precision) {
        return Parallelogram.axisAligned(getMin(), getMax(), precision);
    }","  public void test53()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D[] vector2DArray0 = new Vector2D[0];
      Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      // Undeclared exception!
      try { 
        bounds2D0.toRegion(precision_DoubleEquivalence0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
4527,"    public void add(final LineConvexSubset subset) {
        Lines.validateLinesEquivalent(getLine(), subset.getLine());

        region.add(subset.getInterval());
    }","  public void test0()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0, (Precision.DoubleEquivalence) null).when(line0).getPrecision();
      doReturn(true).when(line0).eq(any(org.apache.commons.geometry.euclidean.twod.Line.class) , any(org.apache.commons.numbers.core.Precision.DoubleEquivalence.class));
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line0, false);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = embeddedTreeLineSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 1459.0488501917746, precision_DoubleEquivalence1);
      EmbeddedTreeLineSubset embeddedTreeLineSubset1 = new EmbeddedTreeLineSubset(line1);
      embeddedTreeLineSubset0.add(embeddedTreeLineSubset1);
}"
4528,"    public void add(final LineConvexSubset subset) {
        Lines.validateLinesEquivalent(getLine(), subset.getLine());

        region.add(subset.getInterval());
    }","  public void test1()  throws Throwable  {
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, true);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset0.add((EmbeddedTreeLineSubset) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.EmbeddedTreeLineSubset"", e);
      }
  }"
4529,"    public Split<EmbeddedTreeLineSubset> split(final Hyperplane<Vector2D> splitter) {
        final Line thisLine = getLine();
        final Line splitterLine = (Line) splitter;
        final Precision.DoubleEquivalence precision = getPrecision();

        final Vector2D intersection = splitterLine.intersection(thisLine);
        if (intersection == null) {
            return getNonIntersectingSplitResult(splitterLine, this);
        }

        final double abscissa = thisLine.abscissa(intersection);
        final OrientedPoint subspaceSplitter = OrientedPoints.fromLocationAndDirection(
                abscissa,
                splitterPlusIsPositiveFacing(splitterLine),
                precision);

        final Split<RegionBSPTree1D> subspaceSplit = region.split(subspaceSplitter);
        final SplitLocation subspaceSplitLoc = subspaceSplit.getLocation();

        if (SplitLocation.MINUS == subspaceSplitLoc) {
            return new Split<>(this, null);
        } else if (SplitLocation.PLUS == subspaceSplitLoc) {
            return new Split<>(null, this);
        }

        final EmbeddedTreeLineSubset minus = (subspaceSplit.getMinus() != null) ?
                new EmbeddedTreeLineSubset(thisLine, subspaceSplit.getMinus()) :
                null;
        final EmbeddedTreeLineSubset plus = (subspaceSplit.getPlus() != null) ?
                new EmbeddedTreeLineSubset(thisLine, subspaceSplit.getPlus()) :
                null;

        return new Split<>(minus, plus);
    }","  public void test2()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line0, true);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = embeddedTreeLineSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 1459.0488501917746, precision_DoubleEquivalence1);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation((Vector2D) vector2D_Unit0);
      EmbeddedTreeLineSubset embeddedTreeLineSubset1 = new EmbeddedTreeLineSubset(line1, true);
      EmbeddedTreeLineSubset embeddedTreeLineSubset2 = embeddedTreeLineSubset1.transform(affineTransformMatrix2D0);
      Split<EmbeddedTreeLineSubset> split0 = embeddedTreeLineSubset2.split(line1);
}"
4530,"    public String toString() {
        final Line line = getLine();

        final StringBuilder sb = new StringBuilder();
        sb.append(this.getClass().getSimpleName())
            .append('[')
            .append(""lineOrigin= "")
            .append(line.getOrigin())
            .append("", lineDirection= "")
            .append(line.getDirection())
            .append("", region= "")
            .append(region)
            .append(']');

        return sb.toString();
    }","  public void test3()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Line line0 = new Line(vector2D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line0, regionBSPTree1D0);
      String string0 = embeddedTreeLineSubset0.toString();
}"
4531,"    public List<LineConvexSubset> toConvex() {
        final List<Interval> intervals = region.toIntervals();

        final Line line = getLine();
        final List<LineConvexSubset> convexSubsets = new ArrayList<>(intervals.size());

        for (final Interval interval : intervals) {
            convexSubsets.add(Lines.subsetFromInterval(line, interval));
        }

        return convexSubsets;
    }","  public void test4()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D();
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, regionBSPTree1D0);
      List<LineConvexSubset> list0 = embeddedTreeLineSubset0.toConvex();
}"
4532,"    public boolean isFull() {
        return region.isFull();
    }","  public void test5()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.full();
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, regionBSPTree1D0);
      boolean boolean0 = embeddedTreeLineSubset0.isFull();
}"
4533,"    public boolean isEmpty() {
        return region.isEmpty();
    }","  public void test6()  throws Throwable  {
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null);
      boolean boolean0 = embeddedTreeLineSubset0.isEmpty();
}"
4534,"    public RegionBSPTree1D getSubspaceRegion() {
        return region;
    }","  public void test7()  throws Throwable  {
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null);
      RegionBSPTree1D regionBSPTree1D0 = embeddedTreeLineSubset0.getSubspaceRegion();
}"
4535,"    public double getSize() {
        return region.getSize();
    }","  public void test8()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D();
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, regionBSPTree1D0);
      double double0 = embeddedTreeLineSubset0.getSize();
}"
4536,"    public Vector2D closest(final Vector2D pt) {
        return HyperplaneSubsets.closestToEmbeddedRegion(pt, getLine(), region);
    }","  public void test9()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Line line0 = new Line(vector2D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line0, regionBSPTree1D0);
      Vector2D vector2D0 = embeddedTreeLineSubset0.closest((Vector2D) vector2D_Unit0);
}"
4537,"    public Vector2D closest(final Vector2D pt) {
        return HyperplaneSubsets.closestToEmbeddedRegion(pt, getLine(), region);
    }","  public void test10()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = new Line(vector2D_Unit0, 752.7789971928333, (Precision.DoubleEquivalence) null);
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line0, true);
      Vector2D vector2D0 = embeddedTreeLineSubset0.closest((Vector2D) vector2D_Unit0);
}"
4538,"    public Vector2D closest(final Vector2D pt) {
        return HyperplaneSubsets.closestToEmbeddedRegion(pt, getLine(), region);
    }","  public void test11()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Line line0 = new Line(vector2D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line0, true);
      Vector2D vector2D0 = embeddedTreeLineSubset0.closest((Vector2D) vector2D_Unit0);
}"
4539,"    RegionLocation classifyAbscissa(final double abscissa) {
        return region.classify(abscissa);
    }","  public void test12()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.full();
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, regionBSPTree1D0);
      RegionLocation regionLocation0 = embeddedTreeLineSubset0.classifyAbscissa(1917.7086);
}"
4540,"    public void add(final LineConvexSubset subset) {
        Lines.validateLinesEquivalent(getLine(), subset.getLine());

        region.add(subset.getInterval());
    }","  public void test13()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = Vector2D.Unit.from((Vector2D) vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(4066).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false, false, true, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line0, true);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = embeddedTreeLineSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit1, 1459.0488501917746, precision_DoubleEquivalence1);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation(2431.67028781684);
      Line line2 = line1.transform(affineTransformMatrix2D0);
      Line line3 = line2.reverse();
      EmbeddedTreeLineSubset embeddedTreeLineSubset1 = new EmbeddedTreeLineSubset(line3);
      Ray ray0 = new Ray(line2, vector2D_Unit1);
      embeddedTreeLineSubset1.createSplitResult(line2, ray0, ray0);
      EmbeddedTreeLineSubset embeddedTreeLineSubset2 = embeddedTreeLineSubset1.transform(affineTransformMatrix2D0);
      embeddedTreeLineSubset2.split(line3);
      embeddedTreeLineSubset2.transform(affineTransformMatrix2D0);
      embeddedTreeLineSubset2.getSize();
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset2.add(embeddedTreeLineSubset1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Arguments do not represent the same line. Expected Line[origin= (225.4612765755593, -1441.5237632487574), direction= (0.9879886907551355, 0.15452620146743207)] but was Line[origin= (113.07068133193553, -1454.6609805274463), direction= (0.9969926506136162, 0.07749615875923122)].
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
4541,"    public List<LineConvexSubset> toConvex() {
        final List<Interval> intervals = region.toIntervals();

        final Line line = getLine();
        final List<LineConvexSubset> convexSubsets = new ArrayList<>(intervals.size());

        for (final Interval interval : intervals) {
            convexSubsets.add(Lines.subsetFromInterval(line, interval));
        }

        return convexSubsets;
    }","  public void test14()  throws Throwable  {
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, (RegionBSPTree1D) null);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset0.toConvex();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.EmbeddedTreeLineSubset"", e);
      }
  }"
4542,"    public Split<EmbeddedTreeLineSubset> split(final Hyperplane<Vector2D> splitter) {
        final Line thisLine = getLine();
        final Line splitterLine = (Line) splitter;
        final Precision.DoubleEquivalence precision = getPrecision();

        final Vector2D intersection = splitterLine.intersection(thisLine);
        if (intersection == null) {
            return getNonIntersectingSplitResult(splitterLine, this);
        }

        final double abscissa = thisLine.abscissa(intersection);
        final OrientedPoint subspaceSplitter = OrientedPoints.fromLocationAndDirection(
                abscissa,
                splitterPlusIsPositiveFacing(splitterLine),
                precision);

        final Split<RegionBSPTree1D> subspaceSplit = region.split(subspaceSplitter);
        final SplitLocation subspaceSplitLoc = subspaceSplit.getLocation();

        if (SplitLocation.MINUS == subspaceSplitLoc) {
            return new Split<>(this, null);
        } else if (SplitLocation.PLUS == subspaceSplitLoc) {
            return new Split<>(null, this);
        }

        final EmbeddedTreeLineSubset minus = (subspaceSplit.getMinus() != null) ?
                new EmbeddedTreeLineSubset(thisLine, subspaceSplit.getMinus()) :
                null;
        final EmbeddedTreeLineSubset plus = (subspaceSplit.getPlus() != null) ?
                new EmbeddedTreeLineSubset(thisLine, subspaceSplit.getPlus()) :
                null;

        return new Split<>(minus, plus);
    }","  public void test15()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Line line0 = new Line(vector2D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line0, true);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset0.split(line0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Line"", e);
      }
  }"
4543,"    public boolean isFull() {
        return region.isFull();
    }","  public void test16()  throws Throwable  {
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, (RegionBSPTree1D) null);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset0.isFull();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.EmbeddedTreeLineSubset"", e);
      }
  }"
4544,"    public boolean isEmpty() {
        return region.isEmpty();
    }","  public void test17()  throws Throwable  {
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, (RegionBSPTree1D) null);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset0.isEmpty();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.EmbeddedTreeLineSubset"", e);
      }
  }"
4545,"    public double getSize() {
        return region.getSize();
    }","  public void test18()  throws Throwable  {
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, (RegionBSPTree1D) null);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset0.getSize();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.EmbeddedTreeLineSubset"", e);
      }
  }"
4546,"    public Vector2D getCentroid() {
        final Vector1D subspaceCentroid = region.getCentroid();
        if (subspaceCentroid != null) {
            return getLine().toSpace(subspaceCentroid);
        }
        return null;
    }","  public void test19()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Line line0 = new Line(vector2D_Unit0, 0.0, (Precision.DoubleEquivalence) null);
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line0, (RegionBSPTree1D) null);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset0.getCentroid();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.EmbeddedTreeLineSubset"", e);
      }
  }"
4547,"    public Bounds2D getBounds() {
        final double min = region.getMin();
        final double max = region.getMax();

        if (Double.isFinite(min) && Double.isFinite(max)) {
            final Line line = getLine();

            return Bounds2D.builder()
                    .add(line.toSpace(min))
                    .add(line.toSpace(max))
                    .build();
        }

        return null;
    }","  public void test20()  throws Throwable  {
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, (RegionBSPTree1D) null);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset0.getBounds();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.EmbeddedTreeLineSubset"", e);
      }
  }"
4548,"    public Vector2D closest(final Vector2D pt) {
        return HyperplaneSubsets.closestToEmbeddedRegion(pt, getLine(), region);
    }","  public void test21()  throws Throwable  {
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset0.closest((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.internal.HyperplaneSubsets"", e);
      }
  }"
4549,"    public void add(final LineConvexSubset subset) {
        Lines.validateLinesEquivalent(getLine(), subset.getLine());

        region.add(subset.getInterval());
    }","  public void test22()  throws Throwable  {
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, (RegionBSPTree1D) null);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset0.add((LineConvexSubset) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.EmbeddedTreeLineSubset"", e);
      }
  }"
4550,"    public RegionBSPTree1D getSubspaceRegion() {
        return region;
    }","  public void test23()  throws Throwable  {
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, (RegionBSPTree1D) null);
      RegionBSPTree1D regionBSPTree1D0 = embeddedTreeLineSubset0.getSubspaceRegion();
}"
4551,"    public Split<EmbeddedTreeLineSubset> split(final Hyperplane<Vector2D> splitter) {
        final Line thisLine = getLine();
        final Line splitterLine = (Line) splitter;
        final Precision.DoubleEquivalence precision = getPrecision();

        final Vector2D intersection = splitterLine.intersection(thisLine);
        if (intersection == null) {
            return getNonIntersectingSplitResult(splitterLine, this);
        }

        final double abscissa = thisLine.abscissa(intersection);
        final OrientedPoint subspaceSplitter = OrientedPoints.fromLocationAndDirection(
                abscissa,
                splitterPlusIsPositiveFacing(splitterLine),
                precision);

        final Split<RegionBSPTree1D> subspaceSplit = region.split(subspaceSplitter);
        final SplitLocation subspaceSplitLoc = subspaceSplit.getLocation();

        if (SplitLocation.MINUS == subspaceSplitLoc) {
            return new Split<>(this, null);
        } else if (SplitLocation.PLUS == subspaceSplitLoc) {
            return new Split<>(null, this);
        }

        final EmbeddedTreeLineSubset minus = (subspaceSplit.getMinus() != null) ?
                new EmbeddedTreeLineSubset(thisLine, subspaceSplit.getMinus()) :
                null;
        final EmbeddedTreeLineSubset plus = (subspaceSplit.getPlus() != null) ?
                new EmbeddedTreeLineSubset(thisLine, subspaceSplit.getPlus()) :
                null;

        return new Split<>(minus, plus);
    }","  public void test24()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(7).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false, false, true, true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(true, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn((double)7, (double)7).when(precision_DoubleEquivalence0).signum(anyDouble());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line0, true);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = embeddedTreeLineSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 1459.0488501917746, precision_DoubleEquivalence1);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation(2431.67028781684);
      Line line2 = line1.transform(affineTransformMatrix2D0);
      EmbeddedTreeLineSubset embeddedTreeLineSubset1 = new EmbeddedTreeLineSubset(line1);
      Ray ray0 = new Ray(line2, vector2D_Unit0);
      EmbeddedTreeLineSubset embeddedTreeLineSubset2 = embeddedTreeLineSubset1.transform(affineTransformMatrix2D0);
      embeddedTreeLineSubset1.split(line2);
      embeddedTreeLineSubset2.add((LineConvexSubset) ray0);
      Split<EmbeddedTreeLineSubset> split0 = embeddedTreeLineSubset2.split(line1);
}"
4552,"    public Split<EmbeddedTreeLineSubset> split(final Hyperplane<Vector2D> splitter) {
        final Line thisLine = getLine();
        final Line splitterLine = (Line) splitter;
        final Precision.DoubleEquivalence precision = getPrecision();

        final Vector2D intersection = splitterLine.intersection(thisLine);
        if (intersection == null) {
            return getNonIntersectingSplitResult(splitterLine, this);
        }

        final double abscissa = thisLine.abscissa(intersection);
        final OrientedPoint subspaceSplitter = OrientedPoints.fromLocationAndDirection(
                abscissa,
                splitterPlusIsPositiveFacing(splitterLine),
                precision);

        final Split<RegionBSPTree1D> subspaceSplit = region.split(subspaceSplitter);
        final SplitLocation subspaceSplitLoc = subspaceSplit.getLocation();

        if (SplitLocation.MINUS == subspaceSplitLoc) {
            return new Split<>(this, null);
        } else if (SplitLocation.PLUS == subspaceSplitLoc) {
            return new Split<>(null, this);
        }

        final EmbeddedTreeLineSubset minus = (subspaceSplit.getMinus() != null) ?
                new EmbeddedTreeLineSubset(thisLine, subspaceSplit.getMinus()) :
                null;
        final EmbeddedTreeLineSubset plus = (subspaceSplit.getPlus() != null) ?
                new EmbeddedTreeLineSubset(thisLine, subspaceSplit.getPlus()) :
                null;

        return new Split<>(minus, plus);
    }","  public void test25()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(7).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false, false, true, true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(true, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line0, true);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = embeddedTreeLineSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 1459.0488501917746, precision_DoubleEquivalence1);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation(2431.67028781684);
      Line line2 = line1.transform(affineTransformMatrix2D0);
      EmbeddedTreeLineSubset embeddedTreeLineSubset1 = new EmbeddedTreeLineSubset(line2);
      Ray ray0 = new Ray(line2, vector2D_Unit0);
      EmbeddedTreeLineSubset embeddedTreeLineSubset2 = embeddedTreeLineSubset1.transform(affineTransformMatrix2D0);
      embeddedTreeLineSubset1.split(line2);
      embeddedTreeLineSubset2.add((LineConvexSubset) ray0);
      Split<EmbeddedTreeLineSubset> split0 = embeddedTreeLineSubset2.split(line1);
}"
4553,"    public Split<EmbeddedTreeLineSubset> split(final Hyperplane<Vector2D> splitter) {
        final Line thisLine = getLine();
        final Line splitterLine = (Line) splitter;
        final Precision.DoubleEquivalence precision = getPrecision();

        final Vector2D intersection = splitterLine.intersection(thisLine);
        if (intersection == null) {
            return getNonIntersectingSplitResult(splitterLine, this);
        }

        final double abscissa = thisLine.abscissa(intersection);
        final OrientedPoint subspaceSplitter = OrientedPoints.fromLocationAndDirection(
                abscissa,
                splitterPlusIsPositiveFacing(splitterLine),
                precision);

        final Split<RegionBSPTree1D> subspaceSplit = region.split(subspaceSplitter);
        final SplitLocation subspaceSplitLoc = subspaceSplit.getLocation();

        if (SplitLocation.MINUS == subspaceSplitLoc) {
            return new Split<>(this, null);
        } else if (SplitLocation.PLUS == subspaceSplitLoc) {
            return new Split<>(null, this);
        }

        final EmbeddedTreeLineSubset minus = (subspaceSplit.getMinus() != null) ?
                new EmbeddedTreeLineSubset(thisLine, subspaceSplit.getMinus()) :
                null;
        final EmbeddedTreeLineSubset plus = (subspaceSplit.getPlus() != null) ?
                new EmbeddedTreeLineSubset(thisLine, subspaceSplit.getPlus()) :
                null;

        return new Split<>(minus, plus);
    }","  public void test26()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(7).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(true, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line0, true);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = embeddedTreeLineSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 1459.0488501917746, precision_DoubleEquivalence1);
      EmbeddedTreeLineSubset embeddedTreeLineSubset1 = new EmbeddedTreeLineSubset(line1);
      embeddedTreeLineSubset1.split(line1);
      Split<EmbeddedTreeLineSubset> split0 = embeddedTreeLineSubset1.split(line1);
}"
4554,"    public boolean isEmpty() {
        return region.isEmpty();
    }","  public void test27()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = new Line(vector2D_Unit0, 519.0411513317, (Precision.DoubleEquivalence) null);
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.full();
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line0, regionBSPTree1D0);
      List<LineConvexSubset> list0 = embeddedTreeLineSubset0.toConvex();
}"
4555,"    public Bounds2D getBounds() {
        final double min = region.getMin();
        final double max = region.getMax();

        if (Double.isFinite(min) && Double.isFinite(max)) {
            final Line line = getLine();

            return Bounds2D.builder()
                    .add(line.toSpace(min))
                    .add(line.toSpace(max))
                    .build();
        }

        return null;
    }","  public void test28()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = new Line(vector2D_Unit0, 519.0411513317, (Precision.DoubleEquivalence) null);
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.full();
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line0, regionBSPTree1D0);
      Interval interval0 = Interval.min(519.0411513317, (Precision.DoubleEquivalence) null);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      HyperplaneConvexSubset<Vector1D> hyperplaneConvexSubset0 = orientedPoint0.span();
      regionBSPTree1D0.insert((HyperplaneSubset<Vector1D>) hyperplaneConvexSubset0);
      Bounds2D bounds2D0 = embeddedTreeLineSubset0.getBounds();
}"
4556,"    public Bounds2D getBounds() {
        final double min = region.getMin();
        final double max = region.getMax();

        if (Double.isFinite(min) && Double.isFinite(max)) {
            final Line line = getLine();

            return Bounds2D.builder()
                    .add(line.toSpace(min))
                    .add(line.toSpace(max))
                    .build();
        }

        return null;
    }","  public void test29()  throws Throwable  {
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line0, true);
      Bounds2D bounds2D0 = embeddedTreeLineSubset0.getBounds();
}"
4557,"    public Vector2D getCentroid() {
        final Vector1D subspaceCentroid = region.getCentroid();
        if (subspaceCentroid != null) {
            return getLine().toSpace(subspaceCentroid);
        }
        return null;
    }","  public void test30()  throws Throwable  {
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null);
      Vector2D vector2D0 = embeddedTreeLineSubset0.getCentroid();
}"
4558,"    public Vector2D closest(final Vector2D pt) {
        return HyperplaneSubsets.closestToEmbeddedRegion(pt, getLine(), region);
    }","  public void test31()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-3882.0), precision_DoubleEquivalence0);
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line0);
      Vector2D vector2D0 = embeddedTreeLineSubset0.closest((Vector2D) vector2D_Unit0);
}"
4559,"    public EmbeddedTreeLineSubset transform(final Transform<Vector2D> transform) {
        final SubspaceTransform st = getLine().subspaceTransform(transform);

        final RegionBSPTree1D tRegion = RegionBSPTree1D.empty();
        tRegion.copy(region);
        tRegion.transform(st.getTransform());

        return new EmbeddedTreeLineSubset(st.getLine(), tRegion);
    }","  public void test32()  throws Throwable  {
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn((Line.SubspaceTransform) null).when(line0).subspaceTransform(nullable(org.apache.commons.geometry.core.Transform.class));
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line0, true);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation(2431.67028781684);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset0.transform(affineTransformMatrix2D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.EmbeddedTreeLineSubset"", e);
      }
  }"
4560,"    public double getSize() {
        return region.getSize();
    }","  public void test33()  throws Throwable  {
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line0, true);
      double double0 = embeddedTreeLineSubset0.getSize();
}"
4561,"    public boolean isFull() {
        return region.isFull();
    }","  public void test34()  throws Throwable  {
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null);
      boolean boolean0 = embeddedTreeLineSubset0.isFull();
}"
4562,"    public boolean isEmpty() {
        return region.isEmpty();
    }","  public void test35()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Line line0 = new Line(vector2D_Unit0, 519.0411513317, (Precision.DoubleEquivalence) null);
      RegionBSPTree1D regionBSPTree1D0 = RegionBSPTree1D.full();
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line0, regionBSPTree1D0);
      boolean boolean0 = embeddedTreeLineSubset0.isEmpty();
}"
4563,"    RegionLocation classifyAbscissa(final double abscissa) {
        return region.classify(abscissa);
    }","  public void test36()  throws Throwable  {
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, (RegionBSPTree1D) null);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset0.classifyAbscissa((-489.2));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.EmbeddedTreeLineSubset"", e);
      }
  }"
4564,"    public void add(final LineConvexSubset subset) {
        Lines.validateLinesEquivalent(getLine(), subset.getLine());

        region.add(subset.getInterval());
    }","  public void test37()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0, (Precision.DoubleEquivalence) null).when(line0).getPrecision();
      doReturn(false).when(line0).eq(any(org.apache.commons.geometry.euclidean.twod.Line.class) , any(org.apache.commons.numbers.core.Precision.DoubleEquivalence.class));
      doReturn((String) null).when(line0).toString();
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset(line0, false);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = embeddedTreeLineSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, (-265.692941), precision_DoubleEquivalence1);
      Ray ray0 = new Ray(line1, vector2D_Unit0);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset0.add((LineConvexSubset) ray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Arguments do not represent the same line. Expected null but was Line[origin= (0.0, 265.692941), direction= (-1.0, 0.0)].
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
4565,"    public String toString() {
        final Line line = getLine();

        final StringBuilder sb = new StringBuilder();
        sb.append(this.getClass().getSimpleName())
            .append('[')
            .append(""lineOrigin= "")
            .append(line.getOrigin())
            .append("", lineDirection= "")
            .append(line.getDirection())
            .append("", region= "")
            .append(region)
            .append(']');

        return sb.toString();
    }","  public void test38()  throws Throwable  {
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null);
      // Undeclared exception!
      try { 
        embeddedTreeLineSubset0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.EmbeddedTreeLineSubset"", e);
      }
  }"
4566,"    public static AffineTransformMatrix2D of(final double... arr) {
        if (arr.length != NUM_ELEMENTS) {
            throw new IllegalArgumentException(""Dimension mismatch: "" + arr.length + "" != "" + NUM_ELEMENTS);
        }

        return new AffineTransformMatrix2D(
                    arr[0], arr[1], arr[2],
                    arr[3], arr[4], arr[5]
                );
    }","  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      // Undeclared exception!
      try { 
        AffineTransformMatrix2D.of(doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Dimension mismatch: 8 != 6
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D"", e);
      }
  }"
4567,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test1()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation((-1548.220793), (-1548.220793));
      AffineTransformMatrix2D affineTransformMatrix2D1 = AffineTransformMatrix2D.createTranslation((-1548.220793), 534.039324364);
      boolean boolean0 = affineTransformMatrix2D0.equals(affineTransformMatrix2D1);
}"
4568,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test2()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation((-1548.220793), (-1548.220793));
      AffineTransformMatrix2D affineTransformMatrix2D1 = AffineTransformMatrix2D.createTranslation((-1548.220793), 534.039324364);
      boolean boolean0 = affineTransformMatrix2D0.equals(affineTransformMatrix2D1);
}"
4569,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test3()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(Double.NEGATIVE_INFINITY, 2444.25299);
      AffineTransformMatrix2D affineTransformMatrix2D1 = AffineTransformMatrix2D.createScale(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      boolean boolean0 = affineTransformMatrix2D1.equals(affineTransformMatrix2D0);
}"
4570,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test4()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(Double.NEGATIVE_INFINITY, 2444.25299);
      AffineTransformMatrix2D affineTransformMatrix2D1 = AffineTransformMatrix2D.createScale(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      boolean boolean0 = affineTransformMatrix2D1.equals(affineTransformMatrix2D0);
}"
4571,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test5()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.identity();
      AffineTransformMatrix2D affineTransformMatrix2D1 = AffineTransformMatrix2D.createShear(0.0, (-524.0));
      boolean boolean0 = affineTransformMatrix2D1.equals(affineTransformMatrix2D0);
}"
4572,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test6()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.identity();
      AffineTransformMatrix2D affineTransformMatrix2D1 = AffineTransformMatrix2D.createShear(0.0, (-524.0));
      boolean boolean0 = affineTransformMatrix2D1.equals(affineTransformMatrix2D0);
}"
4573,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test7()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation(2444.25299, Double.NEGATIVE_INFINITY);
      AffineTransformMatrix2D affineTransformMatrix2D1 = affineTransformMatrix2D0.linear();
      boolean boolean0 = affineTransformMatrix2D1.equals(affineTransformMatrix2D0);
}"
4574,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test8()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      AffineTransformMatrix2D affineTransformMatrix2D0 = rotation2D0.toMatrix();
      AffineTransformMatrix2D affineTransformMatrix2D1 = AffineTransformMatrix2D.createTranslation((-1.5707963267948966), (-1.5707963267948966));
      boolean boolean0 = affineTransformMatrix2D0.equals(affineTransformMatrix2D1);
}"
4575,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test9()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation(2444.25299, Double.NEGATIVE_INFINITY);
      AffineTransformMatrix2D affineTransformMatrix2D1 = AffineTransformMatrix2D.createScale(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      boolean boolean0 = affineTransformMatrix2D1.equals(affineTransformMatrix2D0);
}"
4576,"    public int hashCode() {
        final int prime = 31;
        int result = 1;

        result = (result * prime) + (Double.hashCode(m00) - Double.hashCode(m01) + Double.hashCode(m02));
        result = (result * prime) + (Double.hashCode(m10) - Double.hashCode(m11) + Double.hashCode(m12));

        return result;
    }","  public void test10()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation((-2586.164598), (-2586.164598));
      affineTransformMatrix2D0.hashCode();
  }"
4577,"    public int hashCode() {
        final int prime = 31;
        int result = 1;

        result = (result * prime) + (Double.hashCode(m00) - Double.hashCode(m01) + Double.hashCode(m02));
        result = (result * prime) + (Double.hashCode(m10) - Double.hashCode(m11) + Double.hashCode(m12));

        return result;
    }","  public void test11()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      AffineTransformMatrix2D affineTransformMatrix2D0 = rotation2D0.toMatrix();
      AffineTransformMatrix2D affineTransformMatrix2D1 = affineTransformMatrix2D0.shear(350.6373118, 350.6373118);
      affineTransformMatrix2D1.hashCode();
  }"
4578,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test12()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation(0.0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      AffineTransformMatrix2D affineTransformMatrix2D1 = affineTransformMatrix2D0.translate((Vector2D) vector2D_Unit0);
      AffineTransformMatrix2D affineTransformMatrix2D2 = affineTransformMatrix2D1.inverse();
}"
4579,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test13()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation(0.0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      AffineTransformMatrix2D affineTransformMatrix2D1 = affineTransformMatrix2D0.translate((Vector2D) vector2D_Unit0);
      AffineTransformMatrix2D affineTransformMatrix2D2 = affineTransformMatrix2D1.inverse();
}"
4580,"    public AffineTransformMatrix2D inverse() {

        // Our full matrix is 3x3 but we can significantly reduce the amount of computations
        // needed here since we know that our last row is [0 0 1].

        final double det = Matrices.checkDeterminantForInverse(determinant());

        // validate the remaining matrix elements that were not part of the determinant
        Matrices.checkElementForInverse(m02);
        Matrices.checkElementForInverse(m12);

        // compute the necessary elements of the cofactor matrix
        // (we need all but the last column)

        final double invDet = 1.0 / det;

        final double c00 = invDet * m11;
        final double c01 = -invDet * m10;

        final double c10 = -invDet * m01;
        final double c11 = invDet * m00;

        final double c20 = invDet * Matrices.determinant(m01, m02, m11, m12);
        final double c21 = -invDet * Matrices.determinant(m00, m02, m10, m12);

        return new AffineTransformMatrix2D(
                    c00, c10, c20,
                    c01, c11, c21
                );
    }","  public void test14()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation((Vector2D) vector2D_Unit0, (-3361.83));
      AffineTransformMatrix2D affineTransformMatrix2D1 = affineTransformMatrix2D0.inverse();
}"
4581,"    public AffineTransformMatrix2D inverse() {

        // Our full matrix is 3x3 but we can significantly reduce the amount of computations
        // needed here since we know that our last row is [0 0 1].

        final double det = Matrices.checkDeterminantForInverse(determinant());

        // validate the remaining matrix elements that were not part of the determinant
        Matrices.checkElementForInverse(m02);
        Matrices.checkElementForInverse(m12);

        // compute the necessary elements of the cofactor matrix
        // (we need all but the last column)

        final double invDet = 1.0 / det;

        final double c00 = invDet * m11;
        final double c01 = -invDet * m10;

        final double c10 = -invDet * m01;
        final double c11 = invDet * m00;

        final double c20 = invDet * Matrices.determinant(m01, m02, m11, m12);
        final double c21 = -invDet * Matrices.determinant(m00, m02, m10, m12);

        return new AffineTransformMatrix2D(
                    c00, c10, c20,
                    c01, c11, c21
                );
    }","  public void test15()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(1617.1570575, (-1.0));
      AffineTransformMatrix2D affineTransformMatrix2D1 = affineTransformMatrix2D0.inverse();
}"
4582,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test16()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(1617.1570575, (-1.0));
      AffineTransformMatrix2D affineTransformMatrix2D1 = affineTransformMatrix2D0.shear((-1292.35321612), 0.9999);
}"
4583,"    public double determinant() {
        return Matrices.determinant(
                m00, m01,
                m10, m11
            );
    }","  public void test17()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale((Vector2D) vector2D_Unit0);
      double double0 = affineTransformMatrix2D0.determinant();
}"
4584,"    public double determinant() {
        return Matrices.determinant(
                m00, m01,
                m10, m11
            );
    }","  public void test18()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      double double0 = affineTransformMatrix2D0.determinant();
}"
4585,"    public double applyY(final double x, final double y) {
        return applyVectorY(x, y) + m12;
    }","  public void test19()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(0.0);
      double double0 = affineTransformMatrix2D0.applyY((-1.0), (-2419.552));
}"
4586,"    public double applyY(final double x, final double y) {
        return applyVectorY(x, y) + m12;
    }","  public void test20()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(3883.1565665248, 3883.1565665248);
      double double0 = affineTransformMatrix2D0.applyY(0.0, 1896.4025255);
}"
4587,"    public double applyX(final double x, final double y) {
        return applyVectorX(x, y) + m02;
    }","  public void test21()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation(0.0, (-1447.31));
      double double0 = affineTransformMatrix2D0.applyX(0.0, 0.0);
}"
4588,"    public double applyX(final double x, final double y) {
        return applyVectorX(x, y) + m02;
    }","  public void test22()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation((-2586.164598), (-2586.164598));
      double double0 = affineTransformMatrix2D0.applyX(0.0, (-2586.164598));
}"
4589,"    public double applyVectorY(final double x, final double y) {
        return Vectors.linearCombination(m10, x, m11, y);
    }","  public void test23()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation(0.0);
      double double0 = affineTransformMatrix2D0.applyVectorY(0.0, 0.0);
}"
4590,"    public double applyVectorY(final double x, final double y) {
        return Vectors.linearCombination(m10, x, m11, y);
    }","  public void test24()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation((-1.0), (-1.0));
      double double0 = affineTransformMatrix2D0.applyVectorY(1.0, 1.0);
}"
4591,"    public double applyVectorX(final double x, final double y) {
        return Vectors.linearCombination(m00, x, m01, y);
    }","  public void test25()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation(2444.25299);
      double double0 = affineTransformMatrix2D0.applyVectorX(2444.25299, 4053.529268643651);
}"
4592,"    public double applyVectorX(final double x, final double y) {
        return Vectors.linearCombination(m00, x, m01, y);
    }","  public void test26()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation((-2586.164598), (-2586.164598));
      double double0 = affineTransformMatrix2D0.applyVectorX((-2586.164598), (-2586.164598));
}"
4593,"    public Vector2D applyVector(final Vector2D vec) {
        return applyVector(vec, Vector2D::of);
    }","  public void test27()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.fromColumnVectors((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = affineTransformMatrix2D0.applyVector(vector2D0);
}"
4594,"    public Vector2D applyVector(final Vector2D vec) {
        return applyVector(vec, Vector2D::of);
    }","  public void test28()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(Double.NEGATIVE_INFINITY, 2444.25299);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = affineTransformMatrix2D0.applyVector((Vector2D) vector2D_Unit0);
}"
4595,"    public Vector2D applyVector(final Vector2D vec) {
        return applyVector(vec, Vector2D::of);
    }","  public void test29()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(Double.NEGATIVE_INFINITY, 2444.25299);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Vector2D vector2D0 = affineTransformMatrix2D0.applyVector((Vector2D) vector2D_Unit0);
}"
4596,"    public Vector2D applyVector(final Vector2D vec) {
        return applyVector(vec, Vector2D::of);
    }","  public void test30()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation(364.9262308, 0.0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = affineTransformMatrix2D0.applyVector((Vector2D) vector2D_Unit0);
}"
4597,"    public Vector2D applyVector(final Vector2D vec) {
        return applyVector(vec, Vector2D::of);
    }","  public void test31()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation(364.9262308, 0.0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = affineTransformMatrix2D0.applyVector((Vector2D) vector2D_Unit0);
}"
4598,"    public Vector2D.Unit applyDirection(final Vector2D vec) {
        return applyVector(vec, Vector2D.Unit::from);
    }","  public void test32()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale((Vector2D) vector2D_Unit0);
      Vector2D.Unit vector2D_Unit1 = affineTransformMatrix2D0.applyDirection((Vector2D) vector2D_Unit0);
}"
4599,"    public Vector2D.Unit applyDirection(final Vector2D vec) {
        return applyVector(vec, Vector2D.Unit::from);
    }","  public void test33()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation(0.0, 0.0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1.0), 3151.4078802);
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D.Unit vector2D_Unit2 = affineTransformMatrix2D0.applyDirection((Vector2D) vector2D_Unit1);
}"
4600,"    public Vector2D.Unit applyDirection(final Vector2D vec) {
        return applyVector(vec, Vector2D.Unit::from);
    }","  public void test34()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation(0.0, 0.0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1.0), 3151.4078802);
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.negate();
      Vector2D.Unit vector2D_Unit2 = affineTransformMatrix2D0.applyDirection((Vector2D) vector2D_Unit1);
}"
4601,"    public Vector2D.Unit applyDirection(final Vector2D vec) {
        return applyVector(vec, Vector2D.Unit::from);
    }","  public void test35()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(3883.1565665248, 3883.1565665248);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = affineTransformMatrix2D0.applyDirection((Vector2D) vector2D_Unit0);
}"
4602,"    public Vector2D apply(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        return Vector2D.of(
                applyX(x, y),
                applyY(x, y));
    }","  public void test36()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.fromColumnVectors(vector2D0, vector2D0);
      Vector2D vector2D1 = affineTransformMatrix2D0.apply(vector2D0);
}"
4603,"    public Vector2D apply(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        return Vector2D.of(
                applyX(x, y),
                applyY(x, y));
    }","  public void test37()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(3883.1565665248, 3883.1565665248);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      Vector2D vector2D0 = affineTransformMatrix2D0.apply((Vector2D) vector2D_Unit1);
}"
4604,"    public Vector2D apply(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        return Vector2D.of(
                applyX(x, y),
                applyY(x, y));
    }","  public void test38()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(3883.1565665248, 3883.1565665248);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D.Unit vector2D_Unit1 = vector2D_Unit0.orthogonal();
      Vector2D vector2D0 = affineTransformMatrix2D0.apply((Vector2D) vector2D_Unit1);
}"
4605,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test39()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation((-1.0), (-1.0));
      Vector2D vector2D0 = Vector2D.NaN;
      Vector2D vector2D1 = affineTransformMatrix2D0.apply(vector2D0);
}"
4606,"    public Vector2D apply(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        return Vector2D.of(
                applyX(x, y),
                applyY(x, y));
    }","  public void test40()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(3883.1565665248, 3883.1565665248);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = affineTransformMatrix2D0.apply((Vector2D) vector2D_Unit0);
}"
4607,"    public Vector2D apply(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        return Vector2D.of(
                applyX(x, y),
                applyY(x, y));
    }","  public void test41()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(3883.1565665248, 3883.1565665248);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = affineTransformMatrix2D0.apply((Vector2D) vector2D_Unit0);
}"
4608,"    public AffineTransformMatrix2D translate(final Vector2D translation) {
        return translate(translation.getX(), translation.getY());
    }","  public void test42()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(0.0);
      // Undeclared exception!
      try { 
        affineTransformMatrix2D0.translate((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D"", e);
      }
  }"
4609,"    public AffineTransformMatrix2D scale(final double factor) {
        return scale(factor, factor);
    }","  public void test43()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createShear((-2023.6), 2072.6373);
      // Undeclared exception!
      try { 
        affineTransformMatrix2D0.scale((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D"", e);
      }
  }"
4610,"    public AffineTransformMatrix2D rotate(final double angle) {
        return rotate(Rotation2D.of(angle));
    }","  public void test44()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(3883.1565665248, 3883.1565665248);
      // Undeclared exception!
      try { 
        affineTransformMatrix2D0.rotate((Rotation2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D"", e);
      }
  }"
4611,"    public AffineTransformMatrix2D rotate(final double angle) {
        return rotate(Rotation2D.of(angle));
    }","  public void test45()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(2.409919865102884E-181, 2.409919865102884E-181);
      Rotation2D rotation2D0 = Rotation2D.of(0.0);
      // Undeclared exception!
      try { 
        affineTransformMatrix2D0.rotate((Vector2D) null, rotation2D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D"", e);
      }
  }"
4612,"    public AffineTransformMatrix2D rotate(final double angle) {
        return rotate(Rotation2D.of(angle));
    }","  public void test46()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(1.0);
      // Undeclared exception!
      try { 
        affineTransformMatrix2D0.rotate((Vector2D) null, 1.0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D"", e);
      }
  }"
4613,"    public AffineTransformMatrix2D premultiply(final AffineTransformMatrix2D m) {
        return multiply(m, this);
    }","  public void test47()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation(vector2D0, rotation2D0);
      // Undeclared exception!
      try { 
        affineTransformMatrix2D0.premultiply((AffineTransformMatrix2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D"", e);
      }
  }"
4614,"    public static AffineTransformMatrix2D of(final double... arr) {
        if (arr.length != NUM_ELEMENTS) {
            throw new IllegalArgumentException(""Dimension mismatch: "" + arr.length + "" != "" + NUM_ELEMENTS);
        }

        return new AffineTransformMatrix2D(
                    arr[0], arr[1], arr[2],
                    arr[3], arr[4], arr[5]
                );
    }","  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        AffineTransformMatrix2D.of((double[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D"", e);
      }
  }"
4615,"    public AffineTransformMatrix2D multiply(final AffineTransformMatrix2D m) {
        return multiply(this, m);
    }","  public void test49()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-915.25), 3518.459099);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation((Vector2D) vector2D_Unit0);
      // Undeclared exception!
      try { 
        affineTransformMatrix2D0.multiply((AffineTransformMatrix2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D"", e);
      }
  }"
4616,"    public AffineTransformMatrix2D inverse() {

        // Our full matrix is 3x3 but we can significantly reduce the amount of computations
        // needed here since we know that our last row is [0 0 1].

        final double det = Matrices.checkDeterminantForInverse(determinant());

        // validate the remaining matrix elements that were not part of the determinant
        Matrices.checkElementForInverse(m02);
        Matrices.checkElementForInverse(m12);

        // compute the necessary elements of the cofactor matrix
        // (we need all but the last column)

        final double invDet = 1.0 / det;

        final double c00 = invDet * m11;
        final double c01 = -invDet * m10;

        final double c10 = -invDet * m01;
        final double c11 = invDet * m00;

        final double c20 = invDet * Matrices.determinant(m01, m02, m11, m12);
        final double c21 = -invDet * Matrices.determinant(m00, m02, m10, m12);

        return new AffineTransformMatrix2D(
                    c00, c10, c20,
                    c01, c11, c21
                );
    }","  public void test50()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      AffineTransformMatrix2D affineTransformMatrix2D0 = rotation2D0.toMatrix();
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      AffineTransformMatrix2D affineTransformMatrix2D1 = affineTransformMatrix2D0.rotate(vector2D0, 350.6373118);
      // Undeclared exception!
      try { 
        affineTransformMatrix2D1.inverse();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Matrix is not invertible; invalid matrix element: NaN
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Matrices"", e);
      }
  }"
4617,"    public static AffineTransformMatrix2D fromColumnVectors(final Vector2D u, final Vector2D v) {
        return fromColumnVectors(u, v, Vector2D.ZERO);
    }","  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        AffineTransformMatrix2D.fromColumnVectors((Vector2D) null, (Vector2D) null, (Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D"", e);
      }
  }"
4618,"    public static AffineTransformMatrix2D fromColumnVectors(final Vector2D u, final Vector2D v) {
        return fromColumnVectors(u, v, Vector2D.ZERO);
    }","  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        AffineTransformMatrix2D.fromColumnVectors((Vector2D) null, (Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D"", e);
      }
  }"
4619,"    public static AffineTransformMatrix2D from(final UnaryOperator<Vector2D> fn) {
        final Vector2D tPlusX = fn.apply(Vector2D.Unit.PLUS_X);
        final Vector2D tPlusY = fn.apply(Vector2D.Unit.PLUS_Y);
        final Vector2D tZero = fn.apply(Vector2D.ZERO);

        final Vector2D u = tPlusX.subtract(tZero);
        final Vector2D v = tPlusY.subtract(tZero);

        final AffineTransformMatrix2D mat =  AffineTransformMatrix2D.fromColumnVectors(u, v, tZero);

        final double det = mat.determinant();
        if (!Vectors.isRealNonZero(det)) {
            throw new IllegalArgumentException(""Transform function is invalid: matrix determinant is "" + det);
        }

        return mat;
    }","  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        AffineTransformMatrix2D.from((UnaryOperator<Vector2D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D"", e);
      }
  }"
4620,"    public static AffineTransformMatrix2D createTranslation(final Vector2D translation) {
        return createTranslation(translation.getX(), translation.getY());
    }","  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        AffineTransformMatrix2D.createTranslation((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D"", e);
      }
  }"
4621,"    public static AffineTransformMatrix2D createScale(final double factor) {
        return createScale(factor, factor);
    }","  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        AffineTransformMatrix2D.createScale((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D"", e);
      }
  }"
4622,"    public static AffineTransformMatrix2D createRotation(final double angle) {
        return Rotation2D.of(angle).toMatrix();
    }","  public void test56()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.0);
      // Undeclared exception!
      try { 
        AffineTransformMatrix2D.createRotation((Vector2D) null, rotation2D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D"", e);
      }
  }"
4623,"    public static AffineTransformMatrix2D createRotation(final double angle) {
        return Rotation2D.of(angle).toMatrix();
    }","  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        AffineTransformMatrix2D.createRotation((Vector2D) null, 1.0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D"", e);
      }
  }"
4624,"    public Vector2D applyVector(final Vector2D vec) {
        return applyVector(vec, Vector2D::of);
    }","  public void test58()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.identity();
      // Undeclared exception!
      try { 
        affineTransformMatrix2D0.applyVector((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D"", e);
      }
  }"
4625,"    public Vector2D.Unit applyDirection(final Vector2D vec) {
        return applyVector(vec, Vector2D.Unit::from);
    }","  public void test59()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation(1179.96363, 1179.96363);
      // Undeclared exception!
      try { 
        affineTransformMatrix2D0.applyDirection((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D"", e);
      }
  }"
4626,"    public static AffineTransformMatrix2D of(final double... arr) {
        if (arr.length != NUM_ELEMENTS) {
            throw new IllegalArgumentException(""Dimension mismatch: "" + arr.length + "" != "" + NUM_ELEMENTS);
        }

        return new AffineTransformMatrix2D(
                    arr[0], arr[1], arr[2],
                    arr[3], arr[4], arr[5]
                );
    }","  public void test60()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation(0.0, (-1447.31));
      double[] doubleArray0 = affineTransformMatrix2D0.toArray();
      AffineTransformMatrix2D affineTransformMatrix2D1 = AffineTransformMatrix2D.of(doubleArray0);
}"
4627,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test61()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation(0.0, (-1447.31));
      double[] doubleArray0 = affineTransformMatrix2D0.toArray();
      AffineTransformMatrix2D affineTransformMatrix2D1 = AffineTransformMatrix2D.of(doubleArray0);
}"
4628,"    public static AffineTransformMatrix2D fromColumnVectors(final Vector2D u, final Vector2D v) {
        return fromColumnVectors(u, v, Vector2D.ZERO);
    }","  public void test62()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1.0), 3151.4078802);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.fromColumnVectors((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
}"
4629,"    public double applyY(final double x, final double y) {
        return applyVectorY(x, y) + m12;
    }","  public void test63()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation(0.0);
      double double0 = affineTransformMatrix2D0.applyY(0.0, (-442.8541927));
}"
4630,"    public double applyVectorX(final double x, final double y) {
        return Vectors.linearCombination(m00, x, m01, y);
    }","  public void test64()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation(0.0);
      double double0 = affineTransformMatrix2D0.applyVectorX(0.0, 0.0);
}"
4631,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test65()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation(0.0, (-1447.31));
      AffineTransformMatrix2D affineTransformMatrix2D1 = affineTransformMatrix2D0.translate(0.0, (-825.55107516518));
}"
4632,"    public double applyX(final double x, final double y) {
        return applyVectorX(x, y) + m02;
    }","  public void test66()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation(0.0);
      double double0 = affineTransformMatrix2D0.applyX(1439.095152, 1.0);
}"
4633,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test67()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation(0.0);
      AffineTransformMatrix2D affineTransformMatrix2D1 = affineTransformMatrix2D0.linearTranspose();
}"
4634,"    public double applyVectorY(final double x, final double y) {
        return Vectors.linearCombination(m10, x, m11, y);
    }","  public void test68()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation(0.0);
      double double0 = affineTransformMatrix2D0.applyVectorY((-2025.0736733892415), (-442.8541927));
}"
4635,"    public Vector2D apply(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        return Vector2D.of(
                applyX(x, y),
                applyY(x, y));
    }","  public void test69()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale((-2937.76898667), (-2937.76898667));
      // Undeclared exception!
      try { 
        affineTransformMatrix2D0.apply((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D"", e);
      }
  }"
4636,"    public double determinant() {
        return Matrices.determinant(
                m00, m01,
                m10, m11
            );
    }","  public void test70()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(Double.NEGATIVE_INFINITY, 2444.25299);
      double double0 = affineTransformMatrix2D0.determinant();
}"
4637,"    public AffineTransformMatrix2D scale(final double factor) {
        return scale(factor, factor);
    }","  public void test71()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(1394.0, (-1512.590320315479));
      AffineTransformMatrix2D affineTransformMatrix2D1 = affineTransformMatrix2D0.scale(0.0, 0.0);
}"
4638,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test72()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation(0.0, 0.0);
      Rotation2D rotation2D0 = Rotation2D.identity();
      AffineTransformMatrix2D affineTransformMatrix2D1 = affineTransformMatrix2D0.rotate(rotation2D0);
}"
4639,"    public static AffineTransformMatrix2D from(final UnaryOperator<Vector2D> fn) {
        final Vector2D tPlusX = fn.apply(Vector2D.Unit.PLUS_X);
        final Vector2D tPlusY = fn.apply(Vector2D.Unit.PLUS_Y);
        final Vector2D tZero = fn.apply(Vector2D.ZERO);

        final Vector2D u = tPlusX.subtract(tZero);
        final Vector2D v = tPlusY.subtract(tZero);

        final AffineTransformMatrix2D mat =  AffineTransformMatrix2D.fromColumnVectors(u, v, tZero);

        final double det = mat.determinant();
        if (!Vectors.isRealNonZero(det)) {
            throw new IllegalArgumentException(""Transform function is invalid: matrix determinant is "" + det);
        }

        return mat;
    }","  public void test73()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(0.0, (-837.5415));
      // Undeclared exception!
      try { 
        AffineTransformMatrix2D.from(affineTransformMatrix2D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Transform function is invalid: matrix determinant is -0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D"", e);
      }
  }"
4640,"    public static AffineTransformMatrix2D of(final double... arr) {
        if (arr.length != NUM_ELEMENTS) {
            throw new IllegalArgumentException(""Dimension mismatch: "" + arr.length + "" != "" + NUM_ELEMENTS);
        }

        return new AffineTransformMatrix2D(
                    arr[0], arr[1], arr[2],
                    arr[3], arr[4], arr[5]
                );
    }","  public void test74()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        AffineTransformMatrix2D.of(doubleArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Dimension mismatch: 0 != 6
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D"", e);
      }
  }"
4641,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test75()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation((-1690.632142), (-1690.632142));
      AffineTransformMatrix2D affineTransformMatrix2D1 = AffineTransformMatrix2D.createTranslation((-1690.632142), (-1723.5028438986342));
      boolean boolean0 = affineTransformMatrix2D0.equals(affineTransformMatrix2D1);
}"
4642,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test76()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation((-1690.632142), (-1690.632142));
      AffineTransformMatrix2D affineTransformMatrix2D1 = AffineTransformMatrix2D.createTranslation((-1690.632142), (-1723.5028438986342));
      boolean boolean0 = affineTransformMatrix2D0.equals(affineTransformMatrix2D1);
}"
4643,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test77()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(1394.0, (-1512.590320315479));
      AffineTransformMatrix2D affineTransformMatrix2D1 = AffineTransformMatrix2D.createScale(1394.0, 1394.0);
      boolean boolean0 = affineTransformMatrix2D1.equals(affineTransformMatrix2D0);
}"
4644,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test78()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(1394.0, (-1512.590320315479));
      AffineTransformMatrix2D affineTransformMatrix2D1 = AffineTransformMatrix2D.createScale(1394.0, 1394.0);
      boolean boolean0 = affineTransformMatrix2D1.equals(affineTransformMatrix2D0);
}"
4645,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test79()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(Double.NEGATIVE_INFINITY, 2444.25299);
      AffineTransformMatrix2D affineTransformMatrix2D1 = affineTransformMatrix2D0.linear();
      boolean boolean0 = affineTransformMatrix2D1.equals(affineTransformMatrix2D0);
}"
4646,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test80()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.identity();
      boolean boolean0 = affineTransformMatrix2D0.equals(""[ 1.0, 0.0, 0.0; -524.0, 1.0, 0.0 ]"");
}"
4647,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test81()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(1394.0, (-1512.590320315479));
      boolean boolean0 = affineTransformMatrix2D0.equals(affineTransformMatrix2D0);
}"
4648,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test82()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.identity();
      AffineTransformMatrix2D affineTransformMatrix2D1 = AffineTransformMatrix2D.createShear(0.0, (-524.0));
      boolean boolean0 = affineTransformMatrix2D0.equals(affineTransformMatrix2D1);
}"
4649,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test83()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.identity();
      AffineTransformMatrix2D affineTransformMatrix2D1 = AffineTransformMatrix2D.createShear(0.0, (-524.0));
      boolean boolean0 = affineTransformMatrix2D0.equals(affineTransformMatrix2D1);
}"
4650,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test84()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale((-1721.6884033523904));
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      AffineTransformMatrix2D affineTransformMatrix2D1 = affineTransformMatrix2D0.scale((Vector2D) vector2D_Unit0);
      boolean boolean0 = affineTransformMatrix2D1.equals(affineTransformMatrix2D0);
}"
4651,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test85()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale((-1721.6884033523904));
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      AffineTransformMatrix2D affineTransformMatrix2D1 = affineTransformMatrix2D0.scale((Vector2D) vector2D_Unit0);
      boolean boolean0 = affineTransformMatrix2D1.equals(affineTransformMatrix2D0);
}"
4652,"    public static AffineTransformMatrix2D createRotation(final double angle) {
        return Rotation2D.of(angle).toMatrix();
    }","  public void test86()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(1880.7253994703294);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation((Vector2D) vector2D_Unit0, rotation2D0);
}"
4653,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test87()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.identity();
      AffineTransformMatrix2D affineTransformMatrix2D1 = affineTransformMatrix2D0.normalTransform();
      boolean boolean0 = affineTransformMatrix2D0.equals(affineTransformMatrix2D1);
}"
4654,"    public AffineTransformMatrix2D multiply(final AffineTransformMatrix2D m) {
        return multiply(this, m);
    }","  public void test88()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(1880.7253994703294);
      AffineTransformMatrix2D affineTransformMatrix2D1 = affineTransformMatrix2D0.multiply(affineTransformMatrix2D0);
}"
4655,"    public Vector2D.Unit applyDirection(final Vector2D vec) {
        return applyVector(vec, Vector2D.Unit::from);
    }","  public void test89()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createShear(1849.4, 1849.4);
      Vector2D vector2D0 = Vector2D.ZERO;
      // Undeclared exception!
      try { 
        affineTransformMatrix2D0.applyDirection(vector2D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
4656,"    public String toString() {
        final StringBuilder sb = new StringBuilder();

        sb.append(MATRIX_START)

            .append(m00)
            .append(ELEMENT_SEPARATOR)
            .append(m01)
            .append(ELEMENT_SEPARATOR)
            .append(m02)
            .append(ROW_SEPARATOR)

            .append(m10)
            .append(ELEMENT_SEPARATOR)
            .append(m11)
            .append(ELEMENT_SEPARATOR)
            .append(m12)

            .append(MATRIX_END);

        return sb.toString();
    }","  public void test90()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createShear(0.0, 0.0);
      String string0 = affineTransformMatrix2D0.toString();
}"
4657,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test91()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation(Double.NEGATIVE_INFINITY);
      AffineTransformMatrix2D affineTransformMatrix2D1 = affineTransformMatrix2D0.scale(Double.NEGATIVE_INFINITY);
      boolean boolean0 = affineTransformMatrix2D1.equals(affineTransformMatrix2D0);
}"
4658,"    public AffineTransformMatrix2D rotate(final double angle) {
        return rotate(Rotation2D.of(angle));
    }","  public void test92()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(1880.7253994703294);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(1880.7253994703294);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      AffineTransformMatrix2D affineTransformMatrix2D1 = affineTransformMatrix2D0.rotate((Vector2D) vector2D_Unit0, rotation2D0);
}"
4659,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test93()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation(0.0);
      AffineTransformMatrix2D affineTransformMatrix2D1 = affineTransformMatrix2D0.premultiply(affineTransformMatrix2D0);
}"
4660,"    public static AffineTransformMatrix2D fromColumnVectors(final Vector2D u, final Vector2D v) {
        return fromColumnVectors(u, v, Vector2D.ZERO);
    }","  public void test94()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(1880.7253994703294);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = affineTransformMatrix2D0.applyVector((Vector2D) vector2D_Unit0);
      AffineTransformMatrix2D.fromColumnVectors((Vector2D) vector2D_Unit0, vector2D0);
}"
4661,"    public static AffineTransformMatrix2D fromColumnVectors(final Vector2D u, final Vector2D v) {
        return fromColumnVectors(u, v, Vector2D.ZERO);
    }","  public void test95()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(1880.7253994703294);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = affineTransformMatrix2D0.applyVector((Vector2D) vector2D_Unit0);
      AffineTransformMatrix2D.fromColumnVectors((Vector2D) vector2D_Unit0, vector2D0);
}"
4662,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof AffineTransformMatrix2D)) {
            return false;
        }

        final AffineTransformMatrix2D other = (AffineTransformMatrix2D) obj;

        return Double.compare(this.m00, other.m00) == 0 &&
                Double.compare(this.m01, other.m01) == 0 &&
                Double.compare(this.m02, other.m02) == 0 &&

                Double.compare(this.m10, other.m10) == 0 &&
                Double.compare(this.m11, other.m11) == 0 &&
                Double.compare(this.m12, other.m12) == 0;
    }","  public void test96()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(1880.7253994703294);
      AffineTransformMatrix2D affineTransformMatrix2D1 = AffineTransformMatrix2D.from(affineTransformMatrix2D0);
}"
4663,"    public AffineTransformMatrix2D rotate(final double angle) {
        return rotate(Rotation2D.of(angle));
    }","  public void test97()  throws Throwable  {
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale(1880.7253994703294);
      AffineTransformMatrix2D affineTransformMatrix2D1 = affineTransformMatrix2D0.rotate(1880.7253994703294);
}"
4664,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof PolarCoordinates) {
            final PolarCoordinates rhs = (PolarCoordinates) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(radius, rhs.radius) == 0 &&
                    Double.compare(azimuth, rhs.azimuth) == 0;
        }
        return false;
    }","  public void test0()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, 3.141592653589793);
      PolarCoordinates polarCoordinates1 = PolarCoordinates.of(3.141592653589793, Double.NEGATIVE_INFINITY);
      boolean boolean0 = polarCoordinates1.equals(polarCoordinates0);
}"
4665,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof PolarCoordinates) {
            final PolarCoordinates rhs = (PolarCoordinates) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(radius, rhs.radius) == 0 &&
                    Double.compare(azimuth, rhs.azimuth) == 0;
        }
        return false;
    }","  public void test1()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, 3.141592653589793);
      PolarCoordinates polarCoordinates1 = PolarCoordinates.of(3.141592653589793, Double.NEGATIVE_INFINITY);
      boolean boolean0 = polarCoordinates1.equals(polarCoordinates0);
}"
4666,"    public double getRadius() {
        return radius;
    }","  public void test2()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, 3.141592653589793);
      PolarCoordinates polarCoordinates1 = PolarCoordinates.of(3.141592653589793, Double.NEGATIVE_INFINITY);
      boolean boolean0 = polarCoordinates1.equals(polarCoordinates0);
}"
4667,"    public double getAzimuth() {
        return azimuth;
    }","  public void test3()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, 3.141592653589793);
      PolarCoordinates polarCoordinates1 = PolarCoordinates.of(3.141592653589793, Double.NEGATIVE_INFINITY);
      boolean boolean0 = polarCoordinates1.equals(polarCoordinates0);
}"
4668,"    public double getAzimuth() {
        return azimuth;
    }","  public void test4()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, 3.141592653589793);
      PolarCoordinates polarCoordinates1 = PolarCoordinates.of(3.141592653589793, Double.NEGATIVE_INFINITY);
      boolean boolean0 = polarCoordinates1.equals(polarCoordinates0);
}"
4669,"    public double getAzimuth() {
        return azimuth;
    }","  public void test5()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of((-1289.4), (-1289.4));
      PolarCoordinates polarCoordinates1 = PolarCoordinates.parse(""(1823.4869673238688, 3.9269908169872414)"");
      boolean boolean0 = polarCoordinates0.equals(polarCoordinates1);
}"
4670,"    public double getRadius() {
        return radius;
    }","  public void test6()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of((-1289.4), (-1289.4));
      PolarCoordinates polarCoordinates1 = PolarCoordinates.parse(""(1823.4869673238688, 3.9269908169872414)"");
      boolean boolean0 = polarCoordinates0.equals(polarCoordinates1);
}"
4671,"    public double getRadius() {
        return radius;
    }","  public void test7()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of((-1289.4), (-1289.4));
      PolarCoordinates polarCoordinates1 = PolarCoordinates.parse(""(1823.4869673238688, 3.9269908169872414)"");
      boolean boolean0 = polarCoordinates0.equals(polarCoordinates1);
}"
4672,"    public double getAzimuth() {
        return azimuth;
    }","  public void test8()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of((-1289.4), (-1289.4));
      PolarCoordinates polarCoordinates1 = PolarCoordinates.parse(""(1823.4869673238688, 3.9269908169872414)"");
      boolean boolean0 = polarCoordinates0.equals(polarCoordinates1);
}"
4673,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof PolarCoordinates) {
            final PolarCoordinates rhs = (PolarCoordinates) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(radius, rhs.radius) == 0 &&
                    Double.compare(azimuth, rhs.azimuth) == 0;
        }
        return false;
    }","  public void test9()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of((-1289.4), (-1289.4));
      PolarCoordinates polarCoordinates1 = PolarCoordinates.parse(""(1823.4869673238688, 3.9269908169872414)"");
      boolean boolean0 = polarCoordinates0.equals(polarCoordinates1);
}"
4674,"    public Vector2D toCartesian() {
        return toCartesian(radius, azimuth);
    }","  public void test10()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian((double) 2, Double.POSITIVE_INFINITY);
}"
4675,"    public Vector2D toCartesian() {
        return toCartesian(radius, azimuth);
    }","  public void test11()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian((double) 2, Double.POSITIVE_INFINITY);
}"
4676,"    public Vector2D toCartesian() {
        return toCartesian(radius, azimuth);
    }","  public void test12()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(Double.POSITIVE_INFINITY, 2382.2664856166);
}"
4677,"    public Vector2D toCartesian() {
        return toCartesian(radius, azimuth);
    }","  public void test13()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(Double.POSITIVE_INFINITY, 2382.2664856166);
}"
4678,"    public Vector2D toCartesian() {
        return toCartesian(radius, azimuth);
    }","  public void test14()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(0.0, 970.2538);
}"
4679,"    public Vector2D toCartesian() {
        return toCartesian(radius, azimuth);
    }","  public void test15()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(0.0, 970.2538);
}"
4680,"    public Vector2D toCartesian() {
        return toCartesian(radius, azimuth);
    }","  public void test16()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian((-675.512), 1140.0);
}"
4681,"    public Vector2D toCartesian() {
        return toCartesian(radius, azimuth);
    }","  public void test17()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian((-675.512), 1140.0);
}"
4682,"    public Vector2D toCartesian() {
        return toCartesian(radius, azimuth);
    }","  public void test18()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, Double.NaN);
      Vector2D vector2D0 = polarCoordinates0.toCartesian();
}"
4683,"    public Vector2D toCartesian() {
        return toCartesian(radius, azimuth);
    }","  public void test19()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, Double.NaN);
      Vector2D vector2D0 = polarCoordinates0.toCartesian();
}"
4684,"    public double getRadius() {
        return radius;
    }","  public void test20()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, Double.NaN);
      Vector2D vector2D0 = polarCoordinates0.toCartesian();
}"
4685,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof PolarCoordinates) {
            final PolarCoordinates rhs = (PolarCoordinates) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(radius, rhs.radius) == 0 &&
                    Double.compare(azimuth, rhs.azimuth) == 0;
        }
        return false;
    }","  public void test21()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(vector2D0);
      Vector2D vector2D1 = polarCoordinates0.toCartesian();
}"
4686,"    public Vector2D toCartesian() {
        return toCartesian(radius, azimuth);
    }","  public void test22()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(2, 2434.992);
      Vector2D vector2D0 = polarCoordinates0.toCartesian();
}"
4687,"    public Vector2D toCartesian() {
        return toCartesian(radius, azimuth);
    }","  public void test23()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(2, 2434.992);
      Vector2D vector2D0 = polarCoordinates0.toCartesian();
}"
4688,"    public Vector2D toCartesian() {
        return toCartesian(radius, azimuth);
    }","  public void test24()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-966.13), 0.0);
      Vector2D vector2D0 = polarCoordinates0.toCartesian();
}"
4689,"    public Vector2D toCartesian() {
        return toCartesian(radius, azimuth);
    }","  public void test25()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-966.13), 0.0);
      Vector2D vector2D0 = polarCoordinates0.toCartesian();
}"
4690,"    public double getAzimuth() {
        return azimuth;
    }","  public void test26()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.parse(""(NaN, NaN)"");
}"
4691,"    public double getAzimuth() {
        return azimuth;
    }","  public void test27()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.parse(""(0.0, 0.0)"");
}"
4692,"    public double getRadius() {
        return radius;
    }","  public void test28()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.parse(""(0.0, 0.0)"");
}"
4693,"    public double getRadius() {
        return radius;
    }","  public void test29()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.parse(""(3.141592653589793, -Infinity)"");
}"
4694,"    public double getAzimuth() {
        return azimuth;
    }","  public void test30()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.parse(""(3.141592653589793, -Infinity)"");
}"
4695,"    public double getAzimuth() {
        return azimuth;
    }","  public void test31()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(0.0, 1028.0);
}"
4696,"    public double getRadius() {
        return radius;
    }","  public void test32()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(0.0, 1028.0);
}"
4697,"    public static double normalizeAzimuth(final double azimuth) {
        if (Double.isFinite(azimuth)) {
            return Angle.Rad.WITHIN_0_AND_2PI.applyAsDouble(azimuth);
        }

        return azimuth;
    }","  public void test33()  throws Throwable  {
      double double0 = PolarCoordinates.normalizeAzimuth(0.0);
}"
4698,"    public double getRadius() {
        return radius;
    }","  public void test34()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(0.0, 0.0);
      double double0 = polarCoordinates0.getRadius();
}"
4699,"    public double getAzimuth() {
        return azimuth;
    }","  public void test35()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(0.0, 0.0);
      double double0 = polarCoordinates0.getRadius();
}"
4700,"    public double getAzimuth() {
        return azimuth;
    }","  public void test36()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.273390607896142E150, 0.0);
      double double0 = polarCoordinates0.getAzimuth();
}"
4701,"    public double getRadius() {
        return radius;
    }","  public void test37()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.273390607896142E150, 0.0);
      double double0 = polarCoordinates0.getAzimuth();
}"
4702,"    public double getAzimuth() {
        return azimuth;
    }","  public void test38()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of((-1156.628986137756), Double.NEGATIVE_INFINITY);
      double double0 = polarCoordinates0.getAzimuth();
}"
4703,"    public double getRadius() {
        return radius;
    }","  public void test39()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of((-1156.628986137756), Double.NEGATIVE_INFINITY);
      double double0 = polarCoordinates0.getAzimuth();
}"
4704,"    public double getRadius() {
        return radius;
    }","  public void test40()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(Double.POSITIVE_INFINITY, 6.283185307179586);
}"
4705,"    public double getAzimuth() {
        return azimuth;
    }","  public void test41()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(Double.POSITIVE_INFINITY, 6.283185307179586);
}"
4706,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof PolarCoordinates) {
            final PolarCoordinates rhs = (PolarCoordinates) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(radius, rhs.radius) == 0 &&
                    Double.compare(azimuth, rhs.azimuth) == 0;
        }
        return false;
    }","  public void test42()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(0.0, 0.0);
      Vector2D vector2D0 = polarCoordinates0.toCartesian();
      PolarCoordinates polarCoordinates1 = PolarCoordinates.fromCartesian(vector2D0);
}"
4707,"    public static PolarCoordinates parse(final String input) {
        return SimpleTupleFormat.getDefault().parse(input, PolarCoordinates::new);
    }","  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        PolarCoordinates.parse(""ZYZ"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \""ZYZ\"" at index 0: expected \""(\"" but found \""Z\""
         //
         verifyException(""org.apache.commons.geometry.core.internal.SimpleTupleFormat"", e);
      }
  }"
4708,"    public static PolarCoordinates parse(final String input) {
        return SimpleTupleFormat.getDefault().parse(input, PolarCoordinates::new);
    }","  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        PolarCoordinates.parse((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.internal.SimpleTupleFormat"", e);
      }
  }"
4709,"    public static PolarCoordinates fromCartesian(final double x, final double y) {
        final double azimuth = Math.atan2(y, x);
        final double radius = Math.hypot(x, y);

        return new PolarCoordinates(radius, azimuth);
    }","  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        PolarCoordinates.fromCartesian((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.PolarCoordinates"", e);
      }
  }"
4710,"    public static double normalizeAzimuth(final double azimuth) {
        if (Double.isFinite(azimuth)) {
            return Angle.Rad.WITHIN_0_AND_2PI.applyAsDouble(azimuth);
        }

        return azimuth;
    }","  public void test46()  throws Throwable  {
      double double0 = PolarCoordinates.normalizeAzimuth((-675.512));
}"
4711,"    public static double normalizeAzimuth(final double azimuth) {
        if (Double.isFinite(azimuth)) {
            return Angle.Rad.WITHIN_0_AND_2PI.applyAsDouble(azimuth);
        }

        return azimuth;
    }","  public void test47()  throws Throwable  {
      double double0 = PolarCoordinates.normalizeAzimuth(Double.NEGATIVE_INFINITY);
}"
4712,"    public boolean isNaN() {
        return Double.isNaN(radius) || Double.isNaN(azimuth);
    }","  public void test48()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(Double.NaN, Double.NaN);
      boolean boolean0 = polarCoordinates0.isNaN();
}"
4713,"    public boolean isNaN() {
        return Double.isNaN(radius) || Double.isNaN(azimuth);
    }","  public void test49()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, Double.NaN);
      boolean boolean0 = polarCoordinates0.isNaN();
}"
4714,"    public double getRadius() {
        return radius;
    }","  public void test50()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, Double.NaN);
      boolean boolean0 = polarCoordinates0.isNaN();
}"
4715,"    public double getAzimuth() {
        return azimuth;
    }","  public void test51()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(507.76, 507.76);
      PolarCoordinates polarCoordinates1 = PolarCoordinates.fromCartesian(507.76, 507.76);
      boolean boolean0 = polarCoordinates0.equals(polarCoordinates1);
}"
4716,"    public double getRadius() {
        return radius;
    }","  public void test52()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(507.76, 507.76);
      PolarCoordinates polarCoordinates1 = PolarCoordinates.fromCartesian(507.76, 507.76);
      boolean boolean0 = polarCoordinates0.equals(polarCoordinates1);
}"
4717,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof PolarCoordinates) {
            final PolarCoordinates rhs = (PolarCoordinates) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(radius, rhs.radius) == 0 &&
                    Double.compare(azimuth, rhs.azimuth) == 0;
        }
        return false;
    }","  public void test53()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(507.76, 507.76);
      PolarCoordinates polarCoordinates1 = PolarCoordinates.fromCartesian(507.76, 507.76);
      boolean boolean0 = polarCoordinates0.equals(polarCoordinates1);
}"
4718,"    public boolean isNaN() {
        return Double.isNaN(radius) || Double.isNaN(azimuth);
    }","  public void test54()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(507.76, 507.76);
      PolarCoordinates polarCoordinates1 = PolarCoordinates.fromCartesian(507.76, 507.76);
      boolean boolean0 = polarCoordinates0.equals(polarCoordinates1);
}"
4719,"    public double getRadius() {
        return radius;
    }","  public void test55()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, 3.141592653589793);
      PolarCoordinates polarCoordinates1 = PolarCoordinates.of(3.141592653589793, Double.NaN);
      boolean boolean0 = polarCoordinates1.equals(polarCoordinates0);
}"
4720,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof PolarCoordinates) {
            final PolarCoordinates rhs = (PolarCoordinates) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(radius, rhs.radius) == 0 &&
                    Double.compare(azimuth, rhs.azimuth) == 0;
        }
        return false;
    }","  public void test56()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, 3.141592653589793);
      PolarCoordinates polarCoordinates1 = PolarCoordinates.of(3.141592653589793, Double.NaN);
      boolean boolean0 = polarCoordinates1.equals(polarCoordinates0);
}"
4721,"    public double getAzimuth() {
        return azimuth;
    }","  public void test57()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, 3.141592653589793);
      PolarCoordinates polarCoordinates1 = PolarCoordinates.of(3.141592653589793, Double.NaN);
      boolean boolean0 = polarCoordinates1.equals(polarCoordinates0);
}"
4722,"    public boolean isNaN() {
        return Double.isNaN(radius) || Double.isNaN(azimuth);
    }","  public void test58()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, 3.141592653589793);
      PolarCoordinates polarCoordinates1 = PolarCoordinates.of(3.141592653589793, Double.NaN);
      boolean boolean0 = polarCoordinates1.equals(polarCoordinates0);
}"
4723,"    public boolean isNaN() {
        return Double.isNaN(radius) || Double.isNaN(azimuth);
    }","  public void test59()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(Double.NaN, Double.NaN);
      PolarCoordinates polarCoordinates1 = PolarCoordinates.of(Double.NaN, Double.NaN);
      polarCoordinates0.equals(polarCoordinates1);
}"
4724,"    public boolean isNaN() {
        return Double.isNaN(radius) || Double.isNaN(azimuth);
    }","  public void test60()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(Double.NaN, Double.NaN);
      PolarCoordinates polarCoordinates1 = PolarCoordinates.of(Double.NaN, Double.NaN);
      polarCoordinates0.equals(polarCoordinates1);
}"
4725,"    public double getRadius() {
        return radius;
    }","  public void test61()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of((-1239.4619244034), (-1239.4619244034));
      boolean boolean0 = polarCoordinates0.equals(""(1239.4619244034, 1.4671737645683152)"");
}"
4726,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof PolarCoordinates) {
            final PolarCoordinates rhs = (PolarCoordinates) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(radius, rhs.radius) == 0 &&
                    Double.compare(azimuth, rhs.azimuth) == 0;
        }
        return false;
    }","  public void test62()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of((-1239.4619244034), (-1239.4619244034));
      boolean boolean0 = polarCoordinates0.equals(""(1239.4619244034, 1.4671737645683152)"");
}"
4727,"    public double getAzimuth() {
        return azimuth;
    }","  public void test63()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of((-1239.4619244034), (-1239.4619244034));
      boolean boolean0 = polarCoordinates0.equals(""(1239.4619244034, 1.4671737645683152)"");
}"
4728,"    public double getRadius() {
        return radius;
    }","  public void test64()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(507.76, 507.76);
      boolean boolean0 = polarCoordinates0.equals(polarCoordinates0);
}"
4729,"    public double getAzimuth() {
        return azimuth;
    }","  public void test65()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(507.76, 507.76);
      boolean boolean0 = polarCoordinates0.equals(polarCoordinates0);
}"
4730,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof PolarCoordinates) {
            final PolarCoordinates rhs = (PolarCoordinates) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(radius, rhs.radius) == 0 &&
                    Double.compare(azimuth, rhs.azimuth) == 0;
        }
        return false;
    }","  public void test66()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(507.76, 507.76);
      boolean boolean0 = polarCoordinates0.equals(polarCoordinates0);
}"
4731,"    public boolean isInfinite() {
        return !isNaN() && (Double.isInfinite(radius) || Double.isInfinite(azimuth));
    }","  public void test67()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, 3.141592653589793);
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      PolarCoordinates polarCoordinates1 = PolarCoordinates.fromCartesian(vector2D0);
      boolean boolean0 = polarCoordinates1.equals(polarCoordinates0);
}"
4732,"    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof PolarCoordinates) {
            final PolarCoordinates rhs = (PolarCoordinates) other;
            if (rhs.isNaN()) {
                return this.isNaN();
            }

            return Double.compare(radius, rhs.radius) == 0 &&
                    Double.compare(azimuth, rhs.azimuth) == 0;
        }
        return false;
    }","  public void test68()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, 3.141592653589793);
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      PolarCoordinates polarCoordinates1 = PolarCoordinates.fromCartesian(vector2D0);
      boolean boolean0 = polarCoordinates1.equals(polarCoordinates0);
}"
4733,"    public double getRadius() {
        return radius;
    }","  public void test69()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, 3.141592653589793);
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      PolarCoordinates polarCoordinates1 = PolarCoordinates.fromCartesian(vector2D0);
      boolean boolean0 = polarCoordinates1.equals(polarCoordinates0);
}"
4734,"    public double getAzimuth() {
        return azimuth;
    }","  public void test70()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, 3.141592653589793);
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      PolarCoordinates polarCoordinates1 = PolarCoordinates.fromCartesian(vector2D0);
      boolean boolean0 = polarCoordinates1.equals(polarCoordinates0);
}"
4735,"    public double getAzimuth() {
        return azimuth;
    }","  public void test71()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, 3.141592653589793);
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      PolarCoordinates polarCoordinates1 = PolarCoordinates.fromCartesian(vector2D0);
      boolean boolean0 = polarCoordinates1.equals(polarCoordinates0);
}"
4736,"    public double getAzimuth() {
        return azimuth;
    }","  public void test72()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, 3.141592653589793);
      polarCoordinates0.hashCode();
}"
4737,"    public boolean isNaN() {
        return Double.isNaN(radius) || Double.isNaN(azimuth);
    }","  public void test73()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, 3.141592653589793);
      polarCoordinates0.hashCode();
}"
4738,"    public double getRadius() {
        return radius;
    }","  public void test74()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, 3.141592653589793);
      polarCoordinates0.hashCode();
}"
4739,"    public double getRadius() {
        return radius;
    }","  public void test75()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, Double.NaN);
      boolean boolean0 = polarCoordinates0.isFinite();
}"
4740,"    public boolean isFinite() {
        return Double.isFinite(radius) && Double.isFinite(azimuth);
    }","  public void test76()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, Double.NaN);
      boolean boolean0 = polarCoordinates0.isFinite();
}"
4741,"    public boolean isFinite() {
        return Double.isFinite(radius) && Double.isFinite(azimuth);
    }","  public void test77()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(507.76, 507.76);
      boolean boolean0 = polarCoordinates0.isFinite();
}"
4742,"    public double getAzimuth() {
        return azimuth;
    }","  public void test78()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(507.76, 507.76);
      boolean boolean0 = polarCoordinates0.isFinite();
}"
4743,"    public double getRadius() {
        return radius;
    }","  public void test79()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(507.76, 507.76);
      boolean boolean0 = polarCoordinates0.isFinite();
}"
4744,"    public boolean isFinite() {
        return Double.isFinite(radius) && Double.isFinite(azimuth);
    }","  public void test80()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(vector2D0);
      boolean boolean0 = polarCoordinates0.isFinite();
}"
4745,"    public double getRadius() {
        return radius;
    }","  public void test81()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, Double.NEGATIVE_INFINITY);
      boolean boolean0 = polarCoordinates0.isInfinite();
}"
4746,"    public boolean isInfinite() {
        return !isNaN() && (Double.isInfinite(radius) || Double.isInfinite(azimuth));
    }","  public void test82()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, Double.NEGATIVE_INFINITY);
      boolean boolean0 = polarCoordinates0.isInfinite();
}"
4747,"    public double getAzimuth() {
        return azimuth;
    }","  public void test83()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, Double.NEGATIVE_INFINITY);
      boolean boolean0 = polarCoordinates0.isInfinite();
}"
4748,"    public boolean isInfinite() {
        return !isNaN() && (Double.isInfinite(radius) || Double.isInfinite(azimuth));
    }","  public void test84()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(vector2D0);
      boolean boolean0 = polarCoordinates0.isInfinite();
}"
4749,"    public double getAzimuth() {
        return azimuth;
    }","  public void test85()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(vector2D0);
      boolean boolean0 = polarCoordinates0.isInfinite();
}"
4750,"    public double getRadius() {
        return radius;
    }","  public void test86()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(vector2D0);
      boolean boolean0 = polarCoordinates0.isInfinite();
}"
4751,"    public boolean isInfinite() {
        return !isNaN() && (Double.isInfinite(radius) || Double.isInfinite(azimuth));
    }","  public void test87()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, 3.141592653589793);
      boolean boolean0 = polarCoordinates0.isInfinite();
}"
4752,"    public boolean isNaN() {
        return Double.isNaN(radius) || Double.isNaN(azimuth);
    }","  public void test88()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, 3.141592653589793);
      boolean boolean0 = polarCoordinates0.isInfinite();
}"
4753,"    public double getRadius() {
        return radius;
    }","  public void test89()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, 3.141592653589793);
      boolean boolean0 = polarCoordinates0.isInfinite();
}"
4754,"    public double getAzimuth() {
        return azimuth;
    }","  public void test90()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, 3.141592653589793);
      boolean boolean0 = polarCoordinates0.isInfinite();
}"
4755,"    public boolean isNaN() {
        return Double.isNaN(radius) || Double.isNaN(azimuth);
    }","  public void test91()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, Double.NaN);
      polarCoordinates0.hashCode();
}"
4756,"    public double getRadius() {
        return radius;
    }","  public void test92()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(3.141592653589793, Double.NaN);
      polarCoordinates0.hashCode();
}"
4757,"    public double getAzimuth() {
        return azimuth;
    }","  public void test93()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(507.76, 507.76);
      boolean boolean0 = polarCoordinates0.isNaN();
}"
4758,"    public double getRadius() {
        return radius;
    }","  public void test94()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(507.76, 507.76);
      boolean boolean0 = polarCoordinates0.isNaN();
}"
4759,"    public boolean isNaN() {
        return Double.isNaN(radius) || Double.isNaN(azimuth);
    }","  public void test95()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(507.76, 507.76);
      boolean boolean0 = polarCoordinates0.isNaN();
}"
4760,"    public boolean isInfinite() {
        return !isNaN() && (Double.isInfinite(radius) || Double.isInfinite(azimuth));
    }","  public void test96()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.141592653589793), Double.NaN);
      boolean boolean0 = polarCoordinates0.isInfinite();
}"
4761,"    public double getRadius() {
        return radius;
    }","  public void test97()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.141592653589793), Double.NaN);
      boolean boolean0 = polarCoordinates0.isInfinite();
}"
4762,"    public double getAzimuth() {
        return azimuth;
    }","  public void test98()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.141592653589793), Double.NaN);
      boolean boolean0 = polarCoordinates0.isInfinite();
}"
4763,"    public boolean isNaN() {
        return Double.isNaN(radius) || Double.isNaN(azimuth);
    }","  public void test99()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.141592653589793), Double.NaN);
      boolean boolean0 = polarCoordinates0.isInfinite();
}"
4764,"    public String toString() {
        return SimpleTupleFormat.getDefault().format(radius, azimuth);
    }","  public void test100()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(507.76, 507.76);
      String string0 = polarCoordinates0.toString();
}"
4765,"    public double getAzimuth() {
        return azimuth;
    }","  public void test101()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of((-1.0), (-1.0));
      double double0 = polarCoordinates0.getRadius();
}"
4766,"    public double getRadius() {
        return radius;
    }","  public void test102()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of((-1.0), (-1.0));
      double double0 = polarCoordinates0.getRadius();
}"
4767,"    public double getAzimuth() {
        return azimuth;
    }","  public void test103()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-2286.23116), (-1618.1624944635));
      double double0 = polarCoordinates0.getAzimuth();
}"
4768,"    public double getRadius() {
        return radius;
    }","  public void test104()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-2286.23116), (-1618.1624944635));
      double double0 = polarCoordinates0.getAzimuth();
}"
4769,"    public double getAzimuth() {
        return azimuth;
    }","  public void test105()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(507.76, (-1198.40785599962));
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(vector2D0);
}"
4770,"    public double getRadius() {
        return radius;
    }","  public void test106()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(507.76, (-1198.40785599962));
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(vector2D0);
}"
4771,"    public double getAzimuth() {
        return azimuth;
    }","  public void test107()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(507.76, 507.76);
      int int0 = polarCoordinates0.getDimension();
}"
4772,"    public double getRadius() {
        return radius;
    }","  public void test108()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(507.76, 507.76);
      int int0 = polarCoordinates0.getDimension();
}"
4773,"    public int getDimension() {
        return 2;
    }","  public void test109()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(507.76, 507.76);
      int int0 = polarCoordinates0.getDimension();
}"
4774,"    public Split<LineConvexSubset> split(final Hyperplane<Vector2D> splitter) {
        final Line thisLine = getLine();
        final Line splitterLine = (Line) splitter;

        final Vector2D intersection = splitterLine.intersection(thisLine);
        if (intersection == null) {
            return getNonIntersectingSplitResult(splitterLine, this);
        }
        return splitOnIntersection(splitterLine, intersection);
    }","  public void test0()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-1701)).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(true, false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-1701), precision_DoubleEquivalence0);
      Segment segment0 = line0.segment((double) (-1701), (double) (-1701));
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation(0.4104912345710681, 0.4104912345710681);
      Line line1 = line0.transform(affineTransformMatrix2D0);
      Split<LineConvexSubset> split0 = segment0.split(line1);
}"
4775,"    public Split<LineConvexSubset> split(final Hyperplane<Vector2D> splitter) {
        final Line thisLine = getLine();
        final Line splitterLine = (Line) splitter;

        final Vector2D intersection = splitterLine.intersection(thisLine);
        if (intersection == null) {
            return getNonIntersectingSplitResult(splitterLine, this);
        }
        return splitOnIntersection(splitterLine, intersection);
    }","  public void test1()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-1658), (-1658)).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      Line line0 = new Line(vector2D_Unit0, (-99.0), precision_DoubleEquivalence0);
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = segment0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence1);
      Split<LineConvexSubset> split0 = segment0.split(line1);
}"
4776,"    public abstract double getSubspaceStart();

    /** Get the end point for the subset.
     * @return the end point for the subset, or null if no end point exists.
     */
    public abstract Vector2D getEndPoint();

    /** Get the 1D end location of the subset or {@link Double#POSITIVE_INFINITY}","  public void test2()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = segment0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence1);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation(1843.571699);
      ReverseRay reverseRay0 = line1.reverseRayTo((Vector2D) vector2D_Unit0);
      LineConvexSubset lineConvexSubset0 = reverseRay0.transform(affineTransformMatrix2D0);
}"
4777,"    public abstract double getSubspaceStart();

    /** Get the end point for the subset.
     * @return the end point for the subset, or null if no end point exists.
     */
    public abstract Vector2D getEndPoint();

    /** Get the 1D end location of the subset or {@link Double#POSITIVE_INFINITY}","  public void test3()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(line0).abscissa(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      double double0 = segment0.getSubspaceStart();
}"
4778,"    public abstract double getSubspaceStart();

    /** Get the end point for the subset.
     * @return the end point for the subset, or null if no end point exists.
     */
    public abstract Vector2D getEndPoint();

    /** Get the 1D end location of the subset or {@link Double#POSITIVE_INFINITY}","  public void test4()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Segment segment0 = line0.segment((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      double double0 = segment0.getSubspaceStart();
}"
4779,"    public abstract double getSubspaceStart();

    /** Get the end point for the subset.
     * @return the end point for the subset, or null if no end point exists.
     */
    public abstract Vector2D getEndPoint();

    /** Get the 1D end location of the subset or {@link Double#POSITIVE_INFINITY}","  public void test5()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      Ray ray0 = new Ray(line0, vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = ray0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, (-2479.477), precision_DoubleEquivalence1);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line1);
      double double0 = lineSpanningSubset0.getSubspaceStart();
}"
4780,"    public Interval getSubspaceRegion() {
        final double start = getSubspaceStart();
        final double end = getSubspaceEnd();

        return Interval.of(start, end, getPrecision());
    }","  public void test6()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-99.0), precision_DoubleEquivalence0);
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      Interval interval0 = segment0.getSubspaceRegion();
}"
4781,"    public abstract double getSubspaceEnd();

    /** {@inheritDoc}","  public void test7()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(line0).abscissa(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      double double0 = segment0.getSubspaceEnd();
}"
4782,"    public abstract double getSubspaceEnd();

    /** {@inheritDoc}","  public void test8()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-598.997356651), (-598.997356651));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-598.997356651), precision_DoubleEquivalence0);
      Ray ray0 = new Ray(line0, vector2D_Unit0);
      double double0 = ray0.getSubspaceEnd();
}"
4783,"    public abstract double getSubspaceEnd();

    /** {@inheritDoc}","  public void test9()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 1371.34089052, precision_DoubleEquivalence1);
      Ray ray0 = line1.rayFrom((Vector2D) vector2D_Unit0);
      LineConvexSubset lineConvexSubset0 = ray0.reverse();
      double double0 = lineConvexSubset0.getSubspaceEnd();
}"
4784,"    public abstract Vector2D getStartPoint();

    /** Get the 1D start location of the subset or {@link Double#NEGATIVE_INFINITY}","  public void test10()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1.0), precision_DoubleEquivalence0);
      LineConvexSubset lineConvexSubset0 = line0.span();
      Vector2D vector2D0 = lineConvexSubset0.getStartPoint();
}"
4785,"    public abstract Vector2D getStartPoint();

    /** Get the 1D start location of the subset or {@link Double#NEGATIVE_INFINITY}","  public void test11()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Segment segment0 = line0.segment((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      Vector2D vector2D0 = segment0.getStartPoint();
}"
4786,"    public abstract Vector2D getStartPoint();

    /** Get the 1D start location of the subset or {@link Double#NEGATIVE_INFINITY}","  public void test12()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence1);
      Ray ray0 = new Ray(line1, vector2D_Unit0);
      Vector2D vector2D0 = ray0.getStartPoint();
}"
4787,"    public abstract Vector2D getStartPoint();

    /** Get the 1D start location of the subset or {@link Double#NEGATIVE_INFINITY}","  public void test13()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 1371.34089052, precision_DoubleEquivalence1);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation((Vector2D) vector2D_Unit0, 466.911202);
      Line line2 = line1.transform(affineTransformMatrix2D0);
      Ray ray0 = line2.rayFrom((Vector2D) vector2D_Unit0);
      Vector2D vector2D0 = ray0.getStartPoint();
}"
4788,"    public abstract Vector2D getStartPoint();

    /** Get the 1D start location of the subset or {@link Double#NEGATIVE_INFINITY}","  public void test14()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 1371.34089052, precision_DoubleEquivalence1);
      Ray ray0 = line1.rayFrom((Vector2D) vector2D_Unit0);
      Vector2D vector2D0 = ray0.getStartPoint();
}"
4789,"    public boolean isEmpty() {
        return false;
    }","  public void test15()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-99.0), precision_DoubleEquivalence0);
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      Interval interval0 = segment0.getInterval();
}"
4790,"    public Interval getInterval() {
        return getSubspaceRegion();
    }","  public void test16()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Interval interval0 = lineSpanningSubset0.getInterval();
}"
4791,"    public abstract Vector2D getEndPoint();

    /** Get the 1D end location of the subset or {@link Double#POSITIVE_INFINITY}","  public void test17()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1371.34089052, precision_DoubleEquivalence0);
      Ray ray0 = line0.rayFrom((-422.1));
      Vector2D vector2D0 = ray0.getEndPoint();
}"
4792,"    public abstract Vector2D getEndPoint();

    /** Get the 1D end location of the subset or {@link Double#POSITIVE_INFINITY}","  public void test18()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 1843.571699, precision_DoubleEquivalence0);
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = segment0.getEndPoint();
}"
4793,"    public abstract Vector2D getEndPoint();

    /** Get the 1D end location of the subset or {@link Double#POSITIVE_INFINITY}","  public void test19()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      ReverseRay reverseRay0 = line0.reverseRayTo((Vector2D) vector2D_Unit0);
      Vector2D vector2D0 = reverseRay0.getEndPoint();
}"
4794,"    public abstract Vector2D getEndPoint();

    /** Get the 1D end location of the subset or {@link Double#POSITIVE_INFINITY}","  public void test20()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 6.517785908442119, precision_DoubleEquivalence0);
      ReverseRay reverseRay0 = line0.reverseRayTo((-99.0));
      Vector2D vector2D0 = reverseRay0.getEndPoint();
}"
4795,"    public Vector2D closest(final Vector2D pt) {
        final Line line = getLine();
        final double abscissa = line.abscissa(pt);

        return line.toSpace(closestAbscissa(abscissa));
    }","  public void test21()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(line0).abscissa(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      doReturn((Vector2D) null).when(line0).toSpace(anyDouble());
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Vector2D vector2D0 = lineSpanningSubset0.closest((Vector2D) vector2D_Unit0);
}"
4796,"    public Vector2D closest(final Vector2D pt) {
        final Line line = getLine();
        final double abscissa = line.abscissa(pt);

        return line.toSpace(closestAbscissa(abscissa));
    }","  public void test22()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 1371.34089052, precision_DoubleEquivalence1);
      Ray ray0 = line1.rayFrom((Vector2D) vector2D_Unit0);
      LineConvexSubset lineConvexSubset0 = ray0.reverse();
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D vector2D1 = lineConvexSubset0.closest(vector2D0);
}"
4797,"    public Vector2D closest(final Vector2D pt) {
        final Line line = getLine();
        final double abscissa = line.abscissa(pt);

        return line.toSpace(closestAbscissa(abscissa));
    }","  public void test23()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn((-1702.0169)).when(line0).abscissa(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      doReturn(vector2D_Unit0).when(line0).toSpace(anyDouble());
      Line line1 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(line0).when(line1).reverse();
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line1);
      LineSpanningSubset lineSpanningSubset1 = lineSpanningSubset0.reverse();
      Vector2D vector2D0 = lineSpanningSubset1.closest((Vector2D) vector2D_Unit0);
}"
4798,"    public Vector2D closest(final Vector2D pt) {
        final Line line = getLine();
        final double abscissa = line.abscissa(pt);

        return line.toSpace(closestAbscissa(abscissa));
    }","  public void test24()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = lineSpanningSubset0.getPrecision();
      Line line1 = new Line(vector2D_Unit0, 1371.34089052, precision_DoubleEquivalence1);
      Line line2 = line1.reverse();
      Ray ray0 = line2.rayFrom((Vector2D) vector2D_Unit0);
      LineConvexSubset lineConvexSubset0 = ray0.reverse();
      Vector2D vector2D0 = vector2D_Unit0.reject((Vector2D) vector2D_Unit0);
      Vector2D vector2D1 = lineConvexSubset0.closest(vector2D0);
}"
4799,"    public abstract LineConvexSubset transform(Transform<Vector2D> transform);

    /** {@inheritDoc}","  public void test25()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Ray ray0 = new Ray((Line) null, vector2D_Unit0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.fromColumnVectors((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0);
      // Undeclared exception!
      try { 
        ray0.transform(affineTransformMatrix2D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Ray"", e);
      }
  }"
4800,"    public abstract LineConvexSubset transform(Transform<Vector2D> transform);

    /** {@inheritDoc}","  public void test26()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createTranslation(0.0, 0.0);
      Ray ray0 = line0.rayFrom((Vector2D) vector2D_Unit0);
      // Undeclared exception!
      try { 
        ray0.transform(affineTransformMatrix2D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Line direction cannot be zero
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.Lines"", e);
      }
  }"
4801,"    public Split<LineConvexSubset> split(final Hyperplane<Vector2D> splitter) {
        final Line thisLine = getLine();
        final Line splitterLine = (Line) splitter;

        final Vector2D intersection = splitterLine.intersection(thisLine);
        if (intersection == null) {
            return getNonIntersectingSplitResult(splitterLine, this);
        }
        return splitOnIntersection(splitterLine, intersection);
    }","  public void test27()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-1709.3468223), 136.0614705733);
      Segment segment0 = new Segment((Line) null, vector2D_Unit0, vector2D_Unit0);
      // Undeclared exception!
      try { 
        segment0.split((Hyperplane<Vector2D>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.LineConvexSubset"", e);
      }
  }"
4802,"    public abstract LineConvexSubset reverse();

    /** Get the closest value in the subspace region to the given abscissa.
     * @param abscissa input abscissa
     * @return the closest value in the subspace region to the given abscissa
     */
    abstract double closestAbscissa(double abscissa);

    /** Split this instance using the given splitter line and intersection point.
     * @param splitter splitter line
     * @param intersection intersection point between the splitter line and the line
     *      for this instance
     * @return the result of splitting this instance with the given splitter line and intersection
     *      point
     */
    abstract Split<LineConvexSubset> splitOnIntersection(Line splitter, Vector2D intersection);
}
","  public void test28()  throws Throwable  {
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset((Line) null);
      // Undeclared exception!
      try { 
        lineSpanningSubset0.reverse();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.LineSpanningSubset"", e);
      }
  }"
4803,"    public Interval getSubspaceRegion() {
        final double start = getSubspaceStart();
        final double end = getSubspaceEnd();

        return Interval.of(start, end, getPrecision());
    }","  public void test29()  throws Throwable  {
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset((Line) null);
      // Undeclared exception!
      try { 
        lineSpanningSubset0.getSubspaceRegion();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.LineSubset"", e);
      }
  }"
4804,"    public Interval getInterval() {
        return getSubspaceRegion();
    }","  public void test30()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0);
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = segment0.getPrecision();
      Line line1 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence1).when(line1).getPrecision();
      doReturn(Double.NaN, Double.NaN).when(line1).abscissa(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      Segment segment1 = new Segment(line1, vector2D_Unit0, vector2D_Unit0);
      // Undeclared exception!
      try { 
        segment1.getInterval();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval values: [\uFFFD, \uFFFD]
         //
         verifyException(""org.apache.commons.geometry.euclidean.oned.Interval"", e);
      }
  }"
4805,"    public Vector2D closest(final Vector2D pt) {
        final Line line = getLine();
        final double abscissa = line.abscissa(pt);

        return line.toSpace(closestAbscissa(abscissa));
    }","  public void test31()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn((Line) null).when(line0).reverse();
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      LineSpanningSubset lineSpanningSubset1 = lineSpanningSubset0.reverse();
      // Undeclared exception!
      try { 
        lineSpanningSubset1.closest((Vector2D) vector2D_Unit0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.LineConvexSubset"", e);
      }
  }"
4806,"    public Interval getSubspaceRegion() {
        final double start = getSubspaceStart();
        final double end = getSubspaceEnd();

        return Interval.of(start, end, getPrecision());
    }","  public void test32()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(precision_DoubleEquivalence0).when(line0).getPrecision();
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      Interval interval0 = lineSpanningSubset0.getSubspaceRegion();
}"
4807,"    public Interval getInterval() {
        return getSubspaceRegion();
    }","  public void test33()  throws Throwable  {
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset((Line) null);
      // Undeclared exception!
      try { 
        lineSpanningSubset0.getInterval();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.LineSubset"", e);
      }
  }"
4808,"    public boolean isEmpty() {
        return false;
    }","  public void test34()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0);
      boolean boolean0 = segment0.isEmpty();
}"
4809,"    public List<LineConvexSubset> toConvex() {
        return Collections.singletonList(this);
    }","  public void test35()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line line0 = new Line(vector2D_Unit0, (-1701), precision_DoubleEquivalence0);
      LineSpanningSubset lineSpanningSubset0 = new LineSpanningSubset(line0);
      List<LineConvexSubset> list0 = lineSpanningSubset0.toConvex();
}"
4810,,"  public void test0()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset1 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      int int0 = abstractLinePathConnector_ConnectableLineSubset1.compareTo(abstractLinePathConnector_ConnectableLineSubset0);
}"
4811,,"  public void test1()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset(vector2D0);
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset1 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      int int0 = abstractLinePathConnector_ConnectableLineSubset1.compareTo(abstractLinePathConnector_ConnectableLineSubset0);
}"
4812,,"  public void test2()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(1409.47173653, (-2130.72507822505));
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset(vector2D_Unit0);
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset1 = new AbstractLinePathConnector.ConnectableLineSubset(vector2D_Unit0);
      // Undeclared exception!
      try { 
        abstractLinePathConnector_ConnectableLineSubset1.shouldContinueConnectionSearch(abstractLinePathConnector_ConnectableLineSubset0, false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.AbstractLinePathConnector$ConnectableLineSubset"", e);
      }
  }"
4813,,"  public void test3()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset1 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
}"
4814,,"  public void test4()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset1 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      boolean boolean0 = abstractLinePathConnector_ConnectableLineSubset0.shouldContinueConnectionSearch(abstractLinePathConnector_ConnectableLineSubset1, true);
}"
4815,,"  public void test5()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset(vector2D_Unit0);
      boolean boolean0 = abstractLinePathConnector_ConnectableLineSubset0.hasStart();
}"
4816,,"  public void test6()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      boolean boolean0 = abstractLinePathConnector_ConnectableLineSubset0.hasEnd();
}"
4817,,"  public void test7()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      // Undeclared exception!
      try { 
        abstractLinePathConnector_ConnectableLineSubset0.canConnectTo(abstractLinePathConnector_ConnectableLineSubset0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.AbstractLinePathConnector$ConnectableLineSubset"", e);
      }
  }"
4818,"    public List<LinePath> connectAll(final Iterable<LineConvexSubset> subsets) {
        add(subsets);
        return connectAll();
    }","  public void test8()  throws Throwable  {
      InteriorAngleLinePathConnector.Maximize interiorAngleLinePathConnector_Maximize0 = new InteriorAngleLinePathConnector.Maximize();
      List<LinePath> list0 = interiorAngleLinePathConnector_Maximize0.connectAll();
}"
4819,"    public void add(final LineConvexSubset subset) {
        addPathElement(new ConnectableLineSubset(subset));
    }","  public void test9()  throws Throwable  {
      InteriorAngleLinePathConnector.Maximize interiorAngleLinePathConnector_Maximize0 = new InteriorAngleLinePathConnector.Maximize();
      Class<LineConvexSubset> class0 = LineConvexSubset.class;
      ServiceLoader<LineConvexSubset> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      interiorAngleLinePathConnector_Maximize0.add((Iterable<? extends LineConvexSubset>) serviceLoader0);
}"
4820,"    public void add(final LineConvexSubset subset) {
        addPathElement(new ConnectableLineSubset(subset));
    }","  public void test10()  throws Throwable  {
      InteriorAngleLinePathConnector.Maximize interiorAngleLinePathConnector_Maximize0 = new InteriorAngleLinePathConnector.Maximize();
      TreeSet<Segment> treeSet0 = new TreeSet<Segment>();
      LinkedHashSet<Segment> linkedHashSet0 = new LinkedHashSet<Segment>(treeSet0);
      linkedHashSet0.add((Segment) null);
      // Undeclared exception!
      try { 
        interiorAngleLinePathConnector_Maximize0.add((Iterable<? extends LineConvexSubset>) linkedHashSet0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.AbstractLinePathConnector$ConnectableLineSubset"", e);
      }
  }"
4821,,"  public void test11()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      LineConvexSubset lineConvexSubset0 = abstractLinePathConnector_ConnectableLineSubset0.getLineSubset();
}"
4822,,"  public void test12()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset1 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      boolean boolean0 = abstractLinePathConnector_ConnectableLineSubset0.equals(abstractLinePathConnector_ConnectableLineSubset1);
}"
4823,,"  public void test13()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset(vector2D_Unit0);
      boolean boolean0 = abstractLinePathConnector_ConnectableLineSubset0.equals(vector2D_Unit0);
}"
4824,,"  public void test14()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      boolean boolean0 = abstractLinePathConnector_ConnectableLineSubset0.equals((Object) null);
}"
4825,,"  public void test15()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      boolean boolean0 = abstractLinePathConnector_ConnectableLineSubset0.equals(abstractLinePathConnector_ConnectableLineSubset0);
}"
4826,,"  public void test16()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset(vector2D0);
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset1 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      boolean boolean0 = abstractLinePathConnector_ConnectableLineSubset0.equals(abstractLinePathConnector_ConnectableLineSubset1);
}"
4827,,"  public void test17()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset(vector2D0);
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset1 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      int int0 = abstractLinePathConnector_ConnectableLineSubset0.compareTo(abstractLinePathConnector_ConnectableLineSubset1);
}"
4828,,"  public void test18()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      boolean boolean0 = abstractLinePathConnector_ConnectableLineSubset0.hasZeroSize();
}"
4829,,"  public void test19()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      boolean boolean0 = abstractLinePathConnector_ConnectableLineSubset0.endPointsEq(abstractLinePathConnector_ConnectableLineSubset0);
}"
4830,"    public void connect(final Iterable<? extends LineConvexSubset> subsets) {
        final List<ConnectableLineSubset> newEntries = new ArrayList<>();

        for (final LineConvexSubset subset : subsets) {
            newEntries.add(new ConnectableLineSubset(subset));
        }

        connectPathElements(newEntries);
    }","  public void test20()  throws Throwable  {
      InteriorAngleLinePathConnector.Maximize interiorAngleLinePathConnector_Maximize0 = new InteriorAngleLinePathConnector.Maximize();
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      stack0.add((LineConvexSubset) null);
      // Undeclared exception!
      try { 
        interiorAngleLinePathConnector_Maximize0.connect(stack0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.AbstractLinePathConnector$ConnectableLineSubset"", e);
      }
  }"
4831,"    public void connect(final Iterable<? extends LineConvexSubset> subsets) {
        final List<ConnectableLineSubset> newEntries = new ArrayList<>();

        for (final LineConvexSubset subset : subsets) {
            newEntries.add(new ConnectableLineSubset(subset));
        }

        connectPathElements(newEntries);
    }","  public void test21()  throws Throwable  {
      InteriorAngleLinePathConnector.Maximize interiorAngleLinePathConnector_Maximize0 = new InteriorAngleLinePathConnector.Maximize();
      Class<ReverseRay> class0 = ReverseRay.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<ReverseRay> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      interiorAngleLinePathConnector_Maximize0.connect(serviceLoader0);
}"
4832,"    public List<LinePath> connectAll(final Iterable<LineConvexSubset> subsets) {
        add(subsets);
        return connectAll();
    }","  public void test22()  throws Throwable  {
      Vector<LineConvexSubset> vector0 = new Vector<LineConvexSubset>();
      vector0.add((LineConvexSubset) null);
      InteriorAngleLinePathConnector.Maximize interiorAngleLinePathConnector_Maximize0 = new InteriorAngleLinePathConnector.Maximize();
      // Undeclared exception!
      try { 
        interiorAngleLinePathConnector_Maximize0.connectAll((Iterable<LineConvexSubset>) vector0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.AbstractLinePathConnector$ConnectableLineSubset"", e);
      }
  }"
4833,,"  public void test23()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      // Undeclared exception!
      try { 
        abstractLinePathConnector_ConnectableLineSubset0.getConnectionSearchKey();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.AbstractLinePathConnector$ConnectableLineSubset"", e);
      }
  }"
4834,,"  public void test24()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset(vector2D0);
      // Undeclared exception!
      try { 
        abstractLinePathConnector_ConnectableLineSubset0.getRelativeAngle(abstractLinePathConnector_ConnectableLineSubset0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.AbstractLinePathConnector$ConnectableLineSubset"", e);
      }
  }"
4835,,"  public void test25()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((Vector2D) null);
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset1 = abstractLinePathConnector_ConnectableLineSubset0.getSelf();
}"
4836,,"  public void test26()  throws Throwable  {
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = null;
      try {
        abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset((LineConvexSubset) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.AbstractLinePathConnector$ConnectableLineSubset"", e);
      }
  }"
4837,"    public void add(final LineConvexSubset subset) {
        addPathElement(new ConnectableLineSubset(subset));
    }","  public void test27()  throws Throwable  {
      InteriorAngleLinePathConnector.Maximize interiorAngleLinePathConnector_Maximize0 = new InteriorAngleLinePathConnector.Maximize();
      // Undeclared exception!
      try { 
        interiorAngleLinePathConnector_Maximize0.add((LineConvexSubset) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.AbstractLinePathConnector$ConnectableLineSubset"", e);
      }
  }"
4838,"    public List<LinePath> connectAll(final Iterable<LineConvexSubset> subsets) {
        add(subsets);
        return connectAll();
    }","  public void test28()  throws Throwable  {
      InteriorAngleLinePathConnector.Maximize interiorAngleLinePathConnector_Maximize0 = new InteriorAngleLinePathConnector.Maximize();
      Class<LineConvexSubset> class0 = LineConvexSubset.class;
      ServiceLoader<LineConvexSubset> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      List<LinePath> list0 = interiorAngleLinePathConnector_Maximize0.connectAll((Iterable<LineConvexSubset>) serviceLoader0);
}"
4839,"    protected abstract boolean isBetterAngle(double newAngle, double previousAngle);

    /** Convenience method for connecting a collection of line subsets with interior angles
     * maximized when possible. This method is equivalent to {@code new Maximize().connect(subsets)}","  public void test0()  throws Throwable  {
      InteriorAngleLinePathConnector.Minimize interiorAngleLinePathConnector_Minimize0 = new InteriorAngleLinePathConnector.Minimize();
      boolean boolean0 = interiorAngleLinePathConnector_Minimize0.isBetterAngle(0.0, 0.0);
}"
4840,"    protected abstract boolean isBetterAngle(double newAngle, double previousAngle);

    /** Convenience method for connecting a collection of line subsets with interior angles
     * maximized when possible. This method is equivalent to {@code new Maximize().connect(subsets)}","  public void test1()  throws Throwable  {
      InteriorAngleLinePathConnector.Maximize interiorAngleLinePathConnector_Maximize0 = new InteriorAngleLinePathConnector.Maximize();
      boolean boolean0 = interiorAngleLinePathConnector_Maximize0.isBetterAngle(-0.0, 759.0);
}"
4841,"    protected ConnectableLineSubset selectConnection(final ConnectableLineSubset incoming,
            final List<ConnectableLineSubset> outgoing) {

        // search for the best connection
        final Line incomingLine = incoming.getLineSubset().getLine();

        double selectedInteriorAngle = Double.POSITIVE_INFINITY;
        ConnectableLineSubset selected = null;

        for (final ConnectableLineSubset candidate : outgoing) {
            final double interiorAngle =
                    Math.PI - incomingLine.angle(candidate.getLineSubset().getLine());

            if (selected == null || isBetterAngle(interiorAngle, selectedInteriorAngle)) {
                selectedInteriorAngle = interiorAngle;
                selected = candidate;
            }
        }

        return selected;
    }","  public void test2()  throws Throwable  {
      InteriorAngleLinePathConnector.Maximize interiorAngleLinePathConnector_Maximize0 = new InteriorAngleLinePathConnector.Maximize();
      ArrayList<AbstractLinePathConnector.ConnectableLineSubset> arrayList0 = new ArrayList<AbstractLinePathConnector.ConnectableLineSubset>();
      Vector2D vector2D0 = Vector2D.NaN;
      AbstractLinePathConnector.ConnectableLineSubset abstractLinePathConnector_ConnectableLineSubset0 = new AbstractLinePathConnector.ConnectableLineSubset(vector2D0);
      // Undeclared exception!
      try { 
        interiorAngleLinePathConnector_Maximize0.selectConnection(abstractLinePathConnector_ConnectableLineSubset0, arrayList0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.InteriorAngleLinePathConnector"", e);
      }
  }"
4842,"    public static List<LinePath> connectMinimized(final Collection<LineConvexSubset> subsets) {
        return new Minimize().connectAll(subsets);
    }","  public void test3()  throws Throwable  {
      HashSet<LineConvexSubset> hashSet0 = new HashSet<LineConvexSubset>();
      hashSet0.add((LineConvexSubset) null);
      // Undeclared exception!
      try { 
        InteriorAngleLinePathConnector.connectMinimized(hashSet0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.AbstractLinePathConnector$ConnectableLineSubset"", e);
      }
  }"
4843,"    public static List<LinePath> connectMaximized(final Collection<LineConvexSubset> subsets) {
        return new Maximize().connectAll(subsets);
    }","  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        InteriorAngleLinePathConnector.connectMaximized((Collection<LineConvexSubset>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.AbstractLinePathConnector"", e);
      }
  }"
4844,"    protected abstract boolean isBetterAngle(double newAngle, double previousAngle);

    /** Convenience method for connecting a collection of line subsets with interior angles
     * maximized when possible. This method is equivalent to {@code new Maximize().connect(subsets)}","  public void test5()  throws Throwable  {
      InteriorAngleLinePathConnector.Minimize interiorAngleLinePathConnector_Minimize0 = new InteriorAngleLinePathConnector.Minimize();
      boolean boolean0 = interiorAngleLinePathConnector_Minimize0.isBetterAngle((-915.7), 501.24245192701426);
}"
4845,"    protected abstract boolean isBetterAngle(double newAngle, double previousAngle);

    /** Convenience method for connecting a collection of line subsets with interior angles
     * maximized when possible. This method is equivalent to {@code new Maximize().connect(subsets)}","  public void test6()  throws Throwable  {
      InteriorAngleLinePathConnector.Minimize interiorAngleLinePathConnector_Minimize0 = new InteriorAngleLinePathConnector.Minimize();
      boolean boolean0 = interiorAngleLinePathConnector_Minimize0.isBetterAngle(509.3512969093, 0.0);
}"
4846,"    protected abstract boolean isBetterAngle(double newAngle, double previousAngle);

    /** Convenience method for connecting a collection of line subsets with interior angles
     * maximized when possible. This method is equivalent to {@code new Maximize().connect(subsets)}","  public void test7()  throws Throwable  {
      InteriorAngleLinePathConnector.Maximize interiorAngleLinePathConnector_Maximize0 = new InteriorAngleLinePathConnector.Maximize();
      boolean boolean0 = interiorAngleLinePathConnector_Maximize0.isBetterAngle(3752.0414806146186, (-653.7474125828605));
}"
4847,"    protected abstract boolean isBetterAngle(double newAngle, double previousAngle);

    /** Convenience method for connecting a collection of line subsets with interior angles
     * maximized when possible. This method is equivalent to {@code new Maximize().connect(subsets)}","  public void test8()  throws Throwable  {
      InteriorAngleLinePathConnector.Maximize interiorAngleLinePathConnector_Maximize0 = new InteriorAngleLinePathConnector.Maximize();
      boolean boolean0 = interiorAngleLinePathConnector_Maximize0.isBetterAngle(3752.0414806146186, 3752.0414806146186);
}"
4848,"    public static List<LinePath> connectMaximized(final Collection<LineConvexSubset> subsets) {
        return new Maximize().connectAll(subsets);
    }","  public void test9()  throws Throwable  {
      ArrayDeque<LineConvexSubset> arrayDeque0 = new ArrayDeque<LineConvexSubset>();
      List<LinePath> list0 = InteriorAngleLinePathConnector.connectMaximized(arrayDeque0);
}"
4849,"    public static List<LinePath> connectMinimized(final Collection<LineConvexSubset> subsets) {
        return new Minimize().connectAll(subsets);
    }","  public void test10()  throws Throwable  {
      ArrayDeque<LineConvexSubset> arrayDeque0 = new ArrayDeque<LineConvexSubset>();
      List<LinePath> list0 = InteriorAngleLinePathConnector.connectMinimized(arrayDeque0);
}"
4850,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test0()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      Vector2D[] vector2DArray0 = new Vector2D[1];
      // Undeclared exception!
      try { 
        linePath_Builder0.prependVertices(vector2DArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Unable to create line segment: no vertex precision specified
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder"", e);
      }
  }"
4851,"    public boolean isEmpty() {
        return elements.isEmpty();
    }","  public void test1()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      LinePath linePath0 = new LinePath(stack0);
      stack0.add((LineConvexSubset) null);
      stack0.add((LineConvexSubset) null);
      boolean boolean0 = linePath0.isClosed();
}"
4852,"    public boolean isClosed() {
        final LineConvexSubset endElement = getEnd();

        if (endElement != null) {
            final Vector2D start = getStartVertex();
            final Vector2D end = endElement.getEndPoint();

            return start != null && end != null && start.eq(end, endElement.getPrecision());
        }

        return false;
    }","  public void test2()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      LinePath linePath0 = new LinePath(stack0);
      stack0.add((LineConvexSubset) null);
      stack0.add((LineConvexSubset) null);
      boolean boolean0 = linePath0.isClosed();
}"
4853,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test3()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      Vector2D[] vector2DArray0 = new Vector2D[0];
      LinePath.Builder linePath_Builder1 = linePath_Builder0.prependVertices(vector2DArray0);
}"
4854,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test4()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      Vector2D[] vector2DArray0 = new Vector2D[0];
      LinePath.Builder linePath_Builder1 = linePath_Builder0.appendVertices(vector2DArray0);
}"
4855,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test5()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        linePath_Builder0.prepend((Vector2D) null);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Unable to create line segment: no vertex precision specified
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder"", e);
      }
  }"
4856,"    public LineConvexSubset getStart() {
        if (!isEmpty()) {
            return elements.get(0);
        }
        return null;
    }","  public void test6()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      LineConvexSubset lineConvexSubset0 = linePath_Builder0.getStart();
}"
4857,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test7()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      // Undeclared exception!
      try { 
        linePath_Builder0.append((Vector2D) vector2D_Unit0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Unable to create line segment: no vertex precision specified
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder"", e);
      }
  }"
4858,"    public boolean isEmpty() {
        return elements.isEmpty();
    }","  public void test8()  throws Throwable  {
      LineConvexSubset[] lineConvexSubsetArray0 = new LineConvexSubset[0];
      LinePath linePath0 = LinePath.from(lineConvexSubsetArray0);
}"
4859,"    public LinePath simplify() {
        final List<LineConvexSubset> simplified = new ArrayList<>();

        final int size = elements.size();

        LineConvexSubset current;
        Line currentLine;
        double end;

        int idx = 0;
        int testIdx;
        while (idx < size) {
            current = elements.get(idx);
            currentLine = current.getLine();
            end = current.getSubspaceEnd();

            // try to combine with forward neighbors
            testIdx = idx + 1;
            while (testIdx < size && currentLine.equals(elements.get(testIdx).getLine())) {
                end = Math.max(end, elements.get(testIdx).getSubspaceEnd());
                ++testIdx;
            }

            if (testIdx > idx + 1) {
                // we found something to merge
                simplified.add(Lines.subsetFromInterval(currentLine, current.getSubspaceStart(), end));
            } else {
                simplified.add(current);
            }

            idx = testIdx;
        }

        // combine the first and last items if needed
        if (isClosed() && simplified.size() > 2 && simplified.get(0).getLine().equals(
                simplified.get(simplified.size() - 1).getLine())) {

            final LineConvexSubset startElement = simplified.get(0);
            final LineConvexSubset endElement = simplified.remove(simplified.size() - 1);

            final LineConvexSubset combined = Lines.subsetFromInterval(
                    endElement.getLine(), endElement.getSubspaceStart(), startElement.getSubspaceEnd());

            simplified.set(0, combined);
        }

        return new SimplifiedLinePath(simplified);
    }","  public void test9()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      LinePath linePath0 = new LinePath(stack0);
      stack0.add((LineConvexSubset) null);
      // Undeclared exception!
      try { 
        linePath0.simplify();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.LinePath"", e);
      }
  }"
4860,"    public List<Vector2D> getVertexSequence() {
        final List<Vector2D> sequence = new ArrayList<>();

        Vector2D pt;

        // add the start point, if present
        pt = getStartVertex();
        if (pt != null) {
            sequence.add(pt);
        }

        // add end points
        for (final LineConvexSubset sub : elements) {
            pt = sub.getEndPoint();
            if (pt != null) {
                sequence.add(pt);
            }
        }

        return sequence;
    }","  public void test10()  throws Throwable  {
      Vector<LineConvexSubset> vector0 = new Vector<LineConvexSubset>();
      vector0.add((LineConvexSubset) null);
      LinePath linePath0 = new LinePath(vector0);
      // Undeclared exception!
      try { 
        linePath0.getVertexSequence();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.LinePath"", e);
      }
  }"
4861,"    public double getSize() {
        double sum = 0.0;
        for (final LineConvexSubset element : elements) {
            sum += element.getSize();
        }

        return sum;
    }","  public void test11()  throws Throwable  {
      LinkedList<LineConvexSubset> linkedList0 = new LinkedList<LineConvexSubset>();
      LinePath linePath0 = new LinePath(linkedList0);
      linkedList0.add((LineConvexSubset) null);
      // Undeclared exception!
      try { 
        linePath0.getSize();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.LinePath"", e);
      }
  }"
4862,"    public static LinePath fromVertices(final Collection<Vector2D> vertices,
            final Precision.DoubleEquivalence precision) {

        return fromVertices(vertices, false, precision);
    }","  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        LinePath.fromVertices((Collection<Vector2D>) null, true, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder"", e);
      }
  }"
4863,"    public static LinePath fromVertices(final Collection<Vector2D> vertices,
            final Precision.DoubleEquivalence precision) {

        return fromVertices(vertices, false, precision);
    }","  public void test13()  throws Throwable  {
      Vector<Vector2D> vector0 = new Vector<Vector2D>();
      Vector2D vector2D0 = Vector2D.NaN;
      vector0.add(vector2D0);
      // Undeclared exception!
      try { 
        LinePath.fromVertices((Collection<Vector2D>) vector0, true, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Unable to create line segment: no vertex precision specified
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder"", e);
      }
  }"
4864,"    public static LinePath fromVertices(final Collection<Vector2D> vertices,
            final Precision.DoubleEquivalence precision) {

        return fromVertices(vertices, false, precision);
    }","  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        LinePath.fromVertices((Collection<Vector2D>) null, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder"", e);
      }
  }"
4865,"    public static LinePath fromVertexLoop(final Collection<Vector2D> vertices,
            final Precision.DoubleEquivalence precision) {

        return fromVertices(vertices, true, precision);
    }","  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        LinePath.fromVertexLoop((Collection<Vector2D>) null, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder"", e);
      }
  }"
4866,"    public static LinePath fromVertexLoop(final Collection<Vector2D> vertices,
            final Precision.DoubleEquivalence precision) {

        return fromVertices(vertices, true, precision);
    }","  public void test16()  throws Throwable  {
      HashSet<Vector2D> hashSet0 = new HashSet<Vector2D>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      hashSet0.add(vector2D_Unit0);
      // Undeclared exception!
      try { 
        LinePath.fromVertexLoop(hashSet0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Unable to create line segment: no vertex precision specified
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder"", e);
      }
  }"
4867,"    LinePath(final List<LineConvexSubset> elements) {
        this.elements = Collections.unmodifiableList(elements);
    }","  public void test17()  throws Throwable  {
      LinePath linePath0 = null;
      try {
        linePath0 = new LinePath((List<LineConvexSubset>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableCollection"", e);
      }
  }"
4868,"    public boolean isEmpty() {
        return elements.isEmpty();
    }","  public void test18()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      LinePath linePath0 = linePath_Builder0.build(false);
}"
4869,"    public boolean isEmpty() {
        return elements.isEmpty();
    }","  public void test19()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      LinePath linePath0 = linePath_Builder0.build(true);
}"
4870,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test20()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      TreeSet<Vector2D> treeSet0 = new TreeSet<Vector2D>();
      LinePath.Builder linePath_Builder1 = linePath_Builder0.appendVertices((Collection<? extends Vector2D>) treeSet0);
}"
4871,"    public static LinePath from(final LineConvexSubset... subsets) {
        return from(Arrays.asList(subsets));
    }","  public void test21()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      Stack<Vector2D> stack0 = new Stack<Vector2D>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from((-2305.34284678423), (-2079.588));
      stack0.add((Vector2D) vector2D_Unit0);
      // Undeclared exception!
      try { 
        linePath_Builder0.appendVertices((Collection<? extends Vector2D>) stack0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Unable to create line segment: no vertex precision specified
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder"", e);
      }
  }"
4872,"    public LineConvexSubset getEnd() {
        if (!isEmpty()) {
            return elements.get(elements.size() - 1);
        }
        return null;
    }","  public void test22()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      LineConvexSubset lineConvexSubset0 = linePath_Builder0.getEnd();
}"
4873,"    public static LinePath from(final LineConvexSubset... subsets) {
        return from(Arrays.asList(subsets));
    }","  public void test23()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, regionBSPTree1D0);
      List<LineConvexSubset> list0 = embeddedTreeLineSubset0.toConvex();
      // Undeclared exception!
      try { 
        LinePath.from((Collection<? extends LineConvexSubset>) list0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.LineSubset"", e);
      }
  }"
4874,"    public boolean isClosed() {
        final LineConvexSubset endElement = getEnd();

        if (endElement != null) {
            final Vector2D start = getStartVertex();
            final Vector2D end = endElement.getEndPoint();

            return start != null && end != null && start.eq(end, endElement.getPrecision());
        }

        return false;
    }","  public void test24()  throws Throwable  {
      HashSet<ReverseRay> hashSet0 = new HashSet<ReverseRay>();
      LinePath linePath0 = LinePath.from((Collection<? extends LineConvexSubset>) hashSet0);
      boolean boolean0 = linePath0.isClosed();
}"
4875,"    public boolean isClosed() {
        final LineConvexSubset endElement = getEnd();

        if (endElement != null) {
            final Vector2D start = getStartVertex();
            final Vector2D end = endElement.getEndPoint();

            return start != null && end != null && start.eq(end, endElement.getPrecision());
        }

        return false;
    }","  public void test25()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, regionBSPTree1D0);
      List<LineConvexSubset> list0 = embeddedTreeLineSubset0.toConvex();
      LinePath linePath0 = new LinePath(list0);
      boolean boolean0 = linePath0.isClosed();
}"
4876,"    public boolean isEmpty() {
        return elements.isEmpty();
    }","  public void test26()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, regionBSPTree1D0);
      List<LineConvexSubset> list0 = embeddedTreeLineSubset0.toConvex();
      LinePath linePath0 = new LinePath(list0);
      boolean boolean0 = linePath0.isClosed();
}"
4877,"    public boolean isEmpty() {
        return elements.isEmpty();
    }","  public void test27()  throws Throwable  {
      ArrayList<LineConvexSubset> arrayList0 = new ArrayList<LineConvexSubset>();
      LinePath linePath0 = new LinePath(arrayList0);
      arrayList0.add((LineConvexSubset) null);
      boolean boolean0 = linePath0.isEmpty();
}"
4878,"    public boolean isEmpty() {
        return elements.isEmpty();
    }","  public void test28()  throws Throwable  {
      ArrayDeque<Segment> arrayDeque0 = new ArrayDeque<Segment>();
      LinePath linePath0 = LinePath.from((Collection<? extends LineConvexSubset>) arrayDeque0);
      boolean boolean0 = linePath0.isEmpty();
}"
4879,"    public boolean isInfinite() {
        return !isEmpty() && (getStartVertex() == null || getEndVertex() == null);
    }","  public void test29()  throws Throwable  {
      ArrayList<LineConvexSubset> arrayList0 = new ArrayList<LineConvexSubset>();
      LinePath linePath0 = new LinePath(arrayList0);
      boolean boolean0 = linePath0.isInfinite();
}"
4880,"    public LineConvexSubset getEnd() {
        if (!isEmpty()) {
            return elements.get(elements.size() - 1);
        }
        return null;
    }","  public void test30()  throws Throwable  {
      ArrayList<LineConvexSubset> arrayList0 = new ArrayList<LineConvexSubset>();
      LinePath linePath0 = new LinePath(arrayList0);
      LineConvexSubset lineConvexSubset0 = linePath0.getEnd();
}"
4881,"    public boolean isEmpty() {
        return elements.isEmpty();
    }","  public void test31()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      LinePath linePath0 = new LinePath(stack0);
      stack0.add((LineConvexSubset) null);
      linePath0.getEnd();
}"
4882,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test32()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      LinePath.Builder linePath_Builder1 = linePath_Builder0.setPrecision((Precision.DoubleEquivalence) null);
}"
4883,"    public boolean isEmpty() {
        return elements.isEmpty();
    }","  public void test33()  throws Throwable  {
      HashSet<ReverseRay> hashSet0 = new HashSet<ReverseRay>();
      LinePath linePath0 = LinePath.from((Collection<? extends LineConvexSubset>) hashSet0);
      List<LineConvexSubset> list0 = linePath0.getElements();
}"
4884,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test34()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        linePath_Builder0.append((LineConvexSubset) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder"", e);
      }
  }"
4885,"    public boolean isEmpty() {
        return elements.isEmpty();
    }","  public void test35()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      LinePath linePath0 = linePath_Builder0.build();
}"
4886,"    public boolean isEmpty() {
        return elements.isEmpty();
    }","  public void test36()  throws Throwable  {
      HashSet<Vector2D> hashSet0 = new HashSet<Vector2D>(857);
      LinePath linePath0 = LinePath.fromVertices((Collection<Vector2D>) hashSet0, false, (Precision.DoubleEquivalence) null);
}"
4887,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test37()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      Vector2D[] vector2DArray0 = new Vector2D[7];
      // Undeclared exception!
      try { 
        linePath_Builder0.prependVertices(vector2DArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Unable to create line segment: no vertex precision specified
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder"", e);
      }
  }"
4888,"    public static LinePath fromVertices(final Collection<Vector2D> vertices,
            final Precision.DoubleEquivalence precision) {

        return fromVertices(vertices, false, precision);
    }","  public void test38()  throws Throwable  {
      HashSet<Vector2D> hashSet0 = new HashSet<Vector2D>();
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(733.00897, 733.00897);
      hashSet0.add(vector2D_Unit0);
      // Undeclared exception!
      try { 
        LinePath.fromVertices((Collection<Vector2D>) hashSet0, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Unable to create line segment: no vertex precision specified
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder"", e);
      }
  }"
4889,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(this.getClass().getSimpleName())
            .append('[');

        if (elements.isEmpty()) {
            sb.append(""empty= true"");
        } else if (elements.size() == 1) {
            sb.append(""single= "")
                .append(elements.get(0));
        } else {
            final LineConvexSubset startElement = getStart();
            if (startElement.getStartPoint() == null) {
                sb.append(""startDirection= "")
                    .append(startElement.getLine().getDirection())
                    .append("", "");
            }

            sb.append(""vertexSequence= "")
                .append(getVertexSequence());

            final LineConvexSubset endElement = getEnd();
            if (endElement.getEndPoint() == null) {
                sb.append("", endDirection= "")
                    .append(endElement.getLine().getDirection());
            }
        }

        sb.append(']');

        return sb.toString();
    }","  public void test39()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      LinePath linePath0 = new LinePath(stack0);
      stack0.add((LineConvexSubset) null);
      stack0.add((LineConvexSubset) null);
      // Undeclared exception!
      try { 
        linePath0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.LinePath"", e);
      }
  }"
4890,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(this.getClass().getSimpleName())
            .append('[');

        if (elements.isEmpty()) {
            sb.append(""empty= true"");
        } else if (elements.size() == 1) {
            sb.append(""single= "")
                .append(elements.get(0));
        } else {
            final LineConvexSubset startElement = getStart();
            if (startElement.getStartPoint() == null) {
                sb.append(""startDirection= "")
                    .append(startElement.getLine().getDirection())
                    .append("", "");
            }

            sb.append(""vertexSequence= "")
                .append(getVertexSequence());

            final LineConvexSubset endElement = getEnd();
            if (endElement.getEndPoint() == null) {
                sb.append("", endDirection= "")
                    .append(endElement.getLine().getDirection());
            }
        }

        sb.append(']');

        return sb.toString();
    }","  public void test40()  throws Throwable  {
      LinePath linePath0 = LinePath.empty();
      String string0 = linePath0.toString();
}"
4891,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(this.getClass().getSimpleName())
            .append('[');

        if (elements.isEmpty()) {
            sb.append(""empty= true"");
        } else if (elements.size() == 1) {
            sb.append(""single= "")
                .append(elements.get(0));
        } else {
            final LineConvexSubset startElement = getStart();
            if (startElement.getStartPoint() == null) {
                sb.append(""startDirection= "")
                    .append(startElement.getLine().getDirection())
                    .append("", "");
            }

            sb.append(""vertexSequence= "")
                .append(getVertexSequence());

            final LineConvexSubset endElement = getEnd();
            if (endElement.getEndPoint() == null) {
                sb.append("", endDirection= "")
                    .append(endElement.getLine().getDirection());
            }
        }

        sb.append(']');

        return sb.toString();
    }","  public void test41()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      LinePath linePath0 = new LinePath(stack0);
      stack0.add((LineConvexSubset) null);
      String string0 = linePath0.toString();
}"
4892,"    public LinePath reverse() {
        if (!isEmpty()) {
            final List<LineConvexSubset> reversed = elements.stream()
                .map(LineConvexSubset::reverse)
                .collect(Collectors.toCollection(ArrayList::new));
            Collections.reverse(reversed);

            return new LinePath(reversed);
        }

        return this;
    }","  public void test42()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, regionBSPTree1D0);
      List<LineConvexSubset> list0 = embeddedTreeLineSubset0.toConvex();
      LinePath linePath0 = new LinePath(list0);
      // Undeclared exception!
      try { 
        linePath0.reverse();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.LineSpanningSubset"", e);
      }
  }"
4893,"    public LinePath reverse() {
        if (!isEmpty()) {
            final List<LineConvexSubset> reversed = elements.stream()
                .map(LineConvexSubset::reverse)
                .collect(Collectors.toCollection(ArrayList::new));
            Collections.reverse(reversed);

            return new LinePath(reversed);
        }

        return this;
    }","  public void test43()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      LinePath linePath0 = new LinePath(stack0);
      LinePath linePath1 = linePath0.reverse();
}"
4894,"    public LinePath transform(final Transform<Vector2D> transform) {
        if (!isEmpty()) {
            final List<LineConvexSubset> transformed = elements.stream()
                .map(s -> s.transform(transform))
                .collect(Collectors.toCollection(ArrayList::new));

            return new LinePath(transformed);
        }

        return this;
    }","  public void test44()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      stack0.setSize(2703);
      LinePath linePath0 = new LinePath(stack0);
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.identity();
      // Undeclared exception!
      try { 
        linePath0.transform(affineTransformMatrix2D0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.LinePath"", e);
      }
  }"
4895,"    public LinePath transform(final Transform<Vector2D> transform) {
        if (!isEmpty()) {
            final List<LineConvexSubset> transformed = elements.stream()
                .map(s -> s.transform(transform))
                .collect(Collectors.toCollection(ArrayList::new));

            return new LinePath(transformed);
        }

        return this;
    }","  public void test45()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      LinePath linePath0 = new LinePath(stack0);
      LinePath linePath1 = linePath0.transform((Transform<Vector2D>) null);
}"
4896,"    public double getSize() {
        double sum = 0.0;
        for (final LineConvexSubset element : elements) {
            sum += element.getSize();
        }

        return sum;
    }","  public void test46()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, regionBSPTree1D0);
      List<LineConvexSubset> list0 = embeddedTreeLineSubset0.toConvex();
      LinePath linePath0 = new LinePath(list0);
      double double0 = linePath0.getSize();
}"
4897,"    public double getSize() {
        double sum = 0.0;
        for (final LineConvexSubset element : elements) {
            sum += element.getSize();
        }

        return sum;
    }","  public void test47()  throws Throwable  {
      LinePath linePath0 = LinePath.empty();
      double double0 = linePath0.getSize();
}"
4898,"    public boolean isEmpty() {
        return elements.isEmpty();
    }","  public void test48()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      LinePath linePath0 = new LinePath(stack0);
      stack0.add((LineConvexSubset) null);
      boolean boolean0 = linePath0.isFinite();
}"
4899,"    public boolean isFinite() {
        return !isInfinite();
    }","  public void test49()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      LinePath linePath0 = new LinePath(stack0);
      stack0.add((LineConvexSubset) null);
      boolean boolean0 = linePath0.isFinite();
}"
4900,"    public boolean isEmpty() {
        return elements.isEmpty();
    }","  public void test50()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      LinePath linePath0 = new LinePath(stack0);
      stack0.add((LineConvexSubset) null);
      boolean boolean0 = linePath0.isInfinite();
}"
4901,"    public boolean isInfinite() {
        return !isEmpty() && (getStartVertex() == null || getEndVertex() == null);
    }","  public void test51()  throws Throwable  {
      Stack<LineConvexSubset> stack0 = new Stack<LineConvexSubset>();
      LinePath linePath0 = new LinePath(stack0);
      stack0.add((LineConvexSubset) null);
      boolean boolean0 = linePath0.isInfinite();
}"
4902,"    public boolean isFinite() {
        return !isInfinite();
    }","  public void test52()  throws Throwable  {
      LinePath linePath0 = LinePath.empty();
      boolean boolean0 = linePath0.isFinite();
}"
4903,"    public boolean isEmpty() {
        return elements.isEmpty();
    }","  public void test53()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, regionBSPTree1D0);
      List<LineConvexSubset> list0 = embeddedTreeLineSubset0.toConvex();
      LinePath linePath0 = new LinePath(list0);
      List<Vector2D> list1 = linePath0.getVertexSequence();
}"
4904,"    public boolean isEmpty() {
        return elements.isEmpty();
    }","  public void test54()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, regionBSPTree1D0);
      List<LineConvexSubset> list0 = embeddedTreeLineSubset0.toConvex();
      LinePath linePath0 = new LinePath(list0);
      List<Vector2D> list1 = linePath0.getVertexSequence();
}"
4905,"    public boolean isEmpty() {
        return elements.isEmpty();
    }","  public void test55()  throws Throwable  {
      RegionBSPTree1D regionBSPTree1D0 = new RegionBSPTree1D(true);
      EmbeddedTreeLineSubset embeddedTreeLineSubset0 = new EmbeddedTreeLineSubset((Line) null, regionBSPTree1D0);
      List<LineConvexSubset> list0 = embeddedTreeLineSubset0.toConvex();
      LinePath linePath0 = new LinePath(list0);
      LinePath linePath1 = linePath0.simplify();
}"
4906,"    public LineConvexSubset getStart() {
        if (!isEmpty()) {
            return elements.get(0);
        }
        return null;
    }","  public void test56()  throws Throwable  {
      LinePath linePath0 = LinePath.empty();
      LineConvexSubset lineConvexSubset0 = linePath0.getStart();
}"
4907,"    public LinePath simplify() {
        final List<LineConvexSubset> simplified = new ArrayList<>();

        final int size = elements.size();

        LineConvexSubset current;
        Line currentLine;
        double end;

        int idx = 0;
        int testIdx;
        while (idx < size) {
            current = elements.get(idx);
            currentLine = current.getLine();
            end = current.getSubspaceEnd();

            // try to combine with forward neighbors
            testIdx = idx + 1;
            while (testIdx < size && currentLine.equals(elements.get(testIdx).getLine())) {
                end = Math.max(end, elements.get(testIdx).getSubspaceEnd());
                ++testIdx;
            }

            if (testIdx > idx + 1) {
                // we found something to merge
                simplified.add(Lines.subsetFromInterval(currentLine, current.getSubspaceStart(), end));
            } else {
                simplified.add(current);
            }

            idx = testIdx;
        }

        // combine the first and last items if needed
        if (isClosed() && simplified.size() > 2 && simplified.get(0).getLine().equals(
                simplified.get(simplified.size() - 1).getLine())) {

            final LineConvexSubset startElement = simplified.get(0);
            final LineConvexSubset endElement = simplified.remove(simplified.size() - 1);

            final LineConvexSubset combined = Lines.subsetFromInterval(
                    endElement.getLine(), endElement.getSubspaceStart(), startElement.getSubspaceEnd());

            simplified.set(0, combined);
        }

        return new SimplifiedLinePath(simplified);
    }","  public void test57()  throws Throwable  {
      LinePath linePath0 = LinePath.empty();
      LinePath linePath1 = linePath0.simplify();
      LinePath linePath2 = linePath1.simplify();
}"
4908,"    public boolean isEmpty() {
        return elements.isEmpty();
    }","  public void test58()  throws Throwable  {
      HashSet<Vector2D> hashSet0 = new HashSet<Vector2D>();
      LinePath linePath0 = LinePath.fromVertexLoop(hashSet0, (Precision.DoubleEquivalence) null);
}"
4909,"    public boolean isEmpty() {
        return elements.isEmpty();
    }","  public void test59()  throws Throwable  {
      HashSet<Vector2D> hashSet0 = new HashSet<Vector2D>();
      LinePath linePath0 = LinePath.fromVertices((Collection<Vector2D>) hashSet0, (Precision.DoubleEquivalence) null);
}"
4910,"    public Stream<LineConvexSubset> boundaryStream() {
        return getElements().stream();
    }","  public void test60()  throws Throwable  {
      LinePath linePath0 = LinePath.empty();
      Stream<LineConvexSubset> stream0 = linePath0.boundaryStream();
}"
4911,"    public boolean isEmpty() {
        return elements.isEmpty();
    }","  public void test61()  throws Throwable  {
      LinkedList<Ray> linkedList0 = new LinkedList<Ray>();
      ArrayList<LineConvexSubset> arrayList0 = new ArrayList<LineConvexSubset>(linkedList0);
      LinePath linePath0 = new LinePath(arrayList0);
}"
4912,"    public boolean isEmpty() {
        return elements.isEmpty();
    }","  public void test62()  throws Throwable  {
      LinkedList<Ray> linkedList0 = new LinkedList<Ray>();
      ArrayList<LineConvexSubset> arrayList0 = new ArrayList<LineConvexSubset>(linkedList0);
      LinePath linePath0 = new LinePath(arrayList0);
      arrayList0.add((LineConvexSubset) null);
      linePath0.getStart();
}"
4913,"    public static LinePath from(final LineConvexSubset... subsets) {
        return from(Arrays.asList(subsets));
    }","  public void test63()  throws Throwable  {
      LineConvexSubset[] lineConvexSubsetArray0 = new LineConvexSubset[4];
      // Undeclared exception!
      try { 
        LinePath.from(lineConvexSubsetArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder"", e);
      }
  }"
4914,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test64()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        linePath_Builder0.prepend((LineConvexSubset) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.path.LinePath$Builder"", e);
      }
  }"
4915,"    public static Builder builder(final Precision.DoubleEquivalence precision) {
        return new Builder(precision);
    }","  public void test65()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      Stack<Vector2D> stack0 = new Stack<Vector2D>();
      LinePath.Builder linePath_Builder1 = linePath_Builder0.prependVertices((Collection<Vector2D>) stack0);
}"
4916,"    public boolean isEmpty() {
        return elements.isEmpty();
    }","  public void test66()  throws Throwable  {
      LinePath.Builder linePath_Builder0 = LinePath.builder((Precision.DoubleEquivalence) null);
      LinePath linePath0 = linePath_Builder0.close();
}"
4917,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Rotation2D)) {
            return false;
        }

        final Rotation2D other = (Rotation2D) obj;

        return Double.compare(this.angle, other.angle) == 0;
    }","  public void test0()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      Rotation2D rotation2D1 = Rotation2D.of((-911.396825582));
      boolean boolean0 = rotation2D0.equals(rotation2D1);
}"
4918,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Rotation2D)) {
            return false;
        }

        final Rotation2D other = (Rotation2D) obj;

        return Double.compare(this.angle, other.angle) == 0;
    }","  public void test1()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      Rotation2D rotation2D1 = Rotation2D.of((-911.396825582));
      boolean boolean0 = rotation2D0.equals(rotation2D1);
}"
4919,"    public double getAngle() {
        return angle;
    }","  public void test2()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      Rotation2D rotation2D1 = Rotation2D.of((-911.396825582));
      boolean boolean0 = rotation2D0.equals(rotation2D1);
}"
4920,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Rotation2D)) {
            return false;
        }

        final Rotation2D other = (Rotation2D) obj;

        return Double.compare(this.angle, other.angle) == 0;
    }","  public void test3()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of((-2551.721));
      Rotation2D rotation2D1 = rotation2D0.inverse();
      Rotation2D rotation2D2 = rotation2D1.inverse();
}"
4921,"    public double getAngle() {
        return angle;
    }","  public void test4()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of((-2551.721));
      Rotation2D rotation2D1 = rotation2D0.inverse();
      Rotation2D rotation2D2 = rotation2D1.inverse();
}"
4922,"    public double getAngle() {
        return angle;
    }","  public void test5()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of((-2551.721));
      Rotation2D rotation2D1 = rotation2D0.inverse();
      double double0 = rotation2D1.getAngle();
}"
4923,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Rotation2D)) {
            return false;
        }

        final Rotation2D other = (Rotation2D) obj;

        return Double.compare(this.angle, other.angle) == 0;
    }","  public void test6()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of((-2551.721));
      Rotation2D rotation2D1 = rotation2D0.inverse();
      double double0 = rotation2D1.getAngle();
}"
4924,"    public double getAngle() {
        return angle;
    }","  public void test7()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of((-1998.55));
      double double0 = rotation2D0.getAngle();
}"
4925,"    public static Rotation2D createVectorRotation(final Vector2D u, final Vector2D v) {
        // make sure that the vectors are real-valued and of non-zero length; we don't
        // actually need to use the norm value; we just need to check its properties
        Vectors.checkedNorm(u);
        Vectors.checkedNorm(v);

        final double uAzimuth = Math.atan2(u.getY(), u.getX());
        final double vAzimuth = Math.atan2(v.getY(), v.getX());

        return of(vAzimuth - uAzimuth);
    }","  public void test8()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(128.8);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
      Rotation2D rotation2D1 = Rotation2D.createVectorRotation(vector2D0, vector2D_Unit0);
}"
4926,"    public double getAngle() {
        return angle;
    }","  public void test9()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(128.8);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
      Rotation2D rotation2D1 = Rotation2D.createVectorRotation(vector2D0, vector2D_Unit0);
}"
4927,"    public static Rotation2D createVectorRotation(final Vector2D u, final Vector2D v) {
        // make sure that the vectors are real-valued and of non-zero length; we don't
        // actually need to use the norm value; we just need to check its properties
        Vectors.checkedNorm(u);
        Vectors.checkedNorm(v);

        final double uAzimuth = Math.atan2(u.getY(), u.getX());
        final double vAzimuth = Math.atan2(v.getY(), v.getX());

        return of(vAzimuth - uAzimuth);
    }","  public void test10()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(128.8);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
      Rotation2D rotation2D1 = Rotation2D.createVectorRotation(vector2D0, vector2D_Unit0);
}"
4928,"    public double getAngle() {
        return angle;
    }","  public void test11()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation((-2052.262350997466));
      Vector2D.Unit vector2D_Unit1 = affineTransformMatrix2D0.applyDirection((Vector2D) vector2D_Unit0);
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit1);
}"
4929,"    public double getAngle() {
        return angle;
    }","  public void test12()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
}"
4930,"    public Vector2D applyVector(final Vector2D vec) {
        return apply(vec);
    }","  public void test13()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
}"
4931,"    public Vector2D applyVector(final Vector2D vec) {
        return apply(vec);
    }","  public void test14()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
}"
4932,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Rotation2D)) {
            return false;
        }

        final Rotation2D other = (Rotation2D) obj;

        return Double.compare(this.angle, other.angle) == 0;
    }","  public void test15()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = rotation2D0.applyVector(vector2D0);
}"
4933,"    public double getAngle() {
        return angle;
    }","  public void test16()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of((-3456.44949864735));
      Vector2D vector2D0 = Vector2D.NaN;
      rotation2D0.applyVector(vector2D0);
}"
4934,"    public double getAngle() {
        return angle;
    }","  public void test17()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
}"
4935,"    public Vector2D applyVector(final Vector2D vec) {
        return apply(vec);
    }","  public void test18()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
}"
4936,"    public Vector2D applyVector(final Vector2D vec) {
        return apply(vec);
    }","  public void test19()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
}"
4937,"    public double getAngle() {
        return angle;
    }","  public void test20()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of((-2551.721));
      Vector2D vector2D0 = Vector2D.NaN;
      rotation2D0.apply(vector2D0);
}"
4938,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Rotation2D)) {
            return false;
        }

        final Rotation2D other = (Rotation2D) obj;

        return Double.compare(this.angle, other.angle) == 0;
    }","  public void test21()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = rotation2D0.apply(vector2D0);
}"
4939,"    public Vector2D apply(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        return Vector2D.of(
                    (x * cosAngle) - (y * sinAngle),
                    (x * sinAngle) + (y * cosAngle)
                );
    }","  public void test22()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = rotation2D0.apply((Vector2D) vector2D_Unit0);
}"
4940,"    public double getAngle() {
        return angle;
    }","  public void test23()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = rotation2D0.apply((Vector2D) vector2D_Unit0);
}"
4941,"    public Vector2D apply(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        return Vector2D.of(
                    (x * cosAngle) - (y * sinAngle),
                    (x * sinAngle) + (y * cosAngle)
                );
    }","  public void test24()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = rotation2D0.apply((Vector2D) vector2D_Unit0);
}"
4942,"    public static Rotation2D createVectorRotation(final Vector2D u, final Vector2D v) {
        // make sure that the vectors are real-valued and of non-zero length; we don't
        // actually need to use the norm value; we just need to check its properties
        Vectors.checkedNorm(u);
        Vectors.checkedNorm(v);

        final double uAzimuth = Math.atan2(u.getY(), u.getX());
        final double vAzimuth = Math.atan2(v.getY(), v.getX());

        return of(vAzimuth - uAzimuth);
    }","  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Rotation2D.createVectorRotation((Vector2D) null, (Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
4943,"    public static Rotation2D createVectorRotation(final Vector2D u, final Vector2D v) {
        // make sure that the vectors are real-valued and of non-zero length; we don't
        // actually need to use the norm value; we just need to check its properties
        Vectors.checkedNorm(u);
        Vectors.checkedNorm(v);

        final double uAzimuth = Math.atan2(u.getY(), u.getX());
        final double vAzimuth = Math.atan2(v.getY(), v.getX());

        return of(vAzimuth - uAzimuth);
    }","  public void test26()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        Rotation2D.createVectorRotation(vector2D0, vector2D0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
4944,"    public Vector2D apply(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        return Vector2D.of(
                    (x * cosAngle) - (y * sinAngle),
                    (x * sinAngle) + (y * cosAngle)
                );
    }","  public void test27()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of((-310.2187357385034));
      // Undeclared exception!
      try { 
        rotation2D0.apply((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.rotation.Rotation2D"", e);
      }
  }"
4945,"    public Vector2D apply(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        return Vector2D.of(
                    (x * cosAngle) - (y * sinAngle),
                    (x * sinAngle) + (y * cosAngle)
                );
    }","  public void test28()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.5);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = rotation2D0.apply((Vector2D) vector2D_Unit0);
}"
4946,"    public double getAngle() {
        return angle;
    }","  public void test29()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.5);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = rotation2D0.apply((Vector2D) vector2D_Unit0);
}"
4947,"    public Vector2D apply(final Vector2D pt) {
        final double x = pt.getX();
        final double y = pt.getY();

        return Vector2D.of(
                    (x * cosAngle) - (y * sinAngle),
                    (x * sinAngle) + (y * cosAngle)
                );
    }","  public void test30()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.5);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = rotation2D0.apply((Vector2D) vector2D_Unit0);
}"
4948,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Rotation2D)) {
            return false;
        }

        final Rotation2D other = (Rotation2D) obj;

        return Double.compare(this.angle, other.angle) == 0;
    }","  public void test31()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.0);
      Rotation2D rotation2D1 = Rotation2D.identity();
      boolean boolean0 = rotation2D1.equals(rotation2D0);
}"
4949,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Rotation2D)) {
            return false;
        }

        final Rotation2D other = (Rotation2D) obj;

        return Double.compare(this.angle, other.angle) == 0;
    }","  public void test32()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      Object object0 = new Object();
      boolean boolean0 = rotation2D0.equals(object0);
}"
4950,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Rotation2D)) {
            return false;
        }

        final Rotation2D other = (Rotation2D) obj;

        return Double.compare(this.angle, other.angle) == 0;
    }","  public void test33()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.0);
      boolean boolean0 = rotation2D0.equals(rotation2D0);
}"
4951,"    public double getAngle() {
        return angle;
    }","  public void test34()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.0);
      boolean boolean0 = rotation2D0.equals(rotation2D0);
}"
4952,"    public double getAngle() {
        return angle;
    }","  public void test35()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.0);
      rotation2D0.toMatrix();
}"
4953,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(this.getClass().getSimpleName())
            .append(""[angle="")
            .append(angle)
            .append(']');

        return sb.toString();
    }","  public void test36()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      String string0 = rotation2D0.toString();
}"
4954,"    public double getAngle() {
        return angle;
    }","  public void test37()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.0);
      double double0 = rotation2D0.getAngle();
}"
4955,"    public boolean preservesOrientation() {
        return true;
    }","  public void test38()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      boolean boolean0 = rotation2D0.preservesOrientation();
}"
4956,"    public double getAngle() {
        return angle;
    }","  public void test39()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Rotation2D rotation2D1 = rotation2D0.inverse();
      boolean boolean0 = rotation2D1.equals(rotation2D0);
}"
4957,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Rotation2D)) {
            return false;
        }

        final Rotation2D other = (Rotation2D) obj;

        return Double.compare(this.angle, other.angle) == 0;
    }","  public void test40()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Rotation2D rotation2D1 = rotation2D0.inverse();
      boolean boolean0 = rotation2D1.equals(rotation2D0);
}"
4958,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Rotation2D)) {
            return false;
        }

        final Rotation2D other = (Rotation2D) obj;

        return Double.compare(this.angle, other.angle) == 0;
    }","  public void test41()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Rotation2D rotation2D1 = rotation2D0.inverse();
      boolean boolean0 = rotation2D1.equals(rotation2D0);
}"
4959,"    public double getAngle() {
        return angle;
    }","  public void test42()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      rotation2D0.hashCode();
}"
4960,"    public Vector2D applyVector(final Vector2D vec) {
        return apply(vec);
    }","  public void test43()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.0);
      // Undeclared exception!
      try { 
        rotation2D0.applyVector((Vector2D) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.twod.rotation.Rotation2D"", e);
      }
  }"
4961,"    public static Circle from(final Vector2D center, final double radius, final Precision.DoubleEquivalence precision) {
        return new Circle(center, radius, precision);
    }","  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        Circle.from((Vector2D) null, 1590.608, (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.AbstractNSphere"", e);
      }
  }"
4962,"    public static Circle from(final Vector2D center, final double radius, final Precision.DoubleEquivalence precision) {
        return new Circle(center, radius, precision);
    }","  public void test1()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        Circle.from(vector2D0, (-1041.8427), (Precision.DoubleEquivalence) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal center point: (-Infinity, -Infinity)
         //
         verifyException(""org.apache.commons.geometry.euclidean.AbstractNSphere"", e);
      }
  }"
4963,,"  public void test0()  throws Throwable  {
      InteriorAngleLinePathConnector.Minimize interiorAngleLinePathConnector_Minimize0 = new InteriorAngleLinePathConnector.Minimize();
  }"
4964,"    public static double linearCombination(final double a1, final double b1,
                                           final double a2, final double b2) {
        return Sum.create()
                .addProduct(a1, b1)
                .addProduct(a2, b2).getAsDouble();
    }","  public void test0()  throws Throwable  {
      double double0 = Vectors.linearCombination(2131.1387422, 2903.3997256532803, 2903.3997256532803, 2131.1387422);
}"
4965,"    public static double normSq(final double x) {
        return x * x;
    }","  public void test1()  throws Throwable  {
      double double0 = Vectors.normSq(1.0, (-0.9999999999));
}"
4966,"    public static double normSq(final double x) {
        return x * x;
    }","  public void test2()  throws Throwable  {
      double double0 = Vectors.normSq(0.0, 0.0, 0.0);
}"
4967,"    public static double normSq(final double x) {
        return x * x;
    }","  public void test3()  throws Throwable  {
      double double0 = Vectors.normSq((-0.999999999999998), (-0.999999999999998));
}"
4968,"    public static double normSq(final double x) {
        return x * x;
    }","  public void test4()  throws Throwable  {
      double double0 = Vectors.normSq(0.0);
}"
4969,"    public static double norm(final double x) {
        return Math.abs(x);
    }","  public void test5()  throws Throwable  {
      double double0 = Vectors.norm(0.0, 0.0, 0.0);
}"
4970,"    public static double norm(final double x) {
        return Math.abs(x);
    }","  public void test6()  throws Throwable  {
      double double0 = Vectors.norm(0.0, 0.0);
}"
4971,"    public static double norm(final double x) {
        return Math.abs(x);
    }","  public void test7()  throws Throwable  {
      double double0 = Vectors.norm(0.0);
}"
4972,"    public static double linearCombination(final double a1, final double b1,
                                           final double a2, final double b2) {
        return Sum.create()
                .addProduct(a1, b1)
                .addProduct(a2, b2).getAsDouble();
    }","  public void test8()  throws Throwable  {
      double double0 = Vectors.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, (-315.2112));
}"
4973,"    public static double linearCombination(final double a1, final double b1,
                                           final double a2, final double b2) {
        return Sum.create()
                .addProduct(a1, b1)
                .addProduct(a2, b2).getAsDouble();
    }","  public void test9()  throws Throwable  {
      double double0 = Vectors.linearCombination(0.0, (-1630.9), (-1630.9), 1270.1016, 0.0, (-72.45668));
}"
4974,"    public static double linearCombination(final double a1, final double b1,
                                           final double a2, final double b2) {
        return Sum.create()
                .addProduct(a1, b1)
                .addProduct(a2, b2).getAsDouble();
    }","  public void test10()  throws Throwable  {
      double double0 = Vectors.linearCombination(0.0, (-1419.961666), 0.0, (-1419.961666));
}"
4975,"    public static double linearCombination(final double a1, final double b1,
                                           final double a2, final double b2) {
        return Sum.create()
                .addProduct(a1, b1)
                .addProduct(a2, b2).getAsDouble();
    }","  public void test11()  throws Throwable  {
      double double0 = Vectors.linearCombination((-1.0), 3978.05, (-1.0), (-1.0));
}"
4976,"    public static double checkedNorm(final double norm) {
        if (!isRealNonZero(norm)) {
            throw illegalNorm(norm);
        }

        return norm;
    }","  public void test12()  throws Throwable  {
      double double0 = Vectors.checkedNorm((-1.0));
}"
4977,"    public static double checkedNorm(final double norm) {
        if (!isRealNonZero(norm)) {
            throw illegalNorm(norm);
        }

        return norm;
    }","  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vectors.checkedNorm(0.0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
4978,"    public static double checkedNorm(final double norm) {
        if (!isRealNonZero(norm)) {
            throw illegalNorm(norm);
        }

        return norm;
    }","  public void test14()  throws Throwable  {
      double double0 = Vectors.checkedNorm(128.397951454976);
}"
4979,"    public static boolean isRealNonZero(final double value) {
        return Double.isFinite(value) && value != 0.0;
    }","  public void test15()  throws Throwable  {
      boolean boolean0 = Vectors.isRealNonZero(1405.6817);
}"
4980,"    public static boolean isRealNonZero(final double value) {
        return Double.isFinite(value) && value != 0.0;
    }","  public void test16()  throws Throwable  {
      boolean boolean0 = Vectors.isRealNonZero(0.0);
}"
4981,"    public static boolean isRealNonZero(final double value) {
        return Double.isFinite(value) && value != 0.0;
    }","  public void test17()  throws Throwable  {
      boolean boolean0 = Vectors.isRealNonZero(Double.POSITIVE_INFINITY);
}"
4982,"    public static double norm(final double x) {
        return Math.abs(x);
    }","  public void test18()  throws Throwable  {
      double double0 = Vectors.norm(1405.6817, 2211.0366377430296, 1563.439);
}"
4983,"    public static double normSq(final double x) {
        return x * x;
    }","  public void test19()  throws Throwable  {
      double double0 = Vectors.normSq(1.0, 3051.059744068918, (-2551.516));
}"
4984,"    public static double normSq(final double x) {
        return x * x;
    }","  public void test20()  throws Throwable  {
      double double0 = Vectors.normSq(0.0, 0.0);
}"
4985,"    public static double normSq(final double x) {
        return x * x;
    }","  public void test21()  throws Throwable  {
      double double0 = Vectors.normSq(1563.439);
}"
4986,"    public static IllegalArgumentException illegalNorm(final double norm) {
        return new IllegalArgumentException(""Illegal norm: "" + norm);
    }","  public void test22()  throws Throwable  {
      IllegalArgumentException illegalArgumentException0 = Vectors.illegalNorm(2444341.506721);
}"
4987,"    public static double linearCombination(final double a1, final double b1,
                                           final double a2, final double b2) {
        return Sum.create()
                .addProduct(a1, b1)
                .addProduct(a2, b2).getAsDouble();
    }","  public void test23()  throws Throwable  {
      double double0 = Vectors.linearCombination(320.0, 3.273390607896142E150, 3051.059744068918, 0.0, (-2223.045149750673), 0.0);
}"
4988,"    public static double norm(final double x) {
        return Math.abs(x);
    }","  public void test24()  throws Throwable  {
      double double0 = Vectors.norm((-967.2962664577253), 1871324.1342061094);
}"
4989,"    public static double norm(final double x) {
        return Math.abs(x);
    }","  public void test25()  throws Throwable  {
      double double0 = Vectors.norm(Double.POSITIVE_INFINITY);
}"
4990,"    public static double determinant(
            final double a00, final double a01,
            final double a10, final double a11) {

        return (a00 * a11) - (a01 * a10);
    }","  public void test0()  throws Throwable  {
      double double0 = Matrices.determinant((-537.5269368), 0.0, (-537.5269368), (-537.5269368), 0.0, 786.54969, 1773.5148104, 0.0, (-537.5269368));
}"
4991,"    public static double determinant(
            final double a00, final double a01,
            final double a10, final double a11) {

        return (a00 * a11) - (a01 * a10);
    }","  public void test1()  throws Throwable  {
      double double0 = Matrices.determinant((-1658.3351656), 0.0, (-1658.3351656), 0.0, (-1658.3351656), 0.0, (-1658.3351656), 0.0, 0.0);
}"
4992,"    public static double determinant(
            final double a00, final double a01,
            final double a10, final double a11) {

        return (a00 * a11) - (a01 * a10);
    }","  public void test2()  throws Throwable  {
      double double0 = Matrices.determinant((-3412.435), (-3412.435), (-3412.435), (-3412.435), (-3412.435), (-3412.435), (-1.0), (-3412.435), (-3412.435));
}"
4993,"    public static double determinant(
            final double a00, final double a01,
            final double a10, final double a11) {

        return (a00 * a11) - (a01 * a10);
    }","  public void test3()  throws Throwable  {
      double double0 = Matrices.determinant(2112.389291284, (-251.379666), 0.0, 2112.389291284, (-1341.17), 2112.389291284, 2112.389291284, 2112.389291284, 2112.389291284);
}"
4994,"    public static double determinant(
            final double a00, final double a01,
            final double a10, final double a11) {

        return (a00 * a11) - (a01 * a10);
    }","  public void test4()  throws Throwable  {
      double double0 = Matrices.determinant(0.0, (-36.0793765427), 2583.4297779836334, (-1307.5287803416));
}"
4995,"    public static double determinant(
            final double a00, final double a01,
            final double a10, final double a11) {

        return (a00 * a11) - (a01 * a10);
    }","  public void test5()  throws Throwable  {
      double double0 = Matrices.determinant((-4118.324597660367), (-4118.324597660367), (-4118.324597660367), 0.0);
}"
4996,"    public static double checkElementForInverse(final double element) {
        if (!Double.isFinite(element)) {
            throw nonInvertibleTransform(""invalid matrix element: "" + element);
        }

        return element;
    }","  public void test6()  throws Throwable  {
      double double0 = Matrices.checkElementForInverse(0.0);
}"
4997,"    public static double checkElementForInverse(final double element) {
        if (!Double.isFinite(element)) {
            throw nonInvertibleTransform(""invalid matrix element: "" + element);
        }

        return element;
    }","  public void test7()  throws Throwable  {
      double double0 = Matrices.checkElementForInverse((-36.0793765427));
}"
4998,"    public static double checkDeterminantForInverse(final double det) {
        if (!Vectors.isRealNonZero(det)) {
            throw nonInvertibleTransform(""matrix determinant is "" + det);
        }
        return det;
    }","  public void test8()  throws Throwable  {
      double double0 = Matrices.checkDeterminantForInverse((-993.051637824));
}"
4999,"    public static double checkElementForInverse(final double element) {
        if (!Double.isFinite(element)) {
            throw nonInvertibleTransform(""invalid matrix element: "" + element);
        }

        return element;
    }","  public void test9()  throws Throwable  {
      double double0 = Matrices.checkElementForInverse(2107.5753453928933);
}"
5000,"    public static double checkDeterminantForInverse(final double det) {
        if (!Vectors.isRealNonZero(det)) {
            throw nonInvertibleTransform(""matrix determinant is "" + det);
        }
        return det;
    }","  public void test10()  throws Throwable  {
      double double0 = Matrices.checkDeterminantForInverse(2107.5753453928933);
}"
5001,"    public static double determinant(
            final double a00, final double a01,
            final double a10, final double a11) {

        return (a00 * a11) - (a01 * a10);
    }","  public void test11()  throws Throwable  {
      double double0 = Matrices.determinant(0.0, 2107.5753453928933, 0.0, 0.0, 2107.5753453928933, 2107.5753453928933, 2107.5753453928933, 2107.5753453928933, 2107.5753453928933);
}"
5002,"    public static double determinant(
            final double a00, final double a01,
            final double a10, final double a11) {

        return (a00 * a11) - (a01 * a10);
    }","  public void test12()  throws Throwable  {
      double double0 = Matrices.determinant(2107.5753453928933, 2107.5753453928933, 2107.5753453928933, 2107.5753453928933);
}"
5003,"    public static double checkDeterminantForInverse(final double det) {
        if (!Vectors.isRealNonZero(det)) {
            throw nonInvertibleTransform(""matrix determinant is "" + det);
        }
        return det;
    }","  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrices.checkDeterminantForInverse(0.0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Matrix is not invertible; matrix determinant is 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Matrices"", e);
      }
  }"
5004,"    public static <T> List<T> convexPolygonToTriangleFan(final List<Vector3D> vertices,
           final Function<List<Vector3D>, T> fn) {
        final int size = vertices.size();
        if (size < TRIANGLE_VERTEX_COUNT) {
            throw new IllegalArgumentException(""Cannot create triangle fan: "" + TRIANGLE_VERTEX_COUNT +
                    "" or more vertices are required but found only "" + vertices.size());
        } else if (size == TRIANGLE_VERTEX_COUNT) {
            return Collections.singletonList(fn.apply(vertices));
        }

        final List<T> triangles = new ArrayList<>(size - 2);

        final int fanIdx = findBestTriangleFanIndex(vertices);
        int vertexIdx = (fanIdx + 1) % size;

        final Vector3D fanBase = vertices.get(fanIdx);
        Vector3D vertexA = vertices.get(vertexIdx);
        Vector3D vertexB;

        vertexIdx = (vertexIdx + 1) % size;
        while (vertexIdx != fanIdx) {
            vertexB = vertices.get(vertexIdx);

            triangles.add(fn.apply(Arrays.asList(fanBase, vertexA, vertexB)));

            vertexA = vertexB;
            vertexIdx = (vertexIdx + 1) % size;
        }

        return triangles;
    }","  public void test0()  throws Throwable  {
      Stack<Vector3D> stack0 = new Stack<Vector3D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.MINUS_Y;
      stack0.add((Vector3D) vector3D_Unit2);
      stack0.add(0, (Vector3D) vector3D_Unit0);
      stack0.insertElementAt(vector3D_Unit1, 0);
      Vector3D.Unit vector3D_Unit3 = Vector3D.Unit.MINUS_Z;
      stack0.add((Vector3D) vector3D_Unit3);
      Function<List<Vector3D>, Vector3D> function0 = (Function<List<Vector3D>, Vector3D>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(vector3D_Unit2, vector3D_Unit2).when(function0).apply(anyList());
      List<Vector3D> list0 = EuclideanUtils.convexPolygonToTriangleFan((List<Vector3D>) stack0, function0);
}"
5005,"    public static <T> List<T> convexPolygonToTriangleFan(final List<Vector3D> vertices,
           final Function<List<Vector3D>, T> fn) {
        final int size = vertices.size();
        if (size < TRIANGLE_VERTEX_COUNT) {
            throw new IllegalArgumentException(""Cannot create triangle fan: "" + TRIANGLE_VERTEX_COUNT +
                    "" or more vertices are required but found only "" + vertices.size());
        } else if (size == TRIANGLE_VERTEX_COUNT) {
            return Collections.singletonList(fn.apply(vertices));
        }

        final List<T> triangles = new ArrayList<>(size - 2);

        final int fanIdx = findBestTriangleFanIndex(vertices);
        int vertexIdx = (fanIdx + 1) % size;

        final Vector3D fanBase = vertices.get(fanIdx);
        Vector3D vertexA = vertices.get(vertexIdx);
        Vector3D vertexB;

        vertexIdx = (vertexIdx + 1) % size;
        while (vertexIdx != fanIdx) {
            vertexB = vertices.get(vertexIdx);

            triangles.add(fn.apply(Arrays.asList(fanBase, vertexA, vertexB)));

            vertexA = vertexB;
            vertexIdx = (vertexIdx + 1) % size;
        }

        return triangles;
    }","  public void test1()  throws Throwable  {
      Stack<Vector3D> stack0 = new Stack<Vector3D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.PLUS_X;
      stack0.add((Vector3D) vector3D_Unit2);
      stack0.add(0, (Vector3D) vector3D_Unit0);
      stack0.insertElementAt(vector3D_Unit1, 0);
      stack0.add((Vector3D) vector3D_Unit0);
      Function<List<Vector3D>, Vector3D> function0 = (Function<List<Vector3D>, Vector3D>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(vector3D_Unit2, vector3D_Unit2).when(function0).apply(anyList());
      List<Vector3D> list0 = EuclideanUtils.convexPolygonToTriangleFan((List<Vector3D>) stack0, function0);
}"
5006,"    public static <T> List<T> convexPolygonToTriangleFan(final List<Vector3D> vertices,
           final Function<List<Vector3D>, T> fn) {
        final int size = vertices.size();
        if (size < TRIANGLE_VERTEX_COUNT) {
            throw new IllegalArgumentException(""Cannot create triangle fan: "" + TRIANGLE_VERTEX_COUNT +
                    "" or more vertices are required but found only "" + vertices.size());
        } else if (size == TRIANGLE_VERTEX_COUNT) {
            return Collections.singletonList(fn.apply(vertices));
        }

        final List<T> triangles = new ArrayList<>(size - 2);

        final int fanIdx = findBestTriangleFanIndex(vertices);
        int vertexIdx = (fanIdx + 1) % size;

        final Vector3D fanBase = vertices.get(fanIdx);
        Vector3D vertexA = vertices.get(vertexIdx);
        Vector3D vertexB;

        vertexIdx = (vertexIdx + 1) % size;
        while (vertexIdx != fanIdx) {
            vertexB = vertices.get(vertexIdx);

            triangles.add(fn.apply(Arrays.asList(fanBase, vertexA, vertexB)));

            vertexA = vertexB;
            vertexIdx = (vertexIdx + 1) % size;
        }

        return triangles;
    }","  public void test2()  throws Throwable  {
      Stack<Vector3D> stack0 = new Stack<Vector3D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.PLUS_X;
      stack0.add((Vector3D) vector3D_Unit2);
      stack0.add(0, (Vector3D) vector3D_Unit0);
      stack0.insertElementAt(vector3D_Unit1, 0);
      stack0.add((Vector3D) vector3D_Unit0);
      Function<List<Vector3D>, Vector3D> function0 = (Function<List<Vector3D>, Vector3D>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(vector3D_Unit2, vector3D_Unit2).when(function0).apply(anyList());
      List<Vector3D> list0 = EuclideanUtils.convexPolygonToTriangleFan((List<Vector3D>) stack0, function0);
}"
5007,"    public static <T> List<T> convexPolygonToTriangleFan(final List<Vector3D> vertices,
           final Function<List<Vector3D>, T> fn) {
        final int size = vertices.size();
        if (size < TRIANGLE_VERTEX_COUNT) {
            throw new IllegalArgumentException(""Cannot create triangle fan: "" + TRIANGLE_VERTEX_COUNT +
                    "" or more vertices are required but found only "" + vertices.size());
        } else if (size == TRIANGLE_VERTEX_COUNT) {
            return Collections.singletonList(fn.apply(vertices));
        }

        final List<T> triangles = new ArrayList<>(size - 2);

        final int fanIdx = findBestTriangleFanIndex(vertices);
        int vertexIdx = (fanIdx + 1) % size;

        final Vector3D fanBase = vertices.get(fanIdx);
        Vector3D vertexA = vertices.get(vertexIdx);
        Vector3D vertexB;

        vertexIdx = (vertexIdx + 1) % size;
        while (vertexIdx != fanIdx) {
            vertexB = vertices.get(vertexIdx);

            triangles.add(fn.apply(Arrays.asList(fanBase, vertexA, vertexB)));

            vertexA = vertexB;
            vertexIdx = (vertexIdx + 1) % size;
        }

        return triangles;
    }","  public void test3()  throws Throwable  {
      Stack<Vector3D> stack0 = new Stack<Vector3D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      List<Vector3D> list0 = stack0.subList(0, 0);
      stack0.add((Vector3D) vector3D_Unit0);
      Function<List<Vector3D>, AffineTransformMatrix3D> function0 = (Function<List<Vector3D>, AffineTransformMatrix3D>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EuclideanUtils.convexPolygonToTriangleFan(list0, function0);
        fail(""Expecting exception: ConcurrentModificationException"");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.SubList"", e);
      }
  }"
5008,"    public static <T> List<T> convexPolygonToTriangleFan(final List<Vector3D> vertices,
           final Function<List<Vector3D>, T> fn) {
        final int size = vertices.size();
        if (size < TRIANGLE_VERTEX_COUNT) {
            throw new IllegalArgumentException(""Cannot create triangle fan: "" + TRIANGLE_VERTEX_COUNT +
                    "" or more vertices are required but found only "" + vertices.size());
        } else if (size == TRIANGLE_VERTEX_COUNT) {
            return Collections.singletonList(fn.apply(vertices));
        }

        final List<T> triangles = new ArrayList<>(size - 2);

        final int fanIdx = findBestTriangleFanIndex(vertices);
        int vertexIdx = (fanIdx + 1) % size;

        final Vector3D fanBase = vertices.get(fanIdx);
        Vector3D vertexA = vertices.get(vertexIdx);
        Vector3D vertexB;

        vertexIdx = (vertexIdx + 1) % size;
        while (vertexIdx != fanIdx) {
            vertexB = vertices.get(vertexIdx);

            triangles.add(fn.apply(Arrays.asList(fanBase, vertexA, vertexB)));

            vertexA = vertexB;
            vertexIdx = (vertexIdx + 1) % size;
        }

        return triangles;
    }","  public void test4()  throws Throwable  {
      Function<List<Vector3D>, LinkedList<Integer>> function0 = (Function<List<Vector3D>, LinkedList<Integer>>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EuclideanUtils.convexPolygonToTriangleFan((List<Vector3D>) null, function0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.EuclideanUtils"", e);
      }
  }"
5009,"    public static <T> List<T> convexPolygonToTriangleFan(final List<Vector3D> vertices,
           final Function<List<Vector3D>, T> fn) {
        final int size = vertices.size();
        if (size < TRIANGLE_VERTEX_COUNT) {
            throw new IllegalArgumentException(""Cannot create triangle fan: "" + TRIANGLE_VERTEX_COUNT +
                    "" or more vertices are required but found only "" + vertices.size());
        } else if (size == TRIANGLE_VERTEX_COUNT) {
            return Collections.singletonList(fn.apply(vertices));
        }

        final List<T> triangles = new ArrayList<>(size - 2);

        final int fanIdx = findBestTriangleFanIndex(vertices);
        int vertexIdx = (fanIdx + 1) % size;

        final Vector3D fanBase = vertices.get(fanIdx);
        Vector3D vertexA = vertices.get(vertexIdx);
        Vector3D vertexB;

        vertexIdx = (vertexIdx + 1) % size;
        while (vertexIdx != fanIdx) {
            vertexB = vertices.get(vertexIdx);

            triangles.add(fn.apply(Arrays.asList(fanBase, vertexA, vertexB)));

            vertexA = vertexB;
            vertexIdx = (vertexIdx + 1) % size;
        }

        return triangles;
    }","  public void test5()  throws Throwable  {
      Stack<Vector3D> stack0 = new Stack<Vector3D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Y;
      stack0.add((Vector3D) vector3D_Unit1);
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      stack0.add(vector3D0);
      stack0.add(0, (Vector3D) vector3D_Unit0);
      stack0.insertElementAt(vector3D_Unit1, 0);
      stack0.add((Vector3D) vector3D_Unit0);
      Function<List<Vector3D>, Vector3D> function0 = (Function<List<Vector3D>, Vector3D>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(vector3D_Unit0, vector3D_Unit0, vector3D0).when(function0).apply(anyList());
      List<Vector3D> list0 = EuclideanUtils.convexPolygonToTriangleFan((List<Vector3D>) stack0, function0);
}"
5010,"    public static <T> List<T> convexPolygonToTriangleFan(final List<Vector3D> vertices,
           final Function<List<Vector3D>, T> fn) {
        final int size = vertices.size();
        if (size < TRIANGLE_VERTEX_COUNT) {
            throw new IllegalArgumentException(""Cannot create triangle fan: "" + TRIANGLE_VERTEX_COUNT +
                    "" or more vertices are required but found only "" + vertices.size());
        } else if (size == TRIANGLE_VERTEX_COUNT) {
            return Collections.singletonList(fn.apply(vertices));
        }

        final List<T> triangles = new ArrayList<>(size - 2);

        final int fanIdx = findBestTriangleFanIndex(vertices);
        int vertexIdx = (fanIdx + 1) % size;

        final Vector3D fanBase = vertices.get(fanIdx);
        Vector3D vertexA = vertices.get(vertexIdx);
        Vector3D vertexB;

        vertexIdx = (vertexIdx + 1) % size;
        while (vertexIdx != fanIdx) {
            vertexB = vertices.get(vertexIdx);

            triangles.add(fn.apply(Arrays.asList(fanBase, vertexA, vertexB)));

            vertexA = vertexB;
            vertexIdx = (vertexIdx + 1) % size;
        }

        return triangles;
    }","  public void test6()  throws Throwable  {
      Stack<Vector3D> stack0 = new Stack<Vector3D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Y;
      stack0.add((Vector3D) vector3D_Unit1);
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      stack0.add(vector3D0);
      stack0.add(0, (Vector3D) vector3D_Unit0);
      stack0.insertElementAt(vector3D_Unit1, 0);
      stack0.add((Vector3D) vector3D_Unit0);
      Function<List<Vector3D>, Vector3D> function0 = (Function<List<Vector3D>, Vector3D>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(vector3D_Unit0, vector3D_Unit0, vector3D0).when(function0).apply(anyList());
      List<Vector3D> list0 = EuclideanUtils.convexPolygonToTriangleFan((List<Vector3D>) stack0, function0);
}"
5011,"    public static <T> List<T> convexPolygonToTriangleFan(final List<Vector3D> vertices,
           final Function<List<Vector3D>, T> fn) {
        final int size = vertices.size();
        if (size < TRIANGLE_VERTEX_COUNT) {
            throw new IllegalArgumentException(""Cannot create triangle fan: "" + TRIANGLE_VERTEX_COUNT +
                    "" or more vertices are required but found only "" + vertices.size());
        } else if (size == TRIANGLE_VERTEX_COUNT) {
            return Collections.singletonList(fn.apply(vertices));
        }

        final List<T> triangles = new ArrayList<>(size - 2);

        final int fanIdx = findBestTriangleFanIndex(vertices);
        int vertexIdx = (fanIdx + 1) % size;

        final Vector3D fanBase = vertices.get(fanIdx);
        Vector3D vertexA = vertices.get(vertexIdx);
        Vector3D vertexB;

        vertexIdx = (vertexIdx + 1) % size;
        while (vertexIdx != fanIdx) {
            vertexB = vertices.get(vertexIdx);

            triangles.add(fn.apply(Arrays.asList(fanBase, vertexA, vertexB)));

            vertexA = vertexB;
            vertexIdx = (vertexIdx + 1) % size;
        }

        return triangles;
    }","  public void test7()  throws Throwable  {
      Stack<Vector3D> stack0 = new Stack<Vector3D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      stack0.add((Vector3D) vector3D_Unit0);
      stack0.add((Vector3D) vector3D_Unit0);
      stack0.add(0, (Vector3D) vector3D_Unit0);
      stack0.insertElementAt(vector3D_Unit0, 0);
      Function<List<Vector3D>, Vector3D> function0 = (Function<List<Vector3D>, Vector3D>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EuclideanUtils.convexPolygonToTriangleFan((List<Vector3D>) stack0, function0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.Vectors"", e);
      }
  }"
5012,"    public static <T> List<T> convexPolygonToTriangleFan(final List<Vector3D> vertices,
           final Function<List<Vector3D>, T> fn) {
        final int size = vertices.size();
        if (size < TRIANGLE_VERTEX_COUNT) {
            throw new IllegalArgumentException(""Cannot create triangle fan: "" + TRIANGLE_VERTEX_COUNT +
                    "" or more vertices are required but found only "" + vertices.size());
        } else if (size == TRIANGLE_VERTEX_COUNT) {
            return Collections.singletonList(fn.apply(vertices));
        }

        final List<T> triangles = new ArrayList<>(size - 2);

        final int fanIdx = findBestTriangleFanIndex(vertices);
        int vertexIdx = (fanIdx + 1) % size;

        final Vector3D fanBase = vertices.get(fanIdx);
        Vector3D vertexA = vertices.get(vertexIdx);
        Vector3D vertexB;

        vertexIdx = (vertexIdx + 1) % size;
        while (vertexIdx != fanIdx) {
            vertexB = vertices.get(vertexIdx);

            triangles.add(fn.apply(Arrays.asList(fanBase, vertexA, vertexB)));

            vertexA = vertexB;
            vertexIdx = (vertexIdx + 1) % size;
        }

        return triangles;
    }","  public void test8()  throws Throwable  {
      ArrayList<Vector3D> arrayList0 = new ArrayList<Vector3D>();
      Function<List<Vector3D>, Vector3D> function0 = (Function<List<Vector3D>, Vector3D>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EuclideanUtils.convexPolygonToTriangleFan((List<Vector3D>) arrayList0, function0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot create triangle fan: 3 or more vertices are required but found only 0
         //
         verifyException(""org.apache.commons.geometry.euclidean.internal.EuclideanUtils"", e);
      }
  }"
5013,"    public static <T> List<T> convexPolygonToTriangleFan(final List<Vector3D> vertices,
           final Function<List<Vector3D>, T> fn) {
        final int size = vertices.size();
        if (size < TRIANGLE_VERTEX_COUNT) {
            throw new IllegalArgumentException(""Cannot create triangle fan: "" + TRIANGLE_VERTEX_COUNT +
                    "" or more vertices are required but found only "" + vertices.size());
        } else if (size == TRIANGLE_VERTEX_COUNT) {
            return Collections.singletonList(fn.apply(vertices));
        }

        final List<T> triangles = new ArrayList<>(size - 2);

        final int fanIdx = findBestTriangleFanIndex(vertices);
        int vertexIdx = (fanIdx + 1) % size;

        final Vector3D fanBase = vertices.get(fanIdx);
        Vector3D vertexA = vertices.get(vertexIdx);
        Vector3D vertexB;

        vertexIdx = (vertexIdx + 1) % size;
        while (vertexIdx != fanIdx) {
            vertexB = vertices.get(vertexIdx);

            triangles.add(fn.apply(Arrays.asList(fanBase, vertexA, vertexB)));

            vertexA = vertexB;
            vertexIdx = (vertexIdx + 1) % size;
        }

        return triangles;
    }","  public void test9()  throws Throwable  {
      Stack<Vector3D> stack0 = new Stack<Vector3D>();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      stack0.add((Vector3D) vector3D_Unit0);
      stack0.add((Vector3D) vector3D_Unit0);
      stack0.add(0, (Vector3D) vector3D_Unit0);
      Function<List<Vector3D>, Vector3D> function0 = (Function<List<Vector3D>, Vector3D>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(anyList());
      List<Vector3D> list0 = EuclideanUtils.convexPolygonToTriangleFan((List<Vector3D>) stack0, function0);
}"
5014,"    public String getFileName() {
        return fileName;
    }","  public void test0()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      AbstractGeometryIOMetadata abstractGeometryIOMetadata0 = new AbstractGeometryIOMetadata(""A"", charset0);
      String string0 = abstractGeometryIOMetadata0.getFileName();
}"
5015,"    public String getFileName() {
        return fileName;
    }","  public void test1()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      AbstractGeometryIOMetadata abstractGeometryIOMetadata0 = new AbstractGeometryIOMetadata("""", charset0);
      String string0 = abstractGeometryIOMetadata0.getFileName();
}"
5016,"    public Charset getCharset() {
        return charset;
    }","  public void test2()  throws Throwable  {
      AbstractGeometryIOMetadata abstractGeometryIOMetadata0 = new AbstractGeometryIOMetadata((String) null, (Charset) null);
      Charset charset0 = abstractGeometryIOMetadata0.getCharset();
}"
5017,"    public Charset getCharset() {
        return charset;
    }","  public void test3()  throws Throwable  {
      Charset charset0 = Charset.forName(""L4"");
      AbstractGeometryIOMetadata abstractGeometryIOMetadata0 = new AbstractGeometryIOMetadata("""", charset0);
      Charset charset1 = abstractGeometryIOMetadata0.getCharset();
}"
5018,"    public String getFileName() {
        return fileName;
    }","  public void test4()  throws Throwable  {
      AbstractGeometryIOMetadata abstractGeometryIOMetadata0 = new AbstractGeometryIOMetadata((String) null, (Charset) null);
      String string0 = abstractGeometryIOMetadata0.getFileName();
}"
5019,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName())
            .append(""[fileName= "")
            .append(getFileName())
            .append(']');

        return sb.toString();
    }","  public void test5()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      AbstractGeometryIOMetadata abstractGeometryIOMetadata0 = new AbstractGeometryIOMetadata(""org.pache.commns.geometry.core.partitining.test.TesPoinD"", charset0);
      String string0 = abstractGeometryIOMetadata0.toString();
}"
5020,"    public URL getUrl() {
        return url;
    }","  public void test0()  throws Throwable  {
      UrlGeometryInput urlGeometryInput0 = new UrlGeometryInput((URL) null);
      URL uRL0 = urlGeometryInput0.getUrl();
}"
5021,"    public URL getUrl() {
        return url;
    }","  public void test1()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""N"", ""P1~&QJ?"", 0, ""P1~&QJ?"", uRLStreamHandler0);
      UrlGeometryInput urlGeometryInput0 = new UrlGeometryInput(uRL0);
      URL uRL1 = urlGeometryInput0.getUrl();
}"
5022,"    public URL getUrl() {
        return url;
    }","  public void test2()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      UrlGeometryInput urlGeometryInput0 = new UrlGeometryInput(uRL0);
      URL uRL1 = urlGeometryInput0.getUrl();
}"
5023,"    public InputStream getInputStream() {
        return GeometryIOUtils.getUnchecked(() -> new BufferedInputStream(url.openStream()));
    }","  public void test3()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL(""http://www.someFakeButWellFormedURL.org/fooExample"");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, """");
      UrlGeometryInput urlGeometryInput0 = new UrlGeometryInput(uRL0);
      InputStream inputStream0 = urlGeometryInput0.getInputStream();
}"
5024,"    public InputStream getInputStream() {
        return GeometryIOUtils.getUnchecked(() -> new BufferedInputStream(url.openStream()));
    }","  public void test4()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      UrlGeometryInput urlGeometryInput0 = new UrlGeometryInput(uRL0);
      // Undeclared exception!
      try { 
        urlGeometryInput0.getInputStream();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // MockIOException: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5025,"    public URL getUrl() {
        return url;
    }","  public void test5()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""t5<HB"", """", 2, """", uRLStreamHandler0);
      Charset charset0 = Charset.defaultCharset();
      UrlGeometryInput urlGeometryInput0 = new UrlGeometryInput(uRL0, charset0);
      URL uRL1 = urlGeometryInput0.getUrl();
}"
5026,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName())
            .append(""[url= "")
            .append(getUrl())
            .append(']');

        return sb.toString();
    }","  public void test6()  throws Throwable  {
      UrlGeometryInput urlGeometryInput0 = new UrlGeometryInput((URL) null);
      String string0 = urlGeometryInput0.toString();
}"
5027,"    public InputStream getInputStream() {
        return GeometryIOUtils.getUnchecked(() -> new BufferedInputStream(url.openStream()));
    }","  public void test7()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      UrlGeometryInput urlGeometryInput0 = new UrlGeometryInput(uRL0);
      // Undeclared exception!
      try { 
        urlGeometryInput0.getInputStream();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.net.URL"", e);
      }
  }"
5028,"    public InputStream getInputStream() {
        return in;
    }","  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)1);
      Charset charset0 = Charset.defaultCharset();
      StreamGeometryInput streamGeometryInput0 = new StreamGeometryInput(byteArrayInputStream0, ""=K8}#6-:"", charset0);
      InputStream inputStream0 = streamGeometryInput0.getInputStream();
}"
5029,"    public String getFileName() {
        return fileName;
    }","  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StreamGeometryInput streamGeometryInput0 = new StreamGeometryInput(byteArrayInputStream0);
}"
5030,"    public InputStream getInputStream() {
        return in;
    }","  public void test2()  throws Throwable  {
      StreamGeometryInput streamGeometryInput0 = new StreamGeometryInput((InputStream) null, "", "");
      InputStream inputStream0 = streamGeometryInput0.getInputStream();
}"
5031,"    public InputStream getInputStream() {
        return GeometryIOUtils.getUnchecked(() -> new BufferedInputStream(Files.newInputStream(file)));
    }","  public void test0()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      Path path0 = mockFile0.toPath();
      FileGeometryInput fileGeometryInput0 = new FileGeometryInput(path0);
      InputStream inputStream0 = fileGeometryInput0.getInputStream();
}"
5032,"    public Path getFile() {
        return file;
    }","  public void test1()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""aT%okBXgrqEEIR<M"");
      Path path0 = mockFile0.toPath();
      FileGeometryInput fileGeometryInput0 = new FileGeometryInput(path0);
      Path path1 = fileGeometryInput0.getFile();
}"
5033,"    public InputStream getInputStream() {
        return GeometryIOUtils.getUnchecked(() -> new BufferedInputStream(Files.newInputStream(file)));
    }","  public void test2()  throws Throwable  {
      MockFile mockFile0 = new MockFile("")"");
      Path path0 = mockFile0.toPath();
      FileGeometryInput fileGeometryInput0 = new FileGeometryInput(path0);
      // Undeclared exception!
      try { 
        fileGeometryInput0.getInputStream();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // NoSuchFileException: )
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5034,"    public Path getFile() {
        return file;
    }","  public void test3()  throws Throwable  {
      FileGeometryInput fileGeometryInput0 = new FileGeometryInput((Path) null);
      Path path0 = fileGeometryInput0.getFile();
}"
5035,"    public String getFileName() {
        return fileName;
    }","  public void test4()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      FileGeometryInput fileGeometryInput0 = new FileGeometryInput(path0, charset0);
}"
5036,"    public InputStream getInputStream() {
        return GeometryIOUtils.getUnchecked(() -> new BufferedInputStream(Files.newInputStream(file)));
    }","  public void test5()  throws Throwable  {
      FileGeometryInput fileGeometryInput0 = new FileGeometryInput((Path) null);
      // Undeclared exception!
      try { 
        fileGeometryInput0.getInputStream();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.file.Files"", e);
      }
  }"
5037,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName())
            .append(""[file= "")
            .append(getFile())
            .append(']');

        return sb.toString();
    }","  public void test6()  throws Throwable  {
      FileGeometryInput fileGeometryInput0 = new FileGeometryInput((Path) null);
      String string0 = fileGeometryInput0.toString();
}"
5038,"    public static boolean isDecimalPart(final int ch) {
        return Character.isDigit(ch) ||
            ch == '-' ||
            ch == '+' ||
            ch == '.' ||
            ch == 'e' ||
            ch == 'E';
    }","  public void test0()  throws Throwable  {
      boolean boolean0 = SimpleTextParser.isDecimalPart(787);
}"
5039,"    public static boolean isIntegerPart(final int ch) {
        return Character.isDigit(ch) ||
                ch == '-' ||
                ch == '+';
    }","  public void test1()  throws Throwable  {
      boolean boolean0 = SimpleTextParser.isIntegerPart(0);
}"
5040,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test2()  throws Throwable  {
      StringReader stringReader0 = new StringReader("")"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.parseError(0, 512, ""x"");
}"
5041,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test3()  throws Throwable  {
      StringReader stringReader0 = new StringReader("")"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.parseError(0, 512, ""x"");
}"
5042,"    public int getMaxStringLength() {
        return maxStringLength;
    }","  public void test4()  throws Throwable  {
      StringReader stringReader0 = new StringReader("")"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.parseError(0, 512, ""x"");
}"
5043,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test5()  throws Throwable  {
      StringReader stringReader0 = new StringReader("")"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.parseError(0, 512, ""x"");
}"
5044,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test6()  throws Throwable  {
      StringReader stringReader0 = new StringReader("")"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.parseError(0, 512, ""x"");
}"
5045,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test7()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""PYZrO(1^ ["");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.nextLine();
      boolean boolean0 = simpleTextParser0.tryMatchIgnoreCase(""PYZrO(1^ ["");
}"
5046,"    public boolean tryMatchIgnoreCase(final String expected) {
        return matchInternal(expected, false, false);
    }","  public void test8()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""PYZrO(1^ ["");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.nextLine();
      boolean boolean0 = simpleTextParser0.tryMatchIgnoreCase(""PYZrO(1^ ["");
}"
5047,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test9()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""org.apache.commons.geometry.core.partitioning.test.TestPoint2D"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      simpleTextParser0.nextWithLineContinuation('D', intPredicate0);
      boolean boolean0 = simpleTextParser0.tryMatch("""");
}"
5048,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""org.apache.commons.geometry.core.partitioning.test.TestPoint2D"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      simpleTextParser0.nextWithLineContinuation('D', intPredicate0);
      boolean boolean0 = simpleTextParser0.tryMatch("""");
}"
5049,"    public boolean tryMatch(final String expected) {
        return matchInternal(expected, true, false);
    }","  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""org.apache.commons.geometry.core.partitioning.test.TestPoint2D"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      simpleTextParser0.nextWithLineContinuation('D', intPredicate0);
      boolean boolean0 = simpleTextParser0.tryMatch("""");
}"
5050,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 356, 579);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      simpleTextParser0.next(intPredicate0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = """";
      int int0 = simpleTextParser0.tryChooseIgnoreCase(stringArray0);
}"
5051,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 356, 579);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      simpleTextParser0.next(intPredicate0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = """";
      int int0 = simpleTextParser0.tryChooseIgnoreCase(stringArray0);
}"
5052,"    public int tryChooseIgnoreCase(final String... expected) {
        return tryChooseIgnoreCase(Arrays.asList(expected));
    }","  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 356, 579);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      simpleTextParser0.next(intPredicate0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = """";
      int int0 = simpleTextParser0.tryChooseIgnoreCase(stringArray0);
}"
5053,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""794gu!W3CW2:or(Z"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextAlphanumeric();
      String[] stringArray0 = new String[6];
      int int0 = simpleTextParser1.tryChooseIgnoreCase(stringArray0);
}"
5054,"    public int tryChooseIgnoreCase(final String... expected) {
        return tryChooseIgnoreCase(Arrays.asList(expected));
    }","  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""794gu!W3CW2:or(Z"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextAlphanumeric();
      String[] stringArray0 = new String[6];
      int int0 = simpleTextParser1.tryChooseIgnoreCase(stringArray0);
}"
5055,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.discardWithLineContinuation('z', 1958);
      simpleTextParser0.nextLine();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ""IntSummaryStatistics{count=0, sum=0, min=2147483647, average=0.000000, max=-2147483648}"";
      int int0 = simpleTextParser0.tryChoose(stringArray0);
}"
5056,"    public int tryChoose(final String... expected) {
        return tryChoose(Arrays.asList(expected));
    }","  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.discardWithLineContinuation('z', 1958);
      simpleTextParser0.nextLine();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ""IntSummaryStatistics{count=0, sum=0, min=2147483647, average=0.000000, max=-2147483648}"";
      int int0 = simpleTextParser0.tryChoose(stringArray0);
}"
5057,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      SimpleTextParser simpleTextParser1 = simpleTextParser0.consume(1176, (IntConsumer) intSummaryStatistics0);
      simpleTextParser1.nextLine();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      int int0 = simpleTextParser0.tryChoose((List<String>) linkedList0);
}"
5058,"    public int tryChoose(final String... expected) {
        return tryChoose(Arrays.asList(expected));
    }","  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      SimpleTextParser simpleTextParser1 = simpleTextParser0.consume(1176, (IntConsumer) intSummaryStatistics0);
      simpleTextParser1.nextLine();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      int int0 = simpleTextParser0.tryChoose((List<String>) linkedList0);
}"
5059,"    public boolean hasNonEmptyToken() {
        return currentToken != null && !currentToken.isEmpty();
    }","  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Dg"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextAlphanumeric();
      int int0 = simpleTextParser1.peekChar();
}"
5060,"    public int peekChar() {
        return buffer.peek();
    }","  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Dg"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextAlphanumeric();
      int int0 = simpleTextParser1.peekChar();
}"
5061,"    public String peek(final int len) {
        validateRequestedStringLength(len);

        return buffer.peekString(len);
    }","  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Initial buffer capacity must be greater than 0; was "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      String string0 = simpleTextParser0.peek(intPredicate0);
}"
5062,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Initial buffer capacity must be greater than 0; was "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      String string0 = simpleTextParser0.peek(intPredicate0);
}"
5063,"    public String peek(final int len) {
        validateRequestedStringLength(len);

        return buffer.peekString(len);
    }","  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Initial buffer capacity must be greater than 0; was "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      String string0 = simpleTextParser0.peek(intPredicate0);
}"
5064,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Initial buffer capacity must be greater than 0; was "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      String string0 = simpleTextParser0.peek(intPredicate0);
}"
5065,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Initial buffer capacity must be greater than 0; was "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      String string0 = simpleTextParser0.peek(intPredicate0);
}"
5066,"    public int getMaxStringLength() {
        return maxStringLength;
    }","  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Initial buffer capacity must be greater than 0; was "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      String string0 = simpleTextParser0.peek(intPredicate0);
}"
5067,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Initial buffer capacity must be greater than 0; was "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      String string0 = simpleTextParser0.peek(intPredicate0);
}"
5068,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.peek(0);
}"
5069,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.peek(0);
}"
5070,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.peek(0);
}"
5071,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.peek(0);
}"
5072,"    public int getMaxStringLength() {
        return maxStringLength;
    }","  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.peek(0);
}"
5073,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""!5R49I[rLd#xe"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.peek(97);
}"
5074,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""!5R49I[rLd#xe"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.peek(97);
}"
5075,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""!5R49I[rLd#xe"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.peek(97);
}"
5076,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""!5R49I[rLd#xe"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.peek(97);
}"
5077,"    public int getMaxStringLength() {
        return maxStringLength;
    }","  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""!5R49I[rLd#xe"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.peek(97);
}"
5078,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.discard(1189);
      simpleTextParser0.setLineNumber(0);
      simpleTextParser0.nextWithLineContinuation('c', (IntPredicate) null);
}"
5079,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.discard(1189);
      simpleTextParser0.setColumnNumber(0);
      simpleTextParser0.nextWithLineContinuation('c', (IntPredicate) null);
}"
5080,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""("");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setColumnNumber((-1031));
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      simpleTextParser0.nextWithLineContinuation('i', intPredicate0);
}"
5081,"    public int getMaxStringLength() {
        return maxStringLength;
    }","  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Initial buffer capacity must be greater than 0; was "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setMaxStringLength(0);
      simpleTextParser0.nextWithLineContinuation('G', 0);
}"
5082,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setLineNumber(0);
      simpleTextParser0.nextWithLineContinuation('T', 0);
}"
5083,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setLineNumber(0);
      simpleTextParser0.nextWithLineContinuation('T', 0);
}"
5084,"    public boolean hasNonEmptyToken() {
        return currentToken != null && !currentToken.isEmpty();
    }","  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""("");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setLineNumber((-702));
      simpleTextParser0.nextWithLineContinuation('h', (int) 'h');
}"
5085,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setColumnNumber(0);
      simpleTextParser0.nextWithLineContinuation('T', 0);
}"
5086,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setColumnNumber(0);
      simpleTextParser0.nextWithLineContinuation('T', 0);
}"
5087,"    public boolean hasNonEmptyToken() {
        return currentToken != null && !currentToken.isEmpty();
    }","  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Requested string length of "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setColumnNumber((-710));
      simpleTextParser0.nextWithLineContinuation('q', 32);
}"
5088,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""("");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setLineNumber((-732));
      simpleTextParser0.nextLine();
}"
5089,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      SimpleTextParser simpleTextParser1 = simpleTextParser0.discard(1189);
      simpleTextParser0.setColumnNumber(0);
      simpleTextParser1.nextLine();
}"
5090,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      SimpleTextParser simpleTextParser1 = simpleTextParser0.discard(1189);
      simpleTextParser0.setColumnNumber(0);
      simpleTextParser1.nextLine();
}"
5091,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""!5R49I[rLd#xe"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setLineNumber((-802));
      simpleTextParser0.nextAlphanumeric();
}"
5092,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.discard(1189);
      simpleTextParser0.setColumnNumber(0);
      simpleTextParser0.nextAlphanumeric();
}"
5093,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      simpleTextParser0.setLineNumber(0);
      simpleTextParser0.next(intPredicate0);
}"
5094,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      simpleTextParser0.setLineNumber(0);
      simpleTextParser0.next(intPredicate0);
}"
5095,"    public boolean hasNonEmptyToken() {
        return currentToken != null && !currentToken.isEmpty();
    }","  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""("");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setLineNumber((-732));
      simpleTextParser0.next((int) 'i');
}"
5096,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""r"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      simpleTextParser0.nextWithLineContinuation('<', intPredicate0);
      simpleTextParser0.setColumnNumber(0);
      SimpleTextParser simpleTextParser1 = simpleTextParser0.matchIgnoreCase("""");
}"
5097,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""r"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      simpleTextParser0.nextWithLineContinuation('<', intPredicate0);
      simpleTextParser0.setColumnNumber(0);
      SimpleTextParser simpleTextParser1 = simpleTextParser0.matchIgnoreCase("""");
}"
5098,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""/zop#xq,ewf=5"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextLine();
      simpleTextParser1.next(15);
      simpleTextParser0.match((String) null);
}"
5099,"    public static boolean isWhitespace(final int ch) {
        return Character.isWhitespace(ch);
    }","  public void test61()  throws Throwable  {
      boolean boolean0 = SimpleTextParser.isWhitespace(9);
}"
5100,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""bsfJ<Qh"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.hasMoreCharacters();
}"
5101,"    public int getMaxStringLength() {
        return maxStringLength;
    }","  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""bsfJ<Qh"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.hasMoreCharacters();
}"
5102,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""bsfJ<Qh"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.hasMoreCharacters();
}"
5103,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""bsfJ<Qh"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.hasMoreCharacters();
}"
5104,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""bsfJ<Qh"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.hasMoreCharacters();
}"
5105,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""!5R49I[rLd#xe"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setLineNumber((-802));
      int int0 = simpleTextParser0.getLineNumber();
}"
5106,"    public boolean hasNonEmptyToken() {
        return currentToken != null && !currentToken.isEmpty();
    }","  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("")"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.next(512);
      int int0 = simpleTextParser0.getCurrentTokenLineNumber();
}"
5107,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("")"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.next(512);
      int int0 = simpleTextParser0.getCurrentTokenLineNumber();
}"
5108,"    public boolean hasNonEmptyToken() {
        return currentToken != null && !currentToken.isEmpty();
    }","  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Initial buffer capacity must be greater than 0; was "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextWithLineContinuation('c', 46);
      int int0 = simpleTextParser1.getCurrentTokenColumnNumber();
}"
5109,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Initial buffer capacity must be greater than 0; was "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextWithLineContinuation('c', 46);
      int int0 = simpleTextParser1.getCurrentTokenColumnNumber();
}"
5110,"    public boolean hasNonEmptyToken() {
        return currentToken != null && !currentToken.isEmpty();
    }","  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""5F6f:*Y'>'^BeHk9>:"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(intPredicate0).test(anyInt());
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextWithLineContinuation('s', intPredicate0);
      String string0 = simpleTextParser1.getCurrentToken();
}"
5111,"    public String getCurrentToken() {
        return currentToken;
    }","  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""5F6f:*Y'>'^BeHk9>:"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(intPredicate0).test(anyInt());
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextWithLineContinuation('s', intPredicate0);
      String string0 = simpleTextParser1.getCurrentToken();
}"
5112,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""5F6f:*Y'>'^BeHk9>:"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextWithLineContinuation('s', intPredicate0);
      String string0 = simpleTextParser1.getCurrentToken();
}"
5113,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""5F6f:*Y'>'^BeHk9>:"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextWithLineContinuation('s', intPredicate0);
      String string0 = simpleTextParser1.getCurrentToken();
}"
5114,"    public String getCurrentToken() {
        return currentToken;
    }","  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""5F6f:*Y'>'^BeHk9>:"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextWithLineContinuation('s', intPredicate0);
      String string0 = simpleTextParser1.getCurrentToken();
}"
5115,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test77()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.nextLine();
      simpleTextParser0.setLineNumber((-16));
      simpleTextParser0.discardWithLineContinuation('x', (IntPredicate) null);
}"
5116,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test78()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setLineNumber(0);
      simpleTextParser0.nextLine();
      simpleTextParser0.discardWithLineContinuation('x', (IntPredicate) null);
}"
5117,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""]"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 36);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.setColumnNumber((-1));
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      simpleTextParser0.discardWithLineContinuation('(', intPredicate0);
}"
5118,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test80()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Requested string length of "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setLineNumber((-710));
      simpleTextParser0.discardWithLineContinuation('%', 4676);
}"
5119,"    public SimpleTextParser matchIgnoreCase(final String expected) {
        matchInternal(expected, false, true);
        return this;
    }","  public void test81()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Initial buffer capacity must be greater than 0; was "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(intPredicate0).test(anyInt());
      simpleTextParser0.nextWithLineContinuation('G', intPredicate0);
      IntPredicate intPredicate1 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate1).test(anyInt());
      SimpleTextParser simpleTextParser1 = simpleTextParser0.discardWithLineContinuation('G', intPredicate1);
      simpleTextParser0.readChar();
      // Undeclared exception!
      try { 
        simpleTextParser1.matchIgnoreCase(""Initial buffer capacity must be greater than 0; was "");
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: expected [Initial buffer capacity must be greater than 0; was ] but found [I]
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5120,"    public boolean hasNonEmptyToken() {
        return currentToken != null && !currentToken.isEmpty();
    }","  public void test82()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setLineNumber(0);
      simpleTextParser0.nextAlphanumeric();
      simpleTextParser0.discardWhitespace();
}"
5121,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test83()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setColumnNumber(0);
      simpleTextParser0.nextAlphanumeric();
      simpleTextParser0.discardWhitespace();
}"
5122,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test84()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
}"
5123,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test85()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setColumnNumber(0);
      simpleTextParser0.discardWhitespace();
}"
5124,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test86()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""]"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 36);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.setColumnNumber((-1));
      simpleTextParser0.discardWhitespace();
}"
5125,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test87()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""!5R49I[rLd#xe"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setLineNumber((-802));
      simpleTextParser0.discardNewLineSequence();
}"
5126,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test88()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setLineNumber(0);
      simpleTextParser0.nextLine();
      simpleTextParser0.discardNewLineSequence();
}"
5127,"    public boolean hasNonEmptyToken() {
        return currentToken != null && !currentToken.isEmpty();
    }","  public void test89()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setColumnNumber(0);
      simpleTextParser0.nextLine();
      simpleTextParser0.discardNewLineSequence();
}"
5128,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test90()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
}"
5129,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test91()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setColumnNumber(0);
      simpleTextParser0.discardNewLineSequence();
}"
5130,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test92()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
}"
5131,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test93()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setLineNumber(0);
      simpleTextParser0.discardLineWhitespace();
}"
5132,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test94()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""jS;mUI"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 356, 579);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.setLineNumber((-590));
      simpleTextParser0.discardLineWhitespace();
}"
5133,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test95()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
}"
5134,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test96()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setColumnNumber(0);
      simpleTextParser0.discardLineWhitespace();
}"
5135,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test97()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""794gu!W3CW2:or(Z"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setColumnNumber((-892));
      simpleTextParser0.discardLineWhitespace();
}"
5136,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test98()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 356, 579);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.setLineNumber((-590));
      simpleTextParser0.discardLine();
}"
5137,"    public boolean hasNonEmptyToken() {
        return currentToken != null && !currentToken.isEmpty();
    }","  public void test99()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setLineNumber(0);
      simpleTextParser0.nextAlphanumeric();
      simpleTextParser0.discardLine();
}"
5138,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setColumnNumber(0);
      simpleTextParser0.nextAlphanumeric();
      simpleTextParser0.discardLine();
}"
5139,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.discard(1189);
      simpleTextParser0.setColumnNumber(0);
      simpleTextParser0.discardLine();
}"
5140,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Reader cannot be null"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setColumnNumber((-97));
      simpleTextParser0.discardLine();
}"
5141,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
}"
5142,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      simpleTextParser0.setLineNumber(0);
      simpleTextParser0.discard(intPredicate0);
}"
5143,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""("");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setLineNumber((-702));
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      simpleTextParser0.discard(intPredicate0);
}"
5144,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
}"
5145,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      simpleTextParser0.setColumnNumber(0);
      simpleTextParser0.discard(intPredicate0);
}"
5146,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
}"
5147,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setLineNumber(0);
      simpleTextParser0.discard(0);
}"
5148,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""794gu!W3CW2:or(Z"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextAlphanumeric();
      simpleTextParser1.discard(37);
}"
5149,"    public boolean hasNonEmptyToken() {
        return currentToken != null && !currentToken.isEmpty();
    }","  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""794gu!W3CW2:or(Z"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextAlphanumeric();
      simpleTextParser1.discard(37);
}"
5150,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""794gu!W3CW2:or(Z"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setColumnNumber((-892));
      simpleTextParser0.discard(37);
}"
5151,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""("");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setLineNumber((-732));
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      LongSummaryStatistics longSummaryStatistics0 = new LongSummaryStatistics();
      simpleTextParser0.consumeWithLineContinuation('h', intPredicate0, (IntConsumer) longSummaryStatistics0);
}"
5152,"    public boolean hasNonEmptyToken() {
        return currentToken != null && !currentToken.isEmpty();
    }","  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""xzLG"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 45);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.nextAlphanumeric();
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      simpleTextParser0.consumeWithLineContinuation(':', intPredicate0, (IntConsumer) intSummaryStatistics0);
}"
5153,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Requested string length of "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setColumnNumber((-1));
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      simpleTextParser0.consumeWithLineContinuation('q', intPredicate0, (IntConsumer) null);
}"
5154,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 356, 579);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      LongSummaryStatistics longSummaryStatistics0 = new LongSummaryStatistics();
      simpleTextParser0.setLineNumber((-590));
      simpleTextParser0.consumeWithLineContinuation('=', 579, (IntConsumer) longSummaryStatistics0);
}"
5155,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.nextLine();
      simpleTextParser0.setColumnNumber(0);
      LongSummaryStatistics longSummaryStatistics0 = new LongSummaryStatistics();
      simpleTextParser0.consumeWithLineContinuation('`', 3, (IntConsumer) longSummaryStatistics0);
}"
5156,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test118()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""]"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 36);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.setColumnNumber((-1));
      LongSummaryStatistics longSummaryStatistics0 = new LongSummaryStatistics();
      simpleTextParser0.consumeWithLineContinuation(']', (-1), (IntConsumer) longSummaryStatistics0);
}"
5157,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.discard(1189);
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      simpleTextParser0.setLineNumber(0);
      simpleTextParser0.consume((IntPredicate) null, (IntConsumer) intSummaryStatistics0);
}"
5158,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test120()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""!5R49I[rLd#xe"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      SimpleTextParser simpleTextParser1 = simpleTextParser0.discardLine();
      simpleTextParser0.setLineNumber((-802));
      LongSummaryStatistics longSummaryStatistics0 = new LongSummaryStatistics();
      simpleTextParser1.consume((IntPredicate) null, (IntConsumer) longSummaryStatistics0);
}"
5159,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""!5R49I[rLd#xe"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      SimpleTextParser simpleTextParser1 = simpleTextParser0.discardLine();
      simpleTextParser0.setLineNumber((-802));
      LongSummaryStatistics longSummaryStatistics0 = new LongSummaryStatistics();
      simpleTextParser1.consume((IntPredicate) null, (IntConsumer) longSummaryStatistics0);
}"
5160,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.discard(1189);
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      simpleTextParser0.setColumnNumber(0);
      simpleTextParser0.consume((IntPredicate) null, (IntConsumer) intSummaryStatistics0);
}"
5161,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""]"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 36);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.setColumnNumber((-1));
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      LongSummaryStatistics longSummaryStatistics0 = new LongSummaryStatistics();
      simpleTextParser0.consume(intPredicate0, (IntConsumer) longSummaryStatistics0);
}"
5162,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
}"
5163,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      simpleTextParser0.setLineNumber(0);
      simpleTextParser0.consume((-2158), (IntConsumer) intSummaryStatistics0);
}"
5164,"    public boolean hasNonEmptyToken() {
        return currentToken != null && !currentToken.isEmpty();
    }","  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""49hp<sq8v(JE\""bgzdyM"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.nextLine();
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      simpleTextParser0.consume((-559), (IntConsumer) intSummaryStatistics0);
}"
5165,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
}"
5166,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      simpleTextParser0.setColumnNumber(0);
      simpleTextParser0.consume((-1700), (IntConsumer) intSummaryStatistics0);
}"
5167,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""("");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.setColumnNumber((-1));
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      simpleTextParser0.consume((-879), (IntConsumer) intSummaryStatistics0);
}"
5168,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test130()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextLine();
      String[] stringArray0 = new String[1];
      int int0 = simpleTextParser1.chooseIgnoreCase(stringArray0);
}"
5169,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test131()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextLine();
      String[] stringArray0 = new String[1];
      int int0 = simpleTextParser1.chooseIgnoreCase(stringArray0);
}"
5170,"    public int chooseIgnoreCase(final String... expected) {
        return chooseIgnoreCase(Arrays.asList(expected));
    }","  public void test132()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextLine();
      String[] stringArray0 = new String[1];
      int int0 = simpleTextParser1.chooseIgnoreCase(stringArray0);
}"
5171,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("")"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.next(512);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "")"";
      int int0 = simpleTextParser0.choose(stringArray0);
}"
5172,"    public int choose(final String... expected) {
        return choose(Arrays.asList(expected));
    }","  public void test134()  throws Throwable  {
      StringReader stringReader0 = new StringReader("")"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.next(512);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "")"";
      int int0 = simpleTextParser0.choose(stringArray0);
}"
5173,"    public boolean hasNonEmptyToken() {
        return currentToken != null && !currentToken.isEmpty();
    }","  public void test135()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""/zop#xq,ewf=5"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextLine();
      simpleTextParser1.next(15);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ""/zop#xq,ewf=5"";
      int int0 = simpleTextParser1.choose(stringArray0);
}"
5174,"    public int choose(final String... expected) {
        return choose(Arrays.asList(expected));
    }","  public void test136()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""/zop#xq,ewf=5"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextLine();
      simpleTextParser1.next(15);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ""/zop#xq,ewf=5"";
      int int0 = simpleTextParser1.choose(stringArray0);
}"
5175,"    public IllegalStateException unexpectedToken(final String expected) {
        return unexpectedToken(expected, null);
    }","  public void test137()  throws Throwable  {
      SimpleTextParser simpleTextParser0 = new SimpleTextParser((CharReadBuffer) null);
      // Undeclared exception!
      try { 
        simpleTextParser0.unexpectedToken(""*1Q]5nW!g"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
5176,"    public IllegalStateException unexpectedToken(final String expected) {
        return unexpectedToken(expected, null);
    }","  public void test138()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""("");
      stringReader0.close();
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      // Undeclared exception!
      try { 
        simpleTextParser0.unexpectedToken(""("");
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5177,"    public int tryChooseIgnoreCase(final String... expected) {
        return tryChooseIgnoreCase(Arrays.asList(expected));
    }","  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""9@o=Mw3Tx-O@$o5*T<"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 629);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      // Undeclared exception!
      try { 
        simpleTextParser0.tryChooseIgnoreCase((String[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
5178,"    public int tryChooseIgnoreCase(final String... expected) {
        return tryChooseIgnoreCase(Arrays.asList(expected));
    }","  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""'U"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.nextWithLineContinuation('+', 3);
      // Undeclared exception!
      try { 
        simpleTextParser0.tryChooseIgnoreCase((List<String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.SimpleTextParser"", e);
      }
  }"
5179,"    public int tryChoose(final String... expected) {
        return tryChoose(Arrays.asList(expected));
    }","  public void test141()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""xzLG"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 45);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      // Undeclared exception!
      try { 
        simpleTextParser0.tryChoose((String[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
5180,"    public int tryChoose(final String... expected) {
        return tryChoose(Arrays.asList(expected));
    }","  public void test142()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""kK[."");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1382, 1382);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.nextLine();
      // Undeclared exception!
      try { 
        simpleTextParser0.tryChoose((List<String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.SimpleTextParser"", e);
      }
  }"
5181,"    public int tryChoose(final String... expected) {
        return tryChoose(Arrays.asList(expected));
    }","  public void test143()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Reader cannot be null"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        simpleTextParser0.tryChoose((List<String>) linkedList0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // No token has been read from the character stream
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.SimpleTextParser"", e);
      }
  }"
5182,"    public int readChar() {
        final int value = buffer.read();
        if (value == LF ||
                (value == CR && peekChar() != LF)) {
            ++lineNumber;
            columnNumber = 1;
        } else if (value != EOF) {
            ++columnNumber;
        }

        return value;
    }","  public void test144()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Initial buffer capacity must be greater than 0; was "");
      stringReader0.close();
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 69, 94);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      // Undeclared exception!
      try { 
        simpleTextParser0.readChar();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5183,"    public int peekChar() {
        return buffer.peek();
    }","  public void test145()  throws Throwable  {
      SimpleTextParser simpleTextParser0 = new SimpleTextParser((CharReadBuffer) null);
      // Undeclared exception!
      try { 
        simpleTextParser0.peekChar();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
5184,"    public String peek(final int len) {
        validateRequestedStringLength(len);

        return buffer.peekString(len);
    }","  public void test146()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""sF?E}"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      // Undeclared exception!
      try { 
        simpleTextParser0.peek((IntPredicate) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.SimpleTextParser$StringCollector"", e);
      }
  }"
5185,"    public SimpleTextParser nextWithLineContinuation(final char lineContinuationChar, final int len) {
        validateRequestedStringLength(len);

        final int line = getLineNumber();
        final int col = getColumnNumber();

        String token = null;
        if (hasMoreCharacters()) {
            final StringBuilder sb = new StringBuilder(len);

            consumeWithLineContinuation(lineContinuationChar, len,
                    ch -> sb.append((char) ch));

            token = sb.toString();
        }

        setToken(line, col, token);

        return this;
    }","  public void test147()  throws Throwable  {
      StringReader stringReader0 = new StringReader("";W3aT4g1-h"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      // Undeclared exception!
      try { 
        simpleTextParser0.nextWithLineContinuation('P', (IntPredicate) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.SimpleTextParser$StringCollector"", e);
      }
  }"
5186,"    public SimpleTextParser nextWithLineContinuation(final char lineContinuationChar, final int len) {
        validateRequestedStringLength(len);

        final int line = getLineNumber();
        final int col = getColumnNumber();

        String token = null;
        if (hasMoreCharacters()) {
            final StringBuilder sb = new StringBuilder(len);

            consumeWithLineContinuation(lineContinuationChar, len,
                    ch -> sb.append((char) ch));

            token = sb.toString();
        }

        setToken(line, col, token);

        return this;
    }","  public void test148()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""@jKbR+BI/X*<z=( G;"");
      stringReader0.close();
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 544, 97);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTextParser0.nextWithLineContinuation('Z', intPredicate0);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5187,"    public SimpleTextParser nextWithLineContinuation(final char lineContinuationChar, final int len) {
        validateRequestedStringLength(len);

        final int line = getLineNumber();
        final int col = getColumnNumber();

        String token = null;
        if (hasMoreCharacters()) {
            final StringBuilder sb = new StringBuilder(len);

            consumeWithLineContinuation(lineContinuationChar, len,
                    ch -> sb.append((char) ch));

            token = sb.toString();
        }

        setToken(line, col, token);

        return this;
    }","  public void test149()  throws Throwable  {
      SimpleTextParser simpleTextParser0 = new SimpleTextParser((CharReadBuffer) null);
      // Undeclared exception!
      try { 
        simpleTextParser0.nextWithLineContinuation('q', 6);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
5188,"    public SimpleTextParser nextWithLineContinuation(final char lineContinuationChar, final int len) {
        validateRequestedStringLength(len);

        final int line = getLineNumber();
        final int col = getColumnNumber();

        String token = null;
        if (hasMoreCharacters()) {
            final StringBuilder sb = new StringBuilder(len);

            consumeWithLineContinuation(lineContinuationChar, len,
                    ch -> sb.append((char) ch));

            token = sb.toString();
        }

        setToken(line, col, token);

        return this;
    }","  public void test150()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      // Undeclared exception!
      try { 
        simpleTextParser0.nextWithLineContinuation('8', (-1804));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Requested string length cannot be negative; was -1804
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.SimpleTextParser"", e);
      }
  }"
5189,"    public SimpleTextParser nextWithLineContinuation(final char lineContinuationChar, final int len) {
        validateRequestedStringLength(len);

        final int line = getLineNumber();
        final int col = getColumnNumber();

        String token = null;
        if (hasMoreCharacters()) {
            final StringBuilder sb = new StringBuilder(len);

            consumeWithLineContinuation(lineContinuationChar, len,
                    ch -> sb.append((char) ch));

            token = sb.toString();
        }

        setToken(line, col, token);

        return this;
    }","  public void test151()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""]"");
      stringReader0.close();
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      // Undeclared exception!
      try { 
        simpleTextParser0.nextWithLineContinuation('G', 425);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5190,"    public SimpleTextParser nextLine() {
        next(SimpleTextParser::isNotNewLinePart);

        discardNewLineSequence();

        return this;
    }","  public void test152()  throws Throwable  {
      SimpleTextParser simpleTextParser0 = new SimpleTextParser((CharReadBuffer) null);
      // Undeclared exception!
      try { 
        simpleTextParser0.nextLine();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
5191,"    public SimpleTextParser nextAlphanumeric() {
        return next(SimpleTextParser::isAlphanumeric);
    }","  public void test153()  throws Throwable  {
      SimpleTextParser simpleTextParser0 = new SimpleTextParser((CharReadBuffer) null);
      // Undeclared exception!
      try { 
        simpleTextParser0.nextAlphanumeric();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
5192,"    public SimpleTextParser nextAlphanumeric() {
        return next(SimpleTextParser::isAlphanumeric);
    }","  public void test154()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Initial buffer capacity must be greater than 0; was "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      stringReader0.close();
      // Undeclared exception!
      try { 
        simpleTextParser0.nextAlphanumeric();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5193,"    public SimpleTextParser next(final int len) {
        validateRequestedStringLength(len);

        final int line = getLineNumber();
        final int col = getColumnNumber();

        String token = null;
        if (hasMoreCharacters()) {
            final StringBuilder sb = new StringBuilder(len);

            consume(len, ch -> sb.append((char) ch));

            token = sb.toString();
        }

        setToken(line, col, token);

        return this;
    }","  public void test155()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""izwszW!5JK?+\u0004{"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      // Undeclared exception!
      try { 
        simpleTextParser0.next((IntPredicate) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.SimpleTextParser$StringCollector"", e);
      }
  }"
5194,"    public SimpleTextParser next(final int len) {
        validateRequestedStringLength(len);

        final int line = getLineNumber();
        final int col = getColumnNumber();

        String token = null;
        if (hasMoreCharacters()) {
            final StringBuilder sb = new StringBuilder(len);

            consume(len, ch -> sb.append((char) ch));

            token = sb.toString();
        }

        setToken(line, col, token);

        return this;
    }","  public void test156()  throws Throwable  {
      SimpleTextParser simpleTextParser0 = new SimpleTextParser((CharReadBuffer) null);
      // Undeclared exception!
      try { 
        simpleTextParser0.next(0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
5195,"    public SimpleTextParser next(final int len) {
        validateRequestedStringLength(len);

        final int line = getLineNumber();
        final int col = getColumnNumber();

        String token = null;
        if (hasMoreCharacters()) {
            final StringBuilder sb = new StringBuilder(len);

            consume(len, ch -> sb.append((char) ch));

            token = sb.toString();
        }

        setToken(line, col, token);

        return this;
    }","  public void test157()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""G"");
      stringReader0.close();
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      // Undeclared exception!
      try { 
        simpleTextParser0.next(97);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5196,"    public boolean hasMoreCharactersOnLine() {
        return hasMoreCharacters() && isNotNewLinePart(peekChar());
    }","  public void test158()  throws Throwable  {
      SimpleTextParser simpleTextParser0 = new SimpleTextParser((CharReadBuffer) null);
      // Undeclared exception!
      try { 
        simpleTextParser0.hasMoreCharactersOnLine();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
5197,"    public SimpleTextParser discardWithLineContinuation(final char lineContinuationChar,
            final int len) {
        return consumeWithLineContinuation(lineContinuationChar, len, NOOP_CONSUMER);
    }","  public void test159()  throws Throwable  {
      SimpleTextParser simpleTextParser0 = new SimpleTextParser((CharReadBuffer) null);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTextParser0.discardWithLineContinuation('o', intPredicate0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
5198,"    public SimpleTextParser discardWithLineContinuation(final char lineContinuationChar,
            final int len) {
        return consumeWithLineContinuation(lineContinuationChar, len, NOOP_CONSUMER);
    }","  public void test160()  throws Throwable  {
      SimpleTextParser simpleTextParser0 = new SimpleTextParser((CharReadBuffer) null);
      // Undeclared exception!
      try { 
        simpleTextParser0.discardWithLineContinuation('V', 76);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
5199,"    public SimpleTextParser discardWithLineContinuation(final char lineContinuationChar,
            final int len) {
        return consumeWithLineContinuation(lineContinuationChar, len, NOOP_CONSUMER);
    }","  public void test161()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Initial buffer capacity must be greater than 0; was "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      stringReader0.close();
      // Undeclared exception!
      try { 
        simpleTextParser0.discardWithLineContinuation('G', 3913);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5200,"    public SimpleTextParser discardWhitespace() {
        return discard(SimpleTextParser::isWhitespace);
    }","  public void test162()  throws Throwable  {
      SimpleTextParser simpleTextParser0 = new SimpleTextParser((CharReadBuffer) null);
      // Undeclared exception!
      try { 
        simpleTextParser0.discardWhitespace();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
5201,"    public SimpleTextParser discardWhitespace() {
        return discard(SimpleTextParser::isWhitespace);
    }","  public void test163()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""&|A8M@JS!k,7iOyP"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      stringReader0.close();
      // Undeclared exception!
      try { 
        simpleTextParser0.discardWhitespace();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5202,"    public SimpleTextParser discardNewLineSequence() {
        final int value = peekChar();
        if (value == LF) {
            readChar();
        } else if (value == CR) {
            readChar();

            if (peekChar() == LF) {
                readChar();
            }
        }

        return this;
    }","  public void test164()  throws Throwable  {
      SimpleTextParser simpleTextParser0 = new SimpleTextParser((CharReadBuffer) null);
      // Undeclared exception!
      try { 
        simpleTextParser0.discardNewLineSequence();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
5203,"    public SimpleTextParser discardLineWhitespace() {
        return discard(SimpleTextParser::isLineWhitespace);
    }","  public void test165()  throws Throwable  {
      SimpleTextParser simpleTextParser0 = new SimpleTextParser((CharReadBuffer) null);
      // Undeclared exception!
      try { 
        simpleTextParser0.discardLineWhitespace();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
5204,"    public SimpleTextParser discardLine() {
        discard(SimpleTextParser::isNotNewLinePart);

        discardNewLineSequence();

        return this;
    }","  public void test166()  throws Throwable  {
      SimpleTextParser simpleTextParser0 = new SimpleTextParser((CharReadBuffer) null);
      // Undeclared exception!
      try { 
        simpleTextParser0.discardLine();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
5205,"    public SimpleTextParser discardLine() {
        discard(SimpleTextParser::isNotNewLinePart);

        discardNewLineSequence();

        return this;
    }","  public void test167()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""=4nw]+z|JB]c2dIi1G"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      stringReader0.close();
      // Undeclared exception!
      try { 
        simpleTextParser0.discardLine();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5206,"    public SimpleTextParser discard(final int len) {
        return consume(len, NOOP_CONSUMER);
    }","  public void test168()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""ha4o"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      // Undeclared exception!
      try { 
        simpleTextParser0.discard((IntPredicate) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.SimpleTextParser"", e);
      }
  }"
5207,"    public SimpleTextParser discard(final int len) {
        return consume(len, NOOP_CONSUMER);
    }","  public void test169()  throws Throwable  {
      SimpleTextParser simpleTextParser0 = new SimpleTextParser((CharReadBuffer) null);
      // Undeclared exception!
      try { 
        simpleTextParser0.discard(203);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
5208,"    public SimpleTextParser consumeWithLineContinuation(final char lineContinuationChar,
            final int len, final IntConsumer consumer) {
        int i = -1;
        int ch;
        while (++i < len && (ch = readChar()) != EOF) {
            if (ch == lineContinuationChar && isNewLinePart(peekChar())) {
                --i; // don't count the continuation char toward the total length
                discardNewLineSequence();
            } else {
                consumer.accept(ch);
            }
        }

        return this;
    }","  public void test170()  throws Throwable  {
      SimpleTextParser simpleTextParser0 = new SimpleTextParser((CharReadBuffer) null);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTextParser0.consumeWithLineContinuation('~', intPredicate0, (IntConsumer) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
5209,"    public SimpleTextParser consumeWithLineContinuation(final char lineContinuationChar,
            final int len, final IntConsumer consumer) {
        int i = -1;
        int ch;
        while (++i < len && (ch = readChar()) != EOF) {
            if (ch == lineContinuationChar && isNewLinePart(peekChar())) {
                --i; // don't count the continuation char toward the total length
                discardNewLineSequence();
            } else {
                consumer.accept(ch);
            }
        }

        return this;
    }","  public void test171()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""+HA4O.;\tAnDH=So'5i"");
      stringReader0.close();
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTextParser0.consumeWithLineContinuation('J', intPredicate0, (IntConsumer) null);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5210,"    public SimpleTextParser consume(final IntPredicate pred, final IntConsumer consumer) {
        int ch;
        while ((ch = peekChar()) != EOF && pred.test(ch)) {
            consumer.accept(readChar());
        }

        return this;
    }","  public void test172()  throws Throwable  {
      SimpleTextParser simpleTextParser0 = new SimpleTextParser((CharReadBuffer) null);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      // Undeclared exception!
      try { 
        simpleTextParser0.consume(intPredicate0, (IntConsumer) intSummaryStatistics0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
5211,"    public SimpleTextParser consume(final IntPredicate pred, final IntConsumer consumer) {
        int ch;
        while ((ch = peekChar()) != EOF && pred.test(ch)) {
            consumer.accept(readChar());
        }

        return this;
    }","  public void test173()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""reader cannot be null"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      // Undeclared exception!
      try { 
        simpleTextParser0.consume(74, (IntConsumer) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.SimpleTextParser"", e);
      }
  }"
5212,"    public SimpleTextParser consume(final IntPredicate pred, final IntConsumer consumer) {
        int ch;
        while ((ch = peekChar()) != EOF && pred.test(ch)) {
            consumer.accept(readChar());
        }

        return this;
    }","  public void test174()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 356, 579);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      stringReader0.close();
      LongSummaryStatistics longSummaryStatistics0 = new LongSummaryStatistics();
      // Undeclared exception!
      try { 
        simpleTextParser0.consume(356, (IntConsumer) longSummaryStatistics0);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5213,"    public int chooseIgnoreCase(final String... expected) {
        return chooseIgnoreCase(Arrays.asList(expected));
    }","  public void test175()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 10, 10);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      // Undeclared exception!
      try { 
        simpleTextParser0.chooseIgnoreCase((String[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
5214,"    public int chooseIgnoreCase(final String... expected) {
        return chooseIgnoreCase(Arrays.asList(expected));
    }","  public void test176()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""r"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      simpleTextParser0.nextWithLineContinuation('<', intPredicate0);
      // Undeclared exception!
      try { 
        simpleTextParser0.chooseIgnoreCase((List<String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.SimpleTextParser"", e);
      }
  }"
5215,"    public int choose(final String... expected) {
        return choose(Arrays.asList(expected));
    }","  public void test177()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""("");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      // Undeclared exception!
      try { 
        simpleTextParser0.choose((String[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
5216,"    public SimpleTextParser(final Reader reader) {
        this(new CharReadBuffer(reader));
    }","  public void test178()  throws Throwable  {
      SimpleTextParser simpleTextParser0 = null;
      try {
        simpleTextParser0 = new SimpleTextParser((Reader) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Reader cannot be null
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
5217,"    public static boolean isAlphanumeric(final int ch) {
        return Character.isAlphabetic(ch) ||
                Character.isDigit(ch);
    }","  public void test179()  throws Throwable  {
      boolean boolean0 = SimpleTextParser.isAlphanumeric(48);
}"
5218,"    public static boolean isAlphanumeric(final int ch) {
        return Character.isAlphabetic(ch) ||
                Character.isDigit(ch);
    }","  public void test180()  throws Throwable  {
      boolean boolean0 = SimpleTextParser.isAlphanumeric(356);
}"
5219,"    public static boolean isAlphanumeric(final int ch) {
        return Character.isAlphabetic(ch) ||
                Character.isDigit(ch);
    }","  public void test181()  throws Throwable  {
      boolean boolean0 = SimpleTextParser.isAlphanumeric((-1149));
}"
5220,"    public static boolean isNotNewLinePart(final int ch) {
        return !isNewLinePart(ch);
    }","  public void test182()  throws Throwable  {
      boolean boolean0 = SimpleTextParser.isNotNewLinePart(37);
}"
5221,"    public static boolean isNewLinePart(final int ch) {
        return ch == CR || ch == LF;
    }","  public void test183()  throws Throwable  {
      boolean boolean0 = SimpleTextParser.isNewLinePart(9);
}"
5222,"    public static boolean isNewLinePart(final int ch) {
        return ch == CR || ch == LF;
    }","  public void test184()  throws Throwable  {
      boolean boolean0 = SimpleTextParser.isNewLinePart(10);
}"
5223,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test185()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""dRP`KLw4@qMH_-<?U"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 512, 512);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      MockThrowable mockThrowable0 = new MockThrowable(""Character index cannot be negative; was "");
      simpleTextParser0.tokenError("""", (Throwable) mockThrowable0);
}"
5224,"    public int getMaxStringLength() {
        return maxStringLength;
    }","  public void test186()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""dRP`KLw4@qMH_-<?U"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 512, 512);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      MockThrowable mockThrowable0 = new MockThrowable(""Character index cannot be negative; was "");
      simpleTextParser0.tokenError("""", (Throwable) mockThrowable0);
}"
5225,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test187()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""dRP`KLw4@qMH_-<?U"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 512, 512);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      MockThrowable mockThrowable0 = new MockThrowable(""Character index cannot be negative; was "");
      simpleTextParser0.tokenError("""", (Throwable) mockThrowable0);
}"
5226,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test188()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""dRP`KLw4@qMH_-<?U"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 512, 512);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      MockThrowable mockThrowable0 = new MockThrowable(""Character index cannot be negative; was "");
      simpleTextParser0.tokenError("""", (Throwable) mockThrowable0);
}"
5227,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test189()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""dRP`KLw4@qMH_-<?U"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 512, 512);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      MockThrowable mockThrowable0 = new MockThrowable(""Character index cannot be negative; was "");
      simpleTextParser0.tokenError("""", (Throwable) mockThrowable0);
}"
5228,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test190()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IllegalStateException illegalStateException0 = simpleTextParser0.parseError(0, 0, "" >k5"");
      simpleTextParser0.unexpectedToken(""<ar[O"", (Throwable) illegalStateException0);
}"
5229,"    public int getMaxStringLength() {
        return maxStringLength;
    }","  public void test191()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IllegalStateException illegalStateException0 = simpleTextParser0.parseError(0, 0, "" >k5"");
      simpleTextParser0.unexpectedToken(""<ar[O"", (Throwable) illegalStateException0);
}"
5230,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test192()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IllegalStateException illegalStateException0 = simpleTextParser0.parseError(0, 0, "" >k5"");
      simpleTextParser0.unexpectedToken(""<ar[O"", (Throwable) illegalStateException0);
}"
5231,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test193()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IllegalStateException illegalStateException0 = simpleTextParser0.parseError(0, 0, "" >k5"");
      simpleTextParser0.unexpectedToken(""<ar[O"", (Throwable) illegalStateException0);
}"
5232,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test194()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IllegalStateException illegalStateException0 = simpleTextParser0.parseError(0, 0, "" >k5"");
      simpleTextParser0.unexpectedToken(""<ar[O"", (Throwable) illegalStateException0);
}"
5233,"    public boolean hasNonEmptyToken() {
        return currentToken != null && !currentToken.isEmpty();
    }","  public void test195()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""+HA4O.;\tAnDH=So'5i"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(intPredicate0).test(anyInt());
      IntPredicate intPredicate1 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate1).test(anyInt());
      simpleTextParser0.consumeWithLineContinuation('J', intPredicate1, (IntConsumer) null);
      simpleTextParser0.peek(intPredicate0);
      IntPredicate intPredicate2 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(intPredicate2).test(anyInt());
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextWithLineContinuation('M', intPredicate2);
      simpleTextParser0.discardLineWhitespace();
      SimpleTextParser.isLineWhitespace('J');
      simpleTextParser0.nextWithLineContinuation('$', 4);
      MockThrowable mockThrowable0 = new MockThrowable();
      simpleTextParser1.tokenError(""+HA4O.;\tAnDH=So'5i"", (Throwable) mockThrowable0);
}"
5234,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test196()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""+HA4O.;\tAnDH=So'5i"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(intPredicate0).test(anyInt());
      IntPredicate intPredicate1 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate1).test(anyInt());
      simpleTextParser0.consumeWithLineContinuation('J', intPredicate1, (IntConsumer) null);
      simpleTextParser0.peek(intPredicate0);
      IntPredicate intPredicate2 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(intPredicate2).test(anyInt());
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextWithLineContinuation('M', intPredicate2);
      simpleTextParser0.discardLineWhitespace();
      SimpleTextParser.isLineWhitespace('J');
      simpleTextParser0.nextWithLineContinuation('$', 4);
      MockThrowable mockThrowable0 = new MockThrowable();
      simpleTextParser1.tokenError(""+HA4O.;\tAnDH=So'5i"", (Throwable) mockThrowable0);
}"
5235,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test197()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""org.apache.commons.geometry.core.partitioning.test.TestPoint2D"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(intPredicate0).test(anyInt());
      LongSummaryStatistics longSummaryStatistics0 = new LongSummaryStatistics();
      simpleTextParser0.consumeWithLineContinuation('D', intPredicate0, (IntConsumer) longSummaryStatistics0);
}"
5236,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test198()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""&|A8M@JS!k,7iOyP"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      LongSummaryStatistics longSummaryStatistics0 = new LongSummaryStatistics();
      simpleTextParser0.consumeWithLineContinuation('M', 59, (IntConsumer) longSummaryStatistics0);
}"
5237,"    public SimpleTextParser consumeWithLineContinuation(final char lineContinuationChar,
            final int len, final IntConsumer consumer) {
        int i = -1;
        int ch;
        while (++i < len && (ch = readChar()) != EOF) {
            if (ch == lineContinuationChar && isNewLinePart(peekChar())) {
                --i; // don't count the continuation char toward the total length
                discardNewLineSequence();
            } else {
                consumer.accept(ch);
            }
        }

        return this;
    }","  public void test199()  throws Throwable  {
      SimpleTextParser simpleTextParser0 = new SimpleTextParser((CharReadBuffer) null);
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      // Undeclared exception!
      try { 
        simpleTextParser0.consumeWithLineContinuation(']', 2, (IntConsumer) intSummaryStatistics0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
5238,"    public int chooseIgnoreCase(final String... expected) {
        return chooseIgnoreCase(Arrays.asList(expected));
    }","  public void test200()  throws Throwable  {
      SimpleTextParser.isIntegerPart(1416);
      StringReader stringReader0 = new StringReader(""l|Bw}b)vr-Ncq +q"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(intPredicate0).test(anyInt());
      SimpleTextParser simpleTextParser1 = simpleTextParser0.next(intPredicate0);
      IntPredicate intPredicate1 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate1).test(anyInt());
      SimpleTextParser simpleTextParser2 = simpleTextParser1.discard(intPredicate1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      simpleTextParser2.tryChooseIgnoreCase(list0);
      simpleTextParser2.unexpectedToken(""l|Bw}b)vr-Ncq +q"");
      IllegalStateException illegalStateException0 = simpleTextParser2.tokenError(""(+cJty9O+S62X"");
      IllegalStateException illegalStateException1 = simpleTextParser0.parseError("";r"", (Throwable) illegalStateException0);
      simpleTextParser2.discardLineWhitespace();
      simpleTextParser2.unexpectedToken(""9EVyy7"", (Throwable) illegalStateException1);
      IntPredicate intPredicate2 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate2).test(anyInt());
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      simpleTextParser2.consume(intPredicate2, (IntConsumer) intSummaryStatistics0);
      // Undeclared exception!
      try { 
        simpleTextParser0.chooseIgnoreCase(list0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: expected one of [] but found [l]
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5239,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test201()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""l|Bw}b)vr-Ncq +q"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(intPredicate0).test(anyInt());
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      simpleTextParser0.consume(intPredicate0, (IntConsumer) intSummaryStatistics0);
}"
5240,"    public int tryChooseIgnoreCase(final String... expected) {
        return tryChooseIgnoreCase(Arrays.asList(expected));
    }","  public void test202()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""l|Bw}b)vr-Ncq +q"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        simpleTextParser0.tryChooseIgnoreCase(list0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // No token has been read from the character stream
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.SimpleTextParser"", e);
      }
  }"
5241,"    public static boolean isWhitespace(final int ch) {
        return Character.isWhitespace(ch);
    }","  public void test203()  throws Throwable  {
      boolean boolean0 = SimpleTextParser.isWhitespace((-1));
}"
5242,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test204()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""!5R49I[rLd#xe"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      int int0 = simpleTextParser0.getLineNumber();
}"
5243,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test205()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""!5R49I[rLd#xe"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      int int0 = simpleTextParser0.getLineNumber();
}"
5244,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test206()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""!5R49I[rLd#xe"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      int int0 = simpleTextParser0.getLineNumber();
}"
5245,"    public int getMaxStringLength() {
        return maxStringLength;
    }","  public void test207()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""!5R49I[rLd#xe"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      int int0 = simpleTextParser0.getLineNumber();
}"
5246,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test208()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""!5R49I[rLd#xe"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      int int0 = simpleTextParser0.getLineNumber();
}"
5247,"    public int getMaxStringLength() {
        return maxStringLength;
    }","  public void test209()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.hasMoreCharacters();
}"
5248,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test210()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.hasMoreCharacters();
}"
5249,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test211()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.hasMoreCharacters();
}"
5250,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test212()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.hasMoreCharacters();
}"
5251,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test213()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.hasMoreCharacters();
}"
5252,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test214()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""9WqZ|}Z"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 10, 10);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      int int0 = simpleTextParser0.getColumnNumber();
}"
5253,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test215()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""9WqZ|}Z"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 10, 10);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      int int0 = simpleTextParser0.getColumnNumber();
}"
5254,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test216()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""9WqZ|}Z"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 10, 10);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      int int0 = simpleTextParser0.getColumnNumber();
}"
5255,"    public int getMaxStringLength() {
        return maxStringLength;
    }","  public void test217()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""9WqZ|}Z"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 10, 10);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      int int0 = simpleTextParser0.getColumnNumber();
}"
5256,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test218()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""9WqZ|}Z"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 10, 10);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      int int0 = simpleTextParser0.getColumnNumber();
}"
5257,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test219()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Requested string length of "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.peekChar();
}"
5258,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test220()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Requested string length of "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.peekChar();
}"
5259,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test221()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Requested string length of "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.peekChar();
}"
5260,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test222()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Requested string length of "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.peekChar();
}"
5261,"    public int getMaxStringLength() {
        return maxStringLength;
    }","  public void test223()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Requested string length of "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.peekChar();
}"
5262,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test224()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""2@9&udK0ow|+%^p"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      MockThrowable mockThrowable0 = new MockThrowable(""F[!"");
      simpleTextParser0.parseError((-2402), 0, """", (Throwable) mockThrowable0);
}"
5263,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test225()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""2@9&udK0ow|+%^p"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      MockThrowable mockThrowable0 = new MockThrowable(""F[!"");
      simpleTextParser0.parseError((-2402), 0, """", (Throwable) mockThrowable0);
}"
5264,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test226()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""2@9&udK0ow|+%^p"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      MockThrowable mockThrowable0 = new MockThrowable(""F[!"");
      simpleTextParser0.parseError((-2402), 0, """", (Throwable) mockThrowable0);
}"
5265,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test227()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""2@9&udK0ow|+%^p"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      MockThrowable mockThrowable0 = new MockThrowable(""F[!"");
      simpleTextParser0.parseError((-2402), 0, """", (Throwable) mockThrowable0);
}"
5266,"    public int getMaxStringLength() {
        return maxStringLength;
    }","  public void test228()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""2@9&udK0ow|+%^p"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      MockThrowable mockThrowable0 = new MockThrowable(""F[!"");
      simpleTextParser0.parseError((-2402), 0, """", (Throwable) mockThrowable0);
}"
5267,"    public String peek(final int len) {
        validateRequestedStringLength(len);

        return buffer.peekString(len);
    }","  public void test229()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""+HA4O.;\tAnDH=So'5i"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, true).when(intPredicate0).test(anyInt());
      simpleTextParser0.setMaxStringLength(4);
      // Undeclared exception!
      try { 
        simpleTextParser0.peek(intPredicate0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: string length exceeds maximum value of 4
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5268,"    public static boolean isDecimalPart(final int ch) {
        return Character.isDigit(ch) ||
            ch == '-' ||
            ch == '+' ||
            ch == '.' ||
            ch == 'e' ||
            ch == 'E';
    }","  public void test230()  throws Throwable  {
      boolean boolean0 = SimpleTextParser.isDecimalPart(69);
}"
5269,"    public static boolean isDecimalPart(final int ch) {
        return Character.isDigit(ch) ||
            ch == '-' ||
            ch == '+' ||
            ch == '.' ||
            ch == 'e' ||
            ch == 'E';
    }","  public void test231()  throws Throwable  {
      boolean boolean0 = SimpleTextParser.isDecimalPart(46);
}"
5270,"    public static boolean isDecimalPart(final int ch) {
        return Character.isDigit(ch) ||
            ch == '-' ||
            ch == '+' ||
            ch == '.' ||
            ch == 'e' ||
            ch == 'E';
    }","  public void test232()  throws Throwable  {
      boolean boolean0 = SimpleTextParser.isDecimalPart(0);
}"
5271,"    public static boolean isDecimalPart(final int ch) {
        return Character.isDigit(ch) ||
            ch == '-' ||
            ch == '+' ||
            ch == '.' ||
            ch == 'e' ||
            ch == 'E';
    }","  public void test233()  throws Throwable  {
      boolean boolean0 = SimpleTextParser.isDecimalPart(55);
}"
5272,"    public static boolean isIntegerPart(final int ch) {
        return Character.isDigit(ch) ||
                ch == '-' ||
                ch == '+';
    }","  public void test234()  throws Throwable  {
      boolean boolean0 = SimpleTextParser.isIntegerPart(43);
}"
5273,"    public static boolean isIntegerPart(final int ch) {
        return Character.isDigit(ch) ||
                ch == '-' ||
                ch == '+';
    }","  public void test235()  throws Throwable  {
      boolean boolean0 = SimpleTextParser.isIntegerPart(45);
}"
5274,"    public static boolean isIntegerPart(final int ch) {
        return Character.isDigit(ch) ||
                ch == '-' ||
                ch == '+';
    }","  public void test236()  throws Throwable  {
      boolean boolean0 = SimpleTextParser.isIntegerPart(56);
}"
5275,"    public static boolean isNotAlphanumeric(final int ch) {
        return !isAlphanumeric(ch);
    }","  public void test237()  throws Throwable  {
      boolean boolean0 = SimpleTextParser.isNotAlphanumeric(0);
}"
5276,"    public static boolean isNotAlphanumeric(final int ch) {
        return !isAlphanumeric(ch);
    }","  public void test238()  throws Throwable  {
      boolean boolean0 = SimpleTextParser.isNotAlphanumeric('c');
}"
5277,"    public static boolean isNotNewLinePart(final int ch) {
        return !isNewLinePart(ch);
    }","  public void test239()  throws Throwable  {
      boolean boolean0 = SimpleTextParser.isNotNewLinePart(10);
}"
5278,"    public static boolean isNewLinePart(final int ch) {
        return ch == CR || ch == LF;
    }","  public void test240()  throws Throwable  {
      boolean boolean0 = SimpleTextParser.isNewLinePart(13);
}"
5279,"    public boolean hasNonEmptyToken() {
        return currentToken != null && !currentToken.isEmpty();
    }","  public void test241()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Requested string length of "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.nextAlphanumeric();
      simpleTextParser0.discardLineWhitespace();
}"
5280,"    public static boolean isNotWhitespace(final int ch) {
        return !isWhitespace(ch);
    }","  public void test242()  throws Throwable  {
      boolean boolean0 = SimpleTextParser.isNotWhitespace('x');
}"
5281,"    public static boolean isNotWhitespace(final int ch) {
        return !isWhitespace(ch);
    }","  public void test243()  throws Throwable  {
      boolean boolean0 = SimpleTextParser.isNotWhitespace(13);
}"
5282,"    public SimpleTextParser next(final int len) {
        validateRequestedStringLength(len);

        final int line = getLineNumber();
        final int col = getColumnNumber();

        String token = null;
        if (hasMoreCharacters()) {
            final StringBuilder sb = new StringBuilder(len);

            consume(len, ch -> sb.append((char) ch));

            token = sb.toString();
        }

        setToken(line, col, token);

        return this;
    }","  public void test244()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""_"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      // Undeclared exception!
      try { 
        simpleTextParser0.next(1278);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Requested string length of 1278 exceeds maximum value of 1024
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.SimpleTextParser"", e);
      }
  }"
5283,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test245()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""2@9&udK0ow|+%^p"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextWithLineContinuation('_', intPredicate0);
      MockThrowable mockThrowable0 = new MockThrowable(""F[!"");
      simpleTextParser1.unexpectedToken(""F[!"", (Throwable) mockThrowable0);
}"
5284,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test246()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""2@9&udK0ow|+%^p"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextWithLineContinuation('_', intPredicate0);
      MockThrowable mockThrowable0 = new MockThrowable(""F[!"");
      simpleTextParser1.unexpectedToken(""F[!"", (Throwable) mockThrowable0);
}"
5285,"    public int chooseIgnoreCase(final String... expected) {
        return chooseIgnoreCase(Arrays.asList(expected));
    }","  public void test247()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""("");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(intPredicate0).test(anyInt());
      simpleTextParser0.nextWithLineContinuation('i', intPredicate0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      // Undeclared exception!
      try { 
        simpleTextParser0.chooseIgnoreCase(list0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: expected one of [] but found [(]
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5286,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test248()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      SimpleTextParser simpleTextParser1 = simpleTextParser0.consume(1176, (IntConsumer) intSummaryStatistics0);
      simpleTextParser1.nextLine();
      String[] stringArray0 = new String[9];
      int int0 = simpleTextParser0.tryChoose(stringArray0);
}"
5287,"    public int tryChoose(final String... expected) {
        return tryChoose(Arrays.asList(expected));
    }","  public void test249()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      SimpleTextParser simpleTextParser1 = simpleTextParser0.consume(1176, (IntConsumer) intSummaryStatistics0);
      simpleTextParser1.nextLine();
      String[] stringArray0 = new String[9];
      int int0 = simpleTextParser0.tryChoose(stringArray0);
}"
5288,"    public boolean hasNonEmptyToken() {
        return currentToken != null && !currentToken.isEmpty();
    }","  public void test250()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.nextLine();
      String[] stringArray0 = new String[9];
      int int0 = simpleTextParser0.tryChoose(stringArray0);
}"
5289,"    public int tryChoose(final String... expected) {
        return tryChoose(Arrays.asList(expected));
    }","  public void test251()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.nextLine();
      String[] stringArray0 = new String[9];
      int int0 = simpleTextParser0.tryChoose(stringArray0);
}"
5290,"    public boolean hasNonEmptyToken() {
        return currentToken != null && !currentToken.isEmpty();
    }","  public void test252()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.nextLine();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      simpleTextParser0.tryChoose((List<String>) linkedList0);
}"
5291,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test253()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""PYZrO(1^ ["");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      SimpleTextParser simpleTextParser1 = simpleTextParser0.next(intPredicate0);
      boolean boolean0 = simpleTextParser1.tryMatchIgnoreCase(""PYZrO(1^ ["");
}"
5292,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test254()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""PYZrO(1^ ["");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      SimpleTextParser simpleTextParser1 = simpleTextParser0.next(intPredicate0);
      boolean boolean0 = simpleTextParser1.tryMatchIgnoreCase(""PYZrO(1^ ["");
}"
5293,"    public boolean tryMatchIgnoreCase(final String expected) {
        return matchInternal(expected, false, false);
    }","  public void test255()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""PYZrO(1^ ["");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      SimpleTextParser simpleTextParser1 = simpleTextParser0.next(intPredicate0);
      boolean boolean0 = simpleTextParser1.tryMatchIgnoreCase(""PYZrO(1^ ["");
}"
5294,"    public SimpleTextParser match(final String expected) {
        matchInternal(expected, true, true);
        return this;
    }","  public void test256()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""&}W}w*CN4!!zYR"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.next(8);
      // Undeclared exception!
      try { 
        simpleTextParser0.match(""&}W}w*CN4!!zYR"");
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: expected [&}W}w*CN4!!zYR] but found [&}W}w*CN]
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5295,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test257()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""xzLG"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 45);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      charReadBuffer0.push('');
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      SimpleTextParser simpleTextParser1 = simpleTextParser0.consumeWithLineContinuation('', intPredicate0, (IntConsumer) intSummaryStatistics0);
}"
5296,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test258()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""xzLG"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 45);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      charReadBuffer0.push('');
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      SimpleTextParser simpleTextParser1 = simpleTextParser0.consumeWithLineContinuation('', intPredicate0, (IntConsumer) intSummaryStatistics0);
}"
5297,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test259()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""xzLG"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 45);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      charReadBuffer0.push('');
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      SimpleTextParser simpleTextParser1 = simpleTextParser0.consumeWithLineContinuation('', intPredicate0, (IntConsumer) intSummaryStatistics0);
}"
5298,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test260()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""xzLG"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 45);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      charReadBuffer0.push('');
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      SimpleTextParser simpleTextParser1 = simpleTextParser0.consumeWithLineContinuation('', intPredicate0, (IntConsumer) intSummaryStatistics0);
}"
5299,"    public int getMaxStringLength() {
        return maxStringLength;
    }","  public void test261()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""xzLG"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 45);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      charReadBuffer0.push('');
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(intPredicate0).test(anyInt());
      SimpleTextParser simpleTextParser1 = simpleTextParser0.consumeWithLineContinuation('', intPredicate0, (IntConsumer) intSummaryStatistics0);
}"
5300,"    public boolean hasNonEmptyToken() {
        return currentToken != null && !currentToken.isEmpty();
    }","  public void test262()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""("");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(intPredicate0).test(anyInt());
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextWithLineContinuation('i', intPredicate0);
      IntPredicate intPredicate1 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      simpleTextParser1.peek(intPredicate1);
}"
5301,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test263()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""("");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      IntPredicate intPredicate0 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(intPredicate0).test(anyInt());
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextWithLineContinuation('i', intPredicate0);
      IntPredicate intPredicate1 = mock(IntPredicate.class, new ViolatedAssumptionAnswer());
      simpleTextParser1.peek(intPredicate1);
}"
5302,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test264()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""&}W}w*CN4!!zYR"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.discardLine();
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextWithLineContinuation('+', 8);
      String[] stringArray0 = new String[22];
      stringArray0[0] = ""&}W}w*CN4!!zYR"";
      int int0 = simpleTextParser1.chooseIgnoreCase(stringArray0);
}"
5303,"    public int chooseIgnoreCase(final String... expected) {
        return chooseIgnoreCase(Arrays.asList(expected));
    }","  public void test265()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""&}W}w*CN4!!zYR"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.discardLine();
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextWithLineContinuation('+', 8);
      String[] stringArray0 = new String[22];
      stringArray0[0] = ""&}W}w*CN4!!zYR"";
      int int0 = simpleTextParser1.chooseIgnoreCase(stringArray0);
}"
5304,"    public int choose(final String... expected) {
        return choose(Arrays.asList(expected));
    }","  public void test266()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      SimpleTextParser simpleTextParser1 = simpleTextParser0.next(2);
      // Undeclared exception!
      try { 
        simpleTextParser1.choose((List<String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.SimpleTextParser"", e);
      }
  }"
5305,"    public int getMaxStringLength() {
        return maxStringLength;
    }","  public void test267()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      boolean boolean0 = simpleTextParser0.hasMoreCharactersOnLine();
}"
5306,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test268()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      boolean boolean0 = simpleTextParser0.hasMoreCharactersOnLine();
}"
5307,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test269()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      boolean boolean0 = simpleTextParser0.hasMoreCharactersOnLine();
}"
5308,"    public boolean hasMoreCharactersOnLine() {
        return hasMoreCharacters() && isNotNewLinePart(peekChar());
    }","  public void test270()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      boolean boolean0 = simpleTextParser0.hasMoreCharactersOnLine();
}"
5309,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test271()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      boolean boolean0 = simpleTextParser0.hasMoreCharactersOnLine();
}"
5310,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test272()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      boolean boolean0 = simpleTextParser0.hasMoreCharactersOnLine();
}"
5311,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test273()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      SimpleTextParser simpleTextParser1 = simpleTextParser0.consume(1176, (IntConsumer) intSummaryStatistics0);
      boolean boolean0 = simpleTextParser1.hasMoreCharactersOnLine();
}"
5312,"    public boolean hasMoreCharactersOnLine() {
        return hasMoreCharacters() && isNotNewLinePart(peekChar());
    }","  public void test274()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      SimpleTextParser simpleTextParser1 = simpleTextParser0.consume(1176, (IntConsumer) intSummaryStatistics0);
      boolean boolean0 = simpleTextParser1.hasMoreCharactersOnLine();
}"
5313,"    public double getCurrentTokenAsDouble() {
        ensureHasSetToken();

        Throwable cause = null;

        if (currentToken != null) {
            try {
                return Double.parseDouble(currentToken);
            } catch (NumberFormatException exc) {
                cause = exc;
            }
        }

        throw unexpectedToken(""double"", cause);
    }","  public void test275()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""794gu!W3CW2:or(Z"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.nextAlphanumeric();
      // Undeclared exception!
      try { 
        simpleTextParser0.getCurrentTokenAsDouble();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: expected double but found [794gu]
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5314,"    public double getCurrentTokenAsDouble() {
        ensureHasSetToken();

        Throwable cause = null;

        if (currentToken != null) {
            try {
                return Double.parseDouble(currentToken);
            } catch (NumberFormatException exc) {
                cause = exc;
            }
        }

        throw unexpectedToken(""double"", cause);
    }","  public void test276()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      SimpleTextParser simpleTextParser1 = simpleTextParser0.consume(1176, (IntConsumer) intSummaryStatistics0);
      simpleTextParser1.nextLine();
      // Undeclared exception!
      try { 
        simpleTextParser1.getCurrentTokenAsDouble();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 6: expected double but found end of content
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5315,"    public int getCurrentTokenAsInt() {
        ensureHasSetToken();

        Throwable cause = null;

        if (currentToken != null) {
            try {
                return Integer.parseInt(currentToken);
            } catch (NumberFormatException exc) {
                cause = exc;
            }
        }

        throw unexpectedToken(""integer"", cause);
    }","  public void test277()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Requested string length of "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.nextAlphanumeric();
      // Undeclared exception!
      try { 
        simpleTextParser0.getCurrentTokenAsInt();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 1: expected integer but found [Requested]
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5316,"    public int getCurrentTokenAsInt() {
        ensureHasSetToken();

        Throwable cause = null;

        if (currentToken != null) {
            try {
                return Integer.parseInt(currentToken);
            } catch (NumberFormatException exc) {
                cause = exc;
            }
        }

        throw unexpectedToken(""integer"", cause);
    }","  public void test278()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""!5R49I[rLd#xe"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.discardLine();
      simpleTextParser0.nextWithLineContinuation('b', (IntPredicate) null);
      // Undeclared exception!
      try { 
        simpleTextParser0.getCurrentTokenAsInt();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Parsing failed at line 1, column 14: expected integer but found end of content
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5317,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test279()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Initial buffer capacity must be greater than 0; was "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextWithLineContinuation('c', 46);
      SimpleTextParser simpleTextParser2 = simpleTextParser1.nextAlphanumeric();
      boolean boolean0 = simpleTextParser2.hasNonEmptyToken();
}"
5318,"    public boolean hasNonEmptyToken() {
        return currentToken != null && !currentToken.isEmpty();
    }","  public void test280()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Initial buffer capacity must be greater than 0; was "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextWithLineContinuation('c', 46);
      SimpleTextParser simpleTextParser2 = simpleTextParser1.nextAlphanumeric();
      boolean boolean0 = simpleTextParser2.hasNonEmptyToken();
}"
5319,"    public boolean hasNonEmptyToken() {
        return currentToken != null && !currentToken.isEmpty();
    }","  public void test281()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Initial buffer capacity must be greater than 0; was "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.nextWithLineContinuation('c', 46);
      boolean boolean0 = simpleTextParser0.hasNonEmptyToken();
}"
5320,"    public int getMaxStringLength() {
        return maxStringLength;
    }","  public void test282()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      boolean boolean0 = simpleTextParser0.hasNonEmptyToken();
}"
5321,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test283()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      boolean boolean0 = simpleTextParser0.hasNonEmptyToken();
}"
5322,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test284()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      boolean boolean0 = simpleTextParser0.hasNonEmptyToken();
}"
5323,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test285()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      boolean boolean0 = simpleTextParser0.hasNonEmptyToken();
}"
5324,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test286()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      boolean boolean0 = simpleTextParser0.hasNonEmptyToken();
}"
5325,"    public boolean hasNonEmptyToken() {
        return currentToken != null && !currentToken.isEmpty();
    }","  public void test287()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      boolean boolean0 = simpleTextParser0.hasNonEmptyToken();
}"
5326,"    public void setMaxStringLength(final int maxStringLength) {
        if (maxStringLength < 0) {
            throw new IllegalArgumentException(""Maximum string length cannot be less than zero; was "" +
                    maxStringLength);
        }
        this.maxStringLength = maxStringLength;
    }","  public void test288()  throws Throwable  {
      StringReader stringReader0 = new StringReader("")"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      // Undeclared exception!
      try { 
        simpleTextParser0.setMaxStringLength((-2283));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Maximum string length cannot be less than zero; was -2283
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.SimpleTextParser"", e);
      }
  }"
5327,"    public boolean hasNonEmptyToken() {
        return currentToken != null && !currentToken.isEmpty();
    }","  public void test289()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setLineNumber(0);
      simpleTextParser0.nextLine();
      LongSummaryStatistics longSummaryStatistics0 = new LongSummaryStatistics();
      simpleTextParser0.consumeWithLineContinuation('`', 1, (IntConsumer) longSummaryStatistics0);
}"
5328,"    public int choose(final String... expected) {
        return choose(Arrays.asList(expected));
    }","  public void test290()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        simpleTextParser0.choose(stringArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // No token has been read from the character stream
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.SimpleTextParser"", e);
      }
  }"
5329,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test291()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""2@9&udK0ow|+%^p"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.unexpectedToken(""q~<A!eD!+qXcG}LN+"");
}"
5330,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test292()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""2@9&udK0ow|+%^p"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.unexpectedToken(""q~<A!eD!+qXcG}LN+"");
}"
5331,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test293()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""2@9&udK0ow|+%^p"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.unexpectedToken(""q~<A!eD!+qXcG}LN+"");
}"
5332,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test294()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""2@9&udK0ow|+%^p"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.unexpectedToken(""q~<A!eD!+qXcG}LN+"");
}"
5333,"    public int getMaxStringLength() {
        return maxStringLength;
    }","  public void test295()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""2@9&udK0ow|+%^p"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.unexpectedToken(""q~<A!eD!+qXcG}LN+"");
}"
5334,"    public boolean tryMatchIgnoreCase(final String expected) {
        return matchInternal(expected, false, false);
    }","  public void test296()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""PYZrO(1^ ["");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      // Undeclared exception!
      try { 
        simpleTextParser0.tryMatchIgnoreCase(""PYZrO(1^ ["");
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // No token has been read from the character stream
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.SimpleTextParser"", e);
      }
  }"
5335,"    public int choose(final String... expected) {
        return choose(Arrays.asList(expected));
    }","  public void test297()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      // Undeclared exception!
      try { 
        simpleTextParser0.choose((List<String>) null);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // No token has been read from the character stream
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.SimpleTextParser"", e);
      }
  }"
5336,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test298()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""%a'}o*kE0Lv,q3Uz"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextLine();
      simpleTextParser1.match(""%a'}o*kE0Lv,q3Uz"");
}"
5337,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test299()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""%a'}o*kE0Lv,q3Uz"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      SimpleTextParser simpleTextParser1 = simpleTextParser0.nextLine();
      simpleTextParser1.match(""%a'}o*kE0Lv,q3Uz"");
}"
5338,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test300()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
}"
5339,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test301()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.setColumnNumber(0);
      simpleTextParser0.discard(0);
}"
5340,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test302()  throws Throwable  {
      StringReader stringReader0 = new StringReader("")"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      int int0 = simpleTextParser0.getCurrentTokenLineNumber();
}"
5341,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test303()  throws Throwable  {
      StringReader stringReader0 = new StringReader("")"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      int int0 = simpleTextParser0.getCurrentTokenLineNumber();
}"
5342,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test304()  throws Throwable  {
      StringReader stringReader0 = new StringReader("")"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      int int0 = simpleTextParser0.getCurrentTokenLineNumber();
}"
5343,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test305()  throws Throwable  {
      StringReader stringReader0 = new StringReader("")"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      int int0 = simpleTextParser0.getCurrentTokenLineNumber();
}"
5344,"    public int getMaxStringLength() {
        return maxStringLength;
    }","  public void test306()  throws Throwable  {
      StringReader stringReader0 = new StringReader("")"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      int int0 = simpleTextParser0.getCurrentTokenLineNumber();
}"
5345,"    public String peek(final int len) {
        validateRequestedStringLength(len);

        return buffer.peekString(len);
    }","  public void test307()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""%a'}o*kE0Lv,q3Uz"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      // Undeclared exception!
      try { 
        simpleTextParser0.peek((-2898));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Requested string length cannot be negative; was -2898
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.SimpleTextParser"", e);
      }
  }"
5346,"    public int tryChoose(final String... expected) {
        return tryChoose(Arrays.asList(expected));
    }","  public void test308()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K!@%>"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1958);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        simpleTextParser0.tryChoose(stringArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // No token has been read from the character stream
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.SimpleTextParser"", e);
      }
  }"
5347,"    public boolean tryMatch(final String expected) {
        return matchInternal(expected, true, false);
    }","  public void test309()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Requested string length of "");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      // Undeclared exception!
      try { 
        simpleTextParser0.tryMatch(""r_aX?]d"");
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // No token has been read from the character stream
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.SimpleTextParser"", e);
      }
  }"
5348,"    public int getMaxStringLength() {
        return maxStringLength;
    }","  public void test310()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      int int0 = simpleTextParser0.getCurrentTokenColumnNumber();
}"
5349,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test311()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      int int0 = simpleTextParser0.getCurrentTokenColumnNumber();
}"
5350,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test312()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      int int0 = simpleTextParser0.getCurrentTokenColumnNumber();
}"
5351,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test313()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      int int0 = simpleTextParser0.getCurrentTokenColumnNumber();
}"
5352,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test314()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""K]8"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      int int0 = simpleTextParser0.getCurrentTokenColumnNumber();
}"
5353,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test315()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""5F6f:*Y'>'^BeHk9>:"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.getCurrentToken();
}"
5354,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test316()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""5F6f:*Y'>'^BeHk9>:"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.getCurrentToken();
}"
5355,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test317()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""5F6f:*Y'>'^BeHk9>:"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.getCurrentToken();
}"
5356,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test318()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""5F6f:*Y'>'^BeHk9>:"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.getCurrentToken();
}"
5357,"    public int getMaxStringLength() {
        return maxStringLength;
    }","  public void test319()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""5F6f:*Y'>'^BeHk9>:"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(charReadBuffer0);
      simpleTextParser0.getCurrentToken();
}"
5358,"    public int tryChooseIgnoreCase(final String... expected) {
        return tryChooseIgnoreCase(Arrays.asList(expected));
    }","  public void test320()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""794gu!W3CW2:or(Z"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        simpleTextParser0.tryChooseIgnoreCase(stringArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // No token has been read from the character stream
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.SimpleTextParser"", e);
      }
  }"
5359,"    public int getCurrentTokenLineNumber() {
        return currentTokenLineNumber;
    }","  public void test321()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""794gu!W3CW2:or(Z"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.parseError(""Reader cannot be null"");
}"
5360,"    public int getColumnNumber() {
        return columnNumber;
    }","  public void test322()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""794gu!W3CW2:or(Z"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.parseError(""Reader cannot be null"");
}"
5361,"    public int getMaxStringLength() {
        return maxStringLength;
    }","  public void test323()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""794gu!W3CW2:or(Z"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.parseError(""Reader cannot be null"");
}"
5362,"    public int getCurrentTokenColumnNumber() {
        return currentTokenColumnNumber;
    }","  public void test324()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""794gu!W3CW2:or(Z"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.parseError(""Reader cannot be null"");
}"
5363,"    public int getLineNumber() {
        return lineNumber;
    }","  public void test325()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""794gu!W3CW2:or(Z"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      simpleTextParser0.parseError(""Reader cannot be null"");
}"
5364,"    public int chooseIgnoreCase(final String... expected) {
        return chooseIgnoreCase(Arrays.asList(expected));
    }","  public void test326()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""&}W}w*CN4!!zYR"");
      SimpleTextParser simpleTextParser0 = new SimpleTextParser(stringReader0);
      String[] stringArray0 = new String[22];
      // Undeclared exception!
      try { 
        simpleTextParser0.chooseIgnoreCase(stringArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // No token has been read from the character stream
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.SimpleTextParser"", e);
      }
  }"
5365,"    public static BufferedWriter createBufferedWriter(final GeometryOutput output, final Charset defaultCharset) {
        final Charset charset = output.getCharset() != null ?
                output.getCharset() :
                defaultCharset;

        return new BufferedWriter(new OutputStreamWriter(output.getOutputStream(), charset));
    }","  public void test0()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(""WQ?<)VUy/8(+e}2z)"");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      Charset charset0 = Charset.defaultCharset();
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(objectOutputStream0, ""WQ?<)VUy/8(+e}2z)"", charset0);
      BufferedWriter bufferedWriter0 = GeometryIOUtils.createBufferedWriter(streamGeometryOutput0, (Charset) null);
}"
5366,"    public static BufferedReader createBufferedReader(final GeometryInput input, final Charset defaultCharset) {
        final Charset charset = input.getCharset() != null ?
                input.getCharset() :
                defaultCharset;

        return new BufferedReader(new InputStreamReader(input.getInputStream(), charset));
    }","  public void test1()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StreamGeometryInput streamGeometryInput0 = new StreamGeometryInput((InputStream) null, ""R!CV 3)6WKU"", charset0);
      // Undeclared exception!
      try { 
        GeometryIOUtils.createBufferedReader(streamGeometryInput0, (Charset) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.Reader"", e);
      }
  }"
5367,"    public static void closeUnchecked(final Closeable closeable) {
        try {
            closeable.close();
        } catch (IOException exc) {
            throw createUnchecked(exc);
        }
    }","  public void test2()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      GeometryIOUtils.closeUnchecked(objectOutputStream0);
  }"
5368,"    public static <T, C extends Closeable> T tryApplyCloseable(final IOFunction<C, T> function,
            final IOSupplier<? extends C> closeableSupplier) {
        C closeable = null;
        RuntimeException exc;
        try {
            closeable = closeableSupplier.get();
            return function.apply(closeable);
        } catch (RuntimeException e) {
            exc = e;
        } catch (IOException e) {
            exc = createUnchecked(e);
        }

        if (closeable != null) {
            try {
                closeable.close();
            } catch (IOException suppressed) {
                exc.addSuppressed(suppressed);
            }
        }

        throw exc;
    }","  public void test3()  throws Throwable  {
      IOFunction<DataInputStream, BufferedInputStream> iOFunction0 = (IOFunction<DataInputStream, BufferedInputStream>) mock(IOFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iOFunction0).apply(any(java.io.DataInputStream.class));
      IOSupplier<DataInputStream> iOSupplier0 = (IOSupplier<DataInputStream>) mock(IOSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iOSupplier0).get();
      BufferedInputStream bufferedInputStream0 = GeometryIOUtils.tryApplyCloseable(iOFunction0, (IOSupplier<? extends DataInputStream>) iOSupplier0);
}"
5369,"    public static <T, C extends Closeable> T tryApplyCloseable(final IOFunction<C, T> function,
            final IOSupplier<? extends C> closeableSupplier) {
        C closeable = null;
        RuntimeException exc;
        try {
            closeable = closeableSupplier.get();
            return function.apply(closeable);
        } catch (RuntimeException e) {
            exc = e;
        } catch (IOException e) {
            exc = createUnchecked(e);
        }

        if (closeable != null) {
            try {
                closeable.close();
            } catch (IOException suppressed) {
                exc.addSuppressed(suppressed);
            }
        }

        throw exc;
    }","  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte)94);
      IOFunction<PipedOutputStream, ByteArrayInputStream> iOFunction0 = (IOFunction<PipedOutputStream, ByteArrayInputStream>) mock(IOFunction.class, new ViolatedAssumptionAnswer());
      doReturn(byteArrayInputStream0).when(iOFunction0).apply(any(java.io.PipedOutputStream.class));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOSupplier<PipedOutputStream> iOSupplier0 = (IOSupplier<PipedOutputStream>) mock(IOSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(pipedOutputStream0).when(iOSupplier0).get();
      ByteArrayInputStream byteArrayInputStream1 = GeometryIOUtils.tryApplyCloseable(iOFunction0, (IOSupplier<? extends PipedOutputStream>) iOSupplier0);
}"
5370,"    public static <T> T getUnchecked(final IOSupplier<T> supplier) {
        try {
            return supplier.get();
        } catch (IOException exc) {
            throw createUnchecked(exc);
        }
    }","  public void test5()  throws Throwable  {
      IOSupplier<LineNumberReader> iOSupplier0 = (IOSupplier<LineNumberReader>) mock(IOSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iOSupplier0).get();
      LineNumberReader lineNumberReader0 = GeometryIOUtils.getUnchecked(iOSupplier0);
}"
5371,"    public static <T> T getUnchecked(final IOSupplier<T> supplier) {
        try {
            return supplier.get();
        } catch (IOException exc) {
            throw createUnchecked(exc);
        }
    }","  public void test6()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""wL4D^UvT"");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 1);
      IOSupplier<LineNumberReader> iOSupplier0 = (IOSupplier<LineNumberReader>) mock(IOSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(lineNumberReader0).when(iOSupplier0).get();
      LineNumberReader lineNumberReader1 = GeometryIOUtils.getUnchecked(iOSupplier0);
}"
5372,"    public static UncheckedIOException createUnchecked(final IOException exc) {
        final String msg = exc.getClass().getSimpleName() + "": "" + exc.getMessage();
        return new UncheckedIOException(msg, exc);
    }","  public void test7()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable(""|:Tn$v/4ja842a3,"");
      MockIOException mockIOException0 = new MockIOException("""", mockThrowable0);
      UncheckedIOException uncheckedIOException0 = GeometryIOUtils.createUnchecked(mockIOException0);
}"
5373,"    public static <T, I extends InputStream> Stream<T> createCloseableStream(
            final IOFunction<I, Stream<T>> streamFunction, final IOSupplier<? extends I> inputStreamSupplier) {
        return tryApplyCloseable(
                in -> streamFunction.apply(in).onClose(closeAsUncheckedRunnable(in)),
                inputStreamSupplier);
    }","  public void test8()  throws Throwable  {
      Supplier<PushbackReader> supplier0 = (Supplier<PushbackReader>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Stream<PushbackReader> stream0 = Stream.generate(supplier0);
      IOFunction<BufferedInputStream, Stream<PushbackReader>> iOFunction0 = (IOFunction<BufferedInputStream, Stream<PushbackReader>>) mock(IOFunction.class, new ViolatedAssumptionAnswer());
      doReturn(stream0).when(iOFunction0).apply(any(java.io.BufferedInputStream.class));
      IOSupplier<BufferedInputStream> iOSupplier0 = (IOSupplier<BufferedInputStream>) mock(IOSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedInputStream) null).when(iOSupplier0).get();
      Stream<PushbackReader> stream1 = GeometryIOUtils.createCloseableStream(iOFunction0, (IOSupplier<? extends BufferedInputStream>) iOSupplier0);
}"
5374,"    public static BufferedReader createBufferedReader(final GeometryInput input, final Charset defaultCharset) {
        final Charset charset = input.getCharset() != null ?
                input.getCharset() :
                defaultCharset;

        return new BufferedReader(new InputStreamReader(input.getInputStream(), charset));
    }","  public void test9()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      StreamGeometryInput streamGeometryInput0 = new StreamGeometryInput(dataInputStream0);
      BufferedReader bufferedReader0 = GeometryIOUtils.createBufferedReader(streamGeometryInput0, charset0);
}"
5375,"    public static <T> int applyAsIntUnchecked(final IOToIntFunction<T> fn, final T arg) {
        try {
            return fn.applyAsInt(arg);
        } catch (IOException exc) {
            throw createUnchecked(exc);
        }
    }","  public void test10()  throws Throwable  {
      IOToIntFunction<MockFileOutputStream> iOToIntFunction0 = (IOToIntFunction<MockFileOutputStream>) mock(IOToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iOToIntFunction0).applyAsInt(any(org.evosuite.runtime.mock.java.io.MockFileOutputStream.class));
      MockFile mockFile0 = new MockFile(""pvPy"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      int int0 = GeometryIOUtils.applyAsIntUnchecked(iOToIntFunction0, mockFileOutputStream0);
}"
5376,"    public static <T> int applyAsIntUnchecked(final IOToIntFunction<T> fn, final T arg) {
        try {
            return fn.applyAsInt(arg);
        } catch (IOException exc) {
            throw createUnchecked(exc);
        }
    }","  public void test11()  throws Throwable  {
      IOToIntFunction<Object> iOToIntFunction0 = (IOToIntFunction<Object>) mock(IOToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(19).when(iOToIntFunction0).applyAsInt(any());
      int int0 = GeometryIOUtils.applyAsIntUnchecked(iOToIntFunction0, (Object) null);
}"
5377,"    public static <T> int applyAsIntUnchecked(final IOToIntFunction<T> fn, final T arg) {
        try {
            return fn.applyAsInt(arg);
        } catch (IOException exc) {
            throw createUnchecked(exc);
        }
    }","  public void test12()  throws Throwable  {
      IOToIntFunction<InputStreamReader> iOToIntFunction0 = (IOToIntFunction<InputStreamReader>) mock(IOToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2828)).when(iOToIntFunction0).applyAsInt(any(java.io.InputStreamReader.class));
      int int0 = GeometryIOUtils.applyAsIntUnchecked(iOToIntFunction0, (InputStreamReader) null);
}"
5378,"    public static <T, I extends InputStream> Stream<T> createCloseableStream(
            final IOFunction<I, Stream<T>> streamFunction, final IOSupplier<? extends I> inputStreamSupplier) {
        return tryApplyCloseable(
                in -> streamFunction.apply(in).onClose(closeAsUncheckedRunnable(in)),
                inputStreamSupplier);
    }","  public void test13()  throws Throwable  {
      IOFunction<BufferedInputStream, Stream<BufferedReader>> iOFunction0 = (IOFunction<BufferedInputStream, Stream<BufferedReader>>) mock(IOFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Stream<BufferedReader>) null).when(iOFunction0).apply(any(java.io.BufferedInputStream.class));
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, (InputStream) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      IOSupplier<BufferedInputStream> iOSupplier0 = (IOSupplier<BufferedInputStream>) mock(IOSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(bufferedInputStream0).when(iOSupplier0).get();
      // Undeclared exception!
      try { 
        GeometryIOUtils.createCloseableStream(iOFunction0, (IOSupplier<? extends BufferedInputStream>) iOSupplier0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.FilterInputStream"", e);
      }
  }"
5379,"    public static void closeUnchecked(final Closeable closeable) {
        try {
            closeable.close();
        } catch (IOException exc) {
            throw createUnchecked(exc);
        }
    }","  public void test14()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileWriter mockFileWriter0 = new MockFileWriter("": "");
      // Undeclared exception!
      try { 
        GeometryIOUtils.closeUnchecked(mockFileWriter0);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Simulated IOException
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5380,"    public static <T> void acceptUnchecked(final IOConsumer<T> consumer, final T arg) {
        try {
            consumer.accept(arg);
        } catch (IOException exc) {
            throw createUnchecked(exc);
        }
    }","  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1807);
      // Undeclared exception!
      try { 
        GeometryIOUtils.acceptUnchecked((IOConsumer<FilterInputStream>) null, (FilterInputStream) bufferedInputStream0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5381,"    public static <T, C extends Closeable> T tryApplyCloseable(final IOFunction<C, T> function,
            final IOSupplier<? extends C> closeableSupplier) {
        C closeable = null;
        RuntimeException exc;
        try {
            closeable = closeableSupplier.get();
            return function.apply(closeable);
        } catch (RuntimeException e) {
            exc = e;
        } catch (IOException e) {
            exc = createUnchecked(e);
        }

        if (closeable != null) {
            try {
                closeable.close();
            } catch (IOException suppressed) {
                exc.addSuppressed(suppressed);
            }
        }

        throw exc;
    }","  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometryIOUtils.tryApplyCloseable((IOFunction<CharArrayReader, BufferedOutputStream>) null, (IOSupplier<? extends CharArrayReader>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5382,"    public static <T, C extends Closeable> T tryApplyCloseable(final IOFunction<C, T> function,
            final IOSupplier<? extends C> closeableSupplier) {
        C closeable = null;
        RuntimeException exc;
        try {
            closeable = closeableSupplier.get();
            return function.apply(closeable);
        } catch (RuntimeException e) {
            exc = e;
        } catch (IOException e) {
            exc = createUnchecked(e);
        }

        if (closeable != null) {
            try {
                closeable.close();
            } catch (IOException suppressed) {
                exc.addSuppressed(suppressed);
            }
        }

        throw exc;
    }","  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""J63\""0`|]e5g yw~(/"", ""J63\""0`|]e5g yw~(/"");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      IOSupplier<MockFileWriter> iOSupplier0 = (IOSupplier<MockFileWriter>) mock(IOSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(mockFileWriter0).when(iOSupplier0).get();
      // Undeclared exception!
      try { 
        GeometryIOUtils.tryApplyCloseable((IOFunction<OutputStreamWriter, Object>) null, (IOSupplier<? extends OutputStreamWriter>) iOSupplier0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5383,"    public static String getFileName(final Path path) {
        if (path != null) {
            return getFileName(path.toString());
        }

        return null;
    }","  public void test18()  throws Throwable  {
      String string0 = GeometryIOUtils.getFileName("": "");
}"
5384,"    public static String getFileName(final Path path) {
        if (path != null) {
            return getFileName(path.toString());
        }

        return null;
    }","  public void test19()  throws Throwable  {
      String string0 = GeometryIOUtils.getFileName("": "");
}"
5385,"    public static String getFileName(final Path path) {
        if (path != null) {
            return getFileName(path.toString());
        }

        return null;
    }","  public void test20()  throws Throwable  {
      String string0 = GeometryIOUtils.getFileName((URL) null);
}"
5386,"    public static IllegalStateException parseError(final String msg) {
        return parseError(msg, null);
    }","  public void test21()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable(""|:Tn$v/4ja842a3,"");
      IllegalStateException illegalStateException0 = GeometryIOUtils.parseError(""|:Tn$v/4ja842a3,"", (Throwable) mockThrowable0);
}"
5387,"    public static <T, I extends InputStream> Stream<T> createCloseableStream(
            final IOFunction<I, Stream<T>> streamFunction, final IOSupplier<? extends I> inputStreamSupplier) {
        return tryApplyCloseable(
                in -> streamFunction.apply(in).onClose(closeAsUncheckedRunnable(in)),
                inputStreamSupplier);
    }","  public void test22()  throws Throwable  {
      DataInputStream dataInputStream0 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      IOSupplier<DataInputStream> iOSupplier0 = (IOSupplier<DataInputStream>) mock(IOSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(dataInputStream0).when(iOSupplier0).get();
      IOFunction<FilterInputStream, Stream<ObjectOutputStream>> iOFunction0 = (IOFunction<FilterInputStream, Stream<ObjectOutputStream>>) mock(IOFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iOFunction0).apply(any(java.io.FilterInputStream.class));
      // Undeclared exception!
      try { 
        GeometryIOUtils.createCloseableStream(iOFunction0, (IOSupplier<? extends FilterInputStream>) iOSupplier0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5388,"    public static BufferedWriter createBufferedWriter(final GeometryOutput output, final Charset defaultCharset) {
        final Charset charset = output.getCharset() != null ?
                output.getCharset() :
                defaultCharset;

        return new BufferedWriter(new OutputStreamWriter(output.getOutputStream(), charset));
    }","  public void test23()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        GeometryIOUtils.createBufferedWriter(streamGeometryOutput0, (Charset) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException(""java.io.OutputStreamWriter"", e);
      }
  }"
5389,"    public static BufferedReader createBufferedReader(final GeometryInput input, final Charset defaultCharset) {
        final Charset charset = input.getCharset() != null ?
                input.getCharset() :
                defaultCharset;

        return new BufferedReader(new InputStreamReader(input.getInputStream(), charset));
    }","  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""0a*E <iUwjiv"", ""0a*E <iUwjiv"");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      FileGeometryInput fileGeometryInput0 = new FileGeometryInput(path0, charset0);
      // Undeclared exception!
      try { 
        GeometryIOUtils.createBufferedReader(fileGeometryInput0, charset0);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // NoSuchFileException: /media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-geometry-1.0-src/commons-geometry-io-core/0a*E <iUwjiv/0a*E <iUwjiv
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5390,"    public static BufferedReader createBufferedReader(final GeometryInput input, final Charset defaultCharset) {
        final Charset charset = input.getCharset() != null ?
                input.getCharset() :
                defaultCharset;

        return new BufferedReader(new InputStreamReader(input.getInputStream(), charset));
    }","  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      Path path0 = mockFile0.toPath();
      FileGeometryInput fileGeometryInput0 = new FileGeometryInput(path0);
      // Undeclared exception!
      try { 
        GeometryIOUtils.createBufferedReader(fileGeometryInput0, (Charset) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException(""java.io.InputStreamReader"", e);
      }
  }"
5391,"    public static String getFileExtension(final String fileName) {
        if (fileName != null) {
            final int idx = fileName.lastIndexOf('.');
            if (idx > -1) {
                return fileName.substring(idx + 1);
            }

            return """";
        }

        return null;
    }","  public void test26()  throws Throwable  {
      String string0 = GeometryIOUtils.getFileExtension(""}|_.,"");
}"
5392,"    public static String getFileExtension(final String fileName) {
        if (fileName != null) {
            final int idx = fileName.lastIndexOf('.');
            if (idx > -1) {
                return fileName.substring(idx + 1);
            }

            return """";
        }

        return null;
    }","  public void test27()  throws Throwable  {
      String string0 = GeometryIOUtils.getFileExtension("""");
}"
5393,"    public static String getFileExtension(final String fileName) {
        if (fileName != null) {
            final int idx = fileName.lastIndexOf('.');
            if (idx > -1) {
                return fileName.substring(idx + 1);
            }

            return """";
        }

        return null;
    }","  public void test28()  throws Throwable  {
      String string0 = GeometryIOUtils.getFileExtension((String) null);
}"
5394,"    public static String getFileName(final Path path) {
        if (path != null) {
            return getFileName(path.toString());
        }

        return null;
    }","  public void test29()  throws Throwable  {
      String string0 = GeometryIOUtils.getFileName("""");
}"
5395,"    public static String getFileName(final Path path) {
        if (path != null) {
            return getFileName(path.toString());
        }

        return null;
    }","  public void test30()  throws Throwable  {
      String string0 = GeometryIOUtils.getFileName((String) null);
}"
5396,"    public static String getFileName(final Path path) {
        if (path != null) {
            return getFileName(path.toString());
        }

        return null;
    }","  public void test31()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      String string0 = GeometryIOUtils.getFileName(uRL0);
}"
5397,"    public static String getFileName(final Path path) {
        if (path != null) {
            return getFileName(path.toString());
        }

        return null;
    }","  public void test32()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      String string0 = GeometryIOUtils.getFileName(uRL0);
}"
5398,"    public static String getFileName(final Path path) {
        if (path != null) {
            return getFileName(path.toString());
        }

        return null;
    }","  public void test33()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""fooExample"", """");
      Path path0 = mockFile0.toPath();
      String string0 = GeometryIOUtils.getFileName(path0);
}"
5399,"    public static String getFileName(final Path path) {
        if (path != null) {
            return getFileName(path.toString());
        }

        return null;
    }","  public void test34()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""fooExample"", """");
      Path path0 = mockFile0.toPath();
      String string0 = GeometryIOUtils.getFileName(path0);
}"
5400,"    public static String getFileName(final Path path) {
        if (path != null) {
            return getFileName(path.toString());
        }

        return null;
    }","  public void test35()  throws Throwable  {
      String string0 = GeometryIOUtils.getFileName((Path) null);
}"
5401,"    public static <T> int applyAsIntUnchecked(final IOToIntFunction<T> fn, final T arg) {
        try {
            return fn.applyAsInt(arg);
        } catch (IOException exc) {
            throw createUnchecked(exc);
        }
    }","  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometryIOUtils.applyAsIntUnchecked((IOToIntFunction<String>) null, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5402,"    public static UncheckedIOException createUnchecked(final IOException exc) {
        final String msg = exc.getClass().getSimpleName() + "": "" + exc.getMessage();
        return new UncheckedIOException(msg, exc);
    }","  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometryIOUtils.createUnchecked((IOException) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5403,"    public static <T> T getUnchecked(final IOSupplier<T> supplier) {
        try {
            return supplier.get();
        } catch (IOException exc) {
            throw createUnchecked(exc);
        }
    }","  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometryIOUtils.getUnchecked((IOSupplier<MockFileInputStream>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5404,"    public static void closeUnchecked(final Closeable closeable) {
        try {
            closeable.close();
        } catch (IOException exc) {
            throw createUnchecked(exc);
        }
    }","  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometryIOUtils.closeUnchecked((Closeable) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5405,"    public static IllegalStateException parseError(final String msg) {
        return parseError(msg, null);
    }","  public void test40()  throws Throwable  {
      IllegalStateException illegalStateException0 = GeometryIOUtils.parseError(""[fileName= "");
}"
5406,"    public static <T> void acceptUnchecked(final IOConsumer<T> consumer, final T arg) {
        try {
            consumer.accept(arg);
        } catch (IOException exc) {
            throw createUnchecked(exc);
        }
    }","  public void test41()  throws Throwable  {
      IOConsumer<BufferedReader> iOConsumer0 = (IOConsumer<BufferedReader>) mock(IOConsumer.class, new ViolatedAssumptionAnswer());
      GeometryIOUtils.acceptUnchecked(iOConsumer0, (BufferedReader) null);
  }"
5407,"    public int charAt(final int index) {
        if (index < 0) {
            throw new IllegalArgumentException(""Character index cannot be negative; was "" + index);
        }
        final int requiredSize = index + 1;
        if (makeAvailable(requiredSize) < requiredSize) {
            return EOF;
        }

        return buffer[(head + index) % buffer.length];
    }","  public void test0()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Min read value must be greater than 0; was "");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1);
      int int0 = charReadBuffer0.charAt(15);
}"
5408,"    public String readString(final int len) {
        final String result = peekString(len);
        if (result != null) {
            charsRemoved(result.length());
        }

        return result;
    }","  public void test1()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Min read value must be greater than 0; was "");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1);
      int int0 = charReadBuffer0.charAt(15);
      charReadBuffer0.pushString(""YhkVJMbxHvD3m"");
      String string0 = charReadBuffer0.readString(104);
}"
5409,"    public String readString(final int len) {
        final String result = peekString(len);
        if (result != null) {
            charsRemoved(result.length());
        }

        return result;
    }","  public void test2()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Min read value must be greater than 0; was "");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1);
      int int0 = charReadBuffer0.charAt(15);
      charReadBuffer0.pushString(""YhkVJMbxHvD3m"");
      String string0 = charReadBuffer0.readString(104);
}"
5410,"    public int skip(final int n) {
        if (n < 0) {
            throw new IllegalArgumentException(""Character skip count cannot be negative; was "" + n);
        }

        // skip buffered content first
        int skipped = Math.min(n, count);
        charsRemoved(skipped);

        // skip from the reader if required
        final int remaining = n - skipped;
        if (remaining > 0) {
            try {
                skipped += (int) reader.skip(remaining);
            } catch (IOException exc) {
                throw GeometryIOUtils.createUnchecked(exc);
            }
        }

        return skipped;
    }","  public void test3()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1922);
      int int0 = charReadBuffer0.skip(0);
}"
5411,"    public int charAt(final int index) {
        if (index < 0) {
            throw new IllegalArgumentException(""Character index cannot be negative; was "" + index);
        }
        final int requiredSize = index + 1;
        if (makeAvailable(requiredSize) < requiredSize) {
            return EOF;
        }

        return buffer[(head + index) % buffer.length];
    }","  public void test4()  throws Throwable  {
      StringReader stringReader0 = new StringReader("".SIe&b7L0$s~#,cl:"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      int int0 = charReadBuffer0.charAt(0);
}"
5412,"    public String peekString(final int len) {
        if (len < 0) {
            throw new IllegalArgumentException(""Requested string length cannot be negative; was "" + len);
        } else if (len == 0) {
            return hasMoreCharacters() ?
                    """" :
                    null;
        }

        final int available = makeAvailable(len);
        final int resultLen = Math.min(len, available);
        if (resultLen < 1) {
            return null;
        }

        final int contiguous = Math.min(buffer.length - head, resultLen);
        final int remaining = resultLen - contiguous;

        String result = String.valueOf(buffer, head, contiguous);
        if (remaining > 0) {
            result += String.valueOf(buffer, 0, remaining);
        }

        return result;
    }","  public void test5()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""H$x?!/R-Bs`a]_I-@"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      charReadBuffer0.push('l');
      String string0 = charReadBuffer0.peekString('l');
}"
5413,"    public String peekString(final int len) {
        if (len < 0) {
            throw new IllegalArgumentException(""Requested string length cannot be negative; was "" + len);
        } else if (len == 0) {
            return hasMoreCharacters() ?
                    """" :
                    null;
        }

        final int available = makeAvailable(len);
        final int resultLen = Math.min(len, available);
        if (resultLen < 1) {
            return null;
        }

        final int contiguous = Math.min(buffer.length - head, resultLen);
        final int remaining = resultLen - contiguous;

        String result = String.valueOf(buffer, head, contiguous);
        if (remaining > 0) {
            result += String.valueOf(buffer, 0, remaining);
        }

        return result;
    }","  public void test6()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""H$x?!/R-Bs`a]_I-@"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      charReadBuffer0.push('l');
      String string0 = charReadBuffer0.peekString('l');
}"
5414,"    public int read() {
        final int result = peek();
        charsRemoved(1);

        return result;
    }","  public void test7()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      int int0 = charReadBuffer0.read();
}"
5415,"    public boolean hasMoreCharacters() {
        return makeAvailable(1) > 0;
    }","  public void test8()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      int int0 = charReadBuffer0.read();
      boolean boolean0 = charReadBuffer0.hasMoreCharacters();
}"
5416,"    public int skip(final int n) {
        if (n < 0) {
            throw new IllegalArgumentException(""Character skip count cannot be negative; was "" + n);
        }

        // skip buffered content first
        int skipped = Math.min(n, count);
        charsRemoved(skipped);

        // skip from the reader if required
        final int remaining = n - skipped;
        if (remaining > 0) {
            try {
                skipped += (int) reader.skip(remaining);
            } catch (IOException exc) {
                throw GeometryIOUtils.createUnchecked(exc);
            }
        }

        return skipped;
    }","  public void test9()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1941);
      int int0 = charReadBuffer0.read();
      int int1 = charReadBuffer0.skip(1941);
}"
5417,"    public int skip(final int n) {
        if (n < 0) {
            throw new IllegalArgumentException(""Character skip count cannot be negative; was "" + n);
        }

        // skip buffered content first
        int skipped = Math.min(n, count);
        charsRemoved(skipped);

        // skip from the reader if required
        final int remaining = n - skipped;
        if (remaining > 0) {
            try {
                skipped += (int) reader.skip(remaining);
            } catch (IOException exc) {
                throw GeometryIOUtils.createUnchecked(exc);
            }
        }

        return skipped;
    }","  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1941);
      int int0 = charReadBuffer0.read();
      int int1 = charReadBuffer0.skip(1941);
}"
5418,"    public int read() {
        final int result = peek();
        charsRemoved(1);

        return result;
    }","  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""$]ihm{>S+toz/`"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 10);
      int int0 = charReadBuffer0.read();
}"
5419,"    public int skip(final int n) {
        if (n < 0) {
            throw new IllegalArgumentException(""Character skip count cannot be negative; was "" + n);
        }

        // skip buffered content first
        int skipped = Math.min(n, count);
        charsRemoved(skipped);

        // skip from the reader if required
        final int remaining = n - skipped;
        if (remaining > 0) {
            try {
                skipped += (int) reader.skip(remaining);
            } catch (IOException exc) {
                throw GeometryIOUtils.createUnchecked(exc);
            }
        }

        return skipped;
    }","  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""PD`6!occXd"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 47, 47);
      int int0 = charReadBuffer0.skip(47);
}"
5420,"    public int makeAvailable(final int n) {
        final int diff = n - count;
        if (diff > 0) {
            readChars(diff);
        }
        return count;
    }","  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""PD`6!occXd"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 47, 47);
      int int0 = charReadBuffer0.skip(47);
      int int1 = charReadBuffer0.read();
      int int2 = charReadBuffer0.makeAvailable(7);
}"
5421,"    public int makeAvailable(final int n) {
        final int diff = n - count;
        if (diff > 0) {
            readChars(diff);
        }
        return count;
    }","  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""PD`6!occXd"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 47, 47);
      int int0 = charReadBuffer0.skip(47);
      int int1 = charReadBuffer0.read();
      int int2 = charReadBuffer0.makeAvailable(7);
}"
5422,"    public int skip(final int n) {
        if (n < 0) {
            throw new IllegalArgumentException(""Character skip count cannot be negative; was "" + n);
        }

        // skip buffered content first
        int skipped = Math.min(n, count);
        charsRemoved(skipped);

        // skip from the reader if required
        final int remaining = n - skipped;
        if (remaining > 0) {
            try {
                skipped += (int) reader.skip(remaining);
            } catch (IOException exc) {
                throw GeometryIOUtils.createUnchecked(exc);
            }
        }

        return skipped;
    }","  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 512, 2);
      stringReader0.close();
      // Undeclared exception!
      try { 
        charReadBuffer0.skip(512);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5423,"    public String readString(final int len) {
        final String result = peekString(len);
        if (result != null) {
            charsRemoved(result.length());
        }

        return result;
    }","  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      // Undeclared exception!
      try { 
        charReadBuffer0.readString((-1));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Requested string length cannot be negative; was -1
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.CharReadBuffer"", e);
      }
  }"
5424,"    public String readString(final int len) {
        final String result = peekString(len);
        if (result != null) {
            charsRemoved(result.length());
        }

        return result;
    }","  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      stringReader0.close();
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      // Undeclared exception!
      try { 
        charReadBuffer0.readString(0);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5425,"    public int read() {
        final int result = peek();
        charsRemoved(1);

        return result;
    }","  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      stringReader0.close();
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1346);
      // Undeclared exception!
      try { 
        charReadBuffer0.read();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5426,"    public void pushString(final String str) {
        final int len = str.length();

        ensureCapacity(count + len);
        for (int i = len - 1; i >= 0; --i) {
            pushCharInternal(str.charAt(i));
        }
    }","  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""_WP{m D"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 2);
      // Undeclared exception!
      try { 
        charReadBuffer0.pushString((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.CharReadBuffer"", e);
      }
  }"
5427,"    public void pushString(final String str) {
        final int len = str.length();

        ensureCapacity(count + len);
        for (int i = len - 1; i >= 0; --i) {
            pushCharInternal(str.charAt(i));
        }
    }","  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Requested string length cannot be negative; was "");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1);
      charReadBuffer0.skip(101);
      charReadBuffer0.read();
      // Undeclared exception!
      try { 
        charReadBuffer0.pushString(""5~>Aq"");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }"
5428,"    public String peekString(final int len) {
        if (len < 0) {
            throw new IllegalArgumentException(""Requested string length cannot be negative; was "" + len);
        } else if (len == 0) {
            return hasMoreCharacters() ?
                    """" :
                    null;
        }

        final int available = makeAvailable(len);
        final int resultLen = Math.min(len, available);
        if (resultLen < 1) {
            return null;
        }

        final int contiguous = Math.min(buffer.length - head, resultLen);
        final int remaining = resultLen - contiguous;

        String result = String.valueOf(buffer, head, contiguous);
        if (remaining > 0) {
            result += String.valueOf(buffer, 0, remaining);
        }

        return result;
    }","  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""H$x?!/R-Bs`a]_I-@"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      stringReader0.close();
      // Undeclared exception!
      try { 
        charReadBuffer0.peekString('o');
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5429,"    public int peek() {
        if (makeAvailable(1) < 1) {
            return EOF;
        }
        return buffer[head];
    }","  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Character skip count cannot be negative; was "");
      stringReader0.close();
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 46, 46);
      // Undeclared exception!
      try { 
        charReadBuffer0.peek();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5430,"    public int makeAvailable(final int n) {
        final int diff = n - count;
        if (diff > 0) {
            readChars(diff);
        }
        return count;
    }","  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""yCvSxfc wC"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      stringReader0.close();
      // Undeclared exception!
      try { 
        charReadBuffer0.makeAvailable(1889);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5431,"    public boolean hasMoreCharacters() {
        return makeAvailable(1) > 0;
    }","  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""oDBx$*|`V5$b2g4"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      stringReader0.close();
      // Undeclared exception!
      try { 
        charReadBuffer0.hasMoreCharacters();
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5432,"    public int charAt(final int index) {
        if (index < 0) {
            throw new IllegalArgumentException(""Character index cannot be negative; was "" + index);
        }
        final int requiredSize = index + 1;
        if (makeAvailable(requiredSize) < requiredSize) {
            return EOF;
        }

        return buffer[(head + index) % buffer.length];
    }","  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      stringReader0.close();
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 2, 2);
      // Undeclared exception!
      try { 
        charReadBuffer0.charAt(2);
        fail(""Expecting exception: UncheckedIOException"");
      } catch(UncheckedIOException e) {
         //
         // IOException: Stream closed
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.GeometryIOUtils"", e);
      }
  }"
5433,"    public CharReadBuffer(final Reader reader) {
        this(reader, DEFAULT_INITIAL_CAPACITY);
    }","  public void test26()  throws Throwable  {
      CharReadBuffer charReadBuffer0 = null;
      try {
        charReadBuffer0 = new CharReadBuffer((Reader) null, (-1), (-2874));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Reader cannot be null
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
5434,"    public CharReadBuffer(final Reader reader) {
        this(reader, DEFAULT_INITIAL_CAPACITY);
    }","  public void test27()  throws Throwable  {
      CharReadBuffer charReadBuffer0 = null;
      try {
        charReadBuffer0 = new CharReadBuffer((Reader) null, (-2292));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Reader cannot be null
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
5435,"    public CharReadBuffer(final Reader reader) {
        this(reader, DEFAULT_INITIAL_CAPACITY);
    }","  public void test28()  throws Throwable  {
      CharReadBuffer charReadBuffer0 = null;
      try {
        charReadBuffer0 = new CharReadBuffer((Reader) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Reader cannot be null
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
5436,"    public String readString(final int len) {
        final String result = peekString(len);
        if (result != null) {
            charsRemoved(result.length());
        }

        return result;
    }","  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""$]ihm{>S+toz/`"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 10);
      String string0 = charReadBuffer0.readString(1);
}"
5437,"    public String peekString(final int len) {
        if (len < 0) {
            throw new IllegalArgumentException(""Requested string length cannot be negative; was "" + len);
        } else if (len == 0) {
            return hasMoreCharacters() ?
                    """" :
                    null;
        }

        final int available = makeAvailable(len);
        final int resultLen = Math.min(len, available);
        if (resultLen < 1) {
            return null;
        }

        final int contiguous = Math.min(buffer.length - head, resultLen);
        final int remaining = resultLen - contiguous;

        String result = String.valueOf(buffer, head, contiguous);
        if (remaining > 0) {
            result += String.valueOf(buffer, 0, remaining);
        }

        return result;
    }","  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""$]ihm{>S+toz/`"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 10);
      String string0 = charReadBuffer0.readString(1);
      String string1 = charReadBuffer0.peekString(10);
}"
5438,"    public String peekString(final int len) {
        if (len < 0) {
            throw new IllegalArgumentException(""Requested string length cannot be negative; was "" + len);
        } else if (len == 0) {
            return hasMoreCharacters() ?
                    """" :
                    null;
        }

        final int available = makeAvailable(len);
        final int resultLen = Math.min(len, available);
        if (resultLen < 1) {
            return null;
        }

        final int contiguous = Math.min(buffer.length - head, resultLen);
        final int remaining = resultLen - contiguous;

        String result = String.valueOf(buffer, head, contiguous);
        if (remaining > 0) {
            result += String.valueOf(buffer, 0, remaining);
        }

        return result;
    }","  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""$]ihm{>S+toz/`"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 10);
      String string0 = charReadBuffer0.readString(1);
      String string1 = charReadBuffer0.peekString(10);
}"
5439,"    public String peekString(final int len) {
        if (len < 0) {
            throw new IllegalArgumentException(""Requested string length cannot be negative; was "" + len);
        } else if (len == 0) {
            return hasMoreCharacters() ?
                    """" :
                    null;
        }

        final int available = makeAvailable(len);
        final int resultLen = Math.min(len, available);
        if (resultLen < 1) {
            return null;
        }

        final int contiguous = Math.min(buffer.length - head, resultLen);
        final int remaining = resultLen - contiguous;

        String result = String.valueOf(buffer, head, contiguous);
        if (remaining > 0) {
            result += String.valueOf(buffer, 0, remaining);
        }

        return result;
    }","  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""H$x?!/R-Bs`a]_I-@"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      charReadBuffer0.skip(19);
      String string0 = charReadBuffer0.peekString(19);
}"
5440,"    public int peek() {
        if (makeAvailable(1) < 1) {
            return EOF;
        }
        return buffer[head];
    }","  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 220, 220);
      int int0 = charReadBuffer0.peek();
}"
5441,"    public int makeAvailable(final int n) {
        final int diff = n - count;
        if (diff > 0) {
            readChars(diff);
        }
        return count;
    }","  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      int int0 = charReadBuffer0.makeAvailable(0);
}"
5442,"    public boolean hasMoreCharacters() {
        return makeAvailable(1) > 0;
    }","  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 220, 220);
      boolean boolean0 = charReadBuffer0.hasMoreCharacters();
}"
5443,"    public boolean hasMoreCharacters() {
        return makeAvailable(1) > 0;
    }","  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""0x^n="");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1882, 42);
      boolean boolean0 = charReadBuffer0.hasMoreCharacters();
}"
5444,"    public String peekString(final int len) {
        if (len < 0) {
            throw new IllegalArgumentException(""Requested string length cannot be negative; was "" + len);
        } else if (len == 0) {
            return hasMoreCharacters() ?
                    """" :
                    null;
        }

        final int available = makeAvailable(len);
        final int resultLen = Math.min(len, available);
        if (resultLen < 1) {
            return null;
        }

        final int contiguous = Math.min(buffer.length - head, resultLen);
        final int remaining = resultLen - contiguous;

        String result = String.valueOf(buffer, head, contiguous);
        if (remaining > 0) {
            result += String.valueOf(buffer, 0, remaining);
        }

        return result;
    }","  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("":,rJ_'<_&[S4q."");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1, 1);
      String string0 = charReadBuffer0.peekString(0);
}"
5445,"    public CharReadBuffer(final Reader reader) {
        this(reader, DEFAULT_INITIAL_CAPACITY);
    }","  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""cd@q\""wi0"");
      CharReadBuffer charReadBuffer0 = null;
      try {
        charReadBuffer0 = new CharReadBuffer(stringReader0, (-2247), 512);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Initial buffer capacity must be greater than 0; was -2247
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.CharReadBuffer"", e);
      }
  }"
5446,"    public int makeAvailable(final int n) {
        final int diff = n - count;
        if (diff > 0) {
            readChars(diff);
        }
        return count;
    }","  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      int int0 = charReadBuffer0.makeAvailable(1);
}"
5447,"    public int charAt(final int index) {
        if (index < 0) {
            throw new IllegalArgumentException(""Character index cannot be negative; was "" + index);
        }
        final int requiredSize = index + 1;
        if (makeAvailable(requiredSize) < requiredSize) {
            return EOF;
        }

        return buffer[(head + index) % buffer.length];
    }","  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      int int0 = charReadBuffer0.makeAvailable(1);
      int int1 = charReadBuffer0.charAt(2940);
}"
5448,"    public int makeAvailable(final int n) {
        final int diff = n - count;
        if (diff > 0) {
            readChars(diff);
        }
        return count;
    }","  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""org.apache.commons.geometry.io.core.internal.CharReadBuffer"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 21);
      int int0 = charReadBuffer0.makeAvailable(33);
}"
5449,"    public int skip(final int n) {
        if (n < 0) {
            throw new IllegalArgumentException(""Character skip count cannot be negative; was "" + n);
        }

        // skip buffered content first
        int skipped = Math.min(n, count);
        charsRemoved(skipped);

        // skip from the reader if required
        final int remaining = n - skipped;
        if (remaining > 0) {
            try {
                skipped += (int) reader.skip(remaining);
            } catch (IOException exc) {
                throw GeometryIOUtils.createUnchecked(exc);
            }
        }

        return skipped;
    }","  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""org.apache.commons.geometry.io.core.internal.CharReadBuffer"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 21);
      int int0 = charReadBuffer0.makeAvailable(33);
      int int1 = charReadBuffer0.skip(22);
}"
5450,"    public int skip(final int n) {
        if (n < 0) {
            throw new IllegalArgumentException(""Character skip count cannot be negative; was "" + n);
        }

        // skip buffered content first
        int skipped = Math.min(n, count);
        charsRemoved(skipped);

        // skip from the reader if required
        final int remaining = n - skipped;
        if (remaining > 0) {
            try {
                skipped += (int) reader.skip(remaining);
            } catch (IOException exc) {
                throw GeometryIOUtils.createUnchecked(exc);
            }
        }

        return skipped;
    }","  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Min 6ead value mustabe greater than 0; xas "");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 16);
      // Undeclared exception!
      try { 
        charReadBuffer0.skip((-3618));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Character skip count cannot be negative; was -3618
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.CharReadBuffer"", e);
      }
  }"
5451,"    public int charAt(final int index) {
        if (index < 0) {
            throw new IllegalArgumentException(""Character index cannot be negative; was "" + index);
        }
        final int requiredSize = index + 1;
        if (makeAvailable(requiredSize) < requiredSize) {
            return EOF;
        }

        return buffer[(head + index) % buffer.length];
    }","  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 648);
      // Undeclared exception!
      try { 
        charReadBuffer0.charAt((-630));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Character index cannot be negative; was -630
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.CharReadBuffer"", e);
      }
  }"
5452,"    public String peekString(final int len) {
        if (len < 0) {
            throw new IllegalArgumentException(""Requested string length cannot be negative; was "" + len);
        } else if (len == 0) {
            return hasMoreCharacters() ?
                    """" :
                    null;
        }

        final int available = makeAvailable(len);
        final int resultLen = Math.min(len, available);
        if (resultLen < 1) {
            return null;
        }

        final int contiguous = Math.min(buffer.length - head, resultLen);
        final int remaining = resultLen - contiguous;

        String result = String.valueOf(buffer, head, contiguous);
        if (remaining > 0) {
            result += String.valueOf(buffer, 0, remaining);
        }

        return result;
    }","  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""org.apache.commons.geometry.io.core.internal.CharReadBuffer"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 21);
      String string0 = charReadBuffer0.peekString(33);
}"
5453,"    public String peekString(final int len) {
        if (len < 0) {
            throw new IllegalArgumentException(""Requested string length cannot be negative; was "" + len);
        } else if (len == 0) {
            return hasMoreCharacters() ?
                    """" :
                    null;
        }

        final int available = makeAvailable(len);
        final int resultLen = Math.min(len, available);
        if (resultLen < 1) {
            return null;
        }

        final int contiguous = Math.min(buffer.length - head, resultLen);
        final int remaining = resultLen - contiguous;

        String result = String.valueOf(buffer, head, contiguous);
        if (remaining > 0) {
            result += String.valueOf(buffer, 0, remaining);
        }

        return result;
    }","  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""org.apache.commons.geometry.io.core.internal.CharReadBuffer"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 21);
      String string0 = charReadBuffer0.peekString(33);
}"
5454,"    public String peekString(final int len) {
        if (len < 0) {
            throw new IllegalArgumentException(""Requested string length cannot be negative; was "" + len);
        } else if (len == 0) {
            return hasMoreCharacters() ?
                    """" :
                    null;
        }

        final int available = makeAvailable(len);
        final int resultLen = Math.min(len, available);
        if (resultLen < 1) {
            return null;
        }

        final int contiguous = Math.min(buffer.length - head, resultLen);
        final int remaining = resultLen - contiguous;

        String result = String.valueOf(buffer, head, contiguous);
        if (remaining > 0) {
            result += String.valueOf(buffer, 0, remaining);
        }

        return result;
    }","  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""org.apache.commons.geometry.io.core.internal.CharReadBuffer"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      // Undeclared exception!
      try { 
        charReadBuffer0.peekString((-1));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Requested string length cannot be negative; was -1
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.CharReadBuffer"", e);
      }
  }"
5455,"    public int peek() {
        if (makeAvailable(1) < 1) {
            return EOF;
        }
        return buffer[head];
    }","  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""org.apache.commons.geometry.io.core.internal.CharReadBuffer"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      int int0 = charReadBuffer0.peek();
}"
5456,"    public String readString(final int len) {
        final String result = peekString(len);
        if (result != null) {
            charsRemoved(result.length());
        }

        return result;
    }","  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""org.apache.commons.geometry.io.core.internal.CharReadBuffer"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      int int0 = charReadBuffer0.peek();
      String string0 = charReadBuffer0.readString(0);
}"
5457,"    public String readString(final int len) {
        final String result = peekString(len);
        if (result != null) {
            charsRemoved(result.length());
        }

        return result;
    }","  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""org.apache.commons.geometry.io.core.internal.CharReadBuffer"");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      int int0 = charReadBuffer0.peek();
      String string0 = charReadBuffer0.readString(0);
}"
5458,"    public String peekString(final int len) {
        if (len < 0) {
            throw new IllegalArgumentException(""Requested string length cannot be negative; was "" + len);
        } else if (len == 0) {
            return hasMoreCharacters() ?
                    """" :
                    null;
        }

        final int available = makeAvailable(len);
        final int resultLen = Math.min(len, available);
        if (resultLen < 1) {
            return null;
        }

        final int contiguous = Math.min(buffer.length - head, resultLen);
        final int remaining = resultLen - contiguous;

        String result = String.valueOf(buffer, head, contiguous);
        if (remaining > 0) {
            result += String.valueOf(buffer, 0, remaining);
        }

        return result;
    }","  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0, 1922);
      String string0 = charReadBuffer0.peekString(0);
}"
5459,"    public CharReadBuffer(final Reader reader) {
        this(reader, DEFAULT_INITIAL_CAPACITY);
    }","  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""7H^=#.%8Q"");
      CharReadBuffer charReadBuffer0 = null;
      try {
        charReadBuffer0 = new CharReadBuffer(stringReader0, 22, (-1341));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Min read value must be greater than 0; was -1341
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.CharReadBuffer"", e);
      }
  }"
5460,"    public CharReadBuffer(final Reader reader) {
        this(reader, DEFAULT_INITIAL_CAPACITY);
    }","  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""\""kVtd5E_%-2zZAZc]WL"");
      CharReadBuffer charReadBuffer0 = null;
      try {
        charReadBuffer0 = new CharReadBuffer(stringReader0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Initial buffer capacity must be greater than 0; was 0
         //
         verifyException(""org.apache.commons.geometry.io.core.internal.CharReadBuffer"", e);
      }
  }"
5461,"    public String readString(final int len) {
        final String result = peekString(len);
        if (result != null) {
            charsRemoved(result.length());
        }

        return result;
    }","  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      CharReadBuffer charReadBuffer0 = new CharReadBuffer(stringReader0);
      String string0 = charReadBuffer0.readString(205);
}"
5462,"    public Path getFile() {
        return file;
    }","  public void test0()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""N~u}-"", ""N~u}-"");
      Path path0 = mockFile0.toPath();
      FileGeometryOutput fileGeometryOutput0 = new FileGeometryOutput(path0);
      Path path1 = fileGeometryOutput0.getFile();
}"
5463,"    public Path getFile() {
        return file;
    }","  public void test1()  throws Throwable  {
      FileGeometryOutput fileGeometryOutput0 = new FileGeometryOutput((Path) null);
      Path path0 = fileGeometryOutput0.getFile();
}"
5464,"    public String getFileName() {
        return fileName;
    }","  public void test2()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", """");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      FileGeometryOutput fileGeometryOutput0 = new FileGeometryOutput(path0, charset0);
}"
5465,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName())
            .append(""[file= "")
            .append(getFile())
            .append(']');

        return sb.toString();
    }","  public void test3()  throws Throwable  {
      FileGeometryOutput fileGeometryOutput0 = new FileGeometryOutput((Path) null);
      String string0 = fileGeometryOutput0.toString();
}"
5466,"    public OutputStream getOutputStream() {
        return GeometryIOUtils.getUnchecked(() -> new BufferedOutputStream(Files.newOutputStream(file)));
    }","  public void test4()  throws Throwable  {
      FileGeometryOutput fileGeometryOutput0 = new FileGeometryOutput((Path) null);
      // Undeclared exception!
      try { 
        fileGeometryOutput0.getOutputStream();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.file.Files"", e);
      }
  }"
5467,"    public OutputStream getOutputStream() {
        return out;
    }","  public void test0()  throws Throwable  {
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput((OutputStream) null);
      OutputStream outputStream0 = streamGeometryOutput0.getOutputStream();
}"
5468,"    public String getFileName() {
        return fileName;
    }","  public void test1()  throws Throwable  {
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      Charset charset0 = Charset.defaultCharset();
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(dataOutputStream0, ""I"", charset0);
}"
5469,"    public String getFileName() {
        return fileName;
    }","  public void test2()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(byteArrayOutputStream0, ""org.apache.commons.geometry.core.partitioning.test.TestTransform2D"");
}"
5470,"    public OutputStream getOutputStream() {
        return out;
    }","  public void test3()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(bufferedOutputStream0);
      OutputStream outputStream0 = streamGeometryOutput0.getOutputStream();
}"
5471,"    public SplitLocation getLocation() {
        if (minus != null) {
            return plus != null ? SplitLocation.BOTH : SplitLocation.MINUS;
        } else if (plus != null) {
            return SplitLocation.PLUS;
        }
        return SplitLocation.NEITHER;
    }","  public void test0()  throws Throwable  {
      Integer integer0 = new Integer((-478));
      Split<Object> split0 = new Split<Object>(integer0, (Object) null);
      split0.getPlus();
}"
5472,"    public T getMinus() {
        return minus;
    }","  public void test1()  throws Throwable  {
      Split<String> split0 = new Split<String>((String) null, (String) null);
      String string0 = split0.getMinus();
}"
5473,"    public SplitLocation getLocation() {
        if (minus != null) {
            return plus != null ? SplitLocation.BOTH : SplitLocation.MINUS;
        } else if (plus != null) {
            return SplitLocation.PLUS;
        }
        return SplitLocation.NEITHER;
    }","  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(51);
      Split<Object> split0 = new Split<Object>(integer0, integer0);
      SplitLocation splitLocation0 = split0.getLocation();
}"
5474,"    public SplitLocation getLocation() {
        if (minus != null) {
            return plus != null ? SplitLocation.BOTH : SplitLocation.MINUS;
        } else if (plus != null) {
            return SplitLocation.PLUS;
        }
        return SplitLocation.NEITHER;
    }","  public void test3()  throws Throwable  {
      Split<String> split0 = new Split<String>("""", (String) null);
      SplitLocation splitLocation0 = split0.getLocation();
}"
5475,"    public SplitLocation getLocation() {
        if (minus != null) {
            return plus != null ? SplitLocation.BOTH : SplitLocation.MINUS;
        } else if (plus != null) {
            return SplitLocation.PLUS;
        }
        return SplitLocation.NEITHER;
    }","  public void test4()  throws Throwable  {
      Split<Integer> split0 = new Split<Integer>((Integer) null, (Integer) null);
      SplitLocation splitLocation0 = split0.getLocation();
      Split<Object> split1 = new Split<Object>((Object) null, splitLocation0);
      SplitLocation splitLocation1 = split1.getLocation();
}"
5476,"    public SplitLocation getLocation() {
        if (minus != null) {
            return plus != null ? SplitLocation.BOTH : SplitLocation.MINUS;
        } else if (plus != null) {
            return SplitLocation.PLUS;
        }
        return SplitLocation.NEITHER;
    }","  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(2312);
      Split<Integer> split0 = new Split<Integer>(integer0, (Integer) null);
      split0.getMinus();
}"
5477,"    public SplitLocation getLocation() {
        if (minus != null) {
            return plus != null ? SplitLocation.BOTH : SplitLocation.MINUS;
        } else if (plus != null) {
            return SplitLocation.PLUS;
        }
        return SplitLocation.NEITHER;
    }","  public void test6()  throws Throwable  {
      Split<Integer> split0 = new Split<Integer>((Integer) null, (Integer) null);
      SplitLocation splitLocation0 = split0.getLocation();
      Split<Object> split1 = new Split<Object>((Object) null, splitLocation0);
      split1.getPlus();
}"
5478,"    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(this.getClass().getSimpleName())
            .append(""[location= "")
            .append(getLocation())
            .append("", minus= "")
            .append(minus)
            .append("", plus= "")
            .append(plus)
            .append(']');

        return sb.toString();
    }","  public void test7()  throws Throwable  {
      Integer integer0 = new Integer(2312);
      Split<Integer> split0 = new Split<Integer>(integer0, (Integer) null);
      Split<Object> split1 = new Split<Object>(integer0, split0);
      String string0 = split1.toString();
}"
5479,"    public <T> T parse(final String str, final DoubleFunction1N<T> fn) {
        final ParsePosition pos = new ParsePosition(0);

        readPrefix(str, pos);
        final double v = readTupleValue(str, pos);
        readSuffix(str, pos);
        endParse(str, pos);

        return fn.apply(v);
    }","  public void test0()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("""", """", """");
      DoubleFunction1N<String> doubleFunction1N0 = (DoubleFunction1N<String>) mock(DoubleFunction1N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse(""expected \""%s\"" but found \""%s\"""", doubleFunction1N0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \""expected \""%s\"" but found \""%s\""\"" at index 0: unable to parse number from string \""\""
         //
         verifyException(""org.apache.commons.geometry.core.internal.SimpleTupleFormat"", e);
      }
  }"
5480,"    public <T> T parse(final String str, final DoubleFunction1N<T> fn) {
        final ParsePosition pos = new ParsePosition(0);

        readPrefix(str, pos);
        final double v = readTupleValue(str, pos);
        readSuffix(str, pos);
        endParse(str, pos);

        return fn.apply(v);
    }","  public void test1()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      DoubleFunction2N<Object> doubleFunction2N0 = (DoubleFunction2N<Object>) mock(DoubleFunction2N.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(doubleFunction2N0).apply(anyDouble() , anyDouble());
      Object object0 = simpleTupleFormat0.parse(""(0.0, -301.20671257106)"", doubleFunction2N0);
}"
5481,"    public <T> T parse(final String str, final DoubleFunction1N<T> fn) {
        final ParsePosition pos = new ParsePosition(0);

        readPrefix(str, pos);
        final double v = readTupleValue(str, pos);
        readSuffix(str, pos);
        endParse(str, pos);

        return fn.apply(v);
    }","  public void test2()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      DoubleFunction2N<Object> doubleFunction2N0 = (DoubleFunction2N<Object>) mock(DoubleFunction2N.class, new ViolatedAssumptionAnswer());
      doReturn(""(2128.0, 2954.239, 2128.0)"").when(doubleFunction2N0).apply(anyDouble() , anyDouble());
      Object object0 = simpleTupleFormat0.parse(""(2128.0, 406.1)"", doubleFunction2N0);
}"
5482,"    public <T> T parse(final String str, final DoubleFunction1N<T> fn) {
        final ParsePosition pos = new ParsePosition(0);

        readPrefix(str, pos);
        final double v = readTupleValue(str, pos);
        readSuffix(str, pos);
        endParse(str, pos);

        return fn.apply(v);
    }","  public void test3()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat(""("", ""("");
      DoubleFunction1N<Object> doubleFunction1N0 = (DoubleFunction1N<Object>) mock(DoubleFunction1N.class, new ViolatedAssumptionAnswer());
      doReturn(""(0.0, 894.957484096391, 0.0("").when(doubleFunction1N0).apply(anyDouble());
      Object object0 = simpleTupleFormat0.parse(""(894.957484096391("", doubleFunction1N0);
}"
5483,"    public String getSuffix() {
        return suffix;
    }","  public void test4()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, (String) null, (String) null);
      String string0 = simpleTupleFormat0.getSuffix();
}"
5484,"    public String getPrefix() {
        return prefix;
    }","  public void test5()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat(""|wL/"", """");
      simpleTupleFormat0.getSuffix();
}"
5485,"    public String getSeparator() {
        return separator;
    }","  public void test6()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, (String) null, (String) null);
      String string0 = simpleTupleFormat0.getSeparator();
}"
5486,"    public String getPrefix() {
        return prefix;
    }","  public void test7()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("""", """", ""x[{ryWd'x)$f`<DI0"");
      simpleTupleFormat0.getSeparator();
}"
5487,"    public String getPrefix() {
        return prefix;
    }","  public void test8()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, (String) null, (String) null);
      String string0 = simpleTupleFormat0.getPrefix();
}"
5488,"    public String getPrefix() {
        return prefix;
    }","  public void test9()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("""", """");
      String string0 = simpleTupleFormat0.getPrefix();
}"
5489,"    public <T> T parse(final String str, final DoubleFunction1N<T> fn) {
        final ParsePosition pos = new ParsePosition(0);

        readPrefix(str, pos);
        final double v = readTupleValue(str, pos);
        readSuffix(str, pos);
        endParse(str, pos);

        return fn.apply(v);
    }","  public void test10()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, (String) null);
      DoubleFunction3N<Object> doubleFunction3N0 = (DoubleFunction3N<Object>) mock(DoubleFunction3N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse((String) null, doubleFunction3N0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.internal.SimpleTupleFormat"", e);
      }
  }"
5490,"    public <T> T parse(final String str, final DoubleFunction1N<T> fn) {
        final ParsePosition pos = new ParsePosition(0);

        readPrefix(str, pos);
        final double v = readTupleValue(str, pos);
        readSuffix(str, pos);
        endParse(str, pos);

        return fn.apply(v);
    }","  public void test11()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      DoubleFunction2N<Integer> doubleFunction2N0 = (DoubleFunction2N<Integer>) mock(DoubleFunction2N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse((String) null, doubleFunction2N0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.internal.SimpleTupleFormat"", e);
      }
  }"
5491,"    public <T> T parse(final String str, final DoubleFunction1N<T> fn) {
        final ParsePosition pos = new ParsePosition(0);

        readPrefix(str, pos);
        final double v = readTupleValue(str, pos);
        readSuffix(str, pos);
        endParse(str, pos);

        return fn.apply(v);
    }","  public void test12()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      DoubleFunction1N<Object> doubleFunction1N0 = (DoubleFunction1N<Object>) mock(DoubleFunction1N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse(""(-14.050863609464496, -14.050863609464496, -14.050863609464496)"", doubleFunction1N0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \""(-14.050863609464496, -14.050863609464496, -14.050863609464496)\"" at index 22: expected \"")\"" but found \""-\""
         //
         verifyException(""org.apache.commons.geometry.core.internal.SimpleTupleFormat"", e);
      }
  }"
5492,"    public <T> T parse(final String str, final DoubleFunction1N<T> fn) {
        final ParsePosition pos = new ParsePosition(0);

        readPrefix(str, pos);
        final double v = readTupleValue(str, pos);
        readSuffix(str, pos);
        endParse(str, pos);

        return fn.apply(v);
    }","  public void test13()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, (String) null);
      DoubleFunction1N<String> doubleFunction1N0 = (DoubleFunction1N<String>) mock(DoubleFunction1N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse((String) null, doubleFunction1N0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.geometry.core.internal.SimpleTupleFormat"", e);
      }
  }"
5493,"    public <T> T parse(final String str, final DoubleFunction1N<T> fn) {
        final ParsePosition pos = new ParsePosition(0);

        readPrefix(str, pos);
        final double v = readTupleValue(str, pos);
        readSuffix(str, pos);
        endParse(str, pos);

        return fn.apply(v);
    }","  public void test14()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("""", ""n=MLv"");
      DoubleFunction3N<Object> doubleFunction3N0 = (DoubleFunction3N<Object>) mock(DoubleFunction3N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse(""-3328.244444, -6489.5, -3328.244444, -3909.175324183775n=MLv"", doubleFunction3N0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \""-3328.244444, -6489.5, -3328.244444, -3909.175324183775n=MLv\"" at index 37: expected \""n=MLv\"" but found \""-3909\""
         //
         verifyException(""org.apache.commons.geometry.core.internal.SimpleTupleFormat"", e);
      }
  }"
5494,"    public <T> T parse(final String str, final DoubleFunction1N<T> fn) {
        final ParsePosition pos = new ParsePosition(0);

        readPrefix(str, pos);
        final double v = readTupleValue(str, pos);
        readSuffix(str, pos);
        endParse(str, pos);

        return fn.apply(v);
    }","  public void test15()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat(""ZaztE`_"", (String) null);
      DoubleFunction3N<Integer> doubleFunction3N0 = (DoubleFunction3N<Integer>) mock(DoubleFunction3N.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(doubleFunction3N0).apply(anyDouble() , anyDouble() , anyDouble());
      Integer integer0 = simpleTupleFormat0.parse(""ZaztE`_0.0, -1539.389477, 94.24"", doubleFunction3N0);
}"
5495,"    public <T> T parse(final String str, final DoubleFunction1N<T> fn) {
        final ParsePosition pos = new ParsePosition(0);

        readPrefix(str, pos);
        final double v = readTupleValue(str, pos);
        readSuffix(str, pos);
        endParse(str, pos);

        return fn.apply(v);
    }","  public void test16()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("",($YD"", (String) null);
      DoubleFunction2N<Object> doubleFunction2N0 = (DoubleFunction2N<Object>) mock(DoubleFunction2N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse("",($YD1506.4933621949, 1506.4933621949, 1506.4933621949, 1506.4933621949"", doubleFunction2N0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \"",($YD1506.4933621949, 1506.4933621949, 1506.4933621949, 1506.4933621949\"" at index 39: unexpected content
         //
         verifyException(""org.apache.commons.geometry.core.internal.SimpleTupleFormat"", e);
      }
  }"
5496,"    public String format(final double a) {
        final StringBuilder sb = new StringBuilder();

        if (prefix != null) {
            sb.append(prefix);
        }

        sb.append(a);

        if (suffix != null) {
            sb.append(suffix);
        }

        return sb.toString();
    }","  public void test17()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      String string0 = simpleTupleFormat0.format(1.0, 0.0, 0.0, (-1.0));
}"
5497,"    public String format(final double a) {
        final StringBuilder sb = new StringBuilder();

        if (prefix != null) {
            sb.append(prefix);
        }

        sb.append(a);

        if (suffix != null) {
            sb.append(suffix);
        }

        return sb.toString();
    }","  public void test18()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat(""ZaztE`_"", (String) null);
      String string0 = simpleTupleFormat0.format(0.0, 1130.4185, 1494.09, 0.0);
}"
5498,"    public String format(final double a) {
        final StringBuilder sb = new StringBuilder();

        if (prefix != null) {
            sb.append(prefix);
        }

        sb.append(a);

        if (suffix != null) {
            sb.append(suffix);
        }

        return sb.toString();
    }","  public void test19()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, (String) null, (String) null);
      String string0 = simpleTupleFormat0.format((-1434.5095470256647), (-1434.5095470256647), (-1434.5095470256647), (-1434.5095470256647));
}"
5499,"    public String format(final double a) {
        final StringBuilder sb = new StringBuilder();

        if (prefix != null) {
            sb.append(prefix);
        }

        sb.append(a);

        if (suffix != null) {
            sb.append(suffix);
        }

        return sb.toString();
    }","  public void test20()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat(""("", ""("");
      String string0 = simpleTupleFormat0.format(0.0, 894.957484096391, 0.0);
}"
5500,"    public String format(final double a) {
        final StringBuilder sb = new StringBuilder();

        if (prefix != null) {
            sb.append(prefix);
        }

        sb.append(a);

        if (suffix != null) {
            sb.append(suffix);
        }

        return sb.toString();
    }","  public void test21()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat(""ZaztE`_"", (String) null);
      String string0 = simpleTupleFormat0.format(94.24, (-1865.743841184081), 1.0);
}"
5501,"    public String format(final double a) {
        final StringBuilder sb = new StringBuilder();

        if (prefix != null) {
            sb.append(prefix);
        }

        sb.append(a);

        if (suffix != null) {
            sb.append(suffix);
        }

        return sb.toString();
    }","  public void test22()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, (String) null, (String) null);
      String string0 = simpleTupleFormat0.format((-1434.5095470256647), (-1434.5095470256647), (-1434.5095470256647));
}"
5502,"    public String format(final double a) {
        final StringBuilder sb = new StringBuilder();

        if (prefix != null) {
            sb.append(prefix);
        }

        sb.append(a);

        if (suffix != null) {
            sb.append(suffix);
        }

        return sb.toString();
    }","  public void test23()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      String string0 = simpleTupleFormat0.format(0.0, (-301.20671257106));
}"
5503,"    public String format(final double a) {
        final StringBuilder sb = new StringBuilder();

        if (prefix != null) {
            sb.append(prefix);
        }

        sb.append(a);

        if (suffix != null) {
            sb.append(suffix);
        }

        return sb.toString();
    }","  public void test24()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat(""ZaztE`_"", (String) null);
      String string0 = simpleTupleFormat0.format((-1865.743841184081), (-5059.2937));
}"
5504,"    public String format(final double a) {
        final StringBuilder sb = new StringBuilder();

        if (prefix != null) {
            sb.append(prefix);
        }

        sb.append(a);

        if (suffix != null) {
            sb.append(suffix);
        }

        return sb.toString();
    }","  public void test25()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, (String) null);
      String string0 = simpleTupleFormat0.format(0.7865940810722631, 0.7865940810722631);
}"
5505,"    public String format(final double a) {
        final StringBuilder sb = new StringBuilder();

        if (prefix != null) {
            sb.append(prefix);
        }

        sb.append(a);

        if (suffix != null) {
            sb.append(suffix);
        }

        return sb.toString();
    }","  public void test26()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, (String) null);
      String string0 = simpleTupleFormat0.format((-1828.3));
}"
5506,"    public String format(final double a) {
        final StringBuilder sb = new StringBuilder();

        if (prefix != null) {
            sb.append(prefix);
        }

        sb.append(a);

        if (suffix != null) {
            sb.append(suffix);
        }

        return sb.toString();
    }","  public void test27()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat(""("", ""("");
      String string0 = simpleTupleFormat0.format(0.0);
}"
5507,"    public String getSeparator() {
        return separator;
    }","  public void test28()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat(""("", ""("");
      String string0 = simpleTupleFormat0.format(0.0);
}"
5508,"    public String getSeparator() {
        return separator;
    }","  public void test29()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      String string0 = simpleTupleFormat0.getSeparator();
}"
5509,"    public <T> T parse(final String str, final DoubleFunction1N<T> fn) {
        final ParsePosition pos = new ParsePosition(0);

        readPrefix(str, pos);
        final double v = readTupleValue(str, pos);
        readSuffix(str, pos);
        endParse(str, pos);

        return fn.apply(v);
    }","  public void test30()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat(""("", ""("");
      DoubleFunction2N<String> doubleFunction2N0 = (DoubleFunction2N<String>) mock(DoubleFunction2N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse(""Kz2ZVqG h:%u"", doubleFunction2N0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \""Kz2ZVqG h:%u\"" at index 0: expected \""(\"" but found \""K\""
         //
         verifyException(""org.apache.commons.geometry.core.internal.SimpleTupleFormat"", e);
      }
  }"
5510,"    public <T> T parse(final String str, final DoubleFunction1N<T> fn) {
        final ParsePosition pos = new ParsePosition(0);

        readPrefix(str, pos);
        final double v = readTupleValue(str, pos);
        readSuffix(str, pos);
        endParse(str, pos);

        return fn.apply(v);
    }","  public void test31()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, """");
      DoubleFunction3N<Object> doubleFunction3N0 = (DoubleFunction3N<Object>) mock(DoubleFunction3N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse(""\""A{[D"", doubleFunction3N0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \""\""A{[D\"" at index 0: unable to parse number from string \""\""
         //
         verifyException(""org.apache.commons.geometry.core.internal.SimpleTupleFormat"", e);
      }
  }"
5511,"    public <T> T parse(final String str, final DoubleFunction1N<T> fn) {
        final ParsePosition pos = new ParsePosition(0);

        readPrefix(str, pos);
        final double v = readTupleValue(str, pos);
        readSuffix(str, pos);
        endParse(str, pos);

        return fn.apply(v);
    }","  public void test32()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat(""("", ""("");
      DoubleFunction1N<Object> doubleFunction1N0 = (DoubleFunction1N<Object>) mock(DoubleFunction1N.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(doubleFunction1N0).apply(anyDouble());
      Object object0 = simpleTupleFormat0.parse(""(894.957484096391("", doubleFunction1N0);
}"
5512,"    public String getSuffix() {
        return suffix;
    }","  public void test33()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      String string0 = simpleTupleFormat0.getSuffix();
}"
5513,"    public String getPrefix() {
        return prefix;
    }","  public void test34()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      String string0 = simpleTupleFormat0.getPrefix();
}"
5514,"    public <T> T parse(final String str, final DoubleFunction1N<T> fn) {
        final ParsePosition pos = new ParsePosition(0);

        readPrefix(str, pos);
        final double v = readTupleValue(str, pos);
        readSuffix(str, pos);
        endParse(str, pos);

        return fn.apply(v);
    }","  public void test35()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      DoubleFunction2N<Object> doubleFunction2N0 = (DoubleFunction2N<Object>) mock(DoubleFunction2N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse(""("", doubleFunction2N0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \""(\"" at index 1: unable to parse number from string \""\""
         //
         verifyException(""org.apache.commons.geometry.core.internal.SimpleTupleFormat"", e);
      }
  }"
5515,"    public GeometryInternalError() {
        super(ERROR_MSG);
    }","  public void test0()  throws Throwable  {
      GeometryInternalError geometryInternalError0 = new GeometryInternalError();
  }"
