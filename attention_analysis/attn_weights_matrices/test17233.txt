17233
Test: public void testArgumentsModifiedInOuterFunction() { test( "function g(callback) {\n" + " var f = callback;\n" + " arguments[0] = this;\n" + " f.apply(this, arguments);\n" + " function inner(callback) {" + " var x = callback;\n" + " x.apply(this);\n" + " }" + "}", "function g(callback) {\n" + " var f = callback;\n" + " arguments[0] = this;\n" + " f.apply(this, arguments);\n" + " function inner(callback) {" + " callback.apply(this);\n" + " }" + "}"); }
Code: public boolean apply(JSType type) { if (!type.restrictByNotNullOrUndefined().isSubtype( typeRegistry.getNativeType(OBJECT_TYPE))) { reportWarning(THIS_TYPE_NON_OBJECT, type.toString()); return false; } return true; }
tensor([[0.0412, 0.0932, 0.1539, 0.0441, 0.0646, 0.1121, 0.0364, 0.0633, 0.0646,
         0.0473, 0.0605, 0.0465, 0.0587, 0.0197, 0.0465, 0.0276, 0.0197],
        [0.0264, 0.1232, 0.1698, 0.0440, 0.0751, 0.1013, 0.0344, 0.0465, 0.0751,
         0.0395, 0.0679, 0.0464, 0.0534, 0.0137, 0.0464, 0.0231, 0.0137],
        [0.0350, 0.1130, 0.1758, 0.0422, 0.0667, 0.1127, 0.0407, 0.0493, 0.0667,
         0.0389, 0.0631, 0.0417, 0.0595, 0.0162, 0.0417, 0.0205, 0.0162],
        [0.0376, 0.1177, 0.1158, 0.0562, 0.0687, 0.1107, 0.0314, 0.0573, 0.0687,
         0.0498, 0.0728, 0.0495, 0.0585, 0.0133, 0.0495, 0.0292, 0.0133],
        [0.0453, 0.0948, 0.0981, 0.0584, 0.0769, 0.0774, 0.0444, 0.0652, 0.0769,
         0.0495, 0.0583, 0.0515, 0.0666, 0.0264, 0.0515, 0.0322, 0.0264],
        [0.0228, 0.1069, 0.2351, 0.0431, 0.0656, 0.1354, 0.0322, 0.0411, 0.0656,
         0.0279, 0.0706, 0.0312, 0.0486, 0.0094, 0.0312, 0.0240, 0.0094],
        [0.0287, 0.1070, 0.1186, 0.0473, 0.0777, 0.0984, 0.0404, 0.0594, 0.0777,
         0.0557, 0.0648, 0.0541, 0.0572, 0.0151, 0.0541, 0.0288, 0.0151],
        [0.0398, 0.0723, 0.1376, 0.0507, 0.0634, 0.1059, 0.0478, 0.0749, 0.0634,
         0.0584, 0.0557, 0.0436, 0.0616, 0.0249, 0.0436, 0.0318, 0.0249],
        [0.0453, 0.0948, 0.0981, 0.0584, 0.0769, 0.0774, 0.0444, 0.0652, 0.0769,
         0.0495, 0.0583, 0.0515, 0.0666, 0.0264, 0.0515, 0.0322, 0.0264],
        [0.0280, 0.1170, 0.1184, 0.0437, 0.0759, 0.1054, 0.0471, 0.0443, 0.0759,
         0.0481, 0.0689, 0.0453, 0.0650, 0.0207, 0.0453, 0.0304, 0.0207],
        [0.0436, 0.1291, 0.1239, 0.0511, 0.0618, 0.1049, 0.0421, 0.0574, 0.0618,
         0.0457, 0.0794, 0.0427, 0.0522, 0.0169, 0.0427, 0.0277, 0.0169],
        [0.0278, 0.1129, 0.1883, 0.0394, 0.0641, 0.1083, 0.0398, 0.0475, 0.0641,
         0.0424, 0.0689, 0.0387, 0.0637, 0.0171, 0.0387, 0.0213, 0.0171],
        [0.0430, 0.1100, 0.0992, 0.0464, 0.0626, 0.0901, 0.0483, 0.0556, 0.0626,
         0.0550, 0.0599, 0.0511, 0.0781, 0.0251, 0.0511, 0.0367, 0.0251],
        [0.0274, 0.0932, 0.1014, 0.0501, 0.0741, 0.1065, 0.0451, 0.0510, 0.0741,
         0.0654, 0.0593, 0.0609, 0.0616, 0.0158, 0.0609, 0.0374, 0.0158],
        [0.0278, 0.1129, 0.1883, 0.0394, 0.0641, 0.1083, 0.0398, 0.0475, 0.0641,
         0.0424, 0.0689, 0.0387, 0.0637, 0.0171, 0.0387, 0.0213, 0.0171],
        [0.0320, 0.1432, 0.1487, 0.0479, 0.0689, 0.1087, 0.0334, 0.0412, 0.0689,
         0.0415, 0.0634, 0.0434, 0.0554, 0.0141, 0.0434, 0.0317, 0.0141],
        [0.0274, 0.0932, 0.1014, 0.0501, 0.0741, 0.1065, 0.0451, 0.0510, 0.0741,
         0.0654, 0.0593, 0.0609, 0.0616, 0.0158, 0.0609, 0.0374, 0.0158]])