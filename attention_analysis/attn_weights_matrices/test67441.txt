67441
Test: public void testCollectionTypesRefined() { TypeFactory tf = newTypeFactory(); JavaType type = tf.constructType(new TypeReference<List<Long>>() { }); JavaType subtype = tf.constructSpecializedType(type, ArrayList.class); }
Code: public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass){final Class<?> rawBase = baseType.getRawClass();if (rawBase == subclass) {return baseType;}JavaType newType;do { if (rawBase == Object.class) {newType = _fromClass(null, subclass, TypeBindings.emptyBindings());break;}if (!rawBase.isAssignableFrom(subclass)) {throw new IllegalArgumentException(String.format("Class %s not subtype of %s", subclass.getName(), baseType));}if (baseType.getBindings().isEmpty()) {newType = _fromClass(null, subclass, TypeBindings.emptyBindings());break;}if (baseType.isContainerType()) {if (true) {if ((subclass == HashMap.class)|| (subclass == LinkedHashMap.class)|| (subclass == EnumMap.class)|| (subclass == TreeMap.class)) {newType = _fromClass(null, subclass,TypeBindings.create(subclass, baseType.getKeyType(), baseType.getContentType()));break;}} else if (baseType.isCollectionLikeType()) {if ((subclass == ArrayList.class)|| (subclass == LinkedList.class)|| (subclass == HashSet.class)|| (subclass == TreeSet.class)) {newType = _fromClass(null, subclass,TypeBindings.create(subclass, baseType.getContentType()));break;}if (rawBase == EnumSet.class) {return baseType;}}}int typeParamCount = subclass.getTypeParameters().length;if (typeParamCount == 0) {newType = _fromClass(null, subclass, TypeBindings.emptyBindings());break;}TypeBindings tb = _bindingsForSubtype(baseType, typeParamCount, subclass);if (baseType.isInterface()) {newType = baseType.refine(subclass, tb, null, new JavaType[] { baseType });} else {newType = baseType.refine(subclass, tb, baseType, NO_TYPES);}if (newType == null) {;}} while (false);return newType;}
tensor([[0.0048, 0.0075, 0.0086,  ..., 0.0114, 0.0041, 0.0094],
        [0.0048, 0.0085, 0.0090,  ..., 0.0156, 0.0038, 0.0081],
        [0.0049, 0.0084, 0.0078,  ..., 0.0122, 0.0045, 0.0091],
        ...,
        [0.0043, 0.0092, 0.0074,  ..., 0.0141, 0.0045, 0.0093],
        [0.0039, 0.0084, 0.0073,  ..., 0.0154, 0.0047, 0.0086],
        [0.0043, 0.0089, 0.0063,  ..., 0.0119, 0.0042, 0.0100]])